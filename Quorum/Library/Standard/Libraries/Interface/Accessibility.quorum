package Libraries.Interface

use Libraries.Interface.Item
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Events.SelectionEvent
use Libraries.Interface.Events.MenuChangeEvent
use Libraries.Interface.Events.TreeChangeEvent
use Libraries.Interface.Events.TreeTableChangeEvent
use Libraries.Interface.Events.ControlActivationEvent
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Events.TextChangeEvent
use Libraries.Interface.Events.WindowFocusEvent
use Libraries.Interface.Controls.Button
use Libraries.Interface.Controls.ToggleButton
use Libraries.Interface.Controls.TextField
use Libraries.Interface.Events.ProgressBarValueChangedEvent
use Libraries.Containers.Iterator
use Libraries.Containers.Array
use Libraries.Interface.Selections.ButtonGroupSelection
use Libraries.Interface.Selections.TreeTableSelection
use Libraries.Interface.Controls.TreeTableCell
use Libraries.Interface.Controls.ListItem
use Libraries.Interface.Selections.ListSelection
use Libraries.Interface.Selections.SpreadsheetSelection
use Libraries.Interface.Controls.Cell
use Libraries.Interface.Controls.TreeItem
use Libraries.Interface.Selections.TreeSelection
use Libraries.Interface.Controls.MenuItem
use Libraries.Interface.Selections.MenuSelection
use Libraries.Interface.Selections.Selection
use Libraries.Game.GameStateManager
use Libraries.Interface.Selections.TextBoxSelection
use Libraries.Interface.Selections.TextFieldSelection
use Libraries.Interface.Selections.TabPaneSelection

/*
    Accessibility is a class designed to encapsulate accessibility concepts across all operating systems, 
    inside of the graphics and user interface system. Accessibility systems are not the same everywhere, 
    including on Windows (UIA), Mac (NSAccessibility), or the web, and as such each platform or operating 
    environment must implement its own Accessibility sub-class. 

    Attribute: Author Andreas Stefik

*/
class Accessibility
    GameStateManager manager
    Item lastFocused = undefined

    /*
        This action indicates that an item had its name changed.

        Attribute: Parameter item the item that had its name changed.
    */
    blueprint action NameChanged(Item item)

    /*
        This action indicates that an item had its description changed.

        Attribute: Parameter item the item that had its name changed.
    */
    blueprint action DescriptionChanged(Item item)

    /*
        This action indicates that an item's position and/or size changed.

        Attribute: Parameter item the item that changed.
    */
    blueprint action BoundsChanged(Item item)

    /*
        This action indicates that a text field in password mode had its value changed.

        Attribute: Parameter field a particular field that had its password changed.
    */
    blueprint action TextFieldUpdatePassword(TextField field)

    /*
        In some implementations, this triggers a focus change event. 
    */
    action Update
        Item focus = manager:GetFocus()
        if focus not= lastFocused
            FocusEvent event
            event:Initialize(lastFocused, focus)
            FocusChanged(event)
            
            lastFocused = focus
        end
    end

    /*
        This action indicates that a progress bar has had its value changed.

        Attribute: Parameter progress the progress bar that had its value updated.
    */
    blueprint action ProgressBarValueChanged(ProgressBarValueChangedEvent progress)

    blueprint action TextSelectionChanged(TextBoxSelection selection)

    blueprint action TextSelectionChanged(TextFieldSelection selection)

    blueprint action Select(Item item) returns boolean

    /*
        This action indicates that the selection has changed for a particular item.

        Attribute: Parameter event this provides more information about how the selection was changed.
    */
    action SelectionChanged(SelectionEvent event)
        Selection selection = event:GetSelection()
        if selection is TextBoxSelection
            TextBoxSelection textSelection = cast(TextBoxSelection, selection)
            TextSelectionChanged(textSelection)
        elseif selection is TextFieldSelection
            TextFieldSelection textSelection = cast(TextFieldSelection, selection)
            TextSelectionChanged(textSelection)

        elseif selection is TabPaneSelection
            // Do TabPane things
        elseif selection is MenuSelection
            
            MenuSelection menuSelection = cast(MenuSelection, selection)

            if not menuSelection:IsEmpty()
                Array<MenuItem> path = menuSelection:GetPath()

                Item selectedMenuItem = path:Get(path:GetSize()-1)
                

                Select(selectedMenuItem)
            else
                // TODO: Deselect any native selection
                //Deselect(currentSelection)
            end

        elseif selection is TreeSelection

            TreeSelection treeSelection = cast(TreeSelection, selection)

            if not treeSelection:IsEmpty()
                Array<TreeItem> path = treeSelection:GetPath()

                Item selectedTreeItem = path:Get(path:GetSize()-1)

                Select(selectedTreeItem)
            end

        elseif selection is SpreadsheetSelection
            SpreadsheetSelection tableSelection = cast(SpreadsheetSelection, selection)
            if not tableSelection:IsEmpty()
                Cell cell = tableSelection:Get()

                Select(cell)
            end
        elseif selection is ListSelection
            ListSelection listSelection = cast(ListSelection, selection)
            if not listSelection:IsEmpty()
                ListItem listItem = listSelection:GetListItem()

                Select(listItem)
            end
        elseif selection is TreeTableSelection
            TreeTableSelection treeTableSelection = cast(TreeTableSelection, selection)
            if not treeTableSelection:IsEmpty()
                TreeTableCell cell = treeTableSelection:Get()

                Select(cell)
            end
        elseif selection is ButtonGroupSelection
            ButtonGroupSelection groupSelection = cast(ButtonGroupSelection, selection)
            if not groupSelection:IsEmpty()
                ToggleButton button = groupSelection:GetButton()

                Select(button)
            end
        else
            // Do generic things
        end
    end

    /*
        This action indicates that a button has been activated, which can be done either through a click, 
        use of the enter key, or really any other mechanism allowable in the implementation.

        Attribute: Parameter button the button that was activated.
    */
    blueprint action ButtonActivated(Button button)

    /*
        This action indicates that a toggle button has had its status changed.

        Attribute: Parameter Item the item that had its name changed.
    */
    blueprint action ToggleButtonToggled(ToggleButton button)

    /*
        This action indicates that the focus changed. Generally, implementing this is a minimum bar
        for almost any kind of meaningful accessibility interaction.

        Attribute: Parameter event the event with information about the focus.
    */
    blueprint action FocusChanged(FocusEvent event)

    /*
        This action adds on a per platform basis any item that needs to raw to go the native system.

        Attribute: Parameter Item the item to be added
    */
    blueprint action NativeAdd(Item item) returns boolean

    /*
        This action indicates that an item should be explicitly removed from the native accessibility system. 

        Attribute: Parameter Item the item to be removed
    */
    blueprint action NativeRemove(Item item) returns boolean

    /*
        This action indicates that an item should be explicitly added to the accessibility system. 

        Attribute: Parameter Item the item to be added
    */
    action Add(Item item)
        //this is the same code from AccessibilityManager.quorum
        NativeAdd(item)
        // Add the children
        if item is Item2D
            Item2D temp = cast(Item2D, item)
            Array<Item2D> children = temp:GetChildren()
            
            integer counter = 0

            repeat while counter < children:GetSize()
                Add(children:Get(counter))
                counter = counter + 1
            end

        elseif item is Item3D
            Item3D temp = cast(Item3D, item)
            Iterator<Item3D> children = temp:GetItems()

            Item3D child = undefined

            repeat while children:HasNext()
                child = children:Next()
                Add(child)
            end
        end
    end

    /*
        This action indicates that an item should be explicitly removed from the accessibility system. 

        Attribute: Parameter Item the item to be removed
    */
    action Remove(Item item)
        //this is the same code from AccessibilityManager.quorum
        // If the item being removed has children then remove them first.
        //Is this necessary or does the native layer figure this out?
        if item is Item2D
            Item2D temp = cast(Item2D, item)
            Array<Item2D> children = temp:GetChildren()
            
            integer counter = 0

            repeat while counter < children:GetSize()
                Remove(children:Get(counter))
                counter = counter + 1
            end

        elseif item is Item3D
            Item3D temp = cast(Item3D, item)
            Iterator<Item3D> children = temp:GetItems()
            
            Item child = undefined

            repeat while children:HasNext()
                child = children:Next()
                Remove(child)
            end
        end

        NativeRemove(item)
    end

    /*
        This action indicates a menu was changed and the accessibility system should be informed.

        Attribute: Parameter event the event about the menu change.
    */
    blueprint action MenuChanged(MenuChangeEvent event)

    /*
        This action indicates that a tree was changed and this notifies the accessibility system.

        Attribute: Parameter event the event about the changes to the tree.
    */
    blueprint action TreeChanged(TreeChangeEvent event)

    /*
        This action indicates that a tree table was changed and this notifies the accessibility system.

        Attribute: Parameter event the event about the changes to the tree table.
    */
    blueprint action TreeTableChanged(TreeTableChangeEvent event)

    /*
        This action indicates that a control was activated and this notifies the accessibility system.

        Attribute: Parameter event the event about the control.
    */
    blueprint action ControlActivated(ControlActivationEvent event)

    /*
        This action indicates that a component that involves text had a change in its value. This is used
        in multiple components, including text fields and text boxes.

        Attribute: Parameter event the event indicating what text changed.
    */
    blueprint action TextChanged(TextChangeEvent event)

    /*
        This action indicates that there was a change in the window focus. Broadly, this occurs when 
        there is a pop-up box, dialog, or something similar. 

        Attribute: Parameter event the event about the changes to the tree.
    */
    blueprint action WindowFocusChanged(WindowFocusEvent event)

    /*
        This action indicates to make a statement from the accessibility system. Not all accessibility systems
        support such events and in our experience, even if they do, whether they work is inconsistent. We 
        urge caution in relying in production on these actions.

        Attribute: Parameter item The item to be notified from
        Attribute: Parameter value The value to speak
    */
    blueprint action Notify(Item item, text value)

    /*
        This action indicates to make a statement from the accessibility system. Not all accessibility systems
        support such events and in our experience, even if they do, whether they work is inconsistent. We 
        urge caution in relying in production on these actions.

        Attribute: Parameter item The item to be notified from
        Attribute: Parameter value The value to speak
        Attribute: Parameter notificationType some systems have a notification type, although in our experience whether 
            particular implementations actually correctly respond to them is hit and miss.
    */
    blueprint action Notify(Item item, text value, integer notificationType)

    /*
        Accessibility may require custom setup for each platform. This action is called
        during StartGame, before a window is created.
    */
    action Setup
    end

    /*
    The Shutdown action shuts down the underlying accessibility architecture.
    */
    blueprint action Shutdown

    /*
        This action hypothetically tells us whether a screen reader is being used. In almost all implementations, 
        whether this works is hit and miss. Some accessibility systems, at the operating system level, claim to report this
        but do not do so correctly. Other systems explicitly do not allow querying for this information (e.g., the web). In
        any case, if this implementation returns false, it means either there is no screen reader or the system does
        not allow querying. 

        Attribute: Returns whether or not a screen reader is listening, although whether this is correct is operating environment
            dependent.
    */
    blueprint action IsScreenReaderListening returns boolean
end
