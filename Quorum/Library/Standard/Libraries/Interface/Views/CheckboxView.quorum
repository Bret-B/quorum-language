package Libraries.Interface.Views

use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.Painter2D
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.PixelMap
use Libraries.Game.Graphics.Format
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Controls.Control

class CheckboxView is ToggleView, ControlShaderView

    boolean toggled = false
    Drawable center
    integer borderThickness = 0

    on create
        SetName("CheckboxView")
    end

    action Initialize(LayoutProperties properties)
        parent:ControlShaderView:Initialize()

        borderThickness = properties:GetBorderThickness()

        center:Load(CreateCheckTexture())
        center:SetSize(center:GetWidth() - 2 * borderThickness, center:GetHeight() - 2 * borderThickness)
        center:SetPosition(borderThickness, borderThickness)

        center:Hide()
        center:SetName("Checkmark")

        Add(center)
    end

    private action CreateCheckTexture returns Texture
        PixelMap map
        Format format
        format:SetValue(format:RGBA8888)

        Color transparent
        transparent:SetColor(1, 1, 1, 0)
        Color white = transparent:White()

        map:CreatePixelMap(50, 50, format)
        map:Fill(transparent)
        integer i = -2
        repeat while i < 3
            map:DrawLine(10, 30 + i, 20, 40 + i, white)
            map:DrawLine(20, 40 + i, 40, 10 + i, white)
            i = i + 1
        end

        Color blur = transparent:CustomColor(1, 1, 1, 0.5)
        map:DrawLine(10, 30 - 3, 20, 40 - 3, blur)
        map:DrawLine(20, 40 - 3, 40, 10 - 3, blur)
        map:DrawLine(10, 30 + 3, 20, 40 + 3, blur)
        map:DrawLine(20, 40 + 3, 40, 10 + 3, blur)

        Texture texture
        texture:LoadFromPixelMap(map)
        return texture
    end

    action SetCheckColor(ColorGroup color)
        center:SetColor(color)
    end

    action GetCheckColor returns ColorGroup
        return center:GetColorGroup()
    end

    action SetToggleState(boolean selected)
        toggled = selected
        
        if toggled
            center:Show()
        else
            center:Hide()
        end
    end

    action GetToggleState returns boolean
        return toggled
    end

    action QueueForDrawing(Painter2D painter)
        parent:Drawable:QueueForDrawing(painter)
    end

    action UpdateSize(number width, number height)
        Texture texture = GetTexture()
        if texture = undefined
            return now
        end

        SetSize(width, height)
        center:SetSize(width - 2 * borderThickness, height - 2 * borderThickness)
    end

    action UpdatePosition(number x, number y, number z)
        SetPosition(x, y, z)
    end

    action UpdateRotation(number angle)
        SetRotation(angle)
    end

    action UpdateFlipping(boolean flipX, boolean flipY)
        SetFlipX(flipX)
        SetFlipY(flipY)
    end

    action Copy returns ControlView
        CheckboxView view
        if GetItem() is Control
            Control control = cast(Control, GetItem())
            view:Initialize(control:GetDefaultLayoutProperties())
        end
        return view
    end
end