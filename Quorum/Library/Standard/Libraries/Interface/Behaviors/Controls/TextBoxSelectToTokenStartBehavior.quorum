package Libraries.Interface.Behaviors.Controls

use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Item
use Libraries.Interface.Controls.TextBox
use Libraries.Interface.Selections.TextBoxSelection

class TextBoxSelectToTokenStartBehavior is Behavior
    action Run(BehaviorEvent event)
        Item item = event:GetItem()
        if not (item is TextBox)
            return now
        end

        TextBox textBox = cast(TextBox, item)
        TextBoxSelection selection = textBox:GetSelection()

        integer start = selection:GetStartIndex()
        integer finish = selection:GetEndIndex()
        integer size = textBox:GetSize()

        integer caretPosition = textBox:GetCaretPosition()
        integer tokenStart = textBox:GetTokenStartIndex()

        textBox:SetCaretPosition(tokenStart)
        if start > tokenStart or start = finish or caretPosition = tokenStart//the selection is after or equal to the caret position, we are going to lengthen it
            textBox:Select(tokenStart, finish, false)
        else    //the selection is before the caret, we are going to shorten the existing selection
            textBox:Select(start, tokenStart, true)
        end
    end

    action IsFinished returns boolean
        return true
    end


//    action Run(BehaviorEvent event)
//        Item item = event:GetItem()
//        if not (item is TextBox)
//            return now
//        end
//        TextBox textBox = cast(TextBox, item)
//        TextBoxSelection selection = textBox:GetSelection()
//
//        integer startSelection = selection:GetStartIndex()
//        integer endSelection = selection:GetEndIndex()
//
//
//        boolean tokenIsDone = false
//        boolean isReducingCurrentSelection = false
//
//        text currentToken = ""
//        text textValue = textBox:GetText()
//        integer currentIndex = textBox:GetCaretPosition()
//        integer beginIndex = currentIndex
//        text previousCharacter = ""
//        text currentCharacter = ""
//
//        //need to check if we are reducing the selection or adding to the current selection
//        if ((endSelection = currentIndex) and (startSelection not= endSelection)) //then we are reducing the current selection set flag
//            isReducingCurrentSelection = true
//        end
//
//        text carriageReturn = textValue:GetCarriageReturn()
//        text lineFeed = textValue:GetLineFeed()
//        
//        text separator = textBox:GetLineSeparator()
//        
//        //windows
//        if separator = (carriageReturn + lineFeed)
//            if(0 < currentIndex)  //moving to the next line after stop at the end of the line
//                previousCharacter = textValue:GetCharacter(currentIndex - 1)
//                if previousCharacter = previousCharacter:GetLineFeed()  
//                    currentIndex = currentIndex - 1
//                    currentToken = currentToken + currentToken:GetCarriageReturn() + " "
//                    tokenIsDone = true
//                end
//            end
//        else    //osx
//            if (0 < currentIndex)
//                previousCharacter = textValue:GetCharacter(currentIndex - 1)
//                if previousCharacter = previousCharacter:GetLineFeed()
//                    currentIndex = currentIndex - 1
//                    currentToken = currentToken + currentToken:GetLineFeed()
//                    tokenIsDone = true
//                end
//            end
//        end
//
////        if(0 < currentIndex)  //stops the caret at the end of the previous line
////            previousCharacter = textValue:GetCharacter(currentIndex - 1)
////            if previousCharacter = previousCharacter:GetLineFeed()
////                currentIndex = currentIndex - 1
////                currentToken = currentToken + currentToken:GetLineFeed()
////                tokenIsDone = true
////            elseif previousCharacter = previousCharacter:GetCarriageReturn()
////                currentIndex = currentIndex - 1
////                currentToken = currentToken + currentToken:GetCarriageReturn()
////                tokenIsDone = true
////            end
////        end
//
//        repeat while not(tokenIsDone)
//            if 0 < currentIndex
//                previousCharacter = textValue:GetCharacter(currentIndex - 1)
//                //"Special" single character tokens signify the beginning of the "special" token and end of the previous token
//                if(IsSpecialCharacter(previousCharacter))
//                    //The "Special" single character token is the current token
//                    if (beginIndex = currentIndex)
//                        currentToken = previousCharacter
//                        if previousCharacter = ")"
//                            if 0 < (currentIndex - 1)
//                                if textValue:GetCharacter(currentIndex - 2) = "("
//                                    currentToken = currentToken + textValue:GetCharacter(currentIndex - 2)
//                                end
//                            end
//                        end
//                        if previousCharacter = ">"
//                            if 0 < (currentIndex - 1)
//                                if textValue:GetCharacter(currentIndex - 2) = ">"
//                                    currentToken = currentToken + textValue:GetCharacter(currentIndex - 2)
//                                end
//                            end
//                        end
//                        if previousCharacter= "<"
//                            if 0 < (currentIndex - 1)
//                                if textValue:GetCharacter(currentIndex - 2) = "<"
//                                    currentToken = currentToken + textValue:GetCharacter(currentIndex - 2)
//                                end
//                            end
//                        end
//                        if previousCharacter = "/"
//                            if 0 < (currentIndex - 1)
//                                if textValue:GetCharacter(currentIndex - 2) = "/"
//                                    currentToken = currentToken + textValue:GetCharacter(currentIndex - 2)
//                                end
//                            end
//                        end
//                    end    
//                    tokenIsDone = true
//                /* skip past white space */           
//                elseif (IsWhiteSpace(previousCharacter)) and  (0 < (currentIndex - 1))
//                    if ((IsEndOfLine(previousCharacter)) and (beginIndex not= currentIndex))
//                        tokenIsDone = true
//                    
//                    elseif currentIndex = beginIndex and (0 < (currentIndex - 1))
//                        currentToken = currentToken + previousCharacter
//                        currentIndex = currentIndex - 1
//                        previousCharacter = textValue:GetCharacter(currentIndex - 1)
//                        if(IsWhiteSpace(previousCharacter))
//                            repeat while (not(tokenIsDone) and IsWhiteSpace(previousCharacter)) and (0 < (currentIndex - 1))
//                                if (IsEndOfLine(previousCharacter) and (beginIndex not= currentIndex))
//                                    tokenIsDone = true
//                                end
//                                currentToken = currentToken + previousCharacter
//                                currentIndex = currentIndex - 1
//                                previousCharacter = textValue:GetCharacter(currentIndex - 1)
//                            end
//                            //tokenIsDone = true
//                            previousCharacter = textValue:GetCharacter(currentIndex)
//                        elseif (IsSpecialCharacter(previousCharacter))
//                            currentToken = currentToken + previousCharacter
//                            if previousCharacter = ")"
//                                if 0 < (currentIndex - 1)
//                                    if textValue:GetCharacter(currentIndex - 2) = "("
//                                        currentToken = currentToken + textValue:GetCharacter(currentIndex - 2)
//                                    end
//                                end
//                            end
//                            if previousCharacter = ">"
//                                if 0 < (currentIndex - 1)
//                                    if textValue:GetCharacter(currentIndex - 2) = ">"
//                                        currentToken = currentToken + textValue:GetCharacter(currentIndex - 2)
//                                    end
//                                end
//                            end
//                            if previousCharacter= "<"
//                                if 0 < (currentIndex - 1)
//                                    if textValue:GetCharacter(currentIndex - 2) = "<"
//                                        currentToken = currentToken + textValue:GetCharacter(currentIndex - 2)
//                                    end
//                                end
//                            end
//                            if previousCharacter = "/"
//                                if 0 < (currentIndex - 1)
//                                    if textValue:GetCharacter(currentIndex - 2) = "/"
//                                        currentToken = currentToken + textValue:GetCharacter(currentIndex - 2)
//                                    end
//                                end
//                            end
//                            tokenIsDone = true 
//                        else
//                            previousCharacter = textValue:GetCharacter(currentIndex)
//                        end
//                    else
//                        tokenIsDone = true
//                    end
//                else
//                    currentToken = currentToken + previousCharacter
//                    currentIndex = currentIndex - 1
//                end
//            else
//                beginIndex = 0
//                currentToken = ""
//                tokenIsDone = true
//            end
//        end
//        
//        integer tokenIndex = beginIndex - currentToken:GetSize()
//        if not(tokenIndex >= 0)
//            tokenIndex = 0
//        end
//        if not isReducingCurrentSelection   //add the length of the current token to the selection
//            textBox:SetCaretPosition(tokenIndex)
//            textBox:Select(tokenIndex, endSelection, false)
//        else    //subtract the length of the current token from the selection
//            textBox:SetCaretPosition(tokenIndex)
//            /* Special case when reversing a selection from SelectToTokenEnd which uses the token's
//            end index (the SelectToTokenStart uses the token's start index, in this case a white space 
//            that falls between the reverse selection will cause the program to crash */
//            if startSelection > (tokenIndex)
//                textBox:Select(tokenIndex, startSelection, true)
//            else
//                textBox:Select(startSelection, tokenIndex, true)
//            end
//        end
//        
//    end
//
//    private action IsWhiteSpace(text value) returns boolean
//        boolean isWhiteSpace = false
//        if value = " " or value = value:GetCarriageReturn() or value = value:GetLineFeed() or 
//        value = value:GetTab()
//            isWhiteSpace = true
//        end
//        return isWhiteSpace
//    end
//
//    private action IsSpecialCharacter(text value) returns boolean
//        boolean isSpecialCharacter = false
//        if value = "." or value = "/" or value = "*" or value = "-" or value = "+"
//        or value = "(" or value = ")" or value = ":" or value = "<" or value = ">"
//        or value = ";" or value = "," or value = "=" or value = value:GetDoubleQuote()
//            isSpecialCharacter = true
//        end
//        return isSpecialCharacter
//    end
//
//    private action IsEndOfLine(text value) returns boolean
//        boolean isEndOfLine = false
//        if value = value:GetCarriageReturn() or value = value:GetLineFeed()
//            isEndOfLine = true
//        end
//        return isEndOfLine
//    end
//
//    action IsFinished returns boolean
//        return true
//    end
end