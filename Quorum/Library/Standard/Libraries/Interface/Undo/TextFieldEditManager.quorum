package Libraries.Interface.Undo

use Libraries.Interface.Events.TextChangeListener
use Libraries.Interface.Events.TextChangeEvent
use Libraries.Interface.Controls.TextBox
use Libraries.Interface.Undo.EditManager
use Libraries.Interface.Undo.Edit
use Libraries.Interface.Undo.TextBoxEdit
use Libraries.Interface.Undo.TextBoxEditState
use Libraries.Interface.Controls.TextField


class TextFieldEditManager is EditManager, TextChangeListener
    /*
        This state is used to tell the edit manager to ignore any upcoming changes
        to the TextBox. The manager will not leave this state until set to another
    */
    public constant integer NULL_STATE = 0
    /*
        This state is for when a word is being added to the TextBox
    */
    public constant integer ADD_WORD_STATE = 1
    /*
        This state is for when whitespace is being added to the TextBox
    */
    public constant integer ADD_SPACE_STATE = 2
    /*
        This state is for when a word is being deleted from the TextBox
    */
    public constant integer DELETE_WORD_STATE = 3
    /*
        This state is for when whitespace is being deleted from the TextBox
    */
    public constant integer DELETE_SPACE_STATE = 4
    /*
        This state is used for saving more complex actions such as adding 
        multiple indentations to the text box. If the text box is set to 
        this the text box wont leave it until it is switched out to 
        the RESET_STATE
    */
    public constant integer SPECIAL_STATE = 5
    /*
        The manager will be in this state when it is ready for changes to the TextBox.
    */
    public constant integer RESET_STATE = 6

    /*
        This state is used for turning off the manager. This means that the manager
        will no longer have any edits and will try to make any new ones. Different
        from the NULL_STATE in that the OFF_STATE is mainly for use in TextBoxes 
        that do need Undo functionality
    */
    public constant integer OFF_STATE = 7

    //These variables have all the information needed for the currentState
    private integer currentState = 0
    private text currentText = ""
    private TextFieldEdit currentTextFieldEdit = undefined
    private TextFieldInsertEdit currentInsertEdit = undefined
    private TextFieldDeleteEdit currentDeleteEdit = undefined

    //This are used by the Insert and Delete edits to keep track of when to save
    //the current edit
    private integer expectedCaretPosition = -1
    //This is used by the delete edit to insert in the proper place
    private integer lowestIndex = -1
    
    TextField box = undefined

    on create
        currentState = RESET_STATE
    end

    action SetTextField(TextField newBox)
        me:box = newBox
    end

    action GetTextField returns TextField
        return me:box
    end

    action GetCurrentState returns integer
        return currentState
    end

    /*If true is passed this will empty the manager and it will no longer save any states
        until called again with false*/
    action SetOff(boolean off)
        if off
            Empty()
            me:currentState = OFF_STATE
        else
            me:currentState = RESET_STATE
        end
    end

    action CanUndo returns boolean
        if (currentTextFieldEdit not= undefined or 
            currentInsertEdit not= undefined or 
            currentDeleteEdit not= undefined)
            return true
        end
        return parent:EditManager:CanUndo()
    end

    action Undo
        //save current state
        Reset()
        //ignore upcoming changes
        SetToIgnore(true)
        //do the undo
        parent:EditManager:Undo()
        //stop ignoring changes
        SetToIgnore(false)
    end

    action Redo
        //ignore upcoming changes
        SetToIgnore(true)
        //do the redo
        parent:EditManager:Redo()
        //stop ignoring changes
        SetToIgnore(false)
    end

    action SetSpecialAction(boolean start)
        if start
            SaveCurrentEdit()
            me:currentState = SPECIAL_STATE

            TextFieldEdit edit
            edit:SetTextField(box)
            TextFieldEditState oldState = box:GetCurrentEditState()
            edit:SetUndoState(oldState)

            currentTextFieldEdit = edit
        else
            Reset()
        end
    end


    /*
        If true then the Edit Manager will be in the NULL_STATE and will ignore
        any text change events until set to false
    */
    action SetToIgnore(boolean ignore)
        if currentState = OFF_STATE
            return now
        end
        if ignore
            me:currentState = NULL_STATE
        else
            me:currentState = RESET_STATE
        end
    end

    /*
        Saves the current Edit and sets the state to RESET
    */
    action Reset
        if currentState = RESET_STATE or currentState = NULL_STATE or currentState = OFF_STATE
            return now
        end
        SaveCurrentEdit()
        me:currentState = RESET_STATE
    end

    action TextChanged(TextChangeEvent event)
        if currentState = NULL_STATE or currentState = SPECIAL_STATE or currentState = OFF_STATE
            return now
        end
        
        integer eventType = event:GetEventType()
        if eventType = event:ADDED
            TextWasAdded(event:GetAddedText(), event:GetIndex())
        elseif eventType = event:DELETED
            TextWasDeleted(event:GetDeletedText(), event:GetIndex())
        else
            //This is if the text is MODIFIED
            //which is just an insert where selected text was deleted
            Reset()//always start a new edit for it 
            TextWasAdded(event:GetAddedText(), event:GetIndex())
            currentInsertEdit:SetDeletedText(event:GetDeletedText())
        end
    end

    private action TextWasAdded(text added, integer index)
        integer expectedState = 0
        
        if added:Trim() = ""
            expectedState = ADD_SPACE_STATE      
        else
            expectedState = ADD_WORD_STATE
        end

        if (currentState = ADD_WORD_STATE or currentState = ADD_SPACE_STATE)
            //check if there was a switch to different type of add
            if currentState = expectedState
                if index not= expectedCaretPosition
                    SaveCurrentEdit()
                    MakeNewInsertEdit(added,index)
                    currentState = expectedState
                    return now
                end
                currentText = currentText + added
                expectedCaretPosition = expectedCaretPosition + added:GetSize()
            else 
            //state switch
                SaveCurrentEdit()
                MakeNewInsertEdit(added, index)
                currentState = expectedState
            end
        else
            //make new edit
            SaveCurrentEdit()
            MakeNewInsertEdit(added, index)
            currentState = expectedState
        end
    end

    private action TextWasDeleted(text deleted, integer index)
        integer expectedState = 0

        if deleted:GetSize() > 1
            SaveCurrentEdit()
            currentState = DELETE_WORD_STATE
            MakeNewDeleteEdit(deleted, index)
            Reset()
            return now
        end

        if deleted:Trim() = ""
            expectedState = DELETE_SPACE_STATE
        else
            expectedState = DELETE_WORD_STATE
        end


        if (currentState = DELETE_WORD_STATE or currentState = DELETE_SPACE_STATE)
            //check if there was a switch to different type of delete
            if currentState = expectedState
                if index = expectedCaretPosition
                //if it was a forward delete then APPEND to the text
                    currentText = currentText + deleted
                elseif index = (expectedCaretPosition - 1)
                //if it was a backward delete then PREPEND to the text
                    currentText = deleted + currentText
                else
                    SaveCurrentEdit()
                    MakeNewDeleteEdit(deleted,index)
                    currentState = expectedState
                    return now
                end
                if index < lowestIndex
                    lowestIndex = index
                end
                expectedCaretPosition = index
            else 
            //state switch
                SaveCurrentEdit()
                MakeNewDeleteEdit(deleted, index)
                currentState = expectedState
            end
        else
            //make new edit
            SaveCurrentEdit()
            MakeNewDeleteEdit(deleted, index)
            currentState = expectedState
        end
    end

    private action MakeNewInsertEdit(text added, integer index)
        TextFieldInsertEdit edit
        edit:SetTextField(box)
        edit:SetCaretStartPosition(index)
        currentText = added
        expectedCaretPosition = index + added:GetSize()
        currentInsertEdit = edit
    end

    private action MakeNewDeleteEdit(text deleted, integer index)
        TextFieldDeleteEdit edit
        edit:SetTextField(box)
        currentText = deleted
        expectedCaretPosition = index
        lowestIndex = index
        currentDeleteEdit = edit
    end

    private action SaveCurrentEdit
        if currentState = RESET_STATE or currentState = NULL_STATE or currentState = OFF_STATE
            return now
        end

        if currentState = SPECIAL_STATE
            TextFieldEditState newState = box:GetCurrentEditState()
            currentTextFieldEdit:SetRedoState(newState)
            Add(currentTextFieldEdit)
        elseif (currentState = ADD_WORD_STATE or currentState = ADD_SPACE_STATE)
            currentInsertEdit:SetCaretEndPosition(currentInsertEdit:GetCaretStartPosition() + currentText:GetSize())
            currentInsertEdit:SetText(currentText)
            Add(currentInsertEdit)
        elseif currentState = DELETE_WORD_STATE or currentState = DELETE_SPACE_STATE
            currentDeleteEdit:SetCaretPosition(lowestIndex)
            currentDeleteEdit:SetText(currentText)
            Add(currentDeleteEdit)
        end

        currentTextFieldEdit = undefined
        currentInsertEdit = undefined
        currentDeleteEdit = undefined
        currentText = ""
        expectedCaretPosition = -1
        lowestIndex = -1
    end

    /*
        This action empties the EditManager of all edits. In the process, it clears the current
        state and calls dispose on each edit to ensure it has the opportunity to free any resources.
    */
    action Empty
        Reset()
        parent:EditManager:Empty()
    end
end