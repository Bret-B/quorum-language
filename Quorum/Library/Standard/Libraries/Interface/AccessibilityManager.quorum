package Libraries.Interface

use Libraries.Interface.Item
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Events.SelectionEvent
use Libraries.Interface.Events.MenuChangeEvent
use Libraries.Interface.Events.TreeChangeEvent
use Libraries.Interface.Events.ControlActivationEvent
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Events.TextChangeEvent
use Libraries.Interface.Events.WindowFocusEvent
use Libraries.Interface.Selections.Selection
use Libraries.Interface.Selections.TextBoxSelection
use Libraries.Interface.Selections.TextFieldSelection
use Libraries.Interface.Selections.TabPaneSelection
use Libraries.Interface.Selections.MenuSelection
use Libraries.Interface.Selections.TreeSelection
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Interface.Controls.MenuItem
use Libraries.Interface.Controls.TreeItem
use Libraries.Interface.Controls.TextBox
use Libraries.Interface.Controls.TextField
use Libraries.Game.GameStateManager

class AccessibilityManager 

    private boolean debugOutput = false

    // SetFocus: Tells the accessibility manager that focus has changed to the 
    //           given Item. As far as the native code is concerned, focus changes
    //           only raise an event with UI Automation. No focus state is maintained
    //           at the native level.
    private system action SetFocus(Item item) returns boolean

    private system action Select(Item item) returns boolean

    private system action Deselect(Item item) returns boolean

    // NativeAdd: Adds an Item to the accessibility hierarchy so the screen 
    //            readers can access information about it.
    private system action NativeAdd(Item item) returns boolean
    
    // NativeRemove: Removes an Item from the native accessibility tree so that it is no longer available to screen readers.
    private system action NativeRemove(Item item) returns boolean

    // ===== actions for Buttons
    
    // == Pushbuttons
    private system action InvokeButton(Item button) returns boolean

    // == Togglebuttons
    private system action UpdateToggleState(Item button, boolean selected) returns boolean

    // ===== actions for Textbox

    // TextSelectionChanged: This action will be called whenever the text selection has changed.
    //                       For example, a word or character has been added to the selection.
    private system action TextSelectionChanged(TextBoxSelection selection)

    private system action TextSelectionChanged(TextFieldSelection selection)

    // CaretPositionChanged: This action will be called whenever the caret moves or when text has
    //                       been added or removed.
    private system action CaretPositionChanged(Item TextBox, Text adjacentCharacter)

    // =====

    private system action NativeMenuChanged(MenuChangeEvent event) returns boolean
    private system action NativeTreeChanged(TreeChangeEvent event) returns boolean

    system action Update

    action SelectionChanged(SelectionEvent event)
        Selection selection = event:GetSelection()
        if selection is TextBoxSelection
            TextBoxSelection textSelection = cast(TextBoxSelection, selection)
            TextSelectionChanged(textSelection)

        elseif selection is TextFieldSelection
            TextFieldSelection textSelection = cast(TextFieldSelection, selection)
            TextSelectionChanged(textSelection)

        elseif selection is TabPaneSelection
            // Do TabPane things
        elseif selection is MenuSelection
            
            MenuSelection menuSelection = cast(MenuSelection, selection)

            if not menuSelection:IsEmpty()
                Array<MenuItem> path = menuSelection:GetPath()

                Item selectedMenuItem = path:Get(path:GetSize()-1)
                
                if (debugOutput)
                    output "Selection changed: " + selectedMenuItem:GetName()
                end

                Select(selectedMenuItem)
            else
                // TODO: Deselect any native selection
                //Deselect(currentSelection)
            end

        elseif selection is TreeSelection

            TreeSelection treeSelection = cast(TreeSelection, selection)

            if not treeSelection:IsEmpty()
                Array<TreeItem> path = treeSelection:GetPath()

                Item selectedTreeItem = path:Get(path:GetSize()-1)
                
                if (debugOutput)
                    output "Selection changed: " + selectedTreeItem:GetName()
                end

                Select(selectedTreeItem)
            end

        else
            // Do generic things
        end

        
    end

    action FocusChanged(FocusEvent event)
        
        // Handle the focus change.
        Item newFocus = event:GetNewFocus()

        if (debugOutput)
            output "Focus changed to: " + newFocus:GetAccessibilityType() + " - " + newFocus:GetName()
        end

        SetFocus(newFocus)

    end

    action Add(Item item)
        NativeAdd(item)
        // Add the children
        if item is Item2D
            Item2D temp = cast(Item2D, item)
            Array<Item2D> children = temp:GetChildren()
            
            integer counter = 0

            repeat while counter < children:GetSize()
                Add(children:Get(counter))
                counter = counter + 1
            end

        elseif item is Item3D
            Item3D temp = cast(Item3D, item)
            Iterator<Item3D> children = temp:GetItems()

            Item3D child = undefined

            repeat while children:HasNext()
                child = children:Next()
                Add(child)
            end
        end
    end

    action Remove(Item item)
        // If the item being removed has children then remove them first.
        //Is this necessary or does the native layer figure this out?
        if item is Item2D
            Item2D temp = cast(Item2D, item)
            Array<Item2D> children = temp:GetChildren()
            
            integer counter = 0

            repeat while counter < children:GetSize()
                Remove(children:Get(counter))
                counter = counter + 1
            end

        elseif item is Item3D
            Item3D temp = cast(Item3D, item)
            Iterator<Item3D> children = temp:GetItems()
            
            Item child = undefined

            repeat while children:HasNext()
                child = children:Next()
                Remove(child)
            end
        end

        NativeRemove(item)
    end

    action MenuChanged(MenuChangeEvent event)
        if (debugOutput)
            output "Menu changed: " + event:GetMenuItem():GetName()
        end

        NativeMenuChanged(event)
    end

    action TreeChanged(TreeChangeEvent event)
        if (debugOutput)
            output "Tree changed: " + event:GetTreeItem():GetName()
        end

        NativeTreeChanged(event)
    end

    action ControlActivated(ControlActivationEvent event)
        if (debugOutput)
            output "Control activated: " + event:GetControl():GetName()
        end
    end

    action TextChanged(TextChangeEvent event)
        if (debugOutput)
            output "Text added: " + event:GetAddedText() + ", text deleted: " + event:GetDeletedText()
        end
    end

    action WindowFocusChanged(WindowFocusEvent event)
        if event:IsFocused()
            GameStateManager manager
            Item item = manager:GetFocus()
            if item not= undefined
                if item:GetAccessibilityCode() not= item:ITEM
                    SetFocus(item)
                end
            end
        end
    end

    system action Notify(Item item, text value)

    /*
    The Shutdown action shuts down the underlying accessibility architecture.
    */
    system action Shutdown

    system action IsScreenReaderListening returns boolean
end
