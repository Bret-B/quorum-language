package Libraries.Interface.Layouts

use Libraries.Interface.Controls.Control
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Charts.BoxPlot
use Libraries.Interface.Controls.ControlLabel
use Libraries.Game.Graphics.Label
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Array
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.PixelMap
use Libraries.Game.Graphics.Format
use Libraries.Game.Graphics.Texture
use Libraries.Compute.Vector
use Libraries.Compute.Math
use Libraries.Interface.Controls.Charts.Graphics.Plot
use Libraries.Interface.Controls.Charts.Graphics.PlotGroup
use Libraries.Interface.Controls.Charts.Graphics.ChartDrawable
use Libraries.Game.Graphics.ColorGroup

/*
    This class determines the visual layout for the chart.
    

    Attribute: Author Shyann Calhoun, Hannah Williams

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Charts.BoxPlotCreator
    use Libraries.Interface.Controls.Charts.BoxPlot
    use Libraries.Game.Game
    
    class Main is Game
        action Main
            StartGame()
        end
    
        action CreateGame
            DataFrame frame
            frame:Load("Data/Data.csv")
            BoxPlotCreator creator
            creator:AddColumn(2)
        
            BoxPlot chart = cast(BoxPlot,frame:CreateChart(creator))
            chart:SetPercentageWidth(1)
            chart:SetPercentageHeight(1)
            chart:SetTitle("Sample Title")
            chart:SetXAxisTitle("X-axis Variable")
            chart:SetYAxisTitle("Y-axis Variable")
            Add(chart)
        end
    end
*/

class BoxPlotLayout is ChartLayout
    boolean horizontal = false // Default is vertical for box plots
    boolean separateBySeries = false
    boolean separateByFactor = false
    /*
        This action determines the layout of the chart area
    */
      action LayoutChartContent(Chart control, Control chartAreaContainer)
        if not (control is BoxPlot)
            return now
        end

        BoxPlot chart = cast(BoxPlot, control)
        Array <PlotGroup> plotGroups = chart:GetPlotGroups()
        Color transparent
        transparent:SetColor(0,0,0,0)
        number percent = 0.0
        number yMax = chart:GetYAxisMaximum()
        number yMin = chart:GetYAxisMinimum()
        number xMax = chart:GetXAxisMaximum()
        number xMin = chart:GetXAxisMinimum()

        horizontal = chart:GetHorizontalFlag() // Default is vertical
        separateBySeries = chart:IsSeparatedBySeries()
        separateByFactor = chart:IsSeparatedByFactor()
        boolean useFactor = (chart:GetFactorList() not= undefined)

        // These calculate the necessary dimensions of the boxplots
        if plotGroups:GetSize() > 0
            integer numberOfPanels = plotGroups:GetSize()
            if separateByFactor or (separateBySeries and not useFactor)
                numberOfPanels = chart:GetSeriesList():GetSize()
            end

            integer panelwidth = cast(integer, chartAreaContainer:GetWidth())/numberOfPanels
            integer height = cast(integer, chartAreaContainer:GetHeight())
            number range = (yMax-yMin)
            number rangeMin = yMin
            if horizontal
                panelwidth = cast(integer, chartAreaContainer:GetHeight())/numberOfPanels
                height = cast(integer, chartAreaContainer:GetWidth())
                range = (xMax-xMin)
                rangeMin = xMin
            end
            number dataScale = range/height            

            integer i = 0
            repeat while i < plotGroups:GetSize()
                PlotGroup group = plotGroups:Get(i)

                //Give each group an alloted section  
                integer startpanelw = panelwidth*i
                integer groupHeight = 0

                if group:GetSize() > 0
                    integer groupCount = plotGroups:GetSize()
                    integer plotCount = group:GetSize()

                    integer plotsPerPanel = plotCount
                    if chart:IsSeparated()
                        plotsPerPanel = 1
                    end

                    integer width = cast(integer, panelwidth/plotsPerPanel)
                    integer center = cast(integer, width/2) 
                    integer size = cast(integer, width/4)

                    number linePercent = (0.0025)*plotsPerPanel*groupCount
                    if linePercent > 0.05
                        linePercent = 0.05
                    end

                    integer line = cast(integer, width * linePercent)
                    integer halfline = cast(integer, line/2)
                    if halfline < 1
                        halfline = 1
                    end
                    line = halfline*2

                    integer k = 0
                    repeat while k < plotCount
                        Plot plot = group:Get(k)
                        //Give each chart an alloted section  
                        integer startw = width*k
                        if not chart:HasGroups() or chart:IsSeparated()
                            startw = startpanelw
                            if separateBySeries
                                if useFactor
                                    startw = width*i
                                else
                                    startw = startpanelw
                                end
                            elseif separateByFactor 
                                startw = width*k
                            end
                        end

                        /* Indices for items of individual box plot
                            0: PLOT AREA (ENTIRE REGION)
                            1: MINIMUM LINE
                            2: LOWER WHISKER
                            3: INTERQUARTILE RANGE
                            4: RIGHT BORDER OF IQR
                            5: LEFT BORDER OF IQR
                            6: Q1 LINE
                            7: MEDIAN LINE
                            8: Q3 LINE
                            9: UPPER WHISKER    
                            10: MAXIMUM LINE 
                            11+: OUTLIER POINTS
                        */
                    
                        //(0,0) in bottom left corner, width grows in the rightward direction and height grows in the upward direction
                        Array<ChartDrawable> item = plot:GetPlotItems()
                        Color lightColor = plot:GetColor()
                        ColorGroup darkColor = chart:GetBorderColor()
   
                        if not plot:IsUndefined()
                            number median = plot:GetInfoAt(0)
                            number lowerQuartile = plot:GetInfoAt(1)
                            number upperQuartile = plot:GetInfoAt(2)
                            number minimum = plot:GetInfoAt(3)
                            number maximum = plot:GetInfoAt(4)

                            //Minimum
                            percent = (minimum - rangeMin)/range // used for 1-2
                            item:Get(1):LoadFilledRectangle(center+line, line, darkColor)
                            item:Get(1):SetPosition(startw+size,cast(integer, percent*height)-halfline)
                
                            //Lower Whisker
                            item:Get(2):LoadFilledRectangle(line, cast(integer,(lowerQuartile-minimum)/dataScale), darkColor)
                            item:Get(2):SetPosition(startw+center, cast(integer, percent*height))
                
                            //IQR Region
                            percent = (lowerQuartile - rangeMin)/range // used for 3-6
                            item:Get(3):LoadFilledRectangle(center+line, cast(integer,(upperQuartile-lowerQuartile)/dataScale)+line, lightColor)
                            item:Get(3):SetPosition(startw+size, cast(integer, percent*height)-halfline)
                
                            //Right IQR line
                            item:Get(4):LoadFilledRectangle(line, cast(integer,(upperQuartile-lowerQuartile)/dataScale), darkColor)
                            item:Get(4):SetPosition(startw+size+center, cast(integer, percent*height), -1)
                
                            //Left IQR line
                            item:Get(5):LoadFilledRectangle(line, cast(integer,(upperQuartile-lowerQuartile)/dataScale), darkColor)
                            item:Get(5):SetPosition(startw+size, cast(integer, percent*height), -1)
                
                            //Q1
                            item:Get(6):LoadFilledRectangle(center+line, line, darkColor)
                            item:Get(6):SetPosition(startw+size, cast(integer, percent*height)-halfline, -1)
                
                            //Median
                            percent = (median - rangeMin)/range // used for 7
                            item:Get(7):LoadFilledRectangle(center+line, line, darkColor)
                            item:Get(7):SetPosition(startw+size, cast(integer, percent*height)-halfline, -1)
                
                            //Q3
                            percent = (upperQuartile - rangeMin)/range // used for 8-9
                            item:Get(8):LoadFilledRectangle(center+line, line, darkColor)
                            item:Get(8):SetPosition(startw+size, cast(integer, percent*height)-halfline, -1)
                
                            //Upper Whisker
                            item:Get(9):LoadFilledRectangle(line, cast(integer,(maximum-upperQuartile)/dataScale), darkColor)
                            item:Get(9):SetPosition(startw+center, cast(integer, percent*height))
                
                            //Max
                            percent = (maximum - rangeMin)/range // used for 10
                            item:Get(10):LoadFilledRectangle(center+line, line, darkColor)
                            item:Get(10):SetPosition(startw+size, cast(integer, percent*height)-halfline)

                            integer plotAreaHeight = cast(integer, item:Get(10):GetY()+item:Get(10):GetHeight())
                            if separateByFactor and chart:HasGroups()
                                if plot:GetPlotArea() not= undefined
                                    if horizontal
                                        plot:GetPlotArea():LoadRectangle(plotAreaHeight,width,transparent)
                                        plot:GetPlotArea():SetPosition(0,startw)
                                    else
                                        plot:GetPlotArea():LoadRectangle(width,plotAreaHeight,transparent)
                                        plot:GetPlotArea():SetPosition(startw,0)
                                    end
                                    // Load arrow for plot
                                    LoadPlotSelectionArrowVertices(chart, plot)
                                end                                
                            else
                                if plot:GetPlotArea() not= undefined
                                    if horizontal
                                        plot:GetPlotArea():LoadRectangle(plotAreaHeight,width,transparent)
                                        plot:GetPlotArea():SetPosition(0,startw)
                                    else
                                        plot:GetPlotArea():LoadRectangle(width,plotAreaHeight,transparent)
                                        plot:GetPlotArea():SetPosition(startw,0)
                                    end
                                    // Load arrow for plot
                                    LoadPlotSelectionArrowVertices(chart, plot)
                                end
                            end
                            if k = 0
                                groupHeight = plotAreaHeight
                            end
                            if plotAreaHeight > groupHeight
                                groupHeight = plotAreaHeight
                            end

                            if horizontal
                                integer l = 1
                                repeat while l < 11
                                    number temp = item:Get(l):GetX()
                                    item:Get(l):SetX(item:Get(l):GetY())
                                    item:Get(l):SetY(temp)
                                    
                                    integer w = cast(integer, item:Get(l):GetWidth())
                                    integer h = cast(integer, item:Get(l):GetHeight())
                                    item:Get(l):SetWidth(h)
                                    item:Get(l):SetHeight(w)                    
                                    l = l + 1
                                end
                            end

                            integer arrowSize = line*4
                            // Load selection arrows and brackets
                            // Load bracket and arrow for iqr
                            LoadChartDrawableSelectionBracketAndArrow(chart, item:Get(3), arrowSize, true)
                            // Load and place the min line selection arrow
                            LoadChartDrawableSelectionArrow(chart, item:Get(1), arrowSize, true)
                            // Load and place the q1 line selection arrow
                            LoadChartDrawableSelectionArrow(chart, item:Get(6), arrowSize, true)
                            // Load and place the median line selection arrow
                            LoadChartDrawableSelectionArrow(chart, item:Get(7), arrowSize, true)
                            // Load and place the q3 line selection arrow
                            LoadChartDrawableSelectionArrow(chart, item:Get(8), arrowSize, true)
                            // Load and place the max line selection arrow
                            LoadChartDrawableSelectionArrow(chart, item:Get(10), arrowSize, true)
                        end
            
                        if chart:GetOutliersFlag()
                            //Outliers
                            Array <number> outliers = plot:GetOutliers()
                            integer outlierIndex = 0
                            integer j = 11
                            repeat while outlierIndex < outliers:GetSize() and j < item:GetSize()
                                number y = outliers:Get(outlierIndex)
                                percent = (y - rangeMin)/range
                                integer radius = line
                                item:Get(j):SetSize(radius * 4, radius * 4)
                                item:Get(j):SetColor(lightColor)
                                item:Get(j):SetPosition(startw+center-line, cast(integer, percent*height)-line * 2)
                                if horizontal
                                    item:Get(j):SetPosition(cast(integer, percent*height)-line * 2, startw+center-line)
                                end

                                integer arrowSize = line*4
                                // Load and place the outlier selection arrow
                                LoadChartDrawableSelectionArrow(chart, item:Get(j), arrowSize, true)
                                outlierIndex = outlierIndex + 1
                                j = j + 1
                            end
                        end
                        k = k + 1
                    end 
                end  

                //Outer group box
                group:LoadRectangle(panelwidth,groupHeight,transparent)
                group:SetPosition(startpanelw,0)
                if horizontal
                    group:LoadRectangle(groupHeight,panelwidth,transparent)
                    group:SetPosition(0,startpanelw)
                end
                // Load and place the group selection bracket/arrow
                LoadGroupSelectionBracketAndArrow(chart, group)
                i = i + 1
            end
        end
    end

    /*
        Interface action for setting the selection arrow for the plot using the size of plot area. 
    */
    private action LoadPlotSelectionArrowVertices(Chart chart, Plot plot)
        ChartDrawable plotArea
        plotArea:SetSize(plot:GetPlotArea():GetWidth(), plot:GetPlotArea():GetHeight())
        plotArea:SetPosition(plot:GetPlotArea():GetX(), plot:GetPlotArea():GetY())

        if horizontal 
            LoadChartDrawableSelectionArrow(chart, plotArea, cast(integer, plot:GetPlotArea():GetHeight()/4), false)
        else
            LoadChartDrawableSelectionArrow(chart, plotArea, cast(integer, plot:GetPlotArea():GetWidth()/4), false)
        end
        Array<number> vertices = plotArea:GetSelectionArrowVertices()
        Drawable arrow = plot:GetSelectionArrow()
        arrow:LoadShape(vertices, plot:GetSelectionColor())
        arrow:Hide()
        arrow:SetZ(-1)
        plot:SetSelectionArrowVertices(vertices) 
    end
end
