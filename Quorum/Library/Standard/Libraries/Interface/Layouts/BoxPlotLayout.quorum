package Libraries.Interface.Layouts

use Libraries.Interface.Controls.Control
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Charts.BoxPlot
use Libraries.Interface.Controls.Charts.PlotGroup
use Libraries.Interface.Controls.Charts.Plot
use Libraries.Interface.Controls.ControlLabel
use Libraries.Game.Graphics.Label
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Array
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.PixelMap
use Libraries.Game.Graphics.Format
use Libraries.Game.Graphics.Texture
use Libraries.Compute.Vector
use Libraries.Compute.Math

/*
    This class determines the visual layout for the chart.
    

    Attribute: Author Shyann Calhoun

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Charts.BoxPlotCreator
    use Libraries.Interface.Controls.Charts.BoxPlot
    use Libraries.Game.Game
    
    class Main is Game
        action Main
            StartGame()
        end
    
        action CreateGame
            DataFrame frame
            frame:Load("Data/Data.csv")
            BoxPlotCreator creator
            creator:AddColumn(2)
        
            BoxPlot chart = cast(BoxPlot,frame:CreateChart(creator))
            chart:SetPercentageWidth(1)
            chart:SetPercentageHeight(1)
            chart:SetTitle("Sample Title")
            chart:SetXAxisTitle("X-axis Variable")
            chart:SetYAxisTitle("Y-axis Variable")
            Add(chart)
        end
    end
*/

class BoxPlotLayout is ChartLayout
    /*
        This action determines the layout of the chart area
    */
      action LayoutChartContent(Chart control, Control chartAreaContainer)
        if not (control is BoxPlot)
            return now
        end

        BoxPlot chart = cast(BoxPlot, control)
        Array <PlotGroup> plotGroups = chart:GetPlotGroups()
        Control chartArea = chart:GetChartArea()
        Color invis
        invis:SetColor(0,0,0,0)
        number percent = 0.0
        number yMax = chart:GetYAxisMaximum()
        number yMin = chart:GetYAxisMinimum()
        number xMax = chart:GetXAxisMaximum()
        number xMin = chart:GetXAxisMinimum()

        boolean horizontal = chart:GetHorizontalFlag() // Default is vertical

        // These calculate the necessary dimensions of the boxplots
        if plotGroups:GetSize() > 0
            integer panelwidth = cast(integer, chartArea:GetWidth())/plotGroups:GetSize()
            integer height = cast(integer, chartArea:GetHeight())
            number range = (yMax-yMin)
            number rangeMin = yMin
            if horizontal
                panelwidth = cast(integer, chartArea:GetHeight())/plotGroups:GetSize()
                height = cast(integer, chartArea:GetWidth())
                range = (xMax-xMin)
                rangeMin = xMin
            end
            number dataScale = range/height            

            integer i = 0
            repeat while i < plotGroups:GetSize()
                PlotGroup group = plotGroups:Get(i)

                //Give each group an alloted section  
                integer startpanelw = panelwidth*i
                //Outer box
                group:GetItem():LoadRectangle(panelwidth,height,invis)
                group:GetItem():SetPosition(startpanelw,0)
                if horizontal
                    group:GetItem():LoadRectangle(height,panelwidth,invis)
                    group:GetItem():SetPosition(0,startpanelw)
                end

                if group:GetSize() > 0
                    integer width = cast(integer, panelwidth/group:GetSize())
                    integer center = cast(integer, width/2) 
                    integer size = cast(integer, width/4)

                    number linePercent = (0.0025)*group:GetSize()*plotGroups:GetSize()
                    if linePercent > 0.05
                        linePercent = 0.05
                    end

                    integer line = cast(integer, width * linePercent)
                    integer halfline = cast(integer, line/2)
                    if halfline < 1
                        halfline = 1
                    end
                    line = halfline*2

                    integer k = 0
                    repeat while k < group:GetSize()
                        Plot plot = group:Get(k)
                        number median = plot:GetInfoAt(0)
                        number lowerQuartile = plot:GetInfoAt(1)
                        number upperQuartile = plot:GetInfoAt(2)
                        number minimum = plot:GetInfoAt(3)
                        number maximum = plot:GetInfoAt(4)
            
                        //Give each chart an alloted section  
                        integer startw = width*k + startpanelw
    
                        /* Indices for items of individual box plot
                            0: PLOT AREA (ENTIRE REGION)
                            1: MINIMUM LINE
                            2: LOWER WHISKER
                            3: INTERQUARTILE RANGE
                            4: RIGHT BORDER OF IQR
                            5: LEFT BORDER OF IQR
                            6: Q1 LINE
                            7: MEDIAN LINE
                            8: Q3 LINE
                            9: UPPER WHISKER    
                            10: MAXIMUM LINE 
                            11+: OUTLIER POINTS
                        */
                        
                        //(0,0) in bottom left corner, width grows in the rightward direction and height grows in the upward direction
                        Array<Drawable> item = plot:GetPlotItems()
                        Color darkColor
                        darkColor:SetColor(0,0,0,1)
                        Color lightColor = plot:GetIcon():GetColor()
    
                        //Outer box
                        item:Get(0):LoadRectangle(width,height,invis)
                        item:Get(0):SetPosition(startw,0)
                        if horizontal
                            item:Get(0):LoadRectangle(height,width,invis)
                            item:Get(0):SetPosition(0,startw)
                        end
            
                        //Minimum
                        percent = (minimum - rangeMin)/range // used for 1-2
                        item:Get(1):LoadFilledRectangle(center+line, line, darkColor)
                        item:Get(1):SetPosition(startw+size,cast(integer, percent*height)-halfline)
            
                        //Lower Whisker
                        item:Get(2):LoadFilledRectangle(line, cast(integer,(lowerQuartile-minimum)/dataScale), darkColor)
                        item:Get(2):SetPosition(startw+center, cast(integer, percent*height))
            
                        //IQR Region
                        percent = (lowerQuartile - rangeMin)/range // used for 3-6
                        item:Get(3):LoadFilledRectangle(center+line, cast(integer,(upperQuartile-lowerQuartile)/dataScale)+line, lightColor)
                        item:Get(3):SetPosition(startw+size, cast(integer, percent*height)-halfline)
            
                        //Right IQR line
                        item:Get(4):LoadFilledRectangle(line, cast(integer,(upperQuartile-lowerQuartile)/dataScale), darkColor)
                        item:Get(4):SetPosition(startw+size+center, cast(integer, percent*height), -1)
            
                        //Left IQR line
                        item:Get(5):LoadFilledRectangle(line, cast(integer,(upperQuartile-lowerQuartile)/dataScale), darkColor)
                        item:Get(5):SetPosition(startw+size, cast(integer, percent*height), -1)
            
                        //Q1
                        item:Get(6):LoadFilledRectangle(center+line, line, darkColor)
                        item:Get(6):SetPosition(startw+size, cast(integer, percent*height)-halfline, -1)
            
                        //Median
                        percent = (median - rangeMin)/range // used for 7
                        item:Get(7):LoadFilledRectangle(center+line, line, darkColor)
                        item:Get(7):SetPosition(startw+size, cast(integer, percent*height)-halfline, -1)
            
                        //Q3
                        percent = (upperQuartile - rangeMin)/range // used for 8-9
                        item:Get(8):LoadFilledRectangle(center+line, line, darkColor)
                        item:Get(8):SetPosition(startw+size, cast(integer, percent*height)-halfline, -1)
            
                        //Upper Whisker
                        item:Get(9):LoadFilledRectangle(line, cast(integer,(maximum-upperQuartile)/dataScale), darkColor)
                        item:Get(9):SetPosition(startw+center, cast(integer, percent*height))
            
                        //Max
                        percent = (maximum - rangeMin)/range // used for 10
                        item:Get(10):LoadFilledRectangle(center+line, line, darkColor)
                        item:Get(10):SetPosition(startw+size, cast(integer, percent*height)-halfline)

                        if horizontal
                            integer l = 1
                            repeat while l < 11
                                number temp = item:Get(l):GetX()
                                item:Get(l):SetX(item:Get(l):GetY())
                                item:Get(l):SetY(temp)
                                
                                integer w = cast(integer, item:Get(l):GetWidth())
                                integer h = cast(integer, item:Get(l):GetHeight())
                                item:Get(l):SetWidth(h)
                                item:Get(l):SetHeight(w)                    
                                l = l + 1
                            end
                        end
            
                        if chart:GetOutliersFlag()
                            //Outliers
                            Array <number> outliers = plot:GetOutliers()
                            integer outlierIndex = 0
                            integer j = 11
                            repeat while outlierIndex < outliers:GetSize() and j < item:GetSize()
                                number y = outliers:Get(outlierIndex)
                                percent = (y - rangeMin)/range
                                integer radius = line
                                item:Get(j):LoadFilledCircle(radius, darkColor)
                                item:Get(j):SetPosition(startw+center-halfline, cast(integer, percent*height)-line)
                                if horizontal 
                                    item:Get(j):LoadFilledCircle(radius, darkColor)
                                    item:Get(j):SetPosition(cast(integer, percent*height)-line, startw+center-halfline)
                                end
                                outlierIndex = outlierIndex + 1
                                j = j + 1
                            end
                        end
                        k = k + 1
                    end 
                end  
                i = i + 1
            end
        end
    end
end
