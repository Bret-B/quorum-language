package Libraries.Interface.Layouts

use Libraries.Interface.Controls.Control
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Charts.BoxPlot
use Libraries.Interface.Controls.ControlLabel
use Libraries.Game.Graphics.Label
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Array
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.PixelMap
use Libraries.Game.Graphics.Format
use Libraries.Game.Graphics.Texture
use Libraries.Compute.Vector
use Libraries.Compute.Math

/*
    This class determines the visual layout for the chart.
    

    Attribute: Author Shyann Calhoun

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Charts.BoxPlotCreator
    use Libraries.Interface.Controls.Charts.BoxPlot
    use Libraries.Game.Game
    
    class Main is Game
        action Main
            StartGame()
        end
    
        action CreateGame
            DataFrame frame
            frame:Load("Data/Data.csv")
            BoxPlotCreator creator
            creator:AddColumn(2)
        
            BoxPlot chart = cast(BoxPlot,frame:CreateChart(creator))
            chart:SetPercentageWidth(1)
            chart:SetPercentageHeight(1)
            chart:SetTitle("Sample Title")
            chart:SetXAxisTitle("X-axis Variable")
            chart:SetYAxisTitle("Y-axis Variable")
            Add(chart)
        end
    end
*/

class BoxPlotLayout is ChartLayout

    /*
        This action lays out the axis labels on the horizontal
    */
    action LayoutHorizontalAxis(Chart chart, Control horizontalContainer)
        integer width = cast(integer, horizontalContainer:GetWidth())
        integer height = cast(integer, horizontalContainer:GetHeight())
        
        Array<ControlLabel> labels = chart:GetXLabels()
        integer space = cast(integer, width/labels:GetSize())
        integer labelY = height - cast(integer, labels:Get(0):GetHeight())
        integer i = 0
        repeat while i < labels:GetSize()
            Label currentLabel = labels:Get(i)
            if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
            end
            integer labelX = space*i+cast(integer, (space-currentLabel:GetWidth())/2)
            currentLabel:SetPosition(labelX, labelY)
            i = i + 1
        end
        ControlLabel axisLabel = chart:GetXLabel()
        axisLabel:SetPositionOnBaseLine(true)
        axisLabel:SetX(cast(integer, width / 2 - axisLabel:GetWidth() / 2))
        axisLabel:SetY(cast(integer, height / 2 - axisLabel:GetHeight()))
    end
    
    /*
        This action determines the layout of the chart area
    */
      action LayoutChartContent(Chart control, Control chartAreaContainer)

        BoxPlot chart = cast(BoxPlot, control)
        Array<Array<number>> info = chart:GetChartInfo()
        Array<Array<Drawable>> items = chart:GetChartItems()
        Array<Vector> data = chart:GetDataSets()
        Control chartArea = chart:GetChartArea()
        Color invis
        invis:SetColor(0,0,0,0)

        // These calculate the necessary dimensions of the boxplots
        integer infoSize = info:GetSize()
        integer width = cast(integer, chartArea:GetWidth())/infoSize
        integer height = cast(integer, chartArea:GetHeight())
        integer line = cast(integer, height * 0.005)
        integer center = cast(integer, width/2) 
        integer size = cast(integer, width/4)
        
        number dataScale = chart:GetYMaximum()/height
        integer i = 0

        repeat while i < infoSize

            Array<number> itemInfo = info:Get(i)
            number median = itemInfo:Get(0)
            number lowerQuartile = itemInfo:Get(1)
            number upperQuartile = itemInfo:Get(2)
            number minimum = itemInfo:Get(3)
            number maximum = itemInfo:Get(4)

            //Give each chart an alloted section  
            integer startw = width*i
            
            //(0,0) in bottom left corner, width grows in the rightward direction and height grows in the upward direction
            Array<Drawable> item = items:Get(i)

            //Right IQR line
            item:Get(0):LoadFilledRectangle(line, cast(integer,(upperQuartile-lowerQuartile)/dataScale)+line)
            item:Get(0):SetPosition(startw+size+center,cast(integer, lowerQuartile/dataScale))

            //Center line
            item:Get(1):LoadFilledRectangle(line, cast(integer,(lowerQuartile-minimum)/dataScale)+line)
            item:Get(1):SetPosition(startw+center,cast(integer, minimum/dataScale))

            item:Get(2):LoadFilledRectangle(line, cast(integer,(maximum-upperQuartile)/dataScale)+line)
            item:Get(2):SetPosition(startw+center,cast(integer, upperQuartile/dataScale))

            //Minimum
            item:Get(3):LoadFilledRectangle(center+line, line)
            item:Get(3):SetPosition(startw+size,cast(integer, minimum/dataScale))

            //Lower quartile
            item:Get(4):LoadFilledRectangle(center+line, line)
            item:Get(4):SetPosition(startw+size,cast(integer, lowerQuartile/dataScale))

            //Median
            item:Get(5):LoadFilledRectangle(center+line, line)
            item:Get(5):SetPosition(startw+size,cast(integer, median/dataScale))

            //Upper quartile
            item:Get(6):LoadFilledRectangle(center+line, line)
            item:Get(6):SetPosition(startw+size,cast(integer, upperQuartile/dataScale))

            //Left IQR line
            item:Get(7):LoadFilledRectangle(line, cast(integer,(upperQuartile-lowerQuartile)/dataScale)+line)
            item:Get(7):SetPosition(startw+size,cast(integer, lowerQuartile/dataScale))

            //Max
            item:Get(8):LoadFilledRectangle(center+line, line)
            item:Get(8):SetPosition(startw+size,cast(integer, maximum/dataScale))

            //Outer box
            item:Get(9):LoadRectangle(width,height,invis)
            item:Get(9):SetPosition(startw,0)

            Format formate
            PixelMap pixelMap
            pixelMap:CreatePixelMap(width,height,formate)

            Texture texture
            texture:LoadFromPixelMap(pixelMap)
            item:Get(10):SetPosition(startw,0)
            item:Get(10):Load(texture)
            
               i=i+1
        end

    end
    
end
