package Libraries.Interface.Layouts

use Libraries.Interface.Controls.Control
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Charts.Histogram
use Libraries.Interface.Controls.Charts.Graphics.BarGroup
use Libraries.Interface.Controls.Charts.Graphics.Bar
use Libraries.Interface.Controls.Icon
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Compute.Math
use Libraries.Interface.Controls.ControlLabel
use Libraries.Game.Graphics.LinePath


class HistogramLayout is SharedBarChartLayout
    Math math

    boolean overlayed = false
    boolean stacked = false
    boolean horizontal = false // Default is vertical for bar charts
    boolean separateBySeries = false
    boolean separateByColumn = false
    boolean separateByFactor = false
    integer barAnnotionPadding = 3
    constant number HISTOGRAM_TICK_PADDING_PERCENT = 0.2

    /*
        This action will calculate the size and placement of the elements (bars) within the chart 
        based on the size of the display screen.
    */
    action LayoutChartContent(Chart control, Control chartAreaContainer)
        if not (control is Histogram)
            return now
        end
        Histogram chart = cast(Histogram, control)

        Color transparent
        transparent:SetColor(0, 0, 0, 0)

        // The points used for the trend line, if one is displayed.
        Array<number> trendLinePoints

        Array<BarGroup> barGroups = chart:GetBarGroups()
        if barGroups:GetSize() > 0
            integer tickHeight = 0
            integer tickWidth = 0
            number height = 0
            number width = 0
            number rangeMax = 0
            number rangeMin = 0
            number scaleDivWidth = 0 
    
            number currentXPosition = 0
            integer currentYPosition = 0
            integer tickCount = 0
            integer axisOffset = 0
            integer betweenGroupPadding = 0
            integer barWidth = 0
            integer numberOfGroups = barGroups:GetSize()
            integer numberOfBars = chart:GetNumberOfBars()
    
            horizontal = chart:GetHorizontalFlag() // Default is vertical
            stacked = chart:GetStackedFlag()
            separateBySeries = chart:IsSeparatedBySeries()
            separateByFactor = chart:IsSeparatedByFactor()
            overlayed = chart:GetOverlayedFlag()


            if horizontal
                integer paddingOffset = cast(integer, chart:GetVerticalPanel():GetPaddingOffsetPercent()*chartAreaContainer:GetHeight())
                width = chartAreaContainer:GetHeight() - paddingOffset
                height = chartAreaContainer:GetWidth() 
                rangeMax = chart:GetXAxisMaximum()
                rangeMin = chart:GetXAxisMinimum()
                tickCount = chart:GetVerticalPanel():GetTickCount()
                tickHeight = chart:GetVerticalPanel():GetTickHeight()
                tickWidth = chart:GetVerticalPanel():GetTickWidth()
            else
                integer paddingOffset = cast(integer, chart:GetHorizontalPanel():GetPaddingOffsetPercent()*chartAreaContainer:GetWidth())
                width = chartAreaContainer:GetWidth() - paddingOffset
                height = chartAreaContainer:GetHeight()
                rangeMax = chart:GetYAxisMaximum()
                rangeMin = chart:GetYAxisMinimum()
                tickCount = chart:GetHorizontalPanel():GetTickCount()
                tickHeight = chart:GetHorizontalPanel():GetTickHeight()
                tickWidth = chart:GetHorizontalPanel():GetTickWidth()
            end
            resetYPosition = currentYPosition
            
            if stacked
                numberOfBars = numberOfGroups
            end
            if separateBySeries
                numberOfBars = numberOfGroups
                stacked = false
            end

            // Tracking area of each bar group for group icon
            integer groupX = cast(integer, currentXPosition)    // x-axis coordinate
            integer groupY = currentYPosition    // y-axis coordinate
            integer barHeight = 0
            integer groupWidth = 0               // width of entire group
            integer groupHeight = 0              // height of entire group

            betweenGroupPadding = cast(integer, chart:GetHorizontalPanel():GetTickWidth() * HISTOGRAM_TICK_PADDING_PERCENT)
            scaleDivWidth = (width - axisOffset) / numberOfGroups
            
            // Remaining non-white space to be evenly divided amongst all bars
            number remainingArea = width - cast(integer, betweenGroupPadding*(tickCount))
            barWidth = cast(integer, math:Floor(remainingArea / numberOfGroups))
            groupWidth = barWidth + (betweenGroupPadding*2)
            number overlayDiv = 0 //used to place bars when not overlayed
            if not overlayed and not stacked and not separateBySeries
                if barGroups:Get(0):GetSize() not= 0
                    overlayDiv = barWidth/barGroups:Get(0):GetSize()
                    barWidth = cast(integer, overlayDiv)
                end
            end
            
            Bar currentBar 
            BarGroup currentGroup

            integer i = 0
            repeat while i < barGroups:GetSize()
                currentGroup = barGroups:Get(i)

                number resetXPosition = currentXPosition
                integer j = 0
                repeat while j < currentGroup:GetSize()
                    // We want to stack/display so it keeps the same order as the legend
                    if stacked
                        if horizontal
                            currentBar = currentGroup:Get(j)
                        else
                            currentBar = currentGroup:Get(currentGroup:GetSize()-1-j)
                        end
                    else
                        if horizontal
                            currentBar = currentGroup:Get(currentGroup:GetSize()-1-j)
                        else
                            currentBar = currentGroup:Get(j)
                        end
                    end

                    barHeight = cast(integer, ((currentBar:GetValue()-rangeMin)/(rangeMax-rangeMin)) * height)
                    if barHeight >= 0 
    
                        //Find max height for barGroup Icon
                        if(barHeight > groupHeight)
                            groupHeight = barHeight
                        end
    
                        if horizontal
                            if chart:HasGroups() and not (stacked or separateBySeries) and overlayed
                                currentBar:GetColor():SetAlpha(0.75)
                                currentBar:LoadFilledRectangle(barHeight, barWidth, currentBar:GetColor())
                            else
                                currentBar:LoadFilledRectangle(barHeight, barWidth, currentBar:GetColor())
                            end
                            currentBar:SetPosition(currentYPosition, cast(integer, currentXPosition + betweenGroupPadding))
                            trendLinePoints:Add(currentBar:GetValue())
                            trendLinePoints:Add(currentBar:GetY() + barWidth / 2.0)
                        else
                            if chart:HasGroups() and not (stacked or separateBySeries) and overlayed
                                currentBar:GetColor():SetAlpha(0.75)
                                currentBar:LoadFilledRectangle(barWidth, barHeight, currentBar:GetColor())
                            else
                                currentBar:LoadFilledRectangle(barWidth, barHeight, currentBar:GetColor())
                            end
                            currentBar:SetPosition(cast(integer, currentXPosition + betweenGroupPadding), currentYPosition)
                            trendLinePoints:Add(currentBar:GetX() + barWidth / 2.0)
                            trendLinePoints:Add(currentBar:GetValue())
                        end

                        if currentBar:ShowAnnotation() or chart:ShowAnnotations()
                            ControlLabel barLabel = currentBar:GetAnnotation()
                            if barLabel not= undefined
                                if horizontal
                                    integer annotY = cast(integer, currentXPosition + betweenGroupPadding+ (barWidth/2.0 - barLabel:GetHeight()/2.0))
                                    barLabel:SetPosition(currentYPosition + barHeight + barAnnotionPadding, annotY)
                                else
                                    integer annotX = cast(integer, currentXPosition + betweenGroupPadding + (barWidth/2.0 - barLabel:GetWidth()/2.0))
                                    barLabel:SetPosition(annotX, currentYPosition + barHeight  + barAnnotionPadding)
                                end
                            end
                        end

                        if not separateBySeries
                            if stacked
                                currentYPosition = currentYPosition + barHeight
                            end
                        end
                    end

                    // Load and place the bar selection arrow
                    if horizontal
                        integer arrowSize = cast(integer, currentBar:GetHeight()/4)
                        if arrowSize < tickHeight*2
                            arrowSize = tickHeight*2
                        end
                        integer x1 = cast(integer, currentBar:GetX() + currentBar:GetWidth() + tickHeight)
                        if chart:ShowAnnotations() and currentBar:GetAnnotation() not= undefined
                            x1 = x1 + cast(integer, currentBar:GetAnnotation():GetWidth()) + barAnnotionPadding
                        end
                        integer y1 = cast(integer, currentBar:GetY() + currentBar:GetHeight()/2)
                        integer x2 = x1 + arrowSize
                        integer y2 = y1 + arrowSize
                        integer x3 = x1 + arrowSize
                        integer y3 = y1 - arrowSize

                        Drawable arrow = currentBar:GetSelectionArrow()
                        Array<number> vertices
                        vertices:Add(x1)
                        vertices:Add(y1)
                        vertices:Add(x2)
                        vertices:Add(y2)
                        vertices:Add(x3)
                        vertices:Add(y3)
                        arrow:LoadShape(vertices, currentBar:GetColor())
                        arrow:Hide()
                        currentBar:SetSelectionArrowVertices(vertices)
                    else
                        integer arrowSize = cast(integer, currentBar:GetWidth()/4)
                        if arrowSize < tickWidth*2
                            arrowSize = tickWidth*2
                        end
                        integer x1 = cast(integer, currentBar:GetX() + currentBar:GetWidth()/2)
                        integer y1 = cast(integer, currentBar:GetY() + currentBar:GetHeight() + tickWidth)
                        if chart:ShowAnnotations() and currentBar:GetAnnotation() not= undefined
                            y1 = y1 + cast(integer, currentBar:GetAnnotation():GetHeight()) + barAnnotionPadding
                        end
                        integer x2 = x1 + arrowSize
                        integer y2 = y1 + arrowSize
                        integer x3 = x1 - arrowSize
                        integer y3 = y1 + arrowSize

                        Drawable arrow = currentBar:GetSelectionArrow()
                        Array<number> vertices
                        vertices:Add(x1)
                        vertices:Add(y1)
                        vertices:Add(x2)
                        vertices:Add(y2)
                        vertices:Add(x3)
                        vertices:Add(y3)
                        arrow:LoadShape(vertices, currentBar:GetColor())
                        arrow:Hide()
                        currentBar:SetSelectionArrowVertices(vertices)
                    end

                    currentXPosition = currentXPosition + overlayDiv
                    j = j + 1
                end

                // Creating Bar Group Icon
                if stacked or separateBySeries
                    if horizontal 
                        currentGroup:LoadRectangle(currentYPosition+2, groupWidth, transparent)
                        currentGroup:SetPosition(0, groupX-cast(integer, betweenGroupPadding/2))
                    else
                        currentGroup:LoadRectangle(groupWidth, currentYPosition+2, transparent)
                        currentGroup:SetPosition(groupX-cast(integer, betweenGroupPadding/2), 0)
                    end
                else
                    if horizontal
                        currentGroup:LoadRectangle(groupHeight+2, groupWidth, transparent)
                        currentGroup:SetPosition(groupY, groupX-cast(integer, betweenGroupPadding/2))
                    else
                        currentGroup:LoadRectangle(groupWidth, groupHeight+2, transparent)
                        currentGroup:SetPosition(groupX-cast(integer, betweenGroupPadding/2) , groupY)
                    end
                end

                // Load and place the group selection bracket/arrow
                integer x = cast(integer, currentGroup:GetX())
                integer y = cast(integer, currentGroup:GetY())
                integer w = cast(integer, currentGroup:GetWidth())
                integer h = cast(integer, currentGroup:GetHeight())
                if horizontal
                    if currentGroup:GetSelectionBracket():GetSize() = 3
                        Drawable top = currentGroup:GetSelectionBracket():Get(0)
                        top:LoadFilledRectangle(tickWidth, tickHeight, chart:GetSelectionColor())
                        top:SetPosition(x + w - tickWidth + tickHeight, y + h - tickHeight)
                        top:Hide()
    
                        Drawable side = currentGroup:GetSelectionBracket():Get(1)
                        side:LoadFilledRectangle(tickHeight, h, chart:GetSelectionColor())
                        side:SetPosition(x + w + tickHeight, y)
                        side:Hide()

                        Drawable bottom = currentGroup:GetSelectionBracket():Get(2)
                        bottom:LoadFilledRectangle(tickWidth, tickHeight, chart:GetSelectionColor())
                        bottom:SetPosition(x + w - tickWidth + tickHeight, y)
                        bottom:Hide()

                        integer arrowSize = cast(integer, h/8)
                        if arrowSize < tickHeight*2
                            arrowSize = tickHeight*2
                        end
                        integer x1 = cast(integer, side:GetX() + tickHeight*2)
                        integer y1 = cast(integer, side:GetY() + side:GetHeight()/2)
                        integer x2 = x1 + arrowSize
                        integer y2 = y1 + arrowSize
                        integer x3 = x1 + arrowSize
                        integer y3 = y1 - arrowSize

                        Drawable arrow = currentGroup:GetSelectionArrow()
                        Array<number> vertices
                        vertices:Add(x1)
                        vertices:Add(y1)
                        vertices:Add(x2)
                        vertices:Add(y2)
                        vertices:Add(x3)
                        vertices:Add(y3)
                        arrow:LoadShape(vertices, chart:GetSelectionColor())
                        arrow:Hide()
                        currentGroup:SetSelectionArrowVertices(vertices)
                    end 
                else
                    if currentGroup:GetSelectionBracket():GetSize() = 3
                        Drawable top = currentGroup:GetSelectionBracket():Get(0)
                        top:LoadFilledRectangle(tickWidth, tickHeight, chart:GetSelectionColor())
                        top:SetPosition(x, y + h - tickHeight + tickWidth)
                        top:Hide()
    
                        Drawable side = currentGroup:GetSelectionBracket():Get(1)
                        side:LoadFilledRectangle(w, tickWidth, chart:GetSelectionColor())
                        side:SetPosition(x, y + h + tickWidth)
                        side:Hide()

                        Drawable bottom = currentGroup:GetSelectionBracket():Get(2)
                        bottom:LoadFilledRectangle(tickWidth, tickHeight, chart:GetSelectionColor())
                        bottom:SetPosition(x + w - tickWidth, y + h - tickHeight + tickWidth)
                        bottom:Hide()

                        integer arrowSize = cast(integer, w/8)
                        if arrowSize < tickWidth*2
                            arrowSize = tickWidth*2
                        end
                        integer x1 = cast(integer, side:GetX() + side:GetWidth()/2)
                        integer y1 = cast(integer, side:GetY() + tickWidth*2)
                        integer x2 = x1 + arrowSize
                        integer y2 = y1 + arrowSize
                        integer x3 = x1 - arrowSize
                        integer y3 = y1 + arrowSize

                        Drawable arrow = currentGroup:GetSelectionArrow()
                        Array<number> vertices
                        vertices:Add(x1)
                        vertices:Add(y1)
                        vertices:Add(x2)
                        vertices:Add(y2)
                        vertices:Add(x3)
                        vertices:Add(y3)
                        arrow:LoadShape(vertices, chart:GetSelectionColor())
                        arrow:Hide()
                        currentGroup:SetSelectionArrowVertices(vertices)
                    end  
                end

                currentXPosition = resetXPosition + scaleDivWidth
                currentYPosition = resetYPosition
                groupHeight = 0
                groupX = cast(integer, currentXPosition)
                i = i + 1
            end
        end

        if chart:HasTrendLine()
            if trendLinePoints:GetSize() < 2
                LinePath trendLine = chart:GetTrendLine()
                trendLine:Hide()
            else
                LinePath trendLine = chart:GetTrendLine()
                trendLine:Show()
                trendLine:SetSize(chartAreaContainer:GetWidth() * trendLine:GetPercentageWidth() + trendLine:GetPixelWidth() * trendLine:GetInterfaceScale(), chartAreaContainer:GetHeight() * trendLine:GetPercentageHeight() + trendLine:GetPixelHeight() * trendLine:GetInterfaceScale())
                trendLine:SetPosition(chartAreaContainer:GetWidth() * trendLine:GetPercentageX() + trendLine:GetPixelX() * trendLine:GetInterfaceScale(), chartAreaContainer:GetHeight() * trendLine:GetPercentageY() + trendLine:GetPixelY() * trendLine:GetInterfaceScale())
                
                // Set values to render the line where we want it.
                if horizontal
                    trendLine:MapToRegion(chart:GetXAxisMinimum(), chart:GetXAxisMaximum(), 0, chartAreaContainer:GetHeight())
                else
                    trendLine:MapToRegion(0, chartAreaContainer:GetWidth(), chart:GetYAxisMinimum(), chart:GetYAxisMaximum())
                end
                trendLine:SetPoints(trendLinePoints)
            end
        end
    end

end