package Libraries.Interface.Layouts

use Libraries.Interface.Controls.Control
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Charts.GeoMap
use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Interface.Controls.Charts.Region
use Libraries.Containers.Support.Pair
use Libraries.Game.Graphics.Color
use Libraries.Interface.Controls.Charts.SubRegion
use Libraries.Compute.Math
use Libraries.Game.Graphics.Drawable

class GeoMapLayout is ChartLayout
    Color transparent
    Math math
    
    action LayoutChartContent(Chart control, Control chartAreaContainer)
        // Make sure its of type GeoMap
        if not (control is GeoMap)
            return now
        end

        GeoMap chart = cast(GeoMap, control)
        Array<Region> regions = chart:GetRegions()
        Drawable mapAnchor = chart:GetMapAnchor()
        transparent:SetColor(0, 0, 0, 0)

        //We probably need to force a ratio so the map comes across correctly.??!
        number width = chartAreaContainer:GetWidth()
        number height = chartAreaContainer:GetHeight()
        number aspectRatioWidth = chart:GetAspectRatioWidth()
        number aspectRatioHeight = chart:GetAspectRatioHeight()
        
        number wPercent = aspectRatioWidth / width
        number hPercent = aspectRatioHeight / height
        number divisor = 0 // This will enforce ratio while maintaining maximum size.
        if wPercent > hPercent
            divisor = wPercent   
        else
            divisor = hPercent
        end

        number anchorWidth = aspectRatioWidth/divisor
        number anchorHeight = aspectRatioHeight/divisor

        mapAnchor:LoadFilledRectangle(cast(integer, anchorWidth), cast(integer, anchorHeight), transparent)

        integer anchorX = cast(integer, (width-anchorWidth)/2.0)
        integer anchorY = cast(integer, (height-anchorHeight)/2.0)

        mapAnchor:SetPosition(anchorX,anchorY)

        if not chart:GetIsLoaded()
            chartAreaContainer:Add(chart:GetMapAnchor())
        end

        number xmin = chart:GetXAxisMinimum()
        number xmax = chart:GetXAxisMaximum()
        number ymin = chart:GetYAxisMinimum()
        number ymax = chart:GetYAxisMaximum()
 
        integer i = 0
        repeat while i < regions:GetSize()
            Region currentRegion = regions:Get(i)
            integer j = 0
            repeat while j < currentRegion:GetSubRegions():GetSize()
                Array<Pair<number>> points = currentRegion:GetSubRegions():Get(j):GetPoints()
                
                Color color = currentRegion:GetColor()
                if color = undefined
                    Color red
                    color = red:Red():Copy()
                end
                Array<number> vertices
                Array<Color> colors
                integer k = 0
                repeat while k < points:GetSize()
                    number x = (points:Get(k):GetFirstValue() - xmin) / (xmax - xmin) * anchorWidth
                    number y = (points:Get(k):GetSecondValue() - ymin) / (ymax - ymin) * anchorHeight
                    vertices:Add(x)
                    vertices:Add(y)

                    colors:Add(color)
                    k = k + 1
                end

                
                if currentRegion:GetSubRegions():GetSize() > 1 and j > 0
                    SubRegion subRegion = currentRegion:GetSubRegions():Get(j-1)
                    subRegion:LoadShape(vertices, colors)
                    if not chart:GetIsLoaded()
                        chart:GetMapAnchor():Add(subRegion)
                    end
                else
                    currentRegion:LoadShape(vertices, colors)
                    if not chart:GetIsLoaded()
                        chart:GetMapAnchor():Add(currentRegion)
                    end
                end
                j = j + 1
            end    
            i = i + 1
        end 
        chart:SetIsLoaded(true)
    end //action LayoutChartContent
end //class