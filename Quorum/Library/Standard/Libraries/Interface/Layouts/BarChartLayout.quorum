package Libraries.Interface.Layouts

use Libraries.Interface.Controls.Control
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Charts.BarChart
use Libraries.Interface.Controls.Charts.Graphics.BarGroup
use Libraries.Interface.Controls.Charts.Graphics.Bar
use Libraries.Interface.Controls.Icon
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Compute.Math
use Libraries.Interface.Controls.ControlLabel

class BarChartLayout is SharedBarChartLayout
    integer outerEdgePadding = 0
    integer betweenGroupPadding = 0
    integer betweenBarPadding = 0
    integer barWidth = 0
    Math math

    /*
        This action will calculate the size and placement of the elements (bars) within the chart 
        based on the size of the display screen.
    */
    action LayoutChartContent(Chart control, Control chartAreaContainer)
        if not (control is BarChart)
            return now
        end

        BarChart chart = cast(BarChart, control)

        Array<BarGroup> barGroups = chart:GetBarGroups()
        
        number height = 0
        number width = 0

        integer currentXPosition = 0
        integer currentYPosition = 0
        number yMax = chart:GetYAxisMaximum()
        number yMin = chart:GetYAxisMinimum()
        number xMax = chart:GetXAxisMaximum()
        number xMin = chart:GetXAxisMinimum()
        number rangeMax = 0
        number rangeMin = 0

        boolean horizontal = chart:GetHorizontalFlag() // Default is vertical
        boolean stacked = chart:GetStackedFlag()
        boolean separateBySeries = chart:IsSeparatedBySeries()
        boolean separateByFactor = chart:IsSeparatedByFactor()

        if barGroups:GetSize() > 0
            integer numberOfGroups = barGroups:GetSize()
            integer numberOfBars = chart:GetNumberOfBars()
            
            if stacked
                numberOfBars = numberOfGroups
            end
            if separateBySeries
                numberOfBars = numberOfGroups
                stacked = false
            elseif separateByFactor
                numberOfGroups = 1
                if stacked
                    numberOfBars = 1
                else
                    numberOfBars = chart:GetSeriesList():GetSize()
                end
            end

            if horizontal
                currentYPosition = cast(integer, chart:GetVerticalPanel():GetAxis():GetWidth())
                width = chartAreaContainer:GetHeight()
                height = chartAreaContainer:GetWidth() - currentYPosition
                rangeMax = xMax
                rangeMin = xMin
            else
                if chart:GetHorizontalPanel():GetAxis() not= undefined
                    currentYPosition = cast(integer, chart:GetHorizontalPanel():GetAxis():GetHeight())
                end
                width = chartAreaContainer:GetWidth()
                height = chartAreaContainer:GetHeight() - currentYPosition
                rangeMax = yMax
                rangeMin = yMin
            end
            resetYPosition = currentYPosition

            // Space on each side of the inner chart (5%)
            outerEdgePadding = cast(integer, ((width * 0.05) / 2))

            if numberOfGroups > 1
                // Space spread evenly between each bar group (20%)
                betweenGroupPadding = cast(integer, math:Round((width * 0.20) / (numberOfGroups-1),true))
            end

            if numberOfBars not= numberOfGroups
                // Space spread evenly between each bar with the bar groups (5%)
                betweenBarPadding = cast(integer, ((width * 0.05) / (numberOfBars - numberOfGroups)))
            end
            
            // Total white space alloted for inner chart area
            integer totalOuterPadding = cast(integer, outerEdgePadding*2)
            integer totalBetweenGroupPadding = cast(integer, betweenGroupPadding*(numberOfGroups-1))
            integer totalBetweenBarPadding = cast(integer, betweenBarPadding*(numberOfBars - numberOfGroups))
            
            // Remaining non-white space to be evenly divided amongst all bars
            number remainingArea = width - totalOuterPadding - totalBetweenGroupPadding - totalBetweenBarPadding
            barWidth = cast(integer, math:Round(remainingArea / numberOfBars, true))

            // Recalculate the outer padding since we rounded several times.
            outerEdgePadding = cast(integer, (width - totalBetweenGroupPadding - totalBetweenBarPadding - (barWidth*numberOfBars))/2)

            chart:SetPaddedChartOffset(outerEdgePadding - cast(integer, betweenGroupPadding/2))

            Color transparent
            transparent:SetColor(0, 0, 0, 0)
            
            currentXPosition = currentXPosition + outerEdgePadding
            resetXPosition = currentXPosition

            // Tracking area of each bar group for group icon
            integer groupX = currentXPosition    // x-axis coordinate
            integer groupY = currentYPosition    // y-axis coordinate
            integer barHeight = 0
            integer groupWidth = 0               // width of entire group
            integer groupHeight = 0              // height of entire group

             
            integer negativeCurrentYPosition = 0

            integer i = 0
            repeat while i < barGroups:GetSize()
                BarGroup currentGroup = barGroups:Get(i)

                if stacked
                    currentYPosition = cast(integer, ((0-rangeMin)/(rangeMax-rangeMin)) * height)
                    negativeCurrentYPosition = currentYPosition
                end

                integer j = 0
                repeat while j < currentGroup:GetSize()
                    Bar currentBar
                    // We want to stack/display so it keeps the same order as the legend
                    if stacked 
                        if horizontal
                            currentBar = currentGroup:Get(j)
                        else
                            currentBar = currentGroup:Get(currentGroup:GetSize()-1-j)
                        end

                        if currentBar:GetValue() < 0
                            barHeight = cast(integer, ((currentBar:GetValue()-rangeMin)/(rangeMax-rangeMin)) * height)
                            negativeCurrentYPosition = negativeCurrentYPosition - barHeight
                            if barHeight >= 0 
                                if horizontal
                                    currentBar:LoadFilledRectangle(barHeight, barWidth, currentBar:GetColor())
                                    currentBar:SetPosition(negativeCurrentYPosition, currentXPosition)
                                else
                                    currentBar:LoadFilledRectangle(barWidth, barHeight, currentBar:GetColor())
                                    currentBar:SetPosition(currentXPosition, negativeCurrentYPosition)
                                end
                            end                            
                        else
                            barHeight = cast(integer, ((currentBar:GetValue() - 0)/(rangeMax-rangeMin)) * height)
                            if barHeight >= 0 
                                if horizontal
                                    currentBar:LoadFilledRectangle(barHeight, barWidth, currentBar:GetColor())
                                    currentBar:SetPosition(currentYPosition, currentXPosition)
                                else
                                    currentBar:LoadFilledRectangle(barWidth, barHeight, currentBar:GetColor())
                                    currentBar:SetPosition(currentXPosition, currentYPosition)
                                end
                            end
                            currentYPosition = currentYPosition + barHeight
                        end
                    else 
                        if horizontal
                            currentBar = currentGroup:Get(barGroups:Get(i):GetSize()-1-j)
                        else
                            currentBar = currentGroup:Get(j)
                        end

                        currentYPosition = cast(integer, ((0 - rangeMin)/(rangeMax-rangeMin)) * height)
                        if currentBar:GetValue() < 0
                            barHeight = cast(integer, ((currentBar:GetValue()-rangeMin)/(rangeMax-rangeMin)) * height)
                            currentYPosition = currentYPosition - barHeight
                        else
                            barHeight = cast(integer, ((currentBar:GetValue() - 0)/(rangeMax-rangeMin)) * height)
                        end

                        if barHeight >= 0 
                            if horizontal
                                currentBar:LoadFilledRectangle(barHeight, barWidth, currentBar:GetColor())
                                currentBar:SetPosition(currentYPosition, currentXPosition)
                            else
                                currentBar:LoadFilledRectangle(barWidth, barHeight, currentBar:GetColor())
                                currentBar:SetPosition(currentXPosition, currentYPosition)
                            end
                        end
                        if currentBar:ShowAnnotation() or chart:ShowAnnotations()
                            ControlLabel barLabel = currentBar:GetAnnotation()
                            if barLabel not= undefined
                                if horizontal
                                    integer annotY = cast(integer, currentXPosition + (barWidth/2.0 - barLabel:GetHeight()/2.0))
                                    if currentBar:GetValue() < 0
                                        barLabel:SetPosition(currentYPosition - barLabel:GetWidth(), annotY)
                                    else
                                        barLabel:SetPosition(currentYPosition + barHeight, annotY)
                                    end
                                else
                                    integer annotX = cast(integer, currentXPosition + (barWidth/2.0 - barLabel:GetWidth()/2.0))
                                    if currentBar:GetValue() < 0
                                        barLabel:SetPosition(annotX, currentYPosition - barLabel:GetHeight())
                                    else
                                        barLabel:SetPosition(annotX, currentYPosition + barHeight)
                                    end
                                end
                            end
                        end

                        if not separateBySeries
                            currentXPosition = currentXPosition + barWidth + betweenBarPadding
                        end
                    end 
                    j = j + 1
                end
                
                if stacked or chart:IsSeparated()
                    if horizontal 
                        currentGroup:LoadRectangle(currentYPosition, barWidth+betweenGroupPadding, transparent)
                        currentGroup:SetPosition(0, groupX-cast(integer, betweenGroupPadding/2))
                    else
                        currentGroup:LoadRectangle(barWidth+betweenGroupPadding, currentYPosition, transparent)
                        currentGroup:SetPosition(groupX-cast(integer, betweenGroupPadding/2), 0)
                    end
                    if separateByFactor
                        currentXPosition = resetXPosition
                        groupX = currentXPosition + (currentXPosition + barWidth + betweenGroupPadding)*(i+1)
                    else
                        currentXPosition = currentXPosition + barWidth + betweenGroupPadding
                        groupX = currentXPosition
                    end
                else
                    groupWidth = currentXPosition - betweenBarPadding - groupX + betweenGroupPadding
                    groupHeight = cast(integer, ((currentGroup:GetMaxBarValue()-rangeMin)/(rangeMax-rangeMin)) * height)
                    currentXPosition = currentXPosition + betweenGroupPadding - betweenBarPadding
                    if horizontal
                        currentGroup:LoadRectangle(cast(integer, groupHeight), cast(integer, groupWidth), transparent)
                        currentGroup:SetPosition(groupY, groupX-cast(integer, betweenGroupPadding/2))
                    else
                        currentGroup:LoadRectangle(cast(integer, groupWidth), cast(integer, groupHeight), transparent)
                        currentGroup:SetPosition(groupX-cast(integer, betweenGroupPadding/2) , groupY)
                    end
                    groupX = currentXPosition
                end
                currentYPosition = resetYPosition
                i = i + 1
            end
        end
    end
end