package Libraries.Interface.Layouts

use Libraries.Interface.Layouts.Layout

use Libraries.Interface.Controls.Control
use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Game.Graphics.Label
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Controls.Icon
use Libraries.Interface.Controls.Charts.Legend
use Libraries.Interface.Controls.Charts.Histogram
use Libraries.Interface.Controls.ControlLabel
use Libraries.Interface.Controls.Charts.SharedBarChartParent
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Game.Graphics.Color
use Libraries.Compute.Math
use Libraries.Interface.Controls.Charts.HorizontalAxisPanel
use Libraries.Interface.Controls.Charts.VerticalAxisPanel
use Libraries.Interface.Controls.Charts.Series
use Libraries.Interface.Controls.Charts.ChartAreaPanel


class ChartLayout is Layout
    integer minimumLabelOffset = 35
    number yLabelHeight = 0.30
    Math math

    action Layout(Control container, Array<Item2D> items, number containerWidth, number containerHeight)
        LayoutProperties containerProperties
        integer originPointX = 0
        integer originPointY = 0
        
        if container not= undefined
            containerProperties = container:GetLayoutProperties(containerWidth, containerHeight)
            if containerProperties not= undefined
                if containerProperties:NeedsRendering()
                    container:LoadGraphics(containerProperties)
                end
            end
            if container is Chart
                if items:GetSize() = 0
                    return now
                end
                Chart chart = cast(Chart, container)
                
                //setting an origin to position containers 
                originPointX = cast(integer, chart:GetWidth()*chart:GetVerticalPanelWidthPercent())
                originPointY = cast(integer, chart:GetHeight()*chart:GetHorizontalPanelHeightPercent())

                // Title
                ControlLabel titleLabel = chart:GetTitleLabel()
                if titleLabel:GetDefaultLayoutProperties():NeedsRendering()
                    titleLabel:LoadGraphics(titleLabel:GetDefaultLayoutProperties())
                end
                number titleAreaWidth = chart:GetChartArea():GetWidth()
                number titleAreaHeight = containerHeight*0.10 //hardcoded right now.
                integer titleX = originPointX + cast(integer, titleAreaWidth/2 - titleLabel:GetWidth()/2)
                integer titleY = cast(integer, containerHeight- titleAreaHeight/2 - titleLabel:GetHeight()/2)
                titleLabel:SetPosition(titleX, titleY)
                
                //Get Panel Containers
                HorizontalAxisPanel horizontalContainer = chart:GetHorizontalPanel()
                VerticalAxisPanel verticalContainer = chart:GetVerticalPanel()
                Legend legendContainer = chart:GetLegend()
                ChartAreaPanel chartAreaContainer = chart:GetChartArea()

                originPointX = 0
                originPointY = 0

                if legendContainer:DisplayOnRight() // This is default.. even when legend is not showing.
                    verticalContainer:SetPosition(originPointX, originPointY + horizontalContainer:GetHeight())
                    chartAreaContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY + horizontalContainer:GetHeight())
                    legendContainer:SetPosition(originPointX + verticalContainer:GetWidth() + chartAreaContainer:GetWidth(), originPointY + horizontalContainer:GetHeight())

                    horizontalContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY)
                    
                elseif legendContainer:DisplayOnLeft()
                    if chart:IsShowingYAxis()
                        legendContainer:SetPosition(originPointX, originPointY + horizontalContainer:GetHeight())
                        verticalContainer:SetPosition(originPointX + legendContainer:GetWidth(), originPointY + horizontalContainer:GetHeight())
                    else
                        verticalContainer:SetPosition(originPointX, originPointY + horizontalContainer:GetHeight())
                        legendContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY + horizontalContainer:GetHeight())
                    end

                    chartAreaContainer:SetPosition(originPointX + legendContainer:GetWidth() + verticalContainer:GetWidth(), originPointY + horizontalContainer:GetHeight())                 
                    horizontalContainer:SetPosition(originPointX + legendContainer:GetWidth() + verticalContainer:GetWidth(), originPointY)

                elseif legendContainer:DisplayOnTop()
                    verticalContainer:SetPosition(originPointX, originPointY + horizontalContainer:GetHeight())
                    chartAreaContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY + horizontalContainer:GetHeight())
                    
                    horizontalContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY)
                    legendContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY + horizontalContainer:GetHeight() + verticalContainer:GetHeight())

                else // legendContainer:DisplayOnBottom()
                    verticalContainer:SetPosition(originPointX, originPointY + legendContainer:GetHeight() + horizontalContainer:GetHeight())
                    chartAreaContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY + legendContainer:GetHeight() + horizontalContainer:GetHeight())
                    
                    if chart:IsShowingXAxis()
                        horizontalContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY + legendContainer:GetHeight())
                        legendContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY)
                    else
                        legendContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY + horizontalContainer:GetHeight())
                        horizontalContainer:SetPosition(originPointX + verticalContainer:GetWidth(), originPointY)
                    end
                end
                

                if chart:IsSeparatedByFactor()
                    integer verticalSections = verticalContainer:GetNumberOfSections()
                    integer horizontalSections = horizontalContainer:GetNumberOfSections()
                    integer tilePadding = 25
                    integer height = cast(integer, (chartAreaContainer:GetHeight()-tilePadding*(verticalSections-1))/verticalSections)
                    integer width = cast(integer, (chartAreaContainer:GetWidth()-tilePadding*(horizontalSections-1))/horizontalSections)
                    integer x = 0
                    integer y = 0
                    integer i = 0
                    integer j = 0
                    integer k = 0
                    repeat while i < chart:GetSubChartAreas():GetSize()
                        ChartAreaPanel subContainer = chart:GetSubChartAreas():Get(i)
                        if x + width > chartAreaContainer:GetWidth()
                            x = 0
                            y = y + height + tilePadding
                        end
                        subContainer:SetPosition(x, y)
                        subContainer:SetSize(width, height)
                        subContainer:OutlineChartArea()
                        LayoutChartContent(chart, subContainer)
                        if y = 0 and k < horizontalContainer:GetNumberOfSections()
                            HorizontalAxisPanel subAxis = chart:GetSubHorizontalPanels():Get(k)
                            subAxis:SetPosition(x,y)
                            subAxis:SetSize(width,horizontalContainer:GetHeight())
                            LayoutHorizontalAxis(chart, subAxis)
                            k = k + 1
                        end

                        if x = 0 and j < verticalContainer:GetNumberOfSections()
                            VerticalAxisPanel subAxis = chart:GetSubVerticalPanels():Get(j)
                            subAxis:SetPosition(x,y)
                            subAxis:SetSize(verticalContainer:GetWidth(),height)
                            LayoutVerticalAxis(chart, subAxis)
                            j = j + 1
                        end
                        x = x + width + tilePadding
                        i = i + 1
                    end
                else
                    LayoutChartContent(chart, chartAreaContainer)
                end

                if chart:IsShowingLegend()
                    LayoutLegend(chart, legendContainer)
                end

                if chart:IsShowingXAxis()
                    LayoutHorizontalAxis(chart, horizontalContainer)
                end

                if chart:IsShowingYAxis()
                    LayoutVerticalAxis(chart, verticalContainer)
                end
                
            end

            //Reset Layout flags so Layout doesn't called more than needed
            ResetLayoutFlags(container)
        end
    end

    action LayoutVerticalAxis(Chart chart, VerticalAxisPanel verticalContainer)
        VerticalAxisPanel mainVerticalContainer = chart:GetVerticalPanel()
        boolean usingGrouping = (chart:GetGroupPanels():GetSize() > 0) and mainVerticalContainer:UseTextLabelOverride()
        Color color

        //This is the ticks on the Y axis
        Array<Drawable> ticks = verticalContainer:GetTicks()
        Array<Drawable> brackets = verticalContainer:GetBrackets()
        Array<Drawable> lines = verticalContainer:GetMajorGridlines()
        Array<Drawable> minorlines = verticalContainer:GetMinorGridlines()
        Array<ControlLabel> scaleLabels = verticalContainer:GetLabels()

        integer originPointX = cast(integer, verticalContainer:GetWidth())
        integer originPointY = 0
        integer tickHeight = cast(integer, mainVerticalContainer:GetTickHeight())
        integer tickWidth = cast(integer, mainVerticalContainer:GetTickWidth())
        integer labelX = 0
        integer labelY = 0

        number tickX = 0
        number tickY = 0
        integer bracketY = 0

        number groupOffset = 0
        number scaleDivWidth = 0 
        number minorScaleDivWidth = 0  

        number chartWidth = chart:GetChartArea():GetWidth()
        number chartHeight = chart:GetChartArea():GetHeight() - tickHeight
        if chart:GetNumberOfChartAreas() > 1
            chartWidth = chart:GetSubChartAreas():Get(0):GetWidth()
            chartHeight = chart:GetSubChartAreas():Get(0):GetHeight()
        end 

        if usingGrouping
            groupOffset = cast(number, chart:GetGroupPanels():Get(0):GetHeight())/2.0
            originPointY = cast(integer, groupOffset) + chart:GetPaddedChartOffset()
            scaleDivWidth = cast(number, chart:GetGroupPanels():Get(0):GetHeight())
            chart:HideAllYGridLines()
        else
            scaleDivWidth = chartHeight / (ticks:GetSize()-1)
        end
        minorScaleDivWidth = scaleDivWidth/mainVerticalContainer:GetMinorGridlineCount()

        Drawable axis = mainVerticalContainer:GetAxis()
        if axis not= undefined
            axis:LoadFilledRectangle(tickHeight, cast(integer, chartHeight))
            axis:SetPosition(0, 0) //This line is in the chart area.
        end

        tickX = originPointX - tickWidth
        tickY = originPointY
        Drawable currentTick
        integer i = 0 
        integer j = 0
        repeat while i < ticks:GetSize()
            currentTick = ticks:Get(i)
            if i = ticks:GetSize()-1
                tickY = tickY - tickHeight //moves last tick down as to not go over chart border.
            end
            
            if usingGrouping
                integer panelindex = i mod chart:GetGroupPanels():GetSize()
                scaleDivWidth = cast(number, chart:GetGroupPanels():Get(panelindex):GetHeight())
                if mainVerticalContainer:ShowGroupBrackets()
                    bracketY = cast(integer, chart:GetGroupPanels():Get(panelindex):GetY())
                    if brackets:GetSize() >= (i*3)+2
                        integer index = i*3
                        brackets:Get(index):LoadFilledRectangle(tickWidth, tickHeight, color:LightGray())
                        brackets:Get(index):SetPosition(tickX-tickHeight, bracketY+tickHeight)
                        
                        brackets:Get(index+1):LoadFilledRectangle(tickHeight, cast(integer, scaleDivWidth)-tickHeight*2, color:LightGray())
                        brackets:Get(index+1):SetPosition(tickX-tickHeight, bracketY+tickHeight)

                        bracketY = bracketY + cast(integer, scaleDivWidth)

                        brackets:Get(index+2):LoadFilledRectangle(tickWidth, tickHeight, color:LightGray())
                        brackets:Get(index+2):SetPosition(tickX-tickHeight, bracketY-tickHeight*2)
                        tickX = tickX - tickHeight - tickWidth
                        currentTick:SetColor(color:LightGray())
                    end
                end
            end
            currentTick:LoadFilledRectangle(tickWidth, tickHeight)
            currentTick:SetPosition(cast(integer, tickX), cast(integer, tickY))

            if not chart:IsShowingYTicks()
                currentTick:Hide()
            end

            integer horizontalSections = chart:GetHorizontalPanel():GetNumberOfSections()
            integer startIndex = i*horizontalSections

            integer k = 0
            repeat while k < horizontalSections
                Drawable majorLine
                if chart:IsShowingMajorYGridLines() and startIndex < lines:GetSize()
                    if i = 0  // This will not draw the gridline that overlaps with the x-axis
                        if not chart:IsShowingXAxis()
                            majorLine = lines:Get(startIndex)
                        end
                    else
                        majorLine = lines:Get(startIndex)
                    end
                end                
                
                integer thin = cast(integer, tickHeight*0.75)
                majorLine:SetPosition(tickHeight, cast(integer, tickY+(thin/2)))
                majorLine:LoadFilledRectangle(cast(integer, chartWidth - tickHeight), thin, color:LightGray())
    
                if chart:IsShowingMinorYGridLines() and j < minorlines:GetSize() 
                    integer thinner = cast(integer, majorLine:GetHeight()/2)
                    number minorY = majorLine:GetY() + minorScaleDivWidth
    
                    repeat while j < ((startIndex)+1)*mainVerticalContainer:GetMinorGridlineCount() and minorY < axis:GetHeight()
                        Drawable minorLine = minorlines:Get(j)
                        minorLine:SetPosition(tickHeight, cast(integer, minorY+thinner))
                        minorLine:LoadFilledRectangle(cast(integer, chartWidth - tickHeight), thinner, color:LightGray())
                        j = j + 1
                        minorY = minorY + minorScaleDivWidth
                    end
                end
                k = k + 1
                startIndex = startIndex + 1
            end

            tickX = originPointX - tickWidth
            tickY = tickY + (scaleDivWidth*mainVerticalContainer:GetIntervalOverride())
            i = i + 1
        end

        //This code represents the labels on the Y axis 
        originPointX = cast(integer, verticalContainer:GetWidth() - 0.5*tickWidth)
        if chart:IsShowingYTicks()
            originPointX = originPointX - tickWidth
        end
        originPointY = 0
        if usingGrouping
            originPointY = cast(integer, groupOffset) + chart:GetPaddedChartOffset()
            if mainVerticalContainer:ShowGroupBrackets()
                originPointX = originPointX - tickHeight - tickWidth
            end
        end
        if not scaleLabels:IsEmpty()
            ControlLabel currentLabel
            i = 0
            repeat while i < scaleLabels:GetSize()
                currentLabel = scaleLabels:Get(i) 
                currentLabel:SetFontSize(mainVerticalContainer:GetLabelFontSize())
                
                if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                    currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                end

                labelX = cast(integer, originPointX - currentLabel:GetWidth())
                labelY = cast(integer, originPointY - (currentLabel:GetHeight()/2) + (tickHeight/2)  + ((scaleDivWidth*mainVerticalContainer:GetIntervalOverride())*i))

                currentLabel:SetPosition(labelX , labelY)
                i = i + 1
            end
        end
       
        //This is the actual rotated label on the Y axis.      
        if verticalContainer:GetTitleLabel() not= undefined
            number labelMinimumX = mainVerticalContainer:GetLongestLabel():GetX()

            ControlLabel axisLabel = verticalContainer:GetTitleLabel()
            Item2D labelAnchor = axisLabel:GetParent()
            if axisLabel:GetDefaultLayoutProperties():NeedsRendering()       
                axisLabel:LoadGraphics(axisLabel:GetDefaultLayoutProperties())
            end

            number axisLabelWidth = axisLabel:GetWidth()
            number axisLabelHeight = axisLabel:GetHeight()

            integer titleX = cast(integer, labelMinimumX - (1.5*tickWidth))
            integer titleY = cast(integer, (verticalContainer:GetHeight() - axisLabelWidth) / 2.0)

            labelAnchor:SetPosition(titleX, titleY)
            labelAnchor:SetRotation(270)
        end
    end

    /*
        Chart layouts do not have a way to determine the ticks of a subclass because charts are very different in style.
        As such, every chart needs to override this with ticks relevant for its own chart type.
    */
    action LayoutHorizontalAxis(Chart chart, HorizontalAxisPanel horizontalContainer)
        HorizontalAxisPanel mainHorizontalContainer = chart:GetHorizontalPanel()
        boolean usingGrouping = (chart:GetGroupPanels():GetSize() > 0) and mainHorizontalContainer:UseTextLabelOverride()
        Color color

        //This is the ticks on the Y axis
        Array<Drawable> ticks = horizontalContainer:GetTicks()
        Array<Drawable> brackets = horizontalContainer:GetBrackets()
        Array<Drawable> lines = horizontalContainer:GetMajorGridlines()
        Array<Drawable> minorlines = horizontalContainer:GetMinorGridlines()
        Array<ControlLabel> xLabels = horizontalContainer:GetLabels()

        integer originPointX = 0
        integer originPointY = cast(integer, horizontalContainer:GetHeight())
        integer tickHeight = cast(integer, mainHorizontalContainer:GetTickHeight())
        integer tickWidth = cast(integer, mainHorizontalContainer:GetTickWidth())
        integer labelX = 0
        integer labelY = 0

        number tickX = 0
        number tickY = 0
        integer bracketX = 0

        number groupOffset = 0
        number scaleDivWidth = 0 
        number minorScaleDivWidth = 0  
        number labelMinimumX = 0

        number chartWidth = chart:GetChartArea():GetWidth() - tickWidth
        number chartHeight = chart:GetChartArea():GetHeight() 
        if chart:GetNumberOfChartAreas() > 1
            chartWidth = chart:GetSubChartAreas():Get(0):GetWidth()
            chartHeight = chart:GetSubChartAreas():Get(0):GetHeight()
        end 

        if usingGrouping
            groupOffset = cast(number, chart:GetGroupPanels():Get(0):GetWidth())/2.0
            originPointX = cast(integer, groupOffset) + chart:GetPaddedChartOffset()
            scaleDivWidth = cast(number, chart:GetGroupPanels():Get(0):GetWidth())
            chart:HideAllXGridLines()
        else
            scaleDivWidth = chartWidth / (ticks:GetSize()-1)
        end
        minorScaleDivWidth = scaleDivWidth/mainHorizontalContainer:GetMinorGridlineCount()

        Drawable axis = mainHorizontalContainer:GetAxis()
        if axis not= undefined
            axis:LoadFilledRectangle(cast(integer, chartWidth), tickWidth)
            axis:SetPosition(0, 0)
        end

        tickX = originPointX
        tickY = originPointY - tickHeight 
        Drawable currentTick
        integer i = 0
        integer j = 0
        repeat while i < ticks:GetSize()
            currentTick = ticks:Get(i)
            if i = ticks:GetSize()-1
                tickX = tickX - tickWidth //moves last tick left as to not go over chart border.
            end
 
            if usingGrouping
                integer panelindex = i mod chart:GetGroupPanels():GetSize()
                scaleDivWidth = cast(number, chart:GetGroupPanels():Get(panelindex):GetWidth())
                if mainHorizontalContainer:ShowGroupBrackets()
                    bracketX = cast(integer, chart:GetGroupPanels():Get(panelindex):GetX())
                    if brackets:GetSize() >= (i*3)+2
                        integer index = i*3
                        brackets:Get(index):LoadFilledRectangle(tickWidth, tickHeight, color:LightGray())
                        brackets:Get(index):SetPosition(bracketX+tickWidth, tickY- tickWidth)
                        
                        brackets:Get(index+1):LoadFilledRectangle(cast(integer, scaleDivWidth)-tickWidth*2, tickWidth, color:LightGray())
                        brackets:Get(index+1):SetPosition(bracketX+tickWidth, tickY- tickWidth)

                        bracketX = bracketX + cast(integer, scaleDivWidth)

                        brackets:Get(index+2):LoadFilledRectangle(tickWidth, tickHeight, color:LightGray())
                        brackets:Get(index+2):SetPosition(bracketX-tickWidth*2, tickY- tickWidth)
                        tickY = tickY - tickHeight - tickWidth
                        currentTick:SetColor(color:LightGray())
                    end
                end
            end
            currentTick:LoadFilledRectangle(tickWidth, tickHeight)
            currentTick:SetPosition(cast(integer, tickX), cast(integer, tickY))
            if not chart:IsShowingXTicks()
                currentTick:Hide()
            end

            integer verticalSections = chart:GetVerticalPanel():GetNumberOfSections()
            integer startIndex = i*verticalSections

            integer k = 0
            repeat while k < verticalSections
                Drawable majorLine
                if chart:IsShowingMajorXGridLines() and startIndex < lines:GetSize()
                    if i = 0  // This will not draw the gridline that overlaps with the y-axis
                        if not chart:IsShowingYAxis()
                            majorLine = lines:Get(startIndex)
                        end
                    else
                        majorLine = lines:Get(startIndex)
                    end
                end
                integer thin = cast(integer, tickWidth*0.75)
                majorLine:SetPosition(cast(integer, tickX+(thin/2)), tickWidth)
                majorLine:LoadFilledRectangle(thin, cast(integer, chartHeight - tickWidth), color:LightGray())
    
                if chart:IsShowingMinorXGridLines() and j < minorlines:GetSize() 
                    integer thinner = cast(integer, majorLine:GetWidth()/2)
                    number minorX = majorLine:GetX() + minorScaleDivWidth
    
                    repeat while j < (startIndex+1)*mainHorizontalContainer:GetMinorGridlineCount() and minorX < axis:GetWidth()
                        Drawable minorLine = minorlines:Get(j)
                        minorLine:SetPosition(cast(integer, minorX+thinner), tickWidth)
                        minorLine:LoadFilledRectangle(thinner, cast(integer, chartHeight - tickWidth), color:LightGray())
                        j = j + 1
                        minorX = minorX + minorScaleDivWidth
                    end
                end
                k = k + 1
                startIndex = startIndex + 1
            end
            tickX = tickX + (scaleDivWidth*mainHorizontalContainer:GetIntervalOverride())
            tickY = originPointY - tickHeight
            i = i + 1
        end

        // This code represents the labels on the X axis 
        originPointX = 0
        if usingGrouping
            originPointX = cast(integer, groupOffset) + chart:GetPaddedChartOffset()
        end
        if chart:IsShowingXTicks()
            originPointY = originPointY - tickHeight
        end
        if mainHorizontalContainer:ShowGroupBrackets()
            originPointY = originPointY - tickHeight - tickWidth
        end

        number labelWidth = 0
        number labelHeight = 0
        number labelMinimumY = originPointY
        
        integer degrees = chart:GetXLabelsRotation() mod 360
        number cos = math:Cosine(math:DegreesToRadians(degrees))
        number sin = math:Sine(math:DegreesToRadians(degrees))

        integer maxXLabelOffset = 0
        i = 0
        repeat while i < xLabels:GetSize()
            ControlLabel currentLabel = xLabels:Get(i)
            currentLabel:SetFontSize(mainHorizontalContainer:GetLabelFontSize())
            Item2D labelAnchor = currentLabel:GetParent()
            if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
            end
            labelWidth = currentLabel:GetWidth()
            labelHeight = currentLabel:GetHeight()

            integer xCurrentLabel = cast(integer, originPointX + ((scaleDivWidth*mainHorizontalContainer:GetIntervalOverride()) * i) - (labelWidth / 2))
            integer yCurrentLabel = cast(integer, originPointY - labelHeight)
            if degrees not= 0
                number percent = cast(number, degrees mod 90)/90.0 
                integer startx = cast(integer, xCurrentLabel + (labelWidth/2))
                integer starty = yCurrentLabel
                integer deltaX = 0
                integer deltaY = 0                

                if degrees > 0 and degrees < 90
                    deltaY = cast(integer, percent*labelHeight)
                    if (starty - (labelWidth)*sin)  < labelMinimumY
                        labelMinimumY = (starty - (labelWidth)*sin)
                    end
                elseif degrees = 90
                    deltaX = cast(integer, (labelHeight/2))
                    deltaX = 0
                    deltaY = cast(integer, labelHeight)
                    if (starty - labelWidth) < labelMinimumY
                        labelMinimumY = (starty - labelWidth)
                    end
                elseif degrees > 90 and degrees < 180
                    deltaY = cast(integer, labelHeight)
                    if (starty - (labelWidth)*sin - (labelHeight)*sin)  < labelMinimumY
                        labelMinimumY = (starty - (labelWidth)*sin - (labelHeight)*sin)
                    end
                elseif degrees = 180
                    deltaX = cast(integer, (labelWidth/2))
                    deltaY = cast(integer, labelHeight)
                    if (starty - labelHeight)  < labelMinimumY
                        labelMinimumY = (starty - labelHeight)
                    end
                elseif degrees > 180 and degrees < 270
                    deltaX = cast(integer, -(labelWidth*cos))
                    deltaY = cast(integer, labelWidth*sin + labelHeight*sin + labelHeight)
                    if (starty + deltaY + labelHeight*sin)  < labelMinimumY
                        labelMinimumY = (starty + deltaY + labelHeight*sin) - labelHeight/2
                    end
                elseif degrees = 270
                    deltaX = cast(integer, (labelHeight/2) + (tickWidth/2))
                    deltaY = cast(integer, -labelWidth + labelHeight - (0.5*tickHeight))
                elseif degrees > 270 and degrees < 360
                    deltaX = cast(integer, -(labelWidth*cos))
                    deltaY = cast(integer, labelWidth*sin + labelHeight*sin + labelHeight)
                    if (starty + deltaY) < labelMinimumY
                        labelMinimumY = (starty + deltaY - labelHeight/2)
                    end
                end

                xCurrentLabel = cast(integer, startx + deltaX)
                yCurrentLabel = cast(integer, starty + deltaY)

                if i = xLabels:GetSize()-1
                    xCurrentLabel = xCurrentLabel - tickWidth //moves last label to match last tick
                end
            end
            labelAnchor:SetPosition(xCurrentLabel, yCurrentLabel)
            labelAnchor:SetRotation(degrees)
            if labelAnchor:GetY() < labelMinimumY
                labelMinimumY = labelAnchor:GetY()
            end
            i = i + 1
        end
        mainHorizontalContainer:SetLabelMinimum(labelMinimumY)
        
        if horizontalContainer:GetTitleLabel() not= undefined
            number labelMinY = mainHorizontalContainer:GetLongestLabel():GetParent():GetY()
            if chart:GetXLabelsRotation() < 180 and chart:GetXLabelsRotation() not=0
               labelMinY = mainHorizontalContainer:GetLabelMinimum()
            end
            ControlLabel axisLabel = horizontalContainer:GetTitleLabel()
            Item2D labelAnchor = axisLabel:GetParent()
            axisLabel:LoadGraphics(axisLabel:GetDefaultLayoutProperties())

            number axisLabelWidth = axisLabel:GetWidth()
            number axisLabelHeight = axisLabel:GetHeight()

            integer titleX = cast(integer, (horizontalContainer:GetWidth() - axisLabelWidth)/2.0)
            integer titleY = cast(integer, labelMinY - axisLabelHeight - (1.5*tickHeight))
            labelAnchor:SetPosition(titleX, titleY)
        end
    end

    action LayoutLegend(Chart chart, Legend legendContainer)
        if legendContainer:DisplayOnLeft() or legendContainer:DisplayOnRight()
            integer originPointX = 0
            integer originPointY = cast(integer, legendContainer:GetHeight()*0.90)
        
            //This code represents the label entries in the legend
            integer iconX = originPointX
            integer iconY = originPointY
    
            integer labelX = 0
            integer labelY = 0
            Array<Series> seriesList = legendContainer:GetSeriesList()
            if not seriesList:IsEmpty()
                ControlLabel currentLabel
                Icon currentIcon
    
                integer i = 0
                repeat while i < seriesList:GetSize()
                    currentLabel = seriesList:Get(i):GetLabel()
                    if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                        currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                    end
    
                    currentIcon = seriesList:Get(i):GetIcon()
                    integer iconSize = cast(integer, currentLabel:GetHeight())
                    currentIcon:LoadFilledRectangle(iconSize, iconSize, currentIcon:GetColor())
    
                    iconX = iconSize
                    iconY = cast(integer, iconY - (1.5*iconSize))
                    currentIcon:SetPosition(iconX , iconY)
                    
                    currentLabel:SetPosition(cast(integer, iconX + (iconSize*1.5)), cast(integer, iconY+(0.5*iconSize)-(currentLabel:GetHeight()/2)))
                    i = i + 1
                end
            end

            //This is the actual title of the legend.      
            if legendContainer:GetTitleLabel() not= undefined
                ControlLabel axisLabel = legendContainer:GetTitleLabel()
                Item2D labelAnchor = axisLabel:GetParent()
                if axisLabel:GetDefaultLayoutProperties():NeedsRendering()       
                    axisLabel:LoadGraphics(axisLabel:GetDefaultLayoutProperties())
                end
    
                number axisLabelWidth = axisLabel:GetWidth()
                number axisLabelHeight = axisLabel:GetHeight()
    
                integer titleX = cast(integer, iconX)
                integer titleY = cast(integer, originPointY)
    
                labelAnchor:SetPosition(titleX, titleY)
            end
        else //legendContainer:DisplayOnTop() or legendContainer:DisplayOnBottom()
            integer originPointX = 0
            integer originPointY = cast(integer, legendContainer:GetHeight()*0.50)
    
    
            //This is the actual title of the legend     
            if legendContainer:GetTitleLabel() not= undefined
                ControlLabel axisLabel = legendContainer:GetTitleLabel()
                Item2D labelAnchor = axisLabel:GetParent()
                if axisLabel:GetDefaultLayoutProperties():NeedsRendering()       
                    axisLabel:LoadGraphics(axisLabel:GetDefaultLayoutProperties())
                end
    
                number axisLabelWidth = axisLabel:GetWidth()
                number axisLabelHeight = axisLabel:GetHeight()
    
                integer titleX = cast(integer, originPointX)
                integer titleY = cast(integer, originPointY - (axisLabelHeight/2))
    
                labelAnchor:SetPosition(titleX, titleY)
                originPointX = originPointX + cast(integer, axisLabelWidth)
            end    

            //This code represents the label entries in the legend
            integer iconX = originPointX
            integer iconY = originPointY
    
            integer labelX = 0
            integer labelY = 0
            Array<Series> seriesList = legendContainer:GetSeriesList()
            if not seriesList:IsEmpty()
                ControlLabel currentLabel
                Icon currentIcon
    
                integer i = 0
                repeat while i < seriesList:GetSize()
                    currentLabel = seriesList:Get(i):GetLabel()
                    if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                        currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                    end
    
                    currentIcon = seriesList:Get(i):GetIcon()
                    integer iconSize = cast(integer, currentLabel:GetHeight())
                    currentIcon:LoadFilledRectangle(iconSize, iconSize, currentIcon:GetColor())
    
                    iconX = cast(integer, iconX + (1.5*iconSize))
                    iconY = originPointY - cast(integer, currentLabel:GetHeight()/2)
                    currentIcon:SetPosition(iconX , iconY)
                    
                    currentLabel:SetPosition(iconX + (1.5*iconSize), iconY)
                    iconX = cast(integer, iconX + currentLabel:GetWidth() + (1.5*iconSize))
                    i = i + 1
                end
            end
        end
    end

    // Resets all layout flags for the item and its entire children hierarchy.
    private action ResetLayoutFlags(Item2D item)
        if item is Control
            Control control = cast(Control, item)
            control:ResetLayoutFlag()
        end

        Array<Item2D> children = item:GetChildren()
        integer counter = 0
        repeat while counter < children:GetSize()
            ResetLayoutFlags(children:Get(counter))
            counter = counter + 1
        end
    end

    blueprint action LayoutChartContent(Chart chart, Control chartAreaContainer)
end