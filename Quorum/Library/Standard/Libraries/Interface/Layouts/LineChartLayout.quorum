package Libraries.Interface.Layouts

use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Control
use Libraries.Interface.Controls.Charts.LineChart
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Interface.Controls.Charts.ChartPoint
use Libraries.Interface.Controls.Charts.ChartPointComparison
use Libraries.Compute.Math
use Libraries.Interface.Controls.Charts.ChartLine

use Libraries.Game.Graphics.Color
use Libraries.Interface.Controls.Icon
use Libraries.Interface.Controls.Charts.LineSegment

/*
    This is the layout class for Line Chart. This class is responsible for 
    positioning all chart area components of the line chart.

    Attribute: Author Cody Molisee
*/
class LineChartLayout is TwoVariableChartLayout
    action LayoutChartContent(Chart control, Control chartAreaContainer)
        if not (control is LineChart)
            return now
        end      

        LineChart chart = cast(LineChart, control)
        Array<ChartLine> lines = chart:GetAllLines()
        number width = chartAreaContainer:GetWidth()
        number height = chartAreaContainer:GetHeight()

        // Give 1.5% of chart area space to each point
        number pointDensity = (width * 0.015) 
        integer radius = cast(integer, pointDensity/2)
        chart:SetPointRadius(radius)

        // Set default line density to 0.75% of chart area
        integer LineDensity = cast(integer, width * 0.0075)
        chart:SetLineDensity(LineDensity)

        integer i = 0
        repeat while i < lines:GetSize()
            if lines:Get(i):GetPoints() = undefined
                return now
            end

            integer j = 0
            repeat while j < lines:Get(i):GetPoints():GetSize()
                Icon pointIcon = lines:Get(i):GetPoints():Get(j):GetIcon()
                ChartPoint point = lines:Get(i):GetPoints():Get(j)
                
                if chart:GetPointsFlag()
                    point:LoadFilledCircle(radius, lines:Get(i):GetColor())
                    pointIcon:LoadFilledCircle(radius+2, chart:GetHighlightColor()) //Slightly denser when highlighted
                end
                point:SetPercentX((point:GetValueX() - chart:GetXAxisMinimum()) / (chart:GetXAxisMaximum() - chart:GetXAxisMinimum()))
                point:SetPercentY((point:GetValueY() - chart:GetYAxisMinimum()) / (chart:GetYAxisMaximum() - chart:GetYAxisMinimum()))
                integer x = cast(integer, point:GetPercentX() * width - (point:GetWidth() / 2.0))
                integer y = cast(integer, point:GetPercentY() * height - (point:GetHeight() / 2.0))
                point:SetPosition(x, y)
                pointIcon:SetPosition(x-2, y-2) // -2 to make up for denser icon
                pointIcon:Hide()
                j = j + 1
            end

            j = 0
            repeat while j < lines:Get(i):GetLines():GetSize()
                Icon lineIcon = lines:Get(i):GetLines():Get(j):GetIcon()
                LineSegment line = lines:Get(i):GetLines():Get(j)
                ChartPoint a = lines:Get(i):GetPoints():Get(j)
                ChartPoint b = lines:Get(i):GetPoints():Get(j + 1)
                Math math

                integer x1 = cast(integer, a:GetX())
                integer y1 = cast(integer, a:GetY())
                integer x2 = cast(integer, b:GetX())
                integer y2 = cast(integer, b:GetY())

                // Pythagorean Theorem
                number sideA = math:AbsoluteValue(x2 - x1) * math:AbsoluteValue(x2 - x1)
                number sideB = math:AbsoluteValue(y2 - y1) * math:AbsoluteValue(y2 - y1)
                number sideC = math:SquareRoot((sideA + sideB))
                number slope = math:Round(cast(number, (y2 - y1)) / cast(number, (x2 - x1)), 2)
                number tanInverse = math:Round(math:RadiansToDegrees(math:InverseTangent(slope)), 2)

                line:LoadFilledRectangle(cast(integer, sideC)+2, LineDensity, lines:Get(i):GetColor())
                lineIcon:LoadFilledRectangle(cast(integer, sideC)+3, LineDensity+2, chart:GetHighlightColor()) //Slightly denser when highlighted

                number angle = -1.0*tanInverse

                line:SetPosition(x1+radius, y1+radius)
                line:SetCenterX(x1+radius + (cast(number, x2 - x1) / 2.0)) 
                line:SetCenterY(y1+radius + (cast(number, y2 - y1) / 2.0))
                line:SetRotation(angle)
                number offX = math:Cosine(math:DegreesToRadians(angle))
                number offY = math:Sine(math:DegreesToRadians(angle))
                line:SetCenterY(line:GetCenterY() + offY)
                line:SetCenterX(line:GetCenterX() - offX)

                lineIcon:SetPosition(x1+radius, y1+radius)
                lineIcon:SetRotation(angle)
                lineIcon:SetCenterY(line:GetCenterY())
                lineIcon:SetCenterX(line:GetCenterX())
     
                line:SetPoint1(a)
                line:SetPoint2(b)
                line:SetName("Line segment between point " + (j+1) + " and " + (j+2) + ".")
                lineIcon:Hide()
                j = j + 1
            end
            i = i + 1
        end
    end
end