package Libraries.Interface.Layouts

use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Control
use Libraries.Containers.Array
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Controls.ControlLabel
use Libraries.Game.Graphics.Label
use Libraries.Interface.Controls.Charts.SharedBarChartParent
use Libraries.Interface.Controls.Icon
use Libraries.Compute.Math
use Libraries.Interface.Controls.Charts.BarGroup
use Libraries.Game.Graphics.Color
use Libraries.Interface.Controls.Charts.ChartOptions

class SharedBarChartLayout is ChartLayout
    integer request = 0
    integer outerEdgePadding = 0
    integer betweenGroupPadding = 0
    integer betweenBarPadding = 0
    integer barWidth = 0

    /*
        This action will calculate the size and placement of the elements (bars) within the chart 
        based on the size of the display screen.
    */
    action LayoutChartContent(Chart control, Control chartAreaContainer)
        if not (control is SharedBarChartParent)
            return now
        end
        request = request + 1
        SharedBarChartParent chart = cast(SharedBarChartParent, control)
        Control chartArea = chart:GetChartArea()
        originPointX = 0
        originPointY = 0
        Math math

        Array<BarGroup> barGroups = chart:GetBarGroups()
        
        Drawable axis = chart:GetXAxis()
        number axisHeight = axis:GetHeight()
        number axisWidth = axis:GetWidth()
        number height = chartArea:GetHeight()
        number width = chartArea:GetWidth()

        integer currentXPosition = 0
        integer currentYPosition = 0

        if barGroups:GetSize() > 0
            integer numberOfGroups = barGroups:GetSize()
            integer numberOfBars = chart:GetNumberOfBars()
            boolean stacked = chart:GetStackedFlag()
            if stacked
                numberOfBars = numberOfGroups
            end

            // Space on each side of the inner chart (5%)
            outerEdgePadding = cast(integer, ((width * 0.05) / 2))

            betweenGroupPadding = 0
            if barGroups:GetSize() > 1
                // Space spread evenly between each bar group (10%)
                betweenGroupPadding = cast(integer, ((width * 0.1) / (numberOfGroups-1)))
            end

            // Space spread evenly between each bar with the bar groups (5%)
            betweenBarPadding = cast(integer, ((width * 0.05) / (numberOfBars - numberOfGroups+1)))
            if stacked 
                betweenBarPadding = 0
            end

            // Total white space alloted for inner chart area
            totalPadding = cast(integer, (outerEdgePadding*2 + betweenGroupPadding*(numberOfGroups-1)))
            totalPadding = totalPadding + cast(integer, betweenBarPadding*(numberOfBars - numberOfGroups))
            
            // Remaining non-white space to be evenly divided amongst all bars (80%)
            remainingArea = cast(integer, (width - totalPadding))
            barWidth = cast(integer, remainingArea / numberOfBars)

            Color transparent
            transparent:SetColor(0, 0, 0, 0)
            
            Icon currentBar = barGroups:Get(0):Get(0):GetIcon()
            currentXPosition = currentXPosition + outerEdgePadding

            // Tracking area of each bar group for group icon
            integer groupX = currentXPosition    // x-axis coordinate
            integer groupY = 0                   // y-axis coordinate
            integer barHeight = 0
            integer groupWidth = 0               // width of entire group
            integer groupHeight = 0              // height of entire group

            number yAxisMaximum = chart:GetYAxisMaximum()
            number yAxisMinimum = chart:GetYAxisMinimum()
            number dataScale = yAxisMaximum/height

            integer i = 0
            repeat while i < barGroups:GetSize()
                integer j = 0
                repeat while j < barGroups:Get(i):GetSize()
                    currentBar = barGroups:Get(i):Get(j):GetIcon()
                    // Set bar width
                    currentBar:SetWidth(barWidth)
                    // Set bar height (percentage)
                    barHeight = cast(integer,(barGroups:Get(i):Get(j):GetValue())/dataScale)
                    number percent = barGroups:Get(i):Get(j):GetValue()/yAxisMaximum
                    barGroups:Get(i):Get(j):SetHeight(percent)

                    //Find max height for barGroup Icon
                    if(barHeight > groupHeight)
                        groupHeight = barHeight
                    end

                    currentBar:LoadFilledRectangle(barWidth, barHeight, currentBar:GetColor())
                    currentBar:SetPosition(currentXPosition, currentYPosition)
                    if stacked
                        currentYPosition = currentYPosition + barHeight
                    else
                        currentXPosition = currentXPosition + barWidth + betweenBarPadding
                    end
                    j = j + 1
                end
                // Creating Bar Group Icon
                Icon newIcon = barGroups:Get(i):GetIcon()
                LayoutProperties properties = newIcon:GetDefaultLayoutProperties()
                if stacked
                    newIcon:LoadRectangle(barWidth+6, currentYPosition+3, transparent)
                    currentXPosition = currentXPosition + barWidth + betweenGroupPadding
                    newIcon:SetPosition(groupX-3, 0)
                else
                    groupWidth = currentXPosition - betweenBarPadding - groupX
                    newIcon:LoadRectangle(cast(integer, groupWidth)+6, cast(integer, groupHeight+3), transparent)
                    currentXPosition = currentXPosition + betweenGroupPadding - betweenBarPadding
                    newIcon:SetPosition(groupX-3, groupY)
                end
                currentYPosition = 0
                groupHeight = 0
                groupX = currentXPosition
                i = i + 1
            end
        end
    end

    action LayoutHorizontalAxis(Chart control, Control horizContainer)
        if not (control is SharedBarChartParent)
            return now
        end

        Math math
        SharedBarChartParent chart = cast(SharedBarChartParent, control)
        //This is the Ticks on the X Axis
        Control chartAreaContainer = chart:GetChartArea()
        originPointX = 0
        originPointY = cast(integer, horizContainer:GetHeight())
        number barDivWidth = 0
        number barOffset = 0.05
        number xOrig = originPointX + chartAreaContainer:GetWidth()*barOffset
        Array<Drawable> ticks = chart:GetXTicks()

        Array<BarGroup> barGroups = chart:GetBarGroups()
        Array<ControlLabel> barLabels = chart:GetXLabels()
        integer yLabelOffset = 0

        integer numberOfGroups = barGroups:GetSize()
        integer numberOfBars = chart:GetNumberOfBars()
        boolean stacked = chart:GetStackedFlag()
        if stacked
            numberOfBars = numberOfGroups
        end

        //bump and label tick bump
        number bump = numberOfBars / (ticks:GetSize() * 1.0)
        if not ticks:IsEmpty() and not barGroups:IsEmpty() and not barLabels:IsEmpty()

            Label currentLabel = barLabels:Get(0)
            if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
            end

            yLabelOffset = cast(integer, 15 + currentLabel:GetHeight())
            integer labelY = originPointY - yLabelOffset

            Drawable axis = chart:GetXAxis()
            barDivWidth = cast(integer, axis:GetWidth() / (numberOfBars + 1))
            //adjust bar offset
            barOffset = (barDivWidth / chartAreaContainer:GetWidth()) / 2 //currently a percentage
            Drawable currentTick = ticks:Get(0)
            number tickX = originPointX + chartAreaContainer:GetWidth()*barOffset
            integer tickY = originPointY - cast(integer, currentTick:GetHeight())
            number labelX = tickX
            number barX = outerEdgePadding
            tickX = barX
            integer i = 0
            number centerOffset = 0
            repeat while i < ticks:GetSize()
                currentLabel = barLabels:Get(i)
    
                
                if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                    currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                end
                

                currentTick = ticks:Get(i)
                if stacked
                    centerOffset = ((barWidth + ((barGroups:Get(i):GetSize() - 1) * betweenBarPadding)) / 2)
                    tickX = barX + centerOffset
    
                    labelX = tickX - (currentLabel:GetWidth()/2)
                    currentLabel:SetPosition(labelX, labelY)
    
                    barX = barX + (barWidth + ((barGroups:Get(i):GetSize() - 1) * betweenBarPadding)) + betweenGroupPadding
                    currentTick:SetPosition(tickX, tickY)
                else
                    centerOffset = (((barGroups:Get(i):GetSize() * barWidth) + ((barGroups:Get(i):GetSize() - 1) * betweenBarPadding)) / 2)
                    tickX = barX + centerOffset
    
                    labelX = tickX - (currentLabel:GetWidth()/2)
                    currentLabel:SetPosition(labelX, labelY)
    
                    barX = barX + ((barGroups:Get(i):GetSize() * barWidth) + ((barGroups:Get(i):GetSize() - 1) * betweenBarPadding)) + betweenGroupPadding
                    currentTick:SetPosition(tickX, tickY)
                end
                i = i + 1
            end
        end

        //This is the label itself on the X axis
        originPointX = 0
        originPointY = cast(integer, horizContainer:GetHeight())
        Label axisLabel = chart:GetXLabel()
        number axisY = originPointY - (yLabelOffset + axisLabel:GetHeight()*1.5)
        if axisY < 1
            axisY = 1
        end
        axisLabel:SetX(cast(integer, horizContainer:GetWidth()/2 - axisLabel:GetWidth()/2))
        axisLabel:SetY(cast(integer, axisY))
        axisLabel:LoadGraphics(axisLabel:GetDefaultLayoutProperties())
    end
end