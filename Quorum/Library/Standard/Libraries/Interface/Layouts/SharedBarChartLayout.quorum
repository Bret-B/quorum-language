package Libraries.Interface.Layouts

use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Control
use Libraries.Containers.Array
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Controls.ControlLabel
use Libraries.Game.Graphics.Label
use Libraries.Interface.Controls.Charts.SharedBarChartParent
use Libraries.Interface.Controls.Icon
use Libraries.Compute.Math
use Libraries.Interface.Controls.Charts.BarGroup
use Libraries.Game.Graphics.Color
use Libraries.Interface.Controls.Charts.ChartOptions
use Libraries.Interface.Controls.Charts.Bar
use Libraries.Interface.Item2D

class SharedBarChartLayout is ChartLayout
    integer request = 0
    integer outerEdgePadding = 0
    integer betweenGroupPadding = 0
    integer betweenBarPadding = 0
    integer barWidth = 0

    /*
        This action will calculate the size and placement of the elements (bars) within the chart 
        based on the size of the display screen.
    */
    action LayoutChartContent(Chart control, Control chartAreaContainer)
        if not (control is SharedBarChartParent)
            return now
        end
        request = request + 1
        SharedBarChartParent chart = cast(SharedBarChartParent, control)
        Control chartArea = chart:GetChartArea()
        originPointX = 0
        originPointY = 0
        Math math

        Array<BarGroup> barGroups = chart:GetBarGroups()
        
        Drawable axis = chart:GetXAxis()
        number axisHeight = axis:GetHeight()
        number axisWidth = axis:GetWidth()
        number height = chartArea:GetHeight()
        number width = chartArea:GetWidth()

        integer currentXPosition = 0
        integer currentYPosition = 0

        if barGroups:GetSize() > 0
            integer numberOfGroups = barGroups:GetSize()
            integer numberOfBars = chart:GetNumberOfBars()
            boolean stacked = chart:GetStackedFlag()
            boolean horizontal = chart:GetHorizontalFlag()
            if stacked
                numberOfBars = numberOfGroups
            end
            if horizontal
                width = chartArea:GetHeight()
                height = chartArea:GetWidth()
            end

            // Space on each side of the inner chart (5%)
            outerEdgePadding = cast(integer, ((width * 0.05) / 2))

            betweenGroupPadding = 0
            if barGroups:GetSize() > 1
                // Space spread evenly between each bar group (10%)
                betweenGroupPadding = cast(integer, ((width * 0.1) / (numberOfGroups-1)))
            end

            // Space spread evenly between each bar with the bar groups (5%)
            betweenBarPadding = cast(integer, ((width * 0.05) / (numberOfBars - numberOfGroups+1)))
            if stacked 
                betweenBarPadding = 0
            end
            if chart:RemoveGaps() //Histograms do not have gaps in order to portray continuous ranges
                betweenGroupPadding = 1
                betweenBarPadding = 0
            end

            // Total white space alloted for inner chart area
            totalPadding = cast(integer, (outerEdgePadding*2 + betweenGroupPadding*(numberOfGroups-1)))
            totalPadding = totalPadding + cast(integer, betweenBarPadding*(numberOfBars - numberOfGroups))
            
            // Remaining non-white space to be evenly divided amongst all bars (80%)
            remainingArea = cast(integer, (width - totalPadding))
            barWidth = cast(integer, remainingArea / numberOfBars)

            Color transparent
            transparent:SetColor(0, 0, 0, 0)
            
            Icon currentBar = barGroups:Get(0):Get(0):GetIcon()
            currentXPosition = currentXPosition + outerEdgePadding

            // Tracking area of each bar group for group icon
            integer groupX = currentXPosition    // x-axis coordinate
            integer groupY = 0                   // y-axis coordinate
            integer barHeight = 0
            integer groupWidth = 0               // width of entire group
            integer groupHeight = 0              // height of entire group

            number yAxisMaximum = chart:GetYAxisMaximum()
            number yAxisMinimum = chart:GetYAxisMinimum()
            number dataScale = yAxisMaximum/height

            integer i = 0
            repeat while i < barGroups:GetSize()
                BarGroup currentGroup = barGroups:Get(i)

                // We want to display the bars to keeps the same order as the legend
                if not chart:HasBarGroups() and horizontal
                    currentGroup = barGroups:Get(barGroups:GetSize()-1-i)
                end

                integer j = 0
                repeat while j < currentGroup:GetSize()
                    Bar bar 
                    // We want to stack/display so it keeps the same order as the legend
                    if stacked
                        if horizontal
                            bar = currentGroup:Get(j)
                        else
                            bar = currentGroup:Get(currentGroup:GetSize()-1-j)
                        end
                    else
                        if horizontal
                            bar = currentGroup:Get(barGroups:Get(i):GetSize()-1-j)
                        else
                            bar = currentGroup:Get(j)
                        end
                    end
                    currentBar = bar:GetIcon()
                    barHeight = cast(integer,(bar:GetValue())/dataScale)

                    // Set bar height (percentage)
                    number percent = bar:GetValue()/yAxisMaximum
                    bar:SetHeight(percent)

                    //Find max height for barGroup Icon
                    if(barHeight > groupHeight)
                        groupHeight = barHeight
                    end

                    if horizontal 
                        currentBar:LoadFilledRectangle(barHeight, barWidth, currentBar:GetColor())
                        currentBar:SetPosition(currentYPosition, currentXPosition)
                    else
                        currentBar:LoadFilledRectangle(barWidth, barHeight, currentBar:GetColor())
                        currentBar:SetPosition(currentXPosition, currentYPosition)
                    end
                    if stacked
                        currentYPosition = currentYPosition + barHeight
                    else
                        currentXPosition = currentXPosition + barWidth + betweenBarPadding
                    end
                    j = j + 1
                end

                // Creating Bar Group Icon
                Icon newIcon = currentGroup:GetIcon()
                LayoutProperties properties = newIcon:GetDefaultLayoutProperties()
                if stacked
                    if horizontal 
                        newIcon:LoadRectangle(currentYPosition+3, barWidth+6, transparent)
                        newIcon:SetPosition(0, groupX-3)
                    else
                        newIcon:LoadRectangle(barWidth+6, currentYPosition+3, transparent)
                        newIcon:SetPosition(groupX-3, 0)
                    end
                    currentXPosition = currentXPosition + barWidth + betweenGroupPadding
                else
                    groupWidth = currentXPosition - betweenBarPadding - groupX
                    currentXPosition = currentXPosition + betweenGroupPadding - betweenBarPadding
                    if horizontal
                        newIcon:LoadRectangle(cast(integer, groupHeight+3), cast(integer, groupWidth)+6, transparent)
                        newIcon:SetPosition(groupY, groupX-3)
                    else
                        newIcon:LoadRectangle(cast(integer, groupWidth)+6, cast(integer, groupHeight+3), transparent)
                        newIcon:SetPosition(groupX-3, groupY)
                    end
                end
                currentYPosition = 0
                groupHeight = 0
                groupX = currentXPosition
                i = i + 1
            end
        end
    end

    action LayoutHorizontalAxis(Chart control, Control horizContainer)
        if not (control is SharedBarChartParent)
            return now
        end

        Math math
        Color color
        SharedBarChartParent chart = cast(SharedBarChartParent, control)
        //This is the Ticks on the X Axis
        Control chartAreaContainer = chart:GetChartArea()
        Array<Drawable> ticks = chart:GetXTicks()
        Array<ControlLabel> labels = chart:GetXLabels()

        originPointX = 0
        originPointY = cast(integer, horizContainer:GetHeight())
        integer yLabelOffset = 0

        if chart:GetHorizontalFlag()
            number scaleDivWidth = 0
            integer tickHeight = 0
            integer tickWidth = 0
            Array<Drawable> lines = chart:GetMajorXGridlines()
            Array<Drawable> minorlines = chart:GetMinorXGridlines()

            if not ticks:IsEmpty()     
                Drawable axis = chart:GetXAxis()
                Drawable currentTick = ticks:Get(0)
                tickHeight = cast(integer, currentTick:GetHeight())
                tickWidth = cast(integer, currentTick:GetWidth())
    
                scaleDivWidth = (axis:GetWidth() - tickWidth) / (ticks:GetSize() - 1)
                number minorScaleDivWidth = scaleDivWidth/5.0
                number tickX = originPointX
                integer tickY = originPointY - tickHeight       
    
                integer i = 0
                integer j = 0
                repeat while i < ticks:GetSize()
                    currentTick = ticks:Get(i)
                    currentTick:SetPosition(cast(integer, tickX), tickY)
    
                    Drawable majorLine
                    if chart:IsShowingMajorXGridLines() and i < lines:GetSize() and i > 0 // Don't do the left-most gridline
                        majorLine = lines:Get(i)
                    end
                    integer thin = cast(integer, currentTick:GetWidth()*0.75)
                    majorLine:SetPosition(cast(integer, tickX+(thin/2)), cast(integer, axis:GetHeight()))
                    majorLine:LoadFilledRectangle(thin, cast(integer, chart:GetChartArea():GetHeight()-axis:GetHeight()), color:LightGray())
    
                    if chart:IsShowingMinorXGridLines() and j < minorlines:GetSize() 
                        integer thinner = cast(integer, majorLine:GetWidth()/2)
                        number minorX = majorLine:GetX() + minorScaleDivWidth
    
                        repeat while j < (i+1)*5 and minorX < axis:GetWidth()
                            // Split five ways (4 minor lines)
                            Drawable minorLine = minorlines:Get(j)
                            minorLine:SetPosition(cast(integer, minorX+thinner), cast(integer, axis:GetHeight()))
                            minorLine:LoadFilledRectangle(thinner, cast(integer, chart:GetChartArea():GetHeight()-axis:GetHeight()), color:LightGray())
                            j = j + 1
                            minorX = minorX + minorScaleDivWidth
                        end
                    end
                    tickX = tickX + scaleDivWidth
                    i = i + 1
                end
            end
    
            // This code represents the labels on the X axis 
            originPointX = 0
            originPointY = originPointY - tickHeight
            integer labelHeight = 0
            yLabelOffset = 0
    
            Array<ControlLabel> xLabels = chart:GetXLabels()
            if not xLabels:IsEmpty()
                Label currentLabel = xLabels:Get(0)
                if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                    currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                end
                yLabelOffset = cast(integer, 15 + currentLabel:GetHeight())
    
                labelHeight = currentLabel:GetLineHeight()
                integer i = 0
                repeat while i < xLabels:GetSize()
                    currentLabel = xLabels:Get(i)
                    if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                        currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                    end
                    integer xCurrentLabel = cast(integer, originPointX + (scaleDivWidth * i) - (currentLabel:GetWidth() / 2))
                    integer yCurrentLabel = cast(integer, originPointY - currentLabel:GetLineHeight())
                    currentLabel:SetPosition(xCurrentLabel, yCurrentLabel)
                    i = i + 1
                end
            end
        else
            number barDivWidth = 0
            number barOffset = 0.05
            Array<BarGroup> barGroups = chart:GetBarGroups()  
            integer numberOfGroups = barGroups:GetSize()
            integer numberOfBars = chart:GetNumberOfBars()
            boolean stacked = chart:GetStackedFlag()
            if stacked
                numberOfBars = numberOfGroups
            end
    
            //bump and label tick bump
            number bump = numberOfBars / (ticks:GetSize() * 1.0)
            if not ticks:IsEmpty() and not barGroups:IsEmpty() and not labels:IsEmpty()
    
                Label currentLabel = labels:Get(0)
                if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                    currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                end
    
                yLabelOffset = cast(integer, 15 + currentLabel:GetHeight())
                integer labelY = originPointY - yLabelOffset
    
                Drawable axis = chart:GetXAxis()
                barDivWidth = cast(integer, axis:GetWidth() / (numberOfBars + 1))
                //adjust bar offset
                barOffset = (barDivWidth / chartAreaContainer:GetWidth()) / 2 //currently a percentage
                Drawable currentTick = ticks:Get(0)
                number tickX = originPointX + chartAreaContainer:GetWidth()*barOffset
                integer tickY = originPointY - cast(integer, currentTick:GetHeight())
                number labelX = tickX
                number barX = outerEdgePadding
                tickX = barX
                integer i = 0
                number centerOffset = 0
                repeat while i < ticks:GetSize()
                    currentLabel = labels:Get(i)
        
                    
                    if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                        currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                    end
                    
    
                    currentTick = ticks:Get(i)
                    if stacked
                        centerOffset = ((barWidth + ((barGroups:Get(i):GetSize() - 1) * betweenBarPadding)) / 2)
                        tickX = barX + centerOffset
        
                        labelX = tickX - (currentLabel:GetWidth()/2)
                        currentLabel:SetPosition(labelX, labelY)
        
                        barX = barX + (barWidth + ((barGroups:Get(i):GetSize() - 1) * betweenBarPadding)) + betweenGroupPadding
                        currentTick:SetPosition(tickX, tickY)
                    else
                        centerOffset = (((barGroups:Get(i):GetSize() * barWidth) + ((barGroups:Get(i):GetSize() - 1) * betweenBarPadding)) / 2)
                        tickX = barX + centerOffset
        
                        labelX = tickX - (currentLabel:GetWidth()/2)
                        currentLabel:SetPosition(labelX, labelY)
        
                        barX = barX + ((barGroups:Get(i):GetSize() * barWidth) + ((barGroups:Get(i):GetSize() - 1) * betweenBarPadding)) + betweenGroupPadding
                        currentTick:SetPosition(tickX, tickY)
                    end
                    i = i + 1
                end
            end
        end
    
        //This is the label itself on the X axis
        originPointX = 0
        originPointY = cast(integer, horizContainer:GetHeight())
        Label axisLabel = chart:GetXLabel()
        number axisY = originPointY - (yLabelOffset + axisLabel:GetHeight()*1.5)
        if axisY < 1
            axisY = 1
        end
        axisLabel:SetX(cast(integer, horizContainer:GetWidth()/2 - axisLabel:GetWidth()/2))
        axisLabel:SetY(cast(integer, axisY))
        axisLabel:LoadGraphics(axisLabel:GetDefaultLayoutProperties())
    end

    /* 
    This action will only be used if the bar chart is horizontal. 
    If it is vertical, the action LayoutVerticalAxis in ChartLayout is called. 
    */
    action LayoutVerticalAxis(Chart control, Control vertContainer)
        if not (control is SharedBarChartParent)
            return now
        end
        Math math
        SharedBarChartParent chart = cast(SharedBarChartParent, control)
        Control chartAreaContainer = chart:GetChartArea()
        if chart:GetHorizontalFlag()
            //This is the Ticks on the Y Axis
            originPointX = cast(integer, vertContainer:GetWidth())
            originPointY = 0
            number barDivWidth = 0
            number barOffset = 0.05

            Array<Drawable> ticks = chart:GetYTicks()
            Array<ControlLabel> barLabels = chart:GetYLabels()
            Array<BarGroup> barGroups = chart:GetBarGroups()

            integer xLabelOffset = 0
            integer numberOfGroups = barGroups:GetSize()
            integer numberOfBars = chart:GetNumberOfBars()
            boolean stacked = chart:GetStackedFlag()
            if stacked
                numberOfBars = numberOfGroups
            end
    
            if not ticks:IsEmpty() and not barGroups:IsEmpty() and not barLabels:IsEmpty()
                //bump and label tick bump
                number bump = numberOfBars / (ticks:GetSize() * 1.0)
    
                Label currentLabel = barLabels:Get(barLabels:GetSize()-1)
                if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                    currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                end
 
                Drawable axis = chart:GetYAxis()
                barDivWidth = cast(integer, axis:GetHeight() / (numberOfBars + 1))
                //adjust bar offset
                barOffset = (barDivWidth / chartAreaContainer:GetWidth()) / 2 //currently a percentage
                Drawable currentTick = ticks:Get(0) 
                integer tickX = originPointX - cast(integer, currentTick:GetWidth() - axis:GetWidth())
                number tickY = originPointY + chartAreaContainer:GetWidth()*barOffset
                number labelY = tickY             
                number barY = outerEdgePadding
                tickY = barY
                integer i = 0
                number centerOffset = 0
                repeat while i < ticks:GetSize()
                    currentLabel = barLabels:Get(barLabels:GetSize()-1-i)
                    xLabelOffset = cast(integer, 15 + currentLabel:GetWidth())
                    integer labelX = originPointX - xLabelOffset
        
                    if currentLabel:GetDefaultLayoutProperties():NeedsRendering()
                        currentLabel:LoadGraphics(currentLabel:GetDefaultLayoutProperties())
                    end

                    currentTick = ticks:Get(i)
                    if stacked
                        centerOffset = ((barWidth + ((barGroups:Get(i):GetSize() - 1) * betweenBarPadding)) / 2)
                        tickY = barY + centerOffset
        
                        labelY = tickY - (currentLabel:GetHeight()/2)
                        currentLabel:SetPosition(labelX, labelY)
        
                        barY = barY + (barWidth + ((barGroups:Get(i):GetSize() - 1) * betweenBarPadding)) + betweenGroupPadding
                        currentTick:SetPosition(tickX, tickY)
                    else
                        centerOffset = (((barGroups:Get(i):GetSize() * barWidth) + ((barGroups:Get(i):GetSize() - 1) * betweenBarPadding)) / 2)
                        tickY = barY + centerOffset
        
                        labelY = tickY - (currentLabel:GetHeight()/2)
                        currentLabel:SetPosition(labelX, labelY)
        
                        barY = barY + ((barGroups:Get(i):GetSize() * barWidth) + ((barGroups:Get(i):GetSize() - 1) * betweenBarPadding)) + betweenGroupPadding
                        currentTick:SetPosition(tickX, tickY)
                    end
                    
                    i = i + 1
                end
            end

            //This is the actual rotated label on the Y axis.
            originPointX = cast(integer, vertContainer:GetWidth())
            originPointY = 0
            ControlLabel axisLabel = chart:GetYLabel()
            Item2D labelAnchor = axisLabel:GetParent()       
    
            axisLabel:LoadGraphics(axisLabel:GetDefaultLayoutProperties())
            number axisLabelWidth = axisLabel:GetWidth()
            number axisLabelHeight = axisLabel:GetHeight()
            integer axisX = cast(integer, (originPointX + axisLabelHeight) / 2.0)
            labelAnchor:SetPosition(axisX, (vertContainer:GetHeight() - axisLabelWidth) / 2.0)
            labelAnchor:SetRotation(270)
        else
            parent:ChartLayout:LayoutVerticalAxis(control, vertContainer)
        end
    end
end