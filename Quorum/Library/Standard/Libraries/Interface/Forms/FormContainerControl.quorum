package Libraries.Interface.Forms

use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Interface.Controls.Button
use Libraries.Interface.Controls.Control
use Libraries.Game.Graphics.Label
use Libraries.Interface.Controls.Icon
use Libraries.Interface.Controls.TextField
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Controls.List
use Libraries.Interface.Controls.RadioButton
use Libraries.Interface.Controls.Checkbox
use Libraries.Interface.Controls.TextBox
use Libraries.Interface.Controls.ButtonGroup
use Libraries.Interface.Controls.ToggleButton
use Libraries.System.File


/*

    This class represents a general form container control. The 
    FormContainerControl includes Pages and groupings. This class 
    provides a generic structure for elements placed on a form application. Generally,
    you do not need to create a FormContainerControl itself and instead would use
    a subclass of Page or Grouping.

    Attribute: Author Andreas Stefik, William Allee

*/
class FormContainerControl is Control
    boolean hasDefaultFocusOrdering = false
    boolean skipLabelsInFocus = false
    FormLabel titleLabel = undefined
    Form form = undefined
    
    FormConstants constants
    integer titleSize = constants:DEFAULT_FONT_SIZE

    /*
    If the titleAlignment is set to default, it will attempt to match the alignment
    of the container, if there is one, or mirror the content alignment if there's not.
    */
    integer titleAlignment = constants:DEFAULT_ALIGN

    /*
    If the contentAlignment is set to default, it'll match the alignment of the
    container if there is one, or otherwise it'll align to the center.
    */
    integer contentAlignment = constants:DEFAULT_ALIGN

    FormDelayedAssetLoader delayedLoader

    /*
        This action sets the title of the form control.

        Attribute: Parameter title The text value to set the title of the control to.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page

        class Main
            action Main
                Form form
                Page page = form:GetMainPage()
                page:SetTitle("my title")

                form:Display()
            end
        end
    */
    action SetTitle(text title)
        if title = ""
            if titleLabel not= undefined
                Remove(titleLabel)
            end
            titleLabel = undefined
        else
            FormLabel label
            titleLabel = label

            label:SetFontSize(titleSize)
            label:SetName(GetName() + " Title Label")
            label:SetText(title)
            label:SetFocusable(true)
            Add(0, label)
        end
    end

    /*
        This action returns the title of the form control.

        Attribute: Returns The text value of the title of the control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page

        class Main
            action Main
                Form form
                Page page = form:GetMainPage()
                text title = page:GetTitle()

                form:Display()
            end
        end
    */
    action GetTitle returns text
        if titleLabel not= undefined
            return titleLabel:GetText()
        else
            return ""
        end
    end

    /*
        This action sets the font size of the title on the form control.

        Attribute: Parameter size The integer value to set the font size of the controls title.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page

        class Main
            action Main
                Form form
                Page page = form:GetMainPage()
                page:SetTitle("my title")
                page:SetTitleFontSize(18)

                form:Display()
            end
        end
    */
    action SetTitleFontSize(integer size)
        titleSize = size
        if titleLabel not= undefined
            titleLabel:SetFontSize(size)
        end
    end
    /*
        This action gets the font size of the title on the form control.

        Attribute: Returns The integer font size of the controls title.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page

        class Main
            action Main
                Form form
                Page page = form:GetMainPage()
                page:SetTitle("my title")
                integer fontSize = page:GetTitleFontSize()

                form:Display()
            end
        end
    */
    action GetTitleFontSize returns integer
        return titleSize
    end
    /*
        This action sets the font size of the title on the form control to the default tiny size.
    */
    action SetTitleSizeTiny
        SetTitleFontSize(constants:TINY_FONT_SIZE)
    end
    /*
        This action sets the font size of the title on the form control to the default small size.
    */
    action SetTitleSizeSmall
        SetTitleFontSize(constants:SMALL_FONT_SIZE)
    end
    /*
        This action sets the font size of the title on the form control to the default medium size.
    */
    action SetTitleSizeMedium
        SetTitleFontSize(constants:MEDIUM_FONT_SIZE)
    end
    /*
        This action sets the font size of the title on the form control to the default large size.
    */
    action SetTitleSizeLarge
        SetTitleFontSize(constants:LARGE_FONT_SIZE)
    end
    /*
        This action sets the font size of the title on the form control to the default huge size.
    */
    action SetTitleSizeHuge
        SetTitleFontSize(constants:HUGE_FONT_SIZE)
    end
    /*
        This action aligns the title on the form control to the left.
    */
    action LeftAlignTitle
        titleAlignment = constants:LEFT_ALIGN
        RequestLayout()
    end
    /*
        This action aligns the title on the form control to the right.
    */
    action RightAlignTitle
        titleAlignment = constants:RIGHT_ALIGN
        RequestLayout()
    end
    /*
        This action aligns the title on the form control to the center.
    */
    action CenterAlignTitle
        titleAlignment = constants:CENTER_ALIGN
        RequestLayout()
    end
    /*
        This action aligns any content in the control to the left.
    */
    action LeftAlignContent
        contentAlignment = constants:LEFT_ALIGN
        RequestLayout()
    end
    /*
        This action aligns any content in the control to the right.
    */
    action RightAlignContent
        contentAlignment = constants:RIGHT_ALIGN
        RequestLayout()
    end
    /*
        This action aligns any content in the control to the center.
    */
    action CenterAlignContent
        contentAlignment = constants:CENTER_ALIGN
        RequestLayout()
    end
    /*
        This action adds a button to the control.

        Attribute: Parameter name The text name identifying the button.
        Attribute: Returns The button object created when the AddButton(text) action is called.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Controls.Button

        class Main
            action Main
                Form form
                Page page = form:GetMainPage()
                Button button = page:AddButton("my button")

                form:Display()
            end
        end
    */
    action AddButton(text name) returns Button
        Button button
        button:SetName(name)
        button:SetAutomaticFontSizing(true)
        button:SetHorizontalLayoutMode(button:parent:Control:STANDARD)
        button:SetVerticalLayoutMode(button:parent:Control:STANDARD)
        button:SetToDefaultFontSize()

        Add(button)
        return button
    end
    /*
        This action changes the icon(image) on a button in the control. This action 
        should only be used when the button is created and displayed on the form (after form:Display() 
        is called). 

        Attribute: Parameter name The text name identifying the button.
        Attribute: Parameter fileName The path of the image to use as the button icon.

        Attribute: Example
        use Libraries.Interface.Events.BehaviorEvent
        use Libraries.Interface.Forms.FormBehavior
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Item
        use Libraries.Interface.Forms.FormBehavior
        use Libraries.Interface.Events.BehaviorEvent
        use Libraries.Interface.Controls.Button
        
        class Main is FormBehavior
            action Main
                // create the app
                Form form
                
                Page homePage = form:GetMainPage() 
                Button button = homePage:AddButton("my button", "Images/Blue Jay.png")
                
                button:SetBehavior(me)
                
                form:Display()
            end
        
            action Run(BehaviorEvent event)
                Form form = GetForm()
                Page page = GetPage()
                
                page:ChangeButtonIcon("my button", "Images/adoptUs.png")
            end
        end
    */
    action ChangeButtonIcon(text name, text fileName)
        Button button = GetButton(name)
        File file = undefined
        if form not= undefined and form:GetMediaLocation() not= undefined
            File file2
            file = file2
            file:SetWorkingDirectory(form:GetMediaLocation())
            file:SetPath(fileName)
        end

        if button = undefined
            alert("I couldn't find a Button named " + name + ". Are you looking for the right item?")
        else
            Drawable drawable
            if file not= undefined
                drawable:Load(file)
            else
                drawable:Load(fileName)
            end
            button:SetIcon(drawable)
            button:RequestLayout()
        end
    end
    /*
        This action adds a button with an icon to the control.

        Attribute: Parameter name The text name identifying the button.
        Attribute: Parameter fileName The text file path to where the image used as the button icon is located.
        Attribute: Returns The button object created when the AddButton(text, text) action is called.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Controls.Button

        class Main
            action Main
                Form form
                Page page = form:GetMainPage()
                Button button = page:AddButton("my button", "Images/adoptUs.png")

                form:Display()
            end
        end
    */
    action AddButton(text name, text fileName) returns Button
        Button button = AddButton(name)

        File file = undefined
        if form not= undefined and form:GetMediaLocation() not= undefined
            File file2
            file = file2
            file:SetWorkingDirectory(form:GetMediaLocation())
            file:SetPath(fileName)
        end

        if delayedLoader:IsGameAvailable()
            Drawable drawable
            if file not= undefined
                drawable:Load(file)
            else
                drawable:Load(fileName)
            end
            button:SetIcon(drawable)

            button:SetPixelWidth(0)
            button:SetPixelHeight(0)
            button:SetVerticalLayoutMode(button:parent:Control:STANDARD)
            button:SetHorizontalLayoutMode(button:parent:Control:MAINTAIN_ASPECT_RATIO)
            button:SetPercentageWidth(drawable:GetWidth() / drawable:GetHeight())
        else
            delayedLoader:AddRequest(button, fileName, file)
        end


        button:SetFont(undefined)
        button:SetToHugeFont()
        return button
    end

    /*
        This action removes a button from the control.

        Attribute: Parameter name The text name identifying the button.
        Attribute: Returns The button object removed from the control.

        Attribute: Example
        use Libraries.Interface.Events.BehaviorEvent
        use Libraries.Interface.Forms.FormBehavior
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Item
        use Libraries.Interface.Forms.FormBehavior
        use Libraries.Interface.Events.BehaviorEvent
        use Libraries.Interface.Controls.Button
        
        class Main is FormBehavior
            action Main
                // create the app
                Form form
  
                Page homePage = form:GetMainPage() 
                homePage:AddButton("my button")
        
                Button button = homePage:RemoveButton("my button")
                
                form:Display()
            end
        end
    */
    action RemoveButton(text name) returns Button
        Button button = GetButton(name)
        if button not= undefined
            Remove(button)
            return button
        end
        alert("I couldn't find a Button named " + name + ". Are you looking for the right item?")
    end
    /*
        This action gets a button from the control.

        Attribute: Parameter name The text name identifying the button.
        Attribute: Returns The button object found in the control with the same name.

        Attribute: Example
        use Libraries.Interface.Events.BehaviorEvent
        use Libraries.Interface.Forms.FormBehavior
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Item
        use Libraries.Interface.Forms.FormBehavior
        use Libraries.Interface.Events.BehaviorEvent
        use Libraries.Interface.Controls.Button
        
        class Main is FormBehavior
            action Main
                // create the app
                Form form
        
                Page homePage = form:GetMainPage() 
                homePage:AddButton("my button")
        
                Button button = homePage:GetButton("my button")
                output button:GetName()
                
                form:Display()
            end
        end
    */
    action GetButton(text name) returns Button
        Array<Item2D> children = GetFormChildren()
        i = 0
        repeat while i < children:GetSize()
            Item2D control = children:Get(i)
            if control not= undefined and control:GetName() = name and control is Button
                return cast(Button, control)
            elseif control is FormContainerControl
                FormContainerControl interface = cast(FormContainerControl, cast(Object, control))
                Button candidate = interface:GetButton(name)
                if candidate not= undefined
                    return candidate
                end
            end
            i = i + 1
        end

        return undefined
    end

    /*
        Forms by default can calculate a default ordering for focus across a set of controls. This means that if 
        this action is called, the system will dig through the form that is being created and calculate such an 
        order. This action is intentionally limited and, while it works for default cases and typical controls, 
        callers should recognize that complex or highly custom forms will likely require additional work. Put 
        another way, focus orderings are typically not one size fits all, even if this action tries to calculate 
        sensible defaults under many common conditions. 
    */
    action CalculateDefaultFocusOrdering
        SetHasDefaultFocusOrdering(true)
        Array<Item2D> children = GetFormChildren()
        Item2D previous = undefined
        Item2D first = undefined
        i = 0

        repeat while i < children:GetSize()
            Item2D control = children:Get(i)
            if control not= undefined and first = undefined
                if control is FormContainerControl
                    FormContainerControl interface = cast(FormContainerControl, cast(Object, control))
                    interface:CalculateDefaultFocusOrdering()
                    Item2D item = interface:GetFirstFocusableItem()
                    if item not= undefined and item:IsFocusable()
                        first = item
                    end

                    item = interface:GetLastFocusableItem()
                    if item not= undefined and item:IsFocusable()
                        previous = item
                    end
                elseif control not= undefined and control:IsFocusable()
                    first = control
                    previous = control
                end
            else
                if control not= undefined and previous not= undefined
                    //if it's a form container, set it to the child
                    if control is FormContainerControl
                        FormContainerControl interface = cast(FormContainerControl, cast(Object, control))
                        interface:CalculateDefaultFocusOrdering()
                        Item2D item = interface:GetFirstFocusableItem()
                        if item not= undefined and item:IsFocusable()
                            previous:SetNextFocus(item)
                            item:SetPreviousFocus(previous)
                        end


                        //if it's a group of radio buttons, it may not have focusable items
                        //because it's the group itself that gets the focus.
                        if interface is ButtonGroup and item = undefined
                            previous:SetNextFocus(interface)
                        else
                            item = interface:GetLastFocusableItem()
                            if item not= undefined and item:IsFocusable()
                                previous = item
                            end
                        end
                        
                    else //else just set next and previous
                        previous:SetNextFocus(control)
                        control:SetPreviousFocus(previous)

                        if control not= undefined and control:IsFocusable()
                            previous = control
                        end
                    end
                end
            end
            
            i = i + 1
        end

        if previous not= undefined and first not= undefined
            previous:SetNextFocus(first)
            first:SetPreviousFocus(previous)
        end
    end
    /*
        This action gets the first focusable item in the focus order. It assumes
        that such an order has been calculated.

        Attribute: Returns The first Item2D idtem in the focus order.
    */
    action GetFirstFocusableItem returns Item2D
        Array<Item2D> children = GetFormChildren()
        i = 0
        repeat while i < children:GetSize()
            Item2D control = children:Get(i)
            Item2D item = GetFocusedItem(control)
            if item not= undefined and item:IsFocusable()
                return item
            end
            i = i + 1
        end

        FormContainerControl this = me
        if me is ButtonGroup
            return me
        end
        return undefined
    end

    private action GetFocusedItem(Item2D control) returns Item2D
        if control not= undefined 
            if control is FormContainerControl
                FormContainerControl interface = cast(FormContainerControl, cast(Object, control))
                Item2D item = interface:GetFirstFocusableItem()
                if item not= undefined and item:IsFocusable()
                    return item
                end
            elseif control:IsFocusable()
                return control
            end
        end
        return undefined
    end

    /*
        This action gets the last focusable item in the focus order. It assumes such an
        order has been calculated.

        Attribute: Returns The last Item2D item in the focus order.
    */
    action GetLastFocusableItem returns Item2D
        Array<Item2D> children = GetFormChildren()
        i = children:GetSize() - 1
        repeat while i >= 0
            Item2D control = children:Get(i)
            Item2D item = GetFocusedItem(control)
            if item not= undefined and item:IsFocusable()
                return item
            end
            i = i - 1
        end

        FormContainerControl this = me
        if me is ButtonGroup
            return me
        end
        return undefined
    end

    /*
        This action adds a label to the control.

        Attribute: Parameter name The text name identifying the label.
        Attribute: Returns The label object that was added to the control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        
        class Main
            action Main
                // create the app
                Form form
                Page homePage = form:GetMainPage() 
        
                homePage:AddLabel("my label")
                
                form:Display()
            end
        end
    */
    action AddLabel(text name) returns Label
        return AddLabel(name, name)
    end

    /*
        This action adds a label to the control.

        Attribute: Parameter name The text name identifying the label.
        Attribute: Parameter value The text displayed in the label.
        Attribute: Returns The label object that was added to the control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        
        class Main
            action Main
                // create the app
                Form form
                Page homePage = form:GetMainPage() 
        
                homePage:AddLabel("my label", "Name: ")
                
                form:Display()
            end
        end
    */
    action AddLabel(text name, text value) returns Label
        FormLabel label
        label:SetName(name)
        label:SetText(value)

        Item2D value1 = GetParent()
        if not skipLabelsInFocus
            label:SetFocusable(true)
        end
        label:SetDescription("")
        label:SetDescendingLines(false)
        label:SetToDefaultFontSize()

        Add(label)
        return label
    end
    /*
        This action removes a specified label from the control.

        Attribute: Parameter name The text name identifying the label.
        Attribute: Returns The label object that was removed from the control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Game.Graphics.Label
            
        class Main
            action Main
                // create the app
                Form form
                Page homePage = form:GetMainPage() 
        
                homePage:AddLabel("my label", "Phone Number")
                Label label = homePage:RemoveLabel("my label")
                
                form:Display()
            end
        end
    */
    action RemoveLabel(text name) returns Label
        Label item = GetLabel(name)
        if item not= undefined
            Remove(item)
            return item
        end
        alert("I couldn't find a Label named " + name + ". Are you looking for the right item?")
    end

    /*
        This action gets a specified label from the control.

        Attribute: Parameter name The text name identifying the label.
        Attribute: Returns The label object found in the control with the same name.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Game.Graphics.Label
        
        class Main
            action Main
                // create the app
                Form form
        
                Page homePage = form:GetMainPage() 

                homePage:AddLabel("my label", "Phone Number")
                Label label = homePage:GetLabel("my label")
                
                form:Display()
            end
        end
    */
    action GetLabel(text name) returns Label
        Array<Item2D> children = GetFormChildren()
        i = 0
        repeat while i < children:GetSize()
            Item2D control = children:Get(i)
            if control not= undefined and control:GetName() = name and control is Label
                return cast(Label, control)
            elseif control is FormContainerControl
                FormContainerControl interface = cast(FormContainerControl, cast(Object, control))
                Label candidate = interface:GetLabel(name)
                if candidate not= undefined
                    return candidate
                end
            end
            i = i + 1
        end

        return undefined
    end
    /*
        This action adds an icon(image) to the control.

        Attribute: Parameter name The text name identifying the icon.
        Attribute: Parameter fileName The text path to the image.
        Attribute: Returns The icon object that was added to the control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        
        class Main
            action Main
                // create the app
                Form form
                Page homePage = form:GetMainPage() 
        
                homePage:AddIcon("my icon", "Images/Blue Jay.png")
                
                form:Display()
            end
        end
    */
    action AddIcon(text name, text fileName) returns Icon
        Icon icon
        icon:SetName(name)
        icon:SetFocusable(true)
        icon:SetAccessibilityCode(icon:parent:Item:CUSTOM)

        File file = undefined
        if form not= undefined and form:GetMediaLocation() not= undefined
            File file2
            file = file2
            file:SetWorkingDirectory(form:GetMediaLocation())
            file:SetPath(fileName)
        end

        if delayedLoader:IsGameAvailable()
            if file not= undefined
                icon:Load(file)
            else
                icon:Load(fileName)
            end
            icon:SetPercentageWidth(icon:GetWidth() / icon:GetHeight())
        else
            delayedLoader:AddRequest(icon, fileName, file)
        end

        icon:SetHorizontalLayoutMode(icon:parent:Control:MAINTAIN_ASPECT_RATIO)
        icon:SetToHugeFont()

        Add(icon)
        return icon
    end
    /*
        This action removed an icon(image) from the control.

        Attribute: Parameter name The text name identifying the icon.
        Attribute: Returns The icon object that was removed from the control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Controls.Icon
            
        class Main
            action Main
                // create the app
                Form form
                Page homePage = form:GetMainPage() 
        
                homePage:AddIcon("my icon", "Images/Blue Jay.png")
                Icon icon = homePage:RemoveIcon("my icon")
                
                form:Display()
            end
        end
    */
    action RemoveIcon(text name) returns Icon
        Icon item = GetIcon(name)
        if item not= undefined
            Remove(item)
            return item
        end
        alert("I couldn't find an Icon named " + name + ". Are you looking for the right item?")
    end
    /*
        This action changes a specified icon(image) in the control. This action 
        should only be used when the icon is created and displayed on the form (after form:Display() 
        is called). 

        Attribute: Parameter name The text name identifying the icon.
        Attribute: Parameter fileName The path of the image to use as the icon.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Item
        use Libraries.Interface.Forms.FormBehavior
        use Libraries.Interface.Events.BehaviorEvent
        use Libraries.Interface.Controls.Button
        
        class Main is FormBehavior
            action Main
                // create the app
                Form form
                
                Page homePage = form:GetMainPage() 
                homePage:AddIcon("my icon", "Images/Blue Jay.png")
                Button button = homePage:AddButton("Change Icon")
                
                button:SetBehavior(me)
                
                form:Display()
            end
        
            action Run(BehaviorEvent event)
                Form form = GetForm()
                Page page = GetPage()
                
                page:ChangeIcon("my icon", "Images/adoptUs.png")
            end
        end
    */
    action ChangeIcon(text name, text fileName)
        Icon icon = GetIcon(name)
        File file = undefined
        if form not= undefined and form:GetMediaLocation()not= undefined
            File file2
            file = file2
            file:SetWorkingDirectory(form:GetMediaLocation())
            file:SetPath(fileName)
        end

        if icon = undefined
            alert("I couldn't find an Icon named " + name + ". Are you looking for the right item?")
        else
            if file not= undefined
                icon:Load(file)
            else
                icon:Load(fileName)
            end
        end
    end
    /*
        This action gets an icon(image) from the control.

        Attribute: Parameter name The text name identifying the icon.
        Attribute: Returns The icon object found in the control with the same name.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        
        class Main
            action Main
                // create the app
                Form form
        
                Page homePage = form:GetMainPage() 

                homePage:AddIcon("my icon", "Images/Blue Jay.png")
                Icon icon = homePage:GetIcon("my icon")
                
                form:Display()
            end
        end
    */
    action GetIcon(text name) returns Icon
        Array<Item2D> children = GetFormChildren()
        i = 0
        repeat while i < children:GetSize()
            Item2D control = children:Get(i)
            if control not= undefined and control:GetName() = name and control is Icon
                return cast(Icon, control)
            elseif control is FormContainerControl
                FormContainerControl interface = cast(FormContainerControl, cast(Object, control))
                Icon candidate = interface:GetIcon(name)
                if candidate not= undefined
                    return candidate
                end
            end
            i = i + 1
        end

        return undefined
    end
    /*
        This action adds a text field to the control.

        Attribute: Parameter name The text name identifying the text field.
        Attribute: Returns The text field object that was added to the control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Controls.TextField
        
        class Main
            action Main
                // create the app
                Form form
                Page homePage = form:GetMainPage() 
        
                TextField field = homePage:AddTextField("my field")
                
                form:Display()
            end
        end
    */
    action AddTextField(text name) returns TextField
        TextField field
        field:SetName(name)
        field:SetToDefaultFontSize()
        field:SetTopPadding(3)
        field:SetBottomPadding(3)
        Add(field)
        return field
    end
    /*
        This action removes a specified text field from the control.

        Attribute: Parameter name The text name identifying the text field.
        Attribute: Returns The text field object that was removed from the control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Controls.TextField
        
        class Main
            action Main
                // create the app
                Form form
                Page homePage = form:GetMainPage() 
        
                homePage:AddTextField("my field")
                TextField removedField = homePage:RemoveTextField("my field")
                
                form:Display()
            end
        end
    */
    action RemoveTextField(text name) returns TextField
        TextField item = GetTextField(name)
        if item not= undefined
            Remove(item)
            return item
        end
        alert("I couldn't find a TextField named " + name + ". Are you looking for the right item?")
    end
    /*
        This action gets a specified text field from the control.

        Attribute: Parameter name The text name identifying the text field.
        Attribute: Returns The text field object that was found in the control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Controls.TextField
        
        class Main
            action Main
                // create the app
                Form form
                Page homePage = form:GetMainPage() 
        
                homePage:AddTextField("my field")
                TextField removedField = homePage:GetTextField("my field")
                
                form:Display()
            end
        end
    */
    action GetTextField(text name) returns TextField
        Array<Item2D> children = GetFormChildren()
        i = 0
        repeat while i < children:GetSize()
            Item2D control = children:Get(i)
            if control not= undefined and control:GetName() = name and control is TextField
                return cast(TextField, control)
            elseif control is FormContainerControl
                FormContainerControl interface = cast(FormContainerControl, cast(Object, control))
                TextField candidate = interface:GetTextField(name)
                if candidate not= undefined
                    return candidate
                end
            end
            i = i + 1
        end

        return undefined
    end
    /*
        This action adds a text box to the control.

        Attribute: Parameter name The text name identifying the text box.
        Attribute: Returns The text box object that was added to the control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Controls.TextBox
        
        class Main
            action Main
                // create the app
                Form form
                Page homePage = form:GetMainPage() 
        
                TextBox field = homePage:AddTextBox("my textbox")
                
                form:Display()
            end
        end
    */
    action AddTextBox(text name) returns TextBox
        TextBox item
        item:SetName(name)
        item:SetToDefaultFontSize()
        Add(item)
        return item
    end
    /*
        This action removes a specified text box from the control.

        Attribute: Parameter name The text name identifying the text box.
        Attribute: Returns The text box object that was removed from the control.
        
        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Controls.TextBox
        
        class Main
            action Main
                // create the app
                Form form
                Page homePage = form:GetMainPage() 
        
                homePage:AddTextBox("a")
                TextBox txtBox = homePage:RemoveTextBox("a")
                
                form:Display()
            end
        end
    */
    action RemoveTextBox(text name) returns TextBox
        TextBox item = GetTextBox(name)
        if item not= undefined
            Remove(item)
            return item
        end
        alert("I couldn't find a TextBox named " + name + ". Are you looking for the right item?")
    end
    /*
        This action gets a specified text box from the control.

        Attribute: Parameter name The text name identifying the text box.
        Attribute: Returns The text box object that was found in the control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Controls.TextBox
        
        class Main
            action Main
                // create the app
                Form form
                Page homePage = form:GetMainPage() 
        
                homePage:AddTextBox("a")
                TextBox txtBox = homePage:GetTextBox("a")
                
                form:Display()
            end
        end
    */
    action GetTextBox(text name) returns TextBox
        Array<Item2D> children = GetFormChildren()
        i = 0
        repeat while i < children:GetSize()
            Item2D control = children:Get(i)
            if control not= undefined and control:GetName() = name and control is TextBox
                return cast(TextBox, control)
            elseif control is FormContainerControl
                FormContainerControl interface = cast(FormContainerControl, cast(Object, control))
                TextBox candidate = interface:GetTextBox(name)
                if candidate not= undefined
                    return candidate
                end
            end
            i = i + 1
        end

        return undefined
    end
    /*
        This action gets a specified toggle button from the control. The toggle button
        can be found in a Grouping, on a page.

        Attribute: Parameter name The text name identifying the toggle button.
        Attribute: Returns The toggle button object that was found in the control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Controls.Checkbox
        use Libraries.Interface.Forms.Grouping
        use Libraries.Interface.Controls.ToggleButton
        use Libraries.Game.Graphics.Color
        
        class Main
            action Main
                // create the app
                Form form
                Page homePage = form:GetMainPage() 

                Grouping toggleGroup = homePage:AddGrouping("switch")
                toggleGroup:AddToggleButton("On")
                toggleGroup:AddToggleButton("Off")

                ToggleButton togButton = homePage:GetToggleButton("Off")

                Color color
                togButton:SetBackgroundColor(color:Green())
                
                form:Display()
            end
        end
    */
    action GetToggleButton(text name) returns ToggleButton
        Array<Item2D> children = GetFormChildren()
        i = 0
        repeat while i < children:GetSize()
            Item2D control = children:Get(i)
            if control not= undefined and control:GetName() = name and control is ToggleButton
                return cast(ToggleButton, control)
            elseif control is FormContainerControl
                FormContainerControl interface = cast(FormContainerControl, cast(Object, control))
                ToggleButton candidate = interface:GetToggleButton(name)
                if candidate not= undefined
                    return candidate
                end
            end
            i = i + 1
        end

        return undefined
    end
    /*
        This action gets a specified radio button from the control. The radio button
        can be found in a Grouping, on a page.

        Attribute: Parameter name The text name identifying the radio button.
        Attribute: Returns The radio button object that was found in the control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Controls.Checkbox
        use Libraries.Interface.Forms.Grouping
        use Libraries.Interface.Controls.RadioButton
        
        class Main
            action Main

                Form form
                Page homePage = form:GetMainPage() 

                Grouping radioGroup = homePage:AddGrouping("switch")
                radioGroup:AddRadioButton("On")
                radioGroup:AddRadioButton("Off")

                RadioButton radButton = radioGroup:GetRadioButton("Off")

                radButton:SetToHugeFont()
                
                form:Display()
            end
        end
    */
    action GetRadioButton(text name) returns RadioButton
        Array<Item2D> children = GetFormChildren()
        i = 0
        repeat while i < children:GetSize()
            Item2D control = children:Get(i)
            if control not= undefined and control:GetName() = name and control is RadioButton
                return cast(RadioButton, control)
            elseif control is FormContainerControl
                FormContainerControl interface = cast(FormContainerControl, cast(Object, control))
                RadioButton candidate = interface:GetRadioButton(name)
                if candidate not= undefined
                    return candidate
                end
            end
            i = i + 1
        end

        return undefined
    end
    /*
        This action adds a checkbox to the control.

        Attribute: Parameter name The text name identifying the checkbox.
        Attribute: Returns The checkbox object that was added to the control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Controls.Checkbox
        
        class Main
            action Main
                // create the app
                Form form
                Page homePage = form:GetMainPage() 
        
                Checkbox field = homePage:AddCheckbox("my checkbox")
                
                form:Display()
            end
        end
    */
    action AddCheckbox(text name) returns Checkbox
        Checkbox button
        button:SetName(name)
        button:SetHorizontalLayoutMode(button:parent:Control:STANDARD)
        button:SetVerticalLayoutMode(button:parent:Control:STANDARD)
        button:SetToDefaultFontSize()

        Add(button)
        return button
    end
    /*
        This action removes a checkbox from the control.

        Attribute: Parameter name The text name identifying the checkbox.
        Attribute: Returns The checkbox object that was removed from the control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Controls.Checkbox
        
        class Main
            action Main
                // create the app
                Form form
                Page homePage = form:GetMainPage() 
        
                homePage:AddCheckbox("my checkbox")
                Checkbox field = homePage:RemoveCheckbox("my checkbox")
                
                form:Display()
            end
        end
    */
    action RemoveCheckbox(text name) returns Checkbox
        Checkbox item = GetCheckbox(name)
        if item not= undefined
            Remove(item)
            return item
        end
        alert("I couldn't find a Checkbox named " + name + ". Are you looking for the right item?")
    end
    /*
        This action gets a specified checkbox from the control.

        Attribute: Parameter name The text name identifying the checkbox.
        Attribute: Returns The checkbox object that was found in the control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Controls.Checkbox
        
        class Main
            action Main
                // create the app
                Form form
                Page homePage = form:GetMainPage() 
        
                homePage:AddCheckbox("my checkbox")
                Checkbox field = homePage:GetCheckbox("my checkbox")
                
                form:Display()
            end
        end
    */
    action GetCheckbox(text name) returns Checkbox
        Array<Item2D> children = GetFormChildren()
        i = 0
        repeat while i < children:GetSize()
            Item2D control = children:Get(i)
            if control not= undefined and control:GetName() = name and control is Checkbox
                return cast(Checkbox, control)
            elseif control is FormContainerControl
                FormContainerControl interface = cast(FormContainerControl, cast(Object, control))
                Checkbox candidate = interface:GetCheckbox(name)
                if candidate not= undefined
                    return candidate
                end
            end
            i = i + 1
        end

        return undefined
    end
    /*
        This action adds a list to the control.

        Attribute: Parameter name The text name identifying the list.
        Attribute: Returns The list object that was added to the control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        
        class Main
            action Main

                Form form
                Page homePage = form:GetMainPage() 

                homePage:AddList("list")
                
                form:Display()
            end
        end
    */
    action AddList(text name) returns List
        List list
        list:SetName(name)
        list:SetToDefaultFontSize()

        Add(list)

        return list
    end
    /*
        This action removes a list from the control.

        Attribute: Parameter name The text name identifying the list.
        Attribute: Returns The list object that was removed from the control.

        Attribute: Example
        use Libraries.Interface.Events.BehaviorEvent
        use Libraries.Interface.Forms.FormBehavior
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Controls.Button
        use Libraries.Interface.Controls.List
        
        class Main is FormBehavior
            action Main
                Form form
                
                Page homePage = form:GetMainPage() 
               
                List myList = homePage:AddList("list")
                myList:Add("value 1")
                myList:Add("value 2")

                Button button = homePage:AddButton("Remove")
                button:SetBehavior(me)
                
                form:Display()
            end
        
            action Run(BehaviorEvent event)
                Form form = GetForm()
                Page page = GetPage()
                
                page:RemoveList("list")
            end
        end
    */
    action RemoveList(text name) returns List
        List item = GetList(name)
        if item not= undefined
            Remove(item)
            return item
        end
        alert("I couldn't find a List named " + name + ". Are you looking for the right item?")
    end
    /*
        This action gets a list from the control.

        Attribute: Parameter name The text name identifying the list.
        Attribute: Returns The list object that was found in the control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Controls.List
        
        class Main
            action Main

                Form form
                Page homePage = form:GetMainPage() 

                homePage:AddList("list")
                List myList = homePage:GetList("list")
                myList:Add("value 1")
                myList:Add("value 2")

                form:Display()
            end
        end
    */
    action GetList(text name) returns List
        Array<Item2D> children = GetFormChildren()
        i = 0
        repeat while i < children:GetSize()
            Item2D control = children:Get(i)
            if control not= undefined and control:GetName() = name and control is List
                return cast(List, control)
            elseif control is FormContainerControl
                FormContainerControl interface = cast(FormContainerControl, cast(Object, control))
                List candidate = interface:GetList(name)
                if candidate not= undefined
                    return candidate
                end
            end
            i = i + 1
        end

        return undefined
    end
    /*
        This action gets any item from the form container control.

        Attribute: Parameter name The text name identifying the item.
        Attribute: Returns The Item2D object that was found in the control.

        Attribute: Example
        use Libraries.Interface.Events.BehaviorEvent
        use Libraries.Interface.Forms.FormBehavior
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Interface.Controls.Button
        use Libraries.Interface.Controls.List
        use Libraries.Interface.Item2D
        
        class Main is FormBehavior
            action Main
                Form form
                
                Page homePage = form:GetMainPage() 
               
                List myList = homePage:AddList("list")
                myList:Add("value 1")
                myList:Add("value 2")

                Button button = homePage:AddButton("Remove")
                button:SetBehavior(me)
                
                form:Display()
            end
        
            action Run(BehaviorEvent event)
                Form form = GetForm()
                Page page = GetPage()
                
                Item2D result = page:FindControl("Remove")
                result:Hide()
            end
        end
    */
    action FindControl(text name) returns Item2D
        Array<Item2D> children = GetFormChildren()
        i = 0
        repeat while i < children:GetSize()
            Item2D control = children:Get(i)
            if control not= undefined and control:GetName() = name
                return control
            elseif control is FormContainerControl
                FormContainerControl interface = cast(FormContainerControl, cast(Object, control))
                Item2D candidate = interface:FindControl(name)
                if candidate not= undefined
                    return candidate
                end
            end
            i = i + 1
        end

        return undefined
    end
    /*
        This action returns the title alignment of the form container control.

        Attribute: Returns The integer alignment compared to FormConstants.
    */
    action GetTitleAlignment returns integer
        return titleAlignment
    end
    /*
        This action returns the content alignment of the form container control.

        Attribute: Returns The integer alignment, compared to FormConstants.
    */
    action GetContentAlignment returns integer
        return contentAlignment
    end
    /*
        This action returns true when the default focus order is set.

        Attribute: Returns true if a default focus order is set.
    */
    action HasDefaultFocusOrdering returns boolean
        return hasDefaultFocusOrdering
    end
    /*
        This action sets the default focus order flag.

        Attribute: Parameter hasDefaultFocusOrdering true if a default focus order is set.
    */
    action SetHasDefaultFocusOrdering(boolean hasDefaultFocusOrdering)
        me:hasDefaultFocusOrdering = hasDefaultFocusOrdering
    end
    /*
        This action returns the title label of the form control.

        Attribute: Returns The Label of the title in the form control.

        Attribute: Example
        use Libraries.Interface.Forms.Form
        use Libraries.Interface.Forms.Page
        use Libraries.Game.Graphics.Label

        class Main
            action Main
                Form form
                Page page = form:GetMainPage()

                page:SetTitle("The Title")
                Label title = page:GetTitleLabel()
                output title:GetText()

                form:Display()
            end
        end
    */
    action GetTitleLabel returns Label
        return titleLabel
    end
    /*
        This action returns an array of the items on the form.

        Attribute: Returns Array<Item2D> of child elements on the form container control.
    */
    blueprint action GetFormChildren returns Array<Item2D>
    /*
        This action gets the default skip label in focus flag.

        Attribute: Returns true if skip label in focus flag was set.
    */
    action GetSkipLabelsInFocus returns boolean
        return skipLabelsInFocus
    end
    /*
        This action sets the default skip label in focus flag.

        Attribute: Parameter skipLabelsInFocus true if the skip labels in focus.
    */
    action SetSkipLabelsInFocus(boolean skipLabelsInFocus)
        me:skipLabelsInFocus = skipLabelsInFocus
    end
    /*
        This action gets the form associated with the container.

        Attribute: Returns the form object.
    */    
    action GetForm returns Form
        return form
    end
    /*
        This action sets the controls associated form.

        Attribute: Parameter form the form associated with this control.
    */    
    action SetForm(Form form)
        me:form = form
    end
end