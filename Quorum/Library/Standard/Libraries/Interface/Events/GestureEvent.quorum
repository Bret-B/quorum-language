package Libraries.Interface.Events

use Libraries.Interface.Item

class GestureEvent

    // An event code indicating that this gesture is a (confirmed) single tap.
    public constant integer SINGLE_TAP = 1

    // An event code indicating that this gesture is a double tap.
    public constant integer DOUBLE_TAP = 2

    // An event code indicating that this gesture is a swipe (a quick flick in a direction).
    public constant integer SWIPE = 3

    // An event code indicating that this gesture is a pan (a slow, continuous finger drag in a direction).
    public constant integer PAN = 4

    // An event code indicating that this gesture is a long press.
    public constant integer LONG_PRESS = 5

    /*
    An event code indicating that this gesture is a pinch (typically used for scaling up or down).
    This event uses the "timingCode" value to indicate when the gesture begins, continues, or finishes.
    */
    public constant integer PINCH = 6

    // What kind of gesture the event represents, such as DOUBLE_TAP or PAN.
    public integer eventType = 0



    // A code indicating that the event has just begun. Discrete gestures always use this timing code (i.e. gestures that trigger only once when they occur, such as SWIPE or LONG_PRESS).
    public constant integer BEGIN = 0

    // A code indicating that the event has just finished.
    public constant integer FINISH = 1

    // A code indicating that the event is on-going.
    public constant integer CONTINUE = 2

    /*
    This code indicates if an event has just begun, finished, or is continuing. Most gestures are considered
    "discrete", or in other words, a gesture will trigger only a single event. The events triggered by discrete
    gestures always use the BEGIN code.

    The PINCH gesture is continuous, and will trigger different events when it begins, continues, and finishes.
    This value can be used to determine what stage of a PINCH gesture is occuring.
    */
    public integer timingCode = BEGIN


    // Indicates how many times this gesture has occurred in rapid succession.
    public integer gestureCount = 0


    /*
    The Item which received, was the target of, or otherwise is relevant to the
    GestureEvent which has occurred. If an Item is tapped directly, it will be 
    stored here. If a GestureEvent is triggered with no such Item available, this 
    will be undefined.
    */
    Item source = undefined

    /* 
    A flag used by the Game engine to determine if an event has already been
    sent to a listener. This is set to true just before sending the event to a
    listener. If the value is reset to false inside the listener, the engine
    will continue to send the event to other event listeners.
    */
    boolean eventHandled = false

    /* The x-coordinate of the mouse event on the screen. */
    integer x = 0
    /* The y-coordinate of the mouse event on the screen. */
    integer y = 0


    /*
    This action sets the source item for this event, which is the the target of
    gesture event which has occurred (or is otherwise relevant to it). In the Game
    engine, if a gesture occurs directly on top of an Item, it will be stored here. If a 
    gesture is triggered with no such Item available, this will be undefined.

    This action is automatically used by the engine when processing input. Most users will
    never need to call this action directly.

    Attribute: Parameter item The source Item to be stored for this GestureEvent.
    */
    action SetSource(Item item)
        source = item
    end

    /*
    This action returns the source item for this event, which is the the target of
    gesture event which has occurred (or is otherwise relevant to it). In the Game
    engine, if a gesture occurs directly on top of an Item, it will be stored here. 
    If a gesture is triggered with no such Item available, this will be undefined.

    Attribute: Returns The source Item for this GestureEvent.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.GestureEvent
    use Libraries.Interface.Events.GestureListener
    use Libraries.Interface.Item
    use Libraries.Game.Graphics.Drawable

    class Main is Game, GestureListener

        Drawable square

        action Main
            StartGame()
        end

        action CreateGame
            square:LoadFilledRectangle(200, 200)
            square:SetPosition(300, 200)
            Add(square)

            AddGestureListener(me)
        end

        action OnDoubleTap(GestureEvent event)
            Item source = event:GetSource()

            if source = undefined
                output "The background was tapped!"
            elseif source:Equals(square)
                output "The square was tapped!"
            end
        end
    end
    */
    action GetSource returns Item
        return source
    end

    /*
    This action returns the x coordinate of where the event was on the screen.

    Attribute: Returns The x coordinate of where the event was on the screen.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.GestureEvent
    use Libraries.Interface.Events.GestureListener

    class Main is Game, GestureListener

        action Main
            StartGame()
        end

        action CreateGame
            AddGestureListener(me)
        end

        action OnDoubleTap(GestureEvent event)
            integer x = event:GetX()
            integer y = event:GetY()
            output "The event was at " + x + ", " + y
        end
    end
    */
    action GetX returns integer
        return x
    end

    /*
    This action returns the y coordinate of where the event was on the screen.

    Attribute: Returns The y coordinate of where the event was on the screen.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.GestureEvent
    use Libraries.Interface.Events.GestureListener

    class Main is Game, GestureListener

        action Main
            StartGame()
        end

        action CreateGame
            AddGestureListener(me)
        end

        action OnDoubleTap(GestureEvent event)
            integer x = event:GetX()
            integer y = event:GetY()
            output "The event was at " + x + ", " + y
        end
    end
    */
    action GetY returns integer
        return y
    end

    /*
    This action sets whether this event should be considered handled by any 
    event listeners. In the Game engine, this is set to true just before sending
    the event to a listener. If the value is reset to false inside the listener,
    the engine will continue to send the event to other event listeners.

    Attribute: Parameter handled Whether or not this event should be considered handled.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.GestureEvent
    use Libraries.Interface.Events.GestureListener

    class Main is Game, GestureListener

        integer totalClicks = 0

        action Main
            StartGame()
        end

        action CreateGame
            AddGestureListener(me)
        end

        action OnDoubleTap(GestureEvent event)
            totalClicks = totalClicks + 1
            output "The game has been double tapped " + totalClicks + " times."

            // By setting the event handled flag to false, we tell the Game engine
            // to keep sending the GestureEvent to any other GestureListeners we have.
            // In this example, since it's our only GestureListener, it does nothing.
            event:SetEventHandled(false)
        end
    end
    */
    action SetEventHandled(boolean handled)
        eventHandled = handled
    end

    /*
    This action returns whether or not this event has already been handled.
    In the Game engine, this is set to true just before sending the event to a
    listener. If the value is reset to false inside the listener, the engine
    will continue to send the event to other event listeners.

    Attribute: Returns Whether or not this event has already been handled.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.GestureEvent
    use Libraries.Interface.Events.GestureListener

    class Main is Game, GestureListener

        action Main
            StartGame()
        end

        action CreateGame
            AddGestureListener(me)
        end

        action OnDoubleTap(GestureEvent event)
            // The event handled flag is set to true when the engine finds a gesture
            // listener to send the event to, so this should always return true.
            boolean handled = event:WasEventHandled()
            output "After clicking the mouse, handled = " + handled
        end
    end
    */
    action WasEventHandled returns boolean
        return eventHandled
    end

    /*
    The ToText action returns a textual representation of the provided gesture code.

    Attribute: Parameter gestureCode A gesture code, such as SINGLE_TAP or PAN.
    Attribute: Returns A text representation of the given gesture code, or "Unknown" if the code isn't recognized.
    */
    action ToText(integer gestureCode) returns text
        if gestureCode = SINGLE_TAP
            return "Single Tap"
        elseif gestureCode = DOUBLE_TAP
            return "Double Tap"
        elseif gestureCode = SWIPE
            return "Swipe"
        elseif gestureCode = PAN
            return "Pan"
        elseif gestureCode = LONG_PRESS
            return "Long Press"
        elseif gestureCode = PINCH
            if timingCode = BEGIN
                return "Pinch Begin"
            elseif timingCode = CONTINUE
                return "Pinch Continue"
            elseif timingCode = FINISH
                return "Pinch Finish"
            else
                return "Pinch (Invalid Timing!)"
            end
        else
            return "Unknown"
        end
    end
    
end