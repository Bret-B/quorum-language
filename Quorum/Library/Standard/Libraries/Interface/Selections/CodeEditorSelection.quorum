package Libraries.Interface.Selections

use Libraries.Interface.Selections.Selection
use Libraries.Interface.Controls.Blocks.CodeEditor
use Libraries.Interface.Controls.Blocks.BlockItem
use Libraries.Interface.Controls.Blocks.Block
use Libraries.Containers.Array

class CodeEditorSelection is Selection

    // Note that line -1 represents the top of the file above the first block. Values that are less than -1 are an empty selection.
    integer selectedLine = -2
    //The selectionEndLine represents the second index of a multiple selection.
    // If this value is the same as the selectedLine, this is a single selection, not a multiple selection.
    integer selectionEndLine = selectedLine
    
    Block selectedBlock = undefined
    BlockItem selectedItem = undefined

    // Old values are stored so previous selections can be restored if intermediate steps would overwrite info we need.
    integer previousSelectedLine = selectedLine
    integer previousSelectionEndLine = selectionEndLine
    Block previousSelectedBlock = selectedBlock
    BlockItem previousSelectedItem = selectedItem
    
    action Set(Block block, integer line, BlockItem item)
        Set(block, line, line, item)
    end
    
    action Set(Block block, integer line, integer secondLine, BlockItem item)
        Array<Block> oldBlocks = undefined
        if IsMultipleSelection()
            oldBlocks = GetSelectedBlocks()
        end
        
        previousSelectedBlock = selectedBlock
        previousSelectedItem = selectedItem
        previousSelectedLine = selectedLine
        previousSelectionEndLine = selectionEndLine
        
        Block oldBlock = previousSelectedBlock
        BlockItem oldItem = previousSelectedItem
        integer oldLine = previousSelectedLine
        integer oldSecondLine = previousSelectionEndLine
        
        selectedBlock = block
        selectedLine = line
        selectionEndLine = secondLine
        selectedItem = item
        if item not= undefined
            UpdateSelection(item:GetName(), oldBlock, oldItem, oldLine, oldSecondLine)
        elseif block not= undefined
            UpdateSelection(block:GetName(), oldBlock, oldItem, oldLine, oldSecondLine)
        elseif line >= 0
            UpdateSelection("Line " + line, oldBlock, oldItem, oldLine, oldSecondLine)
        else
            UpdateSelection("No selection",  oldBlock, oldItem, oldLine, oldSecondLine)
        end
        
        Array<Block> newBlocks = undefined
        if IsMultipleSelection()
            newBlocks = GetSelectedBlocks()
        end
        
        // Request vertices updates on blocks that have their multiple selection state change.
        // Needed to have proper selection colors for multiple selections.
        // TO-DO: Optimize this for cases where oldBlocks and newBlocks overlap, which is common.
        if oldBlocks not= undefined
            integer i = 0
            repeat while i < oldBlocks:GetSize()
            Block current = oldBlocks:Get(i)
                current:RequestVerticesUpdate()
                i = i + 1
            end
        end
        if newBlocks not= undefined
            integer i = 0
            repeat while i < newBlocks:GetSize()
            Block current = newBlocks:Get(i)
                current:RequestVerticesUpdate()
                i = i + 1
            end
        end
    end

    action SetToTopOfFile
        Set(undefined, -1, undefined)
    end

    private action UpdateSelection(text name, Block oldBlock, BlockItem oldItem, integer oldLine, integer oldSecondLine)
        CodeEditor editor = GetEditor()
        if editor not= undefined
            editor:OnSelectionChange(oldBlock, oldItem, oldLine)
        end

        SetDisplayName(name)
    end

    action GetLine returns integer
        return selectedLine
    end

    action GetRangeEndLine returns integer
        return selectionEndLine
    end
    
    action GetBlock returns Block
        return selectedBlock
    end

    action GetBlockItem returns BlockItem
        return selectedItem
    end

    // Returns the selection line of the previous selection, before the most recent selection update.
    action GetPreviousLine returns integer
        return previousSelectedLine
    end

    // Returns the end line of the multiple selection range of the previous selection, before the most recent selection update.
    action GetPreviousRangeEndLine returns integer
        return previousSelectionEndLine
    end

    // Returns the Block of the previous selection, before the most recent selection update.
    action GetPreviousBlock returns Block
        return previousSelectedBlock
    end

    // Returns the BlockItem of the previous selection, before the most recent selection update.
    action GetPreviousItem returns BlockItem
        return previousSelectedItem
    end

    action IsEmpty returns boolean
        return selectedLine < -1
    end

    action Empty
        Set(undefined, -2, undefined)
    end

    action IsMultipleSelection returns boolean
        return selectionEndLine not= selectedLine
    end
    
    action IsCursorAtEndOfSelection returns boolean
        return selectedLine > selectionEndLine
    end
    
    action GetEditor returns CodeEditor
        return cast(CodeEditor, GetItem())
    end
    
    action GetSelectedBlocks returns Array<Block>
        return GetEditor():GetSelectedBlocks()
    end
end