package Libraries.Interface.Selections

use Libraries.Interface.Selections.Selection
use Libraries.Interface.Item
use Libraries.Interface.Controls.Scenes.Layers.EditorLayer
use Libraries.Interface.Controls.Scenes.Items.EditorItem
use Libraries.Interface.Controls.Scenes.SceneEditor

/*
A selection represents what would be interacted with if the parent is used. The 
general idea of selection is common across user interface elements. For example, 
trees have a selection,  which represents the item in the tree that the user is 
interacting with if the tree itself has a focus. 

The SceneEditorSelection represents the EditorItem in an EditorLayer that the user
is currently interacting with. Through events and listeners the selection gives information
to the user on what they are interacting with and tells the SceneEditor class to update itself
to properly show the user what is being focused.
*/
class SceneEditorSelection is Selection
    
    EditorItem selectedItem = undefined
    EditorLayer selectedLayer = undefined

    boolean itemChanged = false
    boolean layerChanged = false

    /*
        This action sets up the component with default attributes.
        Attribute: Parameter item The parent item in the selection.
        Attribute: Parameter displayName The name of the selected item.
    */
    action Initialize(SceneEditor controller)
        Initialize(controller, controller:GetName())
    end

    /*
        This action sets the selection to a specific editor item. The display name
        will be updated and the editor will update the cursor and camera to show the 
        item if possible. 

        Attribute: Parameter item The EditorItem that is now being selected
    */
    action SetSelection(EditorItem item)
        if selectedItem not= undefined
            selectedItem:LostSelection()
        end

        selectedItem = item
        itemChanged = true
        UpdateDisplayName()

        if selectedItem not= undefined
            selectedItem:GainedSelection()
        end
    end

    /*
        This action sets the selection to a specific EditorLayer. EditorItems are
        shown to the user through the layer so selecting both an item and a layer
        allows for telling the user what layer they are on and what specific item
        they are selecting.

        Attribute: Parameter layer The EditorLayer that is now being selected
    */
    action SetSelection(EditorLayer layer)
        if selectedLayer not= undefined
            selectedLayer:LostSelection()
        end

        selectedLayer = layer
        layerChanged = true
        UpdateDisplayName()

        if selectedLayer not= undefined
            selectedLayer:GainedSelection()
        end
    end

    /*
        This action sets the selection for both the layer and item.

        Attribute: Parameter layer The EditorLayer that is now being selected
        Attribute: Parameter item The EditorItem that is now being selected
    */
    action SetSelection(EditorLayer layer, EditorItem item)
        if layer = selectedLayer
            if item not= selectedItem
                SetSelection(item)
            end
            return now
        elseif item = selectedItem
            SetSelection(layer)
        end

        if selectedItem not= undefined
            selectedItem:LostSelection()
        end

        if selectedLayer not= undefined
            selectedLayer:LostSelection()
        end

        selectedLayer = layer
        selectedItem = item
        layerChanged = true
        itemChanged = true
        UpdateDisplayName()

        if selectedLayer not= undefined
            selectedLayer:GainedSelection()
        end

        if selectedItem not= undefined
            selectedItem:GainedSelection()
        end
    end

    /*
        UpdateDisplayName updates the name shown to the user to either the name of the scene if
        no item or layer is selected, or the name of the item plus the scene. If the item changes
        than this action also tells the SceneEditor to update the cursor and camera. 
    */
    private action UpdateDisplayName
        if selectedLayer = undefined or selectedItem = undefined
            SceneEditor scene = GetSceneEditor()
            if scene not= undefined
                SetDisplayName(scene:GetName())
            else
                SetDisplayName("")
            end
        else
            SetDisplayName(selectedItem:GetName() + " - " + selectedLayer:GetName())
        end

        if itemChanged
            SceneEditor scene = GetSceneEditor()
            scene:SetCursorToItem(selectedItem)
            scene:UpdateEditorCameraTarget()
        end

        itemChanged = false
        layerChanged = false

        GetSceneEditor():UpdateCursorVisibility()
    end

    /*
        Returns the currently selected layer. If no layer is selected this will return undefined.

        Attribute: Returns The selected item
    */
    action GetSelectedItem returns EditorItem
        return selectedItem
    end

    /*
        Returns the currently selected layer. If no layer is selected this will return undefined.

        Attribute: Returns The selected layer
    */
    action GetSelectedLayer returns EditorLayer
        return selectedLayer
    end

    /*
    Returns true only when a SelectionEvent is being processed where
    the item changed. After the event has been processed, this returns
    false.
    */
    action ItemChanged returns boolean
        return itemChanged
    end

    /*
    Returns true only when a SelectionEvent is being processed where
    the layer changed. After the event has been processed, this returns
    false.
    */
    action LayerChanged returns boolean
        return layerChanged
    end

    /*
        Returns true if there is an item currently being selected false otherwise.

        Attribute: Returns True if an item is being selected, false otherwise
    */
    action IsItemSelected returns boolean
        return selectedItem not= undefined
    end

    /*
        Returns true if there is a layer currently being selected, false otherwise.

        Attribute: Returns True if a layer is being selected, false otherwise
    */
    action IsLayerSelected returns boolean
        return selectedLayer not= undefined
    end

    /*
        If no layer is currently selected than the selection is empty. Therefore, this action
        returns true if the selected layer is undefined.

        Attribute: Returns True if no layer is selected, false otherwise
    */
    action IsEmpty returns boolean
        return selectedLayer = undefined
    end

    /*
        Clears the selection so no layer and item is currently being selected.
    */
    action Empty
        SetSelection(undefined, undefined)
    end

    /*
        This action returns the Scene Editor object the selection is a part of
    */
    action GetSceneEditor returns SceneEditor
        Item item = GetItem()
        if item is SceneEditor
            return cast(SceneEditor, item)
        else
            return undefined
        end
    end

end