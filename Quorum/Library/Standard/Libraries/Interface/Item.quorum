package Libraries.Interface

use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Interface.Accessibility
use Libraries.Interface.Events.MouseListener
use Libraries.Interface.Events.MouseMovementListener
use Libraries.Interface.Events.MouseWheelListener
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.TouchListener
use Libraries.Interface.Events.TouchEvent
use Libraries.Interface.Events.FocusListener
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Shapes.Rectangle
use Libraries.Game.GameStateManager
use Libraries.Game.InputTable
use Libraries.Interface.Behaviors.Behavior
use Libraries.Compute.Math
use Libraries.Containers.HashTable
use Libraries.Data.Formats.JavaScriptObjectNotation

/*
    The Item class represents any object that has a position (such as x and y
    coordinates) and dimensions (e.g. width and height). Note that because Item
    contains blueprint actions, it can't be used directly. Users should use
    classes that inherit from Item, such as Item2D, Item3D, Drawable, or Model.

    Attribute: Author William Allee
*/
class Item 
    /*  The not accessible flag indicates that the accessibility system should ignore this item.
        Any item can override it, but it is the default to prevent flooding the system
        with a great deal of UI helper classes.
    */
    public constant integer NOT_ACCESSIBLE = -1
    public constant integer ITEM = 0
    public constant integer CUSTOM = 1
    public constant integer CHECKBOX = 2
    public constant integer RADIO_BUTTON = 3
    public constant integer BUTTON = 4
    public constant integer TOGGLE_BUTTON = 5
    public constant integer TEXTBOX = 6
    public constant integer MENU_BAR = 7
    public constant integer MENU_ITEM = 8
    public constant integer PANE = 9
    public constant integer TREE = 10
    public constant integer TREE_ITEM = 11
    public constant integer TOOLBAR = 12
    public constant integer TAB = 13
    public constant integer TAB_PANE = 14
    public constant integer TABLE = 15
    public constant integer CELL = 16
    public constant integer TEXT_FIELD = 17
    public constant integer LIST = 18
    public constant integer LIST_ITEM = 19
    public constant integer TREE_TABLE = 20
    public constant integer DIALOG = 21
    public constant integer POPUP_MENU = 22
    public constant integer PROGRESS_BAR = 23
    public constant integer TREE_TABLE_CELL = 24
    public constant integer GROUP = 25

    private integer accessibilityCode = NOT_ACCESSIBLE
    private text accessibilityRoleDescription = undefined

    text name = "Unnamed"
    text description = ""
    text inputGroup = ""
    boolean visible = true
    boolean focusable = false

    Array<MouseListener> mouseListeners
    Array<MouseMovementListener> mouseMoveListeners
    Array<MouseWheelListener> mouseWheelListeners
    Array<TouchListener> touchListeners
    Array<FocusListener> focusListeners
    Array<Behavior> behaviors

    Item nextFocus = undefined
    Item previousFocus = undefined

    GameStateManager manager

    HashTable<text, JavaScriptObjectNotation> properties = undefined

    boolean acceptsMouseInput = true

    action GetProperty(text key) returns JavaScriptObjectNotation
        if properties = undefined
            return undefined
        end

        JavaScriptObjectNotation value = properties:GetValue(key)
        return value
    end

    action SetProperty(text key, JavaScriptObjectNotation value)
        if properties = undefined
            HashTable<text, JavaScriptObjectNotation> properties
            me:properties = properties
        end

        properties:Add(key, value)
    end

    action GetPropertyKeyIterator returns Iterator<text>
        if properties = undefined
            return undefined
        end
        return properties:GetKeyIterator()
    end

    action GetPropertiesSize returns integer
        if properties = undefined
            return 0
        end

        return properties:GetSize()
    end

    action HasProperties returns boolean
        if properties = undefined
            return false
        end

        return true
    end

    action HasProperty(text key) returns boolean
        return HasProperties() and properties:HasKey(key)
    end

    /*
    This action is used to retrieve the children of this Item
    as Items. This makes it possible to retrieve or iterate
    over the children without having to perform casting.

    Attribute: Parameter index The index of the child to retrieve from the child array.
    Attribute: Returns The child item at the given index.
    Attribute: Example
    use Libraries.Interface.Item

    Item parentItem

    Item child1
    child1:SetName("First")
    parentItem:Add(child1)

    Item child2
    child2:SetName("Second")
    parentItem:Add(child2)

    Item child3
    child3:SetName("Third")
    parentItem:Add(child3)

    integer counter = 0
    repeat while counter < item:GetItemCount()
        Item child = parentItem:GetChildAsItem(counter)
        output child:GetName()
        counter = counter + 1
    end
    */
    blueprint action GetChildAsItem(integer index) returns Item

    /*
    This action will return the total number of children this Item has.

    Attribute: Returns The number of children items this Item has.
    Attribute: Example
    use Libraries.Interface.Item

    Item parentItem

    Item child1
    child1:SetName("First")
    parentItem:Add(child1)

    Item child2
    child2:SetName("Second")
    parentItem:Add(child2)

    Item child3
    child3:SetName("Third")
    parentItem:Add(child3)

    integer counter = 0
    repeat while counter < item:GetItemCount()
        Item child = parentItem:GetChildAsItem(counter)
        output child:GetName()
        counter = counter + 1
    end
    */
    blueprint action GetItemCount returns integer

    /*
    This action will remove all Items from this Item's children hierarchy. Note
    that this will not empty the hierarchies of the contained Items.

    Attribute: Example

        use Libraries.Interface.Item

        Item parentItem
        Item child1
        Item child2
        Item grandchild
        parentItem:Add(child1)
        parentItem:Add(child2)
        child1:Add(grandChild)
        parentItem:Empty()
    */
    blueprint action Empty

    /*
    This action returns true if the item has been added to a Layer, or
    false otherwise.

    Attribute: Returns True if the item is on a Layer, or false otherwise.
    */
    blueprint action IsOnLayer returns boolean

    /*
    This action sets whether or not this Item accepts mouse input.
    If set to true, this will intercept incoming mouse events, triggering any
    related MouseListeners and InputSets and preventing the mouse event from
    propagating to other Items on the Layer. The default value is true.

    Attribute: Parameter accepts True to set this Item to receive mouse events, or false to ignore them.
    */
    action SetAcceptsMouseInput(boolean accepts)
        acceptsMouseInput = accepts
    end

    /*
    This action returns whether or not this Item accepts mouse input.
    If the value is true, this will intercept incoming mouse events, triggering any
    related MouseListeners and InputSets and preventing the mouse event from
    propagating to other Items on the Layer. The default value is true.

    Attribute: Returns True if this Item can receive mouse events, or false otherwise.
    */
    action IsAcceptingMouseInput returns boolean
        return acceptsMouseInput
    end

    /*  
    This action takes a touch event and handles it. It will first test to 
    see if the touch event took place within the bounds of this Item. If so, it
    will notify any TouchListeners of the event. If the event was not contained
    within this Item, or if there are no TouchListeners on this Item, the Item
    will ask its parent Item to process the touch event, if there is a parent.

    Attribute: Example

        use Libraries.Interface.Item2D
        use Libraries.Interface.Events.TouchEvent
        use Libraries.Interface.Events.TouchListener
        Item2D myItem
        TouchListener listener
        myItem:AddTouchListener(listener)
        TouchEvent event
        event:eventType = event:BEGAN
        myItem:ProcessTouchEvent(event)
    
    */
    blueprint action ProcessTouchEvent(TouchEvent event)

    /*  
    This action takes a mouse event and handles it. It will first test to 
    see if the mouse event took place within the bounds of this Item. If so, it
    will notify any MouseListeners of the event. If the event was not contained
    within this Item, or if there are no MouseListeners on this Item, the Item
    will ask its parent Item to process the mouse event, if there is a parent.

    Attribute: Example

        use Libraries.Interface.Item2D
        use Libraries.Interface.Events.MouseEvent
        use Libraries.Interface.Events.MouseListener
        Item2D myItem
        MouseListener listener
        myItem:AddMouseListener(listener)
        MouseEvent event
        event:eventType = event:CLICKED_MOUSE
        myItem:ProcessMouseEvent(event)
    
    */
    blueprint action ProcessMouseEvent(MouseEvent event)
    
    /*
    This action sets the X coordinate of the Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetX(35.0)
    */
    blueprint action SetX(number setX)

    /*
    This action sets the Y coordinate of the Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetY(210.0)
    */
    blueprint action SetY(number setY)

    /*
    This action sets the Z coordinate of the Item.

    Attribute: Example

        use Libraries.Interface.Item3D
        Item3D myItem
        myItem:SetZ(180.0)
    */
    blueprint action SetZ(number setZ)

    /*
    This action returns the currently set X coordinate of the Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        number value = myItem:GetX()
    */
    blueprint action GetX returns number

    /*
    This action returns the currently set Y coordinate of the Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        number value = myItem:GetY()
    */
    blueprint action GetY returns number

    /*
    This action returns the currently set Z coordinate of the Item.

    Attribute: Example

        use Libraries.Interface.Item3D
        Item3D myItem
        number value = myItem:GetZ()
    */
    blueprint action GetZ returns number

    /*
    This action will set both the X, Y, and Z coordinates of the Item,
    in that order.

    Attribute: Example

        use Libraries.Interface.Item3D
        Item3D myItem
        myItem:SetPosition(30, 70, 45)
    */
    blueprint action SetPosition(number newX, number newY, number newZ)

    /* 
    This action returns the Item's global x coordinate. This is the actual world
    coordinate that the item exists at after it has been offset by its parent's
    position. If this Item doesn't have a parent, and the offset hasn't been set
    manually, this is the same as GetX().

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetOffsetX(100)
        myItem:SetX(30)
        number globalX = myItem:GetGlobalX()
    */
    blueprint action GetGlobalX returns number

    /*
    This action returns the Item's global y coordinate. This is the actual world
    coordinate that the item exists at after it has been offset by its parent's
    position. If this Item doesn't have a parent, and the offset hasn't been set
    manually, this is the same as GetY().

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetOffsetY(60)
        myItem:SetX(90)
        number globalY = myItem:GetGlobalY()
    */
    blueprint action GetGlobalY returns number

    /*
    This action returns the Item's global z coordinate. This is the actual world
    coordinate that the item exists at after it has been offset by its parent's
    position. If this Item doesn't have a parent, and the offset hasn't been set
    manually, this is the same as GetZ().

    Attribute: Example

        use Libraries.Interface.Item3D
        Item3D myItem
        myItem:SetOffsetZ(40)
        myItem:SetX(50)
        number globalZ = myItem:GetGlobalZ()
    */
    blueprint action GetGlobalZ returns number

    /* This action adds a MouseListener to the Item. If the Item ever receives
    a MouseEvent due to a mouse click, the mouse listener will be notified.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.Interface.Events.MouseListener
        Item myItem
        MouseListener listener
        myItem:AddMouseListener(listener)
    */
    action AddMouseListener(MouseListener listener)
        mouseListeners:Add(listener)
    end

    /* This action removes a MouseListener from the Item. The listener will no
    longer receive notification if the Item gets a mouse click event.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.Interface.Events.MouseListener
        Item myItem
        MouseListener listener
        myItem:AddMouseListener(listener)
        myItem:RemoveMouseListener(listener)
    */
    action RemoveMouseListener(MouseListener listener)
        mouseListeners:Remove(listener)
    end

    /*
    This action returns an Iterator containing all of the MouseListeners
    that have been added to this Item using the AddMouseListener action.

    Attribute: Returns An iterator containing all of the registered MouseListeners.
    */
    action GetMouseListeners returns Iterator<MouseListener>
        return mouseListeners:GetIterator()
    end

    /* This action adds a MouseMovementListener to the Item. If the Item ever 
    receives a MouseEvent due to mouse movement, the listener will be notified.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.Interface.Events.MouseMovementListener
        Item myItem
        MouseMovementListener listener
        myItem:AddMouseMovementListener(listener)
    */
    action AddMouseMovementListener(MouseMovementListener listener)
        mouseMoveListeners:Add(listener)
    end

    /* This action removes a MouseMovementListener from the Item. The listener 
    will no longer receive notification if the Item gets a mouse movement event.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.Interface.Events.MouseMovementListener
        Item myItem
        MouseMovementListener listener
        myItem:AddMouseMovementListener(listener)
        myItem:RemoveMouseMovementListener(listener)
    */
    action RemoveMouseMovementListener(MouseMovementListener listener)
        mouseMoveListeners:Remove(listener)
    end

    /*
    This action returns an Iterator containing all of the MouseMovementListeners
    that have been added to this Item using the AddMouseMovementListener action.

    Attribute: Returns An iterator containing all of the registered MouseMovementListeners.
    */
    action GetMouseMovementListeners returns Iterator<MouseMovementListener>
        return mouseMoveListeners:GetIterator()
    end

    /* This action adds a MouseWheelListener to the Item. If the Item ever 
    receives a MouseEvent due to the mouse wheel being scrolled, the listener
    will be notified.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.Interface.Events.MouseWheelListener
        Item myItem
        MouseWheelListener listener
        myItem:AddMouseWheelListener(listener)
    */
    action AddMouseWheelListener(MouseWheelListener listener)
        mouseWheelListeners:Add(listener)
    end

    /* This action removes a MouseWheelListener from the Item. The listener 
    will no longer receive notification if the Item gets a mouse wheel event.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.Interface.Events.MouseWheelListener
        Item myItem
        MouseWheelListener listener
        myItem:AddMouseWheelListener(listener)
        myItem:RemoveMouseWheelListener(listener)
    */
    action RemoveMouseWheelListener(MouseWheelListener listener)
        mouseWheelListeners:Remove(listener)
    end

    /*
    This action returns an Iterator containing all of the MouseWheelListeners
    that have been added to this Item using the AddMouseWheelListener action.

    Attribute: Returns An iterator containing all of the registered MouseWheelListeners.
    */
    action GetMouseWheelListeners returns Iterator<MouseWheelListener>
        return mouseWheelListeners:GetIterator()
    end

    /* 
    This action adds a TouchListener to the Item. If the Item ever receives a
    TouchEvent, the listener will be notified.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.Interface.Events.TouchListener
        Item myItem
        TouchListener listener
        myItem:AddTouchListener(listener)
    */
    action AddTouchListener(TouchListener listener)
        touchListeners:Add(listener)
    end

    /* 
    This action removes a TouchListener from the Item. The listener will no
    longer receive notification if the Item gets a TouchEvent.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.Interface.Events.TouchListener
        Item myItem
        TouchListener listener
        myItem:AddTouchListener(listener)
        myItem:RemoveTouchListener(listener)
    */
    action RemoveTouchListener(TouchListener listener)
        touchListeners:Remove(listener)
    end

    /*
    This action returns an Iterator containing all of the TouchListeners
    that have been added to this Item using the AddTouchListener action.

    Attribute: Returns An iterator containing all of the registered TouchListeners.
    */
    action GetTouchListeners returns Iterator<TouchListener>
        return touchListeners:GetIterator()
    end

    /* 
    This action adds a FocusListener to the Item. When the Item receives a
    FocusEvent due to either gaining or losing the focus, the listener will be
    notified.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.Interface.Events.FocusListener
        Item myItem
        FocusListener listener
        myItem:AddFocusListener(listener)
    */
    action AddFocusListener(FocusListener listener)
        focusListeners:Add(listener)
    end

    /* 
    This action removes a FocusListener from the Item. The listener will no
    longer receive notification if the Item gets a FocusEvent.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.Interface.Events.FocusListener
        Item myItem
        FocusListener listener
        myItem:AddFocusListener(listener)
        myItem:RemoveFocusListener(listener)
    */
    action RemoveFocusListener(FocusListener listener)
        focusListeners:Remove(listener)
    end

    /*
    This action returns an Iterator containing all of the FocusListeners
    that have been added to this Item using the AddFocusListener action.

    Attribute: Returns An iterator containing all of the registered FocusListeners.
    */
    action GetFocusListeners returns Iterator<FocusListener>
        return focusListeners:GetIterator()
    end

    /*  This action updates the item. It takes a number parameter that should
    indicate how many seconds have passed since the last time this action was
    called. This action does nothing in the Item class, but any class that
    inherits from Item may override it.

    Attribute: Parameter secondsSinceUpdate The number of seconds that have passed since the last time Update was called.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.System.DateTime
        
        class Main is Item

            action Main
                // We'll use a DateTime object to count seconds.
                DateTime time
                number currentTime = time:GetEpochTime()
                number newTime = 0

                repeat while GetX() < 300
                    // Check what the time is now.
                    newTime = time:GetEpochTime()

                    // Calculate how many seconds have passed, then call Update.
                    Update( (newTime - currentTime)/1000 )

                    // Store the old time.
                    currentTime = newTime
                end
            end

            // Our update action will move our Item to the right at 200 units a second.
            action Update(number secondsSinceUpdate)
                SetX(GetX() + 200 * secondsSinceUpdate)
            end
        end
    
    */
    action Update(number secondsSinceUpdate)

    end

    /*  This action calls the Update action on this Item and all Items that have
    been added to this item with the Add action.

    Attribute: Parameter secondsSinceUpdate The number of seconds that have passed since the last time Update was called.

    Attribute: Example

        use Libraries.Interface.Item
        
        Item parentItem
        Item child1
        Item child2
        parentItem:Add(child1)
        parentItem:Add(child2)
        parentItem:UpdateAll(0)
    */
    action UpdateAll(number secondsSinceUpdate)
        Update(secondsSinceUpdate)
        UpdateBehaviors(secondsSinceUpdate)

        integer counter = 0
        repeat while counter < GetItemCount()
            GetChildAsItem(counter):UpdateAll(secondsSinceUpdate)
            counter = counter + 1
        end
    end

    private action UpdateBehaviors(number seconds)
        integer counter = 0
        repeat while counter < behaviors:GetSize()
            Behavior behavior = behaviors:Get(counter)

            if behavior:IsRunningOnUpdate() and behavior:HasBeenRun() = false
                BehaviorEvent event
                event:SetItem(me)

                behavior:SetHasRunFlag(true)
                behavior:Run(event)
            end

            if behavior:IsFinished()
                behaviors:RemoveAt(counter)
                behavior:Dispose()
                behavior:SetHasRunFlag(false)
            else
                behavior:Update(seconds)
                counter = counter + 1
            end
        end
    end

    /*  This action is used to indicate that two items have just begun colliding.
    When two Items collide, the BeginCollision action should be called on both
    of them, with the other item passed as a parameter to the action. Note that 
    this action does nothing by default, but classes that inherit from Item may 
    override it.

    Attribute: Parameter item The other Item involved in the collision.

    Attribute: Example

        use Libraries.Interface.Item

        Item collider1
        Item collider2
        collider1:BeginCollision(collider2)
        collider2:BeginCollision(collider1)
    */
    action BeginCollision(Item item)
        
    end

    /*  This action is used to indicate that two items that were previously
    colliding no longer are. The FinishCollision action should be called on both
    Items involved, with the other item passed as a parameter to the action. 
    Note that this action does nothing by default, but classes that inherit from
    Item may override it.

    Attribute: Parameter item The other Item involved in the collision.

    Attribute: Example

        use Libraries.Interface.Item

        Item collider1
        Item collider2
        collider1:FinishCollision(collider2)
        collider2:FinishCollision(collider1)
    */
    action FinishCollision(Item item)

    end

    /*  This action is used to indicate that an Item and all Items that were
    added to it should be visible on the screen. Note that the Item class on its
    own cannot be drawn on the screen, but classes that inherit from it such as
    Libraries.Game.Graphics.Drawable can be. By default, Items are considered
    visible.

    Attribute: Example

        use Libraries.Interface.Item

        Item item
        item:Show()
    */
    action Show
        visible = true
    end

    /*  This action is used to indicate that an Item and all Items that were
    added to it should not be visible on the screen. Note that the Item class on
    its own cannot be drawn on the screen, but classes that inherit from it such
    as Libraries.Game.Graphics.Drawable can be. By default, Items are considered
    visible.

    Attribute: Example

        use Libraries.Interface.Item

        Item item
        item:Hide()
    */
    action Hide
        visible = false
    end

    /*  This action returns whether the Item is currently set to be visible on
    the screen.

    Attribute: Returns A boolean representing whether or not the Item is currently visible.

    Attribute: Example

        use Libraries.Interface.Item

        Item item
        item:Hide()
        boolean visible = item:IsShowing()
    */
    action IsShowing returns boolean
        return visible
    end

    /*  This action sets the internal name of the Item.

    Attribute: Example

        use Libraries.Interface.Item

        Item item
        item:SetName("My Item")
    */
    action SetName(text newName)
        name = newName

        Accessibility accessibility = manager:GetAccessibility()
        if accessibility not= undefined
            accessibility:NameChanged(me)
        end
    end

    /*  This action returns the current internal name of the Item.

    Attribute: Example

        use Libraries.Interface.Item

        Item item
        item:SetName("My Item")
        output "My item's name is " + item:GetName()
    */
    action GetName returns text
        return name
    end

    /*  This action sets the internal description of the Item.

    Attribute: Example

        use Libraries.Interface.Item

        Item item
        item:SetDescription("Used for demo purposes.")
    */
    action SetDescription(text newDescription)
        description = newDescription

        Accessibility accessibility = manager:GetAccessibility()
        if accessibility not= undefined
            accessibility:DescriptionChanged(me)
        end
    end

    /*  
    This action returns the current internal description of the Item.

    Attribute: Example

        use Libraries.Interface.Item

        Item item
        item:SetDescription("Used for demo purposes.")
        output "My item's description is : " + item:GetDescription()
    */
    action GetDescription returns text
        return description
    end

    /*
    This action sets the input group for this Item. When used with the Game
    libraries, this tag describes what InputTable (if any) can interact with
    this Item due to input.

    Attribute: Parameter group The new input group to use.

    Attribute: Example

        use Libraries.Interface.Item

        Item item
        item:SetInputGroup("arrowKeys")
        output "My item's input group is : " + item:GetInputGroup()
    */
    action SetInputGroup(text group)
        inputGroup = group
    end

    /*
    This action returns the input group for this Item. When used with the Game
    libraries, this tag describes what InputTable (if any) can interact with
    this Item due to input.

    Attribute: Returns The input group tag being used by this Item.

    Attribute: Example

        use Libraries.Interface.Item

        Item item
        item:SetInputGroup("arrowKeys")
        output "My item's input group is : " + item:GetInputGroup()
    */
    action GetInputGroup returns text
        return inputGroup
    end

    /*

    */
    action GetInputTable returns InputTable
        return manager:GetGame():GetInputTable(GetInputGroup())
    end

    /*
    This action is used to free up any additional memory that is being used by
    this Item for purposes such as graphics. Note that the Item class doesn't
    have any extra memory that needs to be released with this action, but some
    classes which inherit from Item, such as Libraries.Game.Graphics.Drawable,
    do.
    */
    action Dispose
        
    end

    /*
    This action is used to call Dispose on the entire children hierarchy of this
    Item. This will not call Dispose on this Item.
    */
    action DisposeChildren
        integer counter = 0
        repeat GetItemCount() times
            GetChildAsItem(counter):DisposeAll()
            counter = counter + 1
        end
    end

    /*
    This action is used to call Dispose on this Item and on the entire children
    hierarchy of this Item.
    */
    action DisposeAll
        DisposeChildren()
        Dispose()
    end

    /*
    This action is used to call Empty on all children contained in this item's
    children hierarchy. This will not empty the children of this item.
    */
    action EmptyChildren
        integer counter = 0
        repeat GetItemCount() times
            GetChildAsItem(counter):EmptyAll()
            counter = counter + 1
        end
    end

    /*
    This action will call Empty on the entire children hierarchy of this item,
    and then empty this item as well.
    */
    action EmptyAll
        EmptyChildren()
        Empty()
    end

    /*
    This action will increase the x-coordinate of this Item by the given amount.

    Attribute: Example

        use Libraries.Interface.Item

        Item myItem
        myItem:SetX(50)
        myItem:MoveX(25)
    */
    blueprint action MoveX(number xAmount)

    /*
    This action will increase the y-coordinate of this Item by the given amount.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D myItem
        myItem:SetY(50)
        myItem:MoveY(25)
    */
    blueprint action MoveY(number yAmount)

    /*
    This action will increase the z-coordinate of this Item by the given amount.

    Attribute: Example

        use Libraries.Interface.Item3D

        Item3D myItem
        myItem:SetZ(50)
        myItem:MoveZ(25)
    */
    blueprint action MoveZ(number zAmount)

    /*
    This action returns whether or not the Item can currently receive focus.
    This property can be set with SetFocusable().
    */
    action IsFocusable returns boolean
        return focusable
    end

    /*
    The SetFocusable action sets whether or not this Item should be focusable.
    If the Item is currently focused and made unfocusable, then it will lose
    focus, and there will be no focused element.
    */
    action SetFocusable(boolean focus)
        if not focus and IsFocused()
            manager:GetGame():SetFocus(undefined)
        end
        focusable = focus
    end

    /*
    The IsFocused action determines if this Item is currently focused, returning
    true if it is, or false if it is not.
    */
    action IsFocused returns boolean
        // Although we can get the focus directly from the manager, we request
        // it from the Game instead. This allows the Game to do any necessary
        // additional book-keeping.
        return manager:GetGame():GetFocus() = me
    end

    /*
    This action sets focus on this Item. If the Item is not focusable, it will
    instead look through the parent hierarchy and set focus on the first
    focusable ancestor. If no focusable Item can be found, this action will have
    no effect.
    */
    action Focus
        manager:GetGame():SetFocus(me)
    end

    /*
    This action adds a new Behavior to this Item.
    */
    action AddBehavior(Behavior behavior)
        behaviors:Add(behavior)

        if behavior:IsRunningOnUpdate() = false
            BehaviorEvent event
            event:SetItem(me)

            behavior:SetHasRunFlag(true)
            behavior:Run(event)
        end
    end

    /*
    This action stops all behaviors this Item is following without finishing 
    them.
    */
    action CancelBehaviors
        behaviors:Empty()
    end


    /*
        This action returns the current accessiblity code for this Item
    */
    action GetAccessibilityCode() returns integer
        return accessibilityCode
    end

    /*
        This action changes the accessibility code for this Item. This should be
        done with care because setting the accessiblity code to the incorrect 
        type can cause accessibility to stop functioning or, in some cases,
        cause the program to crash.
        
        Attribute: Parameter newAccessibilityCode the new accessibility code for this Item.
                                                  
    */
    action SetAccessibilityCode(integer newAccessibilityCode)
        accessibilityCode = newAccessibilityCode
    end

    /*
        This action returns the custom accessibility role description
        for this item, if any.
    */
    action GetAccessibilityRoleDescription() returns text
        return accessibilityRoleDescription
    end

    /*
        This action sets a custom accessibility role description for this item.
        This should only be done if there is not a standard accessibility code
        for the type of item being implemented. If the item behaves very
        similarly to a standard control type, then set the accessibility
        code to that standard type while also setting the role description.
        For example, if implementing an item that extends Control,
        is keyboard focusable, and responds to activation via both mouse
        clicks and the Space key, like a button, but it shouldn't be
        described as a button, then set the accessibility code to BUTTON
        and the custom role description to whatever is appropriate.
        If there isn't a suitable accessibility code, or if in doubt,
        set the accessibility code to CUSTOM.
        
        Attribute: Parameter newRoleDescription the new custom role description for this Item.
                                                  
    */
    action SetAccessibilityRoleDescription(text newRoleDescription)
        accessibilityRoleDescription = newRoleDescription
    end

    /*
        This action returns the nearest parent object that is accessible. This 
        can be anything that the programmer wants to be accessible, from user interface
        components in a 2D interface to 3D components relative in 3-space on screen. 
        By default, items have no accessible parent and are self-contained, but 
        user interface components normally override the behavior so that controls
        can be logically nested within each other.

        attribute: returns Item
    */
    action GetAccessibleParent returns Item
        return undefined
    end

    action IsAccessibleParent returns boolean
        return false
    end

    /*
        This action returns the name of the accessiblity code for this Item as Text
    */
    action GetAccessibilityType() returns text
        if (accessibilityCode = NOT_ACCESSIBLE)
            return "NOT_ACCESSIBLE"
        elseif (accessibilityCode = ITEM)
            return "ITEM"
        elseif (accessibilityCode = CUSTOM)
            return "CUSTOM"
        elseif (accessibilityCode = CHECKBOX)
            return "CHECKBOX"
        elseif (accessibilityCode = RADIO_BUTTON)
            return "RADIO_BUTTON"
        elseif (accessibilityCode = BUTTON)
            return "BUTTON"
        elseif (accessibilityCode = TOGGLE_BUTTON)
            return "TOGGLE_BUTTON"
        elseif (accessibilityCode = TEXTBOX)
            return "TEXTBOX"
        elseif (accessibilityCode = MENU_BAR)
            return "MENU_BAR"
        elseif (accessibilityCode = MENU_ITEM)
            return "MENU_ITEM"
        elseif (accessibilityCode = PANE)
            return "PANE"
        elseif (accessibilityCode = TREE)
            return "TREE"
        elseif (accessibilityCode = TREE_ITEM)
            return "TREE_ITEM"
        elseif (accessibilityCode = TOOLBAR)
            return "TOOLBAR"
        elseif (accessibilityCode = TAB)
            return "TAB"
        elseif (accessibilityCode = TAB_PANE)
            return "TAB_PANE"
        elseif (accessibilityCode = TREE_TABLE)
            return "TREE_TABLE"
        else
            return "ITEM"
        end
    end

    /*
    This action sets the next focus item. When this Item has the focus and the
    user requests the focus to advance (e.g. by pressing the tab key), the focus
    will move to the next focus item, if it is defined.

    Attribute: Parameter next The next Item to receive focus after this one.
    */
    action SetNextFocus(Item next)
        nextFocus = next
    end

    /*
    This action returns the next focus item. When this Item has the focus and 
    the user requests the focus to advance (e.g. by pressing the tab key), the
    returned value is the next item to receive that focus, if it is defined.
    If it isn't defined, the focus can not advance from this Item.

    Attribute: Returns The next Item to receive focus after this one.
    */
    action GetNextFocus returns Item
        return nextFocus
    end

    /*
    This action sets the previous focus item. When this Item has the focus and 
    the user requests the focus to move backwards (e.g. by pressing shift & 
    tab), the focus will move to the previous focus item, if it is defined.

    Attribute: Parameter previous The previous Item to receive focus before this one.
    */
    action SetPreviousFocus(Item previous)
        previousFocus = previous
    end

    /*
    This action returns the previous focus item. When this Item has the focus 
    and the user requests the focus to move backwards (e.g. by pressing shift & 
    tab), the returned value is the previous item to receive that focus, if it 
    is defined. If it isn't defined, the focus can not move backwards from this 
    Item.

    Attribute: Returns The previous Item to receive focus before this one.
    */
    action GetPreviousFocus returns Item
        return previousFocus
    end

    /*
        This action is fired if the item received the focus.
    */
    action GainedFocus(FocusEvent event)
    end

    /*
        This action is fired if the item lost the focus.
    */
    action LostFocus(FocusEvent event)
    end
end
