package Libraries.Interface.Controls

use Libraries.Containers.Array
use Libraries.Containers.Support.Pair
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Layouts.SpreadsheetLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Selections.SpreadsheetSelection
use Libraries.Interface.Behaviors.Behavior

class Spreadsheet is Control
    Array<Column> columns
    SpreadsheetSelection selection

    // The cellBehavior is called when a Cell would be activated if it doesn't
    // have an activation behavior of its own defined.
    Behavior cellBehavior = undefined
    
    on create
        SpreadsheetLayout layout
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:FIT_CONTENTS)
        properties:SetVerticalLayoutMode(properties:FIT_CONTENTS)

        SetInputGroup("Spreadsheet")

        SetFocusable(true)
        selection:Initialize(me)
        SetAccessibilityCode(parent:Item:TABLE)
        SetName("Table")
    end

    action IsAccessibleParent returns boolean
        return true
    end

    action Add(Column column)
        columns:Add(column)
        column:SetSpreadsheet(me)
        parent:Item2D:Add(column)
    end

    action Add(integer position, Column column)
        columns:Add(position, column)

        parent:Item2D:Add(column)
    end

    action GetColumn(integer i) returns Column
        return columns:Get(i)
    end

    action RemoveColumn(Column column)
        columns:Remove(column)
        column:SetSpreadsheet(undefined)
        parent:Item2D:Remove(column)
    end

    action RemoveColumnAt(integer column)
        Column c = columns:RemoveAt(column)
        parent:Item2D:Remove(c)
    end

    action GetColumnsSize returns integer
        return columns:GetSize()
    end

    action GetRowsSize returns integer
        integer max = 0
        integer counter = 0
        repeat while counter < GetColumnsSize()
            Column column = columns:Get(counter)
            if column:GetSize() > max
                max = column:GetSize()
            end
            counter = counter + 1
        end

        return max
    end

    action GetSelection returns SpreadsheetSelection
        return selection
    end

    action IsColumnsEmpty returns boolean
        return columns:IsEmpty()
    end

    action Empty
        selection:Empty()
        columns:Empty()
        parent:Item2D:Empty()
    end

    /*
    This action selects a single cell in the spreadsheet.
    */
    action Select(Cell cell)
        Cell oldSelection = selection:Get()
        if oldSelection not= undefined
            oldSelection:LostSelection()
        end

        if cell not= undefined
            cell:GainedSelection()
        end

        selection:Set(cell)
    end

    /*
    This action selects a single Cell at the provided x and y coordinates,
    where the x coordinate represents the column and the y coordinate represents
    the row.
    */
    action Select(integer row, integer column)
        Cell oldSelection = selection:Get()
        if oldSelection not= undefined
            oldSelection:LostSelection()
        end

        Cell cell = GetCell(row, column)
        if cell not= undefined
            cell:GainedSelection()
        end

        selection:Set(row, column)
    end

    action Deselect
        Cell oldSelection = selection:Get()
        if oldSelection not= undefined
            oldSelection:LostSelection()
        end

        selection:Empty()
    end

    action MoveSelectionUp
        integer row = selection:GetRow()
        integer column = selection:GetColumn()
        
        if row > 0
            Select(row - 1, column)
        end
    end

    action MoveSelectionDown
        integer row = selection:GetRow()
        integer col = selection:GetColumn()
        
        if col >= 0 and col < columns:GetSize()
            Column column = columns:Get(col)
            if row < column:GetSize() - 1
                Select(row + 1, col)
            end
        end
    end

    action MoveSelectionLeft
        integer row = selection:GetRow()
        integer column = selection:GetColumn()

        if selection:GetColumn() > 0
            Select(row, column - 1)
        end
    end

    action MoveSelectionRight
        integer row = selection:GetRow()
        integer column = selection:GetColumn()
        
        if selection:GetColumn() < columns:GetSize() - 1
            Select(row, column + 1)
        end
    end

    /*
    This action returns the coordinates of a cell within the Spreadsheet within
    a Pair object. The first value of the Pair is the x coordinate, representing
    which column contains the cell. The second value of the Pair is the y
    coordinate, representing which row contains the cell.

    This action can potentially iterate over every cell in the Spreadsheet, and
    should be used sparingly if working with lots of cells.
    */
    action GetCellCoordinates(Cell cell) returns Pair<integer>
        integer col = 0
        Pair<integer> pair

        repeat while col < columns:GetSize()
            Column column = columns:Get(col)
            integer row = column:GetCellIndex(cell)
            if row > -1
                pair:Set(row, col)
                return pair
            end
            col = col + 1
        end

        // If the cell couldn't be found, return -1 for each coordinate.
        pair:Set(-1, -1)
        return pair
    end

    /*
    This action returns the index of the column within the Spreadsheet, or
    returns -1 if the column is not a part of this Spreadsheet.
    */
    action GetColumnIndex(Column column) returns integer
        return columns:GetFirstLocation(column)
    end

    /*
    This action gets the cell located at the given coordinates, specified 
    as a row and then a column.
    */
    action GetCell(integer row, integer column) returns Cell
        return columns:Get(column):GetCell(row)
    end

    /*
    This action sets the cell activation Behavior for this Spreadsheet. If a
    cell would ever be activated (such as by a double-click), if it doesn't have
    its own activation Behavior, the Spreadsheet's cell activation Behavior will
    be used instead.
    */
    action SetCellActivationBehavior(Behavior behavior)
        cellBehavior = behavior
    end

    /*
    This action returns the cell activation Behavior for this Spreadsheet. If a
    cell would ever be activated (such as by a double-click), if it doesn't have
    its own activation Behavior, the Spreadsheet's cell activation Behavior will
    be used instead.
    */
    action GetCellActivationBehavior returns Behavior
        return cellBehavior
    end

    /*

    */
    action GainedFocus(FocusEvent event)
        if selection:IsEmpty()
            if columns:IsEmpty() = false and columns:Get(0):IsEmpty() = false
                Select(0, 0)
            end
        end
    end
end