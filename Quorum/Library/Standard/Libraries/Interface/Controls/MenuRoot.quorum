package Libraries.Interface.Controls

use Libraries.Containers.Array
use Libraries.Game.GameStateManager
use Libraries.Interface.Item
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Events.MenuChangeEvent
use Libraries.Interface.Events.MenuChangeListener
use Libraries.Interface.Selections.MenuSelection
use Libraries.Containers.Iterator

/*
The MenuRoot class is a blueprint that represents the top-most level of a menu.
It's used for classes like the MenuBar. Most users will never need to use this
class directly.
*/
class MenuRoot is Control

    boolean isSelecting = false
    MenuSelection selection
    Array<MenuChangeListener> listeners
    GameStateManager manager
    Item previousFocus = undefined

    on create
        selection:Initialize(me)

        // Necessary for keyboard input to work correctly.
        SetFocusable(true)

        SetInputGroup("MenuRoot")
    end

    blueprint action Add(Array<MenuItem> menuHeaders)

    blueprint action Add(MenuItem item)

    blueprint action Close

    blueprint action MoveSelectionLeft

    blueprint action MoveSelectionRight

    blueprint action MoveSelectionUp

    blueprint action MoveSelectionDown

    blueprint action GetSize returns integer

    blueprint action GetIterator returns Iterator<MenuItem>

    action IsEmpty returns boolean
        return GetSize() = 0
    end

    /*
    The HasBar action is used to specify if this MenuRoot uses a special layout
    for the first menu items (i.e., the first set of the menu items is placed in
    a menu bar, unlike submenus which use menu panels).
    */
    blueprint action HasBar returns boolean

    action GetSelection returns MenuSelection
        return selection
    end

    action GetMultipleSelection returns Array<MenuSelection>
        return undefined
    end

    action HasMultipleSelection returns boolean
        return false
    end

    action Select(Array<MenuItem> path)
        if path:IsEmpty()//if the user sent an empty path, deselect everything 
            Deselect()
            return now
        end
        Array<MenuItem> pathCopy = path:CopyToArray()
        MenuItem item = undefined

        if not pathCopy:IsEmpty()
            item = pathCopy:RemoveFromFront()
        end

        Array<MenuItem> selectionPath = selection:GetPath()
        MenuItem oldItem = undefined

        if not selectionPath:IsEmpty()
            oldItem = selectionPath:RemoveFromFront()
        end

        if item not= undefined
            if item = oldItem
                item:UpdateSelection(selectionPath, pathCopy)
            else
                if oldItem not= undefined
                    oldItem:RecursiveDeselect(selectionPath)
                end
                item:RecursiveSelect(pathCopy)
            end
        end

        // Set our selection object with the new path, triggering a selection
        // event.
        selection:Set(path)
    end

    action Deselect
        MenuSelection selection = GetSelection()
        Deselect(selection:GetPath())
    end

    private action Deselect(Array<MenuItem> path)
        MenuItem item = undefined
        if not path:IsEmpty()
            item = path:RemoveFromFront()
        end

        if item not= undefined
            item:RecursiveDeselect(path)
            
            // Add the removed portion back to the path to undo our side effects.
            path:AddToFront(item)
        end

        Array<MenuItem> newPath
        selection:Set(newPath)
    end

    private action GetMenuItem(Array<MenuItem> path) returns MenuItem
        if not path:IsEmpty()
            return path:GetFromEnd()
        end
        return undefined
    end

    action IsSelecting returns boolean
        return isSelecting
    end

    action SetSelectingState(boolean selecting)
        if selecting = false
            Deselect()
        end
        isSelecting = selecting
    end

    action ActivateSelection
        if IsSelecting()
            MenuItem item = GetMenuItem(selection:GetPath())
            if item = undefined
                return now
            end

            if item:IsMenu()
                item:Open()
            else
                item:Activate()
            end
        end
    end

    action AddMenuChangeListener(MenuChangeListener listener)
        listeners:Add(listener)
    end

    action RemoveMenuChangeListener(MenuChangeListener listener)
        listeners:Remove(listener)
    end

    action NotifyMenuChangeListeners(MenuChangeEvent event)
        integer counter = 0
        if event:GetEventType() = event:OPENED
            repeat while counter < listeners:GetSize()
                listeners:Get(counter):OpenedMenu(event)
                counter = counter + 1
            end
        elseif event:GetEventType() = event:CLOSED
            repeat while counter < listeners:GetSize()
                listeners:Get(counter):ClosedMenu(event)
                counter = counter + 1
            end
        end

        manager:GetInput():NotifyMenuChangeListeners(event)
    end

    action GainedFocus(FocusEvent event)
        previousFocus = event:GetLastFocus()
        parent:Control:GainedFocus(event)
    end

    action LostFocus(FocusEvent event)
        Deselect()
        Close()
        parent:Control:LostFocus(event)
    end

    /*
    The RestoreLastFocus action is used internally by the Menu system to restore
    focus to the last Item that had it before the Menu was focused. This
    action is called automatically as needed by the system, and users should not
    have to call it manually.
    */
    action RestoreLastFocus
        manager:SetFocus(previousFocus)
    end

    /*
    The GetLastFocus action returns the Item that had the focus before the Menu
    was focused, or undefined if no Item had focus before the Menu.
    */
    action GetLastFocus returns Item
        return previousFocus
    end
end