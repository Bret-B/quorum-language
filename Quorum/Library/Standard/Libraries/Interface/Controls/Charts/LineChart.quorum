package Libraries.Interface.Controls.Charts

use Libraries.Interface.Layouts.LineChartLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Color
use Libraries.System.File

/*
    The LineChart class is Chart object that inherits from TwoVariableChart and like other
    UI elements it is added to the Game class. 
    The Line Chart is used to track changes over short and long periods of time. 
    Line charts can also be used to compare changes over the same period of time for more than one group. 
    The title label, axis labels, and scales can be modified. Any number of lines can be added.

    Attribute: Author Cody Molisee, Hannah Williams

    Attriute: Example

    use Libraries.Interface.Controls.Charts.LineChart
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            LineChart chart
            Add(chart)
        end
    end
*/
class LineChart is TwoVariableChart 
    // Terminology for navigation instructions 
    private text groupText = "line"
    private text groupsText = "lines"
    private text chartItemText = "point"
    private text chartItemsText = "points"  
    on create
        LineChartLayout layout
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:MAINTAIN_ASPECT_RATIO)
        properties:SetVerticalLayoutMode(properties:STANDARD)
        Font font = GetDefaultFont()
        properties:SetFont(font)
        properties:SetFontSize(GetDefaultFontSize())

        properties:SetBorderThickness(2)
        SetName("Line Chart")

        SetInputGroup("Chart")
        SetFocusable(true)
        SetAccessibilityCode(parent:Item:ITEM)

        // Default settings specific to line chart
        RegressionCapable(true)
        ShowAllTicks()
        SeparateSeriesByDefault(true)
        SetDefaultOrientationToHorizontal()
    end

    /*
        This is called by GenerateInfoTree to generate the summary that is heard when
        you first focus on the chart. Also the highest level of the information tree
        of  the chart.
    */
    private action GenerateSummary returns text
        text lineText = "lines"
        integer lines = parent:TwoVariableChart:GetNumberOfLines()
        if lines = 1
            lineText = "line"
        end
        if GetName() = "Line Chart"
            SetDescription(" with " + lines + " " + lineText + ". Use the arrow keys to navigate chart information and Tab to access the chart content.")
        else
            SetDescription(", Line Chart with " + lines + " " + lineText + ". Use the arrow keys to navigate chart information and Tab to access the chart content.")
        end
        return GetDescription()
    end

    /* 
        This action converts this chart to a text value that contains information 
        for a scalable vector graphics file. This is useful for saving charts to disk.
        Each sub-class of chart must implement this action separately.

        Attribute: Returns the Scalable Vector Graphics (SVG) text.
    */
    action ConvertToScalableVectorGraphics returns text
        LineChartWriter writer
        return writer:WriteOutChart(me)
    end

    /*
        This action saves this chart to disk at the position of the current file. To conduct the 
        conversion, the file extension is used. Only Scalable Vector Graphics (SVG) is currently 
        supported.

        Attribute: Parameter file the location of where to save the file.
    */
    action Save(File file)
        if file:GetFileExtension() = "svg"
            LineChartWriter chartWriter
            chartWriter:WriteOutChart(me,file)
        end
    end

    /*
        This action saves this chart to disk at the position of the current file. To conduct the 
        conversion, the file extension is used. Only Hypertext Markup Language (HTML) is currently
        supported, and Scalable Vector Graphics (SVG) conversion is used. This makes a file that can
        be opened in the browser that imports the Javascript and Cascading Stylesheets necessary
        to navigate the charts accessibly on the web.

        Attribute: Parameter file the location of where to save the file.
    */
    action Share(File file)
        if file:GetFileExtension() = "html"
            HistogramWriter chartWriter
            chartWriter:WriteOutHTML(me,file)
        end
    end
    
    action GetGroupText returns text
        return groupText
    end

    action GetGroupsText returns text
        return groupsText
    end

    action GetChartItemText returns text
        return chartItemText
    end

    action GetChartItemsText returns text
        return chartItemsText
    end

end