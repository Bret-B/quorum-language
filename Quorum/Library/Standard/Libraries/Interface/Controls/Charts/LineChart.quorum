package Libraries.Interface.Controls.Charts

use Libraries.Interface.Controls.Control
use Libraries.Interface.Accessibility
use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Gradient
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.TextureRegion
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Label
use Libraries.Interface.Item
use Libraries.Interface.Views.View2D
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Controls.Icon
use Libraries.Containers.Array
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Controls.ControlLabel
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Interface.Selections.ChartSelection
use Libraries.Interface.Controls.Charts.ChartOptions
use Libraries.Compute.Math
use Libraries.Interface.Controls.Charts.ChartPoint
use Libraries.Interface.Layouts.LineChartLayout
use Libraries.Interface.Controls.Charts.TwoVariableChart
use Libraries.Interface.Controls.Charts.ChartPointComparison
use Libraries.Interface.Controls.Charts.ChartLine

/*
    The Line Chart Class

    Attribute: Author Cody Molisee

    Attribute: Example

    use Libraries.Interface.Controls.Charts.LineChart
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            LineChart chart
            Add(chart)
        end
    end
*/
class LineChart is TwoVariableChart
    LayoutProperties labelProperties
    Array<ChartLine> lines
    ChartOptions options
    Math math
    Color defaultColor

    private integer PointRadius = 2
    //Place holder for custom line width
    //private integer LineWidth = 2

    private integer pointThreshold = 21
    private integer maxChunks = 16
    
    on create
        LineChartLayout layout
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:MAINTAIN_ASPECT_RATIO)
        properties:SetVerticalLayoutMode(properties:STANDARD)
        Font font
        font:LoadFont("Arial")
        properties:SetFont(font)
        properties:SetFontSize(16)

        Color color
        Gradient gradient
        Color gray = color:LightGray()
        Color lightGray = color:CustomColor(0.9, 0.9, 0.9, 1)
        gradient:Set(gray, gray, lightGray, lightGray)

        properties:SetBackgroundColor(gradient)
        properties:SetBorderColor(color:Black())
        properties:SetBorderThickness(2)
        SetName("Line Chart")

        SetInputGroup("Chart")
        SetFocusable(true)
        SetAccessibilityCode(parent:Item:ITEM)

        defaultColor:SetColor(0, 0, 1, 1)
    end

    /*
    This is called by GenerateInfoTree to generate the summary that is heard when
    you first focus on the chart. Also the highest level of the information tree
    of  the chart.
    */
    private action GenerateSummary returns text
        text lineText = "lines"
        if lines:GetSize() = 1
            linetext = "line"
        end
        SetDescription("Line Chart with " + lines:GetSize() + " " + lineText 
            + ". " + "Use the arrow keys to navigate the chart.")
        return GetDescription()
    end

    /*
    Create a new region on the chart for accessbility.
    */
    private action NewRegionIcon (number percentX, number percentY, number percentWidth, number percentHeight) returns Icon
        Icon region
        Color color
        color:SetColor(0, 0, 1, 0.3)
        region:LoadFilledRectangle(1, 1, color)
        region:SetPercentageX(percentX)
        region:SetPercentageY(percentY)
        region:SetPercentageWidth(percentWidth)
        region:SetPercentageHeight(percentHeight)
        region:SetFocusable(true)
        region:SetAccessibilityCode(region:parent:Item:ITEM)
        region:Hide()
        return region
    end
    
    /*
    Creates the accessibility information for the chart area.
    */
    action GenerateChartAreaInfo returns ChartItem
        ChartItem chartArea
        Icon mainChartRegion = NewRegionIcon(0, 0, 1.0, 1.0)
        text lineText = "lines"
        if lines:GetSize() = 1
            linetext = "line"
        end
        mainChartRegion:SetName("This is the chart area with " + lines:GetSize() + " " + lineText + ".")
        
        GetChartArea():Add(mainChartRegion)
        chartArea:SetFocusTarget(mainChartRegion)
        
        Icon firstLineRegion = NewRegionIcon(0, 0, 1.0, 1.0)
        firstLineRegion:SetName("This is the region for " + lines:Get(0):GetName() + ".")
        GetChartArea():Add(firstLineRegion)

        ChartItem firstChartLine
        chartArea:SetChild(firstChartLine)
        firstChartLine:SetContainer(me)
        firstChartLine:SetParent(chartArea)
        firstChartLine:SetFocusTarget(firstLineRegion)

        CreateChunks(firstChartLine, lines:Get(0):GetPoints(), lines:Get(0):GetLines(), 0)

        integer i = 1
        ChartItem previousChartLine = firstChartLine
        repeat while i < lines:GetSize()
            Icon nextLineRegion = NewRegionIcon(0, 0, 1.0, 1.0)
            nextLineRegion:SetName("This is the region for " + lines:Get(i):GetName() + ".")
            GetChartArea():Add(nextLineRegion)
    
            ChartItem nextChartLine
            nextChartLine:SetContainer(me)
            nextChartLine:SetParent(chartArea)
            nextChartLine:SetFocusTarget(nextLineRegion)
    
            CreateChunks(nextChartLine, lines:Get(i):GetPoints(), lines:Get(i):GetLines(), 0)

            previousChartLine:SetNext(nextChartLine)
            previousChartLine = nextChartLine
            i = i + 1
        end
        previousChartLine:SetNext(firstChartLine)
        return chartArea
    end

    /*
    Split the chart area into regions until a minimum number of points is contained in a region or until a maximum number of division.
    */
    private action CreateChunks(ChartItem item, Array<ChartPoint> ps,Array<Drawable> ls, integer currentLevel)
        Icon region = cast(Icon, item:GetFocusTarget())

        number x1 = math:Round(region:GetPercentageX() * GetXAxisMinimum(), options:GetTickDigits())
        number x2 = math:Round((region:GetPercentageX() + region:GetPercentageWidth()) * GetXAxisMaximum(), options:GetTickDigits())

        text pointDescription = "No points"
        text lineDescription = "No lines"
        if ps:GetSize() = 1
            pointDescription = "1 point"
        else
            pointDescription = ps:GetSize() + " points"
        end
        if ls:GetSize() = 1
            lineDescription = "1 line"
        else
            lineDescription = ls:GetSize() + " lines"
        end
        text chunkDescription = pointDescription + " and " + lineDescription + "."

        if ps:GetSize() <= pointThreshold or currentLevel >= maxChunks
            if ps:IsEmpty() = false
                region:SetDescription(chunkDescription + " " + "Use the arrow keys to navigate lines, points, or chunks.")
                
                //First point
                ChartItem firstPointItem
                firstPointItem:SetContainer(me)
                firstPointItem:SetDisplayName("Point 1 of " + ps:GetSize() + " at " + math:Round(ps:Get(0):GetPercentX() * GetXAxisMaximum(), options:GetTickDigits()) 
                    + " and " + math:Round(ps:Get(0):GetPercentY() * GetYAxisMaximum(), options:GetTickDigits()))
                firstPointItem:SetParent(item)
                item:SetChild(firstPointItem)

                ChartPoint firstPoint = ps:Get(0)
                firstPoint:SetName(firstPointItem:GetDisplayName())
                firstPoint:SetParentRegion(region)
                firstPointItem:SetFocusTarget(firstPoint)

                //First Line
                if ls:IsEmpty() = false
                    ChartItem firstLineItem
                    firstLineItem:SetContainer(me)
                    firstLineItem:SetParent(item)
                    firstLineItem:SetDisplayName("Line from point 1.")
                    firstPointItem:SetChild(firstLineItem)

                    Drawable firstLine = ls:Get(0)
                    firstLine:SetFocusable(true)
                    firstLine:SetAccessibilityCode(parent:Item:CUSTOM)
                    firstLine:SetName("Line from point 1.")
                    firstLineItem:SetFocusTarget(firstLine)
                    GetChartArea():Add(firstLine)
                end

                integer i = 1
                ChartItem prevPoint = firstPointItem
                repeat while i < ps:GetSize()
                    //points
                    ChartItem pointItem
                    pointItem:SetContainer(me)
                    pointItem:SetDisplayName("Point " + (i + 1) + " of " + ps:GetSize() + " at " + math:Round(ps:Get(i):GetPercentX() * GetXAxisMaximum(), options:GetTickDigits()) 
                    + " and " + math:Round(ps:Get(i):GetPercentY() * GetYAxisMaximum(), options:GetTickDigits()))
                    pointItem:SetParent(item)
                    pointItem:SetPrevious(prevPoint)

                    ChartPoint point = ps:Get(i)
                    point:SetName(pointItem:GetDisplayName())
                    point:SetParentRegion(region)
                    pointItem:SetFocusTarget(point)

                    //lines
                    if i < ls:GetSize()
                        ChartItem lineItem
                        lineItem:SetContainer(me)
                        lineItem:SetParent(item)
                        lineItem:SetDisplayName("Line from point " + (i + 1) + ".")
                        pointItem:SetChild(lineItem)
    
                        Drawable line = ls:Get(0)
                        line:SetFocusable(true)
                        line:SetAccessibilityCode(parent:Item:CUSTOM)
                        line:SetName("Line from point " + (i + 1) + ".")
                        lineItem:SetFocusTarget(line)
                        GetChartArea():Add(line)
                    end

                    prevPoint:SetNext(pointItem)
                    prevPoint = pointItem
                    i = i + 1
                end
                prevPoint:SetNext(firstPointItem)              
            else
                region:SetDescription(chunkDescription)
            end
        else
            region:SetDescription(chunkDescription + " " + "Use the arrow keys to navigate points or chunks.")
            number xDivider = region:GetPercentageX() + (region:GetPercentageWidth() / 2.0)
            Array<ChartPoint> leftChunkPoints
            Array<Drawable> leftChunkLines
            Array<ChartPoint> rightChunkPoints
            Array<Drawable> rightChunkLines

            integer i = 0
            repeat while i < ps:GetSize()
                ChartPoint point = ps:Get(i)
                if point:GetPercentX() < xDivider
                    leftChunkPoints:Add(point)
                    if i < ls:GetSize()
                        leftChunkLines:Add(ls:Get(i))
                    end
                else
                    rightChunkPoints:Add(point)
                    if i < ls:GetSize()
                        rightChunkLines:Add(ls:Get(i))
                    end
                end
                i = i + 1
            end

            //left chunk
            Icon leftChunkRegion = NewRegionIcon(region:GetPercentageX(), 0, region:GetPercentageWidth() / 2.0, 1.0)
            leftChunkRegion:SetName("Left Chunk")
            GetChartArea():Add(leftChunkRegion)
            
            ChartItem leftChunkItem
            leftChunkItem:SetContainer(me)
            leftChunkItem:SetParent(item)
            leftChunkItem:SetFocusTarget(leftChunkRegion)

            //right chunk
            Icon rightChunkRegion = NewRegionIcon(region:GetPercentageX() + region:GetPercentageWidth() / 2.0, 0, region:GetPercentageWidth() / 2.0, 1.0)
            rightChunkRegion:SetName("Right Chunk")
            GetChartArea():Add(rightChunkRegion)
            
            ChartItem rightChunkItem
            rightChunkItem:SetContainer(me)
            rightChunkItem:SetParent(item)
            rightChunkItem:SetFocusTarget(rightChunkRegion)

            item:SetChild(leftChunkItem)
            leftChunkItem:SetNext(rightChunkItem)
            leftChunkItem:SetPrevious(rightChunkItem)
            rightChunkItem:SetNext(leftChunkItem)
            rightChunkItem:SetPrevious(leftChunkItem)
            
            CreateChunks(leftChunkItem, leftChunkPoints, leftChunkLines, currentLevel + 1)
            CreateChunks(rightChunkItem, rightChunkPoints, rightChunkLines, currentLevel + 1)
        end
    end

    /*
    Used to create a new ChartLine object for the chart and add it to the lines array.
    */
    action AddChartLine(ChartLine newLine)
        lines:Add(newLine)
    end

    /*
    Return a specific line from the chart.
    */
    action GetLine(integer i) returns ChartLine
        if lines:Get(i) = undefined
            alert("The specified line does not exist.")
        else
            return lines:Get(i)
        end
    end

    /*
    Returns the entire list of lines from the chart.
    */
    action GetAllLines() returns Array<ChartLine>
        return lines
    end

    /*
    Returns the default color for the chart.
    */
    action GetDefaultColor() returns Color
        return defaultColor
    end

    /*
    Helper used to add the points and lines of a ChartLine to the chart area.
    */
    action Populate()
        integer i = 0
        repeat while i < lines:GetSize()
            integer j = 0
            repeat while j < lines:Get(i):GetPoints():GetSize()
                GetChartArea():Add(lines:Get(i):GetPoints():Get(j))
                j = j + 1
            end
            j = 0
            repeat while j < lines:Get(i):GetLines():GetSize()
                GetChartArea():Add(lines:Get(i):GetLines():Get(j))
                j = j + 1
            end
            i = i + 1
        end
    end

    /* 
        This action converts this chart to a text value that contains information 
        for a scalable vector graphics file. This is useful for saving charts to disk.
        Each sub-class of chart must implement this action separately.

        Attribute: Returns the Scalable Vector Graphics (SVG) text.
    */
    action ConvertToScalableVectorGraphics returns text
        LineChartWriter writer
        return writer:WriteOutChart(me)
    end

    action LostSelection(ChartItem ci)
        if ci = undefined
            return now
        end
        Item target = ci:GetFocusTarget()

        if target is ChartPoint
            ChartPoint temp = cast(ChartPoint, target)
            temp:SetColor(defaultColor)
            temp:GetParentRegion():Hide()
        elseif target is Icon
            target:Hide()
        else
            parent:TwoVariableChart:LostSelection(ci)
        end
        if target is ChartLine
            ChartLine temp = cast(ChartLine, target)
            temp:SetColor(defaultColor)
        elseif target is Icon
            target:Hide()
        else
            parent:TwoVariableChart:LostSelection(ci)
        end
    end

    action GainedSelection(ChartItem ci)
        if ci = undefined
            return now
        end
        Item target = ci:GetFocusTarget()
        if target not= undefined
            if target is ChartPoint
                target:Focus()
                ChartPoint temp = cast(ChartPoint, target)
                temp:SetColor(defaultColor)
                temp:GetParentRegion():Show()
            elseif target is Icon
                target:Focus()
                target:Show()
            else
                parent:TwoVariableChart:GainedSelection(ci)
            end 
            if target is ChartLine
                target:Focus()
                ChartLine temp = cast(ChartLine, target)
                temp:SetColor(defaultColor)
            elseif target is Icon
                target:Focus()
                target:Show()
            else
                parent:TwoVariableChart:GainedSelection(ci)
            end         
        end
    end

    action DisposeDrawables()
        parent:TwoVariableChart:DisposeDrawables()
        integer i = 0
        repeat while i < lines:GetSize()
            integer j = 0
            repeat while j < lines:Get(i):GetPoints():GetSize()
                ChartPoint point = lines:Get(i):GetPoints():Get(j)
                if point:GetTexture() not= undefined
                    point:Dispose()
                end
                j = j + 1
            end
            j = 0
            repeat while j < lines:Get(i):GetLines():GetSize()
                Drawable line = lines:Get(i):GetLines():Get(j)
                if line:GetTexture() not= undefined
                    line:Dispose()
                end
                j = j + 1
            end
            i = i + 1
        end
    end

    action LoadGraphics(LayoutProperties properties)
        DisposeDrawables()
        parent:TwoVariableChart:LoadGraphics(properties)
        if properties = undefined
            return now
        end
        
        integer i = 0
        repeat while i < lines:GetSize()
            if lines:Get(i):GetPointsFlag()
                integer j = 0
                repeat while j < lines:Get(i):GetPoints():GetSize()
                    ChartPoint point = lines:Get(i):GetPoints():Get(j)
                    point:LoadFilledCircle(PointRadius, lines:Get(i):GetColor())
                    j = j + 1
                end
            end
            i = i + 1
        end
    end

    action Resize
        parent:Chart:Resize()
        integer i = 0
        repeat while i < lines:GetSize()
            integer j = 0
            repeat while j < lines:Get(i):GetLines():GetSize()
                Drawable line = lines:Get(i):GetLines():Get(j)
                ChartPoint a = lines:Get(i):GetPoints():Get(j)
                ChartPoint b = lines:Get(i):GetPoints():Get(j + 1)
                Math math

                integer x1 = cast(integer, a:GetX())
                integer y1 = cast(integer, a:GetY())
                integer x2 = cast(integer, b:GetX())
                integer y2 = cast(integer, b:GetY())
    
                if y1 < y2
                    line:SetPosition(x1 + 2, y1 + 2)
                    line:LoadLine(math:AbsoluteValue(x2 - x1), math:AbsoluteValue(y2 - y1), lines:Get(i):GetColor())
                    line:FlipY()
                else
                    line:SetPosition(x1 + 2, y2 + 2)
                    line:LoadLine(math:AbsoluteValue(x2 - x1), math:AbsoluteValue(y1 - y2), lines:Get(i):GetColor())
                end
                j = j + 1
            end
            i = i + 1
        end
    end      

    /*
    Flag used to display the points of all lines.
    */
    action ShowAllPoints()
        integer i = 0
        repeat while i < lines:GetSize()
            lines:Get(i):ShowPoints()
            i = i + 1
        end
    end

    /*
    Flag used to hide all the points of all lines.
    */
    action HideAllPoints()
        integer i = 0
        repeat while i < lines:GetSize()
            lines:Get(i):HidePoints()
            i = i + 1
        end
    end
end