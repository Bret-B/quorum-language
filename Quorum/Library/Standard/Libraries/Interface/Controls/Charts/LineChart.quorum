package Libraries.Interface.Controls.Charts

use Libraries.Interface.Layouts.LineChartLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Color
use Libraries.System.File
use Libraries.Interface.Controls.Charts.Graphics.ChartDrawable

/*
    The LineChart class is Chart object that inherits from TwoVariableChart and like other
    UI elements it is added to the Game class. 
    The Line Chart is used to track changes over short and long periods of time. 
    Line charts can also be used to compare changes over the same period of time for more than one group. 
    The title label, axis labels, and scales can be modified. Any number of lines can be added.

    Attribute: Author Cody Molisee, Hannah Williams

    Attriute: Example

    use Libraries.Interface.Controls.Charts.LineChart
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            LineChart chart
            Add(chart)
        end
    end
*/
class LineChart is TwoVariableChart 
    // Terminology for navigation instructions 
    private text groupText = "line"
    private text groupsText = "lines"
    private text chartItemText = "point"
    private text chartItemsText = "points"  
    on create
        LineChartLayout layout
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:MAINTAIN_ASPECT_RATIO)
        properties:SetVerticalLayoutMode(properties:STANDARD)
        Font font = GetDefaultFont()
        properties:SetFont(font)
        properties:SetFontSize(GetDefaultFontSize())

        properties:SetBorderThickness(2)
        SetName("Line Chart")

        SetInputGroup("Chart")
        SetFocusable(true)
        SetAccessibilityCode(parent:Item:ITEM)

        // Default settings specific to line chart
        RegressionCapable(true)
        ShowAllTicks()
        SeparateSeriesByDefault(true)
        SetDefaultOrientationToHorizontal()
    end

    /*
        This is called by GenerateInfoTree to generate the summary that is heard when
        you first focus on the chart. Also the highest level of the information tree
        of  the chart.
    */
    private action GenerateSummary returns text
        text lineText = "lines"
        integer lines = parent:TwoVariableChart:GetNumberOfLines()
        if lines = 1
            lineText = "line"
        end
        if GetName() = "Line Chart"
            SetDescription(" with " + lines + " " + lineText + ".")
        else
            SetDescription(", Line Chart with " + lines + " " + lineText + ".")
        end
        AddChartAreaInstructions(GetDescription())
        SetDescription(GetChartArea():GetDescription())
        return GetDescription()
    end

    /* 
        This action converts this chart to a text value that contains information 
        for a scalable vector graphics file. This is useful for saving charts to disk.
        Each sub-class of chart must implement this action separately.

        Attribute: Returns the Scalable Vector Graphics (SVG) text.
    */
    action ConvertToScalableVectorGraphics returns text
        LineChartWriter writer
        writer:SetAccessibilityFlag(HasAccessibility())
        return writer:WriteOutChart(me)
    end

    /*
        This action saves this chart to disk at the position of the current file. To conduct the 
        conversion, the file extension is used. Only Scalable Vector Graphics (SVG) is currently 
        supported.

        Attribute: Parameter file the location of where to save the file.
    */
    action Save(File file)
        if file:GetFileExtension() = "svg"
            LineChartWriter chartWriter
            chartWriter:SetAccessibilityFlag(HasAccessibility())
            chartWriter:WriteOutChart(me,file)
        else
           alert("Save currently only supports Scalable Vector Graphics (SVG), please use a .svg file extension.")
        end
    end

    /*
        This action saves this chart to disk at the position of the current file. To conduct the 
        conversion, the file extension is used. Only Hypertext Markup Language (HTML) is currently
        supported, and Scalable Vector Graphics (SVG) conversion is used. This makes a file that can
        be opened in the browser that imports the Javascript and Cascading Stylesheets necessary
        to navigate the charts accessibly on the web.

        Attribute: Parameter file the location of where to save the file.
    */
    action Share(File file)
        if file:GetFileExtension() = "html"
            LineChartWriter chartWriter
            chartWriter:SetAccessibilityFlag(HasAccessibility())
            chartWriter:SetScriptFilepath(GetScriptFilepath())
            chartWriter:SetStyleFilepath(GetStyleFilepath())
            chartWriter:WriteOutHTML(me,file)
        else
            alert("Share currently only supports Hypertext Markup Language (HTML), please use a .html file extension.")
        end
    end

    /*
    This action generates the instruction text for the Chart Area description.

    Attribute: Parameter description The base portion of the description that will appear before the instructions
    */
    action AddChartAreaInstructions(text description)
        
        if not IsSeparated()
            //Not Separated
                description = description + " To navigate the chart, press Enter to move into the list of " + GetGroupsText() + " or the arrow keys to navigate the chart information."
        else
            //Separated, each Series is also separated by the Factor levels
            if IsSeparatedBySeries() and IsSeparatedByFactor()  
                description = description + " To navigate the chart, press Enter to move into the list of " + GetChartItemsText() + " or the arrow keys to navigate the chart information."
            //Separated, by the Factor levels with multiple Series per subplot
            elseif not IsSeparatedBySeries() and IsSeparatedByFactor()
                description = description + " To navigate the chart, press Enter to move into the list of " + GetGroupsText() + " or the arrow keys to navigate the chart information."
            //Separated, one Series per subplot should go from Chart Area then group list info for sub chart areas
            else
                description = description + " To navigate the chart, press Enter to move into the list of " + GetSeriesText() + " or the arrow keys to navigate the chart information."
            end
        end
        me:GetChartArea():SetDescription(description)
    end

    /*
    This action generates the instruction text for a group panel description.

    Attribute: Parameter groupPanel The group panel that will have the instructions
    Attribute: Parameter description The base portion of the description that will appear before the instructions
    */
    action AddGroupPanelInstructions(ChartDrawable groupPanel, text description)
        if GetAllLines():GetSize() > 1
            description = description + " To navigate the list of " + GetGroupsText() + ", use the arrow keys to move between " + GetGroupsText() + " in list order," 
            description = description + " use Enter to move into the list of " + GetChartItemsText() + " for that " + GetGroupText() + ", use Shift + Enter to return to the chart information."
        else
            description = description + " To navigate the " + GetGroupText() + ","
            description = description + " use Enter to move into the list of " + GetChartItemsText() + " for the " + GetGroupText() + ", use Shift + Enter to return to the chart information."
        end
        
        groupPanel:SetDescription(description)
    end

    /*
    This action generates the instruction text for a chart item description.

    Attribute: Parameter chartItem The chart item that will have the instructions
    Attribute: Parameter description The base portion of the description that will appear before the instructions
    */
    action AddChartItemInstructions(Item chartItem, text description)

        description = description + " To navigate the list of " + GetChartItemsText() + ", use the arrow keys to move between " + GetChartItemsText() + " in value order on the X axis," 
        description = description + " use Page Up Down to move between " + GetChartItemsText() + " by value order on the Y axis,"
        if not IsSeparatedBySeries() and IsSeparatedByFactor()
            description = description + " use Shift + Enter to return to the " + GetGroupText() + " list."
        elseif IsSeparatedBySeries() and not IsSeparatedByFactor()
            description = description + " use Shift + Enter to return to the " + GetSeriesText() + " list."
        elseif not IsSeparated() and HasGroups()
            description = description + " use Shift + Enter to return to the chart information."
        else
            description = description + " use Shift + Enter to return to the " + GetGroupText() + " list."
        end
        chartItem:SetDescription(description)
    end
    
    action GetGroupText returns text
        return groupText
    end

    action GetGroupsText returns text
        return groupsText
    end

    action GetChartItemText returns text
        return chartItemText
    end

    action GetChartItemsText returns text
        return chartItemsText
    end

end