package Libraries.Interface.Controls.Charts

use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Data.Formats.ScalableVectorGraphics.ScalableVectorGraphics
use Libraries.Data.Formats.ScalableVectorGraphics.Line
use Libraries.Data.Formats.ScalableVectorGraphics.Rectangle
use Libraries.Data.Formats.ScalableVectorGraphics.Wedge
use Libraries.Data.Formats.ScalableVectorGraphics.Label
use Libraries.Game.Graphics.Color
use Libraries.Interface.Item
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Charts.PieChart
use Libraries.Interface.Controls.ControlLabel
use Libraries.System.File
use Libraries.System.FileWriter
use Libraries.Web.Page.Script
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.ListItem

/*
    The PieChartWriter class is part of the set of writers that allow for Charts
    to save their representation in the form ScalableVectorGraphics. This class will write out
    all of the necessary text needed to write out an SVG file that will contain the chart.

    Attribute: Author Hannah Williams

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.PieChart
    use Libraries.Interface.Controls.Charts.PieChartWriter
    
    DataFrame frame
    frame:Load("Data.csv")
    frame:SetSelectedColumnRange(0,1)
    PieChart chart = frame:PieChart()
    chart:SetTitle("My Awesome Title")
    chart:SetXAxisTitle("Time")
    chart:Display()

    PieChartWriter writer
    output writer:WriteOutChart(chart)
*/

class PieChartWriter is ChartWriter
    private number centerX = 0
    private number centerY = 0

    action WriteOutChart(PieChart chart, integer svgWidth, integer svgHeight) returns text
        return WriteOutChart(cast(Chart,chart), svgWidth, svgHeight)
    end

    action WriteOutChart(PieChart chart, File file, integer svgWidth, integer svgHeight)
        WriteOutChart(cast(Chart,chart), file, svgWidth, svgHeight)
    end

    action WriteOutChart(PieChart chart) returns text
        return WriteOutChart(cast(Chart,chart))
    end

    action WriteOutChart(PieChart chart, File file)
        WriteOutChart(cast(Chart,chart), file)
    end

    /*
        This action adds a white background to the canvas
    */
    action AddChartArea(ScalableVectorGraphics canvas, Chart chart)
        parent:ChartWriter:AddChartArea(canvas,chart)
        
        PieChart pieChart
        pieChart = cast(PieChart, chart)

        if HasAccessibility()
            GetChartArea():SetAriaLabel("Chart Area " + pieChart:GetSlices():GetSize() + " slices.")
        end
    end

    /*
        This action adds the content of the PieChart
    */
    private action AddChartContent(ScalableVectorGraphics canvas, Chart chart)
        PieChart pieChart
        pieChart = cast(PieChart, chart)
        AddSlices(canvas, pieChart)
    end

    /*
        This action adds the content of the PieChart to the SVG
    */

    private action AddSlices(ScalableVectorGraphics canvas, PieChart chart)
        Math math
        if chart:GetPieBox() not= undefined
            centerX = chart:GetPieBox():GetX() + chart:GetPieBox():GetWidth()/2 + cast(integer, chart:GetChartArea():GetGlobalX())
            centerY = chart:GetPieBox():GetY() + chart:GetPieBox():GetHeight()/2 + cast(integer, TranslatePositionY(chart:GetChartArea()) - chart:GetChartArea():GetHeight())
        end

        number prevX = 0 //Used on donut hole (inner radius)
        number prevY = 0 //Used on donut hole (inner radius)
        number newX = 0 //Used on donut hole (inner radius)
        number newY = 0 //Used on donut hole (inner radius)
        number currentTheta = -90 // This starts it at the top
        number x = 0
        number y = 0
        integer i = 0
        repeat while i < chart:GetSlices():GetSize()
            Wedge slice
            //Set outer radius
            number radius = chart:GetSlices():Get(i):GetOuterRadius()
            number innerRadius = chart:GetSlices():Get(i):GetInnerRadius()
            slice:SetOuterRadius(radius)

            //Start point of outer arc
            x = centerX + radius * math:Cosine(math:DegreesToRadians(currentTheta))
            y = centerY + radius * math:Sine(math:DegreesToRadians(currentTheta))
            slice:SetStart(x, y)

            //End point of outer arc
            number percent = chart:GetSlices():Get(i):GetEndPercentage() - chart:GetSlices():Get(i):GetStartPercentage()
            currentTheta = currentTheta + percent * 360
            x = centerX + radius * math:Cosine(math:DegreesToRadians(currentTheta))
            y = centerY + radius * math:Sine(math:DegreesToRadians(currentTheta))
            slice:SetEnd(x, y)

            // This will account for the offset if the pie chart has a donut hole.
            if innerRadius > 0
                slice:SetInnerRadius(innerRadius)  

                //End point of inner arc
                if i = 0
                    prevX = centerX
                    prevY = centerY - innerRadius
                end
                slice:SetInnerEnd(prevX, prevY)
                
                //Start point of inner arc
                newX = centerX + innerRadius * math:Cosine(math:DegreesToRadians(currentTheta))
                newY = centerY + innerRadius * math:Sine(math:DegreesToRadians(currentTheta))
                slice:SetCenter(newX, newY)

                prevX = newX
                prevY = newY
            else
                // Center point if inner radius is not used.
                slice:SetCenter(centerX, centerY)
            end
            slice:SetFill(chart:GetSlices():Get(i):GetColor())
            slice:SetID(canvas:GetID() + "-" + chart:GetSlices():Get(i):GetHashCode())
			slice:SetStyleClass("quorum-chart-wedge")
            slice:SetTabIndex(-1)
            if HasAccessibility()
                slice:SetAriaLabel(chart:GetSlices():Get(i):GetName() + chart:GetSlices():Get(i):GetDescription())
            end
            canvas:Add(slice)
            i = i + 1
        end
    end

    action AddChartContentAccessibility(ScalableVectorGraphics canvas, Chart chart, ChartAreaPanel chartArea, ListItem chartAreaItem)
        PieChart pieChart
        pieChart = cast(PieChart, chart)
        
        UnorderedList slicesUL
        slicesUL:AddAttribute("role","group")
        chartAreaItem:AddNestedTag(slicesUL)

        integer i = 0
        repeat while i < pieChart:GetSlices():GetSize()
            ListItem sliceNav 
            sliceNav:SetIdentifier(canvas:GetID() + "-" + pieChart:GetSlices():Get(i):GetHashCode() + "-nav")
            sliceNav:AddAttribute("role","treeitem")
            sliceNav:AddAttribute("aria-labelledby",canvas:GetID() + "-" + pieChart:GetSlices():Get(i):GetHashCode())
            sliceNav:SetTabIndex("-1")
            slicesUL:Add(sliceNav)
            i = i + 1
        end
    end
end