package Libraries.Interface.Controls.Charts

use Libraries.Interface.Layouts.ScatterPlotLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Color
use Libraries.System.File

/*
    The ScatterPlot class is Chart object that inherits from TwoVariableChart and like other
    UI elements it is added to the Game class. The Scatter Plot is used to represent a a relationship between
    pairs of numerical data, with one variable on each axis. The first two columns will determine the axes.
    Any additional column will be plotted against the first column.
    The title label, axis labels, and scales can be modified. Any number of points can be added.

    Attribute: Author Andreas Stefik, Hannah Williams

    Attribute: Example

    use Libraries.Interface.Controls.Charts.ScatterPlot
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            ScatterPlot chart
            Add(chart)
        end
    end
*/
class ScatterPlot is TwoVariableChart
    // Terminology for navigation instructions
    private text groupText = "series"
    private text groupsText = "series"
    private text chartItemText = "point"
    private text chartItemsText = "points"

    on create
        ScatterPlotLayout layout
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:MAINTAIN_ASPECT_RATIO)
        properties:SetVerticalLayoutMode(properties:STANDARD)
        Font font = GetDefaultFont()
        properties:SetFont(font)
        properties:SetFontSize(GetDefaultFontSize())

        properties:SetBorderThickness(2)
        SetName("Scatter Plot")

        SetInputGroup("Chart")
        SetFocusable(true)
        SetAccessibilityCode(parent:Item:ITEM)

        // Default settings specific to scatter plot
        RegressionCapable(true)
        ShowAllTicks()
        SetDefaultOrientationToHorizontal()
    end

    /*
        This is called by GenerateInfoTree to generate the summary that is heard when
        you first focus on the chart. Also the highest level of the information tree
        of  the chart.
    */
    private action GenerateSummary returns text
        integer points = parent:TwoVariableChart:GetNumberOfPoints()
        text pointText = "points"
        if points = 1
            pointText = "point"
        end
        if GetName() = "Scatter Plot"
            SetDescription(" with " + points + " " + pointText + ". Use the arrow keys to navigate chart information and Tab to access the chart content.")
        else
            SetDescription(", Scatter plot with " + points + " " + pointText + ". Use the arrow keys to navigate chart information and Tab to access the chart content.")
        end
        return GetDescription()
    end

    action Add(ChartPoint point)
        parent:TwoVariableChart:AddPoint(point)
    end

    /*
    Supplemental actions to Chart class's SeparateByFactor and SeparateBySeries.
    This ensures the separate pie charts are created and filled in properly.
    */
    action SeparateByFactor(integer requestColumns)
        if GetFactorList() not= undefined
            parent:Chart:SeparateBySeries(requestColumns)
        end
    end

    /* 
        This action converts this chart to a text value that contains information 
        for a scalable vector graphics file. This is useful for saving charts to disk.
        Each sub-class of chart must implement this action separately.

        Attribute: Returns the Scalable Vector Graphics (SVG) text.
    */
    action ConvertToScalableVectorGraphics returns text
        ScatterPlotWriter writer
        return writer:WriteOutChart(me)
    end

    /*
        This action saves this chart to disk at the position of the current file. To conduct the 
        conversion, the file extension is used. Only Scalable Vector Graphics (SVG) is currently 
        supported.

        Attribute: Parameter file the location of where to save the file.
    */
    action Save(File file)
        if file:GetFileExtension() = "svg"
            ScatterPlotWriter chartWriter
            chartWriter:WriteOutChart(me,file)
        end
    end

    
    /*
    This action generates the instruction text for a sub chart area description.

    Attribute: Parameter subChartArea The sub chart area that will have the instructions
    Attribute: Parameter description The base portion of the description that will appear before the instructions
    */
    action AddSubChartAreaInstructions(ChartAreaPanel subChartArea, text description)
        //Separated, by the Factor levels with multiple Series per subplot
        if not IsSeparatedBySeries() and IsSeparatedByFactor()
            description = description + " To navigate the list of " + GetGroupsText() + ", use Left Right to move between " + GetGroupsText() + " in list order," 
            description = description + " use Enter to move into the list of " + GetChartItemsText() + " for that " + GetGroupText() + ", use Escape to return to the chart area."
        //Separated, one Series per subplot should go from Chart Area then group list info for sub chart areas
        elseif IsSeparatedBySeries() and not IsSeparatedByFactor()
            description = description + " To navigate the list of " + GetSeriesText() + ", use Left Right to move between " + GetSeriesText() + " in list order,"
            description = description + " use Enter to move into the list of " + GetChartItemsText() + " for that " + GetSeriesText() + ", use Escape to return to the chart area."
        end
        subChartArea:SetDescription(description)
    end

    /*
    This action generates the instruction text for a chart item description.

    Attribute: Parameter chartItem The chart item that will have the instructions
    Attribute: Parameter description The base portion of the description that will appear before the instructions
    */
    action AddChartItemInstructions(Item chartItem, text description)

        description = description + " To navigate the list of " + GetChartItemsText() + ", use Left Right to move between " + GetChartItemsText() + " in value order on the X axis," 
        description = description + " use Up Down to move between " + GetChartItemsText() + " by value order on the Y axis,"
        if not IsSeparatedBySeries() and IsSeparatedByFactor()
            description = description + " use Escape to return to the " + GetGroupText() + " list."
        elseif IsSeparatedBySeries() and not IsSeparatedByFactor()
            description = description + " use Escape to return to the " + GetSeriesText() + " list."
        elseif not IsSeparated() and HasGroups()
            description = description + " use Escape to return to the chart area."
        else
            description = description + " use Escape to return to the " + GetGroupText() + " list."
        end
        chartItem:SetDescription(description)
    end

    action GetGroupText returns text
        return groupText
    end

    action GetGroupsText returns text
        return groupsText
    end

    action GetChartItemText returns text
        return chartItemText
    end

    action GetChartItemsText returns text
        return chartItemsText
    end
end

