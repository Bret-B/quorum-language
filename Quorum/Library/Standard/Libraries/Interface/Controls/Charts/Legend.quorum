package Libraries.Interface.Controls.Charts

use Libraries.Interface.Controls.Control

use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Gradient
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.TextureRegion
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Label
use Libraries.System.File
use Libraries.Interface.Views.ImageControlView
use Libraries.Interface.Views.LabelBoxView
use Libraries.Interface.Views.ControlView
use Libraries.Interface.Views.View2D
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Controls.Icon
use Libraries.Containers.Array
use Libraries.Interface.Controls.ControlLabel
use Libraries.Interface.Layouts.ManualLayout


class Legend is Control
    ChartOptions options
    ControlLabel title = undefined
    Array<Series> seriesList
    Array<text> itemNames
    boolean displayOnLeft = false
    boolean displayOnRight = true
    boolean displayOnTop = false
    boolean displayOnBottom = false

    text titleText = ""
    integer titleFontSize = 0
    integer labelFontSize = 0

    number sumOfLabelHeights = 0
    number sumOfLabelWidths = 0
    number widestLabel = 0

    on create
        ManualLayout layout
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:STANDARD)
        properties:SetVerticalLayoutMode(properties:FIT_CONTENTS)
        Font font = GetDefaultFont()
        properties:SetFont(font)
        properties:SetFontSize(GetDefaultFontSize())

        Color color
        Gradient gradient
        Color gray = color:LightGray()
        Color lightGray = color:CustomColor(0.9, 0.9, 0.9, 1)
        gradient:Set(gray, gray, lightGray, lightGray)

        properties:SetBackgroundColor(color:White())
        properties:SetBorderColor(color:Black())
        SetName("legend")

        SetFocusable(true)
        SetAccessibilityCode(parent:Item:CUSTOM)
    end

    action IsAccessibleParent returns boolean
        return true
    end

    /*
        Generates the tree of ChartItems that define how the chart will be 
        navigated and what extra information might be sent to the screen reader.
    */
    action GenerateInfoTree(Chart chart, ChartItem summary, ChartItem chartArea, ChartItem yAxis, ChartItem xAxis)
        ChartItem legendArea
        legendArea:SetDisplayName("Legend")
        legendArea:SetFocusTarget(me)
        legendArea:SetParent(summary)
        me:SetDescription(" with " + seriesList:GetSize() + " series")
        legendArea:SetContainer(chart)

        if chart:IsShowingXAxis()
            xAxis:SetNext(legendArea)
            legendArea:SetPrevious(xAxis)
        else
            chartArea:SetNext(legendArea)
            legendArea:SetPrevious(chartArea)
        end
        if chart:IsShowingYAxis()
            legendArea:SetNext(yAxis)
            yAxis:SetPrevious(legendArea)
        else
            legendArea:SetNext(chartArea)
            chartArea:SetPrevious(legendArea)
        end

        // Legend Entries
        ChartItem firstEntry
        firstEntry:SetContainer(chart)
        if seriesList:GetSize() > 0
            legendArea:SetChild(firstEntry)
            seriesList:Get(0):SetName(seriesList:Get(0):GetTextName())
            seriesList:Get(0):SetDescription(", 1 of " + seriesList:GetSize() + " series.")
            firstEntry:SetParent(legendArea)
            firstEntry:SetFocusTarget(seriesList:Get(0))
        end
        integer i = 1
        ChartItem previous = firstEntry
        repeat while i < seriesList:GetSize()
            ChartItem entry
            entry:SetContainer(chart)
            seriesList:Get(i):SetName(seriesList:Get(i):GetTextName())
            seriesList:Get(i):SetDescription(", " + (i+1) + " of " + seriesList:GetSize() + " series.")
            entry:SetParent(legendArea)
            entry:SetFocusTarget(seriesList:Get(i))
            previous:SetNext(entry)
            entry:SetPrevious(previous)
            previous = entry
            i = i + 1
        end
        legendArea:SetLastChild(previous)
    end

    /*
        This action is used to load the graphical components of the Control. This is
        handled automatically by the Game engine as needed, and most users shouldn't
        need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        if properties = undefined
            return now
        end
        parent:Control:LoadGraphics(properties)
    end

    action LoadLegend(Chart chart, LayoutProperties properties)
        DisposeDrawables()
        if properties = undefined
            return now
        end

        if GetTitleLabel() = undefined 
            Item2D labelAnchor
            ControlLabel newLabel
            SetTitleLabel(newLabel)
            newLabel:SetText(GetTitleText())
            newLabel:SetName(GetTitleText())
            newLabel:SetFocusable(true)
            newLabel:SetAccessibilityCode(parent:Item:ITEM)
            labelAnchor:Add(GetTitleLabel())
            Add(labelAnchor)
        end
                       
        integer i = 0
        repeat while i < seriesList:GetSize()
            Icon seriesIcon
            seriesList:Get(i):SetIcon(seriesIcon)
            if  seriesList:Get(i):GetColor() not= undefined
                seriesIcon:SetColor(seriesList:Get(i):GetColor())
            end
            Add(seriesIcon)

            Item2D labelAnchor
            ControlLabel newLabel
            newLabel:SetText(seriesList:Get(i):GetTextName())
            newLabel:SetName(seriesList:Get(i):GetTextName())
            seriesList:Get(i):SetLabel(newLabel)
            seriesList:Get(i):SetFocusable(true)
            seriesList:Get(i):SetAccessibilityCode(parent:Item:ITEM)
            
            labelAnchor:Add(seriesList:Get(i):GetLabel())
            Add(labelAnchor)
            Add(seriesList:Get(i))
            i = i + 1
        end
    end


    action ApplySeriesColor()
        ChartOptions options
        i = 0
        repeat while i < seriesList:GetSize()
            Series series = seriesList:Get(i)
            series:SetColor(options:GetColorFromPalette(i))
            integer j = 0
            repeat while j < series:GetSize()
                series:GetItemAt(j):SetColor(series:GetColor())
                j = j + 1
            end
            i = i + 1
        end
    end

    action DisposeDrawables()
        if title not= undefined
            title:Dispose()
            Remove(title)
            title = undefined
        end
        if not seriesList:IsEmpty()
            ControlLabel temp = undefined
            integer i = 0
            repeat while i < seriesList:GetSize()
                temp = seriesList:Get(i):GetLabel()
                if temp not= undefined
                    temp:Dispose()
                    Remove(temp)
                    temp = undefined
                end
                i = i + 1
            end
        end
        Empty()
    end

    /*
        These actions control the title of the legend.

        Attribute: Label for legend.
    */

    action GetTitleFontSize returns integer
        return titleFontSize
    end

    action SetTitleFontSize(integer size)
        titleFontSize = size
    end

    action SetTitleLabel(ControlLabel title)
        me:title = title
    end

    action SetTitleText(text name)
        titleText = name
    end    

    action GetTitleLabel() returns ControlLabel
        return title
    end

    action GetTitleText() returns text
        return titleText
    end

    action SetName(text name)
        parent:Item2D:SetName(name)
        
        LayoutProperties defaultProperties = GetDefaultLayoutProperties()

        if defaultProperties not= undefined
            defaultProperties:SetLabelText(name)
        end
        if GetView2D() is ControlView
            ControlView content = cast(ControlView, GetView2D())
            content:SetText(name)
        end
    end

    /*
        This action is used by the layout to position the graphical components of 
        the Chart. Layout is handled automatically so users don't need to use this
        action directly.

        Attribute: The series for the legend
    */
    action SetSeriesList(Array<Series> seriesList)
        me:seriesList = seriesList
    end

    action GetSeriesList() returns Array<Series>
        return seriesList 
    end

    action GetLabelFontSize returns integer
        return labelFontSize
    end

    action SetLabelFontSize(integer size)
        labelFontSize = size
    end

    action GetWidestLabel returns number
        return widestLabel
    end

    action SetWidestLabel(number width)
        widestLabel = width
    end

    action GetSumOfLabelWidths returns number
        return sumOfLabelWidths
    end

    action SetSumOfLabelWidths(number newSum)
        sumOfLabelWidths = newSum
    end

    action GetSumOfLabelHeights returns number
        return sumOfLabelHeights
    end

    action SetSumOfLabelHeights(number newSum)
        sumOfLabelHeights = newSum
    end


    action Add(text entry)
        itemNames:AddToEnd(entry)
    end

    action Empty()
        parent:Control:Empty()
        itemNames:Empty()
    end

    /*
        These actions will be used to place the legend on the chart.
        The user can adjust this by using the word "left" "right" "top" or "bottom"

        Attribute: Returns true if to be placed in that location
    */
    action SetLocation(text location)
        if location = "left"
            displayOnLeft = true
            displayOnRight = false
            displayOnTop = false
            displayOnBottom = false
        elseif location = "right"
            displayOnLeft = false
            displayOnRight = true
            displayOnTop = false
            displayOnBottom = false
        elseif location = "top"
            displayOnLeft = false
            displayOnRight = false
            displayOnTop = true
            displayOnBottom = false
        elseif location = "bottom"
            displayOnLeft = false
            displayOnRight = false
            displayOnTop = false
            displayOnBottom = true
        else
            //Those are the only options right now.
        end
    end

    action DisplayOnLeft returns boolean
        return displayOnLeft
    end

    action DisplayOnRight returns boolean
        return displayOnRight
    end

    action DisplayOnTop returns boolean
        return displayOnTop
    end

    action DisplayOnBottom returns boolean
        return displayOnBottom
    end

    
    private action MakeEntry(Series series, Color color, integer rightPadding) returns Icon
        Icon newItemStructure
        newItemStructure:SetFocusable(true)
        newItemStructure:SetAccessibilityCode(parent:Item:ITEM)
        FlowLayout layout


        Label newLabel = series:GetLabel()
        LayoutProperties properties = GetDefaultLayoutProperties()
        LayoutProperties labelProperties = newLabel:GetDefaultLayoutProperties()
        labelProperties:SetHorizontalLayoutMode(properties:FIT_CONTENTS)
        labelProperties:SetVerticalLayoutMode(properties:FIT_CONTENTS)
        labelProperties:SetLeftPadding(7)
        labelProperties:SetRightPadding(7+rightPadding)
        labelProperties:SetTopPadding(4)
        labelProperties:SetBottomPadding(7)
        newLabel:SetSize(properties:GetFontSize())

        Icon newIcon
        newIcon:SetName("Icon")
        newIcon:LoadFilledRectangle(20,20,color)

        LayoutProperties iconProperties = newIcon:GetDefaultLayoutProperties()
        iconProperties:SetHorizontalLayoutMode(iconProperties:MAINTAIN_ASPECT_RATIO)
        iconProperties:SetPercentageWidth(cast(number, newIcon:GetWidth()) / newIcon:GetHeight())
        iconProperties:SetPercentageHeight(1.0)
        iconProperties:SetLeftPadding(7)
        iconProperties:SetTopPadding(4)
        iconProperties:SetBottomPadding(4)

        LayoutProperties itemStructureProperties = newItemStructure:GetDefaultLayoutProperties()
        itemStructureProperties:SetHorizontalLayoutMode(itemStructureProperties:FIT_CONTENTS)
        itemStructureProperties:SetVerticalLayoutMode(itemStructureProperties:FIT_FONT)
        itemStructureProperties:SetFont(newLabel:GetFont())
        itemStructureProperties:SetFontSize(properties:GetFontSize())
        itemStructureProperties:SetInterfaceScale(properties:GetInterfaceScale())
        newItemStructure:SetLayout(layout)

        newItemStructure:Add(newIcon)
        newItemStructure:Add(newLabel)

        return newItemStructure
    end
    
    private action MakeEntry(text name) returns Control
        Control newItemStructure
        newItemStructure:SetFocusable(true)
        newItemStructure:SetAccessibilityCode(parent:Item:ITEM)
        FlowLayout layout

        Color color

        Label newLabel
        LayoutProperties properties = GetDefaultLayoutProperties()
        LayoutProperties labelProperties = newLabel:GetDefaultLayoutProperties()
        labelProperties:SetHorizontalLayoutMode(properties:FIT_CONTENTS)
        labelProperties:SetVerticalLayoutMode(properties:FIT_CONTENTS)
        labelProperties:SetLeftPadding(7)
        labelProperties:SetRightPadding(7)
        labelProperties:SetTopPadding(4)
        labelProperties:SetBottomPadding(7)
        newLabel:SetSize(properties:GetFontSize())
        newLabel:SetText(name)

        Icon newIcon
        newIcon:SetName("Icon")
        newIcon:LoadFilledRectangle(20,20,color:Navy())

        LayoutProperties iconProperties = newIcon:GetDefaultLayoutProperties()
        iconProperties:SetHorizontalLayoutMode(iconProperties:MAINTAIN_ASPECT_RATIO)
        iconProperties:SetPercentageWidth(cast(number, newIcon:GetWidth()) / newIcon:GetHeight())
        iconProperties:SetPercentageHeight(1.0)
        iconProperties:SetLeftPadding(7)
        iconProperties:SetTopPadding(4)
        iconProperties:SetBottomPadding(4)

        LayoutProperties itemStructureProperties = newItemStructure:GetDefaultLayoutProperties()
        itemStructureProperties:SetHorizontalLayoutMode(itemStructureProperties:FIT_CONTENTS)
        itemStructureProperties:SetVerticalLayoutMode(itemStructureProperties:FIT_FONT)
        itemStructureProperties:SetFont(newLabel:GetFont())
        itemStructureProperties:SetFontSize(properties:GetFontSize())
        itemStructureProperties:SetInterfaceScale(properties:GetInterfaceScale())
        newItemStructure:SetLayout(layout)

        newItemStructure:Add(newIcon)
        newItemStructure:Add(newLabel)

        return newItemStructure
    end

    action MakeTitleEntry(text title) returns Control
        Control newItemStructure
        newItemStructure:SetFocusable(true)
        newItemStructure:SetAccessibilityCode(parent:Item:ITEM)
        FlowLayout layout

        Label newLabel = me:title
        LayoutProperties properties = GetDefaultLayoutProperties()
        LayoutProperties labelProperties = newLabel:GetDefaultLayoutProperties()
        labelProperties:SetHorizontalLayoutMode(properties:FIT_CONTENTS)
        labelProperties:SetVerticalLayoutMode(properties:FIT_CONTENTS)
        labelProperties:SetLeftPadding(7)
        labelProperties:SetRightPadding(7)
        labelProperties:SetTopPadding(4)
        labelProperties:SetBottomPadding(7)
        newLabel:SetSize(properties:GetFontSize())
        newLabel:SetText(title)

        LayoutProperties itemStructureProperties = newItemStructure:GetDefaultLayoutProperties()
        itemStructureProperties:SetHorizontalLayoutMode(itemStructureProperties:FIT_CONTENTS)
        itemStructureProperties:SetVerticalLayoutMode(itemStructureProperties:FIT_FONT)
        itemStructureProperties:SetFont(newLabel:GetFont())
        itemStructureProperties:SetFontSize(properties:GetFontSize())
        itemStructureProperties:SetInterfaceScale(properties:GetInterfaceScale())
        newItemStructure:SetLayout(layout)

        newItemStructure:Add(newLabel)

        return newItemStructure
    end
end