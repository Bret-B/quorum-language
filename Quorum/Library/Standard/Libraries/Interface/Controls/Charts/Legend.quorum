package Libraries.Interface.Controls.Charts

use Libraries.Interface.Controls.Control

use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.TextureRegion
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Label
use Libraries.System.File
use Libraries.Interface.Views.ImageControlView
use Libraries.Interface.Views.LabelBoxView
use Libraries.Interface.Views.ControlView
use Libraries.Interface.Views.View2D
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Controls.Icon
use Libraries.Containers.Array
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Interface.Controls.Charts.Graphics.RegressionLine


class Legend is ChartItem
    private LayoutProperties properties = undefined
    ChartOptions options
    ChartLabel title = undefined
    Array<Series> seriesList
    Array<text> itemNames
    boolean displayOnLeft = false
    boolean displayOnRight = true
    boolean displayOnTop = false
    boolean displayOnBottom = false
    boolean showRegression = false

    text titleText = ""
    integer titleFontSize = 0
    integer labelFontSize = 0

    number minimumWidth = 0
    number minimumHeight = 0

    ColorGroup backgroundColor = undefined
    ColorGroup borderColor = undefined
    ColorGroup selectionColor = undefined
    ColorGroup selectionBorderColor = undefined

    on create
        Color transparent
        transparent:SetColor(0,0,0,0)
        properties = GetDefaultLayoutProperties()
        properties:SetBackgroundColor(transparent)
        properties:SetBorderColor(transparent)
        properties:SetBorderThickness(4)
        Font font = GetDefaultFont()
        properties:SetFont(font)
        properties:SetFontSize(GetDefaultFontSize())
        SetName("Legend")

        SetFocusable(true)
        SetAccessibilityCode(parent:Item:CUSTOM)
    end

    action IsAccessibleParent returns boolean
        return true
    end

    /*
        Generates the tree of ChartItems that define how the chart will be 
        navigated and what extra information might be sent to the screen reader.
    */
    action GenerateInfoTree(Chart chart, ChartItem summary, ChartItem chartArea, ChartItem yAxis, ChartItem xAxis)
        SetDisplayName(GetName())
        
        SetNextFocus(chartArea)
        SetPreviousFocus(summary)
        //SetRightItem(chartArea)
        text description = ""
        if titleText not= ""
            description = description + "shows " + titleText + " and "
        end 
        if seriesList not= undefined
            if seriesList:GetSize() = 1
                description = description + "has a value of " + seriesList:Get(seriesList:GetSize()-1):GetName() + "."
            else
                description = description + "has values "
                integer i = 0
                repeat while i < seriesList:GetSize()-1
                    description = description + seriesList:Get(i):GetName() + ", "
                    i = i + 1
                end
                description = description + "and " + seriesList:Get(seriesList:GetSize()-1):GetName() + "."
            end
        end
        me:SetDescription(description)

        SetContainer(chart)

        if chart:IsShowingYAxis()
            yAxis:SetDownItem(me)
            SetUpItem(yAxis)
        elseif chart:IsShowingXAxis()
            xAxis:SetDownItem(me)
            SetUpItem(xAxis)
        else
            summary:SetDownItem(me)
            SetUpItem(summary)
        end

        // Legend Entries
        if seriesList:GetSize() > 0
            ChartItem firstEntry = seriesList:Get(0)
            firstEntry:SetContainer(chart)
            seriesList:Get(0):SetName(seriesList:Get(0):GetName())

            description = seriesList:Get(0):GetSize() + " points"

            if showRegression
                if seriesList:Get(0):GetRegressionLine() not= undefined
                    // Regression equation
                    ChartItem equation = seriesList:Get(0):GetRegressionLine()
                    equation:SetContainer(chart)

                    seriesList:Get(0):GetRegressionLine():SetName(seriesList:Get(0):GetName()+" regression line.")
                    seriesList:Get(0):GetRegressionLine():SetDescription(seriesList:Get(0):GetRegressionLine():GetEquationLabel():GetText())
                    description = description + ", regression line " + seriesList:Get(0):GetRegressionLine():GetEquationLabel():GetText()  + ", "

                    // R-squared
                    ChartItem r2 = seriesList:Get(0):GetRegressionLine():GetRSquaredLabel()
                    r2:SetContainer(chart)
                    description = description + " r squared " + seriesList:Get(0):GetRegressionLine():GetRSquaredLabel():GetText()
                end
            end
            description = description + ", 1 of " + seriesList:GetSize() + " series."
            seriesList:Get(0):SetDescription(description)

            integer i = 1
            ChartItem previous = firstEntry
            repeat while i < seriesList:GetSize()
                description = seriesList:Get(i):GetSize() + " points"
                ChartItem entry = seriesList:Get(i)
                entry:SetContainer(chart)
                seriesList:Get(i):SetName(seriesList:Get(i):GetName())
                if showRegression
                    if seriesList:Get(i):GetRegressionLine() not= undefined
                        // Regression equation
                        ChartItem equation = seriesList:Get(i):GetRegressionLine()
                        equation:SetContainer(chart)
                        seriesList:Get(i):GetRegressionLine():SetName(seriesList:Get(i):GetName()+" regression line")
                        seriesList:Get(i):GetRegressionLine():SetDescription(seriesList:Get(i):GetRegressionLine():GetEquationLabel():GetText())
                        description = description + ", regression line " + seriesList:Get(i):GetRegressionLine():GetEquationLabel():GetText()  + ", "
    
                        // R-squared
                        ChartItem r2 = seriesList:Get(i):GetRegressionLine():GetRSquaredLabel()
                        r2:SetContainer(chart)
                        description = description + " r squared " + seriesList:Get(i):GetRegressionLine():GetRSquaredLabel():GetText()
                    end
                end
                description = description + ", " + (i+1) + " of " + seriesList:GetSize() + " series."
                seriesList:Get(i):SetDescription(description)
                previous = entry
                i = i + 1
            end
        end
    end

    /*
        This action is used to load the graphical components of the Control. This is
        handled automatically by the Game engine as needed, and most users shouldn't
        need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        if properties = undefined
            return now
        end
        parent:Control:LoadGraphics(properties)
    end

    action LoadLegend(Chart chart, LayoutProperties properties)
        DisposeDrawables()
        if properties = undefined
            return now
        end

        if GetTitleLabel() = undefined 
            ChartLabel newLabel
            SetTitleLabel(newLabel)
            newLabel:SetText(GetTitleText())
            newLabel:SetName(GetTitleText())
            newLabel:SetFocusable(true)
            newLabel:SetAccessibilityCode(parent:Item:ITEM)
            Add(GetTitleLabel())
        end
                  
        integer i = 0
        repeat while i < seriesList:GetSize()
            Icon seriesIcon
            seriesList:Get(i):SetEntryIcon(seriesIcon)
            if  seriesList:Get(i):GetColor() not= undefined
                seriesIcon:SetColor(seriesList:Get(i):GetColor())
            end
            Add(seriesIcon)

            ChartLabel newLabel
            newLabel:SetText(seriesList:Get(i):GetName())
            newLabel:SetName(seriesList:Get(i):GetName())
            seriesList:Get(i):SetLabel(newLabel)
            seriesList:Get(i):SetFocusable(true)
            seriesList:Get(i):SetAccessibilityCode(parent:Item:ITEM)
           
            Add(seriesList:Get(i):GetLabel())
            Add(seriesList:Get(i))

            if showRegression
                if seriesList:Get(i):GetRegressionLine() not= undefined
                    RegressionLine regLine = seriesList:Get(i):GetRegressionLine()
                    regLine:SetVariableNames(chart:GetYAxisTitle(), chart:GetXAxisTitle(), chart:GetHorizontalFlag(), chart:OrientationChanged())

                    ChartLabel regressionLabel = seriesList:Get(i):GetRegressionLine():GetLabel()
                    regressionLabel:SetFocusable(true)
                    regressionLabel:SetAccessibilityCode(parent:Item:ITEM)
                    Add(regressionLabel)

                    ChartLabel r2Label = seriesList:Get(i):GetRegressionLine():GetRSquaredLabel()
                    r2Label:SetFocusable(true)
                    r2Label:SetAccessibilityCode(parent:Item:ITEM)
                    Add(r2Label)
    
                    Icon regressionIcon = seriesList:Get(i):GetRegressionLine():GetRegressionIcon()
                    if seriesList:Get(i):GetColor() not= undefined
                        regressionIcon:SetColor(seriesList:Get(i):GetColor())
                        Add(regressionIcon)
                    end
                end
            end
            i = i + 1
        end
    end

    action ApplySeriesColor()
        ChartOptions options
        i = 0
        repeat while i < seriesList:GetSize()
            Series series = seriesList:Get(i)
            series:SetColor(options:GetColorFromPalette(i))
            integer j = 0
            repeat while j < series:GetSize()
                series:GetItemAt(j):SetColor(series:GetColor())
                j = j + 1
            end
            i = i + 1
        end
    end

    action DisposeDrawables()
        if title not= undefined
            title:Dispose()
            Remove(title)
            title = undefined
        end
        if not seriesList:IsEmpty()
            ChartLabel temp = undefined
            integer i = 0
            repeat while i < seriesList:GetSize()
                temp = seriesList:Get(i):GetLabel()
                if temp not= undefined
                    temp:Dispose()
                    Remove(temp)
                    temp = undefined
                end
                i = i + 1
            end
        end
        Empty()
    end

    /*
        These actions control the title of the legend.

        Attribute: Label for legend.
    */

    action GetTitleFontSize returns integer
        return titleFontSize
    end

    action SetTitleFontSize(integer size)
        titleFontSize = size
    end

    action SetTitleLabel(ChartLabel title)
        me:title = title
    end

    action SetTitleText(text name)
        titleText = name
    end    

    action GetTitleLabel() returns ChartLabel
        return title
    end

    action GetTitleText() returns text
        return titleText
    end

    /*
        This action is used by the layout to position the graphical components of 
        the Chart. Layout is handled automatically so users don't need to use this
        action directly.

        Attribute: The series for the legend
    */
    action SetSeriesList(Array<Series> seriesList)
        me:seriesList = seriesList
    end

    action GetSeriesList() returns Array<Series>
        return seriesList 
    end

    action GetLabelFontSize returns integer
        return labelFontSize
    end

    action SetLabelFontSize(integer size)
        labelFontSize = size
    end

    action IsShowingRegression returns boolean
        return showRegression
    end

    action ShowRegression(boolean show)
        showRegression = show
    end

    action Add(text entry)
        itemNames:AddToEnd(entry)
    end

    action Empty()
        parent:Control:Empty()
        itemNames:Empty()
    end

    /*
        These actions will be used to place the legend on the chart.
        The user can adjust this by using the word "left" "right" "top" or "bottom"

        Attribute: Returns true if to be placed in that location
    */
    action SetLocation(text location)
        if location = "left"
            displayOnLeft = true
            displayOnRight = false
            displayOnTop = false
            displayOnBottom = false
        elseif location = "right"
            displayOnLeft = false
            displayOnRight = true
            displayOnTop = false
            displayOnBottom = false
        elseif location = "top"
            displayOnLeft = false
            displayOnRight = false
            displayOnTop = true
            displayOnBottom = false
        elseif location = "bottom"
            displayOnLeft = false
            displayOnRight = false
            displayOnTop = false
            displayOnBottom = true
        else
            //Those are the only options right now.
        end
    end

    action DisplayOnLeft returns boolean
        return displayOnLeft
    end

    action DisplayOnRight returns boolean
        return displayOnRight
    end

    action DisplayOnTop returns boolean
        return displayOnTop
    end

    action DisplayOnBottom returns boolean
        return displayOnBottom
    end

    action SetMinimumWidth(number minimumWidth)
        me:minimumWidth = minimumWidth
    end

    action GetMinimumWidth returns number
        return minimumWidth
    end

    action SetMinimumHeight(number minimumHeight)
        me:minimumHeight = minimumHeight
    end

    action GetMinimumHeight returns number
        return minimumHeight
    end

    action CalculateMinimumSpace()
        ChartLabel currentLabel
        number labelWidth = 0
        number labelHeight = 0
        if GetTitleLabel() not= undefined
            GetTitleLabel():SetFontSize(titleFontSize)
            minimumWidth = GetTitleLabel():GetWidth()+labelFontSize //padding 
            minimumHeight = GetTitleLabel():GetHeight()
        end
        integer i = 0
        repeat while i < seriesList:GetSize()
            if seriesList:Get(i):GetLabel() not= undefined
                if displayOnLeft or displayOnRight
                    currentLabel = seriesList:Get(i):GetLabel()
                    currentLabel:SetFontSize(labelFontSize)
                    labelWidth = currentLabel:GetWidth()
                    labelHeight = currentLabel:GetHeight()
                    if labelWidth+(2.5*labelHeight) > minimumWidth
                        minimumWidth = labelWidth+(2.5*labelHeight)
                    end

                    integer extraLabelCount = 0
                    if showRegression
                        if seriesList:Get(i):GetRegressionLine() not= undefined
                            //Regression equation
                            currentLabel = seriesList:Get(i):GetRegressionLine():GetEquationLabel()
                            currentLabel:SetFontSize(labelFontSize)
                            labelWidth = currentLabel:GetWidth()
                            labelHeight = currentLabel:GetHeight()
                            if labelWidth+(2.5*labelHeight) > minimumWidth
                                minimumWidth = labelWidth+(2.5*labelHeight)
                            end

                            //R^2 value
                            currentLabel = seriesList:Get(i):GetRegressionLine():GetRSquaredLabel()
                            currentLabel:SetFontSize(labelFontSize)
                            labelWidth = currentLabel:GetWidth()
                            labelHeight = currentLabel:GetHeight()
                            if labelWidth+(2.5*labelHeight) > minimumWidth
                                minimumWidth = labelWidth+(2.5*labelHeight)
                            end

                            extraLabelCount = 2
                        end
                    end
                    minimumHeight = minimumHeight + labelHeight*(extraLabelCount+1) //enough height for the labels
                    minimumHeight = minimumHeight + (0.25*labelHeight)*(extraLabelCount) //enough padding between related labels
                    minimumHeight = minimumHeight + (0.5*labelHeight) // enough padding between series (unrelated labels)
                else
                    currentLabel = seriesList:Get(i):GetLabel()
                    currentLabel:SetFontSize(labelFontSize)
                    labelWidth = currentLabel:GetWidth()
                    labelHeight = currentLabel:GetHeight()
                    number widthOfSeries = labelWidth+(2*labelHeight)
                    integer extraLabelCount = 0
                    if showRegression
                        if seriesList:Get(i):GetRegressionLine() not= undefined
                            //Regression equation
                            currentLabel = seriesList:Get(i):GetRegressionLine():GetEquationLabel()
                            currentLabel:SetFontSize(labelFontSize)
                            labelWidth = currentLabel:GetWidth()
                            labelHeight = currentLabel:GetHeight()
                            if labelWidth+(2.5*labelHeight) > widthOfSeries
                                widthOfSeries = labelWidth+(2.5*labelHeight)
                            end

                            //R^2 value
                            currentLabel = seriesList:Get(i):GetRegressionLine():GetRSquaredLabel()
                            currentLabel:SetFontSize(labelFontSize)
                            labelWidth = currentLabel:GetWidth()
                            labelHeight = currentLabel:GetHeight()
                            if labelWidth+(2.5*labelHeight) > widthOfSeries
                                widthOfSeries = labelWidth+(2.5*labelHeight)
                            end

                            extraLabelCount = 2
                        end
                    end

                    number heightOfSeries = labelHeight*(extraLabelCount+1) + labelHeight //enough height for the labels 
                    heightOfSeries = heightOfSeries + (0.25*labelHeight)*(extraLabelCount) //enough padding between related labels 
                    if heightOfSeries > minimumHeight
                        minimumHeight = heightOfSeries
                    end
                    minimumWidth = minimumWidth + widthOfSeries
                end
            end
            i = i + 1
        end
    end

    // This is currently obsolete
    private action MakeEntry(Series series, Color color, integer rightPadding) returns Icon
        Icon newItemStructure
        newItemStructure:SetFocusable(true)
        newItemStructure:SetAccessibilityCode(parent:Item:ITEM)
        FlowLayout layout


        Label newLabel = series:GetLabel()
        LayoutProperties properties = GetDefaultLayoutProperties()
        LayoutProperties labelProperties = newLabel:GetDefaultLayoutProperties()
        labelProperties:SetHorizontalLayoutMode(properties:FIT_CONTENTS)
        labelProperties:SetVerticalLayoutMode(properties:FIT_CONTENTS)
        labelProperties:SetLeftPadding(7)
        labelProperties:SetRightPadding(7+rightPadding)
        labelProperties:SetTopPadding(4)
        labelProperties:SetBottomPadding(7)
        newLabel:SetSize(properties:GetFontSize())

        Icon newIcon
        newIcon:SetName("Icon")
        newIcon:LoadFilledRectangle(20,20,color)

        LayoutProperties iconProperties = newIcon:GetDefaultLayoutProperties()
        iconProperties:SetHorizontalLayoutMode(iconProperties:MAINTAIN_ASPECT_RATIO)
        iconProperties:SetPercentageWidth(cast(number, newIcon:GetWidth()) / newIcon:GetHeight())
        iconProperties:SetPercentageHeight(1.0)
        iconProperties:SetLeftPadding(7)
        iconProperties:SetTopPadding(4)
        iconProperties:SetBottomPadding(4)

        LayoutProperties itemStructureProperties = newItemStructure:GetDefaultLayoutProperties()
        itemStructureProperties:SetHorizontalLayoutMode(itemStructureProperties:FIT_CONTENTS)
        itemStructureProperties:SetVerticalLayoutMode(itemStructureProperties:FIT_FONT)
        itemStructureProperties:SetFont(newLabel:GetFont())
        itemStructureProperties:SetFontSize(properties:GetFontSize())
        itemStructureProperties:SetInterfaceScale(properties:GetInterfaceScale())
        newItemStructure:SetLayout(layout)

        newItemStructure:Add(newIcon)
        newItemStructure:Add(newLabel)

        return newItemStructure
    end
    
    // This is currently obsolete
    private action MakeEntry(text name) returns Control
        Control newItemStructure
        newItemStructure:SetFocusable(true)
        newItemStructure:SetAccessibilityCode(parent:Item:ITEM)
        FlowLayout layout

        Color color

        Label newLabel
        LayoutProperties properties = GetDefaultLayoutProperties()
        LayoutProperties labelProperties = newLabel:GetDefaultLayoutProperties()
        labelProperties:SetHorizontalLayoutMode(properties:FIT_CONTENTS)
        labelProperties:SetVerticalLayoutMode(properties:FIT_CONTENTS)
        labelProperties:SetLeftPadding(7)
        labelProperties:SetRightPadding(7)
        labelProperties:SetTopPadding(4)
        labelProperties:SetBottomPadding(7)
        newLabel:SetSize(properties:GetFontSize())
        newLabel:SetText(name)

        Icon newIcon
        newIcon:SetName("Icon")
        newIcon:LoadFilledRectangle(20,20,color:Navy())

        LayoutProperties iconProperties = newIcon:GetDefaultLayoutProperties()
        iconProperties:SetHorizontalLayoutMode(iconProperties:MAINTAIN_ASPECT_RATIO)
        iconProperties:SetPercentageWidth(cast(number, newIcon:GetWidth()) / newIcon:GetHeight())
        iconProperties:SetPercentageHeight(1.0)
        iconProperties:SetLeftPadding(7)
        iconProperties:SetTopPadding(4)
        iconProperties:SetBottomPadding(4)

        LayoutProperties itemStructureProperties = newItemStructure:GetDefaultLayoutProperties()
        itemStructureProperties:SetHorizontalLayoutMode(itemStructureProperties:FIT_CONTENTS)
        itemStructureProperties:SetVerticalLayoutMode(itemStructureProperties:FIT_FONT)
        itemStructureProperties:SetFont(newLabel:GetFont())
        itemStructureProperties:SetFontSize(properties:GetFontSize())
        itemStructureProperties:SetInterfaceScale(properties:GetInterfaceScale())
        newItemStructure:SetLayout(layout)

        newItemStructure:Add(newIcon)
        newItemStructure:Add(newLabel)

        return newItemStructure
    end

    // This is currently obsolete
    action MakeTitleEntry(text title) returns Control
        Control newItemStructure
        newItemStructure:SetFocusable(true)
        newItemStructure:SetAccessibilityCode(parent:Item:ITEM)
        FlowLayout layout

        Label newLabel = me:title
        LayoutProperties properties = GetDefaultLayoutProperties()
        LayoutProperties labelProperties = newLabel:GetDefaultLayoutProperties()
        labelProperties:SetHorizontalLayoutMode(properties:FIT_CONTENTS)
        labelProperties:SetVerticalLayoutMode(properties:FIT_CONTENTS)
        labelProperties:SetLeftPadding(7)
        labelProperties:SetRightPadding(7)
        labelProperties:SetTopPadding(4)
        labelProperties:SetBottomPadding(7)
        newLabel:SetSize(properties:GetFontSize())
        newLabel:SetText(title)

        LayoutProperties itemStructureProperties = newItemStructure:GetDefaultLayoutProperties()
        itemStructureProperties:SetHorizontalLayoutMode(itemStructureProperties:FIT_CONTENTS)
        itemStructureProperties:SetVerticalLayoutMode(itemStructureProperties:FIT_FONT)
        itemStructureProperties:SetFont(newLabel:GetFont())
        itemStructureProperties:SetFontSize(properties:GetFontSize())
        itemStructureProperties:SetInterfaceScale(properties:GetInterfaceScale())
        newItemStructure:SetLayout(layout)

        newItemStructure:Add(newLabel)

        return newItemStructure
    end

    action GetBorderColor returns ColorGroup
        if borderColor not= undefined
            return borderColor
        end

        Chart chart = GetParentChart()
        if chart not= undefined
            return chart:GetBorderColor()
        end
        return undefined
    end

    action SetBorderColor(ColorGroup color)
        borderColor = color
    end

    action GetBackgroundColor returns ColorGroup
        if backgroundColor not= undefined
            return backgroundColor
        end

        Chart chart = GetParentChart()
        if chart not= undefined
            return chart:GetIconColor()
        end

        return undefined
    end

    action SetBackgroundColor(ColorGroup color)
        backgroundColor = color
    end

    action GetSelectionBorderColor returns ColorGroup
        if selectionBorderColor not= undefined
            return selectionBorderColor
        end

        Chart chart = GetParentChart()
        if chart not= undefined
            return chart:GetSelectionBorderColor()
        end
        return undefined
    end

    action SetSelectionBorderColor(ColorGroup color)
        selectionBorderColor = color
    end

    action GetSelectionColor returns ColorGroup
        if selectionColor not= undefined
            return selectionColor
        end

        Chart chart = GetParentChart()
        if chart not= undefined
            return chart:GetForegroundSelectionColor()
        end

        return undefined
    end

    action SetSelectionColor(ColorGroup color)
        selectionColor = color
    end

    // Try to get the chart this is attached to via the parent hierarchy.
    private action GetParentChart returns Chart
        Item2D parentItem = GetParent()
        repeat until parentItem is Chart or parentItem = undefined
            parentItem = parentItem:GetParent()
        end
        return cast(Chart, parentItem)
    end
end