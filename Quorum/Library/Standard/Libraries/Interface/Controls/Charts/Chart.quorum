package Libraries.Interface.Controls.Charts

use Libraries.Interface.Controls.Control
use Libraries.Interface.Selections.ChartSelection
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Views.ControlView
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Label
use Libraries.Interface.Controls.ControlLabel
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Containers.Array
use Libraries.Interface.Controls.Charts.ChartOptions
use Libraries.Compute.Math
use Libraries.Game.Graphics.Color
use Libraries.Interface.Controls.Icon
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.TextureRegion
use Libraries.Interface.Views.View2D
use Libraries.Interface.Item
use Libraries.Interface.Controls.Charts.ChartDisplay
use Libraries.System.File
use Libraries.Interface.Views.LabelBoxView

/*

    This class represents a generic chart on the system. By default, charts present visual 
    information to the user and also present themselves as accessible controls to the operating 
    system. This includes a selection, called ChartSelection, that can be queried for information 
    that is relevant to particular kinds of charts. For example, a bar chart might have labels, 
    axes, and bars. Each of these can be navigated up and down to go between parents, with the 
    top-most level being a summary and any ChartItems underneath being representations of the 
    underlying structure of the chart. 

    To put this in perspective, consider that a bar chart might allow one to navigate to a 
    level of a chart that contains the axes, bars, and labels. On the bars, if one presses the 
    down arrow, this now allows the user to navigate between the bars for information and this 
    changes the default selection, which informs the operating system of the change. The broad 
    purpose of this architecture is that it allows the chart to have an overall structure that 
    is different from the graphical structure, allowing the chart itself to set reasonable 
    defaults for how to navigate the control with the keyboard

    Attribute: Author Gabriel Contreras and Andreas Stefik

    Attribute: Example

    use Libraries.Interface.Controls.Charts
    use Libraries.Game.Game

    class Main is Games
        action Main
            StartGame()
        end

        action CreateGame
            BarChart chart
            Add(chart)
        end
    end
*/
class Chart is Control
    boolean treeNeedsUpdate = true

    ChartSelection selection
    ChartOptions options
    Color color
    Math math
    
    // Chart Orientation
    text currentOrientation = undefined
    text defaultOrientation = undefined
    boolean orientationFlag = false

    // Chart Area Components
    ControlLabel title = undefined
    integer titlefontsize = 0
    boolean titleFontSizeOverride = false
    number titleAreaHeightPercent = 0.10
    number titleAreaWidthPercent = 0.75
    Control chartArea
    Array <Control> subChartAreas
    Drawable backgroundD = undefined
    Array<Icon> groupPanels
    integer paddedChartOffset = 0
    boolean showBracketOverride = false
    integer numberOfChartAreas = 1

    // X-Axis Components
    HorizontalAxisPanel horizontalPanel
    Array <HorizontalAxisPanel> subHorizontalPanels
    boolean showXAxis = true   
    boolean showXTicks = false
    boolean showMajorXGridLines = true
    boolean showMinorXGridLines = false
    boolean xLabelFontSizeOverride = false
    boolean xTitleFontSizeOverride = false
    boolean overrideXLabelsRotation = false

    number horizontalPanelWidthPercent = 0.75
    number horizontalPanelHeightPercent = 0.05
    integer xLabelsRotation = 0

    // Y-Axis Components
    VerticalAxisPanel verticalPanel
    Array <VerticalAxisPanel> subVerticalPanels
    boolean showYAxis = true
    boolean showYTicks = false
    boolean showMajorYGridLines = true
    boolean showMinorYGridLines = false   
    boolean yLabelFontSizeOverride = false
    boolean yTitleFontSizeOverride = false

    number verticalPanelWidthPercent = 0.05
    number verticalPanelHeightPercent = 0.75 
    integer yLabelsRotation = 0

    // Legend Components
    Legend legend
    boolean showLegend = true
    boolean showLegendOverride = false
    boolean legendLabelFontSizeOverride = false
    boolean legendTitleFontSizeOverride = false
    number legendPanelWidthPercent = 0.05
    number legendPanelHeightPercent = 0.05

    on create
        ManualLayout manualLayout
        chartArea:SetLayout(manualLayout)

        chartArea:SetName("Chart Area")

        LayoutProperties properties = chartArea:GetDefaultLayoutProperties()
        properties:SetBackgroundColor(color:White())
        properties:SetBorderColor(color:White())
        properties:SetBorderThickness(4)
        Font font = GetDefaultFont()
        properties:SetFont(font)
        properties:SetFontSize(GetDefaultFontSize())

        chartArea:SetFocusable(true)
        chartArea:SetAccessibilityCode(parent:Item:CUSTOM)

        Add(chartArea)
    end

    action IsAccessibleParent returns boolean
        return true
    end

    blueprint action GenerateSummary returns text
    private blueprint action GenerateInfoTree

    action LoadGraphics(LayoutProperties properties)
        DisposeDrawables()
        parent:Control:LoadGraphics(properties)   
        if properties = undefined
            return now
        end

        ColorGroup background = properties:GetBackgroundColor()
        ColorGroup border = properties:GetBorderColor()
        number borderThickness = properties:GetBorderThickness()
        text labelText = properties:GetLabelText()

        Font font = properties:GetFont()
        TextureRegion iconTexture = properties:GetIcon()
        
        if GetWidth() = 0 or GetHeight() = 0
            SetSize(1000,1000)//this is for a default size
        end

        if GetBackground() = undefined
            Drawable rect
            rect:LoadFilledRectangle(cast(integer, GetWidth()) ,cast(integer, GetHeight()), color:White())
            SetBackground(rect)
            Add(rect)
        end

        ColorGroup chartAreaBackground = chartArea:GetDefaultLayoutProperties():GetBackgroundColor()
        ColorGroup chartAreaBorder = chartArea:GetDefaultLayoutProperties():GetBorderColor()
        number chartAreaBorderThickness = chartArea:GetDefaultLayoutProperties():GetBorderThickness()
        View2D chartAreaView = chartArea:GetDefaultLayoutProperties():GetView2D()

        if chartAreaView = undefined
            //background of chart area
            LabelBoxView chartAreaLabelBoxView
            if chartAreaBackground = undefined
                chartAreaBackground = color:CustomColor(0, 0, 0, 0)
            end
            if chartAreaBorder = undefined
                chartAreaBorder = color:CustomColor(0, 0, 0, 0)
            end
    
            chartAreaLabelBoxView:SetBorderThickness(cast(integer, chartAreaBorderThickness))
            chartAreaLabelBoxView:Initialize(chartAreaBackground, chartAreaBorder)
            chartAreaView = chartAreaLabelBoxView
            chartArea:SetView2D(chartAreaLabelBoxView)
        end

        if chartAreaView not= undefined
            chartArea:SetView2D(chartAreaView)
        end
        
        if GetTitleLabel() = undefined
            ControlLabel newLabel
            SetTitleLabel(newLabel)
            newLabel:SetText(labelText)
            Add(newLabel)
        end

        if numberOfChartAreas > 1
            integer i = 0
            repeat while i < numberOfChartAreas
                Control subArea
                subChartAreas:Add(subArea)
                if i < verticalPanel:GetNumberOfSections()
                    VerticalAxisPanel subYAxis
                    subVerticalPanels:Add(subYAxis)
                end
                if i < horizontalPanel:GetNumberOfSections()
                    HorizontalAxisPanel subXAxis
                    subHorizontalPanels:Add(subXAxis)
                end
                i = i + 1
            end
        end

        if orientationFlag
            FlipAxisInfo()
        end

        if IsShowingXAxis()
            horizontalPanelHeightPercent = 0.15
            horizontalPanel:LoadAxis(me, properties)
            Add(horizontalPanel)
        end
        if IsShowingYAxis()
            verticalPanelWidthPercent = 0.15
            verticalPanel:LoadAxis(me, properties)
            Add(verticalPanel)
        end

        legend:ApplySeriesColor()
        if IsShowingLegend()
            legendPanelWidthPercent = 0.10
            legend:LoadLegend(me, properties)
            Add(legend)
        end

        Add(chartArea)
        SetNeedsUpdate(true)
        Resize()
        SetNextFocus(GetNextFocus())
        SetPreviousFocus(GetPreviousFocus())
    end
    
    /*
        This action will flip the axis min/max and any labels associated.  
        Then the un-used axis will be deactivated so it won't interfere with the
        accessibility navigation.
    */
    action FlipAxisInfo()
        number temp = GetXAxisMaximum()
        SetXAxisMaximum(GetYAxisMaximum())
        SetYAxisMaximum(temp)

        temp = GetXAxisMinimum()
        SetXAxisMinimum(GetYAxisMinimum())
        SetYAxisMinimum(temp)

        Array <text> templabels = horizontalPanel:GetOverrideLabels()
        horizontalPanel:SetOverrideLabels(verticalPanel:GetOverrideLabels())
        verticalPanel:SetOverrideLabels(templabels)

        boolean tempflag = horizontalPanel:NumericalOverrideLabels()
        horizontalPanel:NumericalOverrideLabels(verticalPanel:NumericalOverrideLabels())
        verticalPanel:NumericalOverrideLabels(tempflag)

        tempflag = horizontalPanel:ShowGroupBrackets()
        horizontalPanel:ShowGroupBrackets(verticalPanel:ShowGroupBrackets())
        verticalPanel:ShowGroupBrackets(tempflag)

        text tempTitle = horizontalPanel:GetTitleText()
        horizontalPanel:SetTitleText(verticalPanel:GetTitleText())
        verticalPanel:SetTitleText(tempTitle)
    end

    /*
        This action takes a range of data and returns a decent interval, this is only the default.
        The user can choose any interval they wish and set it manually. 

        Attribute: Returns a the best interval 
    */
    action CalculateBestIntervalForRange(number range) returns number
        number tickSkips = 0
        if range <= 2.5
            if range > 1.5
                tickSkips = 0.5
            else
                tickSkips = 0.1
            end
        else //I'm sure a better way to set the default intervals can be produced.
            if range > 1000000
                tickSkips = 500000
            elseif range > 250000
                tickSkips = 50000
            elseif range > 50000
                tickSkips = 10000
            elseif range > 25000
                tickSkips = 10000
            elseif range > 10000
                tickSkips = 5000
            elseif range > 5000
                tickSkips = 1000
            elseif range > 2500
                tickSkips = 500
            elseif range > 1000
                tickSkips = 250
            elseif range > 500
                tickSkips = 100
            elseif range > 200
                tickSkips = 50
            elseif range > 100
                tickSkips = 20
            elseif range > 50
                tickSkips = 10
            elseif range > 20
                tickSkips = 5
            elseif range > 10
                tickSkips = 2
            else
                tickSkips = 1
            end
        end
        return tickSkips
    end

    action DisposeDrawables()
        if title not= undefined
            title:Dispose()
            Remove(title)
            title = undefined
        end

        if backgroundD not= undefined
            backgroundD:Dispose()
            Remove(backgroundD)
            backgroundD = undefined
        end

        GetLegend():Empty()
        GetVerticalPanel():Empty()
        GetHorizontalPanel():Empty()
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action GetHorizontalPanel returns HorizontalAxisPanel
        return horizontalPanel
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action GetSubHorizontalPanels returns Array<HorizontalAxisPanel>
        return subHorizontalPanels
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action GetVerticalPanel returns VerticalAxisPanel
        return verticalPanel
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action GetSubVerticalPanels returns Array<VerticalAxisPanel>
        return subVerticalPanels
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action GetChartArea returns Control
        return chartArea
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action GetSubChartAreas returns Array<Control>
        return subChartAreas
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action GetNumberOfChartAreas returns integer
        return numberOfChartAreas
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action GetGroupPanels returns Array<Icon>
        return groupPanels
    end

    action GetChartAreaWidthPercent returns number
        return horizontalPanelWidthPercent
    end

    action GetChartAreaHeightPercent returns number
        return verticalPanelHeightPercent
    end

    action SetChartAreaWidthPercent(number value)
        me:horizontalPanelWidthPercent = value
    end

    action SetChartAreaHeightPercent(number value)
        me:verticalPanelHeightPercent = value
    end

    action GetHorizontalPanelHeightPercent returns number
        return horizontalPanelHeightPercent
    end

    action SetHorizontalPanelHeightPercent (number value)
        horizontalPanelHeightPercent = value
    end

    action GetHorizontalPanelWidthPercent returns number
        return horizontalPanelWidthPercent
    end

    action SetHorizontalPanelWidthtPercent (number value)
        horizontalPanelWidthPercent = value
    end

    action GetVerticalPanelHeightPercent returns number
        return verticalPanelHeightPercent
    end

    action SetVerticalPanelHeightPercent (number num)
        verticalPanelHeightPercent = num
    end

    action GetVerticalPanelWidthPercent returns number
        return verticalPanelWidthPercent
    end

    action SetVerticalPanelWidthtPercent (number num)
        verticalPanelWidthPercent = num
    end

    action ShowYTicks()
        showYTicks = true
    end
    action HideYTicks()
        showYTicks = false
    end

    action ShowXTicks()
        showXTicks = true
    end
    action HideXTicks()
        showXTicks = false
    end

    action ShowAllTicks()
        showYTicks = true
        showXTicks = true
    end
    action HideAllTicks()
        showYTicks = false
        showXTicks = false
    end

    action IsShowingYTicks returns boolean
        return showYTicks
    end

    action IsShowingXTicks returns boolean
        return showXTicks
    end

    action SetXTickCount(integer ticks)
        horizontalPanel:SetTickCountOverride(ticks)
    end

    action SetXTickInterval(number set)
        horizontalPanel:SetTickInterval(set)
        horizontalPanel:SetNumberFormat("number")
    end

    action SetXTickInterval(integer set)
        horizontalPanel:SetTickInterval(cast(number, set))
    end

    action SetYTickCount(integer ticks)
        verticalPanel:SetTickCountOverride(ticks)
    end

    action SetYTickInterval(number set)
        verticalPanel:SetTickInterval(set)
        verticalPanel:SetNumberFormat("number")
    end

    action SetYTickInterval(integer set)
        verticalPanel:SetTickInterval(cast(number, set))
    end

    action GetXAxisMinimum returns number
        return horizontalPanel:GetMinimum()
    end

    action SetXAxisMinimum(number min)
        horizontalPanel:SetMinimum(min)
        horizontalPanel:OverrideDefaultMin()
    end

    action GetXAxisMaximum returns number
        return horizontalPanel:GetMaximum()
    end

    action SetXAxisMaximum(number max)
        horizontalPanel:SetMaximum(max)
        horizontalPanel:OverrideDefaultMax()
    end

    action GetYAxisMinimum returns number
        return verticalPanel:GetMinimum()
    end

    action SetYAxisMinimum(number min)
        verticalPanel:SetMinimum(min)
        verticalPanel:OverrideDefaultMin()
    end

    action GetYAxisMaximum returns number
        return verticalPanel:GetMaximum()
    end

    action SetYAxisMaximum(number max)
        verticalPanel:SetMaximum(max)
        verticalPanel:OverrideDefaultMax()
    end

    action SetXAxisNumberFormat(text format)
        text newFormat = format:ToLowerCase()
        if newFormat = "integer" or newFormat = "number"
            horizontalPanel:SetNumberFormat(format)
        end
    end

    action SetYAxisNumberFormat(text format)
        text newFormat = format:ToLowerCase()
        if newFormat = "integer" or newFormat = "number"
            verticalPanel:SetNumberFormat(format)
        end
    end

    /*
    These actions are used to offset the start of the tick placement
    if the chart has added white space on either side of the chart area.

    Attribute: Sets/Returns the pixel offset. 
    */
    action GetPaddedChartOffset returns integer
        return paddedChartOffset
    end
    action SetPaddedChartOffset(integer offset)
        paddedChartOffset = offset
    end

    /*
    These actions are used to get and set the orientation. The default will
    be set on creation of each chart but can be changed afterwards manually
    or the user can call FlipOrientation().

    Attribute: Orientation controls
    */
    action GetOrientation returns text
        return currentOrientation
    end
    action GetDefaultOrientation returns text
        return defaultOrientation
    end

    action SetOrientation(text orient)
        text newOrientation = orient:ToLowerCase()
        if newOrientation = "horizontal" or newOrientation = "vertical"
            if newOrientation = currentOrientation
                orientationFlag = false
            else
                currentOrientation = newOrientation
                orientationFlag = true
            end
        else
            alert("Orientation can only by vertical or horizontal")
        end
    end

    action SetDefaultOrientation(text orient)
        text newOrientation = orient:ToLowerCase()
        if newOrientation = "horizontal" or newOrientation = "vertical"
            defaultOrientation = newOrientation
            currentOrientation = newOrientation
        else
            alert("Orientation can only by vertical or horizontal")
        end
    end

    action FlipOrientation()
        if currentOrientation not= undefined
            orientationFlag = not orientationFlag
            if currentOrientation = "horizontal"
                currentOrientation = "vertical"
            else
                currentOrientation = "horizontal"
            end
        end
    end

    action OrientationChanged returns boolean
        return orientationFlag 
    end

    action GetHorizontalFlag returns boolean
        if currentOrientation = "horizontal"
            return true
        else
            return false
        end
    end

    action GetVerticalFlag returns boolean
        if currentOrientation = "vertical"
            return true
        else
            return false
        end
    end

    action SeparateByFactor()
        SeparateByFactor(1)
    end

    action SeparateByFactor(integer requestedColumns)
        integer numberOfFactors = GetSeriesList():GetSize()
        boolean singleRow = false
        if numberOfFactors > 1
            if requestedColumns > 1
                if requestedColumns > numberOfFactors
                    horizontalPanel:SplitIntoSections(numberOfFactors)
                    singleRow = true
                else
                    horizontalPanel:SplitIntoSections(requestedColumns)
                end
            end
            if not singleRow
                verticalPanel:SplitIntoSections(cast(integer, math:Ceiling(cast(number, numberOfFactors)/requestedColumns)))
            end
        end
        numberOfChartAreas = verticalPanel:GetNumberOfSections()*horizontalPanel:GetNumberOfSections()
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action OverrideXLabelsWithText(Array<text> labels)
        horizontalPanel:SetOverrideLabels(labels)
    end

    action OverrideYLabelsWithText(Array<text> labels)
        verticalPanel:SetOverrideLabels(labels)
    end

    action GetYLabels returns Array<ControlLabel>
        return verticalPanel:GetLabels()
    end

    action SetYLabels(Array<ControlLabel> newLabels)
        verticalPanel:SetLabels(newLabels)
    end

    action GetXLabels returns Array<ControlLabel>
        return horizontalPanel:GetLabels()
    end

    action SetXLabels(Array<ControlLabel> newLabels)
        horizontalPanel:SetLabels(newLabels)
    end

    action RotateXLabels(integer degrees) // "360 -" because it rotates opposite of how you'd imagine.
        xLabelsRotation = 360 - degrees
        SetRotationOverride(true)
    end

    action GetXLabelsRotation() returns integer
        return xLabelsRotation
    end

    action GetRotationOverride() returns boolean
        return overrideXLabelsRotation
    end

    action SetRotationOverride(boolean flag)
        overrideXLabelsRotation = flag
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action SetName(text name)
        parent:Item2D:SetName(name)
        
        LayoutProperties defaultProperties = GetDefaultLayoutProperties()

        if defaultProperties not= undefined
            defaultProperties:SetLabelText(name)
        end
        if GetView2D() is ControlView
            ControlView content = cast(ControlView, GetView2D())
            content:SetText(name)
        end
    end

    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action GetTitleLabel returns ControlLabel
        return title
    end

    action SetTitleLabel(ControlLabel label)
        me:title = label
    end

    /*
        Set the Title of the Chart.

        Attribute: Parameter name the name of the title.
    */
    action SetTitle(text name)
        SetName(name)
    end

    /*
        Returns the Title of the Chart.

        Attribute: Returns the name
    */
    action GetTitle returns text
        return GetName()
    end

    
    /*
        Set the title for the X-Axis of the Chart.
    */
    action SetXAxisTitle(text name)
        horizontalPanel:SetTitleText(name)
    end

    /*
        Returns the title for the X-Axis of the Chart.
    */
    action GetXAxisTitle returns text
        return horizontalPanel:GetTitleText()
    end

    /*
        Set the title for the Y-Axis of the Chart
    */
    action SetYAxisTitle(text name)
        verticalPanel:SetTitleText(name)
    end

    /*
        Returns the title for the Y-Axis of the Chart.
    */
    action GetYAxisTitle returns text
        return verticalPanel:GetTitleText()
    end

    /*  Returns the relative size difference in the x axis label for the chart. 
        Attribute: Returns the size difference compared to the base font size
    */
    action GetXAxisFontSizeOffset returns number
        return horizontalPanelWidthPercent
    end

    /*  Sets the relative size difference in the x axis label for the chart. 
        Attribute: Parameter value the size difference compared to the base font size
    */
    action SetXAxisFontSizeOffset(number value)
        me:horizontalPanelWidthPercent = value
    end

    /*  Returns the relative size difference in the y axis label for the chart. 
        Attribute: Returns the size difference compared to the base font size
    */
    action GetYAxisFontSizeOffset returns number
        return verticalPanelHeightPercent
    end

    /*  Sets the relative size difference in the y axis label for the chart. 
        Attribute: Parameter value the size difference compared to the base font size
    */
    action SetYAxisFontSizeOffset(number value)
        me:verticalPanelHeightPercent = value
    end

    /*
        These action states to turn on the axes. 
        Attribute: True if the axes should be shown.
    */
    action ShowXAxis(boolean show)
        showXAxis = show
    end
    action IsShowingXAxis returns boolean
        return showXAxis
    end
    action ShowYAxis(boolean show)
        showYAxis = show
    end
    action IsShowingYAxis returns boolean
        return showYAxis
    end

    action ShowGroupBrackets()
        verticalPanel:ShowGroupBrackets(true)
        horizontalPanel:ShowGroupBrackets(true)
    end

    action HideGroupBrackets()
        showBracketOverride = true
        verticalPanel:ShowGroupBrackets(false)
        horizontalPanel:ShowGroupBrackets(false)
    end

    action GetShowBracketOverride() returns boolean
        return showBracketOverride
    end

    /*
        GRIDLINE CONTROLS
        These actions are used to customize which gridlines are visible
        Major gridlines are drawn to match the number and location of axis ticks.
        Minor gridlines default to 5 intervals between major gridlines.
        The minor gridline interval count can be manually changed.
        No option to customize density or color at this time.

        Attribute: True if the gridlines should be shown.
    */
    action SetMinorYGridlineCount(integer count)
        verticalPanel:SetMinorGridlineCount(count)
    end

    action SetMinorXGridlineCount(integer count)
        horizontalPanel:SetMinorGridlineCount(count)
    end
    action ShowAllGridLines()
        showMajorYGridLines = true
        showMajorXGridLines = true
        showMinorYGridLines = true
        showMinorXGridLines = true
    end
    action HideAllGridLines()
        showMajorYGridLines = false
        showMajorXGridLines = false
        showMinorYGridLines = false
        showMinorXGridLines = false
    end

    action ShowAllXGridLines()
        showMajorXGridLines = true
        showMinorXGridLines = true
    end
    action HideAllXGridLines()
        showMajorXGridLines = false
        showMinorXGridLines = false
    end

    action ShowAllYGridLines()
        showMajorYGridLines = true
        showMinorYGridLines = true
    end
    action HideAllYGridLines()
        showMajorYGridLines = false
        showMinorYGridLines = false
    end

    action ShowMajorGridLines()
        showMajorYGridLines = true
        showMajorXGridLines = true
    end
    action HideMajorGridLines()
        showMajorYGridLines = false
        showMajorXGridLines = false
    end

    action ShowMinorGridLines()
        showMinorYGridLines = true
        showMinorXGridLines = true
    end
    action HideMinorGridLines()
        showMinorYGridLines = false
        showMinorXGridLines = false
    end

    action ShowMinorYGridLines()
        showMinorYGridLines = true
    end
    action HideMinorYGridLines()
        showMinorYGridLines = false
    end

    action ShowMinorXGridLines()
        showMinorXGridLines = true
    end
    action HideMinorXGridLines()
        showMinorXGridLines = false
    end

    action ShowMajorYGridLines()
        showMajorYGridLines = true
    end
    action HideMajorYGridLines()
        showMajorYGridLines = false
    end

    action ShowMajorXGridLines()
        showMajorXGridLines = true
    end
    action HideMajorXGridLines()
        showMajorXGridLines = false
    end

    action IsShowingMajorXGridLines returns boolean
        return showMajorXGridLines
    end

    action IsShowingMajorYGridLines returns boolean
        return showMajorYGridLines
    end

    action IsShowingMinorXGridLines returns boolean
        return showMinorXGridLines
    end

    action IsShowingMinorYGridLines returns boolean
        return showMinorYGridLines
    end

    /*
        This action sets the Legend object
        Attribute: Parameter legend the legend to set
    */
    action SetLegend(Legend legend)
        me:legend = legend
    end
    /*
        This action returns the current legend, if one exists
        Attribute: Returns true if the legend is shown.
    */
    action GetLegend returns Legend
        return legend
    end
    /*
        This action states to turn on the legend. 
        Attribute: Parameter true if the legend should be shown.
    */
    action ShowLegend(boolean show)
        showLegend = show
    end
    /*
        This action states to turn on the legend. 
        Attribute: Returns true if the legend is shown.
    */
    action IsShowingLegend returns boolean
        return showLegend
    end

    /*
        Set the title for the legend of the Chart
    */
    action SetLegendTitle(text name)
        legend:SetTitleText(name)
    end

    /*
        Returns the title for the legend of the Chart.
    */
    action GetLegendTitle returns text
        return legend:GetTitleText()
    end

    /*
        Returns the title for the legend of the Chart.
    */
    action SetLegendLocation(text location)
        if IsShowingLegend()
            text newlocation = location:ToLowerCase()
            legend:SetLocation(newlocation)
        end
    end

    /*
        Returns an array of all the series sets 
    */
    action GetSeriesList returns Array<Series>
        return legend:GetSeriesList()
    end

    action AddSeries(Series series)
        legend:GetSeriesList():Add(series)
    end

    action SetSeriesList(Array <Series> series)
        legend:SetSeriesList(series)
    end

    action SetColorPaletteToCalm()
        options:SetPalette(options:CALM)
    end 

    action SetColorPaletteToExciting()
        options:SetPalette(options:EXCITING)
    end 

    action SetColorPaletteToPositive()
        options:SetPalette(options:POSITIVE)
    end 

    action SetColorPaletteToNegative()
        options:SetPalette(options:NEGATIVE)
    end 

    action SetColorPaletteToSerious()
        options:SetPalette(options:SERIOUS)
    end 

    action SetColorPaletteToPlayful()
        options:SetPalette(options:PLAYFUL)
    end 

    action SetColorPaletteToTrustworthy()
        options:SetPalette(options:TRUSTWORTHY)
    end 

    action SetColorPaletteToDisturbing()
        options:SetPalette(options:DISTURBING)
    end 

    action SetColorPaletteToColorgorical()
        options:SetPalette(options:COLORGORICAL)
    end 

    /*
        Created by Stefan van der Walt (https://github.com/stefanv) and Nathaniel Smith (https://github.com/njsmith)
        https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html
    */
    action SetColorPaletteToCoolScale() //Viridis
        Color colorA
        colorA:SetColor(252.0/255, 230.0/255, 30.0/255 ,1)
        Color colorB
        colorB:SetColor(31.0/255, 127.0/255, 122.0/255, 1)
        Color colorC
        colorC:SetColor(52.0/255, 0/255, 67.0/255, 1)
        options:SetPalette(colorA, colorB, colorC, legend:GetSeriesList():GetSize())
    end 

    action SetColorPaletteToWarmScale() //Inferno
        Color colorA
        colorA:SetColor(253.0/255, 255/255, 147.0/255, 1)
        Color colorB
        colorB:SetColor(168.0/255, 33.0/255, 68.0/255, 1)
        Color colorC
        colorC:SetColor(0/255, 0/255, 4.0/255 ,1)
        options:SetPalette(colorA, colorB, colorC, legend:GetSeriesList():GetSize())
    end 

    action SetColorPaletteToMagma() //Think of a name for this?
        Color colorA
        colorA:SetColor(252.0/255, 251.0/255, 173.0/255, 1)
        Color colorB
        colorB:SetColor(164.0/255, 31.0/255, 103.0/255, 1)
        Color colorC
        colorC:SetColor(0/255, 0/255, 4.0/255 ,1)
        options:SetPalette(colorA, colorB, colorC, legend:GetSeriesList():GetSize())
    end 

    action SetColorPalette(Array <Color> palette)
        options:SetPalette(palette)
    end

    action SetColorPalette(Color color)
        Color darkColor
        darkColor:SetColor(0,0,0,1)
        darkColor:LinearInterpolation(color, 0.15) // Not quite black
        Color lightColor
        lightColor:SetColor(1,1,1,1)
        lightColor:LinearInterpolation(color, 0.15) // Not quite white
        options:SetPalette(darkColor, color, lightColor, legend:GetSeriesList():GetSize())
    end

    action SetColorPalette(Color colorA, Color colorB)
        options:SetPalette(colorA, colorB, legend:GetSeriesList():GetSize())
    end

    action SetColorPalette(Color colorA, Color colorB, Color colorC)
        options:SetPalette(colorA, colorB, colorC, legend:GetSeriesList():GetSize())
    end

    action SetCurrentPaletteToGrayScale()
        options:SetPaletteToGrayScale()
    end

    action Resize
        if GetBackground() not= undefined
            GetBackground():SetSize(GetWidth(), GetHeight())
        end
 
        //This is where all the font sizes and axis padding will be set
        AdjustForXAxis()
        AdjustForYAxis()
        AdjustForLegend()

        if GetTitleLabel() not= undefined
            if not titleFontSizeOverride 
                GetTitleLabel():SetFontSize(cast(integer, ((GetHeight()+GetWidth())/2)*(titleAreaHeightPercent/2)))
            else
                integer fontsize = titlefontsize
                if fontsize = 0
                    fontsize = cast(integer, GetFontSize())
                end
                GetTitleLabel():SetFontSize(fontsize)
            end
        end

        chartArea:SetSize(GetWidth()*horizontalPanelWidthPercent, GetHeight()*verticalPanelHeightPercent)
        parent:Control:Resize()
    end

    action AdjustForXAxis()
        if IsShowingXAxis()
            horizontalPanel:SetSize(GetWidth()*horizontalPanelWidthPercent, GetHeight()*horizontalPanelHeightPercent)

            integer minimumSpace = 0
            integer tickWidth = horizontalPanel:GetTickWidth()
            integer tickHeight = horizontalPanel:GetTickHeight()

            integer titleautofontsize = cast(integer, ((GetHeight()+GetWidth())/2)*(0.05/2))

            if horizontalPanel:GetTitleLabel() not= undefined
                if not xTitleFontSizeOverride // This is the auto-sized X-Axis Label
                    horizontalPanel:GetTitleLabel():SetFontSize(cast(integer, titleautofontsize))
                else
                    integer fontsize = horizontalPanel:GetTitleFontSize()
                    if fontsize = 0
                        fontsize = cast(integer, GetFontSize()*GetXAxisFontSizeOffset())
                    end
                    horizontalPanel:GetTitleLabel():SetFontSize(fontsize)
                end

                number tickSpace = 3*tickHeight
                if horizontalPanel:ShowGroupBrackets()
                    tickSpace = 4*tickHeight + tickWidth
                end
                minimumSpace = minimumSpace + cast(integer, horizontalPanel:GetTitleLabel():GetHeight() + tickSpace)
            end

            if horizontalPanel:GetLabelCount() > 0
                integer labelautofontsize = cast(integer, (GetWidth()*horizontalPanelWidthPercent)/horizontalPanel:GetLabelCount())
                if labelautofontsize > cast(integer, titleautofontsize*0.75)
                    labelautofontsize = cast(integer, titleautofontsize*0.75)
                end

                if not xLabelFontSizeOverride
                    horizontalPanel:SetLabelFontSize(labelautofontsize)
                else
                    integer fontsize = horizontalPanel:GetLabelFontSize()
                    if fontsize = 0
                        fontsize = cast(integer, GetFontSize()*GetXAxisFontSizeOffset())
                    end
                    horizontalPanel:SetLabelFontSize(fontsize)
                end
                number widthBefore = horizontalPanel:GetLongestLabel():GetWidth()
                horizontalPanel:GetLongestLabel():SetFontSize(horizontalPanel:GetLabelFontSize())
                number widthAfter = horizontalPanel:GetLongestLabel():GetWidth()
                number percentIncrease = (widthAfter/widthBefore)
                horizontalPanel:SetSumOfLabelWidths(horizontalPanel:GetSumOfLabelWidths()*percentIncrease)

                if xLabelsRotation not= 0
                    minimumSpace = minimumSpace + cast(integer, horizontalPanel:GetLongestLabel():GetWidth() + 1.5*tickWidth)
                else
                    if (horizontalPanel:GetSumOfLabelWidths() + horizontalPanel:GetLabelCount()*5) > horizontalPanel:GetWidth()
                        minimumSpace = minimumSpace + cast(integer, horizontalPanel:GetLongestLabel():GetWidth() + 1.5*tickWidth)
                        xLabelsRotation = 270
                    else
                        minimumSpace = minimumSpace + cast(integer, horizontalPanel:GetLongestLabel():GetHeight() + 1.5*tickWidth)
                    end
                end
            end
            horizontalPanelHeightPercent = minimumSpace / GetHeight()
        else
            horizontalPanelHeightPercent = 0.05
        end
        horizontalPanel:SetSize(GetWidth()*horizontalPanelWidthPercent, GetHeight()*horizontalPanelHeightPercent)
        verticalPanelHeightPercent = 1-horizontalPanelHeightPercent-titleAreaHeightPercent
        legendPanelHeightPercent = verticalPanelHeightPercent
    end

    action AdjustForYAxis()
        if IsShowingYAxis()
            verticalPanel:SetSize(GetWidth()*verticalPanelWidthPercent, GetHeight()*verticalPanelHeightPercent)

            integer minimumSpace = 0
            integer tickWidth = verticalPanel:GetTickWidth()
            integer tickHeight = verticalPanel:GetTickHeight()

            integer titleautofontsize = cast(integer, ((GetHeight()+GetWidth())/2)*(0.05/2))

            if verticalPanel:GetTitleLabel() not= undefined
                if not yTitleFontSizeOverride // This is the auto-sized Y-Axis Label
                    verticalPanel:GetTitleLabel():SetFontSize(cast(integer, titleautofontsize))
                else
                    integer fontsize = verticalPanel:GetTitleFontSize()
                    if fontsize = 0
                        fontsize = cast(integer, GetFontSize()*GetYAxisFontSizeOffset())
                    end
                    verticalPanel:GetTitleLabel():SetFontSize(fontsize)
                end

                number tickSpace = 3*tickWidth
                if verticalPanel:ShowGroupBrackets()
                    tickSpace = 4*tickWidth + tickHeight
                end
                minimumSpace = minimumSpace + cast(integer, verticalPanel:GetTitleLabel():GetHeight() + tickSpace)
            end

            if verticalPanel:GetLabelCount() > 0
                integer labelautofontsize = cast(integer, (GetHeight()*(1-horizontalPanelHeightPercent-titleAreaHeightPercent))/verticalPanel:GetLabelCount())
                if labelautofontsize > cast(integer, titleautofontsize*0.75)
                    labelautofontsize = cast(integer, titleautofontsize*0.75)
                end

                if not yLabelFontSizeOverride
                    verticalPanel:SetLabelFontSize(labelautofontsize)
                else
                    integer fontsize = verticalPanel:GetLabelFontSize()
                    if fontsize = 0
                        fontsize = cast(integer, GetFontSize()*GetYAxisFontSizeOffset())
                    end
                    verticalPanel:SetLabelFontSize(fontsize)
                end
                verticalPanel:GetLongestLabel():SetFontSize(verticalPanel:GetLabelFontSize())
                verticalPanel:SetSumOfLabelHeights((verticalPanel:GetLongestLabel():GetHeight()*verticalPanel:GetLabelCount()))

                minimumSpace = minimumSpace + cast(integer, verticalPanel:GetLongestLabel():GetWidth() + 1.5*tickWidth)
            end

            verticalPanelWidthPercent = minimumSpace / GetWidth()
        else
            verticalPanelWidthPercent = 0.05
        end
        verticalPanel:SetSize(GetWidth()*verticalPanelWidthPercent, GetHeight()*verticalPanelHeightPercent)
    end

    action AdjustForLegend()
        if IsShowingLegend()
            legend:SetSize(GetWidth()*legendPanelWidthPercent, GetHeight()*legendPanelHeightPercent)
            integer minimumSpace = 0
            integer titleautofontsize = cast(integer, ((GetHeight()+GetWidth())/2)*(0.05/3))

            if legend:DisplayOnLeft() or legend:DisplayOnRight()
                number newWidestLabel = 0.0
                if legend:GetTitleLabel() not= undefined
                    if not legendTitleFontSizeOverride // This is the auto-sized Y-Axis Label
                        legend:GetTitleLabel():SetFontSize(cast(integer, titleautofontsize))
                    else
                        integer fontsize = legend:GetTitleFontSize()
                        if fontsize = 0
                            fontsize = cast(integer, GetFontSize()*GetYAxisFontSizeOffset())
                        end
                        legend:GetTitleLabel():SetFontSize(fontsize)
                        if legend:GetTitleLabel():GetWidth() > newWidestLabel
                            newWidestLabel = legend:GetTitleLabel():GetWidth()
                        end
                    end
                end
    
                number labelHeight = 0.0
                number labelWidth = 0.0
                number newWidthSum = 0.0
                number newHeightSum = 0.0
                if not legend:GetSeriesList():IsEmpty()
                    integer labelautofontsize = cast(integer, (GetHeight()*(1-horizontalPanelHeightPercent-titleAreaHeightPercent))/legend:GetSeriesList():GetSize())
                    if labelautofontsize > cast(integer, titleautofontsize*0.75)
                        labelautofontsize = cast(integer, titleautofontsize*0.75)
                    end
    
                    integer i = 0
                    repeat while i < legend:GetSeriesList():GetSize()
                        if legend:GetSeriesList():Get(i):GetLabel() not= undefined
                            if not legendLabelFontSizeOverride
                                legend:GetSeriesList():Get(i):GetLabel():SetFontSize(labelautofontsize)
                            else
                                integer fontsize = legend:GetLabelFontSize()
                                if fontsize = 0
                                    fontsize = cast(integer, GetFontSize()*GetYAxisFontSizeOffset())
                                end
                                legend:GetSeriesList():Get(i):GetLabel():SetFontSize(fontsize)
                            end
                            labelHeight = legend:GetSeriesList():Get(i):GetLabel():GetHeight()
                            labelWidth = legend:GetSeriesList():Get(i):GetLabel():GetWidth()
                            if labelWidth > newWidestLabel
                                newWidestLabel = labelWidth
                            end
                            newHeightSum = newHeightSum + labelHeight
                            newWidthSum = newWidthSum + labelWidth
                        end
                        i = i + 1
                    end
                    legend:SetSumOfLabelHeights(newHeightSum)
                    legend:SetSumOfLabelWidths(newWidthSum)
                    legend:SetWidestLabel(newWidestLabel)
    
                    minimumSpace = minimumSpace + cast(integer, legend:GetWidestLabel() + labelHeight*3)
                end
    
                legendPanelWidthPercent = minimumSpace / GetWidth()
                number remainingChartArea = math:Round(1 - legendPanelWidthPercent - verticalPanelWidthPercent - 0.025, 2) // 0.025 for margin padding
                SetChartAreaWidthPercent(remainingChartArea)
                horizontalPanel:SetWidth(remainingChartArea*GetWidth())

            else //legend:DisplayOnTop() or legend:DisplayOnBottom()
                number newWidthSum = 0.0
                number tallestLabel = 0.0
                if legend:GetTitleLabel() not= undefined
                    if not legendTitleFontSizeOverride // This is the auto-sized Y-Axis Label
                        legend:GetTitleLabel():SetFontSize(cast(integer, titleautofontsize))
                    else
                        integer fontsize = legend:GetTitleFontSize()
                        if fontsize = 0
                            fontsize = cast(integer, GetFontSize()*GetYAxisFontSizeOffset())
                        end
                        legend:GetTitleLabel():SetFontSize(fontsize)
                        newWidthSum = newWidthSum + legend:GetTitleLabel():GetWidth()

                        minimumSpace = minimumSpace + cast(integer, legend:GetTitleLabel():GetHeight())
                    end
                end
    
                number labelHeight = 0.0
                number labelWidth = 0.0
                number newHeightSum = 0.0
                number newWidestLabel = 0.0
                if not legend:GetSeriesList():IsEmpty()
                    integer labelautofontsize = cast(integer, (GetHeight()*(1-verticalPanelHeightPercent-0.05))/legend:GetSeriesList():GetSize())
                    if labelautofontsize > cast(integer, titleautofontsize*0.75)
                        labelautofontsize = cast(integer, titleautofontsize*0.75)
                    end
    
                    integer i = 0
                    repeat while i < legend:GetSeriesList():GetSize()
                        if legend:GetSeriesList():Get(i):GetLabel() not= undefined
                            if not legendLabelFontSizeOverride
                                legend:GetSeriesList():Get(i):GetLabel():SetFontSize(labelautofontsize)
                            else
                                integer fontsize = legend:GetLabelFontSize()
                                if fontsize = 0
                                    fontsize = cast(integer, GetFontSize()*GetYAxisFontSizeOffset())
                                end
                                legend:GetSeriesList():Get(i):GetLabel():SetFontSize(fontsize)
                            end
                            labelHeight = legend:GetSeriesList():Get(i):GetLabel():GetHeight()
                            labelWidth = legend:GetSeriesList():Get(i):GetLabel():GetWidth()
                            if labelWidth > newWidestLabel
                                newWidestLabel = labelWidth
                            end
                            if labelHeight > tallestLabel
                                tallestLabel = labelHeight
                            end
                            newHeightSum = newHeightSum + labelHeight
                            newWidthSum = newWidthSum + labelWidth
                        end
                        i = i + 1
                    end
                    legend:SetSumOfLabelHeights(newHeightSum)
                    legend:SetSumOfLabelWidths(newWidthSum)
                    legend:SetWidestLabel(newWidestLabel)
    

                    minimumSpace = minimumSpace + cast(integer, tallestLabel*2)
                end
    
                legendPanelHeightPercent = minimumSpace / GetHeight()
                number remainingChartAreaHeight = math:Round(1 - legendPanelHeightPercent - horizontalPanelHeightPercent - titleAreaHeightPercent, 2) // 0.10 for title padding
                SetChartAreaHeightPercent(remainingChartAreaHeight)
                verticalPanel:SetHeight(remainingChartAreaHeight*GetHeight())

                number remainingChartAreaWidth = math:Round(1 - verticalPanelWidthPercent - 0.05, 2) // 0.05 for margin padding
                SetChartAreaWidthPercent(remainingChartAreaWidth)
                horizontalPanel:SetWidth(remainingChartAreaWidth*GetWidth())
                legendPanelWidthPercent = horizontalPanelWidthPercent
            end
        else
            legendPanelWidthPercent = 0.05
            number remainingChartArea = math:Round(1 - legendPanelWidthPercent - verticalPanelWidthPercent, 2)
            SetChartAreaWidthPercent(remainingChartArea)
            horizontalPanel:SetWidth(remainingChartArea*GetWidth())
        end    
        legend:SetSize(GetWidth()*legendPanelWidthPercent, GetHeight()*legendPanelHeightPercent)    
    end

    action SetFontSize(integer size)
        xLabelFontSizeOverride = true
        xTitleFontSizeOverride = true
        yLabelFontSizeOverride = true
        yTitleFontSizeOverride = true
        titleFontSizeOverride = true
        legendLabelFontSizeOverride = true
        legendTitleFontSizeOverride = true
        parent:Control:SetFontSize(size)
    end

    action SetTitleFontSize(integer size)
        titleFontSizeOverride = true
        titlefontsize = size
    end

    action SetXTitleFontSize(integer size)
        xTitleFontSizeOverride = true
        horizontalPanel:SetTitleFontSize(size)
    end

    action SetXLabelFontSize(integer size)
        xLabelFontSizeOverride = true
        horizontalPanel:SetLabelFontSize(size)
    end

    action SetYTitleFontSize(integer size)
        yTitleFontSizeOverride = true
        verticalPanel:SetTitleFontSize(size)
    end

    action SetYLabelFontSize(integer size)
        yLabelFontSizeOverride = true
        verticalPanel:SetLabelFontSize(size)
    end

    action SetLegendTitleFontSize(integer size)
        legendTitleFontSizeOverride = true
        legend:SetTitleFontSize(size)
    end

    action SetLegendLabelFontSize(integer size)
        legendLabelFontSizeOverride = true
        legend:SetLabelFontSize(size)
    end

    action SetHightlightColor(Color color)
        options:SetSelectionColor(color)
    end

    /* 
        Unlike many kinds of user interface controls, there is no universal way of interacting with a chart and, as such, this 
        may be defined by any chart to be custom. As such, charts must be able to take messages suggesting an item in the chart
        has either lost or gained the focus. Broadly speaking, this is done automatically and while charts need to implement
        this action, they do not need to call this action directly.

        Attribute: Parameter ci the ChartItem representing the structure for this particular kind of chart. 
    */
    blueprint action LostSelection(ChartItem item)

    /* 
        Unlike many kinds of user interface controls, there is no universal way of interacting with a chart and, as such, this 
        may be defined by any chart to be custom. As such, charts must be able to take messages suggesting an item in the chart
        has either lost or gained the focus. Broadly speaking, this is done automatically and while charts need to implement
        this action, they do not need to call this action directly.

        Attribute: Parameter ci the ChartItem representing the structure for this particular kind of chart. 
    */
    blueprint action GainedSelection(ChartItem item)

    /*
        This action gets the ChartSelection, which contains the ChartItem that is currently selected. 
        The reason why we use this indirection, instead of getting the items directly, is because this ensures
        the operating system is informed whenever selections are changed. The item can be obtained from this selection
        by calling GetChartItem on the selection. The selection is intended to never be undefined, even if nothing is selected.

        Attribute: Returns the current selection
    */
    action GetSelection returns ChartSelection
        return selection
    end

    /*
        This action sets the ChartItem that is currently selected. 
        This call has the same effect as calling GetSelection, then Set(ChartItem) on the selection.

        Attribute: Parameter item the current item to be selected
    */
    action Select(ChartItem item)
        selection:Set(item)
    end

    /*
        This action tells the chart to select the next item in its navigation path.
    */
    action SelectNext
        ChartSelection selection = GetSelection()
        ChartItem selected = selection:GetChartItem()
        if selected = undefined
            return now
        end

        ChartItem next = selected:GetNext()
        if next = undefined
            return now
        end
        selection:Set(next)
    end
    
    /*
        This action tells the chart to select the previous item in its navigation path.
    */
    action SelectPrevious
        ChartSelection selection = GetSelection()
        ChartItem selected = selection:GetChartItem()
        if selected = undefined
            return now
        end

        ChartItem next = selected:GetPrevious()
        if next = undefined
            return now
        end

        selection:Set(next)
    end

    /*
        This action tells the chart to select a child in its list, if it has one.
    */
    action SelectChild
        ChartSelection selection = GetSelection()
        ChartItem selected = selection:GetChartItem()
        if selected = undefined
            return now
        end

        ChartItem next = selected:GetChild()
        if next = undefined
            return now
        end

        selection:Set(next)
    end

    /*
        This action tells the chart to select the parent of the current item.
    */
    action SelectParent
        ChartSelection selection = GetSelection()
        ChartItem selected = selection:GetChartItem()
        if selected = undefined
            return now
        end

        ChartItem next = selected:GetParent()
        if next = undefined
            return now
        end

        selection:Set(next)
    end
    /*
        This action tells the system to update all of its graphics because its structure has changed. This might 
        be true if the charts are being used to update a live data source.

        Attribute: Parameter update whether or not an update is required
    */
    action SetNeedsUpdate(boolean update)
        me:treeNeedsUpdate = update
    end
    
    /*
        This action indicates whether the system needs its graphics updated.

        Attribute: Returns whether or not an update is required
    */
    action NeedsTreeUpdate returns boolean
        return treeNeedsUpdate
    end

    /*
        This action overrides the default Update action. If the tree needs to be updated, the tree is regenerated.

        Attribute: Parameter seconds the number of seconds since the last update.
    */
    action Update(number seconds)
        if treeNeedsUpdate
            GenerateInfoTree()
            treeNeedsUpdate = false
        end
    end

    action GetBackground returns Drawable
        return backgroundD
    end

    action SetBackground(Drawable backgroundD)
        me:backgroundD = backgroundD
    end

    /* 
        This action converts this chart to a text value that contains information 
        for a scalable vector graphics file. This is useful for saving charts to disk.
        Each sub-class of chart must implement this action separately.

        Attribute: Returns the Scalable Vector Graphics (SVG) text.
    */
    action ConvertToScalableVectorGraphics returns text
        return ""
    end

    /*
        This action saves this chart to disk at the position of the current file. To conduct the 
        conversion, the file extension is used. Only Scalable Vector Graphics (SVG) is currently 
        supported.

        Attribute: Parameter file the location of where to save the file.
    */
    action Save(File file)
        if file:GetFileExtension() = "svg"
            text value = ConvertToScalableVectorGraphics()
            file:Write(value)
        end
    end

    /*
        This is a helper action for saving that saves at the path relative to the current working directory.

        Attribute: Parameter path the path relative to the working directory.
    */
    action Save(text path)
        File file
        file:SetPath(path)
        Save(file)
    end

    /*  This action creates a default Game object for displaying charts and sets this chart
        as the sole display. It is useful for interacting with charts without creating
        a complex game setup.
    */
    action Display
        ChartDisplay game
        game:SetScreenSize(2000,1000) //Default size.
        game:SetChart(me)
        game:StartGame()
    end

    /*  This action creates a default Game object for displaying charts and sets this chart
        as the sole display. It is useful for interacting with charts without creating
        a complex game setup.
    */
    action Display(integer width, integer height)
        ChartDisplay game
        game:SetScreenSize(width,height)
        game:SetChart(me)
        game:StartGame()
    end
end