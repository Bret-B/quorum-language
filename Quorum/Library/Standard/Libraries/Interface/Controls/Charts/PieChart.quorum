package Libraries.Interface.Controls.Charts

use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Layouts.PieChartLayout
use Libraries.Interface.Selections.ChartSelection
use Libraries.Interface.Views.LabelBoxView
use Libraries.System.File
use Libraries.Containers.HashTable
use Libraries.Interface.Controls.Charts.Graphics.PieBox
use Libraries.Interface.Controls.Charts.Graphics.PieSlice

/*
    The PieChart class is Chart object that inherits from Control and like other
    UI elements it is added to the Game class. 
    The Pie Chart is used to show catergorical data.
    The title label. Any number of slices can be added.

    Attribute: Author Hannah Williams

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Charts.PieChartCreator
    use Libraries.Interface.Controls.Charts.PieChart
    use Libraries.Game.Game
    
    class Main is Game
        action Main
            StartGame()
        end
    
        action CreateGame
            DataFrame frame
            frame:Load("Data/Data.csv")
            PieChartCreator creator
            creator:AddColumn(2)
        
            PieChart chart = cast(PieChart,frame:CreateChart(creator))
            Add(chart)
        end
    end
*/

class PieChart is Chart
    Array<PieBox> pieBoxes // used when chart is separated into sub charts
    number donutHolePercent = 0
    boolean showPercentAnnotation = true // When annotations are showing, the slices will display a %
    boolean showValueAnnotation = false // When annotations are showing, the slices will display value
    boolean showNameAnnotation = false // When annotations are showing, the slices will display name, can be used in combination with percent or value

    Color highlightColor = undefined
    ColorGroup previousColorGroup = undefined
    Color previousColor = undefined
    integer previousBorder = 0

    ChartOptions options
    Math math

    // Terminology for navigation instructions
    private text groupText = "pie"
    private text groupsText = "pies"
    private text chartItemText = "slice"
    private text chartItemsText = "slices"

    on create
        CheckPlatformInstructions()
        PieChartLayout layout
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:MAINTAIN_ASPECT_RATIO)
        properties:SetVerticalLayoutMode(properties:STANDARD)
        Font font = GetDefaultFont()
        properties:SetFont(font)
        properties:SetFontSize(GetDefaultFontSize())

        properties:SetBorderThickness(2)
        SetName("Pie Chart")

        SetInputGroup("Chart")
        SetFocusable(true)
        SetAccessibilityCode(parent:Item:ITEM)

        SetDefaultOrientationToVertical()
        ShowSubChartAreaBorders(false)
        SeparationCapable(true)
        OrientationCapable(false)
        ShowAnnotations(true) // Default shows % annotations
        ShowXAxis(false)
        ShowYAxis(false)
        HideAllGridLines()
        GetVerticalPanel():BlockPaddingOffset(true)
        GetHorizontalPanel():BlockPaddingOffset(true)
    end

    /*
        LoadGraphics
        This action is used to load the graphical components of the Control. This is
        handled automatically by the Game engine as needed, and most users shouldn't
        need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        DisposeDrawables()
        if properties = undefined
            return now
        end
        parent:Chart:LoadGraphics(properties)

        LoadChartAreaItems()
    end

    action LoadChartAreaItems()
        if IsSeparated()
            integer k = 0
            repeat while k < GetNumberOfChartAreas()
                integer j = 0 
                repeat while j < pieBoxes:GetSize()
                    if pieBoxes:Get(j):GetName() = GetSubChartAreas():Get(k):GetName()
                        GetSubChartAreas():Get(k):Add(pieBoxes:Get(j))
                        pieBoxes:Get(j):SetChartArea(GetSubChartAreas():Get(k))
                        integer i = 0
                        repeat while i < pieBoxes:Get(j):GetSize()
                            PieSlice slice = pieBoxes:Get(j):Get(i)
                            slice:SetFocusable(true)
                            slice:SetAccessibilityCode(parent:Item:ITEM)
                            slice:SetNextFocus(GetNextFocus())
                            slice:SetPreviousFocus(GetPreviousFocus())
                            number value = slice:GetValue()
                            number percent = math:Round((slice:GetValue()/pieBoxes:Get(j):GetValue()) * 100, 2)

                            text valueText = ""+value
                            if CheckIfInteger(value)
                                valueText = ""+cast(integer, value)
                            end
                            text percentText = ""+percent
                            if CheckIfInteger(percent)
                                percentText = ""+cast(integer, percent)
                            end
                            text description = " "+percentText+" percent , value of "+valueText+","
                            slice:SetDescription(description)
                            GetSubChartAreas():Get(k):AddChartAreaItem(slice)

                            if slice:ShowAnnotation() or ShowAnnotations() //and slice:GetSeries() not= undefined // We don't want to annotate missing values
                                ChartLabel sliceLabel
                                
                                text nameText = ""
                                if showNameAnnotation
                                    nameText = slice:GetName()
                                    if showPercentAnnotation or showValueAnnotation
                                        nameText = nameText + ": "
                                    else
                                        sliceLabel:SetText(nameText)
                                    end
                                end
                                if showPercentAnnotation
                                    sliceLabel:SetText(nameText + percentText+"%")
                                elseif showValueAnnotation
                                    sliceLabel:SetText(nameText + valueText)
                                elseif not showNameAnnotation
                                    sliceLabel:SetText("custom")
                                end

                                slice:SetAnnotation(sliceLabel)
                                GetSubChartAreas():Get(k):Add(sliceLabel)
                            end
                            i = i + 1
                        end
                    end
                    j = j + 1
                end
                k = k + 1
            end
        else
            if pieBoxes:GetSize() > 1
                MergePieBoxes()
                GetLegend():ApplySeriesColor()
            end
            GetChartArea():Add(pieBoxes:Get(0))
            pieBoxes:Get(0):SetChartArea(GetChartArea())
            integer i = 0
            repeat while i < pieBoxes:Get(0):GetSize()
                PieSlice slice = pieBoxes:Get(0):Get(i)
                slice:SetFocusable(true)
                slice:SetAccessibilityCode(parent:Item:ITEM)
                slice:SetNextFocus(GetNextFocus())
                slice:SetPreviousFocus(GetPreviousFocus())
                number value = slice:GetValue()
                number percent = math:Round((slice:GetValue()/pieBoxes:Get(0):GetValue()) * 100, 2)

                text valueText = ""+value
                if CheckIfInteger(value)
                    valueText = ""+cast(integer, value)
                end
                text percentText = ""+percent
                if CheckIfInteger(percent)
                    percentText = ""+cast(integer, percent)
                end
                text description = " "+percentText+" percent , value of "+valueText+","
                slice:SetDescription(description)
                
                if slice:ShowAnnotation() or ShowAnnotations()
                    ChartLabel sliceLabel
                    text nameText = ""
                    if showNameAnnotation
                        nameText = slice:GetName()
                        if showPercentAnnotation or showValueAnnotation
                            nameText = nameText + ": "
                        else
                            sliceLabel:SetText(nameText)
                        end
                    end
                    if showPercentAnnotation
                        sliceLabel:SetText(nameText + percentText+"%")
                    elseif showValueAnnotation
                        sliceLabel:SetText(nameText + valueText)
                    elseif not showNameAnnotation
                        sliceLabel:SetText("custom")
                    end
                    slice:SetAnnotation(sliceLabel)
                    GetChartArea():Add(sliceLabel)
                end
                i = i + 1
            end
        end
    end

    private action CheckIfInteger(number value) returns boolean
        return (cast(integer, value) = value)
    end

    action ShowValueAnnotations(boolean show)
        if show
            showPercentAnnotation = false
        end
        showValueAnnotation = show
        ShowAnnotations(show)
    end

    action ShowPercentAnnotations(boolean show)
        if show
            showValueAnnotation = false
        end
        showPercentAnnotation = show
        ShowAnnotations(show)
    end

    action ShowNameAnnotations(boolean show)
        showNameAnnotation = show
        ShowAnnotations(show)
    end

    /*
        DisposeDrawables
        
        Empties drawables from the chart area.
    */
    action DisposeDrawables()
        parent:Chart:DisposeDrawables()

        GetChartArea():Empty()
    end

    /*
        LostSelection is a supplemental action to the parent Chart's LostSelection.
        Any items specific to only this type of chart or if an item needs different highlighting
        instructions than that of the parent class, it will have their LostSelection defined here.

        Unlike many kinds of user interface controls, there is no universal way of interacting with a chart and, as such, this 
        may be defined by any chart to be custom. As such, charts must be able to take messages suggesting an item in the chart
        has either lost or gained the focus. Broadly speaking, this is done automatically and while charts need to implement
        this action, they do not need to call this action directly.

        Attribute: Parameter item the ChartItem representing the structure for this particular kind of chart. 
    */
    action LostSelection(ChartItem item)
        if item = undefined
            return now
        end
        Item target = item

        if target not= undefined
            if target is PieSlice
                PieSlice slice = cast(PieSlice, target)
                slice:SetColor(previousColor)
            end
            parent:Chart:LostSelection(item)
        end
    end

    /* 
        OnSelectionChange is a supplemental action to the parent Chart's OnSelectionChange.
        Any items specific to only this type of chart or if an item needs different highlighting
        instructions than that of the parent class, it will have their GainedSelection defined here.

        Unlike many kinds of user interface controls, there is no universal way of interacting with a chart and, as such, this 
        may be defined by any chart to be custom. As such, charts must be able to take messages suggesting an item in the chart
        has either lost or gained the focus. Broadly speaking, this is done automatically and while charts need to implement
        this action, they do not need to call this action directly.

        Attribute: Parameter item the ChartItem representing the structure for this particular kind of chart. 
    */
    action OnSelectionChange(ChartItem item)
        if item = undefined
            return now
        end
        Item target = item
        if target not= undefined
            target:Focus()
            if target is PieSlice
                PieSlice slice = cast(PieSlice, target)
                previousColor = slice:GetColor()
                slice:SetColor(GetSelectionColor())
            end
            parent:Chart:OnSelectionChange(item)        
        end
    end

    action AddPieBox(PieBox box)
        pieBoxes:Add(box)
    end

    action GetPieBoxes returns Array<PieBox>
        return pieBoxes
    end

    private action MergePieBoxes
        PieBox newBox
        HashTable<text, PieSlice> sliceFactor
        integer i = 0 
        repeat while i < pieBoxes:GetSize()
            integer j = 0
            repeat while j < pieBoxes:Get(i):GetSize()
                text name = pieBoxes:Get(i):Get(j):GetName()
                number value = pieBoxes:Get(i):Get(j):GetValue()
                Series series = pieBoxes:Get(i):Get(j):GetSeries()
                if not sliceFactor:HasKey(name)
                    PieSlice slice
                    slice:SetName(name)
                    slice:SetValue(value)
                    slice:SetSeries(series)
                    series:AddItem(slice)
                    sliceFactor:Add(name, slice)
                else
                    number oldValue = sliceFactor:GetValue(name):GetValue()
                    sliceFactor:GetValue(name):SetValue(oldValue + value)
                end
                j = j + 1
            end
            i = i + 1
        end

        i = 0 
        repeat while i < GetSeriesList():GetSize()
            if sliceFactor:HasKey(GetSeriesList():Get(i):GetName())
                newBox:AddSlice(sliceFactor:GetValue(GetSeriesList():Get(i):GetName()))
            end
            i = i + 1
        end

        pieBoxes:Empty()
        pieBoxes:Add(newBox)
    end

    // Makes pies based on the factors which are the entries in the legend.
    // Then we need to replace the legend entries with the new list
    private action MakeSeriesPieBoxes
        if pieBoxes:GetSize() = 1 
            PieBox original = pieBoxes:Get(0)
            Array<PieBox> newBoxes 
            Array<PieSlice> slices = original:GetSlices()
    
            if GetColumnList() not= undefined
                integer i = 0 
                repeat while i < GetColumnList():GetSize()
                    integer j = 0 
                    repeat while j < slices:GetSize()
                        if slices:Get(j):GetName() = GetColumnList():Get(i)
                            PieBox newBox
                            newBox:SetName(GetColumnList():Get(i))
                            newBox:AddSlice(slices:Get(j))
        
                            PieSlice otherSlice
                            otherSlice:SetValue(original:GetValue()-slices:Get(j):GetValue())
                            newBox:AddSlice(otherSlice)
        
                            newBoxes:Add(newBox)
                        end
                        j = j + 1
                    end
                    i = i + 1
                end
            end
    
            pieBoxes:Empty()
            pieBoxes = newBoxes
        else
            HashTable<text, PieBox> boxFactor
            HashTable<text, Series> seriesFactor
            HashTable<text, PieSlice> sliceFactor
    
            Array<text> newSeriesNames
            integer i = 0 
            repeat while i < GetFactorList():GetSize()
                Series series
                text name = GetFactorList():Get(i)
                series:SetName(name)
                newSeriesNames:Add(name)
                seriesFactor:Add(name, series)
                i = i + 1
            end
    
            Array<text> columnList
            if GetHorizontalPanel():GetTextLabels() not= undefined
                columnList = GetHorizontalPanel():GetTextLabels()
            end

            Array<text> newBoxNames
            i = 0 
            repeat while i < columnList:GetSize()
                PieBox box
                text name = columnList:Get(i)
                box:SetName(name)
                newBoxNames:Add(name)
                boxFactor:Add(name, box)
                i = i + 1
            end
            SetFactorList(newBoxNames)
    
            i = 0 
            repeat while i < pieBoxes:GetSize()
                integer j = 0
                repeat while j < pieBoxes:Get(i):GetSize()
                    text seriesName = pieBoxes:Get(i):Get(j):GetSeries():GetName()
                    text boxName = pieBoxes:Get(i):Get(j):GetGroup():GetName()
                    text sliceName = boxName+" "+seriesName
                    number value = pieBoxes:Get(i):Get(j):GetValue()
                    if not sliceFactor:HasKey(sliceName)
                        PieSlice slice
                        slice:SetName(boxName)
                        slice:SetValue(value)
                        sliceFactor:Add(sliceName, slice)
                    else
                        number oldValue = sliceFactor:GetValue(sliceName):GetValue()
                        sliceFactor:GetValue(sliceName):SetValue(oldValue + value)
                    end
                    j = j + 1
                end
                i = i + 1
            end

            i = 0
            repeat while i < newBoxNames:GetSize()
                j = 0
                repeat while j < newSeriesNames:GetSize()  
                    text name = newBoxNames:Get(i)+" "+newSeriesNames:Get(j)
                    if sliceFactor:HasKey(name)
                        if boxFactor:HasKey(newBoxNames:Get(i))
                            boxFactor:GetValue(newBoxNames:Get(i)):AddSlice(sliceFactor:GetValue(name))
                        end   
                        if seriesFactor:HasKey(newSeriesNames:Get(j))
                            seriesFactor:GetValue(newSeriesNames:Get(j)):AddItem(sliceFactor:GetValue(name))
                        end
                    end
                    j = j + 1
                end 
                i = i + 1
            end  
    
            pieBoxes:Empty()
            // Add the groups
            i = 0
            repeat while i < newBoxNames:GetSize()
                pieBoxes:Add(boxFactor:GetValue(newBoxNames:Get(i)))
                i = i + 1
            end

            // Add the series
            Array <Series> seriesList
            i = 0
            repeat while i < newSeriesNames:GetSize()
                seriesList:Add(seriesFactor:GetValue(newSeriesNames:Get(i)))
                i = i + 1
            end
            GetLegend():SetSeriesList(seriesList)
        end
    end


    private action MakeFactorPieBoxes
        if pieBoxes:GetSize() = 1
            PieBox original = pieBoxes:Get(0)
            Array<PieBox> newBoxes 
            Array<PieSlice> slices = original:GetSlices()
    
            integer i = 0 
            repeat while i < GetFactorList():GetSize()
                integer j = 0 
                repeat while j < slices:GetSize()
                    if slices:Get(j):GetName() = GetFactorList():Get(i)
                        PieBox newBox
                        newBox:SetName(GetFactorList():Get(i))
                        newBox:AddSlice(slices:Get(j))
    
                        PieSlice otherSlice
                        otherSlice:SetValue(original:GetValue()-slices:Get(j):GetValue())
                        newBox:AddSlice(otherSlice)
    
                        newBoxes:Add(newBox)
                    end
                    j = j + 1
                end
                i = i + 1
            end
    
            pieBoxes:Empty()
            pieBoxes = newBoxes

        elseif pieBoxes:GetSize() > 1
            HashTable<text, PieBox> boxFactor
            HashTable<text, Series> seriesFactor
            HashTable<text, PieSlice> sliceFactor

            Array<text> newSeriesNames
            if GetHorizontalPanel():GetTextLabels() not= undefined
                newSeriesNames = GetHorizontalPanel():GetTextLabels()
            end

            i = 0 
            repeat while i < newSeriesNames:GetSize()
                Series series
                text name = newSeriesNames:Get(i)
                series:SetName(name)
                seriesFactor:Add(name, series)
                i = i + 1
            end
    
            Array<text> newBoxNames
            i = 0 
            repeat while i < GetFactorList():GetSize()
                PieBox box
                text name = GetFactorList():Get(i)
                box:SetName(name)
                newBoxNames:Add(name)
                boxFactor:Add(name, box)
                i = i + 1
            end
    
            i = 0 
            repeat while i < pieBoxes:GetSize()
                integer j = 0
                repeat while j < pieBoxes:Get(i):GetSize()
                    text seriesName = pieBoxes:Get(i):Get(j):GetSeries():GetName()
                    text boxName = pieBoxes:Get(i):Get(j):GetGroup():GetName()
                    text sliceName = seriesName+" "+boxName
                    number value = pieBoxes:Get(i):Get(j):GetValue()
                    if not sliceFactor:HasKey(sliceName)
                        PieSlice slice
                        slice:SetName(boxName)
                        slice:SetValue(value)
                        sliceFactor:Add(sliceName, slice)
                    else
                        number oldValue = sliceFactor:GetValue(sliceName):GetValue()
                        sliceFactor:GetValue(sliceName):SetValue(oldValue + value)
                    end
                    j = j + 1
                end
                i = i + 1
            end
    
            i = 0
            repeat while i < newBoxNames:GetSize()
                j = 0
                repeat while j < newSeriesNames:GetSize()  
                    text name = newBoxNames:Get(i)+" "+newSeriesNames:Get(j)
                    if sliceFactor:HasKey(name)
                        if boxFactor:HasKey(newBoxNames:Get(i))
                            boxFactor:GetValue(newBoxNames:Get(i)):AddSlice(sliceFactor:GetValue(name))
                        end   
                        if seriesFactor:HasKey(newSeriesNames:Get(j))
                            seriesFactor:GetValue(newSeriesNames:Get(j)):AddItem(sliceFactor:GetValue(name))
                        end
                    end
                    j = j + 1
                end 
                i = i + 1
            end  
    
            pieBoxes:Empty()
            // Add the groups
            i = 0
            repeat while i < newBoxNames:GetSize()
                pieBoxes:Add(boxFactor:GetValue(newBoxNames:Get(i)))
                i = i + 1
            end

            // Add the series
            Array <Series> seriesList
            i = 0
            repeat while i < newSeriesNames:GetSize()
                seriesList:Add(seriesFactor:GetValue(newSeriesNames:Get(i)))
                i = i + 1
            end
            GetLegend():SetSeriesList(seriesList) 
        end 
    end

    /*
    Supplemental actions to Chart class's SeparateByFactor and SeparateBySeries.
    This ensures the separate pie charts are created and filled in properly.
    */
    action SeparateByFactor(integer requestColumns)
        if GetFactorList() not= undefined
            if GetFactorList():GetSize() > 1 // We won't separate by series if there is only one.
                MakeFactorPieBoxes()
                parent:Chart:SeparateByFactor(requestColumns)
            end
        end
    end


    action SeparateBySeries(integer requestColumns)
        if GetColumnList() not= undefined
            if GetColumnList():GetSize() > 1 // We won't separate by series if there is only one.
                MakeSeriesPieBoxes()
                if GetFactorList() not= undefined
                    parent:Chart:SeparateByFactor(requestColumns)
                else
                    parent:Chart:SeparateBySeries(requestColumns)
                end
            end
        end
    end

    /*
        Returns an array of all the columns labels 
        This is necessary since the legend doesn't hold the
        column headers in a pie chart if a factor is used.
    */
    private action GetColumnList returns Array<text>
        return GetHorizontalPanel():GetTextLabels()
    end

    action GetDonutHolePercent returns number
        return donutHolePercent
    end

    action SetDonutHolePercent(number donutHolePercent)
        if donutHolePercent >= 0 and donutHolePercent < 1
            me:donutHolePercent = donutHolePercent
        else
            alert("Donut hole percent can be a number between 0 and 1")
        end
    end

    /*
        This is used by GenerateInfoTree to generate the summary that is heard when
        you first focus on the chart. Also the highest level of the information tree
        of  the chart.
    */
    private action GenerateSummary returns text
        integer count = pieBoxes:Get(0):GetSize()
        text countText = "slices"
        if count = 1
            countText = "slice"
        end
        if IsSeparated()
            count = pieBoxes:GetSize()
            countText = "pies"
            if count = 1
                countText = "pie"
            end
        end
        if GetName() = "Pie Chart"
            SetDescription(" with " + count + " " + countText + ".")
        else
            SetDescription(", pie chart with " + count + " " + countText + ".")
        end
        AddChartAreaInstructions(GetDescription())
        SetDescription(GetChartArea():GetDescription())
        return GetDescription()
    end

    /*
        GenerateInfoTree
        Generates the tree of ChartItems that define how the chart will be 
        navigated and what extra information might be sent to the screen reader.
    */
    action GenerateInfoTree
        if GetDefaultLayoutProperties():NeedsRendering()
            return now //we haven't loaded graphics yet, so bail.
        end
        
        //NOTE: These nodes implement a cheap form of ordinality might need changing
        ChartItem xAxis = GetHorizontalPanel()
        ChartItem yAxis = GetVerticalPanel()
        ChartItem chartArea = GetChartArea()
        ChartItem summary = me
        // The chart area is the child unless y-axis is showing.
        summary:SetDisplayName(GenerateSummary())
        summary:SetContainer(me)

        chartArea:SetContainer(me)
        chartArea:SetDisplayName("Pie Chart")
    
        // If any of these are not showing the tree will skip them in the navigation 
        if IsShowingXAxis()
            GetHorizontalPanel():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end       
        if IsShowingYAxis()
            GetVerticalPanel():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end
        if IsShowingLegend()
            GetLegend():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end

        if IsSeparated()
            integer subAreaCount = pieBoxes:GetSize()
            if GetNumberOfChartAreas() > 0
                ChartItem firstArea = GetSubChartAreas():Get(0)
                firstArea:SetContainer(me)

                AddChartAreaInstructions(" with " + subAreaCount + " pies.")
                summary:SetEnterItem(firstArea)
                firstArea:SetEscapeItem(summary)
                firstArea:SetDisplayName(GetSubChartAreas():Get(0):GetName())
                Array<ChartItem> chartAreaItems = GetSubChartAreas():Get(0):GetChartAreaItems()
                AddSubChartAreaInstructions(GetSubChartAreas():Get(0), " pie with " + chartAreaItems:GetSize() + " slices, 1 of " + subAreaCount + " pies.")

                //Slices within SubChartArea
                if chartAreaItems:GetSize() > 0
                    ChartItem firstSlice = chartAreaItems:Get(0)
                    firstSlice:SetContainer(me)

                    firstArea:SetEnterItem(firstSlice)
                    firstSlice:SetEscapeItem(firstArea)
                    AddChartItemInstructions(chartAreaItems:Get(0), chartAreaItems:Get(0):GetDescription() + ", 1 of " + chartAreaItems:GetSize() + " slices.")

                    integer j = 1
                    ChartItem previousSlice = firstSlice
                    repeat while j < chartAreaItems:GetSize()
                        ChartItem slice = chartAreaItems:Get(j)
                        slice:SetContainer(me)
                        slice:SetEscapeItem(firstArea)
                        slice:SetDescription(slice:GetDescription() + ", " + (j+1) + " of " + chartAreaItems:GetSize() + " slices.")
                        previousSlice:SetRightItem(slice)
                        slice:SetLeftItem(previousSlice)
                        previousSlice = slice
                        j = j + 1
                    end

                    // Iterate over the slices again, this time in value order.
                    Array<ChartItem> sortedSlices = chartAreaItems:CopyToArray()
                    PieSliceComparison comparison
                    sortedSlices:Sort(comparison)

                    j = 1
                    previousSlice = sortedSlices:Get(0)
                    repeat while j < sortedSlices:GetSize()
                        ChartItem slice = sortedSlices:Get(j)
                        slice:SetDownItem(previousSlice)
                        previousSlice:SetUpItem(slice)
                        previousSlice = slice
                        j = j + 1
                    end
                end

                integer i = 1
                ChartItem previousArea = firstArea
                repeat while i < GetNumberOfChartAreas()
                    ChartAreaPanel chartSubArea = GetSubChartAreas():Get(i)
                    if chartSubArea:IsShowing()
                        ChartItem nextArea = chartSubArea
                        nextArea:SetContainer(me)
                        nextArea:SetEscapeItem(summary)
                        previousArea:SetRightItem(nextArea)
                        nextArea:SetLeftItem(previousArea)
                        previousArea = nextArea
                        nextArea:SetDisplayName(chartSubArea:GetName())
                        Array<ChartItem> chartSubAreaItems = chartSubArea:GetChartAreaItems()
    
                        chartSubArea:SetDescription(" pie with " + chartSubAreaItems:GetSize() + " slices, " + (i+1) + " of " + subAreaCount + " pies.")
    
                        //Slices within SubChartArea
                        if chartSubAreaItems:GetSize() > 0
                            ChartItem firstSlice = chartSubAreaItems:Get(0)
                            firstSlice:SetContainer(me)
                            nextArea:SetEnterItem(firstSlice)
                            firstSlice:SetEscapeItem(nextArea)
                            AddChartItemInstructions(chartSubAreaItems:Get(0), chartSubAreaItems:Get(0):GetDescription() + ", 1 of " + chartSubAreaItems:GetSize() + " slices.")

                            j = 1
                            ChartItem previousSlice = firstSlice
                            repeat while j < chartSubAreaItems:GetSize()
                                ChartItem slice = chartSubAreaItems:Get(j)
                                slice:SetContainer(me)
                                slice:SetEscapeItem(nextArea)
                                slice:SetDescription(slice:GetDescription() + ", " + (j+1) + " of " + chartSubAreaItems:GetSize() + " slices.")
                                previousSlice:SetRightItem(slice)
                                slice:SetLeftItem(previousSlice)
                                previousSlice = slice
                                j = j + 1
                            end

                            // Iterate over the slices again, this time in value order.
                            Array<ChartItem> sortedSlices = chartSubAreaItems:CopyToArray()
                            PieSliceComparison comparison
                            sortedSlices:Sort(comparison)
        
                            j = 1
                            previousSlice = sortedSlices:Get(0)
                            repeat while j < sortedSlices:GetSize()
                                ChartItem slice = sortedSlices:Get(j)
                                slice:SetDownItem(previousSlice)
                                previousSlice:SetUpItem(slice)
                                previousSlice = slice
                                j = j + 1
                            end
                        end
                    end
                    i = i + 1
                end
            end
        else
            PieBox box = pieBoxes:Get(0)
            integer count = box:GetSize()
            AddChartAreaInstructions(" with " + count + " slices")
            if count > 0
                ChartItem firstSlice = box:Get(0)
                firstSlice:SetContainer(me)
                summary:SetEnterItem(firstSlice)
                firstSlice:SetEscapeItem(summary)
                AddChartItemInstructions(firstSlice, firstSlice:GetDescription() + ", 1 of " + count + " slices.")
    
                integer i = 1
                ChartItem previousSlice = firstSlice
                repeat while i < box:GetSize()
                    ChartItem slice = box:Get(i)
                    slice:SetContainer(me)
                    slice:SetEscapeItem(summary)
                    slice:SetDescription(slice:GetDescription() + ", " + (i+1) + " of " + count + " slices.")
                    previousSlice:SetRightItem(slice)
                    slice:SetLeftItem(previousSlice)
                    previousSlice = slice
                    i = i + 1
                end

                // Iterate over the slices again, this time in value order.
                Array<PieSlice> sortedSlices = box:GetSlices():CopyToArray()
                PieSliceComparison comparison
                sortedSlices:Sort(comparison)

                j = 1
                previousSlice = sortedSlices:Get(0)
                repeat while j < sortedSlices:GetSize()
                    ChartItem slice = sortedSlices:Get(j)
                    slice:SetDownItem(previousSlice)
                    previousSlice:SetUpItem(slice)
                    previousSlice = slice
                    j = j + 1
                end
            end
        end
        
        ChartSelection selection = GetSelection()
        selection:Set(summary)
    end

    action Sort
        PieSliceComparison comparison
        comparison:SetAscending(false)

        if IsSeparated()
            i = 0
            repeat while i < GetSubChartAreas():GetSize()
                GetSubChartAreas():Get(i):GetChartAreaItems():Sort(comparison)
                i = i + 1 
            end
        else
            PieBox box = pieBoxes:Get(0)
            if box:GetSize() > 0
                box:GetSlices():Sort(comparison)
            end
        end
    end
   
    /* 
        This action converts this chart to a text value that contains information 
        for a scalable vector graphics file. This is useful for saving charts to disk.
        Each sub-class of chart must implement this action separately.

        Attribute: Returns the Scalable Vector Graphics (SVG) text.
    */
    action ConvertToScalableVectorGraphics returns text
        PieChartWriter writer
        writer:SetAccessibilityFlag(HasAccessibility())
        return writer:WriteOutChart(me)
    end

    /*
        This action saves this chart to disk at the position of the current file. To conduct the 
        conversion, the file extension is used. Only Scalable Vector Graphics (SVG) is currently 
        supported.

        Attribute: Parameter file the location of where to save the file.
    */
    action Save(File file)
        if file:GetFileExtension() = "svg"
            PieChartWriter chartWriter
            chartWriter:SetAccessibilityFlag(HasAccessibility())
            chartWriter:WriteOutChart(me,file)
        else
           alert("Save currently only supports Scalable Vector Graphics (SVG), please use a .svg file extension.")
        end
    end

    /*
        This action saves this chart to disk at the position of the current file. To conduct the 
        conversion, the file extension is used. Only Hypertext Markup Language (HTML) is currently
        supported, and Scalable Vector Graphics (SVG) conversion is used. This makes a file that can
        be opened in the browser that imports the Javascript and Cascading Stylesheets necessary
        to navigate the charts accessibly on the web.

        Attribute: Parameter file the location of where to save the file.
    */
    action Share(File file)
        if file:GetFileExtension() = "html"
            PieChartWriter chartWriter
            chartWriter:SetAccessibilityFlag(HasAccessibility())
            chartWriter:SetScriptFilepath(GetScriptFilepath())
            chartWriter:SetStyleFilepath(GetStyleFilepath())
            chartWriter:WriteOutHTML(me,file)
        else
            alert("Share currently only supports Hypertext Markup Language (HTML), please use a .html file extension.")
        end
    end

    action GetGroupText returns text
        return groupText
    end

    action GetGroupsText returns text
        return groupsText
    end
    
    action GetChartItemText returns text
        return chartItemText
    end

    action GetChartItemsText returns text
        return chartItemsText
    end
end