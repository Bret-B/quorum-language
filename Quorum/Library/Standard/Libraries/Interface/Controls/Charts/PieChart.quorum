package Libraries.Interface.Controls.Charts

use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Gradient
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Controls.ControlLabel
use Libraries.Interface.Controls.Charts.Graphics.Wedge
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Layouts.PieChartLayout
use Libraries.Interface.Selections.ChartSelection
use Libraries.Interface.Views.LabelBoxView
use Libraries.System.File

/*
    The PieChart class is Chart object that inherits from Control and like other
    UI elements it is added to the Game class. 
    The Pie Chart is used to show catergorical data.
    The title label. Any number of slices can be added.

    Attribute: Author Hannah Williams

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Charts.PieChartCreator
    use Libraries.Interface.Controls.Charts.PieChart
    use Libraries.Game.Game
    
    class Main is Game
        action Main
            StartGame()
        end
    
        action CreateGame
            DataFrame frame
            frame:Load("Data/Data.csv")
            PieChartCreator creator
            creator:AddColumn(2)
        
            PieChart chart = cast(PieChart,frame:CreateChart(creator))
            Add(chart)
        end
    end
*/

class PieChart is Chart
    Array<Wedge> slices
    number totalValue = 0
    Drawable pieBox
    number donutHolePercent = 0

    Color highlightColor = undefined
    ColorGroup previousColorGroup = undefined
    Color previousColor = undefined

    ChartOptions options
    Math math

    on create
        PieChartLayout layout
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:MAINTAIN_ASPECT_RATIO)
        properties:SetVerticalLayoutMode(properties:STANDARD)
        Font font = GetDefaultFont()
        properties:SetFont(font)
        properties:SetFontSize(GetDefaultFontSize())

        Color color
        Gradient gradient
        Color gray = color:LightGray()
        Color lightGray = color:CustomColor(0.9, 0.9, 0.9, 1)
        gradient:Set(gray, gray, lightGray, lightGray)

        properties:SetBackgroundColor(gradient)
        properties:SetBorderColor(color:Black())
        properties:SetBorderThickness(2)
        SetName("Pie Chart")

        SetInputGroup("Chart")
        SetFocusable(true)
        SetAccessibilityCode(parent:Item:ITEM)

        SetDefaultOrientationToVertical()
        ShowXAxis(false)
        ShowYAxis(false)
        GetVerticalPanel():BlockPaddingOffset(true)
        GetHorizontalPanel():BlockPaddingOffset(true)
    end

    /*
        LoadGraphics
        This action is used to load the graphical components of the Control. This is
        handled automatically by the Game engine as needed, and most users shouldn't
        need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        DisposeDrawables()
        if properties = undefined
            return now
        end
        parent:Chart:LoadGraphics(properties)

        LoadChartAreaItems()
    end

    action LoadChartAreaItems()
        Control chartArea = GetChartArea()

        chartArea:Add(pieBox)

        integer i = 0
        repeat while i < slices:GetSize()
            Wedge slice = slices:Get(i)
            slice:SetFocusable(true)
            slice:SetAccessibilityCode(parent:Item:ITEM)
            slice:SetNextFocus(GetNextFocus())
            slice:SetPreviousFocus(GetPreviousFocus())
            slice:SetDescription(" " + slice:GetValue())
            i = i + 1
        end
    end

    /*
        DisposeDrawables
        
        Empties drawables from the chart area.
    */
    action DisposeDrawables()
        parent:Chart:DisposeDrawables()

        GetChartArea():Empty()
    end

    /*
        LostSelection is a supplemental action to the parent Chart's LostSelection.
        Any items specific to only this type of chart or if an item needs different highlighting
        instructions than that of the parent class, it will have their LostSelection defined here.

        Unlike many kinds of user interface controls, there is no universal way of interacting with a chart and, as such, this 
        may be defined by any chart to be custom. As such, charts must be able to take messages suggesting an item in the chart
        has either lost or gained the focus. Broadly speaking, this is done automatically and while charts need to implement
        this action, they do not need to call this action directly.

        Attribute: Parameter item the ChartItem representing the structure for this particular kind of chart. 
    */
    action LostSelection(ChartItem item)
        if item = undefined
            return now
        end
        Item target = item:GetFocusTarget()

        if target not= undefined
            parent:Chart:LostSelection(item)
        end
    end

    /* 
        GainedSelection is a supplemental action to the parent Chart's GainedSelection.
        Any items specific to only this type of chart or if an item needs different highlighting
        instructions than that of the parent class, it will have their GainedSelection defined here.

        Unlike many kinds of user interface controls, there is no universal way of interacting with a chart and, as such, this 
        may be defined by any chart to be custom. As such, charts must be able to take messages suggesting an item in the chart
        has either lost or gained the focus. Broadly speaking, this is done automatically and while charts need to implement
        this action, they do not need to call this action directly.

        Attribute: Parameter item the ChartItem representing the structure for this particular kind of chart. 
    */
    action GainedSelection(ChartItem item)
        if item = undefined
            return now
        end
        Item target = item:GetFocusTarget()

        if target not= undefined
            target:Focus()
            parent:Chart:GainedSelection(item)        
        end
    end

    action AddSlice(Wedge slice)
        if slice:GetValue() > 0
            slices:Add(slice)
            totalValue = totalValue + slice:GetValue()
        end
    end

    action GetSlices returns Array <Wedge> 
        return slices
    end

    action GetPieBox returns Drawable
        return pieBox
    end

    action GetTotalValue returns number
        return totalValue
    end

    action GetDonutHolePercent returns number
        return donutHolePercent
    end

    action SetDonutHolePercent(number donutHolePercent)
        if donutHolePercent >= 0 and donutHolePercent < 1
            me:donutHolePercent = donutHolePercent
        else
            alert("Donut hole percent can be a number between 0 and 1")
        end
    end

    /*
        This is used by GenerateInfoTree to generate the summary that is heard when
        you first focus on the chart. Also the highest level of the information tree
        of  the chart.
    */
    private action GenerateSummary returns text
        integer sliceCount = slices:GetSize()
        text sliceText = "slices"
        if sliceCount = 1
            sliceText = "slice"
        end
        if GetName() = "Pie Chart"
            SetDescription(" with " + sliceCount + " " + sliceText + ". Use the arrow keys to navigate the chart.")
        else
            SetDescription(", pie chart with " + sliceCount + " " + sliceText + ". Use the arrow keys to navigate the chart.")
        end
        return GetDescription()
    end

    /*
        GenerateInfoTree
        Generates the tree of ChartItems that define how the chart will be 
        navigated and what extra information might be sent to the screen reader.
    */
    action GenerateInfoTree
        if GetDefaultLayoutProperties():NeedsRendering()
            return now //we haven't loaded graphics yet, so bail.
        end
        
        //NOTE: These nodes implement a cheap form of ordinality might need changing
        ChartItem xAxis
        ChartItem yAxis
        ChartItem chartArea //not to be confused with panels
        ChartItem summary = GetInfoTreeRoot()
        // The chart area is the child unless y-axis is showing.
        summary:SetDisplayName(GenerateSummary())
        summary:SetNext(chartArea)
        summary:SetChild(chartArea)
        summary:SetContainer(me)
        summary:SetFocusTarget(me)
        chartArea:SetFocusTarget(me:GetChartArea())
        chartArea:SetParent(summary)
        chartArea:SetContainer(me)

        chartArea:SetDisplayName("Pie Chart")
        GetChartArea():SetDescription(" with " + slices:GetSize() + " slices")
    
        // If any of these are not showing the tree will skip them in the navigation        
        if IsShowingYAxis()
            GetVerticalPanel():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end
        if IsShowingXAxis()
            GetHorizontalPanel():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end
        if IsShowingLegend()
            GetLegend():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end

        if slices:GetSize() > 0
            ChartItem firstSlice
            firstSlice:SetContainer(me)
            chartArea:SetChild(firstSlice)
            firstSlice:SetParent(chartArea)
            firstSlice:SetFocusTarget(slices:Get(0))

            integer i = 1
            ChartItem previousSlice = firstSlice
            repeat while i < slices:GetSize()
                ChartItem slice
                slice:SetContainer(me)
                slice:SetParent(chartArea)
                slice:SetFocusTarget(slices:Get(i))
                previousSlice:SetNext(slice)
                slice:SetPrevious(previousSlice)
                previousSlice = slice
                i = i + 1
            end
            chartArea:SetLastChild(previousSlice)
        end
        
        ChartSelection selection = GetSelection()
        selection:Set(summary)  
    end
   
    /* 
        This action converts this chart to a text value that contains information 
        for a scalable vector graphics file. This is useful for saving charts to disk.
        Each sub-class of chart must implement this action separately.

        Attribute: Returns the Scalable Vector Graphics (SVG) text.
    */
    action ConvertToScalableVectorGraphics returns text
        PieChartWriter writer
        return writer:WriteOutChart(me)
    end

    /*
        This action saves this chart to disk at the position of the current file. To conduct the 
        conversion, the file extension is used. Only Scalable Vector Graphics (SVG) is currently 
        supported.

        Attribute: Parameter file the location of where to save the file.
    */
    action Save(File file)
        if file:GetFileExtension() = "svg"
            PieChartWriter chartWriter
            chartWriter:WriteOutChart(me,file)
        end
    end
end