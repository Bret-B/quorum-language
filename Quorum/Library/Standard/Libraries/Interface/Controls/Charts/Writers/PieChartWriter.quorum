package Libraries.Interface.Controls.Charts

use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Data.Formats.ScalableVectorGraphics.ScalableVectorGraphics
use Libraries.Data.Formats.ScalableVectorGraphics.Line
use Libraries.Data.Formats.ScalableVectorGraphics.Rectangle
use Libraries.Data.Formats.ScalableVectorGraphics.Wedge
use Libraries.Data.Formats.ScalableVectorGraphics.Label
use Libraries.Game.Graphics.Color
use Libraries.Interface.Item
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Charts.PieChart
use Libraries.Interface.Controls.Charts.Graphics.PieBox
use Libraries.System.File
use Libraries.System.FileWriter
use Libraries.Web.Page.Script
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.ListItem
use Libraries.Data.Formats.ScalableVectorGraphics.Group
use Libraries.Web.Page.Division
use Libraries.Interface.Controls.Charts.Graphics.PieSlice

/*
    The PieChartWriter class is part of the set of writers that allow for Charts
    to save their representation in the form ScalableVectorGraphics. This class will write out
    all of the necessary text needed to write out an SVG file that will contain the chart.

    Attribute: Author Hannah Williams

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.PieChart
    use Libraries.Interface.Controls.Charts.PieChartWriter
    
    DataFrame frame
    frame:Load("Data.csv")
    frame:SetSelectedColumnRange(0,1)
    PieChart chart = frame:PieChart()
    chart:SetTitle("My Awesome Title")
    chart:SetXAxisTitle("Time")
    chart:Display()

    PieChartWriter writer
    output writer:WriteOutChart(chart)
*/

class PieChartWriter is ChartWriter
    private number centerX = 0
    private number centerY = 0

    action WriteOutChart(PieChart chart, integer svgWidth, integer svgHeight) returns text
        return WriteOutChart(cast(Chart,chart), svgWidth, svgHeight)
    end

    action WriteOutChart(PieChart chart, File file, integer svgWidth, integer svgHeight)
        WriteOutChart(cast(Chart,chart), file, svgWidth, svgHeight)
    end

    action WriteOutChart(PieChart chart) returns text
        return WriteOutChart(cast(Chart,chart))
    end

    action WriteOutChart(PieChart chart, File file)
        WriteOutChart(cast(Chart,chart), file)
    end
    
    action WriteOutHTML(PieChart chart, File file)
        WriteOutHTML(cast(Chart,chart), file)
    end

    /*
        This action adds a white background to the canvas
    */
    action AddChartArea(ScalableVectorGraphics canvas, Chart chart)
        parent:ChartWriter:AddChartArea(canvas,chart)
        
        PieChart pieChart
        pieChart = cast(PieChart, chart)

        if HasAccessibility()
            canvas:SetRole("graphics-document document")
            GetChartArea():SetAriaLabel(chart:GetChartArea():GetName() + " " + chart:GetChartArea():GetDescription())
        end
    end

    /*
        This action adds the content of the PieChart
    */
    private action AddChartContent(ScalableVectorGraphics canvas, Chart chart)
        PieChart pieChart
        pieChart = cast(PieChart, chart)
        AddSlices(canvas, pieChart)
    end

    /*
        This action adds the content of the PieChart to the SVG
    */

    private action AddSlices(ScalableVectorGraphics canvas, PieChart chart)
        Color transparent
        transparent:SetColor(0, 0, 0, 0)

        Script script
        text scriptText = ""
        text newLine = scriptText:GetLineFeed()

        Group chartContent
        chartContent:SetSize(GetChartArea():GetWidth(),GetChartArea():GetHeight())
        chartContent:SetPosition(GetChartArea():GetPositionX(),GetChartArea():GetPositionY())
        GetChartInformation():Add(chartContent)

        Rectangle chartContentBoundingBox
        chartContentBoundingBox:SetSize(GetChartArea():GetWidth(), GetChartArea():GetHeight())
        chartContentBoundingBox:SetPosition(GetChartArea():GetPositionX(), GetChartArea():GetPositionY())
        chartContentBoundingBox:SetFill(transparent)
        chartContentBoundingBox:SetFillOpacity(transparent)
        chartContentBoundingBox:SetStroke(transparent)
        chartContentBoundingBox:SetStrokeOpacity(transparent)
        if HasAccessibility()
            chartContent:SetTabIndex(0)
            chartContent:SetStyleClass("quorum-chart-element quorum-chart-area quorum-chart-information-list")
            chartContent:SetIsOneLine(true)
            chartContent:SetRole("graphics-object")
            chartContent:SetID(canvas:GetID() + "_" + GetChartArea():GetHashCode())
            chartContentBoundingBox:SetID(chartContent:GetID() + "_boundingbox")
            chartContentBoundingBox:SetTabIndex(-1)  
            chartContentBoundingBox:SetAriaHidden("true")
            if chart:GetTitle() not= ""
                chartContent:SetAriaLabel(chart:GetTitle() + " " + chart:GetDescription())
            else
                chartContent:SetAriaLabel(chart:GetName() + " " + chart:GetDescription())
            end
            chartContent:SetAriaHidden("false")
            //chartContent:SetOnFocus("gainFocus('" + chartContentBoundingBox:GetID() + "'); ")
            //chartContent:SetOnBlur("loseFocus('" + chartContentBoundingBox:GetID() + "'); ")
        end
        chartContent:Add(chartContentBoundingBox)

        if not chart:IsSeparated()
            Math math
            PieBox pieBox = chart:GetPieBoxes():Get(0)
    
            if pieBox not= undefined and pieBox:GetChartArea() not= undefined
                centerX = pieBox:GetX() + pieBox:GetWidth()/2 + cast(integer, pieBox:GetChartArea():GetGlobalX())
                centerY = pieBox:GetY() + pieBox:GetHeight()/2 + cast(integer, TranslatePositionY(pieBox:GetChartArea()) - pieBox:GetChartArea():GetHeight())            
        
                number prevX = 0 //Used on donut hole (inner radius)
                number prevY = 0 //Used on donut hole (inner radius)
                number newX = 0 //Used on donut hole (inner radius)
                number newY = 0 //Used on donut hole (inner radius)
                number currentTheta = -90 // This starts it at the top
                number x = 0
                number y = 0
                integer i = 0
                repeat while i < pieBox:GetSize()
                    Group sliceSVG
                    sliceSVG:SetFill(pieBox:Get(i):GetColor())
                    sliceSVG:SetFillOpacity(pieBox:Get(i):GetColor())
                    if HasAccessibility()  
                        sliceSVG:SetID(canvas:GetID() + "_" + pieBox:Get(i):GetHashCode())
                        sliceSVG:SetStyleClass("quorum-chart-bar quorum-chart-bar-list")
                        sliceSVG:SetTabIndex(-1) 
                        sliceSVG:SetRole("graphics-symbol") 
                        sliceSVG:SetAriaLabel(pieBox:Get(i):GetName() + pieBox:Get(i):GetDescription())
                        sliceSVG:SetAriaHidden("false")
                    end
                    chartContent:Add(sliceSVG)

                    Wedge slice // this is an SVG wedge not chart graphics wedge
                    //Set outer radius
                    number radius = pieBox:Get(i):GetOuterRadius()
                    number innerRadius = pieBox:Get(i):GetInnerRadius()
                    slice:SetOuterRadius(radius)
    
                    //Start point of outer arc
                    x = centerX + radius * math:Cosine(math:DegreesToRadians(currentTheta))
                    y = centerY + radius * math:Sine(math:DegreesToRadians(currentTheta))
                    slice:SetStart(x, y)
    
                    //End point of outer arc
                    number percent = pieBox:Get(i):GetEndPercentage() - pieBox:Get(i):GetStartPercentage()
                    slice:SetPercent(percent)
                    currentTheta = currentTheta + percent * 360
                    x = centerX + radius * math:Cosine(math:DegreesToRadians(currentTheta))
                    y = centerY + radius * math:Sine(math:DegreesToRadians(currentTheta))
                    slice:SetEnd(x, y)
        
                    // This will account for the offset if the pie chart has a donut hole.
                    if innerRadius > 0
                        slice:SetInnerRadius(innerRadius)  
        
                        //End point of inner arc
                        if i = 0
                            prevX = centerX
                            prevY = centerY - innerRadius
                        end
                        slice:SetInnerEnd(prevX, prevY)
                        
                        //Start point of inner arc
                        newX = centerX + innerRadius * math:Cosine(math:DegreesToRadians(currentTheta))
                        newY = centerY + innerRadius * math:Sine(math:DegreesToRadians(currentTheta))
                        slice:SetCenter(newX, newY)
        
                        prevX = newX
                        prevY = newY
                    else
                        // Center point if inner radius is not used.
                        slice:SetCenter(centerX, centerY)
                    end
                    slice:SetFill(pieBox:Get(i):GetColor())
                    slice:SetFillOpacity(pieBox:Get(i):GetColor())
                    slice:SetStroke(cast(Color, pieBox:Get(i):GetBorderColor()))
                    slice:SetStrokeOpacity(cast(Color, pieBox:Get(i):GetBorderColor()))
                    slice:SetStrokeWidth(pieBox:Get(i):GetBorderThickness())
                    
                    text sliceFocus = ""
                    text sliceBlur = ""

                    if HasAccessibility()
                        slice:SetID(sliceSVG:GetID() + "_slice")
                        slice:SetStyleClass("quorum-chart-wedge quorum-chart-bar-list")
                        slice:SetTabIndex(-1)
                        slice:SetAriaHidden("true")
                        sliceFocus = sliceFocus + "gainFocus('" + slice:GetID() + "'); "
                        sliceBlur = sliceBlur + "loseFocus('" + slice:GetID() + "'); "
                    end
                    sliceSVG:Add(slice)
    
                    if pieBox:Get(i):ShowAnnotation() or chart:ShowAnnotations()
                        ChartLabel label = pieBox:Get(i):GetAnnotation()
                        if label not= undefined
                            Label labelSVG
                            labelSVG:SetText(label:GetText())
                            labelSVG:SetTextAnchor("left")
                            labelSVG:SetPosition(label:GetGlobalX(), TranslatePositionY(label))
                            labelSVG:SetFontSize(label:GetFontSize() + "px")
                            labelSVG:SetFontFamily("Arial")
                            labelSVG:SetFill(cast(Color, label:GetFontColor()))
                            labelSVG:SetFillOpacity(cast(Color, label:GetFontColor()))
                            if HasAccessibility()
                                labelSVG:SetID(slice:GetID() + "_annotation")
                                labelSVG:SetStyleClass("quorum-chart-text")
                                labelSVG:SetTabIndex(-1)
                                labelSVG:SetAriaHidden("true")
                                //sliceFocus = sliceFocus + "gainFocus('" + labelSVG:GetID() + "'); "
                                //sliceBlur = sliceBlur + "loseFocus('" + labelSVG:GetID() + "'); "
                            end
                            canvas:Add(labelSVG)
                        end
                    end
                    
                    if HasAccessibility()
                        if sliceFocus not= ""
                            scriptText = scriptText + "document.getElementById('" + sliceSVG:GetID() + "').addEventListener('focus', (event) => {" + newLine + sliceFocus + "});" + newLine
                        end
                        if sliceBlur not= ""
                            scriptText = scriptText + "document.getElementById('" + sliceSVG:GetID() + "').addEventListener('blur', (event) => {" + newLine + sliceBlur + "});" + newLine
                        end
                    end
                        
                    i = i + 1
                end
            end
        else
            Math math
            integer index = 0
            repeat while index < chart:GetPieBoxes():GetSize()
                PieBox pieBox = chart:GetPieBoxes():Get(index)
                if pieBox not= undefined and pieBox:GetChartArea() not= undefined
                    Group subChartContent
                    subChartContent:SetSize(cast(integer, pieBox:GetChartArea():GetWidth()), cast(integer, pieBox:GetChartArea():GetHeight()))
                    subChartContent:SetPosition(pieBox:GetChartArea():GetGlobalX(), TranslatePositionY(pieBox:GetChartArea())  - pieBox:GetChartArea():GetHeight())
    
                    Rectangle subChartContentBoundingBox
                    subChartContentBoundingBox:SetSize(cast(integer, pieBox:GetChartArea():GetWidth()), cast(integer, pieBox:GetChartArea():GetHeight()))
                    subChartContentBoundingBox:SetPosition(pieBox:GetChartArea():GetGlobalX(), TranslatePositionY(pieBox:GetChartArea())  - pieBox:GetChartArea():GetHeight())
                    subChartContentBoundingBox:SetFill(transparent)
                    subChartContentBoundingBox:SetFillOpacity(transparent)
                    subChartContentBoundingBox:SetStroke(transparent)
                    subChartContentBoundingBox:SetStrokeOpacity(transparent)
                    if HasAccessibility()
                        subChartContent:SetTabIndex(-1)
                        subChartContent:SetStyleClass("quorum-chart-region")
                        subChartContentBoundingBox:SetAriaHidden("true")
                        subChartContentBoundingBox:SetTabIndex(-1)
                    end
                    subChartContent:Add(subChartContentBoundingBox)
                    AddSubChartTitle(canvas, pieBox:GetChartArea())

                    if HasAccessibility()
                        //Separated, by the Factor levels with multiple Series per subplot
                        if chart:IsSeparatedByFactor()
                            subChartContent:SetID(canvas:GetID() + "_" + chart:GetSubChartAreas():Get(index):GetHashCode())
                            subChartContent:SetStyleClass("quorum-chart-region quorum-chart-category-list") 
                            subChartContent:SetAriaLabel(GetSubChartAreas():Get(index):GetAriaLabel())
                            subChartContent:SetRole("graphics-object") 
                            subChartContent:SetAriaHidden("false")
                            subChartContentBoundingBox:SetID(subChartContent:GetID() + "_boundingbox")
                            //subChartContent:SetOnFocus("gainFocus('" + subChartContentBoundingBox:GetID() + "'); ")
                            //subChartContent:SetOnBlur("loseFocus('" + subChartContentBoundingBox:GetID() + "'); ")
                            chartContent:Add(subChartContent)
                        //Separated, one Series per subplot should go from Chart Area then group list info for sub chart areas
                        elseif chart:IsSeparatedBySeries() and not chart:IsSeparatedByFactor()
                            subChartContent:SetID(canvas:GetID() + "_" + chart:GetSubChartAreas():Get(index):GetHashCode())
                            subChartContent:SetStyleClass("quorum-chart-region quorum-chart-series-list") 
                            subChartContent:SetAriaLabel(GetSubChartAreas():Get(index):GetAriaLabel())
                            subChartContent:SetRole("graphics-object") 
                            subChartContent:SetAriaHidden("false")
                            subChartContentBoundingBox:SetID(subChartContent:GetID() + "_boundingbox")
                            //subChartContent:SetOnFocus("gainFocus('" + subChartContentBoundingBox:GetID() + "'); ")
                            //subChartContent:SetOnBlur("loseFocus('" + subChartContentBoundingBox:GetID() + "'); ")
                            chartContent:Add(subChartContent)
                        else
                            subChartContent:SetAriaHidden("true")
                        end
                    else
                        chartContent:Add(subChartContent)
                    end

                    centerX = pieBox:GetX() + pieBox:GetWidth()/2 + cast(integer, pieBox:GetChartArea():GetGlobalX())
                    centerY = pieBox:GetY() + pieBox:GetHeight()/2 + cast(integer, TranslatePositionY(pieBox:GetChartArea()) - pieBox:GetChartArea():GetHeight())
    
                    number prevX = 0 //Used on donut hole (inner radius)
                    number prevY = 0 //Used on donut hole (inner radius)
                    number newX = 0 //Used on donut hole (inner radius)
                    number newY = 0 //Used on donut hole (inner radius)
                    number currentTheta = -90 // This starts it at the top
                    number x = 0
                    number y = 0
                    integer i = 0
                    repeat while i < pieBox:GetSize()
                        Group sliceSVG
                        sliceSVG:SetFill(pieBox:Get(i):GetColor())
                        sliceSVG:SetFillOpacity(pieBox:Get(i):GetColor())
                        if HasAccessibility() 
                            sliceSVG:SetID(canvas:GetID() + "_" + pieBox:GetChartArea():GetHashCode() + "_" + pieBox:Get(i):GetHashCode())
                            sliceSVG:SetStyleClass("quorum-chart-bar quorum-chart-bar-list")
                            sliceSVG:SetTabIndex(-1)  
                            sliceSVG:SetRole("graphics-symbol") 
                            sliceSVG:SetAriaLabel(pieBox:Get(i):GetName() + pieBox:Get(i):GetDescription())
                            sliceSVG:SetAriaHidden("false")
                        end
                        subChartContent:Add(sliceSVG)

                        Wedge slice // this is an SVG wedge not chart graphics wedge
                        //Set outer radius
                        number radius = pieBox:Get(i):GetOuterRadius()
                        number innerRadius = pieBox:Get(i):GetInnerRadius()
                        slice:SetOuterRadius(radius)
    
                        //Start point of outer arc
                        x = centerX + radius * math:Cosine(math:DegreesToRadians(currentTheta))
                        y = centerY + radius * math:Sine(math:DegreesToRadians(currentTheta))
                        slice:SetStart(x, y)
    
                        //End point of outer arc
                        number percent = pieBox:Get(i):GetEndPercentage() - pieBox:Get(i):GetStartPercentage()
                        slice:SetPercent(percent)
                        currentTheta = currentTheta + percent * 360
                        x = centerX + radius * math:Cosine(math:DegreesToRadians(currentTheta))
                        y = centerY + radius * math:Sine(math:DegreesToRadians(currentTheta))
                        slice:SetEnd(x, y)
        
                        // This will account for the offset if the pie chart has a donut hole.
                        if innerRadius > 0
                            slice:SetInnerRadius(innerRadius)  
            
                            //End point of inner arc
                            if i = 0
                                prevX = centerX
                                prevY = centerY - innerRadius
                            end
                            slice:SetInnerEnd(prevX, prevY)
                            
                            //Start point of inner arc
                            newX = centerX + innerRadius * math:Cosine(math:DegreesToRadians(currentTheta))
                            newY = centerY + innerRadius * math:Sine(math:DegreesToRadians(currentTheta))
                            slice:SetCenter(newX, newY)
            
                            prevX = newX
                            prevY = newY
                        else
                            // Center point if inner radius is not used.
                            slice:SetCenter(centerX, centerY)
                        end
                        slice:SetFill(pieBox:Get(i):GetColor())
                        slice:SetFillOpacity(pieBox:Get(i):GetColor())
                        slice:SetStroke(cast(Color, pieBox:Get(i):GetBorderColor()))
                        slice:SetStrokeOpacity(cast(Color, pieBox:Get(i):GetBorderColor()))
                        slice:SetStrokeWidth(pieBox:Get(i):GetBorderThickness())

                        text sliceFocus = ""
                        text sliceBlur = ""

                        if HasAccessibility()
                            slice:SetID(sliceSVG:GetID() + "_slice")
                            slice:SetStyleClass("quorum-chart-wedge quorum-chart-bar-list")
                            slice:SetTabIndex(-1)
                            slice:SetAriaHidden("true")
                            sliceFocus = sliceFocus + "gainFocus('" + slice:GetID() + "'); "
                            sliceBlur = sliceBlur + "loseFocus('" + slice:GetID() + "'); "
                        end
                        sliceSVG:Add(slice)

                        if pieBox:Get(i):ShowAnnotation() or chart:ShowAnnotations()
                            ChartLabel label = pieBox:Get(i):GetAnnotation()
                            if label not= undefined
                                Label labelSVG
                                labelSVG:SetText(label:GetText())
                                labelSVG:SetTextAnchor("left")
                                labelSVG:SetPosition(label:GetGlobalX(), TranslatePositionY(label))
                                labelSVG:SetFontSize(label:GetFontSize() + "px")
                                labelSVG:SetFontFamily("Arial")
                                labelSVG:SetFill(cast(Color, label:GetFontColor()))
                                labelSVG:SetFillOpacity(cast(Color, label:GetFontColor()))
                                if HasAccessibility()
                                    labelSVG:SetID(canvas:GetID() + "_" + label:GetHashCode())
                                    labelSVG:SetStyleClass("quorum-chart-text")
                                    labelSVG:SetTabIndex(-1)
                                    labelSVG:SetAriaHidden("true")
                                    //sliceFocus = sliceFocus + "gainFocus('" + labelSVG:GetID() + "'); "
                                    //sliceBlur = sliceBlur + "loseFocus('" + labelSVG:GetID() + "'); "
                                end
                                canvas:Add(labelSVG)
                            end
                        end 

                        
                        if HasAccessibility()
                            if sliceFocus not= ""
                                scriptText = scriptText + "document.getElementById('" + sliceSVG:GetID() + "').addEventListener('focus', (event) => {" + newLine + sliceFocus + "});" + newLine
                            end
                            if sliceBlur not= ""
                                scriptText = scriptText + "document.getElementById('" + sliceSVG:GetID() + "').addEventListener('blur', (event) => {" + newLine + sliceBlur + "});" + newLine
                            end
                        end

                        i = i + 1
                    end
                end
                index = index + 1
            end
        end
        if HasAccessibility()
            script:AddText(scriptText)  
            canvas:Add(script)
        end
    end

    
    action AddOrderingList(ScalableVectorGraphics canvas, Chart chart)
        PieChart pieChart
        pieChart = cast(PieChart, chart)
        Script script

        text scriptText = ""
        text newLine = scriptText:GetLineFeed()
        text tab = scriptText:GetTab()
        text dq = scriptText:GetDoubleQuote()

        scriptText = newLine + "if (typeof quorum_chart_value_order == 'undefined' || quorum_chart_value_order == null)" + newLine
        scriptText = scriptText  + tab + "var quorum_chart_value_order = {};" + newLine + newLine
        scriptText = scriptText + "quorum_chart_value_order." + canvas:GetID() + " = {" + newLine

        if chart:IsSeparated()
            Array<ChartAreaPanel> subChartAreas = pieChart:GetSubChartAreas()
            PieSliceComparison comparison
            comparison:SetAscending(true)

            i = 0
            repeat while i < subChartAreas:GetSize() - 1
                if subChartAreas:Get(i):GetChartAreaItems():GetSize() > 0
                    Array<ChartItem> chartAreaItems = subChartAreas:Get(i):GetChartAreaItems():CopyToArray()
                    chartAreaItems:Sort(comparison)
                    scriptText = scriptText + tab + canvas:GetID() + "_" + subChartAreas:Get(i):GetHashCode() + ": {" + newLine
                    j = 0
                    repeat while j< chartAreaItems:GetSize() - 1
                        if chartAreaItems:Get(j) is PieSlice
                            PieSlice currentSlice = cast(PieSlice, chartAreaItems:Get(j))
                            scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + currentSlice:GetHashCode() + ": " + currentSlice:GetValue() + "," + newLine
                        end
                        j = j + 1
                    end

                    if chartAreaItems:Get(j) is PieSlice
                        PieSlice lastSlice = cast(PieSlice, chartAreaItems:Get(j))
                        scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + lastSlice:GetHashCode() + ": " + lastSlice:GetValue() + newLine
                        scriptText = scriptText + tab + "}," + newLine
                    end
                end
                i = i + 1
            end

            if i < subChartAreas:GetSize()
                if subChartAreas:Get(i):GetChartAreaItems():GetSize() > 0
                    Array<ChartItem> chartAreaItems = subChartAreas:Get(i):GetChartAreaItems():CopyToArray()
                    chartAreaItems:Sort(comparison)
                    scriptText = scriptText + tab + canvas:GetID() + "_" + subChartAreas:Get(i):GetHashCode() + ": {" + newLine
                    j = 0
                    repeat while j< chartAreaItems:GetSize() - 1
                        if chartAreaItems:Get(j) is PieSlice
                            PieSlice currentSlice = cast(PieSlice, chartAreaItems:Get(j))
                            scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + currentSlice:GetHashCode() + ": " + currentSlice:GetValue() + "," + newLine
                        end
                        j = j + 1
                    end
    
                    if chartAreaItems:Get(j) is PieSlice
                        PieSlice lastSlice = cast(PieSlice, chartAreaItems:Get(j))
                        scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + lastSlice:GetHashCode() + ": " + lastSlice:GetValue() + newLine
                        scriptText = scriptText + tab + "}" + newLine
                    end
                end
            end
        else
            Array<PieSlice> slices = pieChart:GetPieBoxes():Get(0):GetSlices():CopyToArray()
            PieSliceComparison comparison
            comparison:SetAscending(true)
            slices:Sort(comparison)
            i = 0
            repeat while i < slices:GetSize() - 1
                
                PieSlice currentSlice = slices:Get(i)
                scriptText = scriptText + tab + canvas:GetID() + "_" +  currentSlice:GetHashCode() + ": " + currentSlice:GetValue() + "," + newLine
                
                i = i + 1
            end
            
            PieSlice lastSlice = slices:Get(i)
            scriptText = scriptText + tab + canvas:GetID() + "_" + lastSlice:GetHashCode() + ": " + lastSlice:GetValue() + newLine
            
        end
        scriptText = scriptText + "};" + newLine
        script:AddText(scriptText)
        canvas:Add(script)
    end
end