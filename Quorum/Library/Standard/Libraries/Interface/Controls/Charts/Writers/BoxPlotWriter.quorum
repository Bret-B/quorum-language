package Libraries.Interface.Controls.Charts

use Libraries.System.File
use Libraries.Interface.Controls.Charts.BoxPlot
use Libraries.Data.Formats.ScalableVectorGraphics.ScalableVectorGraphics
use Libraries.Data.Formats.ScalableVectorGraphics.Line
use Libraries.Containers.Array
use Libraries.Data.Formats.ScalableVectorGraphics.Rectangle
use Libraries.Data.Formats.ScalableVectorGraphics.Label
use Libraries.Data.Formats.ScalableVectorGraphics.Circle
use Libraries.System.FileWriter
use Libraries.Compute.Math
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Compute.Vector
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Drawable
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.UnorderedList
use Libraries.Interface.Controls.Charts.Graphics.Plot
use Libraries.Interface.Controls.Charts.Graphics.PlotGroup
use Libraries.Interface.Controls.Charts.Graphics.ChartDrawable
use Libraries.Data.Formats.ScalableVectorGraphics.Group
use Libraries.Interface.Item
use Libraries.Web.Page.Division
use Libraries.Web.Page.Script
use Libraries.Data.Formats.ScalableVectorGraphics.Polygon

/*
    The BoxPlotChartWriter class is part of the set of writers that allow for Charts
    to save their representation in the form ScalableVectorGraphics. This class will write out
    all of the necessary text needed to write out an SVG file that will contain the chart.

    Attribute: Author Benjamin Murphy & Shyann Calhoun, Hannah Williams

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.BoxPlot
    
    DataFrame frame
    frame:Load("Data.csv")
    frame:SetSelectedColumnRange(0,1)

    BoxPlot chart = frame:BoxPlot()
    chart:SetTitle("My Awesome Title")
    chart:Display()
    chart:Save("myBoxPlot.svg")

*/
class BoxPlotWriter is ChartWriter

    action WriteOutChart(BoxPlot chart, integer svgWidth, integer svgHeight) returns text
        return WriteOutChart(cast(Chart,chart), svgWidth, svgHeight)
    end

    action WriteOutChart(BoxPlot chart, File file, integer svgWidth, integer svgHeight)
        WriteOutChart(cast(Chart,chart), file, svgWidth, svgHeight)
    end

    action WriteOutChart(BoxPlot chart) returns text
        return WriteOutChart(cast(Chart,chart))
    end

    action WriteOutChart(BoxPlot chart, File file)
        WriteOutChart(cast(Chart,chart), file)
    end

    /*
        This action adds a white background to the canvas
    */
    action AddChartArea(ScalableVectorGraphics canvas, Chart chart)
        parent:ChartWriter:AddChartArea(canvas,chart)

        BoxPlot boxPlot
        boxPlot = cast(BoxPlot, chart)

        if HasAccessibility()
            GetChartArea():SetAriaLabel("Chart Area " + boxPlot:GetNumberOfPlots() + " plots.")
        end
    end

    /*
        This action adds the content of the Violin Plot
    */
    private action AddChartContent(ScalableVectorGraphics canvas, Chart chart)
        BoxPlot plot
        plot = cast(BoxPlot, chart)
        AddBoxes(canvas, plot)
    end

    /*
        This action adds the content of the Box Plot
    */
    private action AddBoxes(ScalableVectorGraphics canvas, BoxPlot chart)
        Color transparent
        transparent:SetColor(0, 0, 0, 0)

        Group chartContent
        chartContent:SetSize(GetChartArea():GetWidth(),GetChartArea():GetHeight())
        chartContent:SetPosition(GetChartArea():GetPositionX(),GetChartArea():GetPositionY())
        chartContent:SetTabIndex(0)
        chartContent:SetStyleClass("quorum-chart-region quorum-chart-area")
        chartContent:SetIsOneLine(true)
        chartContent:SetRole("application")
        canvas:Add(chartContent)
        Rectangle chartContentBoundingBox
        chartContentBoundingBox:SetSize(GetChartArea():GetWidth(), GetChartArea():GetHeight())
        chartContentBoundingBox:SetPosition(GetChartArea():GetPositionX(), GetChartArea():GetPositionY())
        chartContentBoundingBox:SetFill(transparent)
        chartContentBoundingBox:SetStroke(transparent)
        if HasAccessibility()
            chartContentBoundingBox:SetAriaHidden("true")
            chartContent:SetAriaLabel(chart:GetChartArea():GetName() + " " + chart:GetChartArea():GetDescription())
            chartContent:SetAriaHidden("false")
        end
        chartContent:Add(chartContentBoundingBox)

        text description = GetChartArea():GetAriaLabel() + "."

        if not chart:IsSeparated()
            Array <PlotGroup> plotGroups = chart:GetPlotGroups()

            integer i = 0
            repeat while i < plotGroups:GetSize()
                PlotGroup group = plotGroups:Get(i)

                Group plotGroupSVG
                if chart:HasGroups()                
                    plotGroupSVG:SetID(canvas:GetID() + "_" + group:GetHashCode())
                    plotGroupSVG:SetStyleClass("quorum-chart-plotgroup quorum-chart-category-list")
                    plotGroupSVG:SetFill(cast(Color, chart:GetSelectionColor()))
                    plotGroupSVG:SetTabIndex(-1)
                    if HasAccessibility()
                        plotGroupSVG:SetAriaLabel(group:GetName() + group:GetDescription())
                        plotGroupSVG:SetAriaHidden("false")
                    end
                    chartContent:Add(plotGroupSVG)

                    text plotGroupFocus = ""
                    text plotGroupBlur = ""

                    // The group area, used for hover 
                    Rectangle plotGroup
                    plotGroup:SetWidth(group:GetWidth())
                    plotGroup:SetHeight(group:GetHeight())
                    plotGroup:SetPosition(group:GetGlobalX(), TranslatePositionY(group) - group:GetHeight()) 
                    plotGroup:SetFill(transparent)
                    plotGroup:SetStyleClass("quorum-chart-selection-box")
                    plotGroup:SetTabIndex(-1)
                    plotGroup:SetID(plotGroupSVG:GetID() + "_box")
                    if HasAccessibility()
                        plotGroup:SetAriaHidden("true")
                        plotGroupFocus = plotGroupFocus + "gainFocus('" + plotGroup:GetID() + "'); "
                        plotGroupBlur = plotGroupBlur + "loseFocus('" + plotGroup:GetID() + "'); "
                    end
                    plotGroupSVG:Add(plotGroup)
    
                    // Add group selection symbols here!
    
                    if HasAccessibility()
                        if plotGroupFocus not= ""
                            plotGroupSVG:SetOnFocus(plotGroupFocus)
                        end
                        if plotGroupBlur not= ""
                            plotGroupSVG:SetOnBlur(plotGroupBlur)
                        end
                    end
                end

                integer j = 0
                repeat while j < group:GetSize()
                    Plot plot = group:Get(j)

                    Group plotSVG
                    plotSVG:SetID(canvas:GetID() + "_" + plot:GetSeries():GetHashCode() + "_" + plot:GetHashCode())
                    plotSVG:SetStyleClass("quorum-chart-plot quorum-chart-plot-list")
                    plotSVG:SetFill(plot:GetColor())
                    plotSVG:SetTabIndex(-1)
                    if HasAccessibility()   
                        plotSVG:SetAriaLabel(plot:GetName() + plot:GetDescription())
                        plotSVG:SetAriaHidden("false")
                    end
                    if chart:HasGroups()
                        plotGroupSVG:Add(plotSVG)
                    else
                        chartContent:Add(plotSVG)
                    end

                    text plotFocus = ""
                    text plotBlur = ""

                    // The plot area, used for hover
                    Rectangle plotArea
                    plotArea:SetSize(plot:GetPlotArea():GetWidth(),plot:GetPlotArea():GetHeight())
                    plotArea:SetPosition(plot:GetPlotArea():GetGlobalX(), TranslatePositionY(plot:GetPlotArea()) - plot:GetPlotArea():GetHeight())
                    plotArea:SetFill(transparent)
                    plotArea:SetStyleClass("quorum-chart-selection-box")
                    plotArea:SetID(plotSVG:GetID() + "_box")
                    plotArea:SetTabIndex(-1)
                    if HasAccessibility()
                        plotArea:SetAriaHidden("true")
                        plotFocus = plotFocus + "gainFocus('" + plotArea:GetID() + "'); "
                        plotBlur = plotBlur + "loseFocus('" + plotArea:GetID() + "'); "
                    end 
                    plotSVG:Add(plotArea)  

                    // Add plot selection symbols here!

                    if HasAccessibility()
                        if plotFocus not= ""
                            plotSVG:SetOnFocus(plotFocus)
                        end
                        if plotBlur not= ""
                            plotSVG:SetOnBlur(plotBlur)
                        end
                    end       

                    // Plot items 
                    Array<ChartDrawable> items = plot:GetPlotItems()
                    /* Indices for items of individual box plot
                        0: PLOT AREA (ENTIRE REGION)
                        1: MINIMUM LINE
                        2: LOWER WHISKER
                        3: INTERQUARTILE RANGE
                        4: RIGHT BORDER OF IQR
                        5: LEFT BORDER OF IQR
                        6: Q1 LINE
                        7: MEDIAN LINE
                        8: Q3 LINE
                        9: UPPER WHISKER    
                        10: MAXIMUM LINE 
                        11+: OUTLIER POINTS
                    */   

                    integer k = 1
                    repeat while k < items:GetSize()
                        ChartDrawable currentItem = items:Get(k)

                        if currentItem not= undefined 
    
                            Group itemSVG
                            itemSVG:SetID(canvas:GetID() + "_" + plot:GetSeries():GetHashCode() + "_" + plot:GetHashCode() + "_" + currentItem:GetHashCode())
                            itemSVG:SetStyleClass("quorum-chart-plotitem quorum-chart-plot-list")
                            itemSVG:SetFill(currentItem:GetColor())
                            itemSVG:SetTabIndex(-1)
                            if HasAccessibility()   
                                itemSVG:SetAriaLabel(currentItem:GetName() + currentItem:GetDescription())
                                itemSVG:SetAriaHidden("false")
                            end
                            if k not= 2 and k not= 4 and k not= 5 and k not= 9 // skip elements not in nav
                                plotSVG:Add(itemSVG)
                            else
                                canvas:Add(itemSVG)
                            end

                            text itemFocus = ""
                            text itemBlur = ""

                            if k > 10 and currentItem is ChartPoint// These are the outlier dots
                                Circle outlier
                                number radius = currentItem:GetHeight()/2
                                outlier:SetRadius(radius)
                                outlier:SetPosition(currentItem:GetGlobalX()+radius, TranslatePositionY(currentItem) - currentItem:GetHeight() + radius) 
                                outlier:SetFill(currentItem:GetColor())
                                outlier:SetStroke(cast(Color, currentItem:GetBorderColor()))
                                outlier:SetStrokeWidth(currentItem:GetBorderThickness())
                                outlier:SetStyleClass("quorum-chart-circle")
                                outlier:SetID(itemSVG:GetID() + "_item")
                                outlier:SetTabIndex(-1)
                                if HasAccessibility()
                                    outlier:SetAriaHidden("true")
                                    itemFocus = itemFocus + "gainFocus('" + outlier:GetID() + "'); "
                                    itemBlur = itemBlur + "loseFocus('" + outlier:GetID() + "'); "
                                end 
                                itemSVG:Add(outlier)
                            else
                                Rectangle plotLine
                                plotLine:SetSize(currentItem:GetWidth(), currentItem:GetHeight())
                                plotLine:SetPosition(currentItem:GetGlobalX(), TranslatePositionY(currentItem) - currentItem:GetHeight())
                                plotLine:SetFill(currentItem:GetColor())
                                plotLine:SetStroke(cast(Color, currentItem:GetBorderColor()))
                                plotLine:SetStrokeWidth(currentItem:GetBorderThickness())
                                plotLine:SetStyleClass("quorum-chart-rect")
                                plotLine:SetID(itemSVG:GetID() + "_item")
                                plotLine:SetTabIndex(-1)
                                if HasAccessibility() 
                                    plotLine:SetAriaHidden("true")
                                    itemFocus = itemFocus + "gainFocus('" + plotLine:GetID() + "'); "
                                    itemBlur = itemBlur + "loseFocus('" + plotLine:GetID() + "'); "
                                end 
                                itemSVG:Add(plotLine)
                            end

                            if k not= 2 and k not= 4 and k not= 5 and k not= 9 // skip elements not in nav
                                if currentItem:ShowAnnotation() or chart:ShowAnnotations()
                                    ChartLabel label = currentItem:GetAnnotation()
                                    if label not= undefined
                                        Label labelSVG
                                        labelSVG:SetText(label:GetText())
                                        labelSVG:SetTextAnchor("left")
                                        labelSVG:SetPosition(label:GetGlobalX(), TranslatePositionY(label))
                                        labelSVG:SetFontSize(label:GetFontSize() + "px")                            
                                        labelSVG:SetFontFamily("Arial")
                                        labelSVG:SetFill(cast(Color, label:GetFontColor()))
                                        labelSVG:SetID(itemSVG:GetID() + "_annotation")
                                        labelSVG:SetStyleClass("quorum-chart-text")
                                        labelSVG:SetTabIndex(-1)
                                        if HasAccessibility()
                                            labelSVG:SetAriaHidden("true")
                                            itemFocus = itemFocus + "gainFocus('" + labelSVG:GetID() + "'); "
                                            itemBlur = itemBlur + "loseFocus('" + labelSVG:GetID() + "'); "
                                        end
                                        canvas:Add(labelSVG)
                                    end
                                end 

                                // Add item selection symbols here!
                                if currentItem:GetSelectionArrow() not= undefined
                                    Array <number> vertices = currentItem:GetSelectionArrowVertices()
                                    number Yoffset = TranslatePositionY(currentItem:GetSelectionArrow())
                                    number Xoffset = currentItem:GetSelectionArrow():GetGlobalX()
            
                                    Polygon arrow
                                    integer m = 0
                                    repeat while m < vertices:GetSize()
                                        arrow:AddPoint(vertices:Get(m)+Xoffset, Yoffset+(currentItem:GetSelectionArrow():GetY()-vertices:Get(m+1)))
                                        m = m + 2
                                    end
                                    arrow:SetFill(transparent) // Should be transparent until selected 
                                    arrow:SetStyleClass("quorum-chart-selection-arrow")
                                    arrow:SetTabIndex(-1)
                                    arrow:SetID(itemSVG:GetID() + "_arrow")
                                    if HasAccessibility()
                                        arrow:SetAriaHidden("true")
                                        itemFocus = itemFocus + "gainFocus('" + arrow:GetID() + "'); "
                                        itemBlur = itemBlur + "loseFocus('" + arrow:GetID() + "'); "
                                    end
                                    canvas:Add(arrow)
                                end

                                if currentItem:GetSelectionBracket():GetSize() = 3
                                    integer m = 0
                                    repeat while m < currentItem:GetSelectionBracket():GetSize()
                                        Rectangle bracket
                                        bracket:SetWidth(currentItem:GetSelectionBracket():Get(m):GetWidth())
                                        bracket:SetHeight(currentItem:GetSelectionBracket():Get(m):GetHeight())
                                        bracket:SetPosition(currentItem:GetSelectionBracket():Get(m):GetGlobalX(), TranslatePositionY(currentItem:GetSelectionBracket():Get(m)) - currentItem:GetSelectionBracket():Get(m):GetHeight()) 
                                        bracket:SetFill(transparent) // Should be transparent until selected
                                        bracket:SetStyleClass("quorum-chart-selection-bracket")
                                        bracket:SetTabIndex(-1)
                                        bracket:SetID(itemSVG:GetID() + "_bracket" + m)
                                        if HasAccessibility()
                                            bracket:SetAriaHidden("true")
                                            itemFocus = itemFocus + "gainFocus('" + bracket:GetID() + "'); "
                                            itemBlur = itemBlur + "loseFocus('" + bracket:GetID() + "'); "
                                        end
                                        canvas:Add(bracket)    
                                        m = m + 1
                                    end
                                end
                            end
        
                            if HasAccessibility()
                                if itemFocus not= ""
                                    itemSVG:SetOnFocus(itemFocus)
                                end
                                if itemBlur not= ""
                                    itemSVG:SetOnBlur(itemBlur)
                                end
                            end 
                        end
                        k = k + 1
                    end    
                    j = j + 1
                end  
                i = i + 1
            end
        else
            i = 0
            repeat while i < chart:GetSubChartAreas():GetSize()
                Group subChartContent
                subChartContent:SetSize(GetSubChartAreas():Get(i):GetWidth(), GetSubChartAreas():Get(i):GetHeight())
                subChartContent:SetPosition(GetSubChartAreas():Get(i):GetPositionX(), GetSubChartAreas():Get(i):GetPositionY())
                subChartContent:SetTabIndex(-1)
                subChartContent:SetStyleClass("quorum-chart-region")
                Rectangle subChartContentBoundingBox
                subChartContentBoundingBox:SetSize(GetSubChartAreas():Get(i):GetWidth(), GetSubChartAreas():Get(i):GetHeight())
                subChartContentBoundingBox:SetPosition(GetSubChartAreas():Get(i):GetPositionX(), GetSubChartAreas():Get(i):GetPositionY())
                subChartContentBoundingBox:SetFill(transparent)
                subChartContentBoundingBox:SetStroke(transparent)
                subChartContentBoundingBox:SetTabIndex(-1)
                if HasAccessibility()
                    subChartContentBoundingBox:SetAriaHidden("true")
                end
                subChartContent:Add(subChartContentBoundingBox)

                if HasAccessibility()
                    //Separated, by the Factor levels with multiple Series per subplot
                    if not chart:IsSeparatedBySeries() and chart:IsSeparatedByFactor()
                        subChartContent:SetID(canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode())
                        subChartContent:SetStyleClass("quorum-chart-region quorum-chart-category-list") 
                        subChartContent:SetAriaLabel(GetSubChartAreas():Get(i):GetAriaLabel())
                        subChartContent:SetAriaHidden("false")
                        chartContent:Add(subChartContent)
                    //Separated, one Series per subplot should go from Chart Area then group list info for sub chart areas
                    elseif chart:IsSeparatedBySeries() and not chart:IsSeparatedByFactor()
                        subChartContent:SetID(canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode())
                        subChartContent:SetStyleClass("quorum-chart-region quorum-chart-series-list") 
                        subChartContent:SetAriaLabel(GetSubChartAreas():Get(i):GetAriaLabel())
                        subChartContent:SetAriaHidden("false")
                        chartContent:Add(subChartContent)
                    else
                        subChartContent:SetAriaHidden("true")
                    end
                else
                    chartContent:Add(subChartContent)
                end

                integer j = 0
                repeat while j < chart:GetSubChartAreas():Get(i):GetChartAreaItems():GetSize()
                    Plot plot = cast(Plot, chart:GetSubChartAreas():Get(i):GetChartAreaItems():Get(j))

                    Group plotSVG
                    plotSVG:SetID(canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + plot:GetHashCode())
                    plotSVG:SetStyleClass("quorum-chart-plot quorum-chart-plot-list")
                    plotSVG:SetFill(plot:GetColor())
                    plotSVG:SetTabIndex(-1)
                    if HasAccessibility()
                        plotSVG:SetAriaLabel(plot:GetName() + plot:GetDescription() + ".")
                        plotSVG:SetAriaHidden("false")
                    end
                    if chart:IsSeparatedBySeries() and chart:IsSeparatedByFactor()
                        chartContent:Add(plotSVG)
                    else
                        subChartContent:Add(plotSVG)
                    end

                    text plotFocus = ""
                    text plotBlur = ""

                    // The plot area, used for hover
                    Rectangle plotArea
                    plotArea:SetSize(plot:GetPlotArea():GetWidth(),plot:GetPlotArea():GetHeight())
                    plotArea:SetPosition(plot:GetPlotArea():GetGlobalX(), TranslatePositionY(plot:GetPlotArea()) - plot:GetPlotArea():GetHeight())
                    plotArea:SetFill(transparent)
                    plotArea:SetStyleClass("quorum-chart-selection-box")
                    plotArea:SetID(plotSVG:GetID() + "_box")
                    plotArea:SetTabIndex(-1)
                    if HasAccessibility()
                        plotArea:SetAriaHidden("true")
                        plotFocus = plotFocus + "gainFocus('" + plotArea:GetID() + "'); "
                        plotBlur = plotBlur + "loseFocus('" + plotArea:GetID() + "'); "
                    end 
                    plotSVG:Add(plotArea)  

                    // Add plot selection symbols here!

                    if HasAccessibility()
                        if plotFocus not= ""
                            plotSVG:SetOnFocus(plotFocus)
                        end
                        if plotBlur not= ""
                            plotSVG:SetOnBlur(plotBlur)
                        end
                    end       

                    // Plot items 
                    Array<ChartDrawable> items = plot:GetPlotItems()
                    /* Indices for items of individual box plot
                        0: PLOT AREA (ENTIRE REGION)
                        1: MINIMUM LINE
                        2: LOWER WHISKER
                        3: INTERQUARTILE RANGE
                        4: RIGHT BORDER OF IQR
                        5: LEFT BORDER OF IQR
                        6: Q1 LINE
                        7: MEDIAN LINE
                        8: Q3 LINE
                        9: UPPER WHISKER    
                        10: MAXIMUM LINE 
                        11+: OUTLIER POINTS
                    */ 
                    integer k = 1
                    repeat while k < items:GetSize()
                        ChartDrawable currentItem = items:Get(k)

                        if currentItem not= undefined //and currentItem:GetSeries() not= undefined
    
                            Group itemSVG
                            itemSVG:SetID(canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + plot:GetHashCode() + "_" + currentItem:GetHashCode())
                            itemSVG:SetStyleClass("quorum-chart-plotitem quorum-chart-plot-list")
                            itemSVG:SetFill(currentItem:GetColor())
                            itemSVG:SetTabIndex(-1)
                            if HasAccessibility()   
                                itemSVG:SetAriaLabel(currentItem:GetName() + currentItem:GetDescription())
                                itemSVG:SetAriaHidden("false")
                            end
                            if k not= 2 and k not= 4 and k not= 5 and k not= 9 // skip elements not in nav
                                plotSVG:Add(itemSVG)
                            else
                                canvas:Add(itemSVG)
                            end

                            text itemFocus = ""
                            text itemBlur = ""

                            if k > 10 and currentItem is ChartPoint// These are the outlier dots
                                Circle outlier
                                number radius = currentItem:GetHeight()/2
                                outlier:SetRadius(radius)
                                outlier:SetPosition(currentItem:GetGlobalX()+radius, TranslatePositionY(currentItem) - currentItem:GetHeight() + radius) 
                                outlier:SetFill(currentItem:GetColor())
                                outlier:SetStroke(cast(Color, currentItem:GetBorderColor()))
                                outlier:SetStrokeWidth(currentItem:GetBorderThickness())
                                outlier:SetStyleClass("quorum-chart-circle")
                                outlier:SetID(itemSVG:GetID() + "_item")
                                outlier:SetTabIndex(-1)
                                if HasAccessibility()
                                    outlier:SetAriaHidden("true")
                                    itemFocus = itemFocus + "gainFocus('" + outlier:GetID() + "'); "
                                    itemBlur = itemBlur + "loseFocus('" + outlier:GetID() + "'); "
                                end 
                                itemSVG:Add(outlier)
                            else
                                Rectangle plotLine
                                plotLine:SetSize(currentItem:GetWidth(), currentItem:GetHeight())
                                plotLine:SetPosition(currentItem:GetGlobalX(), TranslatePositionY(currentItem) - currentItem:GetHeight())
                                plotLine:SetFill(currentItem:GetColor())
                                plotLine:SetStroke(cast(Color, currentItem:GetBorderColor()))
                                plotLine:SetStrokeWidth(currentItem:GetBorderThickness())
                                plotLine:SetStyleClass("quorum-chart-rect")
                                plotLine:SetID(itemSVG:GetID() + "_item")
                                plotLine:SetTabIndex(-1)
                                if HasAccessibility() 
                                    plotLine:SetAriaHidden("true")
                                    itemFocus = itemFocus + "gainFocus('" + plotLine:GetID() + "'); "
                                    itemBlur = itemBlur + "loseFocus('" + plotLine:GetID() + "'); "
                                end 
                                itemSVG:Add(plotLine)
                            end

                            if k not= 2 and k not= 4 and k not= 5 and k not= 9 // skip elements not in nav
                                if currentItem:ShowAnnotation() or chart:ShowAnnotations()
                                    ChartLabel label = currentItem:GetAnnotation()
                                    if label not= undefined
                                        Label labelSVG
                                        labelSVG:SetText(label:GetText())
                                        labelSVG:SetTextAnchor("left")
                                        labelSVG:SetPosition(label:GetGlobalX(), TranslatePositionY(label))
                                        labelSVG:SetFontSize(label:GetFontSize() + "px")                            
                                        labelSVG:SetFontFamily("Arial")
                                        labelSVG:SetFill(cast(Color, label:GetFontColor()))
                                        labelSVG:SetID(itemSVG:GetID() + "_annotation")
                                        labelSVG:SetStyleClass("quorum-chart-text")
                                        labelSVG:SetTabIndex(-1)
                                        if HasAccessibility()
                                            labelSVG:SetAriaHidden("true")
                                            itemFocus = itemFocus + "gainFocus('" + labelSVG:GetID() + "'); "
                                            itemBlur = itemBlur + "loseFocus('" + labelSVG:GetID() + "'); "
                                        end
                                        canvas:Add(labelSVG)
                                    end
                                end 

                                // Add item selection symbols here!
                                if currentItem:GetSelectionArrow() not= undefined
                                    Array <number> vertices = currentItem:GetSelectionArrowVertices()
                                    number Yoffset = TranslatePositionY(currentItem:GetSelectionArrow())
                                    number Xoffset = currentItem:GetSelectionArrow():GetGlobalX()
            
                                    Polygon arrow
                                    integer m = 0
                                    repeat while m < vertices:GetSize()
                                        arrow:AddPoint(vertices:Get(m)+Xoffset, Yoffset+(currentItem:GetSelectionArrow():GetY()-vertices:Get(m+1)))
                                        m = m + 2
                                    end
                                    arrow:SetFill(transparent) // Should be transparent until selected 
                                    arrow:SetStyleClass("quorum-chart-selection-arrow")
                                    arrow:SetTabIndex(-1)
                                    arrow:SetID(itemSVG:GetID() + "_arrow")
                                    if HasAccessibility()
                                        arrow:SetAriaHidden("true")
                                        itemFocus = itemFocus + "gainFocus('" + arrow:GetID() + "'); "
                                        itemBlur = itemBlur + "loseFocus('" + arrow:GetID() + "'); "
                                    end
                                    canvas:Add(arrow)
                                end

                                if currentItem:GetSelectionBracket():GetSize() = 3
                                    integer m = 0
                                    repeat while m < currentItem:GetSelectionBracket():GetSize()
                                        Rectangle bracket
                                        bracket:SetWidth(currentItem:GetSelectionBracket():Get(m):GetWidth())
                                        bracket:SetHeight(currentItem:GetSelectionBracket():Get(m):GetHeight())
                                        bracket:SetPosition(currentItem:GetSelectionBracket():Get(m):GetGlobalX(), TranslatePositionY(currentItem:GetSelectionBracket():Get(m)) - currentItem:GetSelectionBracket():Get(m):GetHeight()) 
                                        bracket:SetFill(transparent) // Should be transparent until selected
                                        bracket:SetStyleClass("quorum-chart-selection-bracket")
                                        bracket:SetTabIndex(-1)
                                        bracket:SetID(itemSVG:GetID() + "_bracket" + m)
                                        if HasAccessibility()
                                            bracket:SetAriaHidden("true")
                                            itemFocus = itemFocus + "gainFocus('" + bracket:GetID() + "'); "
                                            itemBlur = itemBlur + "loseFocus('" + bracket:GetID() + "'); "
                                        end
                                        canvas:Add(bracket)    
                                        m = m + 1
                                    end
                                end
                            end
        
                            if HasAccessibility()
                                if itemFocus not= ""
                                    itemSVG:SetOnFocus(itemFocus)
                                end
                                if itemBlur not= ""
                                    itemSVG:SetOnBlur(itemBlur)
                                end
                            end 
                        end
                        k = k + 1
                    end 
                    j = j + 1
                end
                i = i + 1
            end
        end
    end

    action AddChartContentAccessibility(ScalableVectorGraphics canvas, Chart chart, ChartAreaPanel chartArea, ListItem chartAreaItem)
        BoxPlot boxPlot
        boxPlot = cast(BoxPlot, chart)

        if not chart:IsSeparated()
            Array<PlotGroup> plotGroups = boxPlot:GetPlotGroups()
    
            UnorderedList plotGroupsUL
            plotGroupsUL:AddAttribute("role","group")
            plotGroupsUL:AddClassAttribute("quorum-chart-group")
            chartAreaItem:AddNestedTag(plotGroupsUL)
            
            UnorderedList currentGrouping = plotGroupsUL
            integer i = 0
            repeat while i < plotGroups:GetSize()
                if boxPlot:HasGroups()
                    ListItem plotGroupNav 
                    plotGroupNav:SetIdentifier(canvas:GetID() + "_" + plotGroups:Get(i):GetHashCode() + "_nav")
                    plotGroupNav:AddAttribute("role","treeitem")
                    plotGroupNav:AddClassAttribute("quorum-chart-treeitem")
                    plotGroupNav:AddAttribute("aria-labelledby",canvas:GetID() + "_" + plotGroups:Get(i):GetHashCode())
                    plotGroupNav:AddAttribute("aria-expanded","false")
                    plotGroupNav:SetTabIndex("-1")
                    plotGroupsUL:Add(plotGroupNav)
        
                    
                    UnorderedList plotsUL
                    plotsUL:AddAttribute("role","group")
                    plotsUL:AddClassAttribute("quorum-chart-group")
                    plotGroupNav:AddNestedTag(plotsUL)
                    currentGrouping = plotsUL
                end
            
                integer j = 0
                repeat while j < plotGroups:Get(i):GetSize()
                    Plot plot = plotGroups:Get(i):Get(j)
                    ListItem plotNav 
                    plotNav:SetIdentifier(canvas:GetID() + "_" + plot:GetSeries():GetHashCode() + "_" + plot:GetHashCode() + "_nav")
                    plotNav:AddAttribute("role","treeitem")
                    plotNav:AddClassAttribute("quorum-chart-treeitem")
                    plotNav:AddAttribute("aria-labelledby",canvas:GetID() + "_" + plot:GetSeries():GetHashCode() + "_" + plot:GetHashCode())
                    plotNav:AddAttribute("aria-expanded","false")
                    plotNav:SetTabIndex("-1")
                    currentGrouping:Add(plotNav)

                    UnorderedList itemsUL
                    itemsUL:AddAttribute("role","group")
                    itemsUL:AddClassAttribute("quorum-chart-group")
                    plotNav:AddNestedTag(itemsUL)

                    integer k = 1
                    repeat while k < plot:GetPlotItems():GetSize()
                        // Add navigation for all parts.
                        if k not= 2 and k not= 4 and k not= 5 and k not= 9 // Skip the elements not included in the navigation
                            ListItem itemNav 
                            itemNav:SetIdentifier(canvas:GetID() + "_" + plot:GetSeries():GetHashCode() + "_" + plot:GetHashCode() + "_" + plot:GetPlotItems():Get(k):GetHashCode() + "_nav")
                            itemNav:AddAttribute("role","treeitem")
                            itemNav:AddClassAttribute("quorum-chart-treeitem")
                            itemNav:AddAttribute("aria-labelledby",canvas:GetID() + "_" + plot:GetSeries():GetHashCode() + "_" + plot:GetHashCode() + "_" + plot:GetPlotItems():Get(k):GetHashCode())
                            itemNav:SetTabIndex("-1")
                            itemsUL:Add(itemNav)
                        end
                        k = k + 1
                    end
                    j = j + 1
                end
                i = i + 1
            end
        else
            UnorderedList subChartAreaItemsUL
            subChartAreaItemsUL:AddAttribute("role","group")
            subChartAreaItemsUL:AddClassAttribute("quorum-chart-group")
            chartAreaItem:AddNestedTag(subChartAreaItemsUL)

            integer i = 0
            repeat while i < chartArea:GetChartAreaItems():GetSize()
                Plot plot = cast(Plot, chartArea:GetChartAreaItems():Get(i))

                ListItem plotNav 
                plotNav:SetIdentifier(canvas:GetID() + "_" + chartArea:GetHashCode() + "_" + plot:GetHashCode() + "_nav")
                plotNav:AddAttribute("role","treeitem")
                plotNav:AddClassAttribute("quorum-chart-treeitem")
                plotNav:AddAttribute("aria-labelledby",canvas:GetID() + "_" + chartArea:GetHashCode() + "_" + plot:GetHashCode())
                plotNav:AddAttribute("aria-expanded","false")
                plotNav:SetTabIndex("-1")
                subChartAreaItemsUL:Add(plotNav)

                UnorderedList itemsUL
                itemsUL:AddAttribute("role","group")
                itemsUL:AddClassAttribute("quorum-chart-group")
                plotNav:AddNestedTag(itemsUL)

                integer k = 1
                repeat while k < plot:GetPlotItems():GetSize()
                    // Add navigation for all parts.
                    if k not= 2 and k not= 4 and k not= 5 and k not= 9// Skip the elements not included in the navigation
                        ListItem itemNav 
                        itemNav:SetIdentifier(canvas:GetID() + "_" + chartArea:GetHashCode() + "_" + plot:GetHashCode() + "_" + plot:GetPlotItems():Get(k):GetHashCode() + "_nav")
                        itemNav:AddAttribute("role","treeitem")
                        itemNav:AddClassAttribute("quorum-chart-treeitem")
                        itemNav:AddAttribute("aria-labelledby",canvas:GetID() + "_" + chartArea:GetHashCode() + "_" + plot:GetHashCode() + "_" + plot:GetPlotItems():Get(k):GetHashCode())
                        itemNav:SetTabIndex("-1")
                        itemsUL:Add(itemNav)
                    end
                    k = k + 1
                end
                i = i + 1
            end
        end
    end


    action AddOrderingList(Division division, ScalableVectorGraphics canvas, Chart chart)
        //Not sure what other ordering would be best for box plots.
    end
end
