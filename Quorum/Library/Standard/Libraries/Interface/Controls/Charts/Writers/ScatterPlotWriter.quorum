package Libraries.Interface.Controls.Charts

use Libraries.System.File
use Libraries.Interface.Controls.Charts.ScatterPlot
use Libraries.Data.Formats.ScalableVectorGraphics.ScalableVectorGraphics
use Libraries.Data.Formats.ScalableVectorGraphics.Line
use Libraries.Containers.Array
use Libraries.Data.Formats.ScalableVectorGraphics.Rectangle
use Libraries.Data.Formats.ScalableVectorGraphics.Label
use Libraries.System.FileWriter
use Libraries.Compute.Math
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Game.Graphics.Color
use Libraries.Web.Page.Script
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.ListItem
use Libraries.Interface.Item
use Libraries.Interface.Controls.Icon
use Libraries.Data.Formats.ScalableVectorGraphics.Circle
use Libraries.Data.Formats.ScalableVectorGraphics.Group
use Libraries.Web.Page.Division
use Libraries.Interface.Controls.Charts.Graphics.ChartDrawable
use Libraries.Interface.Controls.Charts.Graphics.RegressionLine
use Libraries.Data.Formats.ScalableVectorGraphics.Polygon

/*
    The ScatterPlotWriter class is part of the set of writers that allow for Charts
    to save their representation in the form ScalableVectorGraphics. This class will write out
    all of the necessary text needed to write out an SVG file that will contain the chart.

    Attribute: Author Tim Kluthe

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.ScatterPlot
    use Libraries.Interface.Controls.Charts.ScatterPlotWriter
    
    DataFrame frame
    frame:Load("Data.csv")
    frame:SetSelectedColumnRange(0,1)
    ScatterPlot chart = frame:ScatterPlot()
    chart:SetTitle("My Awesome Title")
    chart:SetXAxisTitle("Time")
    chart:Display()

    ScatterPlotWriter writer
    output writer:WriteOutChart(chart)
*/

class ScatterPlotWriter is ChartWriter

    action WriteOutChart(ScatterPlot chart, integer svgWidth, integer svgHeight) returns text
        return WriteOutChart(cast(Chart,chart), svgWidth, svgHeight)
    end

    action WriteOutChart(ScatterPlot chart, File file, integer svgWidth, integer svgHeight)
        WriteOutChart(cast(Chart,chart), file, svgWidth, svgHeight)
    end

    action WriteOutChart(ScatterPlot chart) returns text
        return WriteOutChart(cast(Chart,chart))
    end

    action WriteOutChart(ScatterPlot chart, File file)
        WriteOutChart(cast(Chart,chart), file)
    end

    /*
        This action adds a white background to the canvas
    */
    action AddChartArea(ScalableVectorGraphics canvas, Chart chart)
        parent:ChartWriter:AddChartArea(canvas,chart)
        
        ScatterPlot scatterplot
        scatterplot = cast(ScatterPlot, chart)

        if HasAccessibility()
            GetChartArea():SetAriaLabel("Chart Area " + scatterplot:GetChartArea():GetDescription())
        end
    end

    /*
        This action adds the content of the ScatterPlot
    */
    private action AddChartContent(ScalableVectorGraphics canvas, Chart chart)
        ScatterPlot scatterplot
        scatterplot = cast(ScatterPlot, chart)
        AddPoints(canvas, scatterplot)
        if chart:IsShowingLinearRegression()
            AddRegressionLines(canvas, chart)
        end
    end

    /*
        This action adds the content of the ScatterPlot to the SVG
    */
    private action AddPoints(ScalableVectorGraphics canvas, ScatterPlot chart)
        Color transparent
        transparent:SetColor(0, 0, 0, 0)
        
        Group chartContent
        chartContent:SetSize(GetChartArea():GetWidth(),GetChartArea():GetHeight())
        chartContent:SetPosition(GetChartArea():GetPositionX(),GetChartArea():GetPositionY())
        chartContent:SetTabIndex(0)
        chartContent:SetStyleClass("quorum-chart-region quorum-chart-area")
        chartContent:SetIsOneLine(true)
        chartContent:SetRole("application")
        canvas:Add(chartContent)

        Rectangle chartContentBoundingBox
        chartContentBoundingBox:SetSize(GetChartArea():GetWidth(), GetChartArea():GetHeight())
        chartContentBoundingBox:SetPosition(GetChartArea():GetPositionX(), GetChartArea():GetPositionY())
        chartContentBoundingBox:SetFill(transparent)
        chartContentBoundingBox:SetStroke(transparent)
        chartContentBoundingBox:SetTabIndex(-1)
        if HasAccessibility()
            chartContentBoundingBox:SetAriaHidden("true")
            chartContent:SetAriaLabel(chart:GetChartArea():GetName() + " " + chart:GetChartArea():GetDescription())
            chartContent:SetAriaHidden("false")
        end
        chartContent:Add(chartContentBoundingBox)

        if not chart:IsSeparated()
            i = 0
            repeat while i < chart:GetSeriesList():GetSize()
                Series currentSeries = chart:GetSeriesList():Get(i)

                if currentSeries:GetSize() > 0
                    Group seriesSVG
                    seriesSVG:SetID(canvas:GetID() + "_" + currentSeries:GetHashCode())
                    seriesSVG:SetStyleClass("quorum-chart-scatter-series quorum-chart-series-list")
                    seriesSVG:SetFill(cast(Color, chart:GetSelectionColor()))
                    seriesSVG:SetTabIndex(-1)
                    if HasAccessibility()
                        seriesSVG:SetRole("application")
                        seriesSVG:SetAriaLabel(currentSeries:GetName() + currentSeries:GetDescription())
                        seriesSVG:SetAriaHidden("false")
                    end
                    if chart:GetSeriesList():GetSize() > 1
                        chartContent:Add(seriesSVG)
                    end
                    text seriesFocus = ""
                    text seriesBlur = ""

                    if HasAccessibility()
                        RegressionLine line = currentSeries:GetRegressionLine()
                        if line not= undefined
                            seriesFocus = seriesFocus + "gainFocus('" + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_regression" + "'); "
                            seriesBlur = seriesBlur + "loseFocus('" + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_regression" + "'); "
                        end

                        Icon entryBox = currentSeries:GetEntryBox()
            
                        if entryBox not= undefined and entryBox:IsShowing()
                            seriesFocus = seriesFocus + "gainFocus('" + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_legend" + "'); "
                            seriesBlur = seriesBlur + "loseFocus('" + canvas:GetID() + "_" + currentSeries:GetHashCode() + "_legend" + "'); "
                        end
                    end

                    j = 0
                    repeat while j < currentSeries:GetSize()
                        if currentSeries:GetItemAt(j) is ChartPoint
                            ChartPoint currentPoint = cast(ChartPoint, currentSeries:GetItemAt(j))
                            number radius = currentPoint:GetHeight()/2

                            Group pointSVG
                            pointSVG:SetID(canvas:GetID() + "_" + currentPoint:GetSeries():GetHashCode() + "_" + currentPoint:GetHashCode())
                            pointSVG:SetStyleClass("quorum-chart-point quorum-chart-point-list")
                            pointSVG:SetFill(currentPoint:GetColor())
                            pointSVG:SetTabIndex(-1)
                            if HasAccessibility()
                                pointSVG:SetRole("application")
                                pointSVG:SetAriaLabel(currentPoint:GetName() + currentPoint:GetDescription())
                                pointSVG:SetAriaHidden("false")
                            end
                            if chart:GetSeriesList():GetSize() > 1
                                seriesSVG:Add(pointSVG)
                            else
                                chartContent:Add(pointSVG)
                            end
                            text pointFocus = ""
                            text pointBlur = ""

                            Circle point
                            point:SetRadius(radius)
                            point:SetPosition(currentPoint:GetGlobalX()+radius, TranslatePositionY(currentPoint)) 
                            point:SetFill(currentPoint:GetColor())
                            point:SetStroke(cast(Color, currentPoint:GetBorderColor()))
                            point:SetStrokeWidth(currentPoint:GetBorderThickness())
                            point:SetID(pointSVG:GetID() + "_point")
                            point:SetStyleClass("quorum-chart-circle")
                            point:SetTabIndex(-1)
                            if HasAccessibility()
                                point:SetAriaHidden("true")
                                pointFocus = pointFocus + "gainFocus('" + point:GetID() + "'); "
                                pointBlur = pointBlur + "loseFocus('" + point:GetID() + "'); "
                            end
                            pointSVG:Add(point)
                            
                
                            if currentPoint:ShowAnnotation() or chart:ShowAnnotations()
                                ChartLabel label = currentPoint:GetAnnotation()
                                if label not= undefined
                                    Label labelSVG
                                    labelSVG:SetText(label:GetText())
                                    labelSVG:SetTextAnchor("left")
                                    labelSVG:SetPosition(label:GetGlobalX(), TranslatePositionY(label))
                                    labelSVG:SetFontSize(label:GetFontSize() + "px")
                                    labelSVG:SetFontFamily("Arial")
                                    labelSVG:SetFill(cast(Color, label:GetFontColor()))
                                    labelSVG:SetID(pointSVG:GetID() + "_annotation")
                                    labelSVG:SetStyleClass("quorum-chart-text")
                                    labelSVG:SetTabIndex(-1)
                                    if HasAccessibility()
                                        labelSVG:SetAriaHidden("true")
                                        pointFocus = pointFocus + "gainFocus('" + labelSVG:GetID() + "'); "
                                        pointBlur = pointBlur + "loseFocus('" + labelSVG:GetID() + "'); "
                                    end
                                    canvas:Add(labelSVG)
                                end
                            end

                            if currentPoint:GetSelectionArrow() not= undefined
                                Array <number> vertices = currentPoint:GetSelectionArrowVertices()
                                number Yoffset = TranslatePositionY(currentPoint:GetSelectionArrow())
                                number Xoffset = currentPoint:GetSelectionArrow():GetGlobalX()
        
                                Polygon arrow
                                integer m = 0
                                repeat while m < vertices:GetSize()
                                    arrow:AddPoint(vertices:Get(m)+Xoffset, Yoffset+(currentPoint:GetSelectionArrow():GetY()-vertices:Get(m+1)))
                                    m = m + 2
                                end
                                arrow:SetFill(transparent) // Should be transparent until selected 
                                arrow:SetStyleClass("quorum-chart-selection-arrow")
                                arrow:SetTabIndex(-1)
                                arrow:SetID(pointSVG:GetID() + "_arrow")
                                if HasAccessibility()
                                    arrow:SetAriaHidden("true")
                                    pointFocus = pointFocus + "gainFocus('" + arrow:GetID() + "'); "
                                    pointBlur = pointBlur + "loseFocus('" + arrow:GetID() + "'); "
                                end
                                canvas:Add(arrow)
                            end

                            if HasAccessibility()
                                if pointFocus not= ""
                                    pointSVG:SetOnFocus(pointFocus)
                                end
                                if pointBlur not= ""
                                    pointSVG:SetOnBlur(pointBlur)
                                end
                            end 
                        end
                        j = j + 1
                    end

                    if HasAccessibility()
                        if seriesFocus not= ""
                            seriesSVG:SetOnFocus(seriesFocus)
                        end
                        if seriesBlur not= ""
                            seriesSVG:SetOnBlur(seriesBlur)
                        end
                    end            
                end
           
                i = i + 1
            end
        else
            i = 0
            repeat while i < chart:GetSubChartAreas():GetSize()
                Group subChartContent
                subChartContent:SetSize(GetSubChartAreas():Get(i):GetWidth(), GetSubChartAreas():Get(i):GetHeight())
                subChartContent:SetPosition(GetSubChartAreas():Get(i):GetPositionX(), GetSubChartAreas():Get(i):GetPositionY())
                subChartContent:SetTabIndex(-1)
                subChartContent:SetStyleClass("quorum-chart-region")

                Rectangle subChartContentBoundingBox
                subChartContentBoundingBox:SetSize(GetSubChartAreas():Get(i):GetWidth(), GetSubChartAreas():Get(i):GetHeight())
                subChartContentBoundingBox:SetPosition(GetSubChartAreas():Get(i):GetPositionX(), GetSubChartAreas():Get(i):GetPositionY())
                subChartContentBoundingBox:SetFill(transparent)
                subChartContentBoundingBox:SetStroke(transparent)
                subChartContentBoundingBox:SetTabIndex(-1)
                if HasAccessibility()
                    subChartContentBoundingBox:SetAriaHidden("true")
                end
                

                if HasAccessibility()
                    //Separated, by the Factor levels with multiple Series per subplot
                    if not chart:IsSeparatedBySeries() and chart:IsSeparatedByFactor()
                        subChartContent:SetID(canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode())
                        subChartContent:SetStyleClass("quorum-chart-region quorum-chart-scatter-series quorum-chart-category-list") 
                        subChartContent:SetAriaLabel(GetSubChartAreas():Get(i):GetAriaLabel())
                        subChartContent:SetRole("application")
                        subChartContent:SetAriaHidden("false")
                        chartContent:Add(subChartContent)
                    //Separated, one Series per subplot should go from Chart Area then group list info for sub chart areas
                    elseif chart:IsSeparatedBySeries() and not chart:IsSeparatedByFactor()
                        subChartContent:SetID(canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode())
                        subChartContent:SetStyleClass("quorum-chart-region quorum-chart-scatter-series quorum-chart-series-list") 
                        subChartContent:SetAriaLabel(GetSubChartAreas():Get(i):GetAriaLabel())
                        subChartContent:SetRole("application")
                        subChartContent:SetAriaHidden("false")
                        chartContent:Add(subChartContent)
                    else
                        subChartContent:SetAriaHidden("true")
                    end
                else
                    chartContent:Add(subChartContent)
                end

                text seriesFocus = ""
                text seriesBlur = ""

                if HasAccessibility()
                    RegressionLine line = chart:GetSubChartAreas():Get(i):GetSeries():GetRegressionLine()
                    if line not= undefined
                        seriesFocus = seriesFocus + "gainFocus('" + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetSeries():GetHashCode() + "_regression" + "'); "
                        seriesBlur = seriesBlur + "loseFocus('" + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetSeries():GetHashCode() + "_regression" + "'); "
                    end
                    //seriesFocus = seriesFocus + "gainFocusPoints('" + canvas:GetID() + "_" + currentSeries:GetHashCode() + "'); "
                    //seriesBlur = seriesBlur + "loseFocusPoints('" + canvas:GetID() + "_" + currentSeries:GetHashCode() + "'); "
                end

                j = 0
                repeat while j < chart:GetSubChartAreas():Get(i):GetChartAreaItems():GetSize()
                    if (chart:GetSubChartAreas():Get(i):GetChartAreaItems():Get(j) is ChartPoint)
                        ChartPoint currentPoint = cast(ChartPoint, chart:GetSubChartAreas():Get(i):GetChartAreaItems():Get(j))
                        number radius = currentPoint:GetHeight()/2
            
                        Group pointSVG
                        pointSVG:SetID(canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + currentPoint:GetHashCode())
                        pointSVG:SetStyleClass("quorum-chart-point quorum-chart-point-list")
                        pointSVG:SetFill(currentPoint:GetColor())
                        pointSVG:SetTabIndex(-1)
                        if HasAccessibility()
                            pointSVG:SetRole("application")
                            pointSVG:SetAriaLabel(currentPoint:GetName() + currentPoint:GetDescription())
                            pointSVG:SetAriaHidden("false")
                        end
                        subChartContent:Add(pointSVG)

                        text pointFocus = ""
                        text pointBlur = ""

                        Circle point
                        point:SetRadius(radius)
                        point:SetPosition(currentPoint:GetGlobalX()+radius, TranslatePositionY(currentPoint)) 
                        point:SetFill(currentPoint:GetColor())
                        point:SetStroke(cast(Color, currentPoint:GetBorderColor()))
                        point:SetStrokeWidth(currentPoint:GetBorderThickness())
                        point:SetID(pointSVG:GetID() + "_point")
                        point:SetStyleClass("quorum-chart-circle")
                        point:SetTabIndex(-1)
                        if HasAccessibility()
                            point:SetAriaHidden("true")
                            pointFocus = pointFocus + "gainFocus('" + point:GetID() + "'); "
                            pointBlur = pointBlur + "loseFocus('" + point:GetID() + "'); "
                        end
                        pointSVG:Add(point)
            
            
                        if currentPoint:ShowAnnotation() or chart:ShowAnnotations()
                            ChartLabel label = currentPoint:GetAnnotation()
                            if label not= undefined
                                Label labelSVG
                                labelSVG:SetText(label:GetText())
                                labelSVG:SetTextAnchor("left")
                                labelSVG:SetPosition(label:GetGlobalX(), TranslatePositionY(label))
                                labelSVG:SetFontSize(label:GetFontSize() + "px")
                                labelSVG:SetFontFamily("Arial")
                                labelSVG:SetFill(cast(Color, label:GetFontColor()))
                                labelSVG:SetID(pointSVG:GetID() + "_annotation")
                                labelSVG:SetStyleClass("quorum-chart-text")
                                labelSVG:SetTabIndex(-1)
                                if HasAccessibility()
                                    labelSVG:SetAriaHidden("true")
                                    pointFocus = pointFocus + "gainFocus('" + labelSVG:GetID() + "'); "
                                    pointBlur = pointBlur + "loseFocus('" + labelSVG:GetID() + "'); "
                                end
                                canvas:Add(labelSVG)
                            end
                        end
                        
                        if HasAccessibility()
                            if pointFocus not= ""
                                pointSVG:SetOnFocus(pointFocus)
                            end
                            if pointBlur not= ""
                                pointSVG:SetOnBlur(pointBlur)
                            end
                        end 
                    end
                    j = j + 1
                end

                if HasAccessibility()
                    if seriesFocus not= ""
                        subChartContent:SetOnFocus(seriesFocus)
                    end
                    if seriesBlur not= ""
                        subChartContent:SetOnBlur(seriesBlur)
                    end
                end   

                i = i + 1
            end
        end
    end

    action AddOrderingList(Division division, ScalableVectorGraphics canvas, Chart chart)
        ScatterPlot scatterplot
        scatterplot = cast(ScatterPlot, chart)
        Script script

        text scriptText = ""
        text newLine = scriptText:GetLineFeed()
        text tab = scriptText:GetTab()
        text dq = scriptText:GetDoubleQuote()

        scriptText = newLine + "if (typeof quorum_chart_value_order == 'undefined' || quorum_chart_value_order == null)" + newLine
        scriptText = scriptText  + tab + "var quorum_chart_value_order = {};" + newLine + newLine

        //Ordered list for X values
        scriptText = scriptText + "quorum_chart_value_order." + canvas:GetID() + "_x" + " = {" + newLine

        if chart:IsSeparated()
            Array<ChartAreaPanel> subChartAreas = scatterplot:GetSubChartAreas()
            ChartPointComparison comparison
            comparison:SetAscending(true)
            comparison:SetSortByX(true)
            if subChartAreas:GetSize() > 0
                i = 0
                repeat while i < subChartAreas:GetSize() - 1
                    if subChartAreas:Get(i):GetChartAreaItems():GetSize() > 0
                        Array<ChartItem> chartAreaItems = subChartAreas:Get(i):GetChartAreaItems():CopyToArray()
                        if chartAreaItems:GetSize() > 0
                            chartAreaItems:Sort(comparison)
                            scriptText = scriptText + tab + canvas:GetID() + "_" + subChartAreas:Get(i):GetHashCode() + ": {" + newLine
                            j = 0
                            repeat while j < chartAreaItems:GetSize() - 1
                                if chartAreaItems:Get(j) is ChartPoint
                                    ChartPoint currentPoint = cast(ChartPoint, chartAreaItems:Get(j))
                                    scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + currentPoint:GetHashCode() + ": " + currentPoint:GetValueX() + "," + newLine
                                end
                                j = j + 1
                            end
        
                            if chartAreaItems:Get(j) is ChartPoint
                                ChartPoint lastPoint = cast(ChartPoint, chartAreaItems:Get(j))
                                scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + lastPoint:GetHashCode() + ": " + lastPoint:GetValueX() + newLine
                                scriptText = scriptText + tab + "}," + newLine
                            end
                        end
                    end
                    i = i + 1
                end
    
                if subChartAreas:Get(i):GetChartAreaItems():GetSize() > 0
                    Array<ChartItem> chartAreaItems = subChartAreas:Get(i):GetChartAreaItems():CopyToArray()
                    if chartAreaItems:GetSize() > 0
                        chartAreaItems:Sort(comparison)
                        scriptText = scriptText + tab + canvas:GetID() + "_" + subChartAreas:Get(i):GetHashCode() + ": {" + newLine
                        j = 0
                        repeat while j < chartAreaItems:GetSize() - 1
                            if chartAreaItems:Get(j) is ChartPoint
                                ChartPoint currentPoint = cast(ChartPoint, chartAreaItems:Get(j))
                                scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + currentPoint:GetHashCode() + ": " + currentPoint:GetValueX() + "," + newLine
                            end
                            j = j + 1
                        end
        
                        if chartAreaItems:Get(j) is ChartPoint
                            ChartPoint lastPoint = cast(ChartPoint, chartAreaItems:Get(j))
                            scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + lastPoint:GetHashCode() + ": " + lastPoint:GetValueX() + newLine
                            scriptText = scriptText + tab + "}" + newLine
                        end
                    end
                end
            end
        else
            Array<Series> seriesList = scatterplot:GetSeriesList()
            ChartPointComparison comparison
            comparison:SetAscending(true)
            comparison:SetSortByX(true)
            
            if seriesList:GetSize() > 0
                i = 0
                repeat while i < seriesList:GetSize() - 1
                    Array<ChartDrawable> chartAreaItems = seriesList:Get(i):GetChartAreaItems():CopyToArray()
                    if chartAreaItems:GetSize() > 0
                        chartAreaItems:Sort(comparison)
                        scriptText = scriptText + tab + canvas:GetID() + "_" + seriesList:Get(i):GetHashCode() + ": {" + newLine
                        j = 0
                        repeat while j < chartAreaItems:GetSize() - 1
                            if chartAreaItems:Get(j) is ChartPoint
                                ChartPoint currentPoint = cast(ChartPoint, chartAreaItems:Get(j))
                                scriptText = scriptText + tab + canvas:GetID() + "_" + seriesList:Get(i):GetHashCode() + "_" + currentPoint:GetHashCode() + ": " + currentPoint:GetValueX() + "," + newLine
                            end
                            j = j + 1
                        end
                        
                        if chartAreaItems:Get(j) is ChartPoint
                            ChartPoint lastPoint = cast(ChartPoint, chartAreaItems:Get(j))
                            scriptText = scriptText + tab + canvas:GetID() + "_" + seriesList:Get(i):GetHashCode() + "_" + lastPoint:GetHashCode() + ": " + lastPoint:GetValueX() + newLine
                            scriptText = scriptText + tab + "}," + newLine
                        end
                    end
                    i = i + 1
                end
    
                Array<ChartDrawable> chartAreaItems = seriesList:Get(i):GetChartAreaItems():CopyToArray()
                chartAreaItems:Sort(comparison)
                if seriesList:GetSize() > 1
                    scriptText = scriptText + tab + canvas:GetID() + "_" + seriesList:Get(i):GetHashCode() + ": {" + newLine
                end
                j = 0
                repeat while j < chartAreaItems:GetSize() - 1
                    if chartAreaItems:Get(j) is ChartPoint
                        ChartPoint currentPoint = cast(ChartPoint, chartAreaItems:Get(j))
                        scriptText = scriptText + tab + canvas:GetID() + "_" + seriesList:Get(i):GetHashCode() + "_" + currentPoint:GetHashCode() + ": " + currentPoint:GetValueX() + "," + newLine
                    end
                    j = j + 1
                end
               
                if chartAreaItems:Get(j) is ChartPoint
                    ChartPoint lastPoint = cast(ChartPoint, chartAreaItems:Get(j))
                    scriptText = scriptText + tab + canvas:GetID() + "_" + seriesList:Get(i):GetHashCode() + "_" + lastPoint:GetHashCode() + ": " + lastPoint:GetValueX() + newLine
                    
                    if seriesList:GetSize() > 1
                        scriptText = scriptText + tab + "}" + newLine
                    end
                end
            end
        end
        scriptText = scriptText + "};" + newLine + newLine

        //Ordered list for Y values
        scriptText = scriptText + "quorum_chart_value_order." + canvas:GetID() + "_y" + " = {" + newLine

        if chart:IsSeparated()
            Array<ChartAreaPanel> subChartAreas = scatterplot:GetSubChartAreas()
            ChartPointComparison comparison
            comparison:SetAscending(true)
            comparison:SetSortByY(true)
            if subChartAreas:GetSize() > 0
                i = 0
                repeat while i < subChartAreas:GetSize() - 1
                    if subChartAreas:Get(i):GetChartAreaItems():GetSize() > 0
                        Array<ChartItem> chartAreaItems = subChartAreas:Get(i):GetChartAreaItems():CopyToArray()
                        if chartAreaItems:GetSize() > 0
                            chartAreaItems:Sort(comparison)
                            scriptText = scriptText + tab + canvas:GetID() + "_" + subChartAreas:Get(i):GetHashCode() + ": {" + newLine
                            j = 0
                            repeat while j < chartAreaItems:GetSize() - 1
                                if chartAreaItems:Get(j) is ChartPoint
                                    ChartPoint currentPoint = cast(ChartPoint, chartAreaItems:Get(j))
                                    scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + currentPoint:GetHashCode() + ": " + currentPoint:GetValueY() + "," + newLine
                                end
                                j = j + 1
                            end
        
                            if chartAreaItems:Get(j) is ChartPoint
                                ChartPoint lastPoint = cast(ChartPoint, chartAreaItems:Get(j))
                                scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + lastPoint:GetHashCode() + ": " + lastPoint:GetValueY() + newLine
                                scriptText = scriptText + tab + "}," + newLine
                            end
                        end
                    end
                    i = i + 1
                end
    
                if subChartAreas:Get(i):GetChartAreaItems():GetSize() > 0
                    Array<ChartItem> chartAreaItems = subChartAreas:Get(i):GetChartAreaItems():CopyToArray()
                    if chartAreaItems:GetSize() > 0
                        chartAreaItems:Sort(comparison)
                        scriptText = scriptText + tab + canvas:GetID() + "_" + subChartAreas:Get(i):GetHashCode() + ": {" + newLine
                        j = 0
                        repeat while j < chartAreaItems:GetSize() - 1
                            if chartAreaItems:Get(j) is ChartPoint
                                ChartPoint currentPoint = cast(ChartPoint, chartAreaItems:Get(j))
                                scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + currentPoint:GetHashCode() + ": " + currentPoint:GetValueY() + "," + newLine
                            end
                            j = j + 1
                        end
        
                        if chartAreaItems:Get(j) is ChartPoint
                            ChartPoint lastPoint = cast(ChartPoint, chartAreaItems:Get(j))
                            scriptText = scriptText + tab + tab + canvas:GetID() + "_" + chart:GetSubChartAreas():Get(i):GetHashCode() + "_" + lastPoint:GetHashCode() + ": " + lastPoint:GetValueY() + newLine
                            scriptText = scriptText + tab + "}" + newLine
                        end
                    end
                end
            end
        else
            Array<Series> seriesList = scatterplot:GetSeriesList()
            ChartPointComparison comparison
            comparison:SetAscending(true)
            comparison:SetSortByY(true)
            
            if seriesList:GetSize() > 0
                i = 0
                repeat while i < seriesList:GetSize() - 1
                    Array<ChartDrawable> chartAreaItems = seriesList:Get(i):GetChartAreaItems():CopyToArray()
                    if chartAreaItems:GetSize() > 0
                        chartAreaItems:Sort(comparison)
                        scriptText = scriptText + tab + canvas:GetID() + "_" + seriesList:Get(i):GetHashCode() + ": {" + newLine
                        j = 0
                        repeat while j < chartAreaItems:GetSize() - 1
                            if chartAreaItems:Get(j) is ChartPoint
                                ChartPoint currentPoint = cast(ChartPoint, chartAreaItems:Get(j))
                                scriptText = scriptText + tab + canvas:GetID() + "_" + seriesList:Get(i):GetHashCode() + "_" + currentPoint:GetHashCode() + ": " + currentPoint:GetValueY() + "," + newLine
                            end
                            j = j + 1
                        end
                        
                        if chartAreaItems:Get(j) is ChartPoint
                            ChartPoint lastPoint = cast(ChartPoint, chartAreaItems:Get(j))
                            scriptText = scriptText + tab + canvas:GetID() + "_" + seriesList:Get(i):GetHashCode() + "_" + lastPoint:GetHashCode() + ": " + lastPoint:GetValueY() + newLine
                            scriptText = scriptText + tab + "}," + newLine
                        end
                    end
                    i = i + 1
                end
    
                Array<ChartDrawable> chartAreaItems = seriesList:Get(i):GetChartAreaItems():CopyToArray()
                chartAreaItems:Sort(comparison)
                if seriesList:GetSize() > 1
                    scriptText = scriptText + tab + canvas:GetID() + "_" + seriesList:Get(i):GetHashCode() + ": {" + newLine
                end
                j = 0
                repeat while j < chartAreaItems:GetSize() - 1
                    if chartAreaItems:Get(j) is ChartPoint
                        ChartPoint currentPoint = cast(ChartPoint, chartAreaItems:Get(j))
                        scriptText = scriptText + tab + canvas:GetID() + "_" + seriesList:Get(i):GetHashCode() + "_" + currentPoint:GetHashCode() + ": " + currentPoint:GetValueY() + "," + newLine
                    end
                    j = j + 1
                end
               
                if chartAreaItems:Get(j) is ChartPoint
                    ChartPoint lastPoint = cast(ChartPoint, chartAreaItems:Get(j))
                    scriptText = scriptText + tab + canvas:GetID() + "_" + seriesList:Get(i):GetHashCode() + "_" + lastPoint:GetHashCode() + ": " + lastPoint:GetValueY() + newLine
                    if seriesList:GetSize() > 1
                        scriptText = scriptText + tab + "}" + newLine
                    end
                end
            end
        end

        scriptText = scriptText + "};" + newLine + newLine

        script:AddText(scriptText)
        division:Add(script)
    end
end