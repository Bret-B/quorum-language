package Libraries.Interface.Controls.Charts

use Libraries.System.File
use Libraries.Interface.Controls.Charts.ViolinPlot
use Libraries.Data.Formats.ScalableVectorGraphics.ScalableVectorGraphics
use Libraries.Data.Formats.ScalableVectorGraphics.Line
use Libraries.Containers.Array
use Libraries.Data.Formats.ScalableVectorGraphics.Rectangle
use Libraries.Data.Formats.ScalableVectorGraphics.Label
use Libraries.Data.Formats.ScalableVectorGraphics.Circle
use Libraries.System.FileWriter
use Libraries.Compute.Math
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Charts.ChartPoint
use Libraries.Compute.Vector
use Libraries.Interface.Layouts.ViolinPlotLayout
use Libraries.Game.Graphics.Color
use Libraries.Web.Page.ListItem
use Libraries.Data.Formats.ScalableVectorGraphics.Polygon
use Libraries.Containers.Support.Pair
use Libraries.Game.Graphics.Drawable
use Libraries.Web.Page.UnorderedList
use Libraries.Interface.Item
use Libraries.Interface.Controls.Charts.Graphics.Plot
use Libraries.Interface.Controls.Charts.Graphics.PlotGroup
use Libraries.Interface.Controls.Charts.Graphics.ChartDrawable

/*
    The ViolinPlotWriter class is part of the set of writers that allow for Charts
    to save their representation in the form ScalableVectorGraphics. This class will write out
    all of the necessary text needed to write out an SVG file that will contain the chart.

    Attribute: Author Gabriel Contreras, Hannah Williams

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.ViolinPlot
    use Libraries.Interface.Controls.Charts.ViolinPlotWriter

    DataFrame frame
    frame:Load("Data.csv")
    frame:SetSelectedColumnRange(0,1)
    ViolinPlot chart = frame:ViolinPlot()
    chart:SetTitle("My Awesome Title")
    chart:SetXAxisTitle("Time")
    chart:Display()

    ViolinPlotWriter writer
    output writer:WriteOutChart(chart)
*/
class ViolinPlotWriter is ChartWriter

    action WriteOutChart(ViolinPlot chart, integer svgWidth, integer svgHeight) returns text
        return WriteOutChart(cast(Chart,chart), svgWidth, svgHeight)
    end

    action WriteOutChart(ViolinPlot chart, File file, integer svgWidth, integer svgHeight)
        WriteOutChart(cast(Chart,chart), file, svgWidth, svgHeight)
    end

    action WriteOutChart(ViolinPlot chart) returns text
        return WriteOutChart(cast(Chart,chart))
    end

    action WriteOutChart(ViolinPlot chart, File file)
        WriteOutChart(cast(Chart,chart), file)
    end

    /*
        This action adds a white background to the canvas
    */
    action AddChartArea(ScalableVectorGraphics canvas, Chart chart)
        parent:ChartWriter:AddChartArea(canvas,chart)

        if HasAccessibility()
            GetChartArea():SetAriaLabel("Chart Area ")
        end
    end

    /*
        This action adds the content of the Violin Plot
    */
    private action AddChartContent(ScalableVectorGraphics canvas, Chart chart)
        ViolinPlot plot
        plot = cast(ViolinPlot, chart)
        AddViolins(canvas, plot)
    end

    /*
        This action adds the content of the Violin Plot
    */
    private action AddViolins(ScalableVectorGraphics canvas, ViolinPlot chart)
        Color transparent
        transparent:SetColor(0, 0, 0, 0)

        if not chart:IsSeparated()
            Array <PlotGroup> plotGroups = chart:GetPlotGroups()

            integer i = 0
            repeat while i < plotGroups:GetSize()
                PlotGroup group = plotGroups:Get(i)

                if chart:HasGroups()
                    Rectangle plotGroup
                    plotGroup:SetWidth(group:GetWidth())
                    plotGroup:SetHeight(group:GetHeight())
                    plotGroup:SetPosition(group:GetGlobalX(), TranslatePositionY(group) - group:GetHeight()) 
                    plotGroup:SetFill(transparent)
                    plotGroup:SetID(canvas:GetID() + "-" + group:GetHashCode())
                    plotGroup:SetTabIndex(-1)
                    if HasAccessibility()
                        plotGroup:SetAriaLabel(group:GetName() + group:GetDescription())
                    end
                    GetGroupPanels():Add(plotGroup)
                    canvas:Add(plotGroup)
                end

                integer k = 0
                repeat while k < group:GetSize()
                    Plot plot = group:Get(k)
                    Array<ChartDrawable> items = plot:GetPlotItems()
                    /* Indices for items of individual violin plot
                        0: PLOT AREA (ENTIRE REGION)
                        1: MINIMUM LINE
                        2: LOWER WHISKER
                        3: INTERQUARTILE RANGE
                        4: RIGHT BORDER OF IQR - not used in violin plots
                        5: LEFT BORDER OF IQR - not used in violin plots
                        6: Q1 LINE
                        7: MEDIAN LINE
                        8: Q3 LINE
                        9: UPPER WHISKER    
                        10: MAXIMUM LINE 
                    */        

                    // LAYER ONE   
                    // Index 0: This is the transparent box around the entire plot used for navigation. 
                    Rectangle plotArea
                    plotArea:SetSize(plot:GetPlotArea():GetWidth(),plot:GetPlotArea():GetHeight())
                    plotArea:SetPosition(plot:GetPlotArea():GetGlobalX(), TranslatePositionY(plot:GetPlotArea()) - plot:GetPlotArea():GetHeight())
                    plotArea:SetFill(transparent)
                    plotArea:SetID(canvas:GetID()+ "-" + plot:GetHashCode() + "-" + plot:GetSeries():GetHashCode() + "-" + plot:GetPlotArea():GetHashCode())
                    plotArea:SetTabIndex(-1)
                    if HasAccessibility()
                        plotArea:SetAriaLabel(plot:GetPlotArea():GetName() + plot:GetPlotArea():GetDescription())
                    end 
                    canvas:Add(plotArea)                       
              
                    // Index 11: The violin shape, will be loaded as a polygon in the SVG          
                    Array<Pair<integer>> points = plot:GetPoints() //These points were calculated by ViolinPlotLayout
                    Polygon violin
                    integer index = 0
                    repeat while index < points:GetSize()
                        integer xCoor = points:Get(index):GetFirstValue() + cast(integer, chart:GetChartArea():GetGlobalX())
                        integer yCoor = points:Get(index):GetSecondValue() + cast(integer, TranslatePositionY(chart:GetChartArea()) - chart:GetChartArea():GetHeight())
                        if chart:GetHorizontalFlag()
                            yCoor = cast(integer, TranslatePositionY(chart:GetChartArea())) - points:Get(index):GetSecondValue()
                        end
                        violin:AddPoint(xCoor, yCoor)
                        index = index + 1
                    end 
                    violin:SetFill(plot:GetColor())
                    violin:SetTabIndex(-1)
                    violin:SetStroke("black")
                    violin:SetStrokeWidth(1)
                    canvas:Add(violin)

                    // LAYER TWO
                    Circle medianDot
                    index = 1
                    repeat while index < 11
                        if index = 7 // This is the median dot shape to be initialized now and added in the next layer.
                            number radius = items:Get(index):GetHeight()/2
                            medianDot:SetRadius(radius)
                            medianDot:SetPosition(items:Get(index):GetGlobalX() + radius, TranslatePositionY(items:Get(index)) - items:Get(index):GetHeight() + radius)
                            medianDot:SetFill("white")  
                            medianDot:SetID(canvas:GetID()+ "-" + plot:GetHashCode() + "-" + plot:GetSeries():GetHashCode() + "-" + items:Get(index):GetHashCode())
                            medianDot:SetStroke("black")
                            medianDot:SetStrokeWidth(1)
                            medianDot:SetTabIndex(-1)
                            if HasAccessibility()
                                medianDot:SetAriaLabel(items:Get(index):GetName() + items:Get(index):GetDescription())
                            end 
                        else
                            // Skip the IQR borders, as our violin plots do not use them.
                            if index not= 4 and index not= 5
                                Rectangle plotLine
                                plotLine:SetSize(items:Get(index):GetWidth(),items:Get(index):GetHeight())
                                plotLine:SetPosition(items:Get(index):GetGlobalX(), TranslatePositionY(items:Get(index)) - items:Get(index):GetHeight())
                                plotLine:SetFill("black")
                                plotLine:SetID(canvas:GetID()+ "-" + plot:GetHashCode() + "-" + plot:GetSeries():GetHashCode() + "-" + items:Get(index):GetHashCode())
                                plotLine:SetTabIndex(-1)
                                if HasAccessibility()
                                    plotLine:SetAriaLabel(items:Get(index):GetName() + items:Get(index):GetDescription())
                                end 
                                canvas:Add(plotLine)
                            end
                        end
                        index = index + 1
                    end

                    //LAYER THREE
                    // Index 7: The median dot, we want this to sit on top of the other elements so it's the last to be added.
                    canvas:Add(medianDot)
    
                    k = k + 1
                end  
                i = i + 1
            end
        else
            integer i = 0
            repeat while i < chart:GetSubChartAreas():GetSize()
                integer j = 0
                repeat while j < chart:GetSubChartAreas():Get(i):GetChartAreaItems():GetSize()
                    Plot plot
                    plot = cast(Plot, chart:GetSubChartAreas():Get(i):GetChartAreaItems():Get(j))

                    Array<ChartDrawable> items = plot:GetPlotItems()
                    /* Indices for items of individual violin plot
                        0: PLOT AREA (ENTIRE REGION)
                        1: MINIMUM LINE
                        2: LOWER WHISKER
                        3: INTERQUARTILE RANGE
                        4: RIGHT BORDER OF IQR - not used in violin plots
                        5: LEFT BORDER OF IQR - not used in violin plots
                        6: Q1 LINE
                        7: MEDIAN LINE
                        8: Q3 LINE
                        9: UPPER WHISKER    
                        10: MAXIMUM LINE 
                    */    

                    // LAYER ONE   
                    // Index 0: This is the transparent box around the entire plot used for navigation.
                    Rectangle plotArea
                    plotArea:SetSize(plot:GetPlotArea():GetWidth(),plot:GetPlotArea():GetHeight())
                    plotArea:SetPosition(plot:GetPlotArea():GetGlobalX(), TranslatePositionY(plot:GetPlotArea()) - plot:GetPlotArea():GetHeight())
                    plotArea:SetFill(transparent)
                    plotArea:SetID(canvas:GetID()+ "-" + plot:GetHashCode() + "-" + plot:GetSeries():GetHashCode() + "-" + plot:GetPlotArea():GetHashCode())
                    plotArea:SetTabIndex(-1)
                    if HasAccessibility()
                        plotArea:SetAriaLabel(plot:GetPlotArea():GetName() + plot:GetPlotArea():GetDescription())
                    end 
                    canvas:Add(plotArea)                                  
                
                    // Index 11: The violin shape, will be loaded as a polygon in the SVG. It is not directly included in the navigation tree as of now.        
                    Array<Pair<integer>> points = plot:GetPoints() //These points were calculated by ViolinPlotLayout
                    Polygon violin
                    integer index = 0
                    repeat while index < points:GetSize()
                        integer xCoor = points:Get(index):GetFirstValue() + cast(integer, chart:GetSubChartAreas():Get(i):GetGlobalX())
                        integer yCoor = points:Get(index):GetSecondValue() + cast(integer, TranslatePositionY(chart:GetSubChartAreas():Get(i)) - chart:GetSubChartAreas():Get(i):GetHeight())
                        violin:AddPoint(xCoor, yCoor)
                        index = index + 1
                    end 
                    violin:SetFill(plot:GetColor())
                    violin:SetStroke("black")
                    violin:SetStrokeWidth(1)
                    violin:SetTabIndex(-1)
                    canvas:Add(violin)

                    // LAYER TWO
                    Circle medianDot
                    index = 1
                    repeat while index < 11
                        if index = 7 // This is the median dot shape to be initialized now and added in the next layer.
                            number radius = items:Get(index):GetHeight()/2
                            medianDot:SetRadius(radius)
                            medianDot:SetPosition(items:Get(index):GetGlobalX() + radius, TranslatePositionY(items:Get(index)) - items:Get(index):GetHeight() + radius)
                            medianDot:SetFill(items:Get(index):GetColor())
                            medianDot:SetID(canvas:GetID() + "-" + plot:GetHashCode() + "-" + plot:GetSeries():GetHashCode() + "-" + items:Get(index):GetHashCode())
                            medianDot:SetTabIndex(-1)
                            if HasAccessibility()
                                medianDot:SetAriaLabel(items:Get(index):GetName() + items:Get(index):GetDescription())
                            end  
                        else
                            // Skip the IQR borders, as our violin plots do not use them.
                            if index not= 4 and index not= 5
                                Rectangle plotLine
                                plotLine:SetSize(items:Get(index):GetWidth(),items:Get(index):GetHeight())
                                plotLine:SetPosition(items:Get(index):GetGlobalX(), TranslatePositionY(items:Get(index)) - items:Get(index):GetHeight())
                                plotLine:SetFill(items:Get(index):GetColor())
                                plotLine:SetID(canvas:GetID() + "-" + plot:GetHashCode() + "-" + plot:GetSeries():GetHashCode() + "-" + items:Get(index):GetHashCode())
                                plotLine:SetTabIndex(-1)
                                if HasAccessibility()
                                    plotLine:SetAriaLabel(items:Get(index):GetName() + items:Get(index):GetDescription())
                                end
                                canvas:Add(plotLine)
                            end
                        end
                        index = index + 1
                    end

                    //LAYER THREE
                    // Index 7: The median dot, we want this to sit on top of the other elements so it's the last to be added.
                    canvas:Add(medianDot)
    
                    j = j + 1
                end
                i = i + 1
            end
        end
    end

    action AddChartContentAccessibility(ScalableVectorGraphics canvas, Chart chart, ChartAreaPanel chartArea, ListItem chartAreaItem)
        ViolinPlot violinPlot
        violinPlot = cast(ViolinPlot, chart)

        if not chart:IsSeparated()
            Array<PlotGroup> plotGroups = violinPlot:GetPlotGroups()
    
            UnorderedList plotGroupsUL
            plotGroupsUL:AddAttribute("role","group")
            chartAreaItem:AddNestedTag(plotGroupsUL)
            
            UnorderedList currentGrouping = plotGroupsUL
            i = 0
            repeat while i < plotGroups:GetSize()
                if violinPlot:HasGroups()
                    ListItem plotGroupNav 
                    plotGroupNav:SetIdentifier(canvas:GetID() + "-" + plotGroups:Get(i):GetHashCode() + "-nav")
                    plotGroupNav:AddAttribute("role","treeitem")
                    plotGroupNav:AddAttribute("aria-labelledby",canvas:GetID() + "-" + plotGroups:Get(i):GetHashCode())
                    plotGroupNav:AddAttribute("aria-expanded","false")
                    plotGroupNav:SetTabIndex("-1")
                    plotGroupsUL:Add(plotGroupNav)
        
                    
                    UnorderedList plotsUL
                    plotsUL:AddAttribute("role","group")
                    plotGroupNav:AddNestedTag(plotsUL)
                    currentGrouping = plotsUL
                end
            
                j = 0
                repeat while j < plotGroups:Get(i):GetSize()
                    Plot plot = plotGroups:Get(i):Get(j)
                    ListItem plotNav 
                    plotNav:SetIdentifier(canvas:GetID() + "-" + plot:GetHashCode() + "-" + plot:GetSeries():GetHashCode() + "-" + plot:GetPlotArea():GetHashCode() + "-nav")
                    plotNav:AddAttribute("role","treeitem")
                    plotNav:AddAttribute("aria-labelledby",canvas:GetID() + "-" + plot:GetHashCode() + "-" + plot:GetSeries():GetHashCode() + "-" + plot:GetPlotArea():GetHashCode())
                    plotNav:AddAttribute("aria-expanded","false")
                    plotNav:SetTabIndex("-1")
                    currentGrouping:Add(plotNav)

                    UnorderedList itemsUL
                    itemsUL:AddAttribute("role","group")
                    plotNav:AddNestedTag(itemsUL)

                    k = 1
                    repeat while k < plot:GetPlotItems():GetSize()
                        // Add navigation for all parts.
                        if k not= 2 and k not= 4 and k not= 5 and k not= 9 // Skip the elements not included in the navigation
                            ListItem itemNav 
                            itemNav:SetIdentifier(canvas:GetID() + "-" + plot:GetHashCode() + "-" + plot:GetSeries():GetHashCode() + "-" + plot:GetPlotItems():Get(k):GetHashCode() + "-nav")
                            itemNav:AddAttribute("role","treeitem")
                            itemNav:AddAttribute("aria-labelledby",canvas:GetID() + "-" + plot:GetHashCode() + "-" + plot:GetSeries():GetHashCode() + "-" + plot:GetPlotItems():Get(k):GetHashCode())
                            itemNav:SetTabIndex("-1")
                            itemsUL:Add(itemNav)
                        end
                        k = k + 1
                    end
                    j = j + 1
                end
                i = i + 1
            end
        else
            UnorderedList subChartAreaItemsUL
            subChartAreaItemsUL:AddAttribute("role","group")
            chartAreaItem:AddNestedTag(subChartAreaItemsUL)

            i = 0
            repeat while i < chartArea:GetChartAreaItems():GetSize()
                Plot plot = cast(Plot, chartArea:GetChartAreaItems():Get(i))

                ListItem plotNav 
                plotNav:SetIdentifier(canvas:GetID() + "-" + plot:GetHashCode() + "-" + plot:GetSeries():GetHashCode() + "-" + plot:GetPlotArea():GetHashCode() + "-nav")
                plotNav:AddAttribute("role","treeitem")
                plotNav:AddAttribute("aria-labelledby",canvas:GetID() + "-" + plot:GetHashCode() + "-" + plot:GetSeries():GetHashCode() + "-" + plot:GetPlotArea():GetHashCode())
                plotNav:AddAttribute("aria-expanded","false")
                plotNav:SetTabIndex("-1")
                subChartAreaItemsUL:Add(plotNav)

                UnorderedList itemsUL
                itemsUL:AddAttribute("role","group")
                plotNav:AddNestedTag(itemsUL)

                k = 1
                repeat while k < plot:GetPlotItems():GetSize()
                    // Add navigation for all parts.
                    if k not= 2 and k not= 4 and k not= 5 and k not= 9 // Skip the elements not included in the navigation
                        ListItem itemNav 
                        itemNav:SetIdentifier(canvas:GetID() + "-" + plot:GetHashCode() + "-" + plot:GetSeries():GetHashCode() + "-" + plot:GetPlotItems():Get(k):GetHashCode() + "-nav")
                        itemNav:AddAttribute("role","treeitem")
                        itemNav:AddAttribute("aria-labelledby",canvas:GetID() + "-" + plot:GetHashCode() + "-" + plot:GetSeries():GetHashCode() + "-" + plot:GetPlotItems():Get(k):GetHashCode())
                        itemNav:SetTabIndex("-1")
                        itemsUL:Add(itemNav)
                    end
                    k = k + 1
                end
                i = i + 1
            end
        end
    end
end