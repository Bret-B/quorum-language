package Libraries.Interface.Controls.Charts

use Libraries.Interface.Layouts.HistogramLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Gradient
use Libraries.Containers.Array
use Libraries.Compute.Math
use Libraries.Containers.HashTable
use Libraries.Compute.Statistics.Calculations.InterQuartileRange
use Libraries.Containers.Support.Comparison
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Interface.Layouts.ManualLayout

/*
    The Histogram class is Chart object that inherits from SharedBarChartParent and like other
    UI elements it is added to the Game class. The Histogram is used to represent
    categorical data with rectangular bars that have a height proportional to the 
    data they represent. By default, the chart has no added bars and has a scale 
    that goes from 0 to 1. The title label, axis labels, and scale can be modified, 
    and any number of bars can be added. 

    Attribute: Author Gabriel Contreras, Hannah Williams, Tim Kluthe

    Attribute: Example

    use Libraries.Interface.Controls.Charts
    use Libraries.Interface.Controls.Charts.Histogram
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            Histogram chart
            Add(chart)
        end
    end
*/
class Histogram is SharedBarChartParent
    Math math
    Array <DataFrameColumn> columns 
    Array<number> binFloor
    Comparison comparison = undefined
    number binWidth = -1
    boolean decimalScale = false

    on create
        HistogramLayout layout
        SetLayout(layout)


        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:MAINTAIN_ASPECT_RATIO)
        properties:SetVerticalLayoutMode(properties:STANDARD)
        Font font = GetDefaultFont()
        properties:SetFont(font)
        properties:SetFontSize(GetDefaultFontSize())

        Color color
        Gradient gradient
        Color gray = color:LightGray()
        Color lightGray = color:CustomColor(0.9, 0.9, 0.9, 1)
        gradient:Set(gray, gray, lightGray, lightGray)

        properties:SetBackgroundColor(gradient)
        properties:SetBorderColor(color:Black())
        properties:SetBorderThickness(2)
        SetName("Histogram")

        SetInputGroup("Chart")
        SetFocusable(true)
        SetAccessibilityCode(parent:Item:ITEM)

        ShowAllTicks()
        HideGroupBrackets()
        SetDefaultOrientation("vertical")
        SetDefaultSeparation(true)
    end

    /*
        This is called by GenerateInfoTree to generate the summary that is heard when
        you first focus on the chart. Also the highest level of the information tree
        of  the chart.
    */
    private action GenerateSummary returns text
        text grouptext = ""
        if HasBarGroups()
            text groups = " groups and "
            if GetBarGroups():GetSize() = 1
                groups = " group and "
            end
            grouptext = GetBarGroups():GetSize() + groups
        end
        text bartext = GetNumberOfBars() + " bars."
        if GetNumberOfBars() = 1
            bartext = GetNumberOfBars() + " bar."
        end
        SetDescription(" with " + grouptext + bartext + " Use the arrow keys to navigate the chart.")
        return GetDescription()
    end

    /* 
        This action converts this chart to a text value that contains information 
        for a scalable vector graphics file. This is useful for saving charts to disk.
        Each sub-class of chart must implement this action separately.

        Attribute: Returns the Scalable Vector Graphics (SVG) text.
    */
//    action ConvertToScalableVectorGraphics returns text
//        HistogramWriter writer
//        return writer:WriteOutChart(me)
//    end


    action SetBinWidth(integer width) 
        if width > 0 and binWidth not= width
            binWidth = cast(number, width)
            decimalScale = false
            SetXAxisNumberFormat("integer")
            MakeBins()
        end
    end

    action SetBinWidth(number width) 
        if width > 0 and binWidth not= width
            binWidth = width
            decimalScale = true
            SetXAxisNumberFormat("number")
            MakeBins()
        end
    end

    action GetBinWidth() returns number
        return binWidth
    end

    action GetColumns() returns Array<DataFrameColumn>
        return columns
    end

    action MakeBins()
        if binWidth < 0
            return now
        end

        integer numberOfColumns = columns:GetSize()
        if numberOfColumns < 1
            alert("Cannot create a Histogram without any columns.")
        end

        if numberOfColumns = 1
            HasBarGroups(false) //remove the bargroup level of accessible navigation since every bar group should have 1 bar
        end

        GetBarGroups():Empty()
        HashTable <text, Series> seriesFactor
        HashTable <text, BarGroup> groupFactor
        number maxFrequency = 0.0
        number min = 0
        number max = 0

        if GetHorizontalFlag() // Default is vertical
            SetYTickInterval(binWidth)
            min = GetVerticalPanel():GetMinimum()
            max = GetVerticalPanel():GetMaximum()
        else
            SetXTickInterval(binWidth)
            min = GetHorizontalPanel():GetMinimum()
            max = GetHorizontalPanel():GetMaximum()
        end

        // Take range and divide it amongst bins and round up to get the default bin width
        integer numberOfBins = cast(integer, math:Ceiling((max-min)/binWidth))
        if numberOfBins > 100
            alert("This results in over 100 bins, please change bin width.")
        end

        Array<integer> count
        binFloor:Empty()

        n = 0
        number floor = min // Starts at minimum value
        repeat while n < numberOfBins
            count:Add(0)
            binFloor:Add(floor)
            text valueDisplay = "[" + cast(integer, floor) + "-" + cast(integer, floor + binWidth) + "]"
            if(decimalScale)
                valueDisplay = "[" + (math:Round(floor, 2)) + "-" + (math:Round(floor+binWidth, 2)) + "]"
            end
            if(not groupFactor:HasKey(valueDisplay))
                BarGroup group
                group:SetName(valueDisplay)
                groupFactor:Add(valueDisplay, group)
            end
            floor = floor + binWidth
            n = n + 1
        end  

        n = 0
        repeat while n < numberOfColumns 
            DataFrameColumn column = columns:Get(n)   

            // Reset counts to zero for each series
            i = 0
            repeat while i < numberOfBins
                count:Set(i, 0)
                i = i + 1
            end     

            i = 0
            repeat while i < column:GetSize()
                if not column:IsUndefined(i)
                    number value = column:GetAsNumber(i)
                    integer bin = cast(integer, math:Floor((value - min) / binWidth))
                    number binRoof = binFloor:Get(bin) + binWidth
                    if value < binRoof and value >= binFloor:Get(bin)
                        count:Set(bin, count:Get(bin) + 1)
                    elseif value >= binRoof
                        count:Set(bin+1, count:Get(bin+1) + 1)
                    end
                end
                i = i + 1
            end
    
            // Find max frequency of all counts across all series
            i = 0
            repeat while i < count:GetSize()
                integer amount = count:Get(i)
                if amount > maxFrequency
                    maxFrequency = amount
                end
                i = i + 1
            end

            // If a new series (ie new column)
            if(not seriesFactor:HasKey(column:GetHeader()))
                Series series
                series:SetName(column:GetHeader())
                seriesFactor:Add(column:GetHeader(), series)
            end
    
            i = 0
            floor = 0.0
            repeat while i < count:GetSize() and floor < max
                integer amount = count:Get(i)
                floor = binFloor:Get(i)
                text valueDisplay = "[" + cast(integer, floor) + "-" + cast(integer, floor+binWidth) + "]"
                if(decimalScale)
                    valueDisplay = "[" + (math:Round(floor, 2)) + "-" + (math:Round(floor+binWidth, 2)) + "]"
                end
                Bar bar
                bar:SetValue(amount)
                bar:SetName(column:GetHeader() + " " + valueDisplay)
                // If bar is part of a group
                if(groupFactor:HasKey(valueDisplay))
                    groupFactor:GetValue(valueDisplay):AddBar(bar)
                end
                // If bar is part of a series
                if(seriesFactor:HasKey(column:GetHeader()))
                    seriesFactor:GetValue(column:GetHeader()):AddItem(bar:GetIcon())
                    bar:SetSeries(seriesFactor:GetValue(column:GetHeader()))
                end
                i = i + 1
            end
            n = n + 1
        end

        Array <text> groupNames
        // Bar Groups
        i = 0
        repeat while i < groupFactor:GetSize()
            floor = binFloor:Get(i)
            text valueDisplay = "[" + cast(integer, floor) + "-" + cast(integer, floor+binWidth) + "]"
            if(decimalScale)
                valueDisplay = "[" + (math:Round(floor, 2)) + "-" + (math:Round(floor+binWidth, 2)) + "]"
                maxValue = (math:Round(floor+binWidth, 2))
                interval = maxValue - (math:Round(floor, 2))
            end
            if(groupFactor:HasKey(valueDisplay) and floor < max) 
                AddBarGroup(groupFactor:GetValue(valueDisplay))
                groupNames:Add(valueDisplay)
            end
            i = i + 1
        end    
        
        // Series
        Array <Series> seriesList
        Array<text> seriesKeyArray = seriesFactor:CopyToKeyArray()
        if comparison = undefined
            seriesKeyArray:Sort()
        else
            seriesKeyArray:Sort(comparison)
        end
        i = 0
        repeat while i < seriesKeyArray:GetSize()
            seriesList:Add(seriesFactor:GetValue(seriesKeyArray:Get(i)))
            i = i + 1
        end

        if GetHorizontalFlag() // Default is vertical
            SetScale(min, max, 0, maxFrequency)
            SetYTickInterval(binWidth)
            parent:Chart:SetYAxisMinimum(math:Floor(min))
            parent:Chart:SetYAxisMaximum(math:Ceiling(max))
        else
            SetScale(0, maxFrequency, min, max)
            SetXTickInterval(binWidth)
            parent:Chart:SetXAxisMinimum(math:Floor(min))
            parent:Chart:SetXAxisMaximum(math:Ceiling(max))
        end
        SetSeriesList(seriesList)
    end

    private action SetScale(number ymin, number ymax, number xmin, number xmax)
        GetVerticalPanel():SetMinimum(ymin)
        GetVerticalPanel():SetMaximum(ymax)
        GetHorizontalPanel():SetMinimum(xmin)
        GetHorizontalPanel():SetMaximum(xmax)
    end

    action SetXAxisMaximum(number max)
        parent:Chart:SetXAxisMaximum(max)
        if not GetHorizontalFlag()
            MakeBins()
        end
    end

    action SetXAxisMinimum(number min)
        parent:Chart:SetXAxisMinimum(min)
        if not GetHorizontalFlag()
            MakeBins()
        end
    end

    action SetXTickInterval(number set)
        parent:Chart:SetXTickInterval(set)
        if not GetHorizontalFlag()
            SetBinWidth(set)
        end
    end

    action SetXTickInterval(integer set)
        parent:Chart:SetXTickInterval(set)
        if not GetHorizontalFlag()
            SetBinWidth(set)
        end
    end
end

