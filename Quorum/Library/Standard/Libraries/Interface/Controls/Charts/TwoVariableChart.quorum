package Libraries.Interface.Controls.Charts
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Controls.Charts.ChartOptions
use Libraries.Game.Graphics.Color
use Libraries.Containers.Array
use Libraries.Interface.Controls.Icon
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Controls.ControlLabel
use Libraries.Compute.Math
use Libraries.Interface.Selections.ChartSelection
use Libraries.Interface.Item
use Libraries.Interface.Controls.Control
use Libraries.Game.Graphics.ColorGroup
use Libraries.Interface.Views.LabelBoxView

class TwoVariableChart is Chart

    // The root ChartItem.
    ChartItem summary
    Array<Series> seriesList
    Array<ChartLine> lines
    Array<ChartPoint> points
    private boolean showPoints = true
    Color defaultColor
    Math math
    ChartOptions options

    private integer PointRadius = 2
    private integer LineDensity = 1

    // The minimum radius of a single chart point.
    private integer minimumPointRadius = 2

    // A value used to scale the size of points as a percentage of chart size.
    private number pointScaleFactor = 0.008
    private integer pointThreshold = 21
    private integer maxChunks = 16

    private integer tickLength = 10
    private integer tickWidth = 3
    ChartPointComparison comparison

    Color highlightColor = undefined
    ColorGroup previousColorGroup = undefined
    Color previousColor = undefined

    // If there are fewer than this many points in a quadrant, we don't subdivide the quadrant further.
    integer quadrantThreshold = 10

    // The maximum number of times that regions can be subdivided into quadrants.
    integer maxSubdivisions = 4

    // The default color of each point.
    Color pointColor
    Color pointSelectionColor

    // How many ticks are set along the x and y axes.
    integer xTicks = 0
    integer yTicks = 0

    action LostSelection(ChartItem ci)
        if ci = undefined
            return now
        end
        Item target = ci:GetFocusTarget()

        if target not= undefined
            if target is ControlLabel
                ControlLabel temp = cast(ControlLabel, target)
                temp:LostSelection()
            elseif target is Series
                Series temp = cast(Series, target)
                if points:GetSize() > 0
                    integer i = 0
                    repeat while i < temp:GetSize()
                        Drawable item = temp:GetItemAt(i)
                        item:SetColor(previousColor)
                        item:SetZ(0)
                        i = i + 1
                    end
                else
                    integer i = 0
                    repeat while i < temp:GetSize()
                        ChartLine line = cast(ChartLine, temp:GetItemAt(i))
                        line:SetColor(previousColor)
                        line:BringForward(false)
                        i = i + 1
                    end
                end
                temp:GetLabel():LostSelection()
            elseif target is ChartPoint
                if GetPointsFlag()
                    ChartPoint temp = cast(ChartPoint, target)
                    temp:SetColor(previousColor)
                    temp:SetZ(0)
                end
            elseif target is LineSegment
                LineSegment temp = cast(LineSegment, target)
                if GetPointsFlag()
                    temp:GetPoint1():SetColor(previousColor)
                    temp:GetPoint2():SetColor(previousColor)
                    temp:GetPoint1():SetZ(0)
                    temp:GetPoint2():SetZ(0)
                end
                temp:SetColor(previousColor)
                temp:SetZ(0)
            elseif target is ChartLine
                ChartLine temp = cast(ChartLine, target)
                temp:SetColor(previousColor)
                temp:BringForward(false)
            elseif target is Icon
                target:Hide()
            elseif target is Control
                Control temp = cast(Control, target)
                LayoutProperties properties = temp:GetDefaultLayoutProperties()
                if properties not= undefined
                    LabelBoxView view
                    view:SetBorderThickness(cast(integer, properties:GetBorderThickness()))
                    view:Initialize(properties:GetBackgroundColor(), previousColorGroup)
                    temp:SetView2D(view)
                end
            end
        end
    end

    action GainedSelection(ChartItem ci)
        if ci = undefined
            return now
        end
        Item target = ci:GetFocusTarget()

        if target not= undefined
            target:Focus()
            if target is ControlLabel
                ControlLabel temp = cast(ControlLabel, target)
                temp:GainedSelection()
            elseif target is Series
                Series temp = cast(Series, target)
                previousColor = temp:GetColor()
                if points:GetSize() > 0
                    integer i = 0
                    repeat while i < temp:GetSize()
                        Drawable item = temp:GetItemAt(i)
                        item:SetColor(GetHighlightColor())
                        item:SetZ(-1)
                        i = i + 1
                    end
                else
                    integer i = 0
                    repeat while i < temp:GetSize()
                        ChartLine line = cast(ChartLine, temp:GetItemAt(i))
                        line:SetColor(GetHighlightColor())
                        line:BringForward(true)
                        i = i + 1
                    end
                end
                temp:GetLabel():GainedSelection()
            elseif target is ChartPoint
                if GetPointsFlag()
                    ChartPoint temp = cast(ChartPoint, target)
                    previousColor = temp:GetColor()
                    temp:SetColor(GetHighlightColor())
                    temp:SetZ(-1)
                end
            elseif target is LineSegment
                LineSegment temp = cast(LineSegment, target)
                if GetPointsFlag()
                    temp:GetPoint1():SetColor(GetHighlightColor())
                    temp:GetPoint2():SetColor(GetHighlightColor())
                    temp:GetPoint1():SetZ(-1)
                    temp:GetPoint2():SetZ(-1)
                end
                previousColor = temp:GetColor()
                temp:SetColor(GetHighlightColor())
                temp:SetZ(-1)
            elseif target is ChartLine
                ChartLine temp = cast(ChartLine, target)
                previousColor = temp:GetColor()
                temp:SetColor(GetHighlightColor())
                temp:BringForward(true)
            elseif target is Icon
                target:Show()
            elseif target is Control
                Control temp = cast(Control, target)
                LayoutProperties properties = temp:GetDefaultLayoutProperties()
                if properties not= undefined
                    previousColorGroup = properties:GetBorderColor()
                    LabelBoxView view
                    view:SetBorderThickness(cast(integer, properties:GetBorderThickness())+4)
                    view:Initialize(properties:GetBackgroundColor(), GetHighlightColor())
                    temp:SetView2D(view)
                end
            end            
        end
    end
    action DisposeDrawables()
        parent:Chart:DisposeDrawables()

        GetChartArea():Empty()
    end
    /*
    This action is used to load the graphical components of the Control. This is
    handled automatically by the Game engine as needed, and most users shouldn't
    need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        DisposeDrawables()
        parent:Chart:LoadGraphics(properties)
        if properties = undefined
            return now
        end

        Control chartArea = GetChartArea()

        if GetHighlightColor() = undefined
            SetHighlightColor(options:GetSelectionColor())
        end
        if GetDefaultOrientation() = undefined
            SetDefaultOrientation("horizontal")
        end
      
        // Check for orientation change
        if OrientationChanged()
            flipValues()
        end        
        
        // Line Chart
        if lines:GetSize() > 0
            integer i = 0
            repeat while i < lines:GetSize()
                lines:Get(i):SetFocusable(true)
                lines:Get(i):SetAccessibilityCode(parent:Item:ITEM)
                lines:Get(i):SetNextFocus(GetNextFocus())
                lines:Get(i):SetPreviousFocus(GetPreviousFocus())
                chartArea:Add(lines:Get(i))

                integer j = 0
                repeat while j < lines:Get(i):GetLines():GetSize()
                    LineSegment line = lines:Get(i):GetLines():Get(j)
                    line:SetFocusable(true)
                    line:SetAccessibilityCode(parent:Item:ITEM)
                    line:SetNextFocus(GetNextFocus())
                    line:SetPreviousFocus(GetPreviousFocus())
                    chartArea:Add(line)
                    j = j + 1
                end
                if lines:Get(i):GetPointsFlag()
                    j = 0
                    repeat while j < lines:Get(i):GetPoints():GetSize()
                        ChartPoint point = lines:Get(i):GetPoints():Get(j)
                        point:SetFocusable(true)
                        point:SetAccessibilityCode(parent:Item:ITEM)
                        point:SetNextFocus(GetNextFocus())
                        point:SetPreviousFocus(GetPreviousFocus())
                        chartArea:Add(point)
                        j = j + 1
                    end
                end
                i = i + 1
            end
        end

        // Scatter Plot
        if points:GetSize() > 0
            integer i = 0
            repeat while i < points:GetSize()
                ChartPoint point = points:Get(i)
                point:SetFocusable(true)
                point:SetAccessibilityCode(parent:Item:ITEM)
                point:SetNextFocus(GetNextFocus())
                point:SetPreviousFocus(GetPreviousFocus())
                chartArea:Add(point)
                i = i + 1
            end
        end
    end

    action flipValues()
        // Line Chart
        if lines:GetSize() > 0
            integer i = 0
            repeat while i < lines:GetSize()
                j = 0
                repeat while j < lines:Get(i):GetPoints():GetSize()
                    ChartPoint point = lines:Get(i):GetPoints():Get(j)
                    number temp = point:GetValueX()
                    point:SetValueX(point:GetValueY())
                    point:SetValueY(temp)
                    j = j + 1
                end
                i = i + 1
            end
        end

        // Scatter Plot
        if points:GetSize() > 0
            integer i = 0
            repeat while i < points:GetSize()
                ChartPoint point = points:Get(i)
                number temp = point:GetValueX()
                point:SetValueX(point:GetValueY())
                point:SetValueY(temp)
                i = i + 1
            end
        end
    end


    /*
        Gets the default selection color (highlighting)
    */
    action GetHighlightColor returns Color
        return highlightColor
    end

    /*
        Sets the default selection color (highlighting)
    */
    action SetHighlightColor(Color color)
        me:highlightColor = color
    end

    /*
        Gets the previous color
    */
    action GetPreviousColor returns Color
        return previousColor
    end

    /*
        Sets the previous color 
    */
    action SetPreviousColor(Color color)
        me:previousColor = color
    end

    /*
    Used to create a new ChartLine object for the chart and add it to the lines array.
    */
    action AddChartLine(ChartLine newLine)
        lines:Add(newLine)
    end

    action AddPoint(ChartPoint point)
        points:Add(point)
    end

    action GetChartPoints returns Array<ChartPoint> 
        return points
    end

    /*
    Return a specific line from the chart.
    */
    action GetLine(integer i) returns ChartLine
        if lines:Get(i) = undefined
            alert("The specified line does not exist.")
        else
            return lines:Get(i)
        end
    end

    /*
    Returns the entire list of lines from the chart.
    */
    action GetAllLines() returns Array<ChartLine>
        return lines
    end

    /*
    Returns the number of full lines from the chart.
    */
    action GetNumberOfLines() returns integer
        return lines:GetSize()
    end

    /*
    Returns the number of points from the chart. (scatter)
    */
    action GetNumberOfPoints() returns integer
        return points:GetSize()
    end

    /*
    Returns the default color for the chart.
    */
    action GetDefaultColor() returns Color
        return defaultColor
    end

    /*
    Set and get the point radius.
    */
    action SetPointRadius(integer radius)
        PointRadius = radius
    end
    action GetPointRadius() returns integer
        return PointRadius
    end

    /*
    Set and get the line density.
    */
    action SetLineDensity(integer density)
        LineDensity = density
    end
    action GetLineDensity() returns integer
        return LineDensity
    end

    /*
        Returns an array of all the series sets 
    */
    action GetSeriesList returns Array<Series>
        return seriesList
    end

    action AddSeries(Series series)
        seriesList:Add(series)
    end

    /*
    Returns the value of the showPoints flag.
    */
    action GetPointsFlag() returns boolean
        return showPoints
    end

    //blueprint action GenerateChartAreaInfo(ChartItem chartArea, Chart chart)

    /*
        Generates the tree of ChartItems that define how the chart will be 
        navigated and what extra information might be sent to the screen reader.
    */
    action GenerateInfoTree 
        if GetDefaultLayoutProperties():NeedsRendering()
            return now //we haven't loaded graphics yet, so bail.
        end
        
        //NOTE: These nodes implement a cheap form of ordinality might need changing
        ChartItem xAxis
        ChartItem yAxis
        ChartItem chartArea //not to be confused with panels
        
        // The chart area is the child unless y-axis is showing.
        summary:SetDisplayName(GenerateSummary())
        summary:SetNext(chartArea)
        summary:SetChild(chartArea)
        summary:SetContainer(me)
        summary:SetFocusTarget(me)
        chartArea:SetFocusTarget(me:GetChartArea())
        chartArea:SetParent(summary)
        chartArea:SetContainer(me)

        text lineText = "lines"
        text pointText = "points"
        if GetNumberOfLines() = 1
            linetext = "line"
        end
        if points:GetSize() = 1
            linetext = "point"
        end
        if lines:GetSize() > 0
            chartArea:SetDisplayName("This is the chart area with " + lines:GetSize() + " " + lineText + ".")
            me:GetChartArea():SetDescription("with" + lines:GetSize() + " " + lineText + ".")
        elseif points:GetSize() > 0
            chartArea:SetDisplayName("This is the chart area with " + points:GetSize() + " " + pointText + ".")
            me:GetChartArea():SetDescription("with" + points:GetSize() + " " + pointText + ".")
        end
    
        // If any of these are not showing the tree will skip them in the navigation        
        if IsShowingYAxis()
            GetVerticalPanel():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end
        if IsShowingXAxis()
            GetHorizontalPanel():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end
        if IsShowingLegend()
            GetLegend():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end

        // Generate Line Chart Info
        if lines:GetSize() > 0
            ChartItem firstChartLineItem
            firstChartLineItem:SetContainer(me)
            chartArea:SetChild(firstChartLineItem)
            firstChartLineItem:SetDisplayName("This is the line for " + lines:Get(0):GetName() + ".")
            firstChartLineItem:SetParent(chartArea)

            ChartLine firstChartLine = lines:Get(0)
            number lineMax = firstChartLine:GetLineMax():GetPercentY()*GetYAxisMaximum()
            number lineMin = firstChartLine:GetLineMin():GetPercentY()*GetYAxisMaximum()
            number lineStart = firstChartLine:GetLineStart():GetPercentY()*GetYAxisMaximum()
            number lineEnd = firstChartLine:GetLineEnd():GetPercentY()*GetYAxisMaximum()
            integer numOfPoints = firstChartLine:GetPoints():GetSize()
            integer numOfSegs = firstChartLine:GetLines():GetSize()
            text lineChange = " "
            if lineStart > lineEnd
                lineChange = ", This line is decreasing overall."
            elseif lineStart < lineEnd
                lineChange = ", This line is increasing overall."
            else 
                lineChange = ", This line shows no overall change from start to end."
            end
            firstChartLine:SetDescription(" , 1 of " + lines:GetSize() + " lines. 
                This line has " + numOfPoints + " points and " + numOfSegs + " line segments. 
                The maximum value for this line is " + lineMax + " , 
                the minimum value for this line is " + lineMin + " , 
                This line starts at a value of " + lineStart + " and ends at a value of "+ lineEnd + lineChange)
            firstChartLineItem:SetFocusTarget(firstChartLine)

            Icon region = NewRegionIcon(0,0,1,1)
            CreateChunks(firstChartLineItem, region, lines:Get(0):GetPoints(), lines:Get(0):GetLines(), 0)

            integer i = 1
            ChartItem previousChartLineItem = firstChartLineItem
            repeat while i < lines:GetSize()
        
                ChartItem chartLineItem
                chartLineItem:SetContainer(me)
                chartLineItem:SetDisplayName("This is the line for " + lines:Get(i):GetName() + ".")
                chartLineItem:SetParent(chartArea)
                chartLineItem:SetPrevious(previousChartLineItem)

                ChartLine chartLine = lines:Get(i)
                lineMax = chartLine:GetLineMax():GetPercentY()*GetYAxisMaximum()
                lineMin = chartLine:GetLineMin():GetPercentY()*GetYAxisMaximum()
                lineStart = chartLine:GetLineStart():GetPercentY()*GetYAxisMaximum()
                lineEnd = chartLine:GetLineEnd():GetPercentY()*GetYAxisMaximum()
                numOfPoints = chartLine:GetPoints():GetSize()
                numOfSegs = chartLine:GetLines():GetSize()
                lineChange = " "
                if lineStart > lineEnd
                    lineChange = ", This line is decreasing overall."
                elseif lineStart < lineEnd
                    lineChange = ", This line is increasing overall."
                else 
                    lineChange = ", This line shows no overall change from start to end."
                end
                chartLine:SetDescription(" , "+(i+1)+" of " + lines:GetSize() + " lines. 
                    This line has " + numOfPoints + " points and " + numOfSegs + " line segments. 
                    The maximum value for this line is " + lineMax + " , 
                    the minimum value for this line is " + lineMin + " , 
                    This line starts at a value of " + lineStart + " and ends at a value of "+ lineEnd + lineChange)
                chartLineItem:SetFocusTarget(chartLine)

                region = NewRegionIcon(0,0,1,1)
                CreateChunks(chartLineItem, region, lines:Get(i):GetPoints(), lines:Get(i):GetLines(), 0)
    
                previousChartLineItem:SetNext(chartLineItem)
                previousChartLineItem = chartLineItem
                i = i + 1
            end
            previousChartLineItem:SetNext(firstChartLineItem)
        
        end

        // Generate Scatter Plot Info
        if points:GetSize() > 0
            Icon newIcon = NewRegionIcon(0,0,1,1)
            SubdivideQuadrant(chartArea, newIcon, points, 0)
        end

        ChartSelection selection = GetSelection()
        selection:Set(summary)
    end

    /*
    Create a new region on the chart for accessbility.
    */
    private action NewRegionIcon (number percentX, number percentY, number percentWidth, number percentHeight) returns Icon
        Icon region
        Color transparent
        transparent:SetColor(0, 0, 1, 0.3)
        region:LoadFilledRectangle(1, 1, transparent)
        region:SetPercentageX(percentX)
        region:SetPercentageY(percentY)
        region:SetPercentageWidth(percentWidth)
        region:SetPercentageHeight(percentHeight)
        region:SetFocusable(true)
        region:SetAccessibilityCode(region:parent:Item:ITEM)
        LayoutProperties properties = region:GetDefaultLayoutProperties()
        region:Hide()
        return region
    end
    /*
    Split the chart area into regions until a minimum number of points is contained in a region or until a maximum number of division.
    */
    private action CreateChunks(ChartItem item, Icon region, Array<ChartPoint> ps,Array<LineSegment> ls, integer currentLevel)

        number x1 = math:Round(region:GetPercentageX() * GetXAxisMinimum(), options:GetTickDigits())
        number x2 = math:Round((region:GetPercentageX() + region:GetPercentageWidth()) * GetXAxisMaximum(), options:GetTickDigits())

        text pointDescription = "No points"
        text lineDescription = "No lines"
        if ps:GetSize() = 1
            pointDescription = "1 point"
        else
            pointDescription = ps:GetSize() + " points"
        end
        if ls:GetSize() = 1
            lineDescription = "1 line"
        else
            lineDescription = ls:GetSize() + " lines"
        end
        text chunkDescription = pointDescription + " and " + lineDescription + "."

        if ps:GetSize() <= pointThreshold or currentLevel >= maxChunks
            if ps:IsEmpty() = false
                region:SetDescription(chunkDescription + " " + "Use the arrow keys to navigate lines, points, or chunks.")
                
                //First point
                ChartItem firstPointItem
                ChartItem prevPoint
                if GetPointsFlag()
                    firstPointItem:SetContainer(me)
                    firstPointItem:SetDisplayName(" , 1 of " + ps:GetSize() + " points in this chunk, value of " + math:Round(ps:Get(0):GetPercentY() * GetYAxisMaximum(), 1))
                    firstPointItem:SetParent(item)
                    item:SetChild(firstPointItem)
    
                    ChartPoint firstPoint = ps:Get(0)
                    firstPoint:SetDescription(firstPointItem:GetDisplayName())
                    firstPointItem:SetFocusTarget(firstPoint)
                    prevPoint = firstPointItem
                end

                //First Line
                ChartItem firstLineItem
                ChartItem prevLine
                if ls:IsEmpty() = false
                    firstLineItem:SetContainer(me)
                    
                    if GetPointsFlag()
                        firstLineItem:SetParent(firstPointItem)
                        firstPointItem:SetChild(firstLineItem)
                    else
                        firstLineItem:SetParent(item)
                        item:SetChild(firstLineItem)
                        prevLine = firstLineItem
                    end

                    LineSegment firstLine = ls:Get(0)
                    text lineChange = " "
                    number start = math:Round(firstLine:GetPoint1():GetPercentY() * GetYAxisMaximum(), 1)
                    number stop = math:Round(firstLine:GetPoint2():GetPercentY() * GetYAxisMaximum(), 1)
                    if start > stop
                        lineChange = ", This line segment is decreasing value from " + start + " to " + stop
                    elseif start < stop
                        lineChange = ", This line segment is increasing value from " + start + " to " + stop
                    else 
                        lineChange = ", This line segment shows no change with the value remaining at " + start
                    end
                    firstLine:SetDescription(" segment between " + firstLine:GetPoint1():GetName() + " and " + firstLine:GetPoint2():GetName() + lineChange)
                    firstLineItem:SetDisplayName("Line segment between " + firstLine:GetPoint1():GetName() + " and " + firstLine:GetPoint2():GetName() + lineChange)
                    firstLineItem:SetFocusTarget(firstLine)
                end

                integer i = 1
                
                repeat while i < ps:GetSize()
                    //points
                    ChartItem pointItem
                    if GetPointsFlag()
                        pointItem:SetContainer(me)
                        pointItem:SetDisplayName(" , "+(i+1)+" of " + ps:GetSize() + " points in this chunk, value of " + math:Round(ps:Get(i):GetPercentY() * GetYAxisMaximum(), 1))
                        pointItem:SetParent(item)
                        pointItem:SetPrevious(prevPoint)
        
                        ChartPoint point = ps:Get(i)
                        point:SetDescription(pointItem:GetDisplayName())
                        pointItem:SetFocusTarget(point)
                    end

                    //lines
                    if i < ls:GetSize()
                        ChartItem lineItem
                        lineItem:SetContainer(me)

                        if GetPointsFlag()
                            lineItem:SetParent(pointItem)
                            pointItem:SetChild(lineItem)
                        else
                            lineItem:SetParent(item)
                            lineItem:SetPrevious(prevLine)
                            prevLine:SetNext(lineItem)
                            prevLine = lineItem
                        end
    
                        LineSegment line = ls:Get(i)
                        text lineChange = " "
                        number start = math:Round(line:GetPoint1():GetPercentY() * GetYAxisMaximum(), 1)
                        number stop = math:Round(line:GetPoint2():GetPercentY() * GetYAxisMaximum(), 1)
                        if start > stop
                            lineChange = ", This line segment is decreasing value from " + start + " to " + stop
                        elseif start < stop
                            lineChange = ", This line segment is increasing value from " + start + " to " + stop
                        else 
                            lineChange = ", This line segment shows no change with the value remaining at " + start
                        end
                        line:SetDescription(" segment between " + line:GetPoint1():GetName() + " and " + line:GetPoint2():GetName() + lineChange)
                        lineItem:SetDisplayName("Line segment between " + line:GetPoint1():GetName() + " and " + line:GetPoint2():GetName() + lineChange)
                        lineItem:SetFocusTarget(line)
                    end

                    prevPoint:SetNext(pointItem)
                    prevPoint = pointItem
                    i = i + 1
                end
                prevPoint:SetNext(firstPointItem)  
                prevLine:SetNext(firstLineItem)            
            else
                region:SetDescription(chunkDescription)
            end
        else
            region:SetDescription(chunkDescription + " " + "Use the arrow keys to navigate points or chunks.")
            number xDivider = region:GetPercentageX() + (region:GetPercentageWidth() / 2.0)
            Array<ChartPoint> leftChunkPoints
            Array<Drawable> leftChunkLines
            Array<ChartPoint> rightChunkPoints
            Array<Drawable> rightChunkLines

            integer i = 0
            repeat while i < ps:GetSize()
                ChartPoint point = ps:Get(i)
                if point:GetPercentX() < xDivider
                    leftChunkPoints:Add(point)
                    if i < ls:GetSize()
                        leftChunkLines:Add(ls:Get(i))
                    end
                else
                    rightChunkPoints:Add(point)
                    if i < ls:GetSize()
                        rightChunkLines:Add(ls:Get(i))
                    end
                end
                i = i + 1
            end

            //left chunk
            Icon leftChunkRegion = NewRegionIcon(region:GetPercentageX(), 0, region:GetPercentageWidth() / 2.0, 1.0)
            leftChunkRegion:SetName("Left Chunk")
            GetChartArea():Add(leftChunkRegion)
            
            ChartItem leftChunkItem
            leftChunkItem:SetContainer(me)
            leftChunkItem:SetParent(item)
            leftChunkItem:SetFocusTarget(leftChunkRegion)

            //right chunk
            Icon rightChunkRegion = NewRegionIcon(region:GetPercentageX() + region:GetPercentageWidth() / 2.0, 0, region:GetPercentageWidth() / 2.0, 1.0)
            rightChunkRegion:SetName("Right Chunk")
            GetChartArea():Add(rightChunkRegion)
            
            ChartItem rightChunkItem
            rightChunkItem:SetContainer(me)
            rightChunkItem:SetParent(item)
            rightChunkItem:SetFocusTarget(rightChunkRegion)

            item:SetChild(leftChunkItem)
            leftChunkItem:SetNext(rightChunkItem)
            leftChunkItem:SetPrevious(rightChunkItem)
            rightChunkItem:SetNext(leftChunkItem)
            rightChunkItem:SetPrevious(leftChunkItem)
            
            CreateChunks(leftChunkItem, leftChunkRegion, leftChunkPoints, leftChunkLines, currentLevel + 1)
            CreateChunks(rightChunkItem, rightChunkRegion, rightChunkPoints, rightChunkLines, currentLevel + 1)
        end
    end

    /*
    If the quadrant represented by the ChartItem has more points than the quadrant
    threshold, up to four new quadrants will be added as children to the ChartItem.
    This is then called recursively on the new quadrants, if any.
    */
    private action SubdivideQuadrant(ChartItem item, Icon region, Array<ChartPoint> points, integer currentLevel)
        number x1 = math:Round(region:GetPercentageX() * GetXAxisMaximum(), options:GetTickDigits())
        number x2 = math:Round((region:GetPercentageX() + region:GetPercentageWidth()) * GetXAxisMaximum(), options:GetTickDigits())
        number y1 = math:Round(region:GetPercentageY() * GetYAxisMaximum(), options:GetTickDigits())
        number y2 = math:Round((region:GetPercentageY() + region:GetPercentageHeight()) * GetYAxisMaximum(), options:GetTickDigits())

        text pointsText = ""
        if points:GetSize() = 1
            pointsText = "1 point. "
        else
            pointsText = points:GetSize() + " points. "
        end

        text rangeText = pointsText + GetXAxisTitle() + " " + x1 + " to " + x2 + ", " + GetYAxisTitle() + " " + y1 + " to " + y2

        if points:GetSize() <= quadrantThreshold or currentLevel >= maxSubdivisions
            if points:IsEmpty() = false
                points:Sort(comparison)

                region:SetDescription(rangeText + ", Use the arrow keys to navigate the points.")

                ChartItem firstPointItem
                ChartPoint firstPoint = points:Get(0)
                firstPointItem:SetContainer(me)
                firstPointItem:SetDisplayName(GetXAxisTitle() + " " + math:Round(firstPoint:GetPercentX() * GetXAxisMaximum(), options:GetTickDigits()) + ", " + GetYAxisTitle() + " " + math:Round(firstPoint:GetPercentY() * GetYAxisMaximum(), options:GetTickDigits())
                    + ", 1 of " + points:GetSize())
                firstPoint:SetName(firstPointItem:GetDisplayName())
                firstPoint:SetParentRegion(region)
                firstPointItem:SetParent(item)
                firstPointItem:SetFocusTarget(firstPoint)
                item:SetChild(firstPointItem)
        
                integer i = 1
                ChartItem previous = firstPointItem
                repeat while i < points:GetSize()
                    ChartItem pointItem
                    ChartPoint point = points:Get(i)

                    pointItem:SetContainer(me)
                    pointItem:SetDisplayName(GetXAxisTitle() + " " + math:Round(point:GetPercentX() * GetXAxisMaximum(), options:GetTickDigits()) + ", " + GetYAxisTitle() + " " + math:Round(point:GetPercentY() * GetYAxisMaximum(), options:GetTickDigits())
                        + ", " + (i + 1) + " of " + points:GetSize())
                    point:SetName(pointItem:GetDisplayName())
                    point:SetParentRegion(region)
                    pointItem:SetParent(item)
                    pointItem:SetPrevious(previous)
                    pointItem:SetFocusTarget(point)
                    previous:SetNext(pointItem)
                    previous = pointItem
                    i = i + 1
                end
            else
                region:SetDescription(rangeText)
            end
        else
            region:SetDescription(rangeText + ", Use the arrows to inspect the sub-regions.")

            number xDivider = region:GetPercentageX() + (region:GetPercentageWidth() / 2.0)
            number yDivider = region:GetPercentageY() + (region:GetPercentageHeight() / 2.0)
            Array<ChartPoint> topLeft
            Array<ChartPoint> topRight
            Array<ChartPoint> bottomLeft
            Array<ChartPoint> bottomRight

            integer i = 0
            repeat while i < points:GetSize()
                ChartPoint point = points:Get(i)
                if point:GetPercentX() < xDivider
                    if point:GetPercentY() < yDivider
                        bottomLeft:Add(point)
                    else
                        topLeft:Add(point)
                    end
                else
                    if point:GetPercentY() < yDivider
                        bottomRight:Add(point)
                    else
                        topRight:Add(point)
                    end
                end

                i = i + 1
            end

            text quadrantName = "Quadrant"
            if currentLevel >= 1
                quadrantName = "Subregion"
            end

            ChartItem topLeftItem
            topLeftItem:SetContainer(me)
            topLeftItem:SetParent(item)
            Icon topLeftRegion = NewRegionIcon(region:GetPercentageX(), region:GetPercentageY() + region:GetPercentageHeight() / 2.0,
                    region:GetPercentageWidth() / 2.0, region:GetPercentageHeight() / 2.0)
            topLeftRegion:SetName("Top-Left " + quadrantName)
            GetChartArea():Add(topLeftRegion)
            topLeftItem:SetFocusTarget(topLeftRegion)

            ChartItem topRightItem
            topRightItem:SetContainer(me)
            topRightItem:SetParent(item)
            Icon topRightRegion = NewRegionIcon(region:GetPercentageX() + region:GetPercentageWidth() / 2.0, region:GetPercentageY() + region:GetPercentageHeight() / 2.0,
                    region:GetPercentageWidth() / 2.0, region:GetPercentageHeight() / 2.0)
            topRightRegion:SetName("Top-Right " + quadrantName)
            GetChartArea():Add(topRightRegion)
            topRightItem:SetFocusTarget(topRightRegion)

            ChartItem bottomRightItem
            bottomRightItem:SetContainer(me)
            bottomRightItem:SetParent(item)
            Icon bottomRightRegion = NewRegionIcon(region:GetPercentageX() + region:GetPercentageWidth() / 2.0, region:GetPercentageY(),
                    region:GetPercentageWidth() / 2.0, region:GetPercentageHeight() / 2.0)
            bottomRightRegion:SetName("Bottom-Right " + quadrantName)
            GetChartArea():Add(bottomRightRegion)
            bottomRightItem:SetFocusTarget(bottomRightRegion)

            ChartItem bottomLeftItem
            bottomLeftItem:SetContainer(me)
            bottomLeftItem:SetParent(item)
            Icon bottomLeftRegion = NewRegionIcon(region:GetPercentageX(), region:GetPercentageY(),
                    region:GetPercentageWidth() / 2.0, region:GetPercentageHeight() / 2.0)
            bottomLeftRegion:SetName("Bottom-Left " + quadrantName)
            GetChartArea():Add(bottomLeftRegion)
            bottomLeftItem:SetFocusTarget(bottomLeftRegion)

            item:SetChild(topLeftItem)
            topLeftItem:SetNext(topRightItem)
            topLeftItem:SetPrevious(bottomLeftItem)
            topRightItem:SetNext(bottomRightItem)
            topRightItem:SetPrevious(topLeftItem)
            bottomRightItem:SetNext(bottomLeftItem)
            bottomRightItem:SetPrevious(topRightItem)
            bottomLeftItem:SetNext(topLeftItem)
            bottomLeftItem:SetPrevious(bottomRightItem)

            SubdivideQuadrant(topLeftItem, topLeftRegion, topLeft, currentLevel + 1)
            SubdivideQuadrant(topRightItem, topRightRegion, topRight, currentLevel + 1)
            SubdivideQuadrant(bottomRightItem, bottomRightRegion, bottomRight, currentLevel + 1)
            SubdivideQuadrant(bottomLeftItem, bottomLeftRegion, bottomLeft, currentLevel + 1)
        end
    end
    action SetQuadrantThreshold(integer threshold)
        quadrantThreshold = threshold
    end
    
    action GetQuadrantThreshold returns integer
        return quadrantThreshold
    end

    action SetMaximumSubdivisons(integer subdivisions)
        maxSubdivisions = subdivisions
    end

    action GetMaximumSubdivisions returns integer
        return maxSubdivisions
    end

    /*
        This action is called whenever the window is resized.
    */
    action Resize()
        parent:Chart:Resize()
    end
    /*
    Flag used to display the points of all lines.
    */
    action ShowAllPoints()
        showPoints = true
        integer i = 0
        repeat while i < lines:GetSize()
            lines:Get(i):ShowPoints()
            i = i + 1
        end
    end

    /*
    Flag used to hide all the points of all lines.
    */
    action HideAllPoints()
        showPoints = false
        integer i = 0
        repeat while i < lines:GetSize()
            lines:Get(i):HidePoints()
            i = i + 1
        end
    end
end