package Libraries.Interface.Controls.Charts

use Libraries.Interface.Selections.ChartSelection
use Libraries.Interface.Controls.Icon
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Views.LabelBoxView
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Array
use Libraries.Compute.Math
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Interface.Controls.Charts.Graphics.ChartDrawable

/*
    The TwoVariableChart class is Chart object that inherits from Control and like other
    UI elements it is added to the Game class. TwoVariableChart is a parent to the LineChart 
    and the ScatterPlot class and is not directly used itself.

    Attribute: Authors: Gabriel Contreras, Hannah Williams

    Attribute: Example

    use Libraries.Interface.Controls.Charts
    use Libraries.Interface.Controls.Charts.LineChart
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            LineChart chart
            Add(chart)
        end
    end
*/

class TwoVariableChart is Chart
    private ChartItem chartAreaItem

    private Array<ChartLine> lines      // Used with Line Charts
    private Array<ChartPoint> points    // Used with Scatter Plots
    private Array<ChartDrawable> regions    // Used with Line Charts / Scatter Plots
    private ChartOptions options
    private Math math

    private number maxPointHeightValue = 0
    private number maxPointWidthValue = 0
    private number minPointHeightValue = 0
    private number minPointWidthValue = 0

    private integer PointDensity = 0
    private integer LineDensity = 0
    private boolean showPoints = true

    private ColorGroup previousColorGroup = undefined
    private Color previousColor = undefined
    private number previousZ = 0

    // If there are fewer than this many points in a quadrant, we don't subdivide the quadrant further.
    private integer quadrantThreshold = 10
    private integer pointThreshold = 21

    // The maximum number of times that regions can be subdivided into quadrants.
    private integer maxSubdivisions = 4
    private integer maxChunks = 16
    
    private ChartPointComparison comparison

    /*
        LoadGraphics
        This action is used to load the graphical components of the Control. This is
        handled automatically by the Game engine as needed, and most users shouldn't
        need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        DisposeDrawables()
        if properties = undefined
            return now
        end
        parent:Chart:LoadGraphics(properties)

        // Check for orientation change
        if OrientationChanged()
            flipValues()
        end

        LoadChartAreaItems()     
    end

    action LoadChartAreaItems()
        // Line Chart
        if lines:GetSize() > 0
            integer i = 0
            repeat while i < lines:GetSize()
                ChartLine cline = lines:Get(i)
                ChartAreaPanel chartArea
                if IsSeparated()
                    integer j = 0
                    repeat while j < GetNumberOfChartAreas()
                        if IsSeparatedBySeries()
                            if cline:GetSeries():GetName() = GetSubChartAreas():Get(j):GetName()
                                chartArea = GetSubChartAreas():Get(j)
                                chartArea:AddChartAreaItem(cline)
                            end
                        elseif IsSeparatedByFactor()
//                            if lineName = GetSubChartAreas():Get(j):GetName()
//                                chartArea = GetSubChartAreas():Get(j)
//                                chartArea:AddChartAreaItem(lines:Get(i))
//                            end
                        end
                        j = j + 1
                    end
                else
                    chartArea = GetChartArea()
                end

                cline:SetFocusable(true)
                cline:SetAccessibilityCode(parent:Item:ITEM)
                cline:SetNextFocus(GetNextFocus())
                cline:SetPreviousFocus(GetPreviousFocus())
                chartArea:Add(cline)

                integer j = 0
                repeat while j < cline:GetLines():GetSize()
                    LineSegment line = cline:GetLines():Get(j)
                    line:SetFocusable(true)
                    line:SetAccessibilityCode(parent:Item:ITEM)
                    line:SetNextFocus(GetNextFocus())
                    line:SetPreviousFocus(GetPreviousFocus())
                    chartArea:Add(line)
                    j = j + 1
                end
                if cline:GetPointsFlag()
                    j = 0
                    repeat while j < cline:GetPoints():GetSize()
                        ChartPoint point = cline:GetPoints():Get(j)
                        point:SetFocusable(true)
                        point:SetAccessibilityCode(parent:Item:ITEM)
                        point:SetNextFocus(GetNextFocus())
                        point:SetPreviousFocus(GetPreviousFocus())
                        chartArea:Add(point)

                        number valueX = point:GetValueX()
                        number valueY = point:GetValueY()
                        text valueXText = ""+valueX
                        if CheckIfInteger(valueX)
                            valueXText = ""+cast(integer, valueX)
                        end
                        text valueYText = ""+valueY
                        if CheckIfInteger(valueY)
                            valueYText = ""+cast(integer, valueY)
                        end

                        if point:ShowAnnotation() or ShowAnnotations()
                            ChartLabel pointLabel
                            pointLabel:SetText("("+valueXText+","+valueYText+")")
                            point:SetAnnotation(pointLabel)
                            chartArea:Add(pointLabel)
                        end
                        j = j + 1
                    end
                end
                i = i + 1
            end
        end

        // Scatter Plot
        if points:GetSize() > 0
            integer i = 0
            repeat while i < points:GetSize()
                ChartPoint point = points:Get(i)
                point:SetFocusable(true)
                point:SetAccessibilityCode(parent:Item:ITEM)
                point:SetNextFocus(GetNextFocus())
                point:SetPreviousFocus(GetPreviousFocus())
                number valueX = point:GetValueX()
                number valueY = point:GetValueY()
                text valueXText = ""+valueX
                if CheckIfInteger(valueX)
                    valueXText = ""+cast(integer, valueX)
                end
                text valueYText = ""+valueY
                if CheckIfInteger(valueY)
                    valueYText = ""+cast(integer, valueY)
                end

                ChartAreaPanel chartArea = GetChartArea()
                if IsSeparated()
                    integer j = 0
                    repeat while j < GetNumberOfChartAreas()
                        if IsSeparatedBySeries()
                            if point:GetSeries():GetName() = GetSubChartAreas():Get(j):GetName()
                                chartArea = GetSubChartAreas():Get(j)
                                GetSubChartAreas():Get(j):AddChartAreaItem(point)
                            end
                        elseif IsSeparatedByFactor()
//                            if groupName = GetSubChartAreas():Get(j):GetName()
//                                GetSubChartAreas():Get(j):Add(point)
//                                GetSubChartAreas():Get(j):AddChartAreaItem(point)
//                            end
                        end
                        j = j + 1
                    end
                end
                chartArea:Add(point)
                if point:ShowAnnotation() or ShowAnnotations()
                    ChartLabel pointLabel
                    pointLabel:SetText("("+valueXText+","+valueYText+")")
                    point:SetAnnotation(pointLabel)
                    chartArea:Add(pointLabel)
                end
                i = i + 1
            end
        end
    end

    private action CheckIfInteger(number value) returns boolean
        return (cast(integer, value) = value)
    end

    private action flipValues()
        // Line Chart
        if lines:GetSize() > 0
            integer i = 0
            repeat while i < lines:GetSize()
                j = 0
                repeat while j < lines:Get(i):GetPoints():GetSize()
                    ChartPoint point = lines:Get(i):GetPoints():Get(j)
                    number temp = point:GetValueX()
                    point:SetValueX(point:GetValueY())
                    point:SetValueY(temp)
                    j = j + 1
                end
                i = i + 1
            end
        end

        // Scatter Plot
        if points:GetSize() > 0
            integer i = 0
            repeat while i < points:GetSize()
                ChartPoint point = points:Get(i)
                number temp = point:GetValueX()
                point:SetValueX(point:GetValueY())
                point:SetValueY(temp)
                i = i + 1
            end
        end
    end

    /*
        DisposeDrawables
        
        Empties drawables from the chart area.
    */
    action DisposeDrawables()
        parent:Chart:DisposeDrawables()

        GetChartArea():Empty()
    end

    /*
        LostSelection is a supplemental action to the parent Chart's LostSelection.
        Any items specific to only this type of chart or if an item needs different highlighting
        instructions than that of the parent class, it will have their LostSelection defined here.

        Unlike many kinds of user interface controls, there is no universal way of interacting with a chart and, as such, this 
        may be defined by any chart to be custom. As such, charts must be able to take messages suggesting an item in the chart
        has either lost or gained the focus. Broadly speaking, this is done automatically and while charts need to implement
        this action, they do not need to call this action directly.

        Attribute: Parameter ci the ChartItem representing the structure for this particular kind of chart. 
    */
    action LostSelection(ChartItem ci)
        if ci = undefined
            return now
        end
        Item target = ci

        if target not= undefined
            if target is Series
                if points:GetSize() > 0
                    parent:Chart:LostSelection(ci)
                else
                    Series temp = cast(Series, target)
                    integer i = 0
                    repeat while i < temp:GetSize()
                        ChartLine line = cast(ChartLine, temp:GetItemAt(i))
                        line:SetColor(previousColor)
                        line:SetZ(previousZ)
                        i = i + 1
                    end
                    temp:GetEntryIcon():SetColor(previousColor)
                    temp:GetEntryBox():SetColor(0,0,0,0)
                end
            elseif target is LineSegment
                LineSegment temp = cast(LineSegment, target)
                temp:SetColor(previousColor)
                temp:SetZ(previousZ)
            elseif target is ChartLine
                ChartLine temp = cast(ChartLine, target)
                temp:SetColor(previousColor)
                temp:SetZ(previousZ)
            elseif target is ChartPoint
                // Do nothing, let the points handle themselves.
            elseif target is ChartDrawable
                target:Hide()
            else
                parent:Chart:LostSelection(ci)
            end
        end
    end

    /* 
        OnSelectionChange is a supplemental action to the parent Chart's OnSelectionChange.
        Any items specific to only this type of chart or if an item needs different highlighting
        instructions than that of the parent class, it will have their GainedSelection defined here.

        Unlike many kinds of user interface controls, there is no universal way of interacting with a chart and, as such, this 
        may be defined by any chart to be custom. As such, charts must be able to take messages suggesting an item in the chart
        has either lost or gained the focus. Broadly speaking, this is done automatically and while charts need to implement
        this action, they do not need to call this action directly.

        Attribute: Parameter ci the ChartItem representing the structure for this particular kind of chart. 
    */
    action OnSelectionChange(ChartItem ci)
        if ci = undefined
            return now
        end
        Item target = ci

        if target not= undefined
            target:Focus()
            if target is Series
                if points:GetSize() > 0
                    parent:Chart:OnSelectionChange(ci)
                else
                    Series temp = cast(Series, target)
                    previousColor = temp:GetColor()
                    integer i = 0
                    repeat while i < temp:GetSize()
                        ChartLine line = cast(ChartLine, temp:GetItemAt(i))
                        line:SetColor(GetSelectionColor())
                        previousZ = line:GetZ()
                        line:SetZ(-1)
                        i = i + 1
                    end
                    temp:GetEntryIcon():SetColor(GetSelectionColor())
                    temp:GetEntryBox():SetColor(GetSelectionColor())
                end
            elseif target is LineSegment
                LineSegment temp = cast(LineSegment, target)
                previousColor = temp:GetColor()
                temp:SetColor(GetSelectionColor())
                temp:SetZ(-1)
            elseif target is ChartLine
                ChartLine temp = cast(ChartLine, target)
                previousColor = temp:GetColor()
                previousZ = temp:GetZ()
                temp:SetColor(GetSelectionColor())
                temp:SetZ(-1)
            elseif target is ChartPoint
                // Do nothing, let the points handle themselves.
            elseif target is ChartDrawable
                target:Show()
            else
                parent:Chart:OnSelectionChange(ci)
            end
        end
    end

    /*
        This action is called whenever the window is resized.
    */
    action Resize()
        parent:Chart:Resize()
    end

    /*
        Used to create a new ChartLine object for the chart and add it to the lines array.
    */
    action AddChartLine(ChartLine newLine)
        if lines:GetSize() = 0
            maxPointHeightValue = newLine:GetLineMax():GetValueY()
            minPointHeightValue = newLine:GetLineMin():GetValueY()
            maxPointWidthValue = newLine:GetLineEnd():GetValueX()
            minPointWidthValue = newLine:GetLineStart():GetValueX()
        end
        if maxPointHeightValue < newLine:GetLineMax():GetValueY()
            maxPointHeightValue = newLine:GetLineMax():GetValueY()
        end
        if minPointHeightValue > newLine:GetLineMin():GetValueY()
            minPointHeightValue = newLine:GetLineMin():GetValueY()
        end
        if maxPointWidthValue < newLine:GetLineEnd():GetValueX()
            maxPointWidthValue = newLine:GetLineEnd():GetValueX()
        end
        if minPointWidthValue > newLine:GetLineStart():GetValueX()
            minPointWidthValue = newLine:GetLineStart():GetValueX()
        end
        lines:Add(newLine)
    end

    action AddPoint(ChartPoint point)
        if points:GetSize() = 0
            maxPointHeightValue = point:GetValueY()
            minPointHeightValue = point:GetValueY()
            maxPointWidthValue = point:GetValueX()
            minPointWidthValue = point:GetValueX()
        end
        if maxPointHeightValue < point:GetValueY()
            maxPointHeightValue = point:GetValueY()
        end
        if minPointHeightValue > point:GetValueY()
            minPointHeightValue = point:GetValueY()
        end
        if maxPointWidthValue < point:GetValueX()
            maxPointWidthValue = point:GetValueX()
        end
        if minPointWidthValue > point:GetValueX()
            minPointWidthValue = point:GetValueX()
        end
        points:Add(point)
    end

    action GetChartPoints returns Array<ChartPoint> 
        return points
    end

    /*
        Return a specific line from the chart.
    */
    action GetLine(integer i) returns ChartLine
        if lines:Get(i) = undefined
            alert("The specified line does not exist.")
        else
            return lines:Get(i)
        end
    end

    /*
        Returns the entire list of lines from the chart.
    */
    action GetAllLines() returns Array<ChartLine>
        return lines
    end

    /*
        Returns the number of full chart lines from the chart.
    */
    action GetNumberOfLines() returns integer
        return lines:GetSize()
    end

    /*
        Returns the number of points from the chart. (scatter)
    */
    action GetNumberOfPoints() returns integer
        return points:GetSize()
    end

    /*
        Returns the entire list of regions from the chart.
    */
    action GetRegions() returns Array<ChartDrawable>
        return regions
    end

    /*
        Returns the ChartItem for the chart area.
    */
    action GetChartAreaItem() returns ChartItem
        return chartAreaItem
    end

    /*
        Set and get the point radius.
    */
    action SetPointDensity(integer radius)
        PointDensity = radius
    end

    action GetPointDensity() returns integer
        return PointDensity
    end

    /*
        Set and get the line density.
    */
    action SetLineDensity(integer density)
        LineDensity = density
    end

    action GetLineDensity() returns integer
        return LineDensity
    end

    /*
        Returns the value of the showPoints flag.
    */
    action GetPointsFlag() returns boolean
        return showPoints
    end

    /*
    Flag used to display the points of all lines.
    */
    action ShowAllPoints()
        showPoints = true
        integer i = 0
        repeat while i < lines:GetSize()
            lines:Get(i):ShowPoints()
            i = i + 1
        end
    end

    /*
    Flag used to hide all the points of all lines.
    */
    action HideAllPoints()
        showPoints = false
        integer i = 0
        repeat while i < lines:GetSize()
            lines:Get(i):HidePoints()
            i = i + 1
        end
    end

    /*
        GenerateInfoTree
        Generates the tree of ChartItems that define how the chart will be 
        navigated and what extra information might be sent to the screen reader.
        GenerateSummary is done in the child class: LineChart or ScatterPlot
    */
    action GenerateInfoTree
        if GetDefaultLayoutProperties():NeedsRendering()
            // We haven't loaded graphics yet, so bail.
            return now 
        end
        
        //NOTE: These nodes implement a cheap form of ordinality might need changing
        ChartItem xAxis = GetHorizontalPanel()
        ChartItem yAxis = GetVerticalPanel()
        ChartItem chartArea = GetChartArea()

        ChartItem summary = me
        // The chart area is the child unless y-axis is showing.
        summary:SetDisplayName(GenerateSummary())
        summary:SetRightItem(chartArea)
        summary:SetEnterItem(chartArea)
        summary:SetContainer(me)

        chartArea:SetEscapeItem(summary)
        chartArea:SetContainer(me)

        text lineText = "lines"
        text pointText = "points"
        if GetNumberOfLines() = 1
            linetext = "line"
        end
        if points:GetSize() = 1
            linetext = "point"
        end
        if lines:GetSize() > 0
            chartArea:SetDisplayName("This is the chart area with " + lines:GetSize() + " " + lineText + ".")
            me:GetChartArea():SetDescription("with" + lines:GetSize() + " " + lineText + ".")
        elseif points:GetSize() > 0
            chartArea:SetDisplayName("This is the chart area with " + points:GetSize() + " " + pointText + ".")
            me:GetChartArea():SetDescription("with" + points:GetSize() + " " + pointText + ".")
        end
    
        // If any of these are not showing the tree will skip them in the navigation        
        if IsShowingYAxis()
            GetVerticalPanel():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end
        if IsShowingXAxis()
            GetHorizontalPanel():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end
        if IsShowingLegend()
            GetLegend():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end

        // Generate Line Chart Info
        if lines:GetSize() > 0
            if IsSeparated()
                integer subAreaCount = GetNumberOfVisibleChartAreas()
                if GetNumberOfChartAreas() > 0
                    ChartItem firstArea = GetSubChartAreas():Get(0)
                    firstArea:SetContainer(me)

                    GetChartArea():SetDescription(" with " + subAreaCount + " sub charts")
                    chartArea:SetEnterItem(firstArea)
                    firstArea:SetEscapeItem(chartArea)

                    firstArea:SetDisplayName(GetSubChartAreas():Get(0):GetName())
                    Array<ChartItem> chartAreaItems = GetSubChartAreas():Get(0):GetChartAreaItems()
                    GetSubChartAreas():Get(0):SetDescription(" chart area with " + chartAreaItems:GetSize() + " line, 1 of " + subAreaCount + " sub charts.")
                    ChartDrawable newIcon = NewRegionIcon(0,0,1,1)
                    if chartAreaItems:GetSize() > 0
                        if (chartAreaItems:Get(0) is ChartLine)
                            ChartLine line = cast(ChartLine, chartAreaItems:Get(0))

                            ChartItem firstChartLineItem = line
                            firstChartLineItem:SetContainer(me)
                            firstArea:SetEnterItem(firstChartLineItem)
                            firstChartLineItem:SetDisplayName("This is the line for " + line:GetName() + ".")
                            firstChartLineItem:SetEscapeItem(firstArea)
                
                            GenerateLineSummary(line)
                
                            ChartDrawable region = NewRegionIcon(0,0,1,1)
                            CreateChunks(GetSubChartAreas():Get(0), firstChartLineItem, region, line:GetPoints(), line:GetLines(), 0)
                        end
                    end

                    integer i = 1
                    ChartItem previousArea = firstArea
                    repeat while i < GetNumberOfChartAreas()
                        ChartAreaPanel chartSubArea = GetSubChartAreas():Get(i)
                        if chartSubArea:IsShowing()
                            ChartItem nextArea = chartSubArea
                            nextArea:SetContainer(me)
                            nextArea:SetParent(chartArea)
                            previousArea:SetRightItem(nextArea)
                            nextArea:SetLeftItem(previousArea)
                            previousArea = nextArea
                            nextArea:SetDisplayName(chartSubArea:GetName())
                            chartAreaItems = chartSubArea:GetChartAreaItems()
                            chartSubArea:SetDescription(" chart area with " + chartAreaItems:GetSize() + " line, " + (i+1) + " of " + subAreaCount + " sub charts.")
                            newIcon = NewRegionIcon(0,0,1,1)
                            if chartAreaItems:GetSize() > 0
                                if (chartAreaItems:Get(0) is ChartLine)
                                    ChartLine line = cast(ChartLine, chartAreaItems:Get(0))
        
                                    ChartItem firstChartLineItem = line
                                    firstChartLineItem:SetContainer(me)
                                    nextArea:SetEnterItem(firstChartLineItem)
                                    firstChartLineItem:SetDisplayName("This is the line for " + line:GetName() + ".")
                                    firstChartLineItem:SetEscapeItem(nextArea)
                        
                                    GenerateLineSummary(line)
                        
                                    ChartDrawable region = NewRegionIcon(0,0,1,1)
                                    CreateChunks(chartSubArea, firstChartLineItem, region, line:GetPoints(), line:GetLines(), 0)
                                end
                            end
                        end
                        i = i + 1
                    end
                end
            else
                ChartLine firstChartLine = lines:Get(0)
                ChartItem firstChartLineItem = firstChartLine
                firstChartLineItem:SetContainer(me)
                chartArea:SetEnterItem(firstChartLineItem)
                firstChartLineItem:SetDisplayName("This is the line for " + lines:Get(0):GetName() + ".")
                firstChartLineItem:SetEscapeItem(chartArea)

                GenerateLineSummary(firstChartLine)
    
                ChartDrawable region = NewRegionIcon(0,0,1,1)
                CreateChunks(GetChartArea(), firstChartLineItem, region, lines:Get(0):GetPoints(), lines:Get(0):GetLines(), 0)
    
                integer i = 1
                ChartItem previousChartLineItem = firstChartLineItem
                repeat while i < lines:GetSize()
                    ChartLine chartLine = lines:Get(i)
                    ChartItem chartLineItem = chartLine
                    chartLineItem:SetContainer(me)
                    chartLineItem:SetDisplayName("This is the line for " + lines:Get(i):GetName() + ".")
                    chartLineItem:SetEscapeItem(chartArea)
                    chartLineItem:SetLeftItem(previousChartLineItem)
    
                    
                    GenerateLineSummary(chartLine)
    
                    region = NewRegionIcon(0,0,1,1)
                    CreateChunks(GetChartArea(), chartLineItem, region, lines:Get(i):GetPoints(), lines:Get(i):GetLines(), 0)
        
                    previousChartLineItem:SetRightItem(chartLineItem)
                    previousChartLineItem = chartLineItem
                    i = i + 1
                end
            end
        end

        // Generate Scatter Plot Info
        if points:GetSize() > 0
            if IsSeparated()
                integer subAreaCount = GetNumberOfVisibleChartAreas()
                if GetNumberOfChartAreas() > 0
                    ChartItem firstArea = GetSubChartAreas():Get(0)
                    firstArea:SetContainer(me)
                    GetChartArea():SetDescription(" with " + subAreaCount + " sub charts")
                    chartArea:SetEnterItem(firstArea)
                    firstArea:SetEscapeItem(chartArea)
                    firstArea:SetDisplayName(GetSubChartAreas():Get(0):GetName())
                    Array<ChartItem> chartAreaItems = GetSubChartAreas():Get(0):GetChartAreaItems()
                    GetSubChartAreas():Get(0):SetDescription(" chart area with " + chartAreaItems:GetSize() + " points, 1 of " + subAreaCount + " sub charts.")
                    ChartDrawable newIcon = NewRegionIcon(0,0,1,1)
                    Array<ChartPoint> firstAreaPoints = CastToPoints(chartAreaItems)
                    SubdivideQuadrant(GetSubChartAreas():Get(0), firstArea, newIcon, firstAreaPoints, 0)

                    integer i = 1
                    ChartItem previousArea = firstArea
                    repeat while i < GetNumberOfChartAreas()
                        ChartAreaPanel chartSubArea = GetSubChartAreas():Get(i)
                        if chartSubArea:IsShowing()
                            ChartItem nextArea = chartSubArea
                            nextArea:SetContainer(me)
                            nextArea:SetEscapeItem(chartArea)
                            previousArea:SetRightItem(nextArea)
                            nextArea:SetLeftItem(previousArea)
                            previousArea = nextArea
                            nextArea:SetDisplayName(chartSubArea:GetName())
                            chartAreaItems = chartSubArea:GetChartAreaItems()
                            chartSubArea:SetDescription(" chart area with " + chartAreaItems:GetSize() + " points, " + (i+1) + " of " + subAreaCount + " sub charts.")
                            newIcon = NewRegionIcon(0,0,1,1)
                            Array<ChartPoint> nextAreaPoints = CastToPoints(chartAreaItems)
                            SubdivideQuadrant(chartSubArea, nextArea, newIcon, nextAreaPoints, 0)
                        end
                        i = i + 1
                    end
                end
            else
                ChartDrawable newIcon = NewRegionIcon(0,0,1,1)
                SubdivideQuadrant(GetChartArea(), chartArea, newIcon, points, 0)
            end
        end
        chartAreaItem = chartArea
        ChartSelection selection = GetSelection()
        selection:Set(summary)
    end

    action CastToPoints(Array <Item> chartAreaItems) returns Array <ChartPoint>
        Array <ChartPoint> points
        integer i = 0
        repeat while i < chartAreaItems:GetSize()
            if (chartAreaItems:Get(i) is ChartPoint)
                ChartPoint point = cast(ChartPoint, chartAreaItems:Get(i))
                points:Add(point)
            end
            i = i + 1
        end
        return points
    end

    action GenerateLineSummary(ChartLine line)
        number lineMax = math:Round(line:GetLineMax():GetPercentY()*GetYAxisMaximum(), 5)
        number lineMin = math:Round(line:GetLineMin():GetPercentY()*GetYAxisMaximum(), 5)
        number lineStart = line:GetLineStart():GetPercentY()*GetYAxisMaximum()
        number lineEnd = line:GetLineEnd():GetPercentY()*GetYAxisMaximum()
        integer numOfPoints = line:GetPoints():GetSize()
        integer numOfSegs = line:GetLines():GetSize()
        if GetPointsFlag()
            line:SetDescription(" has " + numOfPoints + " points and " + numOfSegs + " line segments, max of " + lineMax + " and a min of " + lineMin + ". ")
        else
            line:SetDescription(" has " + numOfSegs + " line segments, max of " + lineMax + " and a min of " + lineMin + ". ")
        end
    end

    /*
        Create a new region on the chart for accessbility.
    */
    private action NewRegionIcon(number percentX, number percentY, number percentWidth, number percentHeight) returns ChartDrawable
        ChartDrawable region
        Color transparent
        transparent:SetColor(0, 0, 1, 0.3)
        region:LoadFilledRectangle(1, 1, transparent)
        region:SetPercentageX(percentX)
        region:SetPercentageY(percentY)
        region:SetPercentageWidth(percentWidth)
        region:SetPercentageHeight(percentHeight)
        region:SetFocusable(true)
        region:SetAccessibilityCode(region:parent:Item:ITEM)
        LayoutProperties properties = region:GetDefaultLayoutProperties()
        region:Hide()
        return region
    end

    /*
        Split the chart area into regions until a minimum number of points is contained in a region or until a maximum number of division.
    */
    private action CreateChunks(ChartAreaPanel chartArea, ChartItem item, ChartDrawable region, Array<ChartPoint> ps,Array<LineSegment> ls, integer currentLevel)
        number x1 = math:Round(region:GetPercentageX() * GetXAxisMinimum(), options:GetTickDigits())
        number x2 = math:Round((region:GetPercentageX() + region:GetPercentageWidth()) * GetXAxisMaximum(), options:GetTickDigits())

        text pointDescription = "no points"
        text lineDescription = "no segments"
        if GetPointsFlag()
            if ps:GetSize() = 1
                pointDescription = "1 point"
            else
                pointDescription = ps:GetSize() + " points"
            end
        end
        if ls:GetSize() = 1
            lineDescription = "1 segment"
        else
            lineDescription = ls:GetSize() + " segments"
        end
        text chunkDescription = " " + pointDescription + " and " + lineDescription + "."

        if ps:GetSize() <= pointThreshold or currentLevel >= maxChunks
            if ps:IsEmpty() = false
                region:SetDescription(chunkDescription + " " + "Use the arrow keys to navigate lines, points, or chunks.")
                
                //First point
                ChartItem firstPointItem = undefined
                ChartItem prevPoint = undefined
                if GetPointsFlag()
                    ChartPoint firstPoint = ps:Get(0)
                    firstPointItem = firstPoint

                    firstPointItem:SetContainer(me)
                    firstPointItem:SetDisplayName(" , " + math:Round(ps:Get(0):GetPercentY() * GetYAxisMaximum(), 1) + ", 1 of " + ps:GetSize() + " points in this chunk. ")
                    firstPointItem:SetParent(item)
                    item:SetEnterItem(firstPointItem)
                    
                    firstPoint:SetDescription(firstPointItem:GetDisplayName())
                    prevPoint = firstPointItem
                end

                //First Line
                ChartItem firstLineItem = undefined
                ChartItem prevLine = undefined
                if ls:IsEmpty() = false
                    LineSegment firstLine = ls:Get(0)
                    firstLineItem = firstLine
                    firstLineItem:SetContainer(me)
                    
                    if GetPointsFlag()
                        firstLineItem:SetEscapeItem(firstPointItem)
                        firstPointItem:SetEnterItem(firstLineItem)
                    else
                        firstLineItem:SetEscapeItem(item)
                        item:SetEnterItem(firstLineItem)
                        prevLine = firstLineItem
                    end
                    
                    text lineChange = " "
                    number start = math:Round(firstLine:GetPoint1():GetPercentY() * GetYAxisMaximum(), 1)
                    number stop = math:Round(firstLine:GetPoint2():GetPercentY() * GetYAxisMaximum(), 1)
                    if start > stop
                        lineChange = ", decreases from " + start + " to " + stop
                    elseif start < stop
                        lineChange = ", increases from " + start + " to " + stop
                    else 
                        lineChange = ", has no change, remains at " + start
                    end
                    firstLine:SetDescription(lineChange)
                end

                integer i = 1
                
                repeat while i < ps:GetSize()
                    //points
                    ChartItem pointItem = undefined
                    if GetPointsFlag()
                        ChartPoint point = ps:Get(i)
                        pointItem = point

                        pointItem:SetContainer(me)
                        pointItem:SetDisplayName(" , " + math:Round(ps:Get(i):GetPercentY() * GetYAxisMaximum(), 1) + ", " + (i+1) + " of " + ps:GetSize() + " points in this chunk. ")
                        pointItem:SetEscapeItem(item)
                        pointItem:SetLeftItem(prevPoint)
        
                        point:SetDescription(pointItem:GetDisplayName())
                    end

                    //lines
                    if i < ls:GetSize()
                        LineSegment line = ls:Get(i)
                        ChartItem lineItem = line
                        lineItem:SetContainer(me)

                        if GetPointsFlag()
                            lineItem:SetEscapeItem(pointItem)
                            pointItem:SetEnterItem(lineItem)
                            prevPoint:SetRightItem(pointItem)
                            prevPoint = pointItem
                        else
                            lineItem:SetEscapeItem(item)
                            lineItem:SetLeftItem(prevLine)
                            prevLine:SetRightItem(lineItem)
                            prevLine = lineItem
                        end
    
                        
                        text lineChange = " "
                        number start = math:Round(line:GetPoint1():GetPercentY() * GetYAxisMaximum(), 1)
                        number stop = math:Round(line:GetPoint2():GetPercentY() * GetYAxisMaximum(), 1)
                        if start > stop
                            lineChange = ", decreases from " + start + " to " + stop
                        elseif start < stop
                            lineChange = ", increases from " + start + " to " + stop
                        else 
                            lineChange = ", has no change, remains at " + start
                        end
                        line:SetDescription(lineChange)
                    end

                    i = i + 1
                end         
            else
                region:SetDescription(chunkDescription)
            end
        else
            region:SetDescription(chunkDescription + " " + "Use the arrow keys to navigate points or chunks.")
            number xDivider = region:GetPercentageX() + (region:GetPercentageWidth() / 2.0)
            Array<ChartPoint> leftChunkPoints
            Array<Drawable> leftChunkLines
            Array<ChartPoint> rightChunkPoints
            Array<Drawable> rightChunkLines

            integer i = 0
            repeat while i < ps:GetSize()
                ChartPoint point = ps:Get(i)
                if point:GetPercentX() < xDivider
                    leftChunkPoints:Add(point)
                    if i < ls:GetSize()
                        leftChunkLines:Add(ls:Get(i))
                    end
                else
                    rightChunkPoints:Add(point)
                    if i < ls:GetSize()
                        rightChunkLines:Add(ls:Get(i))
                    end
                end
                i = i + 1
            end

            //left chunk
            ChartDrawable leftChunkRegion = NewRegionIcon(region:GetPercentageX(), 0, region:GetPercentageWidth() / 2.0, 1.0)
            leftChunkRegion:SetName("Left Chunk")
            chartArea:Add(leftChunkRegion)
            regions:Add(leftChunkRegion)

            ChartItem leftChunkItem = leftChunkRegion
            leftChunkItem:SetContainer(me)
            leftChunkItem:SetParent(item)

            //right chunk
            ChartDrawable rightChunkRegion = NewRegionIcon(region:GetPercentageX() + region:GetPercentageWidth() / 2.0, 0, region:GetPercentageWidth() / 2.0, 1.0)
            rightChunkRegion:SetName("Right Chunk")
            chartArea:Add(rightChunkRegion)
            regions:Add(rightChunkRegion)
            
            ChartItem rightChunkItem = rightChunkRegion
            rightChunkItem:SetContainer(me)
            rightChunkItem:SetEscapeItem(item)

            item:SetEnterItem(leftChunkItem)
            leftChunkItem:SetRightItem(rightChunkItem)
            rightChunkItem:SetLeftItem(leftChunkItem)
            
            CreateChunks(chartArea, leftChunkItem, leftChunkRegion, leftChunkPoints, leftChunkLines, currentLevel + 1)
            CreateChunks(chartArea, rightChunkItem, rightChunkRegion, rightChunkPoints, rightChunkLines, currentLevel + 1)
        end
    end

    /*
    If the quadrant represented by the ChartItem has more points than the quadrant
    threshold, up to four new quadrants will be added as children to the ChartItem.
    This is then called recursively on the new quadrants, if any.
    */
    private action SubdivideQuadrant(ChartAreaPanel chartArea, ChartItem item, ChartDrawable region, Array<ChartPoint> points, integer currentLevel)
        number x1 = math:Round(region:GetPercentageX() * GetXAxisMaximum(), options:GetTickDigits())
        number x2 = math:Round((region:GetPercentageX() + region:GetPercentageWidth()) * GetXAxisMaximum(), options:GetTickDigits())
        number y1 = math:Round(region:GetPercentageY() * GetYAxisMaximum(), options:GetTickDigits())
        number y2 = math:Round((region:GetPercentageY() + region:GetPercentageHeight()) * GetYAxisMaximum(), options:GetTickDigits())

        text pointsText = ""
        if points:GetSize() = 1
            pointsText = "1 point. "
        else
            pointsText = points:GetSize() + " points. "
        end

        text rangeText = pointsText + GetXAxisTitle() + " " + x1 + " to " + x2 + ", " + GetYAxisTitle() + " " + y1 + " to " + y2

        if points:GetSize() <= quadrantThreshold or currentLevel >= maxSubdivisions
            if points:IsEmpty() = false
                points:Sort(comparison)

                region:SetDescription(rangeText + ", Use the arrow keys to navigate the points.")

                ChartPoint firstPoint = points:Get(0)
                ChartItem firstPointItem = firstPoint
                
                firstPointItem:SetContainer(me)
                firstPointItem:SetDisplayName(GetXAxisTitle() + " " + math:Round(firstPoint:GetPercentX() * GetXAxisMaximum(), options:GetTickDigits()) + ", " + GetYAxisTitle() + " " + math:Round(firstPoint:GetPercentY() * GetYAxisMaximum(), options:GetTickDigits())
                    + ", 1 of " + points:GetSize())
                firstPoint:SetName(firstPointItem:GetDisplayName())
                firstPoint:SetParentRegion(region)
                firstPointItem:SetEscapeItem(item)
                item:SetEnterItem(firstPointItem)
        
                integer i = 1
                ChartItem previous = firstPointItem
                repeat while i < points:GetSize()
                    ChartPoint point = points:Get(i)
                    ChartItem pointItem = point

                    pointItem:SetContainer(me)
                    pointItem:SetDisplayName(GetXAxisTitle() + " " + math:Round(point:GetPercentX() * GetXAxisMaximum(), options:GetTickDigits()) + ", " + GetYAxisTitle() + " " + math:Round(point:GetPercentY() * GetYAxisMaximum(), options:GetTickDigits())
                        + ", " + (i + 1) + " of " + points:GetSize())
                    point:SetName(pointItem:GetDisplayName())
                    point:SetParentRegion(region)
                    pointItem:SetEscapeItem(item)
                    pointItem:SetLeftItem(previous)
                    previous:SetRightItem(pointItem)
                    previous = pointItem
                    i = i + 1
                end
            else
                region:SetDescription(rangeText)
            end
        else
            region:SetDescription(rangeText + ", Use the arrows to inspect the sub-regions.")

            number xDivider = region:GetPercentageX() + (region:GetPercentageWidth() / 2.0)
            number yDivider = region:GetPercentageY() + (region:GetPercentageHeight() / 2.0)
            Array<ChartPoint> topLeft
            Array<ChartPoint> topRight
            Array<ChartPoint> bottomLeft
            Array<ChartPoint> bottomRight

            integer i = 0
            repeat while i < points:GetSize()
                ChartPoint point = points:Get(i)
                if point:GetPercentX() < xDivider
                    if point:GetPercentY() < yDivider
                        bottomLeft:Add(point)
                    else
                        topLeft:Add(point)
                    end
                else
                    if point:GetPercentY() < yDivider
                        bottomRight:Add(point)
                    else
                        topRight:Add(point)
                    end
                end

                i = i + 1
            end

            text quadrantName = "Quadrant"
            if currentLevel >= 1
                quadrantName = "Subregion"
            end

            ChartDrawable topLeftRegion = NewRegionIcon(region:GetPercentageX(), region:GetPercentageY() + region:GetPercentageHeight() / 2.0,
                    region:GetPercentageWidth() / 2.0, region:GetPercentageHeight() / 2.0)
            ChartItem topLeftItem = topLeftRegion
            topLeftItem:SetContainer(me)
            topLeftItem:SetEscapeItem(item)
            topLeftRegion:SetName("Top-Left " + quadrantName)
            chartArea:Add(topLeftRegion)
            regions:Add(topLeftRegion)

            ChartDrawable topRightRegion = NewRegionIcon(region:GetPercentageX() + region:GetPercentageWidth() / 2.0, region:GetPercentageY() + region:GetPercentageHeight() / 2.0,
                    region:GetPercentageWidth() / 2.0, region:GetPercentageHeight() / 2.0)
            ChartItem topRightItem = topRightRegion
            topRightItem:SetContainer(me)
            topRightItem:SetEscapeItem(item)
            topRightRegion:SetName("Top-Right " + quadrantName)
            chartArea:Add(topRightRegion)
            regions:Add(topRightRegion)

            ChartDrawable bottomRightRegion = NewRegionIcon(region:GetPercentageX() + region:GetPercentageWidth() / 2.0, region:GetPercentageY(),
                    region:GetPercentageWidth() / 2.0, region:GetPercentageHeight() / 2.0)
            ChartItem bottomRightItem = bottomRightRegion
            bottomRightItem:SetContainer(me)
            bottomRightItem:SetEscapeItem(item)
            bottomRightRegion:SetName("Bottom-Right " + quadrantName)
            chartArea:Add(bottomRightRegion)
            regions:Add(bottomRightRegion)

            ChartDrawable bottomLeftRegion = NewRegionIcon(region:GetPercentageX(), region:GetPercentageY(),
                    region:GetPercentageWidth() / 2.0, region:GetPercentageHeight() / 2.0)
            ChartItem bottomLeftItem = bottomLeftRegion
            bottomLeftItem:SetContainer(me)
            bottomLeftItem:SetEscapeItem(item)
            bottomLeftRegion:SetName("Bottom-Left " + quadrantName)
            chartArea:Add(bottomLeftRegion)
            regions:Add(bottomLeftRegion)

            item:SetEnterItem(topLeftItem)
            topLeftItem:SetRightItem(topRightItem)
            topRightItem:SetRightItem(bottomRightItem)
            topRightItem:SetLeftItem(topLeftItem)
            bottomRightItem:SetRightItem(bottomLeftItem)
            bottomRightItem:SetLeftItem(topRightItem)
            bottomLeftItem:SetLeftItem(bottomRightItem)

            SubdivideQuadrant(chartArea, topLeftItem, topLeftRegion, topLeft, currentLevel + 1)
            SubdivideQuadrant(chartArea, topRightItem, topRightRegion, topRight, currentLevel + 1)
            SubdivideQuadrant(chartArea, bottomRightItem, bottomRightRegion, bottomRight, currentLevel + 1)
            SubdivideQuadrant(chartArea, bottomLeftItem, bottomLeftRegion, bottomLeft, currentLevel + 1)
        end
    end

    action SetQuadrantThreshold(integer threshold)
        quadrantThreshold = threshold
    end
    
    action GetQuadrantThreshold returns integer
        return quadrantThreshold
    end

    action SetMaximumSubdivisons(integer subdivisions)
        maxSubdivisions = subdivisions
    end

    action GetMaximumSubdivisions returns integer
        return maxSubdivisions
    end

    /* 
        Max and min point values will track the highest and lowest points and limit the axis controls to not pass that value.
    */ 

    action SetXAxisMaximum(number max)
        number pointMax = maxPointWidthValue
        if GetVerticalFlag()
            pointMax = maxPointHeightValue
        end
        if max >= pointMax
            parent:Chart:SetXAxisMaximum(max)
        else
            output "X-axis maximum cannot be below highest point value: " + pointMax
        end
    end

    action SetXAxisMinimum(number min)
        number pointMin = minPointWidthValue
        if GetVerticalFlag()
            pointMin = minPointHeightValue
        end
        if min <= pointMin
            parent:Chart:SetXAxisMinimum(min)
        else
            output "X-axis minimum cannot be above lowest point value: " + pointMin
        end
    end

    action SetYAxisMaximum(number max)
        number pointMax = maxPointHeightValue
        if GetVerticalFlag()
            pointMax = maxPointWidthValue
        end
        if max >= pointMax
            parent:Chart:SetYAxisMaximum(max)
        else
            output "Y-axis maximum cannot be below highest point value: " + pointMax
        end
    end

    action SetYAxisMinimum(number min)
        number pointMin = minPointHeightValue
        if GetVerticalFlag()
            pointMin = minPointWidthValue
        end
        if min <= pointMin
            parent:Chart:SetYAxisMinimum(min)
        else
            output "Y-axis minimum cannot be above lowest point value: " + pointMin
        end
    end
end