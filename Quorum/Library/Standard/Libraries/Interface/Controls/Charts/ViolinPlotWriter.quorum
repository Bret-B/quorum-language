package Libraries.Interface.Controls.Charts

use Libraries.System.File
use Libraries.Interface.Controls.Charts.ViolinPlot
use Libraries.Data.Formats.ScalableVectorGraphics.ScalableVectorGraphics
use Libraries.Data.Formats.ScalableVectorGraphics.Line
use Libraries.Containers.Array
use Libraries.Data.Formats.ScalableVectorGraphics.Rectangle
use Libraries.Data.Formats.ScalableVectorGraphics.Label
use Libraries.Data.Formats.ScalableVectorGraphics.Circle
use Libraries.System.FileWriter
use Libraries.Compute.Math
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Charts.ChartPoint
use Libraries.Compute.Vector
use Libraries.Interface.Layouts.ViolinPlotLayout
use Libraries.Game.Graphics.Color

/*
    The ViolinPlotWriter class is part of the set of writers that allow for Charts
    to save their representation in the form ScalableVectorGraphics. This class will write out
    all of the necessary text needed to write out an SVG file that will contain the chart.

    Attribute: Author Gabriel Contreras

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.ViolinPlot
    use Libraries.Interface.Controls.Charts.ViolinPlotWriter

    DataFrame frame
    frame:Load("Data.csv")
    frame:SetSelectedColumnRange(0,1)
    ViolinPlot chart = frame:ViolinPlot()
    chart:SetTitle("My Awesome Title")
    chart:SetXAxisTitle("Time")
    chart:Display()

    ViolinPlotWriter writer
    output writer:WriteOutChart(chart)
*/
class ViolinPlotWriter
    private number axisPointX = 15
    private number axisPointY = 85
    private number axisLength = 75

/*
    This action writes out the ViolinPlot by grabbing necessary information from the chart and it will then return
    all of the necessary text needed to write out an SVG file that will contain the chart.

    Attribute: Parameter chart The chart that will be used to create an SVG

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.ViolinPlot
    use Libraries.Interface.Controls.Charts.ViolinPlotWriter
    
    DataFrame frame
    frame:Load("Data.csv")
    frame:SetSelectedColumnRange(0,1)
    ViolinPlot chart = frame:ViolinPlot()
    chart:Display()

    ViolinPlotWriter writer
    output writer:WriteOutChart(chart)
*/
    action WriteOutChart(ViolinPlot chart) returns text

        ScalableVectorGraphics chartCanvas
        chartCanvas:SetSize(700,600)

        Label chartTitle
        Label xAxisLabel
        Label yAxisLabel

        //start setting stuff
        AddBackground(chartCanvas)
        AddAxes(chartCanvas)
        chartTitle:SetText(chart:GetTitle())
        chartTitle:SetTextAnchor("middle")
        chartTitle:SetPosition(50, 5, "%")
        chartTitle:SetFontSize("18pt")
        chartCanvas:Add(chartTitle)

        xAxisLabel:SetText(chart:GetXAxisTitle())
        xAxisLabel:SetTextAnchor("middle")
        xAxisLabel:SetPosition(50, 95, "%")
        xAxisLabel:SetFontSize("18pt")
        chartCanvas:Add(xAxisLabel)

        yAxisLabel:SetText(chart:GetYAxisTitle())
        yAxisLabel:SetTextAnchor("middle")
        yAxisLabel:SetPosition(5, 50, "%")
        yAxisLabel:SetTransform("rotate(270, 40,300)")
        yAxisLabel:SetFontSize("18pt")
        chartCanvas:Add(yAxisLabel)


        AddViolins(chartCanvas, chart)
        AddXLabels(chartCanvas, chart)
        AddYLabels(chartCanvas, chart)

        return chartCanvas:ToText()
    end

    /*
        This action adds a white background to the canvas
    */
    private action AddBackground(ScalableVectorGraphics canvas)
        Rectangle background
        background:SetFill("white")
        background:SetSize(100,100, "%")
        canvas:Add(background)
    end

    /*
        This action adds the two lines for the x and y axis
    */
    private action AddAxes(ScalableVectorGraphics canvas)
        Line xAxis
        Line yAxis
        xAxis:SetPoints(axisPointX, axisPointY, axisPointX + axisLength, axisPointY, "%")
        xAxis:SetStroke("black")
        xAxis:SetTabIndex(-1)
        xAxis:SetStrokeWidth(0.4,"%")
        yAxis:SetPoints(axisPointX, axisPointY, axisPointX, axisPointY - axisLength, "%")
        yAxis:SetStroke("black")
        yAxis:SetTabIndex(-1)
        yAxis:SetStrokeWidth(0.4,"%")

        canvas:Add(xAxis)
        canvas:Add(yAxis)
    end

    /*
        This action adds the content of the BarChart
    */
    private action AddViolins(ScalableVectorGraphics canvas, ViolinPlot chart)
        //this is needed for calculations so this will probably change if stuff is moved around 
        ViolinPlotLayout layout
        boolean split = chart:GetSplitFlag()

        Array <PlotGroup> plotGroups = chart:GetPlotGroups()
        integer groups = plotGroups:GetSize()
        if groups > 0 and axisLength > 0 // To eliminate divide by zero
            number panelwidth = axisLength/groups
            number height = axisLength
            number dataScale = chart:GetYMaximum()/height

            integer i = 0
            repeat while i < groups
                PlotGroup group = plotGroups:Get(i)
                integer plots = group:GetSize()

                //Give each group an alloted section  
                integer startpanelw = cast(integer, panelwidth*i)

                if plots > 0
                    if split
                        if plots = 2
                            plots = 1 // changing the width and line percent for this plot to use 1 section instead of two
                        else
                            split = false
                        end
                    end

                    integer width = cast(integer, panelwidth/plots)
                    integer center = cast(integer, width/2) 
                    integer centerOffset = center
                    integer size = cast(integer, width/4)
                    number linePercent = (0.005)*plots*groups
                    if linePercent > 0.05
                        linePercent = 0.05
                    end

                    integer line = cast(integer, width * linePercent)
                    integer midline = line/2
                    line = midline*2

                    integer k = 0
                    repeat while k < group:GetSize()
                        Plot plot = group:Get(k)
                        number median = plot:GetInfoAt(0)
                        number lowerQuartile = plot:GetInfoAt(1)
                        number upperQuartile = plot:GetInfoAt(2)
                        number min = plot:GetInfoAt(3)
                        number max = plot:GetInfoAt(4)
            
                        //Give each chart an alloted section  
                        integer startw = width*k + startpanelw
                        integer centerline = center - midline //This is to center the vertical lines over the very middle of the plot area
                        if split
                            centerline = center - line
                        end
                        integer x = startw + centerline
    
                        //even though lines could be used here rectangles are used for translation purposes
                        // IQR Region
                        Rectangle first
                        first:SetSize(line*2, cast(integer,(upperQuartile-lowerQuartile)/dataScale), "%")
                        first:SetPosition(axisPointX + startw + (center - line), axisPointY - cast(integer, lowerQuartile/dataScale)-midline, "%")
                        first:SetFill("black")

                        // Whisker
                        Rectangle second
                        second:SetSize(line, cast(integer, (max-min)/dataScale), "%")
                        second:SetPosition(axisPointX + x, axisPointY - cast(integer, max/dataScale)-midline, "%")
                        second:SetFill("black")

                        // Maximum
                        Rectangle third
                        third:SetSize(line, line, "%")
                        third:SetPosition(axisPointX + x, axisPointY - cast(integer, max/dataScale)-midline, "%")
                        third:SetFill("black")

                        // Q1
                        Rectangle fourth
                        fourth:SetSize(line, line, "%")
                        fourth:SetPosition(axisPointX + x, axisPointY - cast(integer, upperQuartile/dataScale)-midline, "%")     
                        fourth:SetFill("black")

                        // Median
                        Circle dot
                        dot:SetRadius(midline, "%")
                        dot:SetPosition(axisPointX + x, axisPointY - cast(integer, median/dataScale)-midline, "%")
                        dot:SetFill("white")

                        // Q3
                        Rectangle fifth
                        fifth:SetSize(line, line, "%")
                        fifth:SetPosition(axisPointX + x, axisPointY - cast(integer, lowerQuartile/dataScale)-midline, "%")
                        fifth:SetFill("black")

                        // Minimum
                        Rectangle sixth
                        sixth:SetSize(line, line, "%")
                        sixth:SetPosition(axisPointX + x, axisPointY - cast(integer, min/dataScale)-midline, "%")
                        sixth:SetFill("black")
                        
                        //bandWidth will be auto set to a value according the height of the chart
                        number bandWidth = chart:GetYMaximum()*0.015
                        Array<number> estimates = layout:EstimateDensity(bandWidth,dataScale,plot:GetData(),chart:GetWindowingAction())
                        integer nextPixel = cast(integer, min/dataScale)+1
                        number maxEstimate = estimates:Get(estimates:GetSize()-1)
                        number estimateScale = maxEstimate/(width/2)
                        integer index = 0
                        repeat while index < estimates:GetSize()-1
                            number estimate = estimates:Get(index)
                            number pixW = cast(integer, (estimate/estimateScale)*0.75)
                            number pixH = height - nextPixel
                            Line tempLine
                            tempLine:SetPoints(axisPointX + center-pixW, axisPointY - axisLength + pixH,axisPointX + center+pixW, axisPointY - axisLength + pixH, "%")
                            tempLine:SetStroke("blue")
                            tempLine:SetStrokeWidth(6)
                            canvas:Add(tempLine)
                            nextPixel = nextPixel + 1
                            index = index + 1
                        end
                        canvas:Add(first)
                        canvas:Add(second)
                        canvas:Add(third)
                        canvas:Add(fourth)
                        canvas:Add(dot)
                        canvas:Add(fifth)
                        canvas:Add(sixth)
                        k = k + 1
                    end 
                end  
                i = i + 1
            end
        end
    end

    /*
        This action adds the labels on the x axis
    */
    private action AddXLabels(ScalableVectorGraphics canvas, ViolinPlot chart)
        integer i = 0
        Array<text> xLabelText = chart:GetXAxisLabels()
        integer total = chart:GetPlotGroups():GetSize()
        number space = axisLength/(total)
        repeat while i < total
            Label tempLabel

            tempLabel:SetText(chart:GetXAxisLabels():Get(i))
            tempLabel:SetTextAnchor("middle")
            tempLabel:SetPosition(axisPointX + (i) * space + space/2, axisPointY + 4, "%")
            canvas:Add(tempLabel)
            i = i + 1
        end
    end

    /*
        This action the labels on the y axis
    */
    private action AddYLabels(ScalableVectorGraphics canvas, ViolinPlot chart)
        number scaleNum = 0//chart:GetYAxisMinimum()
        
        number scaleWidth = (chart:GetYMaximum()) / (chart:GetYTickCount()- 1)
        number scaleDivWidth = axisLength / (chart:GetYTickCount() - 1)
        // scale
        Math math
        i = 0
        //output chart:GetYMax()
        repeat while i < chart:GetYTickCount()
            Label scaleLabel
            Line scaleTick
            
            scaleLabel:SetTextAnchor("end")
            scaleLabel:SetText("" + math:Round(scaleNum, 1))
            scaleLabel:SetFontSize("8pt")
            scaleNum = scaleNum + scaleWidth

            scaleTick:SetTabIndex(-1)
            scaleTick:SetFirstPoint(axisPointX, axisPointY - scaleDivWidth*i, "%")
            scaleTick:SetSecondPoint(axisPointX - 2, axisPointY - scaleDivWidth*i, "%")
            scaleTick:SetStroke("black")
            scaleTick:SetStrokeWidth(0.4,"%")
            
            scaleLabel:SetPosition(axisPointX - 3, axisPointY - scaleDivWidth*i + 0.5, "%")

            canvas:Add(scaleLabel)
            canvas:Add(scaleTick)
        i = i+1
        end
    end

end