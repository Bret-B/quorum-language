package Libraries.Interface.Controls.Charts

use Libraries.Containers.Array
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Controls.Icon
use Libraries.Interface.Controls.Charts.Graphics.ChartDrawable
use Libraries.Interface.Controls.Charts.Graphics.RegressionLine
use Libraries.Game.Graphics.LinePath

/*
The Series class is a data structure that stores information for each 
set (array) of drawable items of a certain series. 
This class also contains an Icon that is used for accessibility.
This will allow every bar of a series to be drawn with the same color.

Attribute: Example

use Libraries.Interface.Controls.Charts.Series
use Libraries.Interface.Controls.Charts.Graphics.Bar
class Main
   action Main
      // Make a series
      Series series

      // Add a ChartDrawable item
      Bar bar
      series:AddItem(bar)

      // Set the color for the series
      Color color
      series:SetColor(color:Red())
   end
end
*/

class Series is ChartDrawable
    ChartAreaPanel chartArea = undefined // If separated by series, this will correspond to the correct sub chart area
    private ChartLabel label
    private Icon entryIcon // The small colored shape appearing in the legend for this entry.
    private Icon entryBox
    private Color customColor = undefined
    private Array<ChartDrawable> items
    private RegressionLine regressionline = undefined
    private LinePath trendLine = undefined

    // Standard entry in the legend
    /*************************************
    EntryIcon  NameOfSeries    
    **************************************/

    // Showing all options
    /*************************************
    EntryIcon   NameOfSeries     (Value) (%)
    LineIcon    RegressionEquation                    
                RegressionRSquared
    ***************************************/

    action GetLabel returns ChartLabel
        return label
    end

    action SetLabel(ChartLabel label)
        me:label = label
    end

    action GetEntryIcon returns Icon
        return entryIcon
    end

    action SetEntryIcon(Icon icon)
        entryIcon = icon
    end

    action GetEntryBox returns Icon
        return entryBox
    end

    action SetColor(Color color)
        if customColor not= undefined
            parent:Drawable:SetColor(customColor)
        else
            parent:Drawable:SetColor(color)
        end
    end

    action SetCustomColor(Color color)
        customColor = color
    end

    action AddItem(ChartDrawable item)
        item:SetSeries(me)
        items:Add(item)
    end

    action GetItemAt(integer index) returns ChartDrawable
        if index >= 0 and index < GetSize()
            return items:Get(index)
        else
            return undefined
        end
    end

    action GetSize() returns integer
        return items:GetSize()
    end

    action GetChartAreaItems() returns Array<ChartDrawable>
        return items
    end

    action Empty()
        items:Empty()
    end

    /*
        A link to the regression line for this series.
    */
    action SetRegressionLine(RegressionLine regressionline)
        me:regressionline = regressionline
    end
    
    action GetRegressionLine returns RegressionLine
        return regressionline
    end

    /*
    This action shows or hides a trend line over the bars in the series.
    By default, the trend line is hidden.

    Attribute: Parameter show True to display the trend line, or false to hide it.
    */
    action ShowTrendLine(boolean show)
        if show = (trendLine not= undefined)
            return now
        end

        if show
            LinePath path
            trendLine = path
            path:SetPercentageWidth(1.0)
            path:SetPercentageHeight(1.0)
        else
            trendLine = undefined
        end
    end

    /*
    This action returns the trend line of this chart as a LinePath. If there is no trend line, this will return
    undefined instead.

    Attribute: Returns The trend line of this chart, or undefined if there is no trend line.
    */
    action GetTrendLine returns LinePath
        return trendLine
    end

    /*
        A link to the parent chart area of this series.
    */
    action SetChartArea(ChartAreaPanel chartArea)
        me:chartArea = chartArea
    end

    action GetChartArea returns ChartAreaPanel
        return chartArea
    end

end