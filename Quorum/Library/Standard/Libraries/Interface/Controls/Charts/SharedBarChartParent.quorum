package Libraries.Interface.Controls.Charts
use Libraries.Interface.Selections.ChartSelection
use Libraries.Containers.Array
use Libraries.Game.Graphics.Color
use Libraries.Interface.Controls.Icon
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Controls.ControlLabel
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Compute.Math
use Libraries.Game.Graphics.Label
use Libraries.Interface.Controls.Charts.ChartOptions
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.TextureRegion
use Libraries.Interface.Views.View2D
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Item
use Libraries.Interface.Controls.Control
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Controls.Charts.BarGroup
use Libraries.Interface.Controls.Charts.Series
use Libraries.Interface.Views.LabelBoxView

class SharedBarChartParent is Chart
    private ChartItem summary // root of the tree
    integer numberOfBars = 0
    integer numberOfGroups = 0
    number maxBarValue = 0.0
    Array<number> barHeights
    Array<text> barNames
    Array<BarGroup> barGroups
    boolean hasBarGroups = true
    boolean isStacked = false
    boolean isHorizontal = false
    boolean removeGaps = false // Histograms typically do not have spacing between bars
    Array<Series> seriesList

    integer yTickSteps = 2
    integer xTickSteps = -1
    number yTickInterval = -1
    // Default uses best interval by range to graph, if tick count is set, it overrides this.
    boolean yIntervalBasedOnTickCount = false
//    number maxScale = 1
//    number minScale = 0
    number yAxisMaximum = 0.0 // the maximum value in y axis
    number yAxisMinimum = 0.0
    number xAxisMaximum = 0.0 // the maximum value in y axis
    number xAxisMinimum = 0.0

    //Not implemented for now, but is a placeholder for future implementation
    number minTick = 0
    Color barColor = undefined
    Color barSelectionColor = undefined
    Array<Icon> bars

    ColorGroup previousColorGroup = undefined
    Color previousColor = undefined
    Control controlHighlight
    Math math
    
    // The default orientation for bar charts and histograms is vertical
    text defaultOrientation = "vertical"
   
    action LostSelection(ChartItem ci)
        if ci = undefined
            return now
        end
        Item target = ci:GetFocusTarget()

        if target not= undefined and target is ControlLabel
            ControlLabel temp = cast(ControlLabel, target)
            temp:LostSelection()
        elseif target not= undefined and target is Icon
            Icon temp = cast(Icon, target)
            temp:SetColor(previousColor)
        elseif target is Control
            Control temp = cast(Control, target)
            LayoutProperties properties = temp:GetDefaultLayoutProperties()
            if properties not= undefined
                LabelBoxView view
                view:SetBorderThickness(cast(integer, properties:GetBorderThickness()))
                view:Initialize(properties:GetBackgroundColor(), previousColorGroup)
                temp:SetView2D(view)
            end
        end
    end

    action GainedSelection(ChartItem ci)
        if ci = undefined
            return now
        end
        Item target = ci:GetFocusTarget()
        if target not= undefined
            target:Focus()
            if target is ControlLabel
                ControlLabel temp = cast(ControlLabel, target)
                temp:GainedSelection()
            elseif target is Icon
                Color c
                Icon temp = cast(Icon, target)
                previousColor = temp:GetColor()
                temp:SetColor(GetBarSelectionColor())
            elseif target is Control
                Control temp = cast(Control, target)
                LayoutProperties properties = temp:GetDefaultLayoutProperties()
                if properties not= undefined
                    previousColorGroup = properties:GetBorderColor()
                    LabelBoxView view
                    view:SetBorderThickness(cast(integer, properties:GetBorderThickness())+4)
                    view:Initialize(properties:GetBackgroundColor(), GetBarSelectionColor())
                    temp:SetView2D(view)
                end
            end            
        end
    end

    /*
        Returns the number of bars currently added to the Bar Chart
    */
    action GetNumberOfBars returns integer
        return numberOfBars
    end

    /*
        Returns the minimum tick
    */
    action GetMinimumTick returns number
        return minTick
    end

    /*
        Sets a flag that's used by GenerateInfoTree to determine if it should include accessibility navigation through bar groups
    */
    action HasBarGroups(boolean flag)
        hasBarGroups = flag
    end
     /*
        Sets a flag that's used by GenerateInfoTree to determine if it should include accessibility navigation through bar groups
    */
    action HasBarGroups returns boolean
        return hasBarGroups
    end

    /*
        Sets a flag that's used by layout to remove gaps for histograms
    */
    action RemoveGaps(boolean flag)
        removeGaps = flag
    end
     /*
        Sets a flag that's used by GenerateInfoTree to determine if it should include accessibility navigation through bar groups
    */
    action RemoveGaps returns boolean
        return removeGaps
    end

    /*
        Sets a flag that will stack bars inside each group if set to true.
    */
    action IsStacked(boolean flag)
        isStacked = flag
    end

     /*
        Returns stacked flag 
    */
    action GetStackedFlag() returns boolean
        return isStacked
    end

     /*
        Returns horizontal flag 
    */
    action GetHorizontalFlag() returns boolean
        return isHorizontal
    end

    //Made private to avoid issues with using this before AddBar
    private action SetNumberOfBars(integer bars)
        numberOfBars = bars
        barHeights:SetSize(numberOfBars)
        barNames:SetSize(numberOfBars)
    end

//    /*
//        Appends a bar to end of the Bar Chart. NOTE: Height is a percentage
//    */
//    action AddBar(text name, number height)
//        SetBar(numberOfBars+1, name, height)
//    end

    /*
        Appends a bargroup to end of the Bar Chart. 
        If any bars in the bar group are bigger than the y max, ymax increases
    */
    action AddBarGroup(BarGroup group)
        integer i = 0
        repeat while i < group:GetSize()
            if group:Get(i):GetValue() > yAxisMaximum
                yAxisMaximum = group:Get(i):GetValue()
            end
            i = i + 1
        end
        barGroups:Add(group)
        numberOfGroups = numberOfGroups + 1
        xAxisMaximum = xAxisMaximum + 1.0
    end

    /*
        Sets the numberOfBars variable by checking the group size for each BarGroup
    */
    action CalculateNumberOfBars
        numberOfBars = 0
        integer i = 0
        repeat while i < barGroups:GetSize()
            numberOfBars = numberOfBars + barGroups:Get(i):GetSize()
            i = i + 1
        end
    end

    /*
        Sets the properties of a specific bar. If the index represents a bar 
        that doesn't exist than it will make it. NOTE: Height is a percentage.
    */
    action SetBar(integer bar, text name, number height)
        SetBarName(bar, name)
        SetBarHeight(bar, height)
    end

    /*
        Sets the height of a specific bar. If the index represents a bar 
        that doesn't exist than it will make it. NOTE: Height is a percentage.
    */
    action SetBarHeight(integer bar, number height)
        if bar >= numberOfBars
            SetNumberOfBars(bar)
        end
        if height < 0
            height = 0
        elseif height > 1.0
            height = 1.0
        end
        barHeights:Set(bar - 1, height)
        
    end

    /*
        Sets the name of a specific bar. If the index represents a bar 
        that doesn't exist than it will make it.
    */
    action SetBarName(integer bar, text name)
        if bar >= numberOfBars
            SetNumberOfBars(bar)
        end
        if bar <= numberOfBars and bar > 0
            barNames:Set(bar - 1, name)
        end
    end

    /*
        Sets the number of steps in the scale. 
    */
    action SetXTickSteps(integer steps)
        xTickSteps = steps
    end

    /*
        Returns the number of steps in the scale.
    */
    action GetXTickSteps returns integer
        return xTickSteps
    end

    /*
        Sets the number of steps in the scale. 
    */
    action SetYTickSteps(integer steps)
        yTickSteps = steps
        yIntervalBasedOnTickCount = true
    end

    /*
        Returns the number of steps in the scale.
    */
    action GetYTickSteps returns integer
        return yTickSteps
    end

    action SetYTickInterval(number set)
        yTickInterval = set
    end

    action SetYTickInterval(integer set)
        yTickInterval = cast(number, set)
    end

    action GetYTickInterval() returns number
        return yTickInterval
    end
    
    /*
        Sets the default color for the bars
    */
    action SetBarColor(Color color)
        me:barColor = color
    end

    /*
        Gets the default selection color (highlighting) for the bars
    */
    action GetBarSelectionColor returns Color
        return barSelectionColor
    end

    /*
        Sets the default selection color (highlighting) for the bars
    */
    action SetBarSelectionColor(Color color)
        me:barSelectionColor = color
    end

    /*
        Returns a percentage value of a bar's height 
    */
    private action GetPercentFromHeight(number full) returns number
        Math math
        return math:Round(full, 2) * 100
    end
  
    /*
    This action is used by the layout to position the graphical components of 
    the Chart. Layout is handled automatically so users don't need to use this
    action directly.
    */
    action GetBars returns Array<Icon>
        return bars
    end

    /*
        Returns an array of all the bar groups
    */
    action GetBarGroups returns Array<BarGroup>
        return barGroups
    end

    /*
        Returns an array of all the series sets 
    */
    action GetSeriesList returns Array<Series>
        return seriesList
    end

    action AddSeries(Series series)
        seriesList:Add(series)
    end

    /*
        Returns the value of the largest bar (used to calculate height percentage of bars)
    */
    action GetMaxBarValue() returns number
         return maxBarValue
    end

    action SetMaxBarValue(number max)
         maxBarValue = max
    end

    // Y-Axis min/max 
    action SetYAxisMaximum(number max)
        yAxisMaximum = max
    end
    action GetYAxisMaximum returns number
        return yAxisMaximum
    end
    action SetYAxisMinimum(number min)
        yAxisMinimum = min
    end
    action GetYAxisMinimum returns number
        return yAxisMinimum
    end

    // X-Axis min/max 
    action SetXAxisMaximum(number max)
        xAxisMaximum = max
    end
    action GetXAxisMaximum returns number
        return xAxisMaximum
    end
    action SetXAxisMinimum(number min)
        xAxisMinimum = min
    end
    action GetXAxisMinimum returns number
        return xAxisMinimum
    end

    /*
        This action takes a range of data and returns a decent interval, this is only the default.
        The user can choose any interval they wish and set it manually.  
    */
    action CalculateBestTickInterval(number range) returns number
        number tickSkips = 0
        if range <= 2.5
            if range > 1.5
                tickSkips = 0.5
            else
                tickSkips = 0.1
            end
        else
            if range > 5000
                tickSkips = 1000
            elseif range > 2500
                tickSkips = 500
            elseif range > 1000
                tickSkips = 250
            elseif range > 500
                tickSkips = 100
            elseif range > 200
                tickSkips = 50
            elseif range > 100
                tickSkips = 20
            elseif range > 50
                tickSkips = 10
            elseif range > 20
                tickSkips = 5
            elseif range > 10
                tickSkips = 2
            else
                tickSkips = 1
            end
        end
        return tickSkips
    end

    action yAxisCalculateScaleWidth() returns number
        number yRange = yAxisMaximum-yAxisMinimum
        number scaleWidth = 0.0
        // Calculating intervals and/or number of ticks
        if yIntervalBasedOnTickCount
            if yTickSteps > 1
                SetYTickInterval(math:Round(yRange / cast(number, yTickSteps-1), 2))
                yAxisMaximum = cast(number, yTickSteps-1) * GetYTickInterval() + yAxisMinimum
            end
        end
        // Numerical y-scale (number intervals)
        number tickSkips = GetYTickInterval()
        if tickSkips = -1
            tickSkips = CalculateBestTickInterval(yRange)
        end
        if tickSkips not= 1.0
            number i = yAxisMinimum
            repeat while i < yAxisMaximum
                i = i + tickSkips
            end
            yAxisMaximum = math:Round(i, 2) 
            yTickSteps = cast(integer, (yAxisMaximum-yAxisMinimum) / tickSkips) + 1
            scaleWidth = tickSkips
        else
            yTickSteps = cast(integer, yRange) + 1
            scaleWidth = yRange / (yTickSteps - 1)
        end 
        return scaleWidth
    end

    /*
        Generates the tree of ChartItems that define how the chart will be 
        navigated and what extra information might be sent to the screen reader.
    */
    action GenerateInfoTree
        if GetDefaultLayoutProperties():NeedsRendering()
            return now //we haven't loaded graphics yet, so bail.
        end
        Math math
        //NOTE: These nodes implement a cheap form of ordinality might need changing
        ChartItem xAxis
        ChartItem yAxis
        ChartItem chartArea//not to be confused with panel
        //Level 1 top level
        summary:SetDisplayName(GenerateSummary())
        summary:SetNext(yAxis)
        summary:SetChild(yAxis)
        summary:SetContainer(me)
        summary:SetFocusTarget(me)
    
        //Level 2 three main areas of bar chart (maybe 4 if legend is added)
        xAxis:SetDisplayName("Horizontal Axis")
        xAxis:SetFocusTarget(GetXLabel())
        yAxis:SetDisplayName("Vertical Axis")
        yAxis:SetFocusTarget(GetYLabel())
        
        chartArea:SetDisplayName("Chart Area " + numberOfBars + " bars")
        chartArea:SetFocusTarget(me:GetChartArea())
        me:GetChartArea():SetDescription(numberOfBars + " bars")
        xAxis:SetContainer(me)        
        yAxis:SetContainer(me)
        chartArea:SetContainer(me)

        yAxis:SetNext(chartArea)
        chartArea:SetNext(xAxis)
        xAxis:SetPrevious(chartArea)
        yAxis:SetPrevious(xAxis)

        chartArea:SetPrevious(yAxis)
        xAxis:SetParent(summary)
        yAxis:SetParent(summary)
        yAxis:SetPrevious(summary)
        chartArea:SetParent(summary)

        // Legend Area
        if IsShowingLegend()
            GetLegend():GenerateInfoTree(me, summary, xAxis, yAxis)
        end

        if hasBarGroups
            //Bar Groups
            ChartItem firstGroup
            firstGroup:SetContainer(me)
            if barGroups:GetSize() > 0
                chartArea:SetChild(firstGroup)
                barGroups:Get(0):GetIcon():SetDescription(", 1 of " + barGroups:GetSize() + " groups, " + barGroups:Get(0):GetName())
                firstGroup:SetParent(chartArea)
                firstGroup:SetFocusTarget(barGroups:Get(0):GetIcon())
    
                //Bars within Bar Groups
                ChartItem firstBar
                firstBar:SetContainer(me)
                if barGroups:Get(0):GetSize() > 0
                    firstGroup:SetChild(firstBar)
                    barGroups:Get(0):Get(0):GetIcon():SetDescription(", " + GetPercentFromHeight(barGroups:Get(0):Get(0):GetHeight()) + "%, 1 of " + barGroups:Get(0):GetSize() + " bars inside bar group 1, " + barGroups:Get(0):GetName() + ", " + math:Round(barGroups:Get(0):Get(0):GetValue(),2))
                    firstBar:SetParent(firstGroup)
                    firstBar:SetFocusTarget(barGroups:Get(0):Get(0):GetIcon())
                end
                integer j = 1
                ChartItem previousBar = firstBar
                repeat while j < barGroups:Get(0):GetSize()
                    ChartItem bar
                    bar:SetContainer(me)
                    barGroups:Get(0):Get(j):GetIcon():SetDescription(", " + GetPercentFromHeight(barGroups:Get(0):Get(j):GetHeight()) + "%, " + (j+1) + " of " + barGroups:Get(0):GetSize() + " bars inside bar group 1, " + barGroups:Get(0):GetName() + ", " + math:Round(barGroups:Get(0):Get(j):GetValue(),2))
                    bar:SetParent(firstGroup)
                    bar:SetFocusTarget(barGroups:Get(0):Get(j):GetIcon())
                    previousBar:SetNext(bar)
                    bar:SetPrevious(previousBar)
                    previousBar = bar
                    j = j + 1
                end
            end
    
            integer i = 1
            ChartItem previousGroup = firstGroup
            repeat while i < barGroups:GetSize()
                ChartItem group
                group:SetContainer(me)
                barGroups:Get(i):GetIcon():SetDescription(", " + (i+1) + " of " + barGroups:GetSize() + " groups, " + barGroups:Get(i):GetName())
                group:SetParent(chartArea)
                group:SetFocusTarget(barGroups:Get(i):GetIcon())
                previousGroup:SetNext(group)
                group:SetPrevious(previousGroup)
                previousGroup = group
    
                //Bars within Bar Groups
                ChartItem firstBar
                firstBar:SetContainer(me)
                if barGroups:Get(i):GetSize() > 0
                    group:SetChild(firstBar)
                    barGroups:Get(i):Get(0):GetIcon():SetDescription(", " + GetPercentFromHeight(barGroups:Get(i):Get(0):GetHeight()) + "%, 1 of " + barGroups:Get(i):GetSize() + " bars inside bar group " + (i+1) + ", " + barGroups:Get(i):GetName() + ", " + math:Round(barGroups:Get(i):Get(0):GetValue(),2))
                    firstBar:SetParent(group)
                    firstBar:SetFocusTarget(barGroups:Get(i):Get(0):GetIcon())
                end
                integer j = 1
                ChartItem previousBar = firstBar
                repeat while j < barGroups:Get(i):GetSize()
                    ChartItem bar
                    bar:SetContainer(me)
                    barGroups:Get(i):Get(j):GetIcon():SetDescription(", " + GetPercentFromHeight(barGroups:Get(i):Get(j):GetHeight()) + "%, " + (j+1) + " of " + barGroups:Get(i):GetSize() + " bars inside bar group " + (i+1) + ", " + barGroups:Get(i):GetName() + ", " + math:Round(barGroups:Get(i):Get(j):GetValue(),2))
                    bar:SetParent(group)
                    bar:SetFocusTarget(barGroups:Get(i):Get(j):GetIcon())
                    previousBar:SetNext(bar)
                    bar:SetPrevious(previousBar)
                    previousBar = bar
                    j = j + 1
                end
                i = i + 1
            end
        else
            if barGroups:GetSize() > 0
                ChartItem firstBar
                firstBar:SetContainer(me)
                if barGroups:Get(0):GetSize() > 0
                    chartArea:SetChild(firstBar)
                    barGroups:Get(0):Get(0):GetIcon():SetDescription(", " + GetPercentFromHeight(barGroups:Get(0):Get(0):GetHeight()) + "%, 1 of " + barGroups:GetSize() + " bars, " + math:Round(barGroups:Get(0):Get(0):GetValue(),2))
                    firstBar:SetParent(chartArea)
                    firstBar:SetFocusTarget(barGroups:Get(0):Get(0):GetIcon())
                end
                integer i = 1
                ChartItem previousBar = firstBar
                repeat while i < barGroups:GetSize()
                    ChartItem bar
                    bar:SetContainer(me)
                    barGroups:Get(i):Get(0):GetIcon():SetDescription(", " + GetPercentFromHeight(barGroups:Get(i):Get(0):GetHeight()) + "%, " + (i+1) + " of " + barGroups:GetSize() + " bars, " + math:Round(barGroups:Get(i):Get(0):GetValue(),2))
                    bar:SetParent(chartArea)
                    bar:SetFocusTarget(barGroups:Get(i):Get(0):GetIcon())
                    previousBar:SetNext(bar)
                    bar:SetPrevious(previousBar)
                    previousBar = bar
                    i = i + 1
                end
            end
        end

        //scale
        ChartItem genericScaleNode
        genericScaleNode:SetContainer(me)
        genericScaleNode:SetDisplayName("The scale has " + yTickSteps + " tick marks and goes from 0.0  to " + yAxisMaximum)
        genericScaleNode:SetParent(yAxis)
        yAxis:GetFocusTarget():SetDescription("Scale with " + yTickSteps + " ticks, from 0.0 to " + yAxisMaximum)
        ChartItem firstScale
        firstScale:SetContainer(me)
        Array<ControlLabel> scaleLabels = GetYLabels()
        if numberOfBars > 0
            //firstScale:SetDisplayName(scaleLabels:Get(0):GetText())
            firstScale:SetParent(yAxis)
            firstScale:SetFocusTarget(scaleLabels:Get(0))
            yAxis:SetChild(firstScale)
        end

        i = 1
        ChartItem previous = firstScale
        repeat while i < scaleLabels:GetSize()
            ChartItem scaleNode
            scaleNode:SetContainer(me)
            //scaleNode:SetDisplayName(scaleLabels:Get(i):GetText())
            scaleNode:SetParent(yAxis)
            scaleNode:SetPrevious(previous)
            scaleNode:SetFocusTarget(scaleLabels:Get(i))
            previous:SetNext(scaleNode)
            previous = scaleNode
            i = i + 1
        end

        //x axis labels
        Array<ControlLabel> xLabels = GetXLabels()
        ChartItem firstLabel
        firstLabel:SetContainer(me)
        if numberOfBars > 0
            xAxis:SetChild(firstLabel)
            firstLabel:SetDisplayName(xLabels:Get(0):GetName())
            firstLabel:SetParent(xAxis)
            firstLabel:SetFocusTarget(xLabels:Get(0))
        end

        i = 1
        ChartItem previousLabel = firstLabel
        repeat while i < xLabels:GetSize()
            ChartItem labelNode
            labelNode:SetContainer(me)
            labelNode:SetDisplayName(xLabels:Get(i):GetName())
            labelNode:SetParent(chartArea)
            labelNode:SetFocusTarget(xLabels:Get(i))
            previousLabel:SetNext(labelNode)
            labelNode:SetPrevious(previousLabel)
            previousLabel = labelNode
            i = i + 1
        end

        ChartSelection selection = GetSelection()
        selection:Set(summary)
    end

    action GetBarColor returns Color
        return barColor
    end

    action DisposeDrawables()
        parent:Chart:DisposeDrawables()

        if not bars:IsEmpty()
            Icon temp = undefined
            integer i = 0
            repeat while i< bars:GetSize()
                temp = bars:Get(i)
                if temp not= undefined
                    temp:Dispose()
                    Remove(temp)
                    temp = undefined
                end
                i = i + 1
            end
            bars:Empty()
        end

        GetChartArea():Empty()
    end

    action GetBarNames returns Array<text>
        return barNames
    end

    action GetBarHeights returns Array<number>
        return barHeights
    end

    action GetSummary returns ChartItem
        return summary
    end

    action SetSummary(ChartItem summary)
        me:summary = summary
    end

    /*
    This action is used to load the graphical components of the Control. This is
    handled automatically by the Game engine as needed, and most users shouldn't
    need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        DisposeDrawables()
        parent:Chart:LoadGraphics(properties)
        if properties = undefined
            return now
        end

        ChartOptions options
        Color color
        if GetBarColor() = undefined
            SetBarColor(options:GetBarColor())
        end

        if GetBarSelectionColor() = undefined
            SetBarSelectionColor(options:GetSelectionColor())
        end
        
        Array<Icon> bars = GetBars()
        Array<Drawable> barTicks = GetXTicks()
        Array<Drawable> scaleTicks = GetYTicks()
        Array<Drawable> scaleGridlines = GetMajorYGridlines()
        Array<Drawable> barGridlines = GetMajorXGridlines()
        Array<Drawable> scaleMinorGridlines = GetMinorYGridlines()
        Array<Drawable> barMinorGridlines = GetMinorXGridlines()
        Array<ControlLabel> barLabels = GetXLabels()
        Array<ControlLabel> scaleLabels = GetYLabels()
        Control barPanel = GetHorizontalPanel()
        Control scalePanel = GetVerticalPanel()
        Control chartArea = GetChartArea()
        Array<text> barNames = GetBarNames()
        CalculateNumberOfBars()

        // Check for orientation change
        // If horizontal ticks and labels need to be added to opposite axis.
        text orientation = GetOrientation()
        if defaultOrientation not= orientation
            text tempTitle = GetXLabel():GetText()
            GetXLabel():SetText(GetYLabel():GetText())
            GetXLabel():SetName(GetYLabel():GetText())
            GetYLabel():SetText(tempTitle)
            GetYLabel():SetName(tempTitle)
            if orientation = "horizontal"
                isHorizontal = true
                barTicks = GetYTicks()
                scaleTicks = GetXTicks()
                barLabels = GetYLabels()
                scaleLabels = GetXLabels()        
                scaleGridlines = GetMajorXGridlines()
                barGridlines = GetMajorYGridlines()
                scaleMinorGridlines = GetMinorXGridlines()
                barMinorGridlines = GetMinorYGridlines()
                barPanel = GetVerticalPanel()
                scalePanel = GetHorizontalPanel()
            else
                isHorizontal = false
            end
        end   

        // If stacked, we need to adjust the maximum y value to the full stack
        if GetStackedFlag()
            integer i = 0
            repeat while i < barGroups:GetSize()
                number sum = 0
                integer j = 0
                repeat while j < barGroups:Get(i):GetSize()
                    sum = sum + barGroups:Get(i):Get(j):GetValue()
                    j = j + 1
                end
                if sum > yAxisMaximum
                    yAxisMaximum = sum
                end
                i = i + 1
            end
        end

        number scaleNum = 0
        number scaleWidth = yAxisCalculateScaleWidth() // Get scale width and tick steps

        if scaleTicks:IsEmpty() and scaleLabels:IsEmpty()
            scaleTicks:SetSize(GetYTickSteps())
            scaleLabels:SetSize(GetYTickSteps())
            integer i = 0
            repeat while i < yTickSteps
                //make the ticks that will be on the scale
                Drawable tick
                tick:LoadFilledRectangle(10, 3)
                scaleTicks:Set(i, tick)
                scalePanel:Add(scaleTicks:Get(i))

                if IsShowingMajorYGridLines()
                    Drawable gridline
                    scaleGridlines:Add(gridline)
                    chartArea:Add(gridline)
                end
                if IsShowingMinorYGridLines()
                    integer j = 0
                    repeat while j < 5
                        Drawable gridline
                        scaleMinorGridlines:Add(gridline)
                        chartArea:Add(gridline)
                        j = j + 1
                    end
                end

               //make the labels for each scale tick (auto based on max)
                ChartOptions chartOptions
                Math math
                text scaleText = "" + math:Round(scaleNum, chartOptions:GetTickDigits())
                ControlLabel tempLabel
                tempLabel:SetText(scaleText)
                tempLabel:SetFont(GetFont():Copy())
                tempLabel:SetFontSize(cast(integer, GetFontSize() * GetYAxisFontSizeOffset()))
                tempLabel:SetName(scaleText + " " + (i + 1) + " of " + yTickSteps)
                tempLabel:SetFocusable(true)
                tempLabel:SetAccessibilityCode(parent:Item:ITEM)
                scaleLabels:Set(i, tempLabel)
                scalePanel:Add(scaleLabels:Get(i))
                scaleNum = scaleNum + scaleWidth
                i = i + 1
            end
        end
        
        if barTicks:IsEmpty() and barLabels:IsEmpty() and bars:IsEmpty()
            if xTickSteps > numberOfGroups
                xTickSteps = numberOfGroups
            end

            integer tickJumps = 1
            if xTickSteps = -1
                barTicks:SetSize(numberOfGroups)
                barLabels:SetSize(numberOfGroups)
                xTickSteps = numberOfGroups
            else
                tickJumps = numberOfGroups / xTickSteps
                barTicks:SetSize(xTickSteps)
                barLabels:SetSize(xTickSteps)
                
            end
            bars:SetSize(numberOfBars)
            
            integer i = 0
            repeat while i < xTickSteps
                //Make the ticks
                Drawable tick
                tick:LoadFilledRectangle(3, 15)
                barTicks:Set(i, tick)
                barPanel:Add(barTicks:Get(i))

                //Make the labels
                ControlLabel tempLabel
                
                Text name
                name:SetValue(barGroups:Get(i * tickJumps):GetName())

                if name:GetValue() = undefined
                    name:SetValue("Bar " + (i + 1))
                    barGroups:Get(i):SetName(name:GetValue())
                end
                tempLabel:SetText(name:GetValue())
                tempLabel:SetName(name:GetValue() + " " + (i + 1) + " of " + xTickSteps)
                tempLabel:SetFocusable(true)
                tempLabel:SetAccessibilityCode(parent:Item:ITEM)
                tempLabel:SetFont(GetFont():Copy())
                tempLabel:SetFontSize(cast(integer, GetFontSize()*GetXAxisFontSizeOffset()))
                barLabels:Set(i, tempLabel)
                
                barPanel:Add(barLabels:Get(i))
                i = i + 1
            end

            integer barCount = 0
            i = 0
            repeat while i < barGroups:GetSize()
                integer j = 0
                
                if hasBarGroups
                    Icon barGroupIcon = barGroups:Get(i):GetIcon() 
                    barGroupIcon:SetName("Bar Group " + (i + 1))
                    barGroupIcon:SetFocusable(true)
                    barGroupIcon:SetAccessibilityCode(parent:Item:ITEM)
                    barGroupIcon:SetNextFocus(GetNextFocus())
                    barGroupIcon:SetPreviousFocus(GetPreviousFocus())
                    chartArea:Add(barGroupIcon)
                end

                repeat while j < barGroups:Get(i):GetSize()
                    //make bars
                    Icon temp = barGroups:Get(i):Get(j):GetIcon()
                    if hasBarGroups
                        temp:SetName("Bar Group " + (i + 1) + ", Bar " + (j + 1))
                    else
                        temp:SetName("Bar " + (barCount + 1))
                    end
                    temp:SetFocusable(true)
                    temp:SetAccessibilityCode(parent:Item:ITEM)
                    temp:SetNextFocus(GetNextFocus())
                    temp:SetPreviousFocus(GetPreviousFocus())
                    bars:Set(barCount, temp)
                    chartArea:Add(bars:Get(barCount))
                    j = j + 1
                    barCount = barCount + 1
                end
                i = i + 1
            end
            ApplySeriesColor()
            
            if IsShowingLegend()
                Add(GetLegend())
            end
        end
    end

    action ApplySeriesColor()
        ChartOptions options
        i = 0
        repeat while i < seriesList:GetSize()
            Series series = seriesList:Get(i)
            series:SetColor(options:GetColorFromPalette(i))
            series:GetLabel():SetFocusable(true)
            series:GetLabel():SetAccessibilityCode(parent:Item:ITEM)
            integer j = 0
            repeat while j < series:GetSize()
                series:GetItem(j):SetColor(series:GetColor())
                j = j + 1
            end
            i = i + 1
        end
    end

    /*
        This action is called whenever the window is resized.
    */
    action Resize
        parent:Chart:Resize()
    end
end