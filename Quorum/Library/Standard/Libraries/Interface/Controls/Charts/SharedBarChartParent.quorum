package Libraries.Interface.Controls.Charts

use Libraries.Interface.Selections.ChartSelection
use Libraries.Interface.Controls.ControlLabel
use Libraries.Interface.Controls.Icon
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Views.LabelBoxView
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Array
use Libraries.Compute.Math
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Interface.Controls.Charts.Graphics.BarGroup
use Libraries.Interface.Controls.Charts.Graphics.Bar

/*
    The SharedBarChartParent class is Chart object that inherits from Control and like other
    UI elements it is added to the Game class. SharedBarChartParent is a parent to the BarChart 
    and the Histogram class and is not directly used itself.

    Attribute: Authors: Gabriel Contreras, Hannah Williams, Tim Kluthe

    Attribute: Example

    use Libraries.Interface.Controls.Charts
    use Libraries.Interface.Controls.Charts.BarChart
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            BarChart chart
            Add(chart)
        end
    end
*/

class SharedBarChartParent is Chart
    private integer numberOfBars = 0
    private number maxBarValue = 0
    private number minBarValue = 0

    Array<BarGroup> barGroups
    boolean isStacked = false

    Color barColor = undefined

    ColorGroup previousColorGroup = undefined
    Color previousColor = undefined
    integer previousZ = 0
    ChartOptions options
    Math math
    
    /*
        LoadGraphics
        This action is used to load the graphical components of the Control. This is
        handled automatically by the Game engine as needed, and most users shouldn't
        need to use this action directly.

        Attribute: Parameter takes the layout properties of the chart.
    */
    action LoadGraphics(LayoutProperties properties)
        DisposeDrawables()
        if properties = undefined
            return now
        end

        // If stacked, we need to adjust the maximum value to the full stack
        if GetStackedFlag() and not IsSeparatedBySeries()
            AdjustStacked()
        end

        parent:Chart:LoadGraphics(properties)

        if GetHorizontalFlag()
            HideMajorYGridLines()
        else
            HideMajorXGridLines()
        end

        LoadChartAreaItems()
    end

    action LoadChartAreaItems()
        integer i = 0
        repeat while i < barGroups:GetSize()
            text groupname = barGroups:Get(i):GetName()
            if HasGroups() and not IsSeparatedBySeries()
                BarGroup barGroupIcon = barGroups:Get(i)
                barGroupIcon:SetName(groupname + " group, ")
                barGroupIcon:SetDescription((i+1) + " of " + barGroups:GetSize() + " groups, has " + barGroups:Get(i):GetSize() + " bars.")
                barGroupIcon:SetFocusable(true)
                barGroupIcon:SetAccessibilityCode(parent:Item:ITEM)
                barGroupIcon:SetNextFocus(GetNextFocus())
                barGroupIcon:SetPreviousFocus(GetPreviousFocus())
                GetChartArea():Add(barGroupIcon)
            end
            GetChartArea():Add(barGroups:Get(i):GetSelectionArrow())

            Drawable top
            barGroups:Get(i):GetSelectionBracket():Add(top)
            GetChartArea():Add(top)

            Drawable side
            barGroups:Get(i):GetSelectionBracket():Add(side) 
            GetChartArea():Add(side)

            Drawable bottom
            barGroups:Get(i):GetSelectionBracket():Add(bottom) 
            GetChartArea():Add(bottom)  

            GetGroupPanels():Add(barGroups:Get(i))

            integer j = 0  
            repeat while j < barGroups:Get(i):GetSize()
                Bar temp = barGroups:Get(i):Get(j)
                ChartAreaPanel chartArea = GetChartArea()
                if IsSeparated()
                    integer k = 0
                    repeat while k < GetNumberOfChartAreas()
                        if IsSeparatedBySeries()
                            if temp:GetSeries():GetName() = GetSubChartAreas():Get(k):GetName()
                                chartArea = GetSubChartAreas():Get(k)
                                GetSubChartAreas():Get(k):AddChartAreaItem(temp)
                            end
                        elseif IsSeparatedByFactor()
                            if groupname = GetSubChartAreas():Get(k):GetName()
                                chartArea = GetSubChartAreas():Get(k)
                                GetSubChartAreas():Get(k):AddChartAreaItem(temp)
                            end
                        end
                        k = k + 1
                    end
                end

                number value = math:Round(temp:GetValue(), 2)
                text barname = temp:GetName()
                text valueText = ""+value
                if CheckIfInteger(value)
                    valueText = ""+cast(integer, value)
                end

                text placement = (j + 1) + " of " + barGroups:Get(i):GetSize() + " bars inside " + groupname + " group."
                if HasGroups()
                    temp:SetName(barname + " bar, ")
                    if IsSeparated()
                        placement = ""
                    end
                    temp:SetDescription(valueText + ", " + placement)
                else
                    temp:SetName(barname + " bar, ")
                    temp:SetDescription(valueText + " " + (i + 1) + " of " + barGroups:GetSize() + " bars.")
                end
                temp:SetFocusable(true)
                temp:SetAccessibilityCode(parent:Item:ITEM)
                temp:SetNextFocus(GetNextFocus())
                temp:SetPreviousFocus(GetPreviousFocus())

                if temp:ShowAnnotation() or ShowAnnotations() and not GetStackedFlag() //not sure how we will show annotations for stacked bars
                    ControlLabel barLabel
                    barLabel:SetText(valueText)
                    temp:SetAnnotation(barLabel)
                    chartArea:Add(barLabel)
                end
                chartArea:Add(temp)
                chartArea:Add(temp:GetSelectionArrow())
                j = j + 1
            end
            i = i + 1
        end
    end

    private action CheckIfInteger(number value) returns boolean
        return (cast(integer, value) = value)
    end

    action AdjustStacked() 
        if IsSeparatedByFactor()
            if XAxisIsIndependent()
                ShowXAxis(false)
            else
                ShowYAxis(false)
            end
        end

        integer i = 0
        repeat while i < barGroups:GetSize()
            if barGroups:Get(i):GetPositiveValue() > maxBarValue
                maxBarValue = barGroups:Get(i):GetPositiveValue()
            end
            if barGroups:Get(i):GetNegativeValue() < minBarValue
                minBarValue = barGroups:Get(i):GetNegativeValue()
            end
            i = i + 1
        end

        if GetHorizontalFlag()
            if maxBarValue > GetXAxisMaximum()
                GetHorizontalPanel():SetMaximum(maxBarValue)
            end
            if minBarValue < GetXAxisMinimum()
                GetHorizontalPanel():SetMinimum(minBarValue)
            end
        else
            if maxBarValue > GetYAxisMaximum()
                GetVerticalPanel():SetMaximum(maxBarValue)
            end
            if minBarValue < GetYAxisMinimum()
                GetVerticalPanel():SetMinimum(minBarValue)
            end
        end
    end

    /*
        DisposeDrawables
        
        Empties drawables from the chart area.
    */
    action DisposeDrawables()
        parent:Chart:DisposeDrawables()

        GetChartArea():Empty()
    end
    
    /*
        LostSelection is a supplemental action to the parent Chart's LostSelection.
        Any items specific to only this type of chart or if an item needs different highlighting
        instructions than that of the parent class, it will have their LostSelection defined here.

        Unlike many kinds of user interface controls, there is no universal way of interacting with a chart and, as such, this 
        may be defined by any chart to be custom. As such, charts must be able to take messages suggesting an item in the chart
        has either lost or gained the focus. Broadly speaking, this is done automatically and while charts need to implement
        this action, they do not need to call this action directly.

        Attribute: Parameter item the ChartItem representing the structure for this particular kind of chart. 
    */
    action LostSelection(ChartItem item)
        if item = undefined
            return now
        end
        Item target = item:GetFocusTarget()
        if target not= undefined
            if target is BarGroup
                BarGroup group = cast(BarGroup, target)
                group:GetSelectionArrow():Hide()
                integer i = 0
                repeat while i < group:GetSelectionBracket():GetSize()
                    group:GetSelectionBracket():Get(i):Hide()
                    i = i + 1
                end
            elseif target is Bar
                Bar bar = cast(Bar, target)
                bar:GetSelectionArrow():Hide()
            else
                parent:Chart:LostSelection(item)
            end
        end 
    end

    /* 
        GainedSelection is a supplemental action to the parent Chart's GainedSelection.
        Any items specific to only this type of chart or if an item needs different highlighting
        instructions than that of the parent class, it will have their GainedSelection defined here.

        Unlike many kinds of user interface controls, there is no universal way of interacting with a chart and, as such, this 
        may be defined by any chart to be custom. As such, charts must be able to take messages suggesting an item in the chart
        has either lost or gained the focus. Broadly speaking, this is done automatically and while charts need to implement
        this action, they do not need to call this action directly.

        Attribute: Parameter item the ChartItem representing the structure for this particular kind of chart. 
    */
    action GainedSelection(ChartItem item)
        if item = undefined
            return now
        end
        Item target = item:GetFocusTarget()
        if target not= undefined
            target:Focus()
            if target is BarGroup
                BarGroup group = cast(BarGroup, target)
                group:GetSelectionArrow():Show()
                integer i = 0
                repeat while i < group:GetSelectionBracket():GetSize()
                    group:GetSelectionBracket():Get(i):Show()
                    i = i + 1
                end
            elseif target is Bar
                Bar bar = cast(Bar, target)
                bar:GetSelectionArrow():Show()
            else
                parent:Chart:GainedSelection(item)  
            end          
        end
    end

    /*
        Resize

        This action is called whenever the window is resized.
    */
    action Resize
        parent:Chart:Resize()
    end

    /*
        Sorts the bars by size in descending order (only if there are no groups)
        Updates the axis labels to the correct position after sorting.
    */
    action SortByBarSize()
        if not HasGroups()
            BarGroupComparison comparison
            barGroups:Sort(comparison)
            Array <text> labels = GetUpdatedLabels()
            if GetHorizontalFlag()
                GetVerticalPanel():SetTextLabels(labels)
            else
                GetHorizontalPanel():SetTextLabels(labels)
            end
        end
    end
    action GetUpdatedLabels() returns Array<text>
        Array <text> grouplabels
        integer i = 0
        repeat while i < barGroups:GetSize()
            grouplabels:Add(barGroups:Get(i):GetName())
            i = i + 1
        end
        return grouplabels
    end

    /*
        Appends a bargroup to end of the Bar Chart. 
        The number of bars in the group are added to the total number of bars.
    */
    action AddBarGroup(BarGroup group)
        if maxBarValue < group:GetMaxBarValue()
            maxBarValue = group:GetMaxBarValue()
        end
        if minBarValue > group:GetMinBarValue()
            minBarValue = group:GetMinBarValue()
        end
        barGroups:Add(group)
        numberOfBars = numberOfBars + group:GetSize()
        if group:GetSize() > 1
            HasGroups(true)
        end
    end

    /*
        Returns the number of bars currently added to the Bar Chart
    */
    action GetNumberOfBars returns integer
        return numberOfBars
    end

    /*
        Returns an array of all the bar groups
    */
    action GetBarGroups returns Array<BarGroup>
        return barGroups
    end

    /*
        Sets a flag that will stack bars inside each group if set to true.
    */
    action IsStacked(boolean flag)
        isStacked = flag
    end

    /*
        Returns stacked flag 

        Attribute: True if stacked
    */
    action GetStackedFlag() returns boolean
        return isStacked
    end

    /*
        GenerateInfoTree

        Generates the tree of ChartItems that define how the chart will be 
        navigated and what extra information might be sent to the screen reader.
        GenerateSummary is done in the child class: BarChart or Histogram
    */
    action GenerateInfoTree
        if GetDefaultLayoutProperties():NeedsRendering()
            return now //we haven't loaded graphics yet, so bail.
        end
        Math math
        //NOTE: These nodes implement a cheap form of ordinality might need changing
        ChartItem xAxis
        ChartItem yAxis
        ChartItem chartArea //not to be confused with panels
        
        text bartext = " bars"
        if numberOfBars = 1
            bartext = " bar"    
        end

        ChartItem summary = GetInfoTreeRoot()
        // The chart area is the child unless y-axis is showing.
        summary:SetDisplayName(GenerateSummary())
        summary:SetNext(chartArea)
        summary:SetChild(chartArea)
        summary:SetContainer(me)
        summary:SetFocusTarget(me)
        chartArea:SetDisplayName("Chart Area with " + numberOfBars + bartext)
        chartArea:SetFocusTarget(me:GetChartArea())
        chartArea:SetParent(summary)
        chartArea:SetContainer(me)
        me:GetChartArea():SetDescription(" with " + numberOfBars + bartext)
    
        // If any of these are not showing the tree will skip them in the navigation        
        if IsShowingYAxis() 
            GetVerticalPanel():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end
        if IsShowingXAxis() 
            GetHorizontalPanel():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end
        if IsShowingLegend()
            GetLegend():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end

        if IsSeparated()
            integer subAreaCount = GetNumberOfVisibleChartAreas()
            ChartItem firstArea
            firstArea:SetContainer(me)
            if GetNumberOfChartAreas() > 0
                GetChartArea():SetDescription(" with " + subAreaCount + " sub charts")
                chartArea:SetChild(firstArea)
                firstArea:SetParent(chartArea)
                firstArea:SetFocusTarget(GetSubChartAreas():Get(0))
                firstArea:SetDisplayName(GetSubChartAreas():Get(0):GetName())
                Array <Item> chartAreaItems = GetSubChartAreas():Get(0):GetChartAreaItems()
                GetSubChartAreas():Get(0):SetDescription(" chart area with " + chartAreaItems:GetSize() + " bars, 1 of " + subAreaCount + " sub charts.")

                //Bars within SubChartArea
                ChartItem firstBar
                firstBar:SetContainer(me)
                if chartAreaItems:GetSize() > 0
                    firstArea:SetChild(firstBar)
                    firstBar:SetParent(firstArea)
                    firstBar:SetFocusTarget(chartAreaItems:Get(0))
                    chartAreaItems:Get(0):SetDescription(chartAreaItems:Get(0):GetDescription() + " 1 of " + chartAreaItems:GetSize() + " bars.")
                end

                integer j = 1
                ChartItem previousBar = firstBar
                repeat while j < chartAreaItems:GetSize()
                    ChartItem bar
                    bar:SetContainer(me)
                    bar:SetParent(firstArea)
                    bar:SetFocusTarget(chartAreaItems:Get(j))
                    chartAreaItems:Get(j):SetDescription(chartAreaItems:Get(j):GetDescription() + (j+1) + " of " + chartAreaItems:GetSize() + " bars.")
                    previousBar:SetNext(bar)
                    bar:SetPrevious(previousBar)
                    previousBar = bar
                    j = j + 1
                end
                firstArea:SetLastChild(previousBar)
            end

            integer i = 1
            ChartItem previousArea = firstArea
            repeat while i < GetNumberOfChartAreas()
                ChartAreaPanel chartSubArea = GetSubChartAreas():Get(i)
                if chartSubArea:IsShowing()
                    ChartItem nextArea
                    nextArea:SetContainer(me)
                    nextArea:SetParent(chartArea)
                    nextArea:SetFocusTarget(chartSubArea)
                    previousArea:SetNext(nextArea)
                    nextArea:SetPrevious(previousArea)
                    previousArea = nextArea
                    nextArea:SetDisplayName(chartSubArea:GetName())
                    Array <Item> chartAreaItems = chartSubArea:GetChartAreaItems()
                    chartSubArea:SetDescription(" chart area with " + chartAreaItems:GetSize() + " bars, " + (i+1) + " of " + subAreaCount + " sub charts.")

                    //Bars within SubChartArea
                    ChartItem firstBar
                    firstBar:SetContainer(me)
                    if chartAreaItems:GetSize() > 0
                        nextArea:SetChild(firstBar)
                        firstBar:SetParent(nextArea)
                        firstBar:SetFocusTarget(chartAreaItems:Get(0))
                        chartAreaItems:Get(0):SetDescription(chartAreaItems:Get(0):GetDescription() + " 1 of " + chartAreaItems:GetSize() + " bars.")
                    end
    
                    j = 1
                    ChartItem previousBar = firstBar
                    repeat while j < chartAreaItems:GetSize()
                        ChartItem bar
                        bar:SetContainer(me)
                        bar:SetParent(nextArea)
                        bar:SetFocusTarget(chartAreaItems:Get(j))
                        chartAreaItems:Get(j):SetDescription(chartAreaItems:Get(j):GetDescription() + (j+1) + " of " + chartAreaItems:GetSize() + " bars.")
                        previousBar:SetNext(bar)
                        bar:SetPrevious(previousBar)
                        previousBar = bar
                        j = j + 1
                    end
                    nextArea:SetLastChild(previousBar)
                end
                i = i + 1
            end
            chartArea:SetLastChild(previousArea)
        else
            if HasGroups()
                //Bar Groups
                ChartItem firstGroup
                firstGroup:SetContainer(me)
                if barGroups:GetSize() > 0
                    chartArea:SetChild(firstGroup)
                    firstGroup:SetParent(chartArea)
                    firstGroup:SetFocusTarget(barGroups:Get(0))
        
                    //Bars within Bar Groups
                    ChartItem firstBar
                    firstBar:SetContainer(me)
                    if barGroups:Get(0):GetSize() > 0
                        firstGroup:SetChild(firstBar)
                        firstBar:SetParent(firstGroup)
                        firstBar:SetFocusTarget(barGroups:Get(0):Get(0))
                    end
                    integer j = 1
                    ChartItem previousBar = firstBar
                    repeat while j < barGroups:Get(0):GetSize()
                        ChartItem bar
                        bar:SetContainer(me)
                        bar:SetParent(firstGroup)
                        bar:SetFocusTarget(barGroups:Get(0):Get(j))
                        previousBar:SetNext(bar)
                        bar:SetPrevious(previousBar)
                        previousBar = bar
                        j = j + 1
                    end
                    firstGroup:SetLastChild(previousBar)
                end        
        
                integer i = 1
                ChartItem previousGroup = firstGroup
                repeat while i < barGroups:GetSize()
                    ChartItem group
                    group:SetContainer(me)
                    group:SetParent(chartArea)
                    group:SetFocusTarget(barGroups:Get(i))
                    previousGroup:SetNext(group)
                    group:SetPrevious(previousGroup)
                    previousGroup = group
        
                    //Bars within Bar Groups
                    ChartItem firstBar
                    firstBar:SetContainer(me)
                    if barGroups:Get(i):GetSize() > 0
                        group:SetChild(firstBar)
                        firstBar:SetParent(group)
                        firstBar:SetFocusTarget(barGroups:Get(i):Get(0))
                    end
                    integer j = 1
                    ChartItem previousBar = firstBar
                    repeat while j < barGroups:Get(i):GetSize()
                        ChartItem bar
                        bar:SetContainer(me)
                        bar:SetParent(group)
                        bar:SetFocusTarget(barGroups:Get(i):Get(j))
                        previousBar:SetNext(bar)
                        bar:SetPrevious(previousBar)
                        previousBar = bar                 
                        j = j + 1
                    end
                    group:SetLastChild(previousBar)
                    i = i + 1
                end
                chartArea:SetLastChild(previousGroup)
            else
                if barGroups:GetSize() > 0
                    ChartItem firstBar
                    firstBar:SetContainer(me)
                    if barGroups:Get(0):GetSize() > 0
                        chartArea:SetChild(firstBar)
                        firstBar:SetParent(chartArea)
                        firstBar:SetFocusTarget(barGroups:Get(0):Get(0))
                    end
                    integer i = 1
                    ChartItem previousBar = firstBar
                    repeat while i < barGroups:GetSize()
                        ChartItem bar
                        bar:SetContainer(me)
                        bar:SetParent(chartArea)
                        bar:SetFocusTarget(barGroups:Get(i):Get(0))
                        previousBar:SetNext(bar)
                        bar:SetPrevious(previousBar)
                        previousBar = bar
                        i = i + 1
                    end
                    chartArea:SetLastChild(previousBar)
                end
            end
        end
        ChartSelection selection = GetSelection()
        selection:Set(summary)
    end

    /* 
        Max bar value will track the largest bar and limit the axis controls to not drop below that value.
        This will prevent the bar from being drawn over the edge of the chart area.

        Min bar value will track the smallest (negative) bar and limit the axis controls to not go above that value.
        This will prevent the bar from being drawn over the edge of the chart area.
    */ 

    action SetXAxisMaximum(number max)
        if GetVerticalFlag()
            parent:Chart:SetXAxisMaximum(max)
        else
            if max >= maxBarValue
                parent:Chart:SetXAxisMaximum(max)
            else
                output "X-axis maximum cannot be below highest bar value: " + maxBarValue
            end
        end
    end

    action SetYAxisMaximum(number max)
        if GetHorizontalFlag()
            parent:Chart:SetYAxisMaximum(max)
        else
            if max >= maxBarValue
                parent:Chart:SetYAxisMaximum(max)
            else
                output "Y-axis maximum cannot be below highest bar value: " + maxBarValue
            end
        end
    end

    action SetXAxisMinimum(number min)
        if GetVerticalFlag()
            parent:Chart:SetXAxisMinimum(min)
        else
            if min <= minBarValue
                parent:Chart:SetXAxisMinimum(min)
            else
                output "X-axis minimum cannot be above lowest bar value: " + minBarValue
            end
        end
    end

    action SetYAxisMinimum(number min)
        if GetHorizontalFlag()
            parent:Chart:SetYAxisMinimum(min)
        else
            if min <= minBarValue
                parent:Chart:SetYAxisMinimum(min)
            else
                output "Y-axis minimum cannot be above lowest bar value: " + minBarValue
            end
        end
    end
end