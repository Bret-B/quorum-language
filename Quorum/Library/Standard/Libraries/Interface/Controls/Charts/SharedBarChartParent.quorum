package Libraries.Interface.Controls.Charts
use Libraries.Interface.Selections.ChartSelection
use Libraries.Containers.Array
use Libraries.Game.Graphics.Color
use Libraries.Interface.Controls.Icon
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Controls.ControlLabel
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Compute.Math
use Libraries.Game.Graphics.Label
use Libraries.Interface.Controls.Charts.ChartOptions
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.TextureRegion
use Libraries.Interface.Views.View2D
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Item
use Libraries.Interface.Controls.Control
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Controls.Charts.BarGroup
use Libraries.Interface.Controls.Charts.Series
use Libraries.Interface.Views.LabelBoxView

class SharedBarChartParent is Chart
    private ChartItem summary // root of the tree
    integer numberOfBars = 0

    Array<BarGroup> barGroups
    boolean hasBarGroups = true
    boolean isStacked = false
    boolean removeGaps = false // Histograms typically do not have spacing between bars
    Array<Series> seriesList

    Color barColor = undefined
    Color highlightColor = undefined

    ColorGroup previousColorGroup = undefined
    Color previousColor = undefined
    Control controlHighlight
    Math math
   
    action LostSelection(ChartItem ci)
        if ci = undefined
            return now
        end
        Item target = ci:GetFocusTarget()

        if target not= undefined and target is ControlLabel
            ControlLabel temp = cast(ControlLabel, target)
            temp:LostSelection()
        elseif target not= undefined and target is Series
            Series temp = cast(Series, target)
            integer i = 0
            repeat while i < temp:GetSize()
                Drawable item = temp:GetItemAt(i)
                item:SetColor(previousColor)
                i = i + 1
            end
            temp:GetLabel():LostSelection()
        elseif target not= undefined and target is Icon
            Icon temp = cast(Icon, target)
            temp:SetColor(previousColor)
        elseif target is Control
            Control temp = cast(Control, target)
            LayoutProperties properties = temp:GetDefaultLayoutProperties()
            if properties not= undefined
                LabelBoxView view
                view:SetBorderThickness(cast(integer, properties:GetBorderThickness()))
                view:Initialize(properties:GetBackgroundColor(), previousColorGroup)
                temp:SetView2D(view)
            end
        end
    end

    action GainedSelection(ChartItem ci)
        if ci = undefined
            return now
        end
        Item target = ci:GetFocusTarget()
        if target not= undefined
            target:Focus()
            if target is ControlLabel
                ControlLabel temp = cast(ControlLabel, target)
                temp:GainedSelection()
            elseif target not= undefined and target is Series
                Series temp = cast(Series, target)
                previousColor = temp:GetColor()
                integer i = 0
                repeat while i < temp:GetSize()
                    Drawable item = temp:GetItemAt(i)
                    item:SetColor(GetHighlightColor())
                    i = i + 1
                end
                temp:GetLabel():GainedSelection()
            elseif target is Icon
                Color c
                Icon temp = cast(Icon, target)
                previousColor = temp:GetColor()
                temp:SetColor(GetHighlightColor())
            elseif target is Control
                Control temp = cast(Control, target)
                LayoutProperties properties = temp:GetDefaultLayoutProperties()
                if properties not= undefined
                    previousColorGroup = properties:GetBorderColor()
                    LabelBoxView view
                    view:SetBorderThickness(cast(integer, properties:GetBorderThickness())+4)
                    view:Initialize(properties:GetBackgroundColor(), GetHighlightColor())
                    temp:SetView2D(view)
                end
            end            
        end
    end

    /*
        Returns the number of bars currently added to the Bar Chart
    */
    action GetNumberOfBars returns integer
        return numberOfBars
    end

    /*
        Sets a flag that's used by GenerateInfoTree to determine if it should include accessibility navigation through bar groups
    */
    action HasBarGroups(boolean flag)
        hasBarGroups = flag
    end
     /*
        Sets a flag that's used by GenerateInfoTree to determine if it should include accessibility navigation through bar groups
    */
    action HasBarGroups returns boolean
        return hasBarGroups
    end

    /*
        Sets a flag that's used by layout to remove gaps for histograms
    */
    action RemoveGaps(boolean flag)
        removeGaps = flag
    end
     /*
        Sets a flag that's used by GenerateInfoTree to determine if it should include accessibility navigation through bar groups
    */
    action RemoveGaps returns boolean
        return removeGaps
    end

    /*
        Sets a flag that will stack bars inside each group if set to true.
    */
    action IsStacked(boolean flag)
        isStacked = flag
    end

    /*
        Returns stacked flag 
    */
    action GetStackedFlag() returns boolean
        return isStacked
    end

    /*
        Adjust the axis maximum to use stacked values.
    */
    action AdjustStacked()
        
        integer i = 0
        repeat while i < barGroups:GetSize()
            number sum = 0
            integer j = 0
            repeat while j < barGroups:Get(i):GetSize()
                sum = sum + barGroups:Get(i):Get(j):GetValue()
                j = j + 1
            end
            if sum > GetYAxisMaximum()
                SetYAxisMaximum(sum)
            end
            i = i + 1
        end
    end

    /*
        Appends a bargroup to end of the Bar Chart. 
        If any bars in the bar group are bigger than the y max, ymax increases
    */
    action AddBarGroup(BarGroup group)
        barGroups:Add(group)
        numberOfBars = numberOfBars + group:GetSize()
    end
    
    /*
        Sets the default color for the bars
    */
    action SetBarColor(Color color)
        me:barColor = color
    end

    action GetBarColor() returns Color
        return me:barColor
    end

    /*
        Gets the default selection color (highlighting) for the bars
    */
    action GetHighlightColor() returns Color
        return highlightColor
    end

    /*
        Sets the default selection color (highlighting) for the bars
    */
    action SetHighlightColor(Color color)
        me:highlightColor = color
    end

    /*
        Returns a percentage value of a bar's height 
    */
    private action GetPercentFromHeight(number full) returns number
        Math math
        return math:Round(full, 2) * 100
    end
  
    /*
        Returns an array of all the bar groups
    */
    action GetBarGroups returns Array<BarGroup>
        return barGroups
    end

    /*
        Returns an array of all the series sets 
    */
    action GetSeriesList returns Array<Series>
        return seriesList
    end

    action AddSeries(Series series)
        seriesList:Add(series)
    end

    /*
        Generates the tree of ChartItems that define how the chart will be 
        navigated and what extra information might be sent to the screen reader.
    */
    action GenerateInfoTree
        if GetDefaultLayoutProperties():NeedsRendering()
            return now //we haven't loaded graphics yet, so bail.
        end
        Math math
        //NOTE: These nodes implement a cheap form of ordinality might need changing
        ChartItem xAxis
        ChartItem yAxis
        ChartItem chartArea //not to be confused with panels
        
        // The chart area is the child unless y-axis is showing.
        summary:SetDisplayName(GenerateSummary())
        summary:SetNext(chartArea)
        summary:SetChild(chartArea)
        summary:SetContainer(me)
        summary:SetFocusTarget(me)
        chartArea:SetDisplayName("Chart Area " + numberOfBars + " bars")
        chartArea:SetFocusTarget(me:GetChartArea())
        chartArea:SetParent(summary)
        chartArea:SetContainer(me)
        me:GetChartArea():SetDescription(numberOfBars + " bars")
    
        // If any of these are not showing the tree will skip them in the navigation        
        if IsShowingYAxis()
            GetVerticalPanel():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end
        if IsShowingXAxis()
            GetHorizontalPanel():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end
        if IsShowingLegend()
            GetLegend():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end

        if hasBarGroups
            //Bar Groups
            ChartItem firstGroup
            firstGroup:SetContainer(me)
            if barGroups:GetSize() > 0
                chartArea:SetChild(firstGroup)
                barGroups:Get(0):GetIcon():SetDescription(", 1 of " + barGroups:GetSize() + " groups, " + barGroups:Get(0):GetName())
                firstGroup:SetParent(chartArea)
                firstGroup:SetFocusTarget(barGroups:Get(0):GetIcon())
    
                //Bars within Bar Groups
                ChartItem firstBar
                firstBar:SetContainer(me)
                if barGroups:Get(0):GetSize() > 0
                    firstGroup:SetChild(firstBar)
                    barGroups:Get(0):Get(0):GetIcon():SetDescription(", " + GetPercentFromHeight(barGroups:Get(0):Get(0):GetHeight()) + "%, 1 of " + barGroups:Get(0):GetSize() + " bars inside bar group 1, " + barGroups:Get(0):GetName() + ", " + math:Round(barGroups:Get(0):Get(0):GetValue(),2))
                    firstBar:SetParent(firstGroup)
                    firstBar:SetFocusTarget(barGroups:Get(0):Get(0):GetIcon())
                end
                integer j = 1
                ChartItem previousBar = firstBar
                repeat while j < barGroups:Get(0):GetSize()
                    ChartItem bar
                    bar:SetContainer(me)
                    barGroups:Get(0):Get(j):GetIcon():SetDescription(", " + GetPercentFromHeight(barGroups:Get(0):Get(j):GetHeight()) + "%, " + (j+1) + " of " + barGroups:Get(0):GetSize() + " bars inside bar group 1, " + barGroups:Get(0):GetName() + ", " + math:Round(barGroups:Get(0):Get(j):GetValue(),2))
                    bar:SetParent(firstGroup)
                    bar:SetFocusTarget(barGroups:Get(0):Get(j):GetIcon())
                    previousBar:SetNext(bar)
                    bar:SetPrevious(previousBar)
                    previousBar = bar
                    j = j + 1
                end
            end
    
            integer i = 1
            ChartItem previousGroup = firstGroup
            repeat while i < barGroups:GetSize()
                ChartItem group
                group:SetContainer(me)
                barGroups:Get(i):GetIcon():SetDescription(", " + (i+1) + " of " + barGroups:GetSize() + " groups, " + barGroups:Get(i):GetName())
                group:SetParent(chartArea)
                group:SetFocusTarget(barGroups:Get(i):GetIcon())
                previousGroup:SetNext(group)
                group:SetPrevious(previousGroup)
                previousGroup = group
    
                //Bars within Bar Groups
                ChartItem firstBar
                firstBar:SetContainer(me)
                if barGroups:Get(i):GetSize() > 0
                    group:SetChild(firstBar)
                    barGroups:Get(i):Get(0):GetIcon():SetDescription(", " + GetPercentFromHeight(barGroups:Get(i):Get(0):GetHeight()) + "%, 1 of " + barGroups:Get(i):GetSize() + " bars inside bar group " + (i+1) + ", " + barGroups:Get(i):GetName() + ", " + math:Round(barGroups:Get(i):Get(0):GetValue(),2))
                    firstBar:SetParent(group)
                    firstBar:SetFocusTarget(barGroups:Get(i):Get(0):GetIcon())
                end
                integer j = 1
                ChartItem previousBar = firstBar
                repeat while j < barGroups:Get(i):GetSize()
                    ChartItem bar
                    bar:SetContainer(me)
                    barGroups:Get(i):Get(j):GetIcon():SetDescription(", " + GetPercentFromHeight(barGroups:Get(i):Get(j):GetHeight()) + "%, " + (j+1) + " of " + barGroups:Get(i):GetSize() + " bars inside bar group " + (i+1) + ", " + barGroups:Get(i):GetName() + ", " + math:Round(barGroups:Get(i):Get(j):GetValue(),2))
                    bar:SetParent(group)
                    bar:SetFocusTarget(barGroups:Get(i):Get(j):GetIcon())
                    previousBar:SetNext(bar)
                    bar:SetPrevious(previousBar)
                    previousBar = bar
                    j = j + 1
                end
                i = i + 1
            end
        else
            if barGroups:GetSize() > 0
                ChartItem firstBar
                firstBar:SetContainer(me)
                if barGroups:Get(0):GetSize() > 0
                    chartArea:SetChild(firstBar)
                    barGroups:Get(0):Get(0):GetIcon():SetDescription(", " + GetPercentFromHeight(barGroups:Get(0):Get(0):GetHeight()) + "%, 1 of " + barGroups:GetSize() + " bars, " + math:Round(barGroups:Get(0):Get(0):GetValue(),2))
                    firstBar:SetParent(chartArea)
                    firstBar:SetFocusTarget(barGroups:Get(0):Get(0):GetIcon())
                end
                integer i = 1
                ChartItem previousBar = firstBar
                repeat while i < barGroups:GetSize()
                    ChartItem bar
                    bar:SetContainer(me)
                    barGroups:Get(i):Get(0):GetIcon():SetDescription(", " + GetPercentFromHeight(barGroups:Get(i):Get(0):GetHeight()) + "%, " + (i+1) + " of " + barGroups:GetSize() + " bars, " + math:Round(barGroups:Get(i):Get(0):GetValue(),2))
                    bar:SetParent(chartArea)
                    bar:SetFocusTarget(barGroups:Get(i):Get(0):GetIcon())
                    previousBar:SetNext(bar)
                    bar:SetPrevious(previousBar)
                    previousBar = bar
                    i = i + 1
                end
            end
        end

        ChartSelection selection = GetSelection()
        selection:Set(summary)
    end


    action DisposeDrawables()
        parent:Chart:DisposeDrawables()

        GetChartArea():Empty()
    end

    action GetSummary returns ChartItem
        return summary
    end

    action SetSummary(ChartItem summary)
        me:summary = summary
    end


    /*
    This action is used to load the graphical components of the Control. This is
    handled automatically by the Game engine as needed, and most users shouldn't
    need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        DisposeDrawables()
        if properties = undefined
            return now
        end

        // If stacked, we need to adjust the maximum value to the full stack
        if GetStackedFlag()
            AdjustStacked()
        end

        parent:Chart:LoadGraphics(properties)
        Control chartArea = GetChartArea()
        ChartOptions options
        if GetBarColor() = undefined
            SetBarColor(options:GetBarColor())
        end

        if GetHighlightColor() = undefined
            SetHighlightColor(options:GetSelectionColor())
        end

        if GetDefaultOrientation() = undefined
            SetDefaultOrientation("vertical")
        end

        InitLabels()
        ApplySeriesColor()
        
        if IsShowingLegend()
            Add(GetLegend())
        end
    end

    action InitLabels()
        Control chartArea = GetChartArea()
        integer i = 0
        repeat while i < barGroups:GetSize()
            integer j = 0                 
            if hasBarGroups
                Icon barGroupIcon = barGroups:Get(i):GetIcon() 
                barGroupIcon:SetName("Bar Group " + (i + 1))
                barGroupIcon:SetFocusable(true)
                barGroupIcon:SetAccessibilityCode(parent:Item:ITEM)
                barGroupIcon:SetNextFocus(GetNextFocus())
                barGroupIcon:SetPreviousFocus(GetPreviousFocus())
                chartArea:Add(barGroupIcon)
            end
            GetGroupPanels():Add(barGroups:Get(i):GetIcon())
    
            repeat while j < barGroups:Get(i):GetSize()
                //make bars
                Icon temp = barGroups:Get(i):Get(j):GetIcon()
                if hasBarGroups
                    temp:SetName("Bar Group " + (i + 1) + ", Bar " + (j + 1))
                else
                    temp:SetName("Bar " + (i + 1))
                end
                temp:SetFocusable(true)
                temp:SetAccessibilityCode(parent:Item:ITEM)
                temp:SetNextFocus(GetNextFocus())
                temp:SetPreviousFocus(GetPreviousFocus())
                chartArea:Add(temp)
                j = j + 1
            end
            i = i + 1
        end
    end

    action ApplySeriesColor()
        ChartOptions options
        i = 0
        repeat while i < seriesList:GetSize()
            Series series = seriesList:Get(i)
            series:SetColor(options:GetColorFromPalette(i))
            series:GetLabel():SetFocusable(true)
            series:GetLabel():SetAccessibilityCode(parent:Item:ITEM)
            integer j = 0
            repeat while j < series:GetSize()
                series:GetItemAt(j):SetColor(series:GetColor())
                j = j + 1
            end
            i = i + 1
        end
    end
    /*
        This action is called whenever the window is resized.
    */
    action Resize
        parent:Chart:Resize()
    end
end