package Libraries.Interface.Controls.Charts.Flowcharts

use Libraries.Interface.Controls.Control
use Libraries.System.File
use Libraries.Game.Graphics.ColorGroup
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Views.ControlShaderView
use Libraries.Interface.Selections.FlowchartSelection
use Libraries.Containers.Array
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Game.Graphics.TextureRegion
use Libraries.Interface.Views.DrawableView
use Libraries.Game.Graphics.Drawable

class Flowchart is Control

    ColorGroup nodeBackgroundColor = undefined
    ColorGroup nodeSelectionColor = undefined
    ColorGroup nodeBorderColor = undefined
    ColorGroup nodeSelectionBorderColor = undefined
    ColorGroup arrowColor = undefined
    ColorGroup arrowHeadColor = undefined
    ColorGroup arrowSelectionColor = undefined

    number arrowLineThickness = 5
    number arrowHeadThickness = 30

    number nodeBorderThickness = arrowLineThickness:GetNotANumberValue()
    number nodeCornerRounding = nodeBorderThickness

    FlowchartSelection selection

    FlowchartNode startNode = undefined

    on create
        SetInterfaceOptionsKey("Flowchart")
        SetInputGroup("Flowchart")
        selection:Initialize(me)

        SetFocusable(true)
        SetAccessibilityCode(parent:Item:ITEM)

        SetLayout(CreateDefaultLayout())
    end

    private action CreateDefaultLayout returns Layout
        ManualLayout layout
        return layout
    end

    action LoadGraphics(LayoutProperties properties)
        if GetView2D() = undefined
            TextureRegion icon = GetIcon()
            if icon = undefined
                ControlShaderView view
                view:Initialize()
                SetView2D(view)
            else
                DrawableView view
                view:Load(icon)
                SetView2D(view)
            end
        end
    end

    action SetBackground(Drawable background)
        if background = undefined
            SetIcon(undefined)
        else
            SetIcon(background)

            LayoutProperties properties = GetCurrentLayoutProperties()
            if properties = undefined
                properties = GetDefaultLayoutProperties()
            end

            if properties:IsSettingWidth() = false and properties:IsSettingHeight() = false
                SetPixelWidth(background:GetWidth())
                SetPixelHeight(background:GetHeight())
            end
        end

        SetView2D(undefined)
        if GetCurrentLayoutProperties() not= undefined
            GetCurrentLayoutProperties():SetRenderingFlag(true)
        else
            GetDefaultLayoutProperties():SetRenderingFlag(true)
        end
    end

    action SetBackground(text filePath)
        Drawable drawable
        drawable:Load(filePath)
        SetBackground(drawable)
    end

    action SetBackground(File file)
        Drawable drawable
        drawable:Load(file)
        SetBackground(drawable)
    end

    /* 
        This action converts this chart to a text value that contains information 
        for a scalable vector graphics file. This is useful for saving charts to disk.
        Each sub-class of chart must implement this action separately.

        Attribute: Returns the Scalable Vector Graphics (SVG) text.
    */
    action ConvertToScalableVectorGraphics returns text
        return ""
    end

    /*
        This action saves this chart to disk at the position of the current file. To conduct the 
        conversion, the file extension is used. Only Scalable Vector Graphics (SVG) is currently 
        supported.

        Attribute: Parameter file the location of where to save the file.
    */
    action Save(File file)
        if file:GetFileExtension() = "svg"
            text value = ConvertToScalableVectorGraphics()
            file:Write(value)
        end
    end

    /*
        This is a helper action for saving that saves at the path relative to the current working directory.

        Attribute: Parameter path the path relative to the working directory.
    */
    action Save(text path)
        File file
        file:SetPath(path)
        Save(file)
    end

    action GetNodeBackgroundColor returns ColorGroup
        return nodeBackgroundColor
    end

    action SetNodeBackgroundColor(ColorGroup nodeBackgroundColor)
        me:nodeBackgroundColor = nodeBackgroundColor
    end

    action GetNodeBorderColor returns ColorGroup
        return nodeBorderColor
    end

    action SetNodeBorderColor(ColorGroup nodeBorderColor)
        me:nodeBorderColor = nodeBorderColor
    end

    action GetNodeBorderThickness returns number
        return nodeBorderThickness
    end

    action SetNodeBorderThickness(number nodeBorderThickness)
        me:nodeBorderThickness = nodeBorderThickness
    end

    action GetNodeCornerRounding returns number
        return nodeCornerRounding
    end

    action SetNodeCornerRounding(number nodeCornerRounding)
        me:nodeCornerRounding = nodeCornerRounding
    end

    action GetArrowLineThickness returns number
        return arrowLineThickness
    end

    action SetArrowLineThickness(number arrowLineThickness)
        me:arrowLineThickness = arrowLineThickness
    end

    action GetArrowHeadThickness returns number
        return arrowHeadThickness
    end

    action SetArrowHeadThickness(number arrowHeadThickness)
        me:arrowHeadThickness = arrowHeadThickness
    end

    action GetStartNode returns FlowchartNode
        // If a start node has been set, begin there. Otherwise, get the first node added.
        if startNode not= undefined
            return startNode
        else
            Array<Item2D> items = GetChildren()
            integer i = 0
            repeat while i < items:GetSize()
                if items:Get(i) is FlowchartNode
                    return cast(FlowchartNode, items:Get(i))
                end
                i = i + 1
            end
        end

        return undefined
    end

    action SetStartNode(FlowchartNode node)
        startNode = node
    end

    action OnSelectionChange(FlowchartNode oldNode, FlowchartArrow oldArrow)
        FlowchartNode node = selection:GetNode()
        FlowchartArrow arrow = selection:GetArrow()

        if oldArrow not= undefined and oldArrow:IsRenderingSelection()
            oldArrow:LostSelection()
        end

        if oldNode not= undefined and oldNode:IsRenderingSelection()
            oldNode:LostSelection()
        end

        if arrow = undefined
            node:GainedSelection()
            node:Focus()
        else
            arrow:SetNavigationText(oldNode)
            arrow:GainedSelection()
            arrow:Focus()
        end
    end

    action Select(FlowchartNode node)
        selection:Set(node, undefined)
    end

    action Select(FlowchartNode node, FlowchartArrow arrow)
        selection:Set(node, arrow)
    end

    action NavigateLeft
        if selection:IsEmpty()
            Select(GetStartNode())
            return now
        end

        FlowchartNode node = selection:GetNode()
        FlowchartArrow arrow = selection:GetArrow()
        if arrow = undefined
            // Left/Right navigation is only valid for top-level nodes. If this isn't one, return now.
            if node:GetInArrows():IsEmpty() = false
                return now
            end

            // In this case, find the next top-level node and jump to it.
            FlowchartNode target = undefined
            Array<Item2D> items = GetChildren()
            integer i = 0
            repeat while i < items:GetSize()
                if items:Get(i) is FlowchartNode
                    FlowchartNode current = cast(FlowchartNode, items:Get(i))
                    // If we've found the currently selected node, select the candidate if we found one already, otherwise bail.
                    if current = node
                        if target not= undefined
                            Select(target)
                        end
                        return now
                    end

                    // If this node has no inputs, it's a candidate. Store it.
                    if current:GetInArrows():IsEmpty()
                        target = current
                    end
                end

                i = i + 1
            end

        else
            // Find the previous arrow and select it, maintaining the same node.
            Array<FlowchartArrow> arrows = undefined
            if node = arrow:GetOrigin()
                arrows = node:GetOutArrows()
            else
                arrows = node:GetInArrows()
            end

            integer index = arrows:GetFirstLocation(arrow)
            if index > 0
                Select(node, arrows:Get(index - 1))
            end
        end
    end

    action NavigateRight
        if selection:IsEmpty()
            Select(GetStartNode())
            return now
        end

        FlowchartNode node = selection:GetNode()
        FlowchartArrow arrow = selection:GetArrow()
        if arrow = undefined
            // Left/Right navigation is only valid for top-level nodes. If this isn't one, return now.
            if node:GetInArrows():IsEmpty() = false
                return now
            end

            // In this case, find the next top-level node and jump to it.
            FlowchartNode target = undefined
            Array<Item2D> items = GetChildren()
            integer i = items:GetSize()
            repeat while i > 0
                i = i - 1
                if items:Get(i) is FlowchartNode
                    FlowchartNode current = cast(FlowchartNode, items:Get(i))
                    // If we've found the currently selected node, select the candidate if we found one already, otherwise bail.
                    if current = node
                        if target not= undefined
                            Select(target)
                        end
                        return now
                    end

                    // If this node has no inputs, it's a candidate. Store it.
                    if current:GetInArrows():IsEmpty()
                        target = current
                    end
                end
            end

        else
            // Find the previous arrow and select it, maintaining the same node.
            Array<FlowchartArrow> arrows = undefined
            if node = arrow:GetOrigin()
                arrows = node:GetOutArrows()
            else
                arrows = node:GetInArrows()
            end

            integer index = arrows:GetFirstLocation(arrow)
            if index < arrows:GetSize() - 1
                Select(node, arrows:Get(index + 1))
            end
        end
    end

    action NavigateDown
        if selection:IsEmpty()
            Select(GetStartNode())
            return now
        end

        FlowchartNode node = selection:GetNode()
        FlowchartArrow arrow = selection:GetArrow()
        if arrow = undefined
            Array<FlowchartArrow> arrows = node:GetOutArrows()
            if arrows:IsEmpty() = false
                Select(node, arrows:Get(0))
            end
        else
            if arrow:GetDestination() not= undefined
                Select(arrow:GetDestination())
            end
        end
    end

    action NavigateUp
        if selection:IsEmpty()
            Select(GetStartNode())
            return now
        end

        FlowchartNode node = selection:GetNode()
        FlowchartArrow arrow = selection:GetArrow()
        if arrow = undefined
            Array<FlowchartArrow> arrows = node:GetInArrows()
            if arrows:IsEmpty() = false
                Select(node, arrows:Get(0))
            end
        else
            if arrow:GetOrigin() not= undefined
                Select(arrow:GetOrigin())
            end
        end
    end

    /*
    This action returns the default color of arrows in this Flowchart.
    If this value is undefined, the color will be retrieved from the
    InterfaceOptions instead.
    Individual arrows can override this value.
    */
    action GetArrowColor returns ColorGroup
        return arrowColor
    end

    /*
    This action sets the default color of arrows in this Flowchart.
    If this value is undefined, the color will be retrieved from the
    InterfaceOptions instead.
    Individual arrows can override this value.
    */
    action SetArrowColor(ColorGroup arrowColor)
        me:arrowColor = arrowColor
    end

    /*
    This action returns the default color of arrow heads in this Flowchart.
    If this value is undefined, the color will be retrieved from the
    InterfaceOptions instead.
    Individual arrows can override this value.
    */
    action GetArrowHeadColor returns ColorGroup
        return arrowHeadColor
    end

    /*
    This action sets the default color of arrow heads in this Flowchart.
    If this value is undefined, the color will be retrieved from the
    InterfaceOptions instead.
    Individual arrows can override this value.
    */
    action SetArrowHeadColor(ColorGroup arrowHeadColor)
        me:arrowHeadColor = arrowHeadColor
    end

    action GetNodeSelectionColor returns ColorGroup
        return nodeSelectionColor
    end

    action SetNodeSelectionColor(ColorGroup nodeSelectionColor)
        me:nodeSelectionColor = nodeSelectionColor
    end

    action GetNodeSelectionBorderColor returns ColorGroup
        return nodeSelectionBorderColor
    end

    action SetNodeSelectionBorderColor(ColorGroup nodeSelectionBorderColor)
        me:nodeSelectionBorderColor = nodeSelectionBorderColor
    end

    action GetArrowSelectionColor returns ColorGroup
        return arrowSelectionColor
    end

    action SetArrowSelectionColor(ColorGroup arrowSelectionColor)
        me:arrowSelectionColor = arrowSelectionColor
    end

end