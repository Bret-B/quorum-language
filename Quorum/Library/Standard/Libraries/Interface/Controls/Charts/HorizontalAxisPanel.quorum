package Libraries.Interface.Controls.Charts

use Libraries.Interface.Controls.Control

use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Gradient
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.TextureRegion
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Label
use Libraries.System.File
use Libraries.Interface.Views.ImageControlView
use Libraries.Interface.Views.LabelBoxView
use Libraries.Interface.Views.ControlView
use Libraries.Interface.Views.View2D
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Controls.Icon
use Libraries.Containers.Array
use Libraries.Interface.Controls.ControlLabel
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Compute.Math
use Libraries.System.DateTime

/*
    This class represents the horizontal axis panel area on the charts.
    This class is not meant to be accessed by the user directly.
    All of its actions and components should only be controlled by the user
    through the Chart class.


    Attribute: Hannah Williams

    Attribute: Example

    use Libraries.Interface.Controls.Charts
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            BarChart chart
            chart:SetXAxisMinimum(-10)
            chart:SetXTickCount(5)
            chart:ShowXTicks(true)
            Add(chart)
        end
    end
*/

class HorizontalAxisPanel is Control
    ChartOptions options
    Math math
    private integer numberOfSections = 1
    private number paddingOffsetPercent = -1
    private number defaultPaddingOffsetPercent = 0
    private boolean blockPaddingOffset = false
    private boolean appendPercent = false

    // Title
    private integer titleFontSize = 0
    private text titleText = ""
    private ControlLabel title = undefined

    // Tick Labels
    private integer labelFontSize = 0
    private Array <text> textLabels = undefined
    private Array <ControlLabel> labels
    private integer labelRotation = 0
    private text numberformat = "integer"
    private boolean overrideDefaultNumberFormat = false
    private boolean numericalLabels = false
    private number sumOfLabelHeights = 0
    private number sumOfLabelWidths = 0
    private number labelMinimum = 0
    private integer labelCount = 0
    private ControlLabel longestLabel

    // Axis Drawables
    private Drawable axis = undefined
    private Array <Drawable> ticks
    private Array <Drawable> brackets
    private Array <Drawable> majorlines
    private Array <Drawable> minorlines
    private integer minorlinecount = 5
    private integer tickHeight = 15
    private integer tickWidth = 3
    private boolean showGroupBrackets = false
    private boolean showTicks = false
    private Color axisColor

    // Range controls
    private number min = 0.0
    private number max = 0.0
    private DateTime minDate = undefined
    private DateTime maxDate = undefined
    private integer tickCount = 0
    private number tickInterval = -1.0 //This is used for the numerical label spacing
    private integer intervaloverride = 1 //This is used for the text label spacing
    private boolean overrideDefaultMin = false
    private boolean overrideDefaultMax = false
    private boolean overrideDefaultTickCount = false
    private boolean overrideDefaultTickInterval = false

    on create
        ManualLayout layout
        SetLayout(layout)

        Color transparent
        transparent:SetColor(0,0,0,0)
        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetBackgroundColor(transparent)
        properties:SetBorderColor(transparent)
        properties:SetBorderThickness(4)
        Font font = GetDefaultFont()
        properties:SetFont(font)
        properties:SetFontSize(GetDefaultFontSize())
        SetName("x axis")
        axisColor = transparent:Copy() //Starts transparent, will be changed if axis is showing

        SetFocusable(true)
        SetAccessibilityCode(parent:Item:CUSTOM)
    end

    action IsAccessibleParent returns boolean
        return true
    end

    /*
        This is called by GenerateInfoTree to generate the summary that is heard when
        you first focus on the x-axis. Also the highest level of the information tree
        of  the chart.
    */
    private action GenerateSummary returns text
        if labels:GetSize() > 0
            if titleText not= ""
                SetName(titleText + " axis")
            end 
            if textLabels not= undefined
                if labels:GetSize() = 1
                    text list = "The label is " + labels:Get(labels:GetSize()-1):GetText()
                    SetDescription(" has " + textLabels:GetSize() + " text label. " + list)
                else
                    text list = "The labels are "
                    integer i = 0
                    repeat while i < labels:GetSize()-1
                        list = list + labels:Get(i):GetText() + ", "
                        i = i + 1
                    end
                    list = list + "and " + labels:Get(labels:GetSize()-1):GetText() + ". "
                    SetDescription(" has " + textLabels:GetSize() + " text labels. " + list)
                end
            else
                SetDescription(" ranges from " + labels:Get(0):GetText() + " to " + labels:Get(labels:GetSize()-1):GetText() + ". ")
            end
        end
        return GetDescription()
    end

    /*
        Generates the tree of ChartItems that define how the chart will be 
        navigated and what extra information might be sent to the screen reader.
        All of the chartItems that are descendants of this axis will be skipped in navigation
        if the axis is not showing.

        Attribute: Parameters include the ChartItems that the axis may be linked to if they are showing.
    */
    action GenerateInfoTree(Chart chart, ChartItem summary, ChartItem chartArea, ChartItem yAxis, ChartItem xAxis)
        xAxis:SetFocusTarget(me)
        xAxis:SetParent(summary)
        xAxis:SetDisplayName(GenerateSummary())
        xAxis:SetContainer(chart)

        chartArea:SetNext(xAxis)
        xAxis:SetPrevious(chartArea)
        if chart:IsShowingYAxis()
            xAxis:SetNext(yAxis)
            yAxis:SetPrevious(xAxis)
        else
            xAxis:SetNext(chartArea)   
            chartArea:SetPrevious(xAxis)   
        end   
        
        if not chart:IsSeparated()
            // Labels
            ChartItem firstLabel
            firstLabel:SetContainer(chart)
            if labels:GetSize() > 0
                xAxis:SetChild(firstLabel)
                firstLabel:SetParent(xAxis)
                firstLabel:SetFocusTarget(labels:Get(0))
            end
    
            i = 1
            ChartItem previousLabel = firstLabel
            repeat while i < labels:GetSize()
                ChartItem labelNode
                labelNode:SetContainer(chart)
                labelNode:SetParent(xAxis)
                labelNode:SetFocusTarget(labels:Get(i))
                previousLabel:SetNext(labelNode)
                labelNode:SetPrevious(previousLabel)
                previousLabel = labelNode
                i = i + 1
            end
            xAxis:SetLastChild(previousLabel)
        elseif chart:GetSubHorizontalPanels():GetSize() = 1
            Array<ControlLabel> labels = chart:GetSubHorizontalPanels():Get(0):GetLabels()
            SetDescription(chart:GetSubHorizontalPanels():Get(0):GenerateSummary())
            SetName(titleText + " axis, ")
            ChartItem firstLabel
            firstLabel:SetContainer(chart)
            if labels:GetSize() > 0
                xAxis:SetChild(firstLabel)
                firstLabel:SetParent(xAxis)
                firstLabel:SetFocusTarget(labels:Get(0))
            end
    
            i = 1
            ChartItem previousLabel = firstLabel
            repeat while i < labels:GetSize()
                ChartItem labelNode
                labelNode:SetContainer(chart)
                labelNode:SetParent(xAxis)
                labelNode:SetFocusTarget(labels:Get(i))
                previousLabel:SetNext(labelNode)
                labelNode:SetPrevious(previousLabel)
                previousLabel = labelNode
                i = i + 1
            end
            xAxis:SetLastChild(previousLabel)
        else
            //SubPanel axis
            ChartItem firstSubPanel
            xAxis:SetChild(firstSubPanel)
            firstSubPanel:SetParent(xAxis)
            firstSubPanel:SetContainer(chart)
            firstSubPanel:SetFocusTarget(chart:GetSubHorizontalPanels():Get(0))
            firstSubPanel:SetDisplayName(chart:GetSubHorizontalPanels():Get(0):GenerateSummary())
            chart:GetSubHorizontalPanels():Get(0):SetName("Sub " + titleText + " axis, ")
            chart:GetSubHorizontalPanels():Get(0):SetDescription(firstSubPanel:GetDisplayName() + " 1 of " + numberOfSections + " sub axes.")  
            Array<ControlLabel> labels = chart:GetSubHorizontalPanels():Get(0):GetLabels()
            if labels:GetSize() > 0
                ChartItem firstLabel
                firstLabel:SetContainer(chart)
                firstSubPanel:SetChild(firstLabel)
                firstLabel:SetParent(firstSubPanel)
                firstLabel:SetFocusTarget(labels:Get(0))
        
                j = 1
                ChartItem previousLabel = firstLabel
                repeat while j < labels:GetSize()
                    ChartItem labelNode
                    labelNode:SetContainer(chart)
                    labelNode:SetParent(firstSubPanel)
                    labelNode:SetFocusTarget(labels:Get(j))
                    previousLabel:SetNext(labelNode)
                    labelNode:SetPrevious(previousLabel)
                    previousLabel = labelNode
                    j = j + 1
                end
                firstSubPanel:SetLastChild(previousLabel)
            end
    
            i = 1
            ChartItem previousSubPanel = firstSubPanel
            repeat while i < chart:GetSubHorizontalPanels():GetSize()
                ChartItem currentSubPanel
                currentSubPanel:SetContainer(chart)
                currentSubPanel:SetParent(xAxis)
                currentSubPanel:SetFocusTarget(chart:GetSubHorizontalPanels():Get(i))
                currentSubPanel:SetDisplayName(chart:GetSubHorizontalPanels():Get(i):GenerateSummary())
                chart:GetSubHorizontalPanels():Get(i):SetName("Sub " + titleText + " axis, ")
                chart:GetSubHorizontalPanels():Get(i):SetDescription(currentSubPanel:GetDisplayName() + " " + (i+1) + " of " + numberOfSections + " sub axes.")
                previousSubPanel:SetNext(currentSubPanel)
                currentSubPanel:SetPrevious(previousSubPanel)
                previousSubPanel = currentSubPanel

                labels = chart:GetSubHorizontalPanels():Get(i):GetLabels()
                if labels:GetSize() > 0
                    ChartItem firstLabel
                    firstLabel:SetContainer(chart)
                    currentSubPanel:SetChild(firstLabel)
                    firstLabel:SetParent(currentSubPanel)
                    firstLabel:SetFocusTarget(labels:Get(0))
        
                    j = 1
                    ChartItem previousLabel = firstLabel
                    repeat while j < labels:GetSize()
                        ChartItem labelNode
                        labelNode:SetContainer(chart)
                        labelNode:SetParent(currentSubPanel)
                        labelNode:SetFocusTarget(labels:Get(j))
                        previousLabel:SetNext(labelNode)
                        labelNode:SetPrevious(previousLabel)
                        previousLabel = labelNode
                        j = j + 1
                    end
                    currentSubPanel:SetLastChild(previousLabel)
                end
    
                i = i + 1
            end
            xAxis:SetLastChild(previousSubPanel)
            SetName(titleText + " axis, ")
            SetDescription(" with " + chart:GetSubHorizontalPanels():GetSize() + " sub axes")
        end
    end

    /*
        This action is used to load the graphical components of the Control. This is
        handled automatically by the Game engine as needed, and most users shouldn't
        need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        if properties = undefined
            return now
        end
        parent:Control:LoadGraphics(properties)
    end

    /*
        This action is used to load the axis panel contents to the chart. 
        It is used by the LoadGraphics action in the parent Chart. This is
        handled automatically by the Game engine as needed, and most users shouldn't
        need to use this action directly.
    */
    action LoadAxis(Chart chart, LayoutProperties properties)
        DisposeDrawables()
        if properties = undefined
            return now
        end

        if GetTitleLabel() = undefined 
            Item2D labelAnchor
            ControlLabel newLabel
            SetTitleLabel(newLabel)
            newLabel:SetText(GetTitleText())
            newLabel:SetName(GetTitleText())
            newLabel:SetDescription("Horizontal axis")
            newLabel:SetFocusable(true)
            newLabel:SetAccessibilityCode(parent:Item:ITEM)
            labelAnchor:Add(GetTitleLabel())
            Add(labelAnchor)
        end

        if GetAxis() = undefined
            Drawable line
            SetAxis(line)
            chart:GetChartArea():Add(line)
        end

        if UseIntegers()
            if textLabels not= undefined and numericalLabels
                ChangeOverrideLabelsToIntegers()
            end
        end

        if textLabels not= undefined
            min = 0
            max = textLabels:GetSize()-1
        end

        LoadAxisLabels(chart)
    end

    /*
        This action is used to load the labels, gridlines and ticks into the correct chart area. 
        This is handled automatically by the Game engine as needed, and most users shouldn't
        need to use this action directly.

        Attribute: Parameter is Chart object that the axis will be added to.
    */
    private action LoadAxisLabels(Chart chart)
        number scaleWidth = CalculateScaleWidth()
        labelCount = 0

        if not blockPaddingOffset
            defaultPaddingOffsetPercent = 0.5/tickCount
        end
        
        integer k = 0
        repeat while k < numberOfSections
            HorizontalAxisPanel subPanel = undefined
            if chart:GetNumberOfChartAreas() > 1 and k < chart:GetSubHorizontalPanels():GetSize()
                subPanel = chart:GetSubHorizontalPanels():Get(k)
                Add(subPanel)
            end
            number scaleNum = min

            Array<Drawable> theTicks
            Array<Drawable> theBrackets
            Array<ControlLabel> theLabels
            Array<Drawable> theMajorLines
            Array<Drawable> theMinorLines

            integer i = 0
            repeat while i < tickCount
                Drawable tick
                theTicks:Add(tick)
                tick:SetName("X Tick " + (i + 1))
    
                Drawable left
                theBrackets:Add(left)

                Drawable floor
                theBrackets:Add(floor)

                Drawable right
                theBrackets:Add(right)

                Item2D labelAnchor
                ControlLabel label
                label:SetFontSize(GetFontSize() - 5)
                label:SetFocusable(true)
                label:SetAccessibilityCode(parent:Item:ITEM)
                theLabels:Add(label)
                labelAnchor:Add(label)
                labelCount = labelCount + 1

                if i = 0
                    longestLabel = label
                end
            
                //make the labels for each scale tick (auto based on max)
                text scaleText = ""
                if textLabels = undefined
                    if minDate = undefined
                        scaleText = "" + math:Round(scaleNum, options:GetTickDigits())
                        if UseIntegers()
                            scaleText = "" + cast(integer, math:Round(scaleNum, options:GetTickDigits()))
                        end   
                        if appendPercent
                            scaleText = scaleText + "%"
                        end
                        label:SetDescription(" label. ")
                    else
                        // I have to add then subtract days as a hack since I cannot copy DateTime objects.
                        minDate:AddDays(cast(integer, scaleNum))
                        scaleText = minDate:GetMonth() + "/" + minDate:GetDayOfMonth() + "/" + minDate:GetYear()
                        minDate:SubtractDays(cast(integer, scaleNum))   
                    end
                else
                    scaleText = textLabels:Get((cast(integer, i*intervaloverride) mod textLabels:GetSize()))
                    label:SetDescription(", " + (i+1) + " of " + tickCount + " labels.")
                end
                label:SetText(scaleText)
                label:SetName(scaleText)
                number labelHeight = label:GetHeight()
                number labelWidth = label:GetWidth()
                if labelWidth > longestLabel:GetWidth()
                    longestLabel = label
                end
                sumOfLabelHeights = sumOfLabelHeights + labelHeight
                sumOfLabelWidths = sumOfLabelWidths + labelWidth
                scaleNum = scaleNum + scaleWidth

                if subPanel = undefined
                    Add(tick)
                    Add(left)
                    Add(floor)
                    Add(right)
                    Add(labelAnchor)
                else
                    subPanel:Add(tick)
                    subPanel:Add(left)
                    subPanel:Add(floor)
                    subPanel:Add(right)
                    subPanel:Add(labelAnchor)
                end

                if chart:IsShowingMajorXGridLines()
                    if subPanel = undefined
                        Drawable gridline
                        theMajorLines:Add(gridline)
                        chart:GetChartArea():Add(gridline)
                    else
                        integer verticalSections = chart:GetVerticalPanel():GetNumberOfSections()
                        integer m = 0
                        repeat while m < verticalSections
                            Drawable gridline
                            theMajorLines:Add(gridline)
                            chart:GetSubChartAreas():Get(m + k*verticalSections):Add(gridline)
                            m = m + 1
                        end
                    end
                end
                if chart:IsShowingMinorXGridLines()
                    if subPanel = undefined
                        integer j = 0
                        repeat while j < minorlinecount
                            Drawable gridline
                            theMinorLines:Add(gridline)
                            chart:GetChartArea():Add(gridline)
                            j = j + 1
                        end
                    else
                        integer verticalSections = chart:GetVerticalPanel():GetNumberOfSections()
                        integer m = 0
                        repeat while m < verticalSections
                            integer j = 0
                            repeat while j < minorlinecount
                                Drawable gridline
                                theMinorLines:Add(gridline)
                                chart:GetSubChartAreas():Get(m + k*verticalSections):Add(gridline)
                                j = j + 1
                            end
                            m = m + 1
                        end
                    end
                end
                i = i + intervaloverride
            end
            if subPanel = undefined
                ticks = theTicks:CopyToArray()
                brackets = theBrackets:CopyToArray()
                labels = theLabels:CopyToArray()
                majorlines = theMajorLines:CopyToArray()
                minorlines = theMinorLines:CopyToArray()
            else
                subPanel:SetTicks(theTicks:CopyToArray())
                subPanel:SetBrackets(theBrackets:CopyToArray())
                subPanel:SetLabels(theLabels:CopyToArray())
                subPanel:SetMajorGridlines(theMajorLines:CopyToArray())
                subPanel:SetMinorGridlines(theMinorLines:CopyToArray())
            end
            k = k + 1
        end
    end

    /*
        This action is used by LoadAxisLabels to calculate an aesthetically pleasing, easy-to-read interval, min and max.
        These default calculations can be overridden by manually setting the min, max, interval, or tickcount.
        The default number display for a label will be an integer if possible, but can be manually set to a number format.
        If the labels are text labels the interval will be 1.
        Example:

        DataFrame frame
        frame:Load("../Data.csv")
        frame:AddSelectedColumns("Information")
        LineChart chart = frame:LineChart()
        chart:SetXTickInterval(75)
        chart:SetXTickCount(10)
        chart:SetXAxisMinimum(-10)
        chart:SetXAxisMaximum(750)
        chart:SetXAxisNumberFormat("number")
        chart:Display()

        Attribute: Returns the interval between tick marks.
    */
    private action CalculateScaleWidth returns number
        number range = max-min
        number scaleWidth = 0.0

        // Numerical scale (number intervals)
        if textLabels = undefined
            if overrideDefaultTickCount
                //Override only the tick count.
                if tickCount < 2
                    tickCount = 5
                end
                scaleWidth = math:Round(range / cast(number, tickCount-1),2)
            elseif overrideDefaultMin and overrideDefaultMax
                if overrideDefaultTickInterval
                    scaleWidth = tickInterval
                    tickCount = cast(integer, math:Ceiling(range / scaleWidth)) + 1
                else
                    if tickCount < 2
                        tickCount = 5
                    end
                    scaleWidth = math:Round(range / cast(number, tickCount-1),2)
                end
            elseif overrideDefaultMin
                //Override the min or the min and interval
                if overrideDefaultTickInterval
                    scaleWidth = tickInterval
                else
                    scaleWidth = CalculateBestIntervalForRange(range)
                end
                if scaleWidth not= 1.0
                    number minValue = min
                    number maxValue = math:Ceiling(max)
                    number modResult = (maxValue - minValue) mod scaleWidth
                    if modResult not= 0 
                        if modResult > 0
                            maxValue = maxValue + (scaleWidth - modResult)
                        else
                            maxValue = maxValue - modResult
                        end
                    end
                    max = maxValue
                    range = max - min
                    tickCount = cast(integer, range / scaleWidth) + 1
                else
                    range = max - min
                    tickCount = cast(integer, range) + 1
                end
            elseif overrideDefaultMax
                //Override the max or the max and interval
                if overrideDefaultTickInterval
                    scaleWidth = tickInterval
                else
                    scaleWidth = CalculateBestIntervalForRange(range)
                end
                if scaleWidth not= 1.0
                    number minValue = math:Floor(min)
                    number maxValue = max
                    number modResult = (maxValue - minValue) mod scaleWidth
                    if modResult not= 0 
                        if modResult > 0
                            minValue = minValue - (scaleWidth - modResult)
                        else
                            minValue = minValue - modResult
                        end
                    end
                    min = minValue
                    range = max - min
                    tickCount = cast(integer, range / scaleWidth) + 1
                else
                    range = max - min
                    tickCount = cast(integer, range) + 1
                end
            else
                if overrideDefaultTickInterval
                    scaleWidth = tickInterval
                else
                    scaleWidth = CalculateBestIntervalForRange(range)
                end
                RunDefault(scaleWidth)
            end
            
        // Text scale (integer intervals only)
        else
            tickCount = textLabels:GetSize()
            if tickCount > 1
                scaleWidth = cast(integer, range / (tickCount - 1))
            else
                scaleWidth = cast(integer, range / 1)
            end
        end

        if not overrideDefaultNumberFormat
            if CheckIfInteger(scaleWidth) and CheckIfInteger(min) and CheckIfInteger(max) 
                numberformat = "integer"
            else
                numberformat = "number"
            end
        end
        return scaleWidth
    end

    /*
        RunDefault is a supplemental action used in CalculateScaleWidth that will set
        the min, max and tick count that best shows the data. This action will not be 
        used if the user has set their own min, max or tickcount.

        In short, this will round the min down to the next divisor of the interval 
        while max will round up to the next divisor of the interval.
        After the default min and max are set then the tickCount will get set to divide
        the whole range by the interval.

        Attribute: Takes a number scaleWidth which is the interval between ticks.
    */
    private action RunDefault(number scaleWidth)
        if scaleWidth not= 1
            number minValue = math:Floor(min)
            number modResult = minValue mod scaleWidth
            if modResult not= 0
                if modResult > 0
                    minValue = minValue - modResult
                else
                    minValue = minValue - (scaleWidth + modResult)
                end
            end
            min = minValue

            number maxValue = math:Ceiling(max)
            modResult = maxValue mod scaleWidth
            if modResult not= 0
                if modResult > 0
                    maxValue = maxValue + (scaleWidth - modResult)
                else
                    maxValue = maxValue - modResult
                end
            else
                maxValue = maxValue + scaleWidth //If the max value lands directly on the top add another interval
            end
            max = maxValue
            
            range = max - min
            tickCount = cast(integer, math:Round(range / scaleWidth)) + 1
        else
            range = max - min
            tickCount = cast(integer, range) + 1
        end
    end

    /*
        CalculateBestIntervalForRange takes a range of data and returns a decent 
        interval, this is only the default. The user can choose any interval they 
        wish and set it manually. This action will not be used if the user set 
        their own interval or tickcount.

        Attribute: Takes a range, and returns a reasonable interval.
    */
    private action CalculateBestIntervalForRange(number range) returns number
        number tickSkips = 0
        if range <= 2.5
            if range > 1.5
                tickSkips = 0.5
            else
                tickSkips = 0.1
            end
        else //I'm sure a better way to set the default intervals can be produced.
            if range > 1000000
                tickSkips = 500000
            elseif range > 250000
                tickSkips = 50000
            elseif range > 50000
                tickSkips = 10000
            elseif range > 25000
                tickSkips = 10000
            elseif range > 10000
                tickSkips = 5000
            elseif range > 5000
                tickSkips = 1000
            elseif range > 2500
                tickSkips = 500
            elseif range > 1000
                tickSkips = 250
            elseif range > 500
                tickSkips = 100
            elseif range > 200
                tickSkips = 50
            elseif range > 100
                tickSkips = 20
            elseif range > 50
                tickSkips = 10
            elseif range > 20
                tickSkips = 5
            elseif range > 10
                tickSkips = 2
            else
                tickSkips = 1
            end
        end
        return tickSkips
    end

    /*
        DisposeDrawables destroys the previous drawables as to avoid duplicates with 
        the axis is resized and redrawn. It is called in LoadAxis before any new items
        are added to the panel.
    */
    private action DisposeDrawables
        if title not= undefined
            title:Dispose()
            Remove(title)
            title = undefined
        end

        if axis not= undefined
            axis:Dispose()
            Remove(axis)
            axis = undefined
        end

        if not ticks:IsEmpty()
            Drawable temp = undefined
            integer i = 0
            repeat while i < ticks:GetSize()
                temp = ticks:Get(i)
                if temp not= undefined
                    temp:Dispose()
                    Remove(temp)
                    temp = undefined
                end
                i = i + 1
            end
            ticks:Empty()
        end

        if not brackets:IsEmpty()
            Drawable temp = undefined
            integer i = 0
            repeat while i < brackets:GetSize()
                temp = brackets:Get(i)
                if temp not= undefined
                    temp:Dispose()
                    Remove(temp)
                    temp = undefined
                end
                i = i + 1
            end
            brackets:Empty()
        end

        if not majorlines:IsEmpty()
            Drawable temp = undefined
            integer i = 0
            repeat while i < majorlines:GetSize()
                temp = majorlines:Get(i)
                if temp not= undefined
                    temp:Dispose()
                    Remove(temp)
                    temp = undefined
                end
                i = i + 1
            end
            majorlines:Empty()
        end

        if not minorlines:IsEmpty()
            Drawable temp = undefined
            integer i = 0
            repeat while i < minorlines:GetSize()
                temp = minorlines:Get(i)
                if temp not= undefined
                    temp:Dispose()
                    Remove(temp)
                    temp = undefined
                end
                i = i + 1
            end
            minorlines:Empty()
        end

        if not labels:IsEmpty()
            ControlLabel temp = undefined
            integer i = 0
            repeat while i < labels:GetSize()
                temp = labels:Get(i)
                if temp not= undefined
                    temp:Dispose()
                    Remove(temp)
                    temp = undefined
                end
                i = i + 1
            end
            labels:Empty()
        end
        Empty()
    end


    /*
        These actions control the title on the axis.
    
        Attribute: Label for horizontal panel.
    */

    action GetTitleFontSize returns integer
        return titleFontSize
    end

    action SetTitleFontSize(integer size)
        titleFontSize = size
    end

    action SetTitleLabel(ControlLabel title)
        me:title = title
    end

    action SetTitleText(text name)
        titleText = name
    end    

    action GetTitleLabel() returns ControlLabel
        return title
    end

    action GetTitleText() returns text
        return titleText
    end

    action SetName(text name)
        parent:Item2D:SetName(name)
        
        LayoutProperties defaultProperties = GetDefaultLayoutProperties()

        if defaultProperties not= undefined
            defaultProperties:SetLabelText(name)
        end
        if GetView2D() is ControlView
            ControlView content = cast(ControlView, GetView2D())
            content:SetText(name)
        end
    end

    /*
        These actions get and set the tick width.
    */
    action GetTickWidth returns integer
        return tickWidth
    end

    action SetTickWidth(integer tickWidth)
        me:tickWidth = tickWidth
    end

    /*
        These actions get and set the tick height.
    */
    action GetTickHeight returns integer
        return tickHeight
    end

    action SetTickHeight(integer tickHeight)
        me:tickHeight = tickHeight
    end

    /*
        This action is used by the layout to position the graphical components of 
        the Chart. Layout is handled automatically so users don't need to use this
        action directly.
    
        Attribute: Arrays of major and minor gridlines and number of minor gridlines
    */
    action GetMinorGridlineCount returns integer
        return minorlinecount
    end

    action SetMinorGridlineCount(integer count)
        minorlinecount = count
    end

    action SetMinorGridlines(Array<Drawable> minorlines)
        me:minorlines = minorlines
    end

    action GetMinorGridlines returns Array<Drawable>
        return minorlines
    end

    action SetMajorGridlines(Array<Drawable> majorlines)
        me:majorlines = majorlines
    end

    action GetMajorGridlines returns Array<Drawable>
        return majorlines
    end

    action SetTicks(Array<Drawable> ticks)
        me:ticks = ticks
    end

    action GetTicks returns Array<Drawable>
        return ticks
    end

    action SetTickCount(integer ticks)
        if textLabels = undefined
            if ticks > 1
                tickCount = ticks
            end
        end
    end

    action OverrideDefaultTickCount(boolean flag)
        overrideDefaultTickCount = flag
    end

    action GetOverrideDefaultTickCount returns boolean
        return overrideDefaultTickCount
    end

    action GetTickCount() returns integer
        return tickCount
    end

    action SetTickInterval(number set)
        if set > 0
            tickInterval = set
            if textLabels not= undefined and set >= 1
                intervaloverride = cast(integer, set)
            end
        end
    end

    action OverrideDefaultInterval(boolean flag)
        overrideDefaultTickInterval = flag
    end

    action GetOverrideDefaultInterval returns boolean
        return overrideDefaultTickInterval
    end

    action GetTickInterval() returns number
        return tickInterval
    end

    action GetIntervalOverride() returns integer
        return intervaloverride
    end

    action GetLabels returns Array<ControlLabel>
        return labels
    end

    action SetLabels(Array<ControlLabel> newLabels)
        labels = newLabels
    end

    action GetLabelCount returns integer
        return labelCount
    end

    action GetLongestLabel returns ControlLabel
        return longestLabel
    end

    action SetLabelMinimum(number labelMin)
        me:labelMinimum = labelMin
    end

    action GetLabelMinimum returns number
        return labelMinimum
    end

    action GetLabelFontSize returns integer
        return labelFontSize
    end

    action SetLabelFontSize(integer size)
        labelFontSize = size
    end

    action GetSumOfLabelWidths returns number
        return sumOfLabelWidths
    end

    action SetSumOfLabelWidths(number newSum)
        sumOfLabelWidths = newSum
    end

    action GetSumOfLabelHeights returns number
        return sumOfLabelHeights
    end

    action SetSumOfLabelHeights(number newSum)
        sumOfLabelHeights = newSum
    end

    action SetTextLabels(Array <text> textLabels)
        me:textLabels = textLabels
    end  

    action GetTextLabels() returns Array <text>
        return textLabels
    end  

    action UseTextLabelOverride() returns boolean
        if textLabels = undefined
            return false
        else
            return true
        end
    end  

    private action ChangeOverrideLabelsToIntegers()
        integer i = 0
        repeat while i < textLabels:GetSize()
            number value = cast(number, textLabels:Get(i))
            if CheckIfInteger(value)
                integer val = cast(integer, value)
                textLabels:Set(i, cast(text, val))
            end
            i = i + 1
        end
    end

    private action ChangeOverrideLabelsToNumbers()
        integer i = 0
        repeat while i < textLabels:GetSize()
            number value = cast(number, textLabels:Get(i))
            textLabels:Set(i, cast(text, value))
            i = i + 1
        end
    end

    action NumericalOverrideLabels(boolean flag)
        numericalLabels = flag
    end

    action NumericalOverrideLabels() returns boolean
        return numericalLabels
    end

    /*
        These actions control whether decimal numbers or integers are shown
        along the x-axis (if the axis is numerical not text)
        All values are stored in number format but can be 
        read or used as integer format if UseInteger() returns true.
    
        Attribute: Text that is either "integer" or "number"
    */
    action SetNumberFormat(text format)
        numberformat = format

        if textLabels not= undefined and numericalLabels 
            if numberformat = "number"            
                ChangeOverrideLabelsToNumbers()
            end
            if numberformat = "integer"
                ChangeOverrideLabelsToIntegers()
            end
        end
        overrideDefaultNumberFormat = true
    end

    action GetNumberFormat() returns text
        return numberformat
    end

    // This action is used for a number scale axis not a text axis.
    private action UseIntegers() returns boolean
        if numberformat = "integer"
            return true
        else
            return false
        end
    end
    
    private action CheckIfInteger(number value) returns boolean
        return (cast(integer, value) = value)
    end

    /*
        These actions control the minimum and maximum horizontal scale.
        These values are used in all charts regardless if axis is showing 
        or not in order to scale the items to the right location.
    */
    action GetMinimum returns number
        return min
    end

    action GetMaximum returns number
        return max
    end

    action SetMinimum(number min)
        me:min = min      
    end

    action SetMaximum(number max)
        me:max = max 
    end

    action SetMinimumDate(DateTime min)
        me:minDate = min
    end

    action SetMaximumDate(DateTime max)
        me:maxDate = max
    end

    action GetMinimumDate returns DateTime
        return minDate
    end

    action GetMaximumDate returns DateTime
        return maxDate
    end


    /*
        This action is used by the layout to position the graphical components of 
        the Chart. Layout is handled automatically so users don't need to use this
        action directly.
    */
    action GetAxis returns Drawable
        return axis
    end

    action SetAxis(Drawable line)
        axis = line
    end

    action SetAxisColor(Color axisColor)
        me:axisColor = axisColor
    end

    action GetAxisColor returns Color
        return axisColor
    end

    action SetBrackets(Array <Drawable> brackets)
        me:brackets = brackets
    end

    action GetBrackets returns Array <Drawable>
        return brackets
    end

    action ShowGroupBrackets returns boolean
        return showGroupBrackets
    end

    action ShowGroupBrackets(boolean show)
        if textLabels not= undefined
            me:showGroupBrackets = show
        end
    end

    action ShowTicks returns boolean
        return showTicks
    end

    action ShowTicks(boolean show)
        showTicks = show
    end

    action OverrideDefaultMin returns boolean
        return overrideDefaultMin
    end

    action OverrideDefaultMax returns boolean
        return overrideDefaultMax
    end

    action OverrideDefaultMin(boolean flag)
        me:overrideDefaultMin = flag
    end

    action OverrideDefaultMax(boolean flag)
        me:overrideDefaultMax = flag
    end

    action UsePercent returns boolean
        return appendPercent
    end

    action UsePercent(boolean flag)
        appendPercent = flag
    end

    action GetNumberOfSections returns integer
        return numberOfSections
    end

    action SplitIntoSections(integer numberOfSections)
        me:numberOfSections = numberOfSections
    end
    action SetLabelRotation(integer labelRotation)
        me:labelRotation = labelRotation
    end

    action GetLabelRotation returns integer
        return labelRotation
    end

    action SetPaddingOffset(number paddingOffset)
        if paddingOffset >= 0
            me:paddingOffsetPercent = paddingOffset
        end
    end

    action GetPaddingOffset returns number
        if blockPaddingOffset
            return 0
        else
            if paddingOffsetPercent >= 0
                return paddingOffsetPercent
            else
                return defaultPaddingOffsetPercent
            end
        end
    end

    action BlockPaddingOffset(boolean flag)
        blockPaddingOffset = flag
    end

    action SetTickDigits(integer digits)
        options:SetTickDigits(digits)
    end
end