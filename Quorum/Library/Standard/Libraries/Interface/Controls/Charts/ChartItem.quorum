package Libraries.Interface.Controls.Charts

use Libraries.Interface.Item
use Libraries.Interface.Controls.Control
use Libraries.Interface.Events.FocusEvent

/*
    This class represents one region inside of a chart. This can be anything, 
    from a region that contains data points to a broader summary of the chart itself. 
    This item should not be used itself, except when obtaining information from a chart.
*/
class ChartItem is Control

    public constant integer LEFT = 0
    public constant integer RIGHT = 1
    public constant integer UP = 2
    public constant integer DOWN = 3
    public constant integer ENTER = 4
    public constant integer ESCAPE = 5

    text information = ""
    Chart container = undefined

    ChartItem leftItem = undefined
    ChartItem rightItem = undefined
    ChartItem upItem = undefined
    ChartItem downItem = undefined
    ChartItem enterItem = undefined
    ChartItem escapeItem = undefined

    ChartOptions options

    boolean escapeToLastItem = false
    boolean passThroughSelection = false

    /*
        This action sets the display name of the chart item. 
        
    */
    action SetDisplayName(text info)
        information = info
    end

    /*
        This action obtains the displayable name for this region of the chart. 
        Attribute: Returns the display name
    */
    action GetDisplayName returns text
        return information
    end

    action GainedSelection
        if GetContainer() not= undefined
            GetContainer():OnSelectionChange(me)
        end
        parent:Control:GainedSelection()
    end

    action LostSelection
        if GetContainer() not= undefined
            GetContainer():LostSelection(me)
        end
        parent:Control:LostSelection()
    end

    action GetContainer returns Chart
        return container
    end

    action SetContainer(Chart container)
        me:container = container
    end

    /*
    Returns the Item accessed to the left of this Item in the chart selection.
    */
    action GetLeftItem returns ChartItem
        return leftItem
    end

    /*
    Sets the Item accessed to the left of this Item in the chart selection.
    */
    action SetLeftItem(ChartItem leftItem)
        me:leftItem = leftItem
    end

    /*
    Returns the Item accessed to the right of this Item in the chart selection.
    */
    action GetRightItem returns ChartItem
        return rightItem
    end

    /*
    Sets the Item accessed to the right of this Item in the chart selection.
    */
    action SetRightItem(ChartItem rightItem)
        me:rightItem = rightItem
    end

    /*
    Returns the Item accessed "above" (via the UP arrow) this Item in the chart selection.
    */
    action GetUpItem returns ChartItem
        return upItem
    end

    /*
    Sets the Item accessed "above" (via the UP arrow) this Item in the chart selection.
    */
    action SetUpItem(ChartItem upItem)
        me:upItem = upItem
    end

    /*
    Returns the Item accessed "below" (via the DOWN arrow) this Item in the chart selection.
    */
    action GetDownItem returns ChartItem
        return downItem
    end

    /*
    Sets the Item accessed "below" (via the DOWN arrow) this Item in the chart selection.
    */
    action SetDownItem(ChartItem downItem)
        me:downItem = downItem
    end

    /*
    Returns the Item accessed within (default: ENTER key) this Item in the chart selection.
    */
    action GetEnterItem returns ChartItem
        return enterItem
    end

    /*
    Sets the Item accessed within (default: ENTER key) this Item in the chart selection.
    */
    action SetEnterItem(ChartItem enterItem)
        me:enterItem = enterItem
    end

    /*
    Returns the escape Item accessed from this Item in the chart selection (by default using the ESCAPE key).
    */
    action GetEscapeItem returns ChartItem
        return escapeItem
    end

    /*
    Sets the escape Item accessed from this Item in the chart selection (by default using the ESCAPE key).
    */
    action SetEscapeItem(ChartItem escapeItem)
        me:escapeItem = escapeItem
    end

    /*
    This action enables or disables escape to last item functionality. If enabled, this object's Escape Item will
    be the last ChartItem that accessed this Item via the Enter key. That means that if this is enabled, the escape
    item will be dynamically adjusted, instead of a static value.
    */
    action SetEscapeToLastItem(boolean escape)
        escapeToLastItem = escape
    end

    action IsEscapingToLastItem returns boolean
        return escapeToLastItem
    end

    action IsPassingThroughSelection returns boolean
        return passThroughSelection
    end

    /*
    If pass through selection is enabled, attempting to enter or escape into this item will
    instead try to pass the selection through to the following enter/escape item.
    */
    action SetPassThroughSelection(boolean passThroughSelection)
        me:passThroughSelection = passThroughSelection
    end

    /*
    This action indicates if this Control has special behavior when asked to navigate in
    a specific direction. The parameter should be one of ChartItem's navigation constants,
    e.g. UP, DOWN, ENTER, etc.

    By default this always returns false, but some classes may override this with different
    values.
    */
    action HasSpecialNavigation(integer navigationType) returns boolean
        return false
    end

    /*
    This action triggers special navigation behavior in the specified navigation direction. 
    This behavior overrides the typical navigation provided by the chart. This will only be
    called by the Chart if the HasSpecialNavigation action returns true for the provided
    parameter.

    By default this does nothing, but some classes may override this with custom behavior.
    */
    action DoSpecialNavigation(integer navigationType)
        // Do nothing. Other classes may override this to do something.
    end

end