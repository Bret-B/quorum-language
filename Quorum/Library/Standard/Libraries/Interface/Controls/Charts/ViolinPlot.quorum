package Libraries.Interface.Controls.Charts

use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Layouts.ViolinPlotLayout
use Libraries.Interface.Selections.ChartSelection
use Libraries.Interface.Item
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Color
use Libraries.Interface.Controls.Icon
use Libraries.Interface.Controls.ControlLabel
use Libraries.Containers.Array
use Libraries.Compute.Math
use Libraries.Compute.Vector
use Libraries.Compute.Statistics.Analysis.UnivariateAction
use Libraries.Compute.Statistics.WindowingActions.NormalDistributionAction
use Libraries.Interface.Controls.Charts.ViolinPlotWriter
use Libraries.Game.Graphics.ColorGroup
use Libraries.Interface.Views.LabelBoxView
use Libraries.Game.Graphics.Gradient

/*
    Attribute: Author Silafu Yiliyaer
    Attribute: Example

    Attribute: Example
    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.ViolinPlot
    
    DataFrame frame
    frame:Load("Data.csv")
    frame:AddSelectedColumn(1)
    ViolinPlot chart = frame:ViolinPlot()
    chart:SetTitle("My Awesome Title")
    chart:SetXAxisTitle("Time")
    chart:Display()
*/

class ViolinPlot is Chart
    // The root ChartItem.
    private ChartItem summary

    //bandWidth is a scale option for distribution graph
    //the bigger the value, the flatter the distribution graph will be
    private integer bandWidth = 0


    UnivariateAction windowingAction = undefined

    // The series of the plot. Only used when a factor is used
    Array<Series> seriesList
    Array<PlotGroup> plotGroups

    Color highlightColor = undefined
    ColorGroup previousColorGroup = undefined
    Color previousColor = undefined
    
    ChartOptions options
    Math math

    boolean hasGroups = true
    boolean splitPlot = false

    on create
        ViolinPlotLayout layout
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:MAINTAIN_ASPECT_RATIO)
        properties:SetVerticalLayoutMode(properties:STANDARD)

        Font font 
        font:LoadFont("Arial")
        properties:SetFont(font)
        properties:SetFontSize(16)

        Color color
        Gradient gradient
        Color gray = color:LightGray()
        Color lightGray = color:CustomColor(0.9, 0.9, 0.9, 1)
        gradient:Set(gray, gray, lightGray, lightGray)

        properties:SetBackgroundColor(gradient)
        properties:SetBorderColor(color:Black())
        properties:SetBorderThickness(2)
        SetName("Violin Plot")

        SetInputGroup("Chart")
        SetFocusable(true)
        SetAccessibilityCode(parent:Item:ITEM)

        NormalDistributionAction window
        windowingAction = window
    end

    /*
    This is called by GenerateInfoTree to generate the summary that is heard when
    you first focus on the chart. Also the highest level of the information tree
    of  the chart.
    */
    action GenerateSummary returns text
        text lineText = "Groups"
        text plotText = "violin plots"
        if GetGroupPanels():GetSize() = 1
            linetext = "Group"
            plotText = "violin plot"
        end
        if hasGroups
            SetDescription(" with " + GetGroupPanels():GetSize() + " " + lineText 
            + ". " + "Use the arrow keys to navigate the chart.")
        else
            SetDescription(" with " + GetGroupPanels():GetSize() + " " + plotText 
            + ". " + "Use the arrow keys to navigate the chart.")
        end
        return GetDescription()
    end


    action DisposeDrawables
        parent:Chart:DisposeDrawables()
        Control chartArea = me:GetChartArea()
        integer i = 0
        repeat while i < plotGroups:GetSize()
            integer j = 0
            repeat while j < plotGroups:Get(i):GetSize()
                Array<Drawable> items = plotGroups:Get(i):Get(j):GetItems()
                integer k = 0
                repeat while k < items:GetSize()
                    if items:Get(k) not= undefined
                        Drawable target = items:Get(k)
                        target:Dispose()
                        chartArea:Remove(target)
                    end
                    k = k + 1
                end
                items:Empty()
                j = j + 1
            end
            if plotGroups:Get(i):GetItem() not= undefined
                Drawable target = plotGroups:Get(i):GetItem()
                target:Dispose()
                chartArea:Remove(target)
            end
            i = i + 1
        end
    end

    action LoadGraphics(LayoutProperties properties)
        DisposeDrawables()
        parent:Chart:LoadGraphics(properties)
        if properties = undefined
            return now
        end

        Control chartArea = GetChartArea()

        if GetHighlightColor() = undefined
            SetHighlightColor(options:GetSelectionColor())
        end

        if GetDefaultOrientation() = undefined
            SetDefaultOrientation("vertical")
        end

        // Add drawables for each plot to the chart
        integer i = 0
        repeat while i < plotGroups:GetSize()
            PlotGroup group = plotGroups:Get(i)
            integer k = 0
            repeat while k < group:GetSize()
                Plot plot = group:Get(k)
                number median = plot:GetInfoAt(0)
                number firstQ = plot:GetInfoAt(1)
                number thirdQ = plot:GetInfoAt(2)
                number minimum = plot:GetInfoAt(3)
                number maximum = plot:GetInfoAt(4)
                number iqr = thirdQ - firstQ

                // Minimum Line 
                Drawable minimumLine
                minimumLine:SetName("The minimum value is " + minimum + " ")
                minimumLine:SetDescription("Minimum")
                minimumLine:SetFocusable(true)
                minimumLine:SetAccessibilityCode(0)
                // Lower Whisker Line
                Drawable lowerWhisker
                // Interquartile Range Region Area
                Drawable interQuartileRange
                interQuartileRange:SetName("The Interquartile range of is " + iqr + " ")
                interQuartileRange:SetDescription("Interquartile range")
                interQuartileRange:SetFocusable(true)
                interQuartileRange:SetAccessibilityCode(0)
                // Right Side of IQR
                Drawable rightBorder
                // Left Side of IQR
                Drawable leftBorder
                // Lower Quartile Line Q1
                Drawable firstQuartileLine
                firstQuartileLine:SetName("The lower quartile value is " + firstQ + " ")
                firstQuartileLine:SetDescription("1st Quartile")
                firstQuartileLine:SetFocusable(true)
                firstQuartileLine:SetAccessibilityCode(0)
                // Median Line (denser)
                Drawable medianDot
                medianDot:SetName("The Median value is " + median + "  ")
                medianDot:SetDescription("Median")
                medianDot:SetFocusable(true)
                medianDot:SetAccessibilityCode(0)
                // Upper Quartile Line Q3
                Drawable thirdQuartileLine
                thirdQuartileLine:SetName("The upper quartile value is " + thirdQ + " ")
                thirdQuartileLine:SetDescription("3rd Quartile")
                thirdQuartileLine:SetFocusable(true)
                thirdQuartileLine:SetAccessibilityCode(0)
                // Upper Whisker Line
                Drawable upperWhisker
                // Maximum Line
                Drawable maximumLine
                maximumLine:SetName("The Maximum value is " + maximum + " ")
                maximumLine:SetDescription("Maximum")
                maximumLine:SetFocusable(true)
                maximumLine:SetAccessibilityCode(0)
                // Plot Area Outline Panel
                Icon plotArea
                plotArea:SetName(group:Get(k):GetName() + " violin plot")
                plotArea:SetFocusable(true)
                plotArea:SetAccessibilityCode(0)


                // Voilin plot density map
                Drawable denisty
    
                // Add to chart
                chartArea:Add(denisty)
                chartArea:Add(rightBorder)
                chartArea:Add(leftBorder)
                chartArea:Add(lowerWhisker)
                chartArea:Add(upperWhisker)
                chartArea:Add(minimumLine)
                chartArea:Add(firstQuartileLine)
                chartArea:Add(thirdQuartileLine)
                chartArea:Add(maximumLine)
                chartArea:Add(interQuartileRange)
                chartArea:Add(medianDot)
                chartArea:Add(plotArea)
    

                // Add to plot
                /* Indices for items of individual violin plot
                    0: PLOT AREA (ENTIRE REGION)
                    1: MINIMUM LINE
                    2: LOWER WHISKER
                    3: INTERQUARTILE RANGE
                    4: RIGHT BORDER OF IQR
                    5: LEFT BORDER OF IQR
                    6: Q1 LINE
                    7: MEDIAN LINE
                    8: Q3 LINE
                    9: UPPER WHISKER    
                    10: MAXIMUM LINE 
                    11: PIXEL DENSITY MAP
                */
                plot:AddItem(plotArea)
                plot:AddItem(minimumLine)      
                plot:AddItem(lowerWhisker)
                plot:AddItem(interQuartileRange)
                plot:AddItem(rightBorder)
                plot:AddItem(leftBorder)
                plot:AddItem(firstQuartileLine)
                plot:AddItem(medianDot)
                plot:AddItem(thirdQuartileLine)
                plot:AddItem(upperWhisker)
                plot:AddItem(maximumLine)
                plot:AddItem(denisty)
    
                k = k + 1
            end

            // Area covering entire group panel
            Icon panel
            panel:SetName(group:GetName() + " group has " + group:GetSize() + " violin plots.")
            panel:SetFocusable(true)
            panel:SetAccessibilityCode(0)
            chartArea:Add(panel)
            group:SetItem(panel)
            GetGroupPanels():Add(panel)
            i = i + 1
        end

        if seriesList:GetSize() > 0
            i = 0
            repeat while i < seriesList:GetSize()
                Series series = seriesList:Get(i)
                series:SetColor(options:GetColorFromPalette(i))
                series:GetLabel():SetFocusable(true)
                series:GetLabel():SetAccessibilityCode(parent:Item:ITEM)
                integer j = 0
                repeat while j < series:GetSize()
                    series:GetItem(j):SetColor(series:GetColor())
                    j = j + 1
                end
                i = i + 1
            end
        end
        if IsShowingLegend()
            Add(GetLegend())
        end
    end


    /*
    Creates the accessibility information for the chart area.
    */
    action GenerateInfoTree
        if GetDefaultLayoutProperties():NeedsRendering()
            return now //we haven't loaded graphics yet, so bail.
        end
        //NOTE: These nodes implement a cheap form of ordinality might need changing
        ChartItem xAxis
        ChartItem yAxis
        ChartItem chartArea//not to be confused with panel
        //Level 1 top level
        summary:SetDisplayName(GenerateSummary())
        summary:SetNext(yAxis)
        summary:SetChild(yAxis)
        summary:SetContainer(me)
        summary:SetFocusTarget(me)
    
        //Level 2 three main areas of bar chart (maybe 4 if legend is added)
        xAxis:SetDisplayName("Horizontal Axis")
        xAxis:SetFocusTarget(GetXLabel())
        yAxis:SetDisplayName("Vertical Axis")
        yAxis:SetFocusTarget(GetYLabel())

        chartArea:SetDisplayName("Violin Plot")
        if hasGroups
            me:GetChartArea():SetDescription(" with " + plotGroups:GetSize() + " groups")
        else
            me:GetChartArea():SetDescription(" with " + plotGroups:GetSize() + " violin plots")
        end
        chartArea:SetFocusTarget(me:GetChartArea())
        xAxis:SetContainer(me)        
        yAxis:SetContainer(me)
        chartArea:SetContainer(me)

        yAxis:SetNext(chartArea)
        chartArea:SetNext(xAxis)
        xAxis:SetPrevious(chartArea)
        yAxis:SetPrevious(xAxis)

        chartArea:SetPrevious(yAxis)
        xAxis:SetParent(summary)
        yAxis:SetParent(summary)
        yAxis:SetPrevious(summary)
        chartArea:SetParent(summary)

        // Legend Area
        if IsShowingLegend()
            GetLegend():GenerateInfoTree(me, summary, xAxis, yAxis)
        end

        Array<ControlLabel> yLabels = GetYLabels()
        ChartItem yPrevious
        integer i = 0
        repeat while i < yLabels:GetSize()
            ChartItem next
            if i = 0
                yAxis:SetChild(next)
            else
                next:SetPrevious(yPrevious)
                yPrevious:SetNext(next)   
            end
            next:SetContainer(me)
            next:SetDisplayName(yLabels:Get(i):GetText())
            next:SetParent(yAxis)
            next:SetFocusTarget(yLabels:Get(i))
            yPrevious = next
            i = i + 1
        end

        Array<ControlLabel> xLabels = GetXLabels()
        ChartItem xPrevious
        i = 0
        repeat while i < xLabels:GetSize()
            ChartItem next
            if i = 0
                xAxis:SetChild(next)
            else
                next:SetPrevious(xPrevious)
                xPrevious:SetNext(next)   
            end
            next:SetContainer(me)
            next:SetDisplayName(xLabels:Get(i):GetText())
            next:SetParent(xAxis)
            next:SetFocusTarget(xLabels:Get(i))
            xPrevious = next
            i = i + 1
        end
        
        if hasGroups
            //Plot Groups
            ChartItem firstGroup
            firstGroup:SetContainer(me)
            if plotGroups:GetSize() > 0
                chartArea:SetChild(firstGroup)
                firstGroup:SetParent(chartArea)
                firstGroup:SetFocusTarget(plotGroups:Get(0):GetItem())
    
                //Plots within Plot Groups
                if plotGroups:Get(0):GetSize() > 0 
                    ChartItem prev_target
                    integer k = 0
                    repeat while k < plotGroups:Get(0):GetSize()
                        ChartItem next_target
                        Array<Drawable> items = plotGroups:Get(0):Get(k):GetItems() //First plot
                        if k = 0
                            firstGroup:SetChild(next_target)
                        else
                            next_target:SetPrevious(prev_target)
                            prev_target:SetNext(next_target)
                        end
                        
                        next_target:SetContainer(me)
                        next_target:SetDisplayName(items:Get(0):GetName()) 
                        next_target:SetFocusTarget(items:Get(0))  
                        next_target:SetParent(firstGroup)
                        prev_target = next_target    
                        ChartItem previous
                        integer target_index = 0
                        integer index = 0
                        repeat while index < items:GetSize()
                            Drawable item = items:Get(index)
                            Drawable lastItem = items:Get(items:GetSize() - 1)
                            text Description = item:GetDescription()
                  
                            if Description not= ""
            
                                ChartItem next
                                if target_index = 0
                                    next_target:SetChild(next)
                                else
                                    next:SetPrevious(previous)
                                    previous:SetNext(next)
                                end
                                next:SetContainer(me)
                                next:SetDisplayName(item:GetName()) 
                                next:SetFocusTarget(item)
                                next:SetParent(next_target)
                                
                                previous = next
                                target_index = target_index+1 
                            end
                            index = index + 1
                        end
                        k = k + 1
                    end
                end
            end
    
            i = 1
            ChartItem previousGroup = firstGroup
            repeat while i < plotGroups:GetSize()
                ChartItem group
                group:SetContainer(me)
                group:SetParent(chartArea)
                group:SetFocusTarget(plotGroups:Get(i):GetItem())
                previousGroup:SetNext(group)
                group:SetPrevious(previousGroup)
                previousGroup = group

                //Plots within Plot Groups
                if plotGroups:Get(i):GetSize() > 0 
                    ChartItem prev_target
                    integer k = 0
                    repeat while k < plotGroups:Get(i):GetSize()
                        ChartItem next_target
                        Array<Drawable> items = plotGroups:Get(i):Get(k):GetItems() //First plot
                        if k = 0
                            group:SetChild(next_target)
                        else
                            next_target:SetPrevious(prev_target)
                            prev_target:SetNext(next_target)
                        end

                        next_target:SetContainer(me)
                        next_target:SetDisplayName(items:Get(0):GetName()) 
                        next_target:SetFocusTarget(items:Get(0))  
                        next_target:SetParent(group)
                        prev_target = next_target      
                        ChartItem previous
                        integer target_index = 0
                        integer index = 0
                        repeat while index < items:GetSize()
                            Drawable item = items:Get(index)
                            Drawable lastItem = items:Get(items:GetSize() - 1)
                            text Description = item:GetDescription()
                  
                            if Description not= ""
            
                                ChartItem next
                                if target_index = 0
                                    next_target:SetChild(next)
                                else
                                    next:SetPrevious(previous)
                                    previous:SetNext(next)
                                end
                                next:SetContainer(me)
                                next:SetDisplayName(item:GetName()) 
                                next:SetFocusTarget(item)
                                next:SetParent(next_target)
                                
                                previous = next
                                target_index = target_index+1 
                            end
                            index = index + 1
                        end
                        k = k + 1
                    end
                end
                i = i + 1
            end
        else
            ChartItem prev_target
            integer k = 0
            repeat while k < plotGroups:GetSize()
                ChartItem next_target
                Array<Drawable> items = plotGroups:Get(k):Get(0):GetItems() //First plot
                if k = 0
                    chartArea:SetChild(next_target)
                else
                    next_target:SetPrevious(prev_target)
                    prev_target:SetNext(next_target)
                end

                next_target:SetContainer(me)
                next_target:SetDisplayName(items:Get(0):GetName()) 
                next_target:SetFocusTarget(items:Get(0))  
                next_target:SetParent(chartArea)
                prev_target = next_target      
                ChartItem previous
                integer target_index = 0
                integer index = 0
                repeat while index < items:GetSize()
                    Drawable item = items:Get(index)
                    Drawable lastItem = items:Get(items:GetSize() - 1)
                    text Description = item:GetDescription()
            
                    if Description not= ""
    
                        ChartItem next
                        if target_index = 0
                            next_target:SetChild(next)
                        else
                            next:SetPrevious(previous)
                            previous:SetNext(next)
                        end
                        next:SetContainer(me)
                        next:SetDisplayName(item:GetName()) 
                        next:SetFocusTarget(item)
                        next:SetParent(next_target)
                        
                        previous = next
                        target_index = target_index+1 
                    end
                    index = index + 1
                end
                k = k + 1
            end
        end
        
        ChartSelection selection = GetSelection()
        selection:Set(summary)
    end
    
    /*
    This will execute when an item in violin chart lose selection
    */
    action LostSelection(ChartItem ci)
        if ci = undefined
            return now
        end
        Item target = ci:GetFocusTarget()

        if target not= undefined
            if target is ControlLabel
                ControlLabel temp = cast(ControlLabel, target)
                temp:LostSelection()
            elseif target is Drawable
                Drawable temp = cast(Drawable, target)
                temp:SetZ(0)
                temp:SetColor(previousColor)
            elseif target is Control
                Control temp = cast(Control, target)
                LayoutProperties properties = temp:GetDefaultLayoutProperties()
                if properties not= undefined
                    LabelBoxView view
                    view:SetBorderThickness(cast(integer, properties:GetBorderThickness())+4)
                    view:Initialize(properties:GetBackgroundColor(), previousColorGroup)
                    temp:SetView2D(view)
                end
            end
        end
    end

    action GainedSelection(ChartItem ci)
        if ci = undefined
            return now
        end
        Item target = ci:GetFocusTarget()

        if target not= undefined
            target:Focus()
            if target is ControlLabel
                ControlLabel temp = cast(ControlLabel, target)
                temp:GainedSelection()
            elseif target is Drawable
                Drawable temp = cast(Drawable, target)
                temp:SetZ(-1)
                previousColor = temp:GetColor()
                temp:SetColor(GetHighlightColor())
            elseif target is Control
                Control temp = cast(Control, target)
                LayoutProperties properties = temp:GetDefaultLayoutProperties()
                if properties not= undefined
                    previousColorGroup = properties:GetBorderColor()
                    LabelBoxView view
                    view:SetBorderThickness(cast(integer, properties:GetBorderThickness())+4)
                    view:Initialize(properties:GetBackgroundColor(), GetHighlightColor())
                    temp:SetView2D(view)
                end
            end            
        end
    end
    
    /*
    This sets what kind of kernel function to use to calculate the normal distributions
    */
    action SetWindowingAction(UnivariateAction act)
        me:windowingAction = act
    end

    /*
    This gets what kind of kernel function that is used to calculate the normal distributions
    */
    action GetWindowingAction returns UnivariateAction
        return me:windowingAction
    end

    /*
    This sets the inteval size to calculate the normal distributions
    */
    action SetBandWidth(integer value)
        bandWidth = value
    end

    /*
    This returns the inteval size to calculate the normal distributions
    */
    action GetBandWidth returns integer
        return bandWidth
    end

     /*
    Sets a flag that's used by GenerateInfoTree to determine if it should include accessibility navigation through plot groups
    */
    action HasGroups(boolean flag)
        hasGroups = flag
    end

     /*
    Returns the has groups flag
    */
    action HasGroups() returns boolean
        return hasGroups
    end

     /*
    Sets a flag that determines if a plot should be split for 2 column, one factor 
    */
    action IsSplit(boolean flag)
        splitPlot = flag
    end

    /*
    Returns the split plot flag
    */
    action GetSplitFlag() returns boolean
        return splitPlot
    end

    /*
    Appends a new plotgroup.
    */
    action AddPlotGroup(PlotGroup group)
        plotGroups:Add(group)
    end
   
    /*
    Returns an array of all the plot groups
    */
    action GetPlotGroups returns Array<PlotGroup>
        return plotGroups
    end

     /*
    Returns an array of all the series sets 
    */
    action GetSeriesList returns Array<Series>
        return seriesList
    end

    action AddSeries(Series series)
        seriesList:Add(series)
    end

    /*
        Gets the default selection color (highlighting)
    */
    action GetHighlightColor returns Color
        return highlightColor
    end

    /*
        Sets the default selection color (highlighting)
    */
    action SetHighlightColor(Color color)
        me:highlightColor = color
    end

    /* 
        This action converts this chart to a text value that contains information 
        for a scalable vector graphics file. This is useful for saving charts to disk.
        Each sub-class of chart must implement this action separately.

        Attribute: Returns the Scalable Vector Graphics (SVG) text.
    */
    action ConvertToScalableVectorGraphics returns text
        ViolinPlotWriter writer
        return writer:WriteOutChart(me)
    end

end