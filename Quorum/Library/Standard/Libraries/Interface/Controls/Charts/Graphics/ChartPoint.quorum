package Libraries.Interface.Controls.Charts

use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Controls.Icon
use Libraries.Interface.Controls.Charts.Graphics.ChartDrawable
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Game.Graphics.Shaders.ShaderManager
use Libraries.Game.Graphics.Shaders.ShaderProgram
use Libraries.Game.Graphics.Shaders.ControlShaderProgram
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Color
use Libraries.Game.GameStateManager

class ChartPoint is ChartDrawable
    number percentX = 0
    number percentY = 0
    number valueX = 0
    number valueY = 0
    text name = ""
    text letterCode = ""
    Series series = undefined
    text xNameOverride = undefined
    text yNameOverride = undefined
    
    ChartDrawable parentRegion = undefined
    Icon icon

    on create
        SetCornerRounding(1, 1, 1, 1)
    end

    action GetName returns text
        return name
    end

    action SetName(text name)
        me:name = name
        parent:ChartItem:SetName(name)
    end

    action GetPercentX returns number
        return percentX
    end

    action SetPercentX(number percentX)
        me:percentX = percentX
    end

    action GetPercentY returns number
        return percentY
    end

    action SetPercentY(number percentY)
        me:percentY = percentY
    end

    action GetValueX returns number
        return valueX
    end

    action SetValueX(number valueX)
        me:valueX = valueX
    end

    action GetValueY returns number
        return valueY
    end

    action SetValueY(number valueY)
        me:valueY = valueY
    end

    action SetParentRegion(ChartDrawable region)
        parentRegion = region
    end

    action GetParentRegion returns ChartDrawable
        return parentRegion
    end

    action GetSeries returns Series
        return series
    end

    action SetSeries(Series series)
        me:series = series
    end

    action LoadGraphics(LayoutProperties properties)
        // Render this Drawable with the Control Shader.
        if GetShaderProgram() = undefined
            GameStateManager gameState
            ShaderManager manager = gameState:GetShaderManager()
            ShaderProgram program = undefined
            if manager:HasShaderProgram("Control Shader Program")
                program = manager:GetShaderProgram("Control Shader Program")
            else
                ControlShaderProgram controlShader
                controlShader:Compile()
                program = controlShader
            end
            SetShaderProgram(program)
        end

        if GetTexture() = undefined
            LoadFilledRectangle(2, 2, GetBackgroundColor())
        end

        parent:Control:LoadGraphics(properties)
    end

    action GetBorderColor returns ColorGroup
        if HasColorPropertyOverride("borderColor")
            return parent:Control:GetBorderColor()
        end

        Chart chart = GetParentChart()
        if chart not= undefined
            return chart:GetBorderColor()
        end

        return parent:Control:GetBorderColor()
    end

    action GetBackgroundColor returns ColorGroup
        if HasColorPropertyOverride("backgroundColor")
            return parent:Control:GetBackgroundColor()
        end

        return parent:Drawable:GetColorGroup()
    end

    action GetBorderThickness returns number
        if HasNumberPropertyOverride("borderThickness")
            return parent:Control:GetBorderThickness()
        end

        Chart chart = GetParentChart()
        if chart not= undefined
            return chart:GetPointBorderThickness()
        end

        return parent:Control:GetBorderThickness()
    end

    action SetLetterCode(text letterCode)
        me:letterCode = letterCode
    end

    action GetLetterCode returns text
        return me:letterCode
    end
    
    action CalculateLetterCode(integer iteration)
        text convert = "A"
        me:letterCode = convert:GetUnicodeValue((iteration mod 26) + 65)
    end
    
    action GetSelectionColor returns ColorGroup
        Chart chart = GetParentChart()
        if chart not= undefined
            return chart:GetSelectionColor()
        end

        return undefined
    end

    action GetXNameOverride returns text
        return xNameOverride
    end

    action SetXNameOverride(text xNameOverride)
        me:xNameOverride = xNameOverride
    end

    action GetYNameOverride returns text
        return yNameOverride
    end

    action SetYNameOverride(text yNameOverride)
        me:yNameOverride = yNameOverride
    end

end