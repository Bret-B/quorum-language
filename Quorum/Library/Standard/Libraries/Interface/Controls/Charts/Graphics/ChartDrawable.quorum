package Libraries.Interface.Controls.Charts.Graphics

use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Color
use Libraries.Interface.Controls.Charts.ChartAreaPanel
use Libraries.Interface.Controls.Charts.Series
use Libraries.Interface.Controls.Charts.GroupPanel
use Libraries.Interface.Controls.Charts.ChartLabel
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Icon
use Libraries.Interface.Controls.Charts.ChartItem
use Libraries.Containers.Array
use Libraries.Interface.Controls.Charts.ChartOptions


/*
The ChartDrawable class is a parent data structure that stores information for each 
indiviual shape drawn on the chart. 
ChartDrawable holds a reference to a Series and Group to track which Series and Group it belongs to.
ChartDrawable holds the manual color of the drawable to avoid automatic re-coloring by the series.
ChartDrawable holds the annotation for the drawable.

Attribute: Author Hannah Williams
*/

class ChartDrawable is ChartItem, Drawable
    ChartAreaPanel chartArea = undefined // If separated, this will correspond to the correct sub chart area
    Series series = undefined
    GroupPanel group = undefined
    Color customColor = undefined
    integer pattern = 0

    //annotation handling for drawables display default is top
    ChartLabel annotation = undefined
    boolean showAnnotation = false
    boolean displayOnLeft = false
    boolean displayOnRight = false
    boolean displayOnTop = true
    boolean displayOnBottom = false

    Array <Drawable> selectionBracket //may or may not be used
    Drawable selectionArrow //may or may not be used
    Array<number> vertices

    on create
        // Color the item as gray in case it never gets added to a series.
        Color color //LightGray
        color:SetRed(0.75)
        color:SetGreen(0.75)
        color:SetBlue(0.75)
        color:SetAlpha(1)
        SetColor(color)
    end
    /*
        This action gets chart drawables selection arrow drawable object.

        Attribute: Returns the charts slection arrow object.
    */
    action GetSelectionArrow returns Drawable
        return selectionArrow
    end
    /*
        This action sets the selection arrow verticies (Array<number>) drawable object.

        Attribute: Parameter vertices the arrow vertices.
    */
    action SetSelectionArrowVertices(Array <number> vertices)
        me:vertices = vertices
    end
    /*
        This action gets the selection arrow verticies (Array<number>) drawable object.

        Attribute: Returns the Array<number> of the selection arrow vertices.
    */
    action GetSelectionArrowVertices returns Array<number>
        return vertices
    end
    /*
        This action gets the selection bracket (Array<Drawable>).

        Attribute: Returns the Array<Dawable> of the selection bracket.
    */
    action GetSelectionBracket returns Array<Drawable> 
        return selectionBracket
    end

    action HasPattern returns boolean
        if pattern not= 0
            return true
        end
        return false
    end

    action SetPattern(integer pattern)
        me:pattern = pattern
    end

    action GetPattern returns integer
        return pattern
    end

    action GetPatternName returns text
        ChartOptions options
        if pattern = options:VERTICAL_LINES
            return "vertical lines"
        elseif pattern = options:HORIZONTAL_LINES
            return "horizontal lines"
        elseif pattern = options:DIAGONAL_DOWN_LINES
            return "diagonal down lines"
        elseif pattern = options:DIAGONAL_UP_LINES
            return "diagonal up lines"
        elseif pattern = options:PLAIN_CROSSHATCH      
            return "plain crosshatch"
        elseif pattern = options:DIAGONAL_CROSSHATCH
            return "diagonal crosshatch"
        elseif pattern = options:SOLID_CIRCLES
            return "solid circles"
        elseif pattern = options:HOLLOW_CIRCLES 
            return "hollow circles"
        elseif pattern = options:PINPOINT_DASHES  
            return "pinpoint dashes"
        elseif pattern = options:SOLID_TRIANGLES
            return "solid triangles"
        elseif pattern = options:HOLLOW_TRIANGLES    
            return "hollow triangles"
        elseif pattern = options:SOLID_BOXES
            return "solid boxes"
        elseif pattern = options:HOLLOW_BOXES   
            return "hollow boxes"
        else
            return ""
        end
    end

    action SetPatternToVerticalLines()
        ChartOptions options
        me:pattern = options:VERTICAL_LINES
    end

    action SetPatternToHorizontalLines()
        ChartOptions options
        me:pattern = options:HORIZONTAL_LINES
    end

    action SetPatternToDiagonalUpLines()
        ChartOptions options
        me:pattern = options:DIAGONAL_UP_LINES
    end

    action SetPatternToDiagonalDownLines()
        ChartOptions options
        me:pattern = options:DIAGONAL_DOWN_LINES
    end

    action SetPatternToDiagonalCrosshatch()
        ChartOptions options
        me:pattern = options:DIAGONAL_CROSSHATCH
    end

    action SetPatternToPlainCrosshatch()
        ChartOptions options
        me:pattern = options:PLAIN_CROSSHATCH
    end

    action SetPatternToSolidCircles()
        ChartOptions options
        me:pattern = options:SOLID_CIRCLES
    end

    action SetPatternToHollowCircles()
        ChartOptions options
        me:pattern = options:HOLLOW_CIRCLES
    end

    action SetPatternToSolidBoxes()
        ChartOptions options
        me:pattern = options:SOLID_BOXES
    end

    action SetPatternToHollowBoxes()
        ChartOptions options
        me:pattern = options:HOLLOW_BOXES
    end

    action SetPatternToSolidTriangles()
        ChartOptions options
        me:pattern = options:SOLID_TRIANGLES
    end

    action SetPatternToHollowTriangles()
        ChartOptions options
        me:pattern = options:HOLLOW_TRIANGLES
    end

    action SetPatternToPinpointDashes()
        ChartOptions options
        me:pattern = options:PINPOINT_DASHES
    end

    /*
        Manual Color is used to override the series coloring if the user wants
        to display a different color for only this item of the series/group.
    */
    action SetCustomColor(Color color)
        me:customColor = color
    end

    action SetColor(Color color)
        if customColor not= undefined
            parent:Drawable:SetColor(customColor)
        else
            parent:Drawable:SetColor(color)
        end
    end

    /*
        Annotation is a control label that can be shown appended to this drawable
        It can show things like a name, value, equation or custom text. 
    */
    action SetAnnotation(ChartLabel annotation)
        me:annotation = annotation
    end
    /*
        This action gets the chart drawables annotation (ChartLabel). Annotation is a control 
        label that can be shown appended to this drawable. It can show things like a name, 
        value, equation or custom text.

        Attribute: Returns the ChartLabel of ChartDrawable object.
    */
    action GetAnnotation returns ChartLabel
        return annotation
    end
    /*
        This action sets the chart drawables annotation (ChartLabel) to visable (true) or hidden (false). 
        Annotation is a control label that can be shown appended to this drawable. It can show things like a name, 
        value, equation or custom text.

        Attribute: Parameter show if true ChartLabel of ChartDrawable object is displayed.
    */
    action ShowAnnotation(boolean show)
        showAnnotation = show
    end
    /*
        This action gets the chart drawables annotation (ChartLabel) visibility setting. 
        Annotation is a control label that can be shown appended to this drawable. It can show things like a name, 
        value, equation or custom text.

        Attribute: Returns true if the ChartLabel of ChartDrawable object is displayed.
    */
    action ShowAnnotation returns boolean
        return showAnnotation
    end

    /*
        The series is the entry in the legend associated with this drawable.
        Series is used to locate, name, and color the drawable unless manually colored.
    */
    action SetSeries(Series series)
        me:series = series
    end
    /*
        This action gets the chart drawables series. The series is the entry in the legend associated with this drawable.
        Series is used to locate, name, and color the drawable unless manually colored.

        Attribute: Returns Series from the ChartDrawable.
    */
    action GetSeries returns Series
        return series
    end

    /*
        The group is the label on the chart associated with this drawable.
        In most cases the groups are created by unique factors.
        GroupPanel is used to position, locate, and name the drawable on the chart.
    */
    action SetGroup(GroupPanel group)
        me:group = group
    end
    /*
        Gets the group. The group is the label on the chart associated with this drawable.
        In most cases the groups are created by unique factors. GroupPanel is used to position, 
        locate, and name the drawable on the chart.
    
        Attribute: Returns the GroupPanel .
    */
    action GetGroup returns GroupPanel
        return group
    end

    /*
        A link to the parent chart area of this drawable.
    */
    action GetChartArea returns ChartAreaPanel
        return chartArea
    end

    action SetChartArea(ChartAreaPanel chartArea)
        me:chartArea = chartArea
    end

    // Try to get the chart this is attached to via the parent hierarchy.
    action GetParentChart returns Chart
        Item2D parentItem = me
        repeat until parentItem is Chart or parentItem = undefined
            parentItem = parentItem:GetParent()
        end

        return cast(Chart, parentItem)
    end

    /*
        This action is used when a Chart Drawable gains the selection. Selection
        elements are then shown.
    */
    action GainedSelection()
        if GetSelectionArrow() not= undefined          
            GetSelectionArrow():Show()
        end
        if GetSelectionBracket():GetSize() = 3          
            GetSelectionBracket():Get(0):Show()
            GetSelectionBracket():Get(1):Show()
            GetSelectionBracket():Get(2):Show()
        end
        parent:ChartItem:GainedSelection()
    end
    /*
        This action is used when a Chart Drawable loses the selection. Selection
        elements are then hidden.
    */
    action LostSelection()
        if GetSelectionArrow() not= undefined          
            GetSelectionArrow():Hide()
        end
        if GetSelectionBracket():GetSize() = 3          
            GetSelectionBracket():Get(0):Hide()
            GetSelectionBracket():Get(1):Hide()
            GetSelectionBracket():Get(2):Hide()
        end
        parent:ChartItem:LostSelection()
    end

    /*
        Set the location of the annotation to the top of the chart drawable.
    */
    action SetAnnotationLocationToTop()
        displayOnLeft = false
        displayOnRight = false
        displayOnTop = true
        displayOnBottom = false
    end
    /*
        Gets the location of the annotation. If the annotation is located on the top 
        true is returned. If it is located somewhere else this action returns false.
    
        Attribute: Returns true when the annotation is located at the top.
    */
    action IsAnnotationLocationTop() returns boolean
        return displayOnTop
    end

    /*
        Set the location of the annotation to the bottom of the chart drawable.
    */
    action SetAnnotationLocationToBottom()
        displayOnLeft = false
        displayOnRight = false
        displayOnTop = false
        displayOnBottom = true
    end
    /*
        Gets the location of the annotation. If the annotation is located on the bottom 
        true is returned. If it is located somewhere else this action returns false.
    
        Attribute: Returns true when the annotation is located at the bottom.
    */
    action IsAnnotationLocationBottom() returns boolean
        return displayOnBottom
    end

    /*
        Set the location of the annotation to the left of the chart drawable.
    */
    action SetAnnotationLocationToLeft()
        displayOnLeft = true
        displayOnRight = false
        displayOnTop = false
        displayOnBottom = false
    end
    /*
        Gets the location of the annotation. If the annotation is located on the left 
        true is returned. If it is located somewhere else this action returns false.
    
        Attribute: Returns true when the annotation is located at the left.
    */
    action IsAnnotationLocationLeft() returns boolean
        return displayOnLeft
    end

    /*
        Set the location of the annotation to the right of the chart drawable.
    */
    action SetAnnotationLocationToRight()
        displayOnLeft = false
        displayOnRight = true
        displayOnTop = false
        displayOnBottom = false
    end
     /*
        Gets the location of the annotation. If the annotation is located on the right 
        true is returned. If it is located somewhere else this action returns false.
    
        Attribute: Returns true when the annotation is located at the right.
    */   
    action IsAnnotationLocationRight() returns boolean
        return displayOnRight
    end
end