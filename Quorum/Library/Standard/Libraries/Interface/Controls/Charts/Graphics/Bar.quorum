package Libraries.Interface.Controls.Charts.Graphics

use Libraries.Containers.Array
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Controls.Control
use Libraries.Game.Graphics.ColorGroup
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Compute.BitwiseOperations
use Libraries.Game.Graphics.Shaders.ShaderManager
use Libraries.Game.Graphics.Shaders.ShaderProgram
use Libraries.Game.Graphics.Shaders.ControlShaderProgram
use Libraries.Interface.Controls.Charts.SharedBarChartParent
use Libraries.Interface.Controls.Charts.ChartOptions
use Libraries.Game.Graphics.Shaders.LinePatternControlShaderProgram
use Libraries.Game.Graphics.Shaders.CrosshatchPatternControlShaderProgram

/*
The Bar class is a ChartDrawable that stores information for each 
indiviual bar. Bar contains a numerical value to determine the size 
of the bar within a chart.

Attribute: Example

use Libraries.Interface.Controls.Charts.Graphics.Bar
class Main
    action Main
        // Make bar
        Bar bar
    
        // Set value
        bar:SetValue(20.0)
    
        // Get value
        number x = bar:GetValue()
    end
end
*/

class Bar is ChartDrawable
    number value = 0 
    BitwiseOperations bits

    /*
    This action returns the actual value associated with this slice.
    The parent Chart axis has a total value to which this value will be compared
    to get a percent for the appropriate size.

    Attribute: Returns a number value
    */
    action GetValue returns number
        return value
    end

    action SetValue(number value)
        me:value = value
        if GetBarGroup() not= undefined
            GetBarGroup():RecalculateGroupValues()
        end
    end

    /*
    Link to the parent BarGroup
    */
    action GetBarGroup returns BarGroup
        return cast(BarGroup, GetGroup())
    end

    action LoadGraphics(LayoutProperties properties)
        // Render this Drawable with the Control Shader.
        if GetShaderProgram() = undefined
            ShaderManager manager
            ShaderProgram program = undefined
            
            if HasPattern()
                integer pattern = GetPattern()
                ChartOptions options
                
                if pattern = options:VERTICAL_LINES or pattern = options:HORIZONTAL_LINES or pattern = options:DIAGONAL_DOWN_LINES or pattern = options:DIAGONAL_UP_LINES
                    if manager:HasShaderProgram("Line Pattern Control Shader Program")
                        program = manager:GetShaderProgram("Line Pattern Control Shader Program")
                    else
                        LinePatternControlShaderProgram patternShader
                        patternShader:Compile()
                        program = patternShader
                    end
                elseif pattern = options:PLAIN_CROSSHATCH or pattern = options:DIAGONAL_CROSSHATCH
                    if manager:HasShaderProgram("Crosshatch Pattern Control Shader Program")
                        program = manager:GetShaderProgram("Crosshatch Pattern Control Shader Program")
                    else
                        CrosshatchPatternControlShaderProgram patternShader
                        patternShader:Compile()
                        program = patternShader
                    end
                else
                    // Default case: basic control shader, without pattern
                    if manager:HasShaderProgram("Control Shader Program")
                        program = manager:GetShaderProgram("Control Shader Program")
                    else
                        ControlShaderProgram controlShader
                        controlShader:Compile()
                        program = controlShader
                    end
                end
            else
                if manager:HasShaderProgram("Control Shader Program")
                    program = manager:GetShaderProgram("Control Shader Program")
                else
                    ControlShaderProgram controlShader
                    controlShader:Compile()
                    program = controlShader
                end
            end
            
            SetShaderProgram(program)
        end

        parent:Control:LoadGraphics(properties)
    end

    action GetBorderColor returns ColorGroup
        if HasColorPropertyOverride("borderColor")
            return parent:Control:GetBorderColor()
        end

        Chart chart = GetParentChart()
        if chart not= undefined
            return chart:GetBorderColor()
        end

        return parent:Control:GetBorderColor()
    end

    action GetSelectionBorderColor returns ColorGroup
        if HasColorPropertyOverride("selectionBorderColor")
            return parent:Control:GetBorderColor()
        end

        Chart chart = GetParentChart()
        if chart not= undefined
            return chart:GetSelectionBorderColor()
        end

        return parent:Control:GetBorderColor()
    end

    action GetBackgroundColor returns ColorGroup
        return parent:Drawable:GetColorGroup()
    end

    action GetSelectionColor returns ColorGroup
        return GetBackgroundColor()
    end

    action GetBorderThickness returns number
        if HasNumberPropertyOverride("borderThickness")
            return parent:Control:GetBorderThickness()
        end

        Chart chart = GetParentChart()
        if chart is SharedBarChartParent
            SharedBarChartParent barChart = cast(SharedBarChartParent, chart)
            return barChart:GetBarBorderThickness()
        end

        return parent:Control:GetBorderThickness()
    end

    action GetBorderStyle returns integer
        Chart chart = GetParentChart()
        if chart is SharedBarChartParent
            SharedBarChartParent barChart = cast(SharedBarChartParent, chart)
            return barChart:GetBarBorderStyle()
        end

        return parent:Control:GetBorderStyle()
    end

    action HasLeftBorder returns boolean
        LayoutProperties properties = GetDefaultLayoutProperties()
        integer style = GetBorderStyle()
        return bits:And(style, properties:LEFT) not= 0
    end

    action HasTopBorder returns boolean
        LayoutProperties properties = GetDefaultLayoutProperties()
        integer style = GetBorderStyle()
        return bits:And(style, properties:TOP) not= 0
    end

    action HasRightBorder returns boolean
        LayoutProperties properties = GetDefaultLayoutProperties()
        integer style = GetBorderStyle()
        return bits:And(style, properties:RIGHT) not= 0
    end

    action HasBottomBorder returns boolean
        LayoutProperties properties = GetDefaultLayoutProperties()
        integer style = GetBorderStyle()
        return bits:And(style, properties:BOTTOM) not= 0
    end
end