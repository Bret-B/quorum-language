package Libraries.Interface.Controls.Charts.Graphics

use Libraries.Interface.Controls.Charts.all
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Controls.Icon
use Libraries.Compute.Statistics.Tests.Regression
use Libraries.Compute.Vector
use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Game.Graphics.LinePath
use Libraries.Game.Graphics.Painter2D
use Libraries.Compute.Vector2
use Libraries.Interface.Events.DragAndDropEvent
use Libraries.Interface.Events.MouseEvent

class RegressionLine is ChartDrawable, LinePath
    private Regression regression = undefined
    private Series series = undefined
    private Math math
    private Icon icon 
    private ChartLabel equation
    private ChartLabel rsquared
    private text equationText = ""
    private text rsquaredText = ""
    private text dependentVariable = ""
    private Array<text> independentVariables    // This would be used when we have multi-variate regression
    private boolean nameAfterSeries = false

    number slope = 1
    number constantValue = 0

    boolean movable = false
    boolean bestFit = false
    boolean horizontalOrientation = true

    // How far a point should move when moved via the keyboard, as a percentage of the range of width or height.
    number keyboardMovePercent = 0.1

    // How much the line should rotate when moved via the keyboard, in degrees.
    number keyboardRotateAngle = 15

    // Padding values used to calculate the edges around the rectangle, reserved for rendering the edges of points.
    // Mostly only needed for movable lines.
    number horizontalMapPadding = 0
    number verticalMapPadding = 0

    /*
    An array containing three point markers used to display selection and
    accessibly navigate the control points of a movable regression line.
    */
    Array<RegressionLinePointMarker> pointMarkers

    // An additional "dummy" point marker, used to send accessibility info when a point is modified.
    RegressionLinePointMarker extraMarker

    // Allows for locking the y-intercept so only the slope can be changed.
    boolean lockIntercept = false

    on create
        SetName("Regression Line")

        SetFocusable(true)
        SetAccessibilityCode(parent:Item:ITEM)
        SetInputGroup("RegressionLine")
        SetEscapeToLastItem(true)

        // LinePath properties
        SetCurving(false)
        SetLineThickness(4)

        // Default LinePath points, to be overridden when setting the two endpoints with SetX1 etc.
        Add(0, 0)
        Add(0, 0)
        Add(0, 0)

        integer i = 0
        repeat while i < 3
            RegressionLinePointMarker marker
            marker:SetPointIndex(i)
            pointMarkers:Add(marker)

            // Because markers are hidden by default on creation, adding these won't display anything until they're made visible due to selection changes.
            // (See "OnSelectionChange" in Chart)
            Add(marker)

            // Ensure each marker knows its container and can navigate back to it.
            marker:SetEscapeItem(me)

            i = i + 1
        end

        extraMarker:SetEscapeItem(me)

        // Reiterate over the points to set navigation controls on them.
        // Only the first three points are in the navigation by default -- the fourth is a dummy reserved for accessibility.
        i = 0
        repeat while i < 3
            integer previous = i - 1
            if previous < 0
                previous = 2
            end
            integer next = (i + 1) mod 3

            pointMarkers:Get(i):SetRightItem(pointMarkers:Get(next))
            pointMarkers:Get(i):SetLeftItem(pointMarkers:Get(previous))
            i = i + 1
        end
    end

    action Draw(Painter2D painter)
        parent:LinePath:Draw(painter)
    end

    private action SetToBestFit
        bestFit = true

        Vector beta = regression:GetCoefficients()
        if beta:GetSize() > 1
            constantValue = beta:Get(0)
            slope = beta:Get(1)
        end

        RefreshPoints()
    end

    action RefreshPoints
        number xMin = GetMappedLeft() + horizontalMapPadding
        number xMax = GetMappedRight() - horizontalMapPadding
        number yMin = GetMappedBottom() + verticalMapPadding
        number yMax = GetMappedTop() - verticalMapPadding

        // Starting position for line
        if not IsHorizontalOrientation()
            number yVal = yMin
            number xVal = CalculateDependentValue(yVal)
            if (xVal < xMin)
                yVal = CalculateIndependentValue(xMin)
                xVal = CalculateDependentValue(yVal)
            elseif xVal > xMax
                yVal = CalculateIndependentValue(xMax)
                xVal = CalculateDependentValue(yVal)
            end
            SetPoint1(xVal, yVal)
        else
            number xVal = xMin
            number yVal = CalculateDependentValue(xVal)
            if (yVal < yMin)
                xVal = CalculateIndependentValue(yMin)
                yVal = CalculateDependentValue(xVal)
            elseif yVal > yMax
                xVal = CalculateIndependentValue(yMax)
                yVal = CalculateDependentValue(xVal)
            end
            SetPoint1(xVal, yVal)
        end

        // Ending position for line
        if not IsHorizontalOrientation()
            number yVal = yMax
            number xVal = CalculateDependentValue(yVal)
            if (xVal > xMax)
                yVal = CalculateIndependentValue(xMax)
                xVal = CalculateDependentValue(yVal)
            end
            if (xVal < xMin)
                yVal = CalculateIndependentValue(xMin)
                xVal = CalculateDependentValue(yVal)
            end
            SetPoint2(xVal, yVal)
        else
            number xVal = xMax
            number yVal = CalculateDependentValue(xVal)
            if (yVal > yMax)
                xVal = CalculateIndependentValue(yMax)
                yVal = CalculateDependentValue(xVal)
            end
            if (yVal < yMin)
                xVal = CalculateIndependentValue(yMin)
                yVal = CalculateDependentValue(xVal)
            end
            SetPoint2(xVal, yVal)
        end

        UpdateMarkerPositions()
        UpdateMarkerDescriptions()
        UpdatePointDescriptions()
    end

    private action UpdateMarkerPositions
        boolean sideArrow = false

        if GetParentChart() not= undefined
            sideArrow = GetParentChart():GetHorizontalFlag()
        end

        integer i = 0
        repeat while i < pointMarkers:GetSize()
            if sideArrow
                pointMarkers:Get(i):SetPosition(GetPixelPointX(i), GetPixelPointY(i) + GetPointThickness())
            else
                pointMarkers:Get(i):SetPosition(GetPixelPointX(i) + GetPointThickness(), GetPixelPointY(i))
            end

            i = i + 1
        end
    end

    action GetRegression returns Regression
        return regression
    end

    action SetRegression(Regression regression)
        me:regression = regression

        SetToBestFit()
    end

    action SetRegressionIcon(Icon icon)
        me:icon = icon
    end

    action GetRegressionIcon returns Icon
        return icon
    end

    action SetIcon(TextureRegion region)
        if region is Icon
            icon = cast(Icon, region)
        end
        parent:Control:SetIcon(region)
    end

    action GetIcon returns TextureRegion
        return icon
    end

    action GetLabel() returns ChartLabel
        return equation
    end

    action GetEquationLabel() returns ChartLabel
        return equation
    end

    action GetRSquaredLabel() returns ChartLabel
        return rsquared
    end

    action GetSeries returns Series
        return series
    end

    action SetSeries(Series series)
        me:series = series
    end

    action SetLineDensity(number lineDensity)
        SetLineThickness(lineDensity)
    end

    action GetLineDensity returns number
        return GetLineThickness()
    end

    action SetVariableNames(text yAxisTitle, text xAxisTitle, boolean isHorizontal, boolean orientationChanged)
        if isHorizontal or (not isHorizontal and not orientationChanged)
            if xAxisTitle = ""
                SetIndependentVariable("x")
            else
                SetIndependentVariable(xAxisTitle)
            end
            if NamedAfterSeries() and yAxisTitle = ""
                SetDependentVariableWithSeries()
            else
                if yAxisTitle = ""
                    SetDependentVariable("y")
                else
                    SetDependentVariable(yAxisTitle)
                end
            end
        else
            if yAxisTitle = ""
                SetIndependentVariable("y")
            else
                SetIndependentVariable(yAxisTitle)
            end
            if NamedAfterSeries() and xAxisTitle = ""
                SetDependentVariableWithSeries()
            else
                if xAxisTitle = ""
                    SetDependentVariable("x")
                else
                    SetDependentVariable(xAxisTitle)
                end
            end
        end
        GenerateEquation()
    end

    action SetDependentVariable(text dependentVariable)
        me:dependentVariable = dependentVariable
    end

    action SetDependentVariableWithSeries()
        if series not= undefined
            me:dependentVariable = series:GetName()
        end
    end

    action NamedAfterSeries(boolean nameAfterSeries)
        me:nameAfterSeries = nameAfterSeries
    end

    action NamedAfterSeries returns boolean
        return nameAfterSeries
    end

    action SetIndependentVariable(text independentVariable)
        independentVariables:Empty()
        independentVariables:Add(independentVariable)
    end

    action SetIndependentVariables(Array<text> independentVariables)
        if independentVariables:GetSize() not= regression:GetCoefficients():GetSize()
            me:independentVariables:Empty()
            integer i = 0
            repeat while i < regression:GetCoefficients():GetSize()
                text var = "x"+(i+1)
                me:independentVariables:Add(var)
                i = i + 1
            end
        else
            me:independentVariables = independentVariables
        end
    end

    // Gives dependentVariable = (m*independentVariable) + b 
    action GenerateEquation()
        Math math

        if independentVariables:GetSize() > 0
            equationText = dependentVariable + " = " + math:Round(slope,2) + "*" + independentVariables:Get(0)

            if math:Round(constantValue, 2) < 0
                equationText = equationText + math:Round(constantValue, 2)
            else
                equationText = equationText + " + " + math:Round(constantValue, 2)
            end
        end
        rsquaredText = "R^2 = " + (math:Round(regression:GetEffectSize(),4))

        equation:SetText(equationText)
        equation:SetName(equationText)

        rsquared:SetText(rsquaredText)
        rsquared:SetName(rsquaredText)
    end 

    // Equation is (dependent(y)) = m * (independent(x)) + b
    action CalculateDependentValue(number independent) returns number
        number dependent = 0
        dependent = slope * independent + constantValue
        return dependent
    end

    // Equation is (dependent(y)) = m * (independent(x)) + b
    action CalculateIndependentValue(number dependent) returns number
        number independent = 0
        independent = (dependent - constantValue) / (slope)
        return independent
    end

    private action RecalculateMidpoint
        SetPoint(1, (GetX1() + GetX2()) / 2.0, (GetY1() + GetY2()) / 2.0)
    end

    action SetPoint1(number x1, number y1)
        SetPoint(0, x1, y1)
        RecalculateMidpoint()
    end

    action SetPoint2(number x2, number y2)
        SetPoint(2, x2, y2)
        RecalculateMidpoint()
    end

    action SetX1(number x1)
        SetPoint(0, x1, GetY1())
        RecalculateMidpoint()
    end

    action SetY1(number y1)
        SetPoint(0, GetX1(), y1)
        RecalculateMidpoint()
    end

    action SetX2(number x2)
        SetPoint(2, x2, GetY2())
        RecalculateMidpoint()
    end

    action SetY2(number y2)
        SetPoint(2, GetX2(), y2)
        RecalculateMidpoint()
    end

    action GetX1 returns number
        return GetPointX(0)
    end

    action GetY1 returns number
        return GetPointY(0)
    end

    action GetX2 returns number
        return GetPointX(2)
    end

    action GetY2 returns number
        return GetPointY(2)
    end

    action GetMidpointX returns number
        return GetPointX(1)
    end

    action GetMidpointY returns number
        return GetPointY(1)
    end

    action GetPixelStartPosition returns Vector2
        Vector2 vector
        vector:Set(GetPoint(0))
        TranslateFromMappedSpace(vector)
        return vector
    end

    action GetPixelEndPosition returns Vector2
        Vector2 vector
        vector:Set(GetPoint(2))
        TranslateFromMappedSpace(vector)
        return vector
    end

    action IsMovable returns boolean
        return movable
    end

    action SetMovable(boolean movable)
        me:movable = movable
        SetDrawPoints(movable)
        SetPassThroughSelection(movable)
        if movable
            SetEnterItem(pointMarkers:Get(0))
        else
            SetEnterItem(undefined)
        end
    end

    action SetHorizontalOrientation(boolean horizontal)
        horizontalOrientation = horizontal
    end

    action IsHorizontalOrientation returns boolean
        return horizontalOrientation
    end

    action GetHorizontalMapPadding returns number
        return horizontalMapPadding
    end

    action SetHorizontalMapPadding(number horizontalMapPadding)
        me:horizontalMapPadding = horizontalMapPadding
    end

    action GetVerticalMapPadding returns number
        return verticalMapPadding
    end

    action SetVerticalMapPadding(number verticalMapPadding)
        me:verticalMapPadding = verticalMapPadding
    end

    action DragMovablePoint(DragAndDropEvent event)
        if movable = false
            return now
        end

        bestFit = false

        integer index = GetSelection():GetPointIndex()
        number pixelX = event:GetX() - GetGlobalX()
        number pixelY = event:GetY() - GetGlobalY()

        // Dragging the end points
        if index = 0 or index = 2
            Vector2 point1
            point1:Set(pixelX, pixelY)
            TranslateToMappedSpace(point1)

            Vector2 point2
            point2:Set(GetMidpointX(), GetMidpointY())

            SetLineThroughMappedPoints(point1, point2)

        // Dragging the mid point
        elseif index = 1
            IntersectPixelPointViaConstant(pixelX, pixelY)
        end
    end

    action KeyboardActivatePoint(RegressionLinePointMarker marker)
        marker:SetKeyboardActive(true)
        SwapMarkers(marker)
    end

    action KeyboardDeactivatePoint(RegressionLinePointMarker marker)
        marker:SetKeyboardActive(false)
        SwapMarkers(marker)
    end

    action KeyboardMovePoint(RegressionLinePointMarker marker, integer direction)
        integer index = marker:GetPointIndex()
        number xMin = GetMappedLeft() + horizontalMapPadding
        number xMax = GetMappedRight() - horizontalMapPadding
        number yMin = GetMappedBottom() + verticalMapPadding
        number yMax = GetMappedTop() - verticalMapPadding

        number x = 0
        number y = 0

        if direction = parent:ChartItem:LEFT
            x = -keyboardMovePercent * (xMax - xMin)
        elseif direction = parent:ChartItem:RIGHT
            x = keyboardMovePercent * (xMax - xMin)
        elseif direction = parent:ChartItem:DOWN
            y = -keyboardMovePercent * (yMax - yMin)
        elseif direction = parent:ChartItem:UP
            y = keyboardMovePercent * (yMax - yMin)
        end

        if index = 1
            Vector2 point
            point:Set(GetMidpointX() + x, GetMidpointY() + y)
            IntersectMappedPointViaConstant(point)
        else
            Vector2 point1
            if index = 0
                point1:Set(GetX1() + x, GetY1() + y)
            else
                point1:Set(GetX2() + x, GetY2() + y)
            end

            Vector2 point2
            point2:Set(GetMidpointX(), GetMidpointY())
            SetLineThroughMappedPoints(point1, point2)
        end

        SwapMarkers(marker)
    end

    action KeyboardRotateLine(RegressionLinePointMarker marker, integer direction)
        number degrees = 0
        if direction = parent:ChartItem:LEFT or direction = parent:ChartItem:DOWN
            degrees = keyboardRotateAngle
        else
            degrees = -keyboardRotateAngle
        end

        RotateLine(degrees)

        SwapMarkers(marker)
    end

    action RotateLine(number degrees)
        Vector2 base
        base:Set(GetX2() - GetMidpointX(), GetY2() - GetMidpointY())
        base:Rotate(degrees)

        slope = base:GetY() / base:GetX()
        constantValue = GetMidpointY() - slope * GetMidpointX()

        RefreshPoints()
        GetParentChart():RequestLayout()
    end

    private action UpdateMarkerDescriptions
        integer i = 0
        repeat while i < pointMarkers:GetSize()
            RegressionLinePointMarker marker = pointMarkers:Get(i)
            UpdateMarkerDescription(marker)

            i = i + 1
        end
    end

    action UpdateMarkerDescription(RegressionLinePointMarker marker)
        // TO-DO: Set more meaningful information here
        if marker:IsKeyboardActive()
            marker:SetName("Slope is " + math:Round(slope, 2) + ", constant is " + math:Round(constantValue, 2))
            if marker:GetPointIndex() = 1
                marker:SetDescription(": Use the arrow keys to move the line left or right, or use Page Up and Page Down to move the line up and down. Press Shift Enter to return to the regression line.")
            else
                marker:SetDescription(": Use the left arrow to rotate clockwise, or right arrow to rotate the line counter-clockwise. Press Shift Enter to return to the regression line.")
            end
        else
            marker:SetName("Regression control point " + (marker:GetPointIndex() + 1) + ": line slope is " + math:Round(slope, 2) + ", constant is " + math:Round(constantValue, 2))
            marker:SetDescription(": Press Enter to select the point and change the regression line.")
        end
    end

    private action SwapMarkers(RegressionLinePointMarker startMarker) returns RegressionLinePointMarker
        extraMarker:SetPointIndex(startMarker:GetPointIndex())
        extraMarker:SetName(startMarker:GetName())
        extraMarker:SetDescription(startMarker:GetDescription())
        extraMarker:SetContainer(startMarker:GetContainer())

        extraMarker:SetKeyboardActive(startMarker:IsKeyboardActive())
        extraMarker:SetLeftItem(startMarker:GetLeftItem())
        extraMarker:SetRightItem(startMarker:GetRightItem())

        Remove(startMarker)
        Add(extraMarker)
        
        RegressionLinePointMarker result = extraMarker

        pointMarkers:Set(startMarker:GetPointIndex(), extraMarker)
        extraMarker = startMarker

        Chart chart = GetParentChart()
        if chart:GetSelection():GetChartItem():Equals(startMarker)
            chart:Select(result)
        end
        chart:RequestLayout()

        return result
    end

    /*
    This action adjusts the constant value in the linear equation so that the
    line passes through the point at the given coordinates. The point must be
    in the pixel space (e.g. between 0 and the pixel width/height of the line rectangle).
    */
    action IntersectPixelPointViaConstant(number x, number y)
        Vector2 mapped
        mapped:Set(x, y)
        TranslateToMappedSpace(mapped)
        IntersectMappedPointViaConstant(mapped)
    end

    /*
    This action adjusts the constant value in the linear equation so that the
    line passes through the point at the given coordinates. The point must be
    in the mapped space.
    */
    action IntersectMappedPointViaConstant(Vector2 point)
        // y = mx + b
        // b = y - mx
        constantValue = point:GetY() - slope * point:GetX()
        RefreshPoints()
        GetParentChart():RequestLayout()
    end

    /*
    This action sets the line so it runs through the two given points. The points
    must be provided in pixel space (e.g. between 0 and the pixel width/height of
    the line rectangle).
    */
    action SetLineThroughPixelPoints(number x1, number y1, number x2, number y2)
        Vector2 point1
        point1:Set(x1, y1)
        TranslateToMappedSpace(point1)

        Vector2 point2
        point2:Set(x2, y2)
        TranslateToMappedSpace(point2)

        SetLineThroughMappedPoints(point1, point2)
    end

    /*
    This action sets the line so it runs through the two given points. The points
    must be provided in the mapped space.
    */
    action SetLineThroughMappedPoints(Vector2 point1, Vector2 point2)
        // y = mx + b
        // m = (y2 - y1) / (x2 - x1)
        // b = (y1) - m(x1)

        slope = (point2:GetY() - point1:GetY()) / (point2:GetX() - point1:GetX())
        constantValue = point1:GetY() - slope * point1:GetX()

        RefreshPoints()
        GetParentChart():RequestLayout()
    end

    private action UpdatePointDescriptions
        if GetParentChart() is TwoVariableChart
            TwoVariableChart chart = cast(TwoVariableChart, GetParentChart())
            Array<ChartPoint> points = chart:CastToPoints(series:GetChartAreaItems())
            chart:UpdatePointDescriptions(points)
        end
    end

    action GetPointMarkers returns Array<RegressionLinePointMarker>
        return pointMarkers
    end

    action LockYIntercept(number intercept)
        Vector2 origin
        origin:Set(0, intercept)

        // TO-DO: Instead of putting the intercept through the middle, it would be reasonable to try to find the "best fit" through the intercept instead.
        Vector2 midpoint
        number xMin = GetMappedLeft() + horizontalMapPadding
        number xMax = GetMappedRight() - horizontalMapPadding
        number yMin = GetMappedBottom() + verticalMapPadding
        number yMax = GetMappedTop() - verticalMapPadding
        midpoint:Set((xMax - xMin) / 2 + xMin, (yMax - yMin) / 2 + yMin)

        SetLineThroughMappedPoints(origin, midpoint)
        lockIntercept = true
    end

    action UnlockYIntercept
        lockIntercept = false
    end

    action IsYInterceptLocked returns boolean
        return lockIntercept
    end

    action GetYIntercept returns number
        return constantValue
    end
end