package Libraries.Interface.Controls.Charts

use Libraries.Interface.Layouts.BarChartLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Gradient
use Libraries.System.File

/*
    The BarChart class is Chart object that inherits from SharedBarChartParent and like other
    UI elements it is added to the Game class. The Bar Chart is used to represent
    categorical data with rectangular bars that have a height proportional to the 
    data they represent. By default, the chart has no added bars and has a scale 
    that goes from 0 to 1. The title label, axis labels, and scale can be modified, 
    and any number of bars can be added. 

    Attribute: Author Gabriel Contreras, Hannah Williams, Tim Kluthe

    Attribute: Example

    use Libraries.Interface.Controls.Charts
    use Libraries.Interface.Controls.Charts.BarChart
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            BarChart chart
            Add(chart)
        end
    end
*/
class BarChart is SharedBarChartParent
    on create
        BarChartLayout layout
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:MAINTAIN_ASPECT_RATIO)
        properties:SetVerticalLayoutMode(properties:STANDARD)
        Font font = GetDefaultFont()
        properties:SetFont(font)
        properties:SetFontSize(GetDefaultFontSize())

        Color color
        Gradient gradient
        Color gray = color:LightGray()
        Color lightGray = color:CustomColor(0.9, 0.9, 0.9, 1)
        gradient:Set(gray, gray, lightGray, lightGray)

        properties:SetBackgroundColor(gradient)
        properties:SetBorderColor(color:Black())
        properties:SetBorderThickness(2)
        SetName("Bar Chart")

        SetInputGroup("Chart")
        SetFocusable(true)
        SetAccessibilityCode(parent:Item:ITEM)

        // Default settings specific to bar chart
        RegressionCapable(true)
        SetDefaultSeparation(false)
        SetDefaultShowBrackets(true)
        SetDefaultOrientationToVertical()
        GetVerticalPanel():BlockPaddingOffset(true)
        GetHorizontalPanel():BlockPaddingOffset(true)
    end

    /*
        This is called by GenerateInfoTree to generate the summary that is heard when
        you first focus on the chart. Also the highest level of the information tree
        of  the chart.
    */
    private action GenerateSummary returns text
        text grouptext = ""
        if HasGroups()
            text groups = " groups and "
            if GetBarGroups():GetSize() = 1
                groups = " group and "
            end
            grouptext = GetBarGroups():GetSize() + groups
        end
        text bartext = GetNumberOfBars() + " bars"
        if GetNumberOfBars() = 1
            bartext = GetNumberOfBars() + " bar"
        end
        if GetName() = "Bar Chart"
            SetDescription(" with " + grouptext + bartext + ". Use the arrow keys to navigate the chart.")
        else
            SetDescription("Bar chart with " + grouptext + bartext + ". Use the arrow keys to navigate the chart.")
        end
        return GetDescription()
    end
    
    /* 
        This action converts this chart to a text value that contains information 
        for a scalable vector graphics file. This is useful for saving charts to disk.
        Each sub-class of chart must implement this action separately.

        Attribute: Returns the Scalable Vector Graphics (SVG) text.
    */
    action ConvertToScalableVectorGraphics returns text
        BarChartWriter writer
        return writer:WriteOutChart(me)
    end

    /*
        This action saves this chart to disk at the position of the current file. To conduct the 
        conversion, the file extension is used. Only Scalable Vector Graphics (SVG) is currently 
        supported.

        Attribute: Parameter file the location of where to save the file.
    */
    action Save(File file)
        if file:GetFileExtension() = "svg"
            BarChartWriter chartWriter
            chartWriter:WriteOutChart(me,file)
        end
    end
end

