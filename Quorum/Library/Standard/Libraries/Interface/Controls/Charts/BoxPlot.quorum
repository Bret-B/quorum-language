package Libraries.Interface.Controls.Charts

use Libraries.Interface.Layouts.BoxPlotLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Gradient
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Array
use Libraries.Compute.Math
use Libraries.Interface.Controls.Icon
use Libraries.Interface.Controls.ControlLabel
use Libraries.Interface.Views.LabelBoxView
use Libraries.Interface.Selections.ChartSelection
use Libraries.Interface.Controls.Support.FirstLetterNavigator

/*
    The BoxPlot class is Chart object that inherits from Control and like other
    UI elements it is added to the Game class. 
    The Box Plot is used as an indication of how the values in the data are spread out. 
    Box Plots can also be used to compare datasets for more than one group. 
    The title label, axis labels, and scales can be modified. Any number of plots can be added.    

    Attribute: Author Christian Castillo, Hannah Williams

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Charts.BoxPlotCreator
    use Libraries.Interface.Controls.Charts.BoxPlot
    use Libraries.Game.Game
    
    class Main is Game
        action Main
            StartGame()
        end
    
        action CreateGame
            DataFrame frame
            frame:Load("Data/Data.csv")
            BoxPlotCreator creator
            creator:AddColumn(2)
        
            BoxPlot chart = cast(BoxPlot,frame:CreateChart(creator))
            chart:SetPercentageWidth(1)
            chart:SetPercentageHeight(1)
            chart:SetTitle("Sample Title")
            chart:SetXAxisTitle("X-axis Variable")
            chart:SetYAxisTitle("Y-axis Variable")
            Add(chart)
        end
    end
*/

class BoxPlot is Chart
    private integer numberOfPlots = 0
    Array<PlotGroup> plotGroups

    ColorGroup previousColorGroup = undefined
    Color previousColor = undefined
    number previousZ = 0

    ChartOptions options
    Math math

    private boolean showOutliers = true

    private number maxValue = 0
    private number minValue = 0
    private number maxOutlierValue = 0
    private number minOutlierValue = 0

    on create
        BoxPlotLayout layout
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:MAINTAIN_ASPECT_RATIO)
        properties:SetVerticalLayoutMode(properties:STANDARD)
        Font font = GetDefaultFont()
        properties:SetFont(font)
        properties:SetFontSize(GetDefaultFontSize())

        Color color
        Gradient gradient
        Color gray = color:LightGray()
        Color lightGray = color:CustomColor(0.9, 0.9, 0.9, 1)
        gradient:Set(gray, gray, lightGray, lightGray)

        properties:SetBackgroundColor(gradient)
        properties:SetBorderColor(color:Black())
        properties:SetBorderThickness(2)
        SetName("Box Plot")

        SetInputGroup("Chart")
        SetFocusable(true)
        SetAccessibilityCode(parent:Item:ITEM)

        SetDefaultShowBrackets(true)
        SetDefaultOrientationToVertical()
        GetVerticalPanel():BlockPaddingOffset(true)
        GetHorizontalPanel():BlockPaddingOffset(true)
    end

    /*
        LoadGraphics
        This action is used to load the graphical components of the Control. This is
        handled automatically by the Game engine as needed, and most users shouldn't
        need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        DisposeDrawables()
        if properties = undefined
            return now
        end
        parent:Chart:LoadGraphics(properties)

        LoadChartAreaItems()
    end

    action LoadChartAreaItems()
        ChartAreaPanel chartArea
        // Adding drawables for each boxplot to the chart
        integer i = 0
        repeat while i < plotGroups:GetSize()
            PlotGroup group = plotGroups:Get(i)
            integer k = 0
            repeat while k < group:GetSize()
                Plot plot = group:Get(k)
                number median = plot:GetInfoAt(0)
                number firstQ = plot:GetInfoAt(1)
                number thirdQ = plot:GetInfoAt(2)
                number minimum = plot:GetInfoAt(3)
                number maximum = plot:GetInfoAt(4)
                number iqr = thirdQ - firstQ

                // Minimum Line 
                Drawable minimumLine
                minimumLine:SetName("Minimum")
                minimumLine:SetDescription(" " + minimum + ".")
                if CheckIfInteger(minimum)
                    minimumLine:SetDescription(" " + cast(integer, minimum))
                else
                    minimumLine:SetDescription(" " + minimum)
                end
                minimumLine:SetFocusable(true)
                minimumLine:SetAccessibilityCode(0)
                // Lower Whisker Line
                Drawable lowerWhisker
                // Interquartile Range Region Area
                Drawable interQuartileRange
                interQuartileRange:SetName("Interquartile range")
                if CheckIfInteger(iqr)
                    interQuartileRange:SetDescription(" " + cast(integer, iqr))
                else
                    interQuartileRange:SetDescription(" " + iqr)
                end
                interQuartileRange:SetFocusable(true)
                interQuartileRange:SetAccessibilityCode(0)
                // Right Side of IQR
                Drawable rightBorder
                // Left Side of IQR
                Drawable leftBorder
                // Lower Quartile Line Q1
                Drawable firstQuartileLine
                firstQuartileLine:SetName("1st Quartile")
                if CheckIfInteger(firstQ)
                    firstQuartileLine:SetDescription(" " + cast(integer, firstQ))
                else
                    firstQuartileLine:SetDescription(" " + firstQ)
                end
                firstQuartileLine:SetFocusable(true)
                firstQuartileLine:SetAccessibilityCode(0)
                // Median Line (denser)
                Drawable medianLine
                medianLine:SetName("Median")
                if CheckIfInteger(median)
                    medianLine:SetDescription(" " + cast(integer, median))
                else
                    medianLine:SetDescription(" " + median)
                end
                medianLine:SetFocusable(true)
                medianLine:SetAccessibilityCode(0)
                // Upper Quartile Line Q3
                Drawable thirdQuartileLine
                thirdQuartileLine:SetName("3rd Quartile")
                if CheckIfInteger(thirdQ)
                    thirdQuartileLine:SetDescription(" " + cast(integer, thirdQ))
                else
                    thirdQuartileLine:SetDescription(" " + thirdQ)
                end
                thirdQuartileLine:SetFocusable(true)
                thirdQuartileLine:SetAccessibilityCode(0)
                // Upper Whisker Line
                Drawable upperWhisker
                // Maximum Line
                Drawable maximumLine
                maximumLine:SetName("Maximum")
                if CheckIfInteger(maximum)
                    maximumLine:SetDescription(" " + cast(integer, maximum))
                else
                    maximumLine:SetDescription(" " + maximum)
                end
                maximumLine:SetFocusable(true)
                maximumLine:SetAccessibilityCode(0)
                // Plot Area Outline Panel
                Icon plotArea
                plotArea:SetName(group:Get(k):GetName() + " box plot")
                plotArea:SetFocusable(true)
                plotArea:SetAccessibilityCode(0)

                if not HasGroups()
                    plotArea:SetName(group:GetName() + ", ")
                    plotArea:SetDescription((i+1) + " of " + plotGroups:GetSize() + " box plots")
                end
    
                if IsSeparatedByFactor()
                    plotArea:SetName(group:GetName() + ", ")
                    plotArea:SetDescription((i+1) + " of " + plotGroups:GetSize() + " box plots")
                    integer j = 0
                    repeat while j < GetNumberOfChartAreas()
                        if plot:GetSeries() = GetSubChartAreas():Get(j):GetSeries()
                            chartArea = GetSubChartAreas():Get(j)
                            chartArea:AddChartAreaItem(plot)
                        end
                        j = j + 1
                    end
                else
                    chartArea = GetChartArea()
                end

                // Add to chart
                chartArea:Add(rightBorder)
                chartArea:Add(leftBorder)
                chartArea:Add(lowerWhisker)
                chartArea:Add(upperWhisker)
                chartArea:Add(minimumLine)
                chartArea:Add(firstQuartileLine)
                chartArea:Add(medianLine)
                chartArea:Add(thirdQuartileLine)
                chartArea:Add(maximumLine)
                chartArea:Add(interQuartileRange)  //Place on top of others
                chartArea:Add(plotArea)
                //Add the outliers
    
                /* Indices for items of individual box plot
                    0: PLOT AREA (ENTIRE REGION)
                    1: MINIMUM LINE
                    2: LOWER WHISKER
                    3: INTERQUARTILE RANGE
                    4: RIGHT BORDER OF IQR
                    5: LEFT BORDER OF IQR
                    6: Q1 LINE
                    7: MEDIAN LINE
                    8: Q3 LINE
                    9: UPPER WHISKER    
                    10: MAXIMUM LINE 
                    11+: OUTLIER POINTS
                */
                plot:AddItem(plotArea)
                plot:AddItem(minimumLine)      
                plot:AddItem(lowerWhisker)
                plot:AddItem(interQuartileRange)
                plot:AddItem(rightBorder)
                plot:AddItem(leftBorder)
                plot:AddItem(firstQuartileLine)
                plot:AddItem(medianLine)
                plot:AddItem(thirdQuartileLine)
                plot:AddItem(upperWhisker)
                plot:AddItem(maximumLine)
                //Add the outliers

                if GetOutliersFlag()
                    // Outliers ++
                    Array <number> outliers = plot:GetOutliers()
                    integer j = 0
                    repeat while j < outliers:GetSize()
                        Drawable outlier
                        outlier:SetName("Outlier")
                        if CheckIfInteger(outliers:Get(j))
                            outlier:SetDescription(" " + cast(integer, outliers:Get(j)))
                        else
                            outlier:SetDescription(" " + outliers:Get(j))
                        end
                        outlier:SetFocusable(true)
                        outlier:SetAccessibilityCode(0)
                        chartArea:Add(outlier)
                        plot:AddItem(outlier)
                        j = j + 1
                    end
                end
                k = k + 1
            end

            // Area covering entire group panel
            Icon panel
            panel:SetName(group:GetName() + " group, ")
            panel:SetDescription((i+1) + " of " + plotGroups:GetSize() + " groups, has " + group:GetSize() + " box plots.")
            panel:SetFocusable(true)
            panel:SetAccessibilityCode(0)
            chartArea:Add(panel)
            group:SetItem(panel)
            GetGroupPanels():Add(panel)
            i = i + 1
        end
    end

    private action CheckIfInteger(number value) returns boolean
        return (cast(integer, value) = value)
    end

    /*
        DisposeDrawables
        
        Empties drawables from the chart area.
    */
    action DisposeDrawables
        parent:Chart:DisposeDrawables()
        Control chartArea = me:GetChartArea()
        integer i = 0
        repeat while i < plotGroups:GetSize()
            integer j = 0
            repeat while j < plotGroups:Get(i):GetSize()
                Array<Drawable> items = plotGroups:Get(i):Get(j):GetPlotItems()
                integer k = 0
                repeat while k < items:GetSize()
                    if items:Get(k) not= undefined
                        Drawable target = items:Get(k)
                        target:Dispose()
                        chartArea:Remove(target)
                    end
                    k = k + 1
                end
                items:Empty()
                j = j + 1
            end
            if plotGroups:Get(i):GetItem() not= undefined
                Drawable target = plotGroups:Get(i):GetItem()
                target:Dispose()
                chartArea:Remove(target)
            end
            i = i + 1
        end
        chartArea:Empty()
    end

    /*
        LostSelection is a supplemental action to the parent Chart's LostSelection.
        Any items specific to only this type of chart or if an item needs different highlighting
        instructions than that of the parent class, it will have their LostSelection defined here.

        Unlike many kinds of user interface controls, there is no universal way of interacting with a chart and, as such, this 
        may be defined by any chart to be custom. As such, charts must be able to take messages suggesting an item in the chart
        has either lost or gained the focus. Broadly speaking, this is done automatically and while charts need to implement
        this action, they do not need to call this action directly.

        Attribute: Parameter ci the ChartItem representing the structure for this particular kind of chart. 
    */
    action LostSelection(ChartItem ci)
        if ci = undefined
            return now
        end
        Item target = ci:GetFocusTarget()

        if target not= undefined
            if target is Series
                Series temp = cast(Series, target)
                integer i = 0
                repeat while i < temp:GetSize()
                    Plot plot = cast(Plot, temp:GetItemAt(i+1))
                    integer j = 1
                    repeat while j < plot:GetPlotItems():GetSize()
                        Drawable item = plot:GetPlotItems():Get(j)
                        if j = 3
                            item:SetColor(previousColor)
                        else
                            item:SetColor(0,0,0,1)
                        end
                        j = j + 1
                    end
                    i = i + 2
                end
                temp:GetLabel():LostSelection()
                temp:GetIcon():SetColor(previousColor)
            else
                parent:Chart:LostSelection(ci)
            end
        end
    end

    /* 
        GainedSelection is a supplemental action to the parent Chart's GainedSelection.
        Any items specific to only this type of chart or if an item needs different highlighting
        instructions than that of the parent class, it will have their GainedSelection defined here.

        Unlike many kinds of user interface controls, there is no universal way of interacting with a chart and, as such, this 
        may be defined by any chart to be custom. As such, charts must be able to take messages suggesting an item in the chart
        has either lost or gained the focus. Broadly speaking, this is done automatically and while charts need to implement
        this action, they do not need to call this action directly.

        Attribute: Parameter ci the ChartItem representing the structure for this particular kind of chart. 
    */
    action GainedSelection(ChartItem ci)
        if ci = undefined
            return now
        end
        Item target = ci:GetFocusTarget()

        if target not= undefined
            target:Focus()
            if target is Series
                Series temp = cast(Series, target)
                previousColor = temp:GetColor()
                integer i = 0
                repeat while i < temp:GetSize()
                    Plot plot = cast(Plot, temp:GetItemAt(i+1))
                    integer j = 1
                    repeat while j < plot:GetPlotItems():GetSize()
                        Drawable item = plot:GetPlotItems():Get(j)
                        item:SetColor(GetHighlightColor())
                        j = j + 1
                    end
                    i = i + 2
                end
                temp:GetLabel():GainedSelection()
                temp:GetIcon():SetColor(GetHighlightColor())
            else
                parent:Chart:GainedSelection(ci)
            end            
        end
    end

    /*
        Flag used to hide all the outliers.
    */
    action HideOutliers()
        showOutliers = false
    end

    /*
        Returns the value of the showOutlier flag.
    */
    action GetOutliersFlag() returns boolean
        return showOutliers
    end

    /*
        Appends a plotgroup.
    */
    action AddPlotGroup(PlotGroup group)
        if maxValue < group:GetMaxValue()
            maxValue = group:GetMaxValue()
        end
        if minValue > group:GetMinValue()
            minValue = group:GetMinValue()
        end
        if maxOutlierValue < group:GetMaxOutlierValue()
            maxOutlierValue = group:GetMaxOutlierValue()
        end
        if minOutlierValue > group:GetMinOutlierValue()
            minOutlierValue = group:GetMinOutlierValue()
        end
        plotGroups:Add(group)
        if group:GetSize() > 1
            HasGroups(true)
        end
        numberOfPlots = numberOfPlots + group:GetSize()
    end
   
    /*
        Returns an array of all the plot groups
    */
    action GetPlotGroups returns Array<PlotGroup>
        return plotGroups
    end

    /* 
        Max and min value will track the highest and lowest values and limit the axis controls to not pass that value.
    */ 
    action SetXAxisMaximum(number max)
        if GetVerticalFlag()
            parent:Chart:SetXAxisMaximum(max)
        else
            number currXmax = maxValue
            if showOutliers
                currXmax = maxOutlierValue
            end
            if max >= currXmax
                parent:Chart:SetXAxisMaximum(max)
            else
                output "X-axis maximum cannot be below the highest plot value: " + currXmax
            end
        end
    end

    action SetXAxisMinimum(number min)
        if GetVerticalFlag()
            parent:Chart:SetXAxisMinimum(min)
        else
            number currXmin = minValue
            if showOutliers
                currXmin = minOutlierValue
            end
            if min <= currXmin
                parent:Chart:SetXAxisMinimum(min)
            else
                output "X-axis minimum cannot be above the lowest plot value: " + currXmin
            end
        end
    end

    action SetYAxisMaximum(number max)
        if GetHorizontalFlag()
            parent:Chart:SetYAxisMaximum(max)
        else
            number currYmax = maxValue
            if showOutliers
                currYmax = maxOutlierValue
            end
            if max >= currYmax
                parent:Chart:SetYAxisMaximum(max)
            else
                output "Y-axis maximum cannot be below highest plot maximum value: " + currYmax
            end
        end
    end

    action SetYAxisMinimum(number min)
        if GetHorizontalFlag()
            parent:Chart:SetYAxisMinimum(min)
        else
            number currYmin = minValue
            if showOutliers
                currYmin = minOutlierValue
            end
            if min <= currYmin
                parent:Chart:SetYAxisMinimum(min)
            else
                output "Y-axis minimum cannot be above the lowest plot value: " + currYmin
            end
        end
    end
    /*
        This is called by GenerateInfoTree to generate the summary that is heard when
        you first focus on the chart. Also the highest level of the information tree
        of  the chart.
    */
    action GenerateSummary returns text
        text grouptext = ""
        if HasGroups()
            text groups = " groups and "
            if GetPlotGroups():GetSize() = 1
                groups = " group and "
            end
            grouptext = GetPlotGroups():GetSize() + groups
        end
        text plottext = numberOfPlots + " plots"
        if numberOfPlots = 1
            plottext = numberOfPlots + " plot"
        end
        if GetName() = "Box Plot"
            SetDescription(" with " + grouptext + plottext + ". Use the arrow keys to navigate the chart.")
        else
            SetDescription("Box plot with " + grouptext + plottext + ". Use the arrow keys to navigate the chart.")
        end
        return GetDescription()
    end


    /*
        GenerateInfoTree
        Generates the tree of ChartItems that define how the chart will be 
        navigated and what extra information might be sent to the screen reader.
    */
    action GenerateInfoTree
        if GetDefaultLayoutProperties():NeedsRendering()
            return now //we haven't loaded graphics yet, so bail.
        end
        
        //NOTE: These nodes implement a cheap form of ordinality might need changing
        ChartItem xAxis
        ChartItem yAxis
        ChartItem chartArea //not to be confused with panels
        ChartItem summary = GetInfoTreeRoot()
        // The chart area is the child unless y-axis is showing.
        summary:SetDisplayName(GenerateSummary())
        summary:SetChild(chartArea)
        summary:SetContainer(me)
        summary:SetFocusTarget(me)
        chartArea:SetFocusTarget(me:GetChartArea())
        chartArea:SetParent(summary)
        chartArea:SetContainer(me)

        chartArea:SetDisplayName("Box Plot")
        if HasGroups()
            me:GetChartArea():SetDescription(" with " + plotGroups:GetSize() + " groups")
        else
            me:GetChartArea():SetDescription(" with " + plotGroups:GetSize() + " box plots")
        end
    
        // If any of these are not showing the tree will skip them in the navigation        
        if IsShowingYAxis()
            GetVerticalPanel():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end
        if IsShowingXAxis()
            GetHorizontalPanel():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end
        if IsShowingLegend()
            GetLegend():GenerateInfoTree(me, summary, chartArea, yAxis, xAxis)
        end
        
        if IsSeparatedByFactor()
            //Chart Areas
            integer subAreaCount = GetLegend():GetSeriesList():GetSize()
            ChartItem firstArea
            firstArea:SetContainer(me)
            if GetNumberOfChartAreas() > 0
                GetChartArea():SetDescription(" with " + subAreaCount + " sub charts")
                chartArea:SetChild(firstArea)
                firstArea:SetParent(chartArea)
                firstArea:SetFocusTarget(GetSubChartAreas():Get(0))
                firstArea:SetDisplayName(GetSubChartAreas():Get(0):GetTitleName())
                Array <Item> chartAreaItems = GetSubChartAreas():Get(0):GetChartAreaItems()
                GetSubChartAreas():Get(0):SetName(GetSubChartAreas():Get(0):GetSeries():GetName())
                GetSubChartAreas():Get(0):SetDescription(" chart area with " + chartAreaItems:GetSize() + " plots, 1 of " + subAreaCount + " sub charts.")

                //Plots within Chart Areas
                if chartAreaItems:GetSize() > 0 
                    ChartItem prev_target
                    integer k = 0
                    repeat while k < chartAreaItems:GetSize()
                        ChartItem next_target
                        if not (chartAreaItems:Get(k) is Plot)
                            return now
                        end
                        Plot plot = cast(Plot, chartAreaItems:Get(k))
                        Array<Drawable> items = plot:GetPlotItems() //First plot
                        if k = 0
                            firstArea:SetChild(next_target)
                        else
                            next_target:SetPrevious(prev_target)
                            prev_target:SetNext(next_target)
                        end
                        
                        next_target:SetContainer(me)
                        next_target:SetDisplayName(items:Get(0):GetName()) 
                        next_target:SetFocusTarget(items:Get(0))  
                        next_target:SetParent(firstArea)
                        prev_target = next_target    
                        ChartItem previous
                        integer target_index = 0
                        integer index = 0
                        repeat while index < items:GetSize()
                            Drawable item = items:Get(index)
                            Drawable lastItem = items:Get(items:GetSize() - 1)
                            text Description = item:GetDescription()
                    
                            if Description not= ""
            
                                ChartItem next
                                if target_index = 0
                                    next_target:SetChild(next)
                                else
                                    next:SetPrevious(previous)
                                    previous:SetNext(next)
                                end
                                next:SetContainer(me)
                                next:SetDisplayName(item:GetName()) 
                                next:SetFocusTarget(item)
                                next:SetParent(next_target)
                                
                                previous = next
                                target_index = target_index+1 
                            end
                            index = index + 1
                        end
                        next_target:SetLastChild(previous)
                        k = k + 1
                    end
                    firstArea:SetLastChild(prev_target)
                end
            end

            i = 1
            ChartItem previousArea = firstArea
            repeat while i < GetNumberOfChartAreas()
                ChartAreaPanel chartSubArea = GetSubChartAreas():Get(i)
                if chartSubArea:GetIsShowing()
                    ChartItem nextArea
                    nextArea:SetContainer(me)
                    nextArea:SetParent(chartArea)
                    nextArea:SetFocusTarget(chartSubArea)
                    previousArea:SetNext(nextArea)
                    nextArea:SetPrevious(previousArea)
                    previousArea = nextArea
                    nextArea:SetDisplayName(chartSubArea:GetTitleName())
                    Array <Item> chartAreaItems = chartSubArea:GetChartAreaItems()
                    chartSubArea:SetName(chartSubArea:GetSeries():GetName())
                    chartSubArea:SetDescription(" chart area with " + chartAreaItems:GetSize() + " plots, " + (i+1) + " of " + subAreaCount + " sub charts.")

                    //Plots within Plot Groups
                    if chartAreaItems:GetSize() > 0 
                        ChartItem prev_target
                        integer k = 0
                        repeat while k < chartAreaItems:GetSize()
                            ChartItem next_target
                            if not (chartAreaItems:Get(k) is Plot)
                                return now
                            end
                            Plot plot = cast(Plot, chartAreaItems:Get(k))
                            Array<Drawable> items = plot:GetPlotItems() //First plot
                            if k = 0
                                nextArea:SetChild(next_target)
                            else
                                next_target:SetPrevious(prev_target)
                                prev_target:SetNext(next_target)
                            end
    
                            next_target:SetContainer(me)
                            next_target:SetDisplayName(items:Get(0):GetName()) 
                            next_target:SetFocusTarget(items:Get(0))  
                            next_target:SetParent(nextArea)
                            prev_target = next_target      
                            ChartItem previous
                            integer target_index = 0
                            integer index = 0
                            repeat while index < items:GetSize()
                                Drawable item = items:Get(index)
                                Drawable lastItem = items:Get(items:GetSize() - 1)
                                text Description = item:GetDescription()
                        
                                if Description not= ""
                
                                    ChartItem next
                                    if target_index = 0
                                        next_target:SetChild(next)
                                    else
                                        next:SetPrevious(previous)
                                        previous:SetNext(next)
                                    end
                                    next:SetContainer(me)
                                    next:SetDisplayName(item:GetName()) 
                                    next:SetFocusTarget(item)
                                    next:SetParent(next_target)
                                    
                                    previous = next
                                    target_index = target_index+1 
                                end
                                index = index + 1
                            end
                            next_target:SetLastChild(previous)
                            k = k + 1
                        end
                        nextArea:SetLastChild(prev_target)
                    end
                end
                i = i + 1
            end
            chartArea:SetLastChild(previousArea)
        else
            if HasGroups()
                //Plot Groups
                ChartItem firstGroup
                firstGroup:SetContainer(me)
                if plotGroups:GetSize() > 0
                    chartArea:SetChild(firstGroup)
                    firstGroup:SetParent(chartArea)
                    firstGroup:SetFocusTarget(plotGroups:Get(0):GetItem())
                    firstGroup:SetDisplayName(plotGroups:Get(0):GetName())
        
                    //Plots within Plot Groups
                    if plotGroups:Get(0):GetSize() > 0 
                        ChartItem prev_target
                        integer k = 0
                        repeat while k < plotGroups:Get(0):GetSize()
                            ChartItem next_target
                            Array<Drawable> items = plotGroups:Get(0):Get(k):GetPlotItems() //First plot
                            if k = 0
                                firstGroup:SetChild(next_target)
                            else
                                next_target:SetPrevious(prev_target)
                                prev_target:SetNext(next_target)
                            end
                            
                            next_target:SetContainer(me)
                            next_target:SetDisplayName(items:Get(0):GetName()) 
                            next_target:SetFocusTarget(items:Get(0))  
                            next_target:SetParent(firstGroup)
                            prev_target = next_target    
                            ChartItem previous
                            integer target_index = 0
                            integer index = 0
                            repeat while index < items:GetSize()
                                Drawable item = items:Get(index)
                                Drawable lastItem = items:Get(items:GetSize() - 1)
                                text Description = item:GetDescription()
                      
                                if Description not= ""
                
                                    ChartItem next
                                    if target_index = 0
                                        next_target:SetChild(next)
                                    else
                                        next:SetPrevious(previous)
                                        previous:SetNext(next)
                                    end
                                    next:SetContainer(me)
                                    next:SetDisplayName(item:GetName()) 
                                    next:SetFocusTarget(item)
                                    next:SetParent(next_target)
                                    
                                    previous = next
                                    target_index = target_index+1 
                                end
                                index = index + 1
                            end
                            next_target:SetLastChild(previous)
                            k = k + 1
                        end
                        firstGroup:SetLastChild(prev_target)
                    end
                end
        
                i = 1
                ChartItem previousGroup = firstGroup
                repeat while i < plotGroups:GetSize()
                    ChartItem group
                    group:SetContainer(me)
                    group:SetParent(chartArea)
                    group:SetFocusTarget(plotGroups:Get(i):GetItem())
                    group:SetDisplayName(plotGroups:Get(i):GetName())
                    previousGroup:SetNext(group)
                    group:SetPrevious(previousGroup)
                    previousGroup = group
    
                    //Plots within Plot Groups
                    if plotGroups:Get(i):GetSize() > 0 
                        ChartItem prev_target
                        integer k = 0
                        repeat while k < plotGroups:Get(i):GetSize()
                            ChartItem next_target
                            Array<Drawable> items = plotGroups:Get(i):Get(k):GetPlotItems() //First plot
                            if k = 0
                                group:SetChild(next_target)
                            else
                                next_target:SetPrevious(prev_target)
                                prev_target:SetNext(next_target)
                            end
    
                            next_target:SetContainer(me)
                            next_target:SetDisplayName(items:Get(0):GetName()) 
                            next_target:SetFocusTarget(items:Get(0))  
                            next_target:SetParent(group)
                            prev_target = next_target      
                            ChartItem previous
                            integer target_index = 0
                            integer index = 0
                            repeat while index < items:GetSize()
                                Drawable item = items:Get(index)
                                Drawable lastItem = items:Get(items:GetSize() - 1)
                                text Description = item:GetDescription()
                      
                                if Description not= ""
                
                                    ChartItem next
                                    if target_index = 0
                                        next_target:SetChild(next)
                                    else
                                        next:SetPrevious(previous)
                                        previous:SetNext(next)
                                    end
                                    next:SetContainer(me)
                                    next:SetDisplayName(item:GetName()) 
                                    next:SetFocusTarget(item)
                                    next:SetParent(next_target)
                                    
                                    previous = next
                                    target_index = target_index+1 
                                end
                                index = index + 1
                            end
                            next_target:SetLastChild(previous)
                            k = k + 1
                        end
                        group:SetLastChild(prev_target)
                    end
                    i = i + 1
                end
                chartArea:SetLastChild(previousGroup)
            else
                ChartItem prev_target
                integer k = 0
                repeat while k < plotGroups:GetSize()
                    ChartItem next_target
                    Array<Drawable> items = plotGroups:Get(k):Get(0):GetPlotItems() //First plot
                    if k = 0
                        chartArea:SetChild(next_target)
                    else
                        next_target:SetPrevious(prev_target)
                        prev_target:SetNext(next_target)
                    end
    
                    next_target:SetContainer(me)
                    next_target:SetDisplayName(items:Get(0):GetName()) 
                    next_target:SetFocusTarget(items:Get(0))  
                    next_target:SetParent(chartArea)
                    prev_target = next_target      
                    ChartItem previous
                    integer target_index = 0
                    integer index = 0
                    repeat while index < items:GetSize()
                        Drawable item = items:Get(index)
                        Drawable lastItem = items:Get(items:GetSize() - 1)
                        text Description = item:GetDescription()
                
                        if Description not= ""
        
                            ChartItem next
                            if target_index = 0
                                next_target:SetChild(next)
                            else
                                next:SetPrevious(previous)
                                previous:SetNext(next)
                            end
                            next:SetContainer(me)
                            next:SetDisplayName(item:GetName()) 
                            next:SetFocusTarget(item)
                            next:SetParent(next_target)
                            
                            previous = next
                            target_index = target_index+1 
                        end
                        index = index + 1
                    end
                    next_target:SetLastChild(previous)
                    k = k + 1
                end
                chartArea:SetLastChild(prev_target)
            end
        end
        
        ChartSelection selection = GetSelection()
        selection:Set(summary)
            
    end
   
    /* 
        This action converts this chart to a text value that contains information 
        for a scalable vector graphics file. This is useful for saving charts to disk.
        Each sub-class of chart must implement this action separately.

        Attribute: Returns the Scalable Vector Graphics (SVG) text.
    */
    action ConvertToScalableVectorGraphics returns text
        BoxPlotWriter writer
        return writer:WriteOutChart(me)
    end
end
