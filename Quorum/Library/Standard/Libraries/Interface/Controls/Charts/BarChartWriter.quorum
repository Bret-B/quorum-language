package Libraries.Interface.Controls.Charts

use Libraries.System.File
use Libraries.Interface.Controls.Charts.BarChart
use Libraries.Data.Formats.ScalableVectorGraphics.ScalableVectorGraphics
use Libraries.Data.Formats.ScalableVectorGraphics.Line
use Libraries.Containers.Array
use Libraries.Data.Formats.ScalableVectorGraphics.Rectangle
use Libraries.Data.Formats.ScalableVectorGraphics.Label
use Libraries.System.FileWriter
use Libraries.Compute.Math
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Game.Graphics.Color
use Libraries.Web.Page.Script
use Libraries.Interface.Controls.ControlLabel
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.ListItem

/*
    The BarChartWriter class is part of the set of writers that allow for Charts
    to save their representation in the form ScalableVectorGraphics. This class will write out
    all of the necessary text needed to write out an SVG file that will contain the chart.

    Attribute: Author Gabriel Contreras

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.BarChart
    use Libraries.Interface.Controls.Charts.BarChartWriter
    
    DataFrame frame
    frame:Load("Data.csv")
    frame:SetSelectedColumnRange(0,1)
    BarChart chart = frame:BarChart()
    chart:SetTitle("My Awesome Title")
    chart:SetXAxisTitle("Time")
    chart:Display()

    BarChartWriter writer
    output writer:WriteOutChart(chart)
*/

class BarChartWriter is ChartWriter

    private number outerEdgePadding = 0
    private number betweenGroupPadding = 0
    private number betweenBarPadding = 0
    private number barWidthPercent = 0
    private number barHeightPercent = 0
    
    Array<Rectangle> bars

    action WriteOutChart(BarChart chart, integer svgWidth, integer svgHeight) returns text
        return WriteOutChart(cast(Chart,chart), svgWidth, svgHeight)
    end

    action WriteOutChart(BarChart chart, File file, integer svgWidth, integer svgHeight)
        WriteOutChart(cast(Chart,chart), file, svgWidth, svgHeight)
    end

    action WriteOutChart(BarChart chart) returns text
        return WriteOutChart(cast(Chart,chart))
    end

    action WriteOutChart(BarChart chart, File file)
        WriteOutChart(cast(Chart,chart), file)
    end

    /*
        This action adds a white background to the canvas
    */
    action AddChartArea(ScalableVectorGraphics canvas, Chart chart)
        parent:ChartWriter:AddChartArea(canvas,chart)
        
        BarChart barChart
        barChart = cast(BarChart, chart)

        if HasAccessibility()
            GetChartArea():SetAriaLabel("Chart Area " + barChart:GetNumberOfBars() + " bars.")
        end
    end

    /*
        This action adds the content of the BarChart
    */
    private action AddChartContent(ScalableVectorGraphics canvas, Chart chart)
        BarChart barChart
        barChart = cast(BarChart, chart)
        AddBars(canvas, barChart)
    end

    /*
        This action adds the content of the BarChart to the SVG
    */

    private action AddBars(ScalableVectorGraphics canvas, BarChart chart)
        integer i = 0
        repeat while i < GetGroupPanels():GetSize()
            canvas:Add(GetGroupPanels():Get(i))
            i = i + 1
        end
        
        i = 0
        repeat while i < bars:GetSize()
            canvas:Add(bars:Get(i))
            i = i + 1
        end
    end

    /*
        This action adds the content of the BarChart
    */
    private action LayoutChartContent(ScalableVectorGraphics canvas, Chart chart)
        BarChart barChart
        barChart = cast(BarChart, chart)
        LayoutBars(canvas, barChart)
    end

    /*
        This action creates the Rectangles and sizes them for the content of the BarChart
    */
    private action LayoutBars(ScalableVectorGraphics canvas, BarChart chart)
        
        number axisLengthX = GetChartAreaWidth()
        number axisPointX = GetChartAreaPositionX()
        number axisLengthY = GetChartAreaHeight()
        number axisPointY = GetChartAreaPositionY()

        Array<BarGroup> chartBarGroups = chart:GetBarGroups()

        Color transparent
        transparent:SetColor(0, 0, 0, 0)

        if chartBarGroups:GetSize() > 0
            number numberOfGroups = chartBarGroups:GetSize()
            number numberOfBars = chart:GetNumberOfBars()

            number height = GetChartAreaHeight()
            number width = GetChartAreaWidth()
            number yMax = chart:GetYAxisMaximum()
            number yMin = chart:GetYAxisMinimum()
            number xMax = chart:GetXAxisMaximum()
            number xMin = chart:GetXAxisMinimum()
            number rangeMax = yMax
            number rangeMin = yMin
    
            boolean horizontal = chart:GetHorizontalFlag() // Default is vertical
            boolean stacked = chart:GetStackedFlag()

            if stacked
                numberOfBars = numberOfGroups
            end
            if horizontal
                width = GetChartAreaHeight()
                height = GetChartAreaWidth()
                rangeMax = xMax
                rangeMin = xMin
            end

            // Space on each side of the inner chart (5%)
            outerEdgePadding = (width * 0.05) / 2

            if chartBarGroups:GetSize() > 1
                // Space spread evenly between each bar group (10%)
                betweenGroupPadding = ((width * 0.1) / (numberOfGroups-1))
            end

            SetPaddedChartOffset(outerEdgePadding - betweenGroupPadding/2)

            // Space spread evenly between each bar with the bar groups (5%)
            betweenBarPadding = ((width * 0.05) / (numberOfBars - numberOfGroups+1))
            if stacked 
                betweenBarPadding = 0
            end
            if chart:RemoveGaps() //Histograms do not have gaps in order to portray continuous ranges
                betweenGroupPadding = 1
                betweenBarPadding = 0
            end

            // Total white space alloted for inner chart area
            number totalPadding = outerEdgePadding*2 + betweenGroupPadding*(numberOfGroups-1)
            totalPadding = totalPadding + betweenBarPadding*(numberOfBars - numberOfGroups)
            
            // Remaining non-white space to be evenly divided amongst all bars (80%)
            remainingArea = width - totalPadding
            barWidthPercent = remainingArea / numberOfBars
        
            number currentXPosition = axisPointX + outerEdgePadding
            number currentYPosition = axisPointY
            
            if horizontal
                currentXPosition = axisPointY - axisLengthY + outerEdgePadding
                currentYPosition = axisPointX
            end
            // Tracking area of each bar group for group icon

            number groupX = currentXPosition    // x-axis coordinate
            number groupY = 0                   // y-axis coordinate
            number groupWidth = 0               // width of entire group
            number groupHeight = 0              // height of entire group

            number dataScale = chart:GetYAxisMaximum()/axisLengthY

            integer i = 0
            repeat while i < chartBarGroups:GetSize()
                BarGroup currentGroup = chartBarGroups:Get(i)
                integer j = 0
                repeat while j < currentGroup:GetSize()
                    Bar bar
                    integer barIter = j
                     // We want to stack/display so it keeps the same order as the legend
                    /*
                    if stacked
                        if horizontal
                            bar = currentGroup:Get(j)
                        else
                            barIter = currentGroup:GetSize()-1-j
                            bar = currentGroup:Get(currentGroup:GetSize()-1-j)
                        end
                    else
                        if horizontal
                            barIter = currentGroup:GetSize()-1-j
                            bar = currentGroup:Get(chartBarGroups:Get(i):GetSize()-1-j)
                        else
                            bar = currentGroup:Get(j)
                        end
                    end
                    */
                    bar = currentGroup:Get(j)

                    barHeightPercent = ((bar:GetValue()-rangeMin)/(rangeMax-rangeMin)) * height
                    
                    Rectangle tempBar
                    if barHeightPercent >= 0 

                        //Find max height for barGroup Icon
                        if(barHeightPercent > groupHeight) and not stacked
                            groupHeight = barHeightPercent
                        elseif stacked
                            groupHeight = groupHeight + barHeightPercent
                        end
    
                        if horizontal
                            tempBar:SetWidth(barHeightPercent, "%")
                            tempBar:SetHeight(barWidthPercent, "%")
                            tempBar:SetPosition(currentYPosition,currentXPosition, "%")
                            
                            if stacked
                                currentYPosition = currentYPosition + barHeightPercent
                            else
                                currentXPosition = currentXPosition + barWidthPercent + betweenBarPadding
                            end
                        else
                            tempBar:SetWidth(barWidthPercent, "%")
                            tempBar:SetHeight(barHeightPercent, "%")
                            tempBar:SetPosition(currentXPosition,currentYPosition-barHeightPercent, "%")

                            if stacked
                                currentYPosition = currentYPosition - barHeightPercent
                            else
                                currentXPosition = currentXPosition + barWidthPercent + betweenBarPadding
                            end
                        end
                    else
                        if not stacked
                            currentXPosition = currentXPosition + barWidthPercent + betweenBarPadding
                        end
                    end

                    tempBar:SetFill(bar:GetIcon():GetColor())
                    tempBar:SetID(canvas:GetID() + "-" + bar:GetHashCode())
                    tempBar:SetTabIndex(-1)
                    if HasAccessibility()
                        Math math
                        
                        if(chart:HasBarGroups())
                            tempBar:SetAriaLabel(bar:GetIcon():GetName() + ", " + math:Round(bar:GetValue(),2) +  ", " + (j + 1) + " of " + currentGroup:GetSize() + " bars inside Bar Group " + (i + 1) + ", " + currentGroup:GetName())
                        else
                            tempBar:SetAriaLabel(bar:GetIcon():GetName() + ", " + math:Round(bar:GetValue(),2) +  ", " + (i + 1) + " of " + currentGroup:GetSize() + " bars")
                        end
                    end
                    bars:Add(tempBar)

                    j = j + 1
                end
            
                if(chart:HasBarGroups())
                    Rectangle tempGroup
                    number padding = betweenGroupPadding/2
                    if stacked
                        if horizontal
                            tempGroup:SetWidth(groupHeight + padding, "%")
                            tempGroup:SetHeight(barWidthPercent + betweenGroupPadding, "%")
                            tempGroup:SetPosition(axisPointX, groupX - barWidthPercent - betweenGroupPadding/2, "%") 
                            currentXPosition = currentXPosition + barWidthPercent + betweenGroupPadding
                        else
                            tempGroup:SetWidth(barWidthPercent + betweenGroupPadding, "%")
                            tempGroup:SetHeight(groupHeight + padding, "%")
                            tempGroup:SetPosition(groupX - betweenGroupPadding/2, axisPointY - groupHeight - padding, "%")
                            currentXPosition = currentXPosition + barWidthPercent + betweenGroupPadding  
                        end
                    else
                        if horizontal
                            groupWidth = currentXPosition - betweenBarPadding - groupX + betweenGroupPadding
                            currentXPosition = currentXPosition + betweenGroupPadding - betweenBarPadding
                            tempGroup:SetWidth(groupHeight + padding, "%")
                            tempGroup:SetHeight(groupWidth, "%")
                            tempGroup:SetPosition(axisPointX, groupX - betweenGroupPadding/2, "%") 
                        else
                            groupWidth = currentXPosition - betweenBarPadding - groupX + betweenGroupPadding
                            currentXPosition = currentXPosition + betweenGroupPadding - betweenBarPadding
                            tempGroup:SetWidth(groupWidth, "%")
                            tempGroup:SetHeight(groupHeight + padding, "%")
                            tempGroup:SetPosition(groupX - betweenGroupPadding/2, axisPointY - groupHeight - padding, "%")  
                        end
                    end
                    
                    tempGroup:SetFill(transparent)
                    tempGroup:SetID(canvas:GetID() + "-" + currentGroup:GetHashCode())
                    tempGroup:SetTabIndex(-1)
                    if HasAccessibility()
                        //Should move all of the Name/Description initialization out of GenerateInfoTree calls in Chart library
                        //tempGroup:SetAriaLabel(currentGroup:GetIcon():GetName() + " " + currentGroup:GetIcon():GetDescription())
                        tempGroup:SetAriaLabel(currentGroup:GetIcon():GetName() + ", " + (i + 1) + " of " + chartBarGroups:GetSize() + " groups, " + currentGroup:GetName())
                    end
                    GetGroupPanels():Add(tempGroup)
                    
                    if horizontal
                        currentYPosition = axisPointX
                    else
                        currentYPosition = axisPointY
                    end
                    groupHeight = 0
                    groupX = currentXPosition
                end

                i = i + 1
            end
        end
    end

    action AddChartContentAccessibility(ScalableVectorGraphics canvas, Chart chart, ListItem chartAreaItem)
        
        BarChart barChart
        barChart = cast(BarChart, chart)
        Array<BarGroup> barGroups = barChart:GetBarGroups()

        UnorderedList barGroupsUL
        barGroupsUL:AddAttribute("role","group")
        chartAreaItem:AddNestedTag(barGroupsUL)
        
        UnorderedList currentGrouping = barGroupsUL
        i = 0
        repeat while i < barGroups:GetSize()
            if barChart:HasBarGroups()
                ListItem barGroupNav 
                barGroupNav:SetIdentifier(canvas:GetID() + "-" + barGroups:Get(i):GetHashCode() + "-nav")
                barGroupNav:AddAttribute("role","treeitem")
                barGroupNav:AddAttribute("aria-labelledby",canvas:GetID() + "-" + barGroups:Get(i):GetHashCode())
                barGroupNav:AddAttribute("aria-expanded","false")
                //barGroupNav:AddAttribute("aria-describedby",canvas:GetID() + "-" + barGroups:Get(i):GetHashCode())
                barGroupNav:SetTabIndex("-1")
                barGroupsUL:Add(barGroupNav)
    
                
                UnorderedList barsUL
                barsUL:AddAttribute("role","group")
                barGroupNav:AddNestedTag(barsUL)
                currentGrouping = barsUL
            end
            
            j = 0
            repeat while j < barGroups:Get(i):GetSize()
                ListItem barNav 
                barNav:SetIdentifier(canvas:GetID() + "-" + barGroups:Get(i):Get(j):GetHashCode() + "-nav")
                barNav:AddAttribute("role","none")
                barNav:AddAttribute("aria-labelledby",canvas:GetID() + "-" + barGroups:Get(i):Get(j):GetHashCode())
                //barNav:AddAttribute("aria-describedby",canvas:GetID() + "-" + barGroups:Get(i):Get(j):GetHashCode())
                barNav:SetTabIndex("-1")
                currentGrouping:Add(barNav)

                j = j + 1
            end
            i = i + 1
        end
    end

    action InitWriter(Chart chart)
        BarChart barChart
        barChart = cast(BarChart, chart)
        // If stacked, we need to adjust the maximum value to the full stack
        if barChart:GetStackedFlag()
            barChart:AdjustStacked()
        end
        parent:ChartWriter:InitWriter(chart)
        barChart:GetLegend():ApplySeriesColor()
        barChart:LoadChartAreaItems()
    end
end