package Libraries.Interface.Controls.Charts.Displays

use Libraries.Containers.HashTable
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Game.Game
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Game.DesktopConfiguration
use Libraries.Game.WebConfiguration
use Libraries.Game.Layer2D
use Libraries.Game.Layer3D
use Libraries.Containers.Iterator
use Libraries.Containers.Array
use Libraries.Interface.Events.KeyboardListener
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Game.InputMonitor
use Libraries.System.File

/*
    This class is used as a default display region for multiple charts. It allows basic
    charts to be shown on the screen and navigation between them using TAB or SHIFT + TAB.

    Attribute: Author Andreas Stefik
*/
class ChartDisplayer is Game, KeyboardListener
    HashTable<text, Chart> charts
    Array<Chart> chartsArray
    integer index = 0
    
    boolean oneTimeUpdate = false
boolean exitOnStart = false
    integer exitFrame = 3
    integer frame = 0
on create
        DesktopConfiguration desktop = GetDesktopConfiguration()
        desktop:targetFramesPerSecond = 10
        WebConfiguration web = GetWebConfiguration()
        web:framesPerSecondLimit = 10
    end
    
action CreateGame
        ManualLayout layout
        SetLayout(layout)

        Layer2D layer = GetCurrentLayer2D()
        layer:EnablePhysics(false)

        Layer3D layer3D = GetCurrentLayer3D()
        layer3D:EnablePhysics(false)
        //first Add them all to trigger getting their graphics in order
        integer i = chartsArray:GetSize() - 1
        repeat while i >= 0
            Chart chart = chartsArray:Get(i)
            Add(chart)
            i = i - 1
        end
        
        AddKeyboardListener(me)
    end
    
action ReleasedKey(KeyboardEvent event)
        boolean isShifty = false
InputMonitor monitor
  if monitor:IsKeyPressed(event:SHIFT_LEFT) or monitor:IsKeyPressed(event:SHIFT_RIGHT)
            isShifty = true
  end
   if event:keyCode = event:TAB
Chart previous = chartsArray:Get(index)
            if not isShifty
index = index + 1
if index > chartsArray:GetSize() - 1
                index = 0
            end
            else
index = index - 1
if index < 0
                index = chartsArray:GetSize() - 1
            end
            end
            
            Remove(previous)
Chart next = chartsArray:Get(index)
            Add(next)
            next:Focus()
            
   end
end
    
    action Add(text path, Chart chart)
        charts:Add(path, chart)
        chartsArray:Add(chart)
    end
    
action Update(number seconds)
        if frame >= exitFrame and not oneTimeUpdate
Layer2D layer = GetCurrentLayer2D()
            layer:Empty()
            
if not chartsArray:IsEmpty()
Chart chart = chartsArray:Get(0)
            Add(chart)
            chart:Focus()
        end
            oneTimeUpdate = true
        elseif frame >= exitFrame and exitOnStart
            Exit()
        end

        frame = frame + 1
    end
    
    action Save
File directory
        Save(directory)
    end
    
    action Save(text path)
        File directory
        directory:SetPath(path)
        Save(directory)
    end
    
action Save(File directory)
        text path = directory:GetAbsolutePath()
        Iterator<text> keys = charts:GetKeyIterator()
        repeat while keys:HasNext()
            text key = keys:Next()
            Chart chart = charts:GetValue(key)
            File file
            file:SetWorkingDirectory(path)
            file:SetPath(key + ".svg")
            chart:Save(file)
        end
    end
    
/*  This action creates a default Game object for displaying charts and sets this chart
        as the sole display. It is useful for interacting with charts without creating
        a complex game setup.
    */
    action Display(integer width, integer height)
SetScreenSize(width,height)
StartGame()
    end
    
/*  This action creates a default Game object for displaying charts and sets this chart
        as the sole display. It is useful for interacting with charts without creating
        a complex game setup. The exit flag tells the system, if true, to close the pre-built display
        right after completing layout, which can be useful for writing to disk.
    */
action Display(integer width, integer height, boolean exit)
SetExitOnStart(exit)
    SetScreenSize(width,height)
        StartGame()
end
    
/*  This action creates a default Game object for displaying charts and sets this chart
        as the sole display. It is useful for interacting with charts without creating
        a complex game setup. The exit flag tells the system, if true, to close the pre-built display
        right after completing layout, which can be useful for writing to disk.
    */
action Display(boolean exit)
SetExitOnStart(exit)
        SetScreenSize(1200,1000)
StartGame()
    end
    
/*  This action creates a default Game object for displaying charts and sets this chart
        as the sole display. It is useful for interacting with charts without creating
        a complex game setup.
    */
    action Display
        SetScreenSize(1200,1000)
StartGame()
    end
    
action GetExitOnStart returns boolean
        return exitOnStart
    end

    action SetExitOnStart(boolean exitOnStart)
        me:exitOnStart = exitOnStart
    end
end