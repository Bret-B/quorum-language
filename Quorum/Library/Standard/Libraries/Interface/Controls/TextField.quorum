package Libraries.Interface.Controls

use Libraries.Interface.Item2D
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.Glyph
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.MouseListener
use Libraries.Interface.Events.MouseMovementListener
use Libraries.Interface.Events.MouseWheelListener
use Libraries.Interface.Events.FocusListener
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Events.TextChangeEvent
use Libraries.Interface.Events.TextChangeListener
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Selections.TextFieldSelection
use Libraries.Interface.Views.DrawableView
use Libraries.Containers.Array
use Libraries.Containers.MultipleLineText
use Libraries.Containers.Support.Pair
use Libraries.System.File
use Libraries.Compute.Math
use Libraries.Interface.Accessibility
use Libraries.Interface.Views.ControlShaderView
use Libraries.Interface.Undo.TextFieldEditManager
use Libraries.Interface.Undo.TextFieldEditState
use Libraries.Containers.Number32BitArray

class TextField is Control, MouseListener, MouseMovementListener, FocusListener

    /*
    All of the text contained in this object.
    */
    text textValue = ""

    /*
    The font used for the text. For future iterations, this will be replaced by
    an iterable structure, along with information indicating at what line and
    character positions the font changes.
    */
    Font font = undefined

    /*
    An array of lines which are visible on the screen, where each line is
    composed of an array of drawables representing each character on the line.
    */
    Array<Drawable> lineCharacters

    Drawable caret
    integer caretThickness = 1

    // How far the first character in the view has slid to the left to show text that extends past the end of the TextField.
    number horizontalOffset = 0.0

    /*
    Whether the caret is active or not. This does not necessarily mean the caret
    is visible at any exact moment - the caret might be non-visible even while
    active, for example if the caret has been idle and is blinking. This boolean
    effectively ensures that the caret is usable, i.e., the text box has focus.
    */
    boolean caretActive = false

    boolean doubleClicking = false
    integer doubleClickStartIndex = 0
    integer doubleClickEndIndex = 0
    integer dragStartIndex = 0

    // if true any adjustments to text and the caret will always try to fit the the caret or characters into the view
    // if false the text field will not offset the text to fit better into the view
    boolean moveView = true

    // Values for caret movement and blink
    number caretIdleTime = 1.0
    number caretBlinkTime = 0.35
    number caretMoveDelay = 0.35
    number caretMoveTime = 0.0325
    number caretTimer = 0

    /*
    The caret's position is known using three values:
        caretLine, which line the caret is on.
        caretCharacter, the character index of the caret on its particular line.
        caretX, the actual X position of the caret, which is used for vertical movement.
    */
    integer caretLine = 0
    integer caretCharacter = 0
    number caretX = 0

    TextFieldSelection selection
    TextFieldEditManager editManager
    /*
    The texture used for the selection higlight. Initialized as a 1x1 white texture.
    */
    Texture selectionTexture = undefined

    TextFieldBackground background

    integer leftCharacterPadding = 9

    /*
    Values used for when text is being selected by dragging the mouse.
    */
    boolean draggingInText = false

    /*
    An array of listeners which are notified when the text in this TextBox
    changes.
    */
    Array<TextChangeListener> textChangeListeners

    Math math

    /* 
    The caret's previous position, which is set when the SHIFT key is pressed
    and used in creating a selection following a mouse click
    */
    integer previousCaretPosition = 0

    /* This field dictates whether this control should render as a password field. */
    boolean passwordField = false

    on create
        SetName("Text Field")
        SetInterfaceOptionsKey("TextField")
        SetInputGroup("TextField")
        SetFocusable(true)
        AddFocusListener(me)
        SetClipping(true)
        AddMouseListener(me)
        AddMouseMovementListener(me)

        Add(background)

        font = GetDefaultFont()

        selection:Initialize(me, "")
        SetAccessibilityCode(parent:Item:TEXT_FIELD)

        AddTextChangeListener(editManager)
        editManager:SetTextField(me)

        ManualLayout layout
        SetLayout(layout)

        LayoutProperties backgroundLayout = background:GetDefaultLayoutProperties()
        backgroundLayout:SetInterfaceOptionsKey("TextField")
        backgroundLayout:SetPercentageWidth(1)
        backgroundLayout:SetPercentageHeight(1)
        

        Color color
        LayoutProperties defaultProperties = GetDefaultLayoutProperties()
        defaultProperties:SetInterfaceOptionsKey("TextField")
        defaultProperties:SetFont(font)
        defaultProperties:SetFontSize(font:GetSize())
        defaultProperties:SetVerticalLayoutMode(defaultProperties:FIT_FONT)
        defaultProperties:SetHorizontalLayoutMode(defaultProperties:STANDARD)

        HideCaret()
    end

    action SetInterfaceOptionsKey(text key)
        parent:Control:SetInterfaceOptionsKey(key)
        background:SetInterfaceOptionsKey(key)
    end

    /*
        This action returns whether or not this text field is a protected password.

        Attribute: Returns true if this is a password field.
    */
    action IsPassword returns boolean
        return passwordField
    end
    /*This returns the widths of characters from the left 
hand side of the screen. */
    action GetCharacterWidths returns Number32BitArray
        Number32BitArray array
        Font font = GetFont()
        text value = GetText()
        array:SetSize(value:GetSize())
        i = 0
        repeat while value not= undefined and i < value:GetSize()
            Glyph glyph = font:GetGlyph(value)
            number advance = glyph:horizontalAdvance
            array:Set(i, advance)
            i = i + 1
        end
        return array
end
    
    /*This returns the x positions of characters from the left 
hand side of the screen. */
    action GetCharacterXPositions returns Number32BitArray
        
Number32BitArray array
        Font font = GetFont()
        text value = GetText()
        array:SetSize(value:GetSize())
        i = 0
        number sum = 0.0
repeat while value not= undefined and i < value:GetSize()
            Glyph glyph = font:GetGlyph(value)
            number advance = glyph:horizontalAdvance
            array:Set(i, sum)
            sum = sum + advance
            i = i + 1
        end
        return array
    end

    /*
        This action returns whether or not this text field is a protected password.

        Attribute: Parameter value Set this to true to make this a password field
    */
    action SetPassword(boolean value)
        me:passwordField = value
        GameStateManager manager
        Accessibility access = manager:GetAccessibility()
        if access not= undefined
            access:TextFieldUpdatePassword(me)
            TextChangeEvent changeEvent
            changeEvent:Initialize(me, GetText(), GetText(), textValue:GetSize())
            access:TextChanged(changeEvent)
        end
    end

    action GetLeftCharacterPadding returns integer
        return leftCharacterPadding
    end

    action SetLeftCharacterPadding(integer padding)
        leftCharacterPadding = padding
    end

    /*
    This action is used to load the graphical components of the Control. This is
    handled automatically by the Game engine as needed, and most users shouldn't
    need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        parent:Control:LoadGraphics(properties)

        if selectionTexture = undefined
            Texture texture
            selectionTexture = texture
            selectionTexture:LoadFilledRectangle(1, 1)
        end

        ColorGroup backgroundColor = properties:GetBackgroundColor()

        if backgroundColor not= undefined
            ControlShaderView backgroundView
            backgroundView:Initialize()
            background:SetView2D(backgroundView)
        end

        caret:SetColor(GetIconColor())

        GetLineDrawables()
    end

    /*
    Makes everything from scratch. For initialization purposes.
    */
    private action GetLineDrawables
        if selectionTexture = undefined
            // If we don't have a selection texture, the graphics haven't been
            // loaded yet, and we should wait until they are to create the
            // drawables for text.
            return now
        end

        LayoutProperties currentProperties = GetCurrentLayoutProperties()
        ColorGroup fontColor = GetFontColor()
        ColorGroup selectedFontColor = GetSelectionFontColor()
        ColorGroup selectionColor = GetSelectionColor()

        if font:GetSize() not= cast(integer, (currentProperties:GetFontSize() * currentProperties:GetInterfaceScale()))
            font:SetSize(cast(integer, currentProperties:GetFontSize() * currentProperties:GetInterfaceScale()))
        end

        // Ensure caret is correct size.
        InitializeCaret()
        
        lineCharacters:Empty()
        background:Empty()

        integer size = textValue:GetSize()
        integer lineHeight = font:GetLineHeight()
        integer maxDescent = font:GetMaximumDescent()

        number bottomPadding = GetBottomPadding()

        integer characterCounter = 0
        number x = leftCharacterPadding + horizontalOffset
        repeat size times
            Glyph glyph = undefined
            if IsPassword()
                glyph = font:GetGlyph("*")
            else 
                glyph = font:GetGlyph(textValue:GetCharacter(characterCounter))
            end
            
            Drawable draw = undefined
            if glyph:texture not= undefined
                Drawable newDrawable
                draw = newDrawable
                draw:SetAcceptsMouseInput(false)
                draw:Load(glyph:texture)
            end

            boolean highlighted = false

            if characterCounter >= selection:GetStartIndex() and characterCounter < selection:GetEndIndex()
                highlighted = true
            end

            if highlighted
                Drawable highlight
                highlight:Load(selectionTexture)
                highlight:SetSize(glyph:horizontalAdvance, lineHeight)
                highlight:SetColor(selectionColor)
                highlight:SetX(x)
                highlight:SetAcceptsMouseInput(false)
                background:Add(highlight)
            end

            if draw not= undefined
                draw:SetPosition(x + glyph:lengthToGlyph, glyph:heightFromBaseLine - draw:GetHeight() - maxDescent + bottomPadding)
                lineCharacters:Add(draw)
                background:Add(draw)

                if highlighted
                    draw:SetColor(selectedFontColor)
                else
                    draw:SetColor(fontColor)
                end
            end
            x = x + glyph:horizontalAdvance
            characterCounter = characterCounter + 1
        end

        PositionCaret()
        background:Add(caret)
    end

    private action InitializeCaret
        if caret:IsLoaded() = false
            caret:LoadFilledRectangle(1, 1)
            caret:SetName("TextBox Caret")
        end

        integer thickness = caretThickness
        if GetCurrentLayoutProperties() not= undefined
            thickness = cast(integer, caretThickness * GetCurrentLayoutProperties():GetInterfaceScale())
        end

        caret:SetSize(thickness, font:GetLineHeight())
        caret:SetColor(GetIconColor())
    end

    action SetAutomaticViewMovement(boolean auto)
        me:moveView = auto
    end

    action GetAutomaticViewMovement returns boolean
        return me:moveView
    end

    /*
    Positions the caret on the screen using the caretLine and caretCharacter
    values. Also calculates the new x position of the caret, which is returned.
    Depending on context, this value can be saved to overwrite the previous
    caretX, or ignored to preserve the old value.
    */
    private action PositionCaret returns number

        number x = horizontalOffset
        text lineCharacters = textValue

        integer counter = 0
        repeat while counter < caretCharacter
            Glyph glyph = font:GetGlyph(lineCharacters:GetCharacter(counter))
            x = x + glyph:horizontalAdvance
            counter = counter + 1
        end

        caret:SetPosition(x + leftCharacterPadding, GetBottomPadding())
        return x + leftCharacterPadding
    end

    private action EmptySelectionEvent(boolean textChanged)
        integer index = caretCharacter

        selection:Set(index, index, true, textChanged)

        // Report the new selection here.
        UpdateVisualSelection()
    end

    private action SelectionMoveLeft

        integer index = caretCharacter

        if (index < selection:GetStartIndex())
            integer endIndex = selection:GetEndIndex()
            selection:Set(index, endIndex, (index = endIndex), false)
        else
            integer startIndex = selection:GetStartIndex()
            selection:Set(startIndex, index, true, false)
        end

        // Report the new selection here.
        UpdateVisualSelection()
    end

    private action SelectionMoveRight

        integer index = caretCharacter

        if (index > selection:GetEndIndex())
            integer startIndex = selection:GetStartIndex()
            selection:Set(startIndex, index, true, false)
        else
            integer endIndex = selection:GetEndIndex()
            selection:Set(index, endIndex, (index = endIndex), false)
        end

        // Report the new selection here.
        UpdateVisualSelection()
    end

    /*
    Update the drawables to reflect the selection.
    */
    private action UpdateVisualSelection
        GetLineDrawables()
    end

    /*
    Sets the caret to a particular index. Left private because it does not
    adjust the selection, update the visuals, or trigger any events, and is only 
    used in preparation for other calls which will perform some tasks from the 
    caret's position and then trigger the appropriate events.
    */
    private action SetCaretToIndex(integer index)
        caretCharacter = index
    end

    action SetCaretPosition(integer index)
        ShowCaret()
        SetCaretToIndex(index)
        caretX = PositionCaret()

        if (moveView)
            FitCharacterOnScreen(caretCharacter)
        end
        ResetCaretBlinkTimer()

        EmptySelectionEvent(false)
    end

    action MoveCaretLeft(boolean selecting)
        if not caretActive
            return now
        end

        integer oldIndex = caretCharacter

        if caretCharacter = 0
            if (not selecting) and (not selection:IsEmpty())
                EmptySelectionEvent(false)
            end

            return now
        else
            if (not selecting) and (not selection:IsEmpty())
                caretCharacter = selection:GetStartIndex()
            else
                caretCharacter = caretCharacter - 1
            end
        end
        if (moveView)
            FitCharacterOnScreen(caretCharacter)
        end
        caretX = PositionCaret()
        ResetCaretBlinkTimer()

        if selecting
            SelectionMoveLeft()
        else
            EmptySelectionEvent(false)
        end
    end

    action MoveCaretRight(boolean selecting)
        if not caretActive
            return now
        end

        integer oldIndex = caretCharacter

        text lineText = textValue
        integer size = lineText:GetSize()

        if caretCharacter >= size
            if (not selecting) and (not selection:IsEmpty())
                EmptySelectionEvent(false)
            end

            return now
        else
            if (not selecting) and (not selection:IsEmpty())
                caretCharacter = selection:GetEndIndex()
            else
                caretCharacter = caretCharacter + 1
            end
        end
        if (moveView)
            FitCharacterOnScreen(caretCharacter)
        end
        caretX = PositionCaret()
        ResetCaretBlinkTimer()

        if selecting
            SelectionMoveRight()
        else
            EmptySelectionEvent(false)
        end
    end

    /*
        Fits a character horizontally in the TextField then redraws and repositions the caret correctly. 
    */
    action FitViewToCharacter(integer index)
        FitCharacterOnScreen(index)
        GetLineDrawables()
        caretX = PositionCaret()
        ResetCaretBlinkTimer()
    end

    /*
    Fits a character horizontally in the TextField.
    */
    private action FitCharacterOnScreen(integer character)
        if character = 0
            horizontalOffset = 0
            return now
        end

        number singleCharacterAdvance = GetFont():GetGlyph("W"):horizontalAdvance
        number x = 0
        number totalX = 0
        integer characterCounter = 0
        integer finalCharacter = GetSize()

        // calculate the entire advance of the string to prevent offsetting too far 
        repeat GetSize() times
            Glyph glyph = font:GetGlyph(textValue:GetCharacter(characterCounter))
            totalX = totalX + glyph:horizontalAdvance
            if characterCounter < character
                x = x + glyph:horizontalAdvance
                characterCounter = characterCounter + 1
            end
        end

        // move half a width over to fit show text before and after character
        if (x + horizontalOffset < 0)
            horizontalOffset = -(x - GetWidth()/2)
        elseif x + horizontalOffset + singleCharacterAdvance*2 > GetWidth()
            horizontalOffset = -x + GetWidth()/2
        end

        // if on the final character show nothing to the right
        if characterCounter = finalCharacter
            horizontalOffset = -x + GetWidth() - singleCharacterAdvance * 1.5
        end

        // clamp the offset to not go too far left or right

        // do not offset if the offset would leave empty space on the left
        if x < GetWidth() - singleCharacterAdvance * 2
            horizontalOffset = 0
            return now
        end

        // prevent empty space on the left
        if horizontalOffset > 0
            horizontalOffset = 0
        // prevent empty space on the right 
        elseif horizontalOffset < -totalX
            horizontalOffset = -x + GetWidth() - singleCharacterAdvance * 1.5
        end
    end

    /*
    The ShowCaret action forces the caret to display. The caret will begin to
    blink at a rate determined by the caret's idle time (see the 
    SetCaretIdleTime action).
    */
    action ShowCaret
        caretActive = true
        ResetCaretBlinkTimer()
    end

    private action ResetCaretBlinkTimer()
        if caretActive
            caret:Show()
            caretTimer = caretIdleTime
        end
    end

    action HideCaret
        caret:Hide()
        caretActive = false
    end

    action DeleteBackward
        if (not selection:IsEmpty())
            DeleteSelection()
            return now
        end

        integer index = caretCharacter
        if index = 0
            return now
        end

        integer toDelete = 1

        text deletedText = textValue:GetSubtext(index - toDelete, index)
        text preText = ""
        text postText = ""
        if (index - toDelete) > 0
            preText = textValue:GetSubtext(0, index - toDelete)
        end
        if (index < textValue:GetSize())
            postText = textValue:GetSubtext(index, textValue:GetSize())
        end

        textValue = preText + postText
        caretCharacter = caretCharacter - toDelete
        if (moveView)
            FitCharacterOnScreen(caretCharacter)
        end
        GetLineDrawables()
        caretX = PositionCaret()
        ResetCaretBlinkTimer()

        TextChangeEvent changeEvent
        changeEvent:Initialize(me, "", deletedText, GetCaretPosition())

        NotifyTextChangeListeners(changeEvent)
        EmptySelectionEvent(true)
    end

    action DeleteForward
        if (not selection:IsEmpty())
            DeleteSelection()
            return now
        end

        if caretCharacter = textValue:GetSize()
            return now
        end

        integer toDelete = 1

        integer index = caretCharacter
        text deletedText = textValue:GetSubtext(index, index + toDelete)

        text preText = ""
        text postText = ""
        if index > 0
            preText = textValue:GetSubtext(0, index)
        end
        if (index + toDelete < textValue:GetSize())
            postText = textValue:GetSubtext(index + toDelete, textValue:GetSize())
        end

        textValue = preText + postText

        GetLineDrawables()
        PositionCaret()
        ResetCaretBlinkTimer()

        TextChangeEvent changeEvent
        changeEvent:Initialize(me, "", deletedText, GetCaretPosition())

        NotifyTextChangeListeners(changeEvent)
        EmptySelectionEvent(true)
    end

    action DeleteSelection
        DeleteSelection(true)
    end

    private action DeleteSelection(boolean triggerTextChangeEvent)
        if selection:IsEmpty()
            return now
        end

        text deletedText = textValue:GetSubtext(selection:GetStartIndex(), selection:GetEndIndex())
        caretCharacter = selection:GetStartIndex()
        integer endIndex = selection:GetEndIndex()

        text preText = ""
        text postText = ""
        if caretCharacter > 0
            preText = textValue:GetSubtext(0, caretCharacter)
        end
        if (endIndex < textValue:GetSize())
            postText = textValue:GetSubtext(endIndex, textValue:GetSize())
        end

        textValue = preText + postText  

        if moveView
            FitCharacterOnScreen(caretCharacter)
        end
        GetLineDrawables()
        PositionCaret()
        ResetCaretBlinkTimer()

        if triggerTextChangeEvent
            TextChangeEvent changeEvent
            changeEvent:Initialize(me, "", deletedText, selection:GetStartIndex())
            NotifyTextChangeListeners(changeEvent)
        end

        EmptySelectionEvent(true)
    end

    action Delete(integer startIndex, integer endIndex)
        if startIndex = endIndex
            return now
        end

        caretCharacter = startIndex

        text preText = ""
        text postText = ""
        if caretCharacter > 0
            preText = textValue:GetSubtext(0, caretCharacter)
        end
        if (endIndex < textValue:GetSize())
            postText = textValue:GetSubtext(endIndex, textValue:GetSize())
        end

        textValue = preText + postText
        if (moveView)
            FitCharacterOnScreen(caretCharacter)
        end
        GetLineDrawables()
        PositionCaret()
        ResetCaretBlinkTimer()

        EmptySelectionEvent(true)
    end

    action Insert(integer index, text value)
        SetCaretToIndex(index)
        Insert(value)
    end

    action Insert(text value)
        text deletedText = ""
        integer originalIndex = GetCaretPosition()
        boolean shouldDeleteSelection = (not selection:IsEmpty())

        if (shouldDeleteSelection)
            originalIndex = selection:GetStartIndex()
            deletedText = textValue:GetSubtext(selection:GetStartIndex(), selection:GetEndIndex())
            DeleteSelection(false)
        end

        text preText = ""
        text postText = ""

        if caretCharacter > 0
            preText = textValue:GetSubtext(0, caretCharacter)
        end     
        if caretCharacter < textValue:GetSize()
            postText = textValue:GetSubtext(caretCharacter, textValue:GetSize())
        end

        textValue = preText + value + postText

        caretCharacter = caretCharacter + value:GetSize()

        if moveView
            FitCharacterOnScreen(caretCharacter)
        end
        GetLineDrawables()
        caretX = PositionCaret()
        ResetCaretBlinkTimer()

        TextChangeEvent changeEvent
        changeEvent:Initialize(me, value, deletedText, originalIndex)

        EmptySelectionEvent(true)

        NotifyTextChangeListeners(changeEvent)
    end

    action DraggedMouse(MouseEvent event)
        if draggingInText
            MousePositionCaret(event, true)
        end
    end

    action ClickedMouse(MouseEvent event)
        if event:GetSource() not= undefined and event:GetSource() is Item2D and event:clickCount = 1
            ShowCaret()
            // Assume main text area was clicked.
            draggingInText = true
            doubleClicking = false
            MousePositionCaret(event, false)
            dragStartIndex = GetCaretPosition()
        end
    end

    action ReleasedMouse(MouseEvent event)
        draggingInText = false
        if event:clickCount >= 2
            doubleClicking = false
        end
    end

    private action MousePositionCaret(MouseEvent event, boolean dragging)

        integer index = caretCharacter

        number mouseX = event:GetX() - GetGlobalX()
        boolean leftEdgeOfBox = false
        boolean rightEdgeOfBox = false

        Glyph glyph = font:GetGlyph("W")
        number advance = glyph:horizontalAdvance * 2
        if mouseX < advance 
            leftEdgeOfBox = true
        elseif mouseX > GetWidth() - advance
            rightEdgeOfBox = true
        end

        if dragging and moveView
            if leftEdgeOfBox
                horizontalOffset = horizontalOffset + advance
                if horizontalOffset >= 0
                    horizontalOffset = 0
                end
            elseif rightEdgeOfBox
                horizontalOffset = horizontalOffset - advance
            end
        end

        PositionCaretFromCoordinates(event:GetX() - GetGlobalX(), event:GetY() - GetGlobalY())

        if dragging and moveView
            FitCharacterOnScreen(caretCharacter)
        end
        if dragging and not doubleClicking
            // for textfields it seems to be standard to hide the caret when dragging
            HideCaret()
            if index = caretCharacter
                return now
            end

            originalIndex = GetCaretPosition()
            if originalIndex < dragStartIndex
                Select(originalIndex, dragStartIndex, false)
            elseif originalIndex > dragStartIndex
                Select(dragStartIndex, originalIndex, true)
            end

//            boolean atEnd = selection:IsCaretAtEnd()
//
//            if atEnd
//                if caretCharacter < selection:GetStartIndex()
//                    Select(GetCaretPosition(), selection:GetStartIndex(), false)
//                else
//                    Select(selection:GetStartIndex(), GetCaretPosition(), true)
//                end
//            else
//                if GetCaretPosition() > selection:GetEndIndex()
//                    Select(selection:GetEndIndex(), GetCaretPosition(), true)
//                else
//                    Select(GetCaretPosition(), selection:GetEndIndex(), false)
//                end
//            end
        elseif dragging and doubleClicking
            integer originalIndex = GetCaretPosition()
            // for textfields it seems to be standard to hide the caret when dragging
            HideCaret()
            if originalIndex < doubleClickStartIndex
                integer tokenStart = GetTokenStartIndex()
                integer tokenEnd = GetTokenEndIndex(tokenStart)
                if GetCaretPosition() >= tokenEnd
                    SetCaretPosition(tokenEnd)
                    Select(tokenEnd, doubleClickEndIndex)
                elseif GetCaretPosition() < tokenEnd
                    SetCaretPosition(tokenStart)
                    Select(tokenStart, doubleClickEndIndex)
                end
            elseif originalIndex > doubleClickEndIndex
                integer tokenEnd = GetTokenEndIndex()
                integer tokenStart = GetNextTokenStartIndex()
                if tokenStart <= tokenEnd
                    SetCaretPosition(tokenStart)
                    Select(doubleClickStartIndex, tokenStart)
                elseif tokenStart > tokenEnd
                    SetCaretPosition(tokenEnd)
                    Select(doubleClickStartIndex, tokenEnd)
                end
            else
                SetCaretPosition(doubleClickEndIndex)
                Select(doubleClickStartIndex, doubleClickEndIndex)
            end
            SetCaretToIndex(selection:GetEndIndex())
        else
            EmptySelectionEvent(false)
        end
        ResetCaretBlinkTimer()
    end

    action SetDoubleClickIndices(integer startIndex, integer endIndex)
        doubleClicking = true
        doubleClickStartIndex = startIndex
        doubleClickEndIndex = endIndex
    end

    private action PositionCaretFromCoordinates(number x, number y)
        integer index = GetNearestCharacter(x)
        caretCharacter = index
        caretX = PositionCaret()
    end

    /*
    For the given line, find the character index for the closest possible cursor
    position. Used for vertical caret navigation.
    */
    private action GetNearestCharacter(number position) returns integer
        text lineText = textValue
        integer size = lineText:GetSize()

        position = position - leftCharacterPadding - horizontalOffset

        number x1 = 0
        number x2 = 0
        integer counter = 0
        number distance1 = position
        repeat while counter < size
            Glyph glyph = font:GetGlyph(lineText:GetCharacter(counter))
            x2 = x1 + glyph:horizontalAdvance
            if x2 > position
                return counter
            end
            x1 = x2
            counter = counter + 1
        end

        return counter
    end

    action GainedFocus(FocusEvent event)
        ShowCaret()
        background:SetBorderColor(GetFocusBorderColor())
        SetBorderThickness(GetBorderThickness())
        RequestLayout()
        parent:Control:GainedFocus(event)
        background:RequestVerticesUpdate()
    end

    action LostFocus(FocusEvent event)
        HideCaret()
        background:SetBorderColor(GetBorderColor())
        SetBorderThickness(GetBorderThickness())
        RequestLayout()
        parent:Control:LostFocus(event)
        background:RequestVerticesUpdate()
    end

    action Update(number seconds)
        if caretActive
            caretTimer = caretTimer - seconds
            if caretTimer < 0
                caretTimer = caretBlinkTime
                if caret:IsShowing()
                    caret:Hide()
                else
                    caret:Show()
                end
            end
        end
    end

    action SetCaretIdleTime(number time)
        caretIdleTime = time
    end

    action SetCaretMoveDelay(number time)
        caretMoveDelay = time
    end

    action SetCaretMoveTime(number time)
        caretMoveTime = time
    end

    action GetCaretIdleTime returns number
        return caretIdleTime
    end

    action GetCaretMoveDelay returns number
        return caretMoveDelay
    end

    action GetCaretMoveTime returns number
        return caretMoveTime
    end

    action GetCaretPosition returns integer
        return caretCharacter
    end

    action GetCaretX returns number
        return caret:GetX()
    end

    action GetCaretY returns number
        return caret:GetY()
    end

    action GetCaretGlobalX returns number
        return caret:GetGlobalX()
    end

    action GetCaretGlobalY returns number
        return caret:GetGlobalY()
    end

    action GetText returns text
        return textValue
    end

    action GetText(integer startIndex, integer endIndex) returns text
        return textValue:GetSubtext(startIndex, endIndex)
    end

    /*
    This action returns the total number of characters of text in the TextField.
    */
    action GetSize returns integer
        return textValue:GetSize()
    end

    action Empty
        TextChangeEvent changeEvent
        changeEvent:Initialize(me, "", GetText(), 0)

        textValue = ""
        caretCharacter = 0

        if (moveView)
            FitCharacterOnScreen(caretCharacter)
        end
        GetLineDrawables()
        caretX = PositionCaret()
        ResetCaretBlinkTimer()

        NotifyTextChangeListeners(changeEvent)
        EmptySelectionEvent(true)
    end

    action SetText(text value)
        TextChangeEvent changeEvent
        changeEvent:Initialize(me, value, GetText(), 0)

        textValue = value
        caretCharacter = 0

        if (moveView)
            FitCharacterOnScreen(caretCharacter)
        end
        GetLineDrawables()
        caretX = PositionCaret()
        ResetCaretBlinkTimer()

        NotifyTextChangeListeners(changeEvent)
        EmptySelectionEvent(true)
    end

    action AppendToText(text value)
        TextChangeEvent changeEvent
        changeEvent:Initialize(me, value, "", textValue:GetSize())
        
        textValue = textValue + value

        NotifyTextChangeListeners(changeEvent)
        EmptySelectionEvent(true)
    end

    action Select(integer startIndex, integer endIndex)
        Select(startIndex, endIndex, true)
    end

    action Select(integer startIndex, integer endIndex, boolean caretAtEnd)
        if startIndex < 0
            startIndex = 0
        end

        if endIndex > textValue:GetSize()
            endIndex = textValue:GetSize()
        end

        selection:Set(startIndex, endIndex, caretAtEnd, false)
        UpdateVisualSelection()
    end

    action GetSelection returns TextFieldSelection
        return selection
    end

    action AddTextChangeListener(TextChangeListener listener)
        textChangeListeners:Add(listener)
    end

    action RemoveTextChangeListener(TextChangeListener listener)
        textChangeListeners:Remove(listener)
    end

    action GetTextChangeListeners returns Array<TextChangeListener>
        return textChangeListeners
    end

    private action NotifyTextChangeListeners(TextChangeEvent event)
        integer counter = 0
        repeat while counter < textChangeListeners:GetSize()
            textChangeListeners:Get(counter):TextChanged(event)
            counter = counter + 1
        end
        GameStateManager manager
        manager:GetInput():NotifyTextChangeListeners(event)
    end

    action GetCurrentEditState returns TextFieldEditState
        TextFieldEditState state
        state:Set(GetText(), GetCaretPosition(), GetSelection())
        return state
    end

    action SetFromEditState(TextFieldEditState state)
        textValue = state:GetText()
        SetCaretToIndex(state:GetCaretPosition())

        Resize()

        FitCharacterOnScreen(caretCharacter)
        GetLineDrawables()
        caretX = PositionCaret()
        ResetCaretBlinkTimer()

        Select(state:GetStartIndex(), state:GetEndIndex(), state:IsCaretAtEnd())
        
    end

    action GetTextFieldEditManager returns TextFieldEditManager
        return editManager
    end

    action GetTokenStartIndex returns integer
        return GetTokenStartIndex(GetCaretPosition())
    end

    /*
    This action finds the start index of the first token before the given search
    index. If the search index is located in the middle of a token, the index
    returned will be for that token. If the search index is exactly at the
    beginning of a token, the start index of the previous token will be returned
    instead.

    Attribute: Parameter searchIndex The global index within the text to begin the search from.
    Attribute: Returns A global index pointing to the beginning of the first token before the search index.
    */
    action GetTokenStartIndex(integer searchIndex) returns integer
        boolean tokenIsDone = false
        boolean leadingWhiteSpace = false
        text currentToken = ""
        text textValue = GetText()
        integer currentIndex = searchIndex
        integer beginIndex = searchIndex
        text previousCharacter = ""
        
        //if the caret is already at the beginning of the textField
        if searchIndex = 0
            tokenIsDone = true
        end

        repeat while not(tokenIsDone)
            if 0 < currentIndex
                previousCharacter = textValue:GetCharacter(currentIndex - 1)
                if(IsWhiteSpace(previousCharacter))   //this is the end of the token or the beginning of a token
                    if beginIndex = currentIndex //this is the beginning of the token
                        leadingWhiteSpace = true
                        repeat while ((IsWhiteSpace(previousCharacter)) and (not(tokenIsDone)))   //skip the initial whitespace
                            currentToken = currentToken + previousCharacter
                            currentIndex = currentIndex - 1
                            if currentIndex > 0
                                previousCharacter = textValue:GetCharacter(currentIndex - 1)
                            else
                                tokenIsDone = true
                            end
                        end
                    else    //this is the end of the token
                        tokenIsDone = true
                    end

                elseif(IsSpecialCharacter(previousCharacter))   //this is the end of the token or the beginning of a token
                    if ((beginIndex = currentIndex) or (leadingWhiteSpace)) //this is the beginning of the token
                        currentToken = currentToken + previousCharacter
                        if ((currentIndex - 1) > 0)
                            if(IsDoubleSpecialCharacter(textValue:GetCharacter(currentIndex - 2), previousCharacter)) //check to see if this token has one or two special characters associated with it
                                currentToken = currentToken + textValue:GetCharacter(currentIndex - 2)
                            end
                        end
                    end
                    tokenIsDone = true
                else    //add the character to the current token
                    leadingWhiteSpace = false
                    currentToken = currentToken + previousCharacter
                    currentIndex = currentIndex - 1
                    if currentIndex > 0
                        previousCharacter = textValue:GetCharacter(currentIndex - 1)
                    else
                        tokenIsDone = true
                    end
                end
            else
                tokenIsDone = true
            end
            
        end
        return beginIndex - currentToken:GetSize()  
    end

    action GetNextTokenStartIndex returns integer
        return GetNextTokenStartIndex(GetCaretPosition())
    end

    /*
    This action finds the start index of the next token after the given search
    index. If the search index is located at the start of a token, the index
    returned will be for the start of the next token.

    Attribute: Parameter searchIndex The global index within the text to begin the search from.
    Attribute: Returns A global index pointing to the start of the next token after the search index.
    */
    action GetNextTokenStartIndex(integer searchIndex) returns integer
        boolean tokenIsDone = false
        boolean isSpecialCharacterToken = false
        text currentToken = ""
        text textValue = GetText()
        integer currentIndex = searchIndex
        integer beginIndex = searchIndex
        text nextCharacter = ""

        if searchIndex = textValue:GetSize()
            tokenIsDone = true
        end

        repeat while not(tokenIsDone)
            if currentIndex < textValue:GetSize()
                nextCharacter = textValue:GetCharacter(currentIndex)
                if IsWhiteSpace(nextCharacter)  //skip whitespace at the end of the token to get to the beginning of the next token
                    repeat while ((IsWhiteSpace(nextCharacter)) and (not(tokenIsDone)))
                        currentToken = currentToken + nextCharacter
                        currentIndex = currentIndex + 1
                        if currentIndex < textValue:GetSize()
                            nextCharacter = textValue:GetCharacter(currentIndex)
                        else    //end of the textField, token is done
                            tokenIsDone = true
                        end
                    end
                    tokenIsDone = true
                elseif IsSpecialCharacter(nextCharacter)    //signals the end of a token OR the beginning of a special token
                    if beginIndex = currentIndex    //beginning of a special token
                        isSpecialCharacterToken = true
                        currentToken = currentToken + nextCharacter
                        currentIndex = currentIndex + 1
                        if currentIndex < textValue:GetSize()
                            if(IsDoubleSpecialCharacter(nextCharacter, textValue:GetCharacter(currentIndex)))   //check if this is a double special character case
                                currentToken = currentToken + textValue:GetCharacter(currentIndex)
                                currentIndex = currentIndex + 1
                                if currentIndex < textValue:GetSize()   //continue with the next character in case if there is whitespace following the special character
                                    nextCharacter = textValue:GetCharacter(currentIndex)
                                else    //end of the textField, token is done
                                    tokenIsDone = true
                                end
                            end
                        end
                    else    //end of the token
                        tokenIsDone = true
                    end
                else    //building a token OR the end of a special token
                    if beginIndex not= currentIndex and isSpecialCharacterToken //end of a special token
                        tokenIsDone = true
                    else    //building a token
                        currentToken = currentToken + nextCharacter
                        currentIndex = currentIndex + 1
                        if currentIndex < textValue:GetSize()
                            nextCharacter = textValue:GetCharacter(currentIndex)
                        else    //end of the textField, token is done
                            tokenIsDone = true
                        end
                    end
                end
            else
                tokenIsDone = true
            end
        end
        if beginIndex + currentToken:GetSize() < textValue:GetSize()
            return beginIndex + currentToken:GetSize()
        else
            return textValue:GetSize()
        end
    end

    /*
    This action finds the end index of the first token after the caret within
    the TextBox. If the caret is located in the middle of a token, the index
    returned will be for that token. If the caret is exactly at the end of
    a token, the end index of the next token will be returned instead.

    Attribute: Returns A global index pointing to the end of the first token after the caret.
    */
    action GetTokenEndIndex returns integer
        return GetTokenEndIndex(GetCaretPosition())
    end

    /*
    This action finds the end index of the first token after the given search
    index. If the search index is located in the middle of a token, the index
    returned will be for that token. If the search index is exactly at the
    end of a token, the end index of the next token will be returned
    instead.

    Attribute: Parameter searchIndex The global index within the text to begin the search from.
    Attribute: Returns A global index pointing to the end of the first token after the search index.
    */
    action GetTokenEndIndex(integer searchIndex) returns integer
        boolean tokenIsDone = false
        text currentToken = ""
        text textValue = GetText()
        integer currentIndex = searchIndex
        integer beginIndex = searchIndex
        text currentCharacter = ""
        text nextCharacter = ""
        if textValue:IsEmpty()
            return 0
        elseif searchIndex >= GetSize()
            return GetSize()
        end

        //if the initial whitespace is a lineFeed or CarriageReturn, return the token as complete and start the next token
        nextCharacter = textValue:GetCharacter(currentIndex)
        if nextCharacter = nextCharacter:GetCarriageReturn()
            currentIndex = currentIndex + 1
            currentToken = currentToken + nextCharacter
            if (currentIndex < textValue:GetSize())
                nextCharacter = textValue:GetCharacter(currentIndex)
            end
            tokenIsDone = true  
        end

        if nextCharacter = nextCharacter:GetLineFeed()
            currentIndex = currentIndex + 1
            currentToken = currentToken + nextCharacter
            tokenIsDone = true
        end

        if tokenIsDone
            return beginIndex + currentToken:GetSize()
        end

       repeat while not(tokenIsDone)
            if currentIndex < textValue:GetSize()
                nextCharacter = textValue:GetCharacter(currentIndex)               
                //signals the end of the token  
                if (IsSpecialCharacter(nextCharacter))
                    if (beginIndex = currentIndex)  //check for groups of special characters
                        currentToken = nextCharacter
                        if nextCharacter = "("
                            if (currentIndex + 1) < textValue:GetSize()
                                if textValue:GetCharacter(currentIndex + 1) = ")"
                                    currentToken = currentToken + textValue:GetCharacter(currentIndex + 1)
                                end
                            end
                        end
                        if nextCharacter = "<"
                            if (currentIndex + 1) < textValue:GetSize()
                                if textValue:GetCharacter(currentIndex + 1) = "<"
                                    currentToken = currentToken + textValue:GetCharacter(currentIndex + 1)
                                end
                            end
                        end
                        if nextCharacter = ">"
                            if (currentIndex + 1) < textValue:GetSize()
                                if textValue:GetCharacter(currentIndex + 1) = ">"
                                    currentToken = currentToken + textValue:GetCharacter(currentIndex + 1)
                                end
                            end
                        end
                        if nextCharacter = "/"
                            if (currentIndex + 1) < textValue:GetSize()
                                if textValue:GetCharacter(currentIndex + 1) = "/"
                                    currentToken = currentToken + textValue:GetCharacter(currentIndex + 1)
                                end
                            end
                        end
                    end
                        tokenIsDone = true
                            
                elseif (IsWhiteSpace(nextCharacter))
                    if  currentIndex not= beginIndex
                        tokenIsDone = true
                    
                    elseif currentIndex = beginIndex  and ((currentIndex + 1) < textValue:GetSize())//skip initial whitespace
                        currentToken = currentToken + nextCharacter
                        currentIndex = currentIndex + 1
                        nextCharacter = textValue:GetCharacter(currentIndex)
                        if (IsWhiteSpace(nextCharacter))
                            repeat while IsWhiteSpace(nextCharacter) and ((currentIndex + 1) < textValue:GetSize())
                                currentToken = currentToken + nextCharacter
                                currentIndex = currentIndex + 1
                                nextCharacter = textValue:GetCharacter(currentIndex)
                            end 
                            nextCharacter = textValue:GetCharacter(currentIndex + 1)
                        elseif (IsSpecialCharacter(nextCharacter))
                            currentToken = currentToken + nextCharacter
                            if nextCharacter = "("
                                if (currentIndex + 1) < textValue:GetSize()
                                    if textValue:GetCharacter(currentIndex + 1) = ")"
                                        currentToken = currentToken + textValue:GetCharacter(currentIndex + 1)
                                    end
                                end
                            end
                            if nextCharacter = "<"
                                if (currentIndex + 1) < textValue:GetSize()
                                    if textValue:GetCharacter(currentIndex + 1) = "<"
                                        currentToken = currentToken + textValue:GetCharacter(currentIndex + 1)
                                    end
                                end
                            end
                            if nextCharacter = ">"
                                if (currentIndex + 1) < textValue:GetSize()
                                    if textValue:GetCharacter(currentIndex + 1) = ">"
                                        currentToken = currentToken + textValue:GetCharacter(currentIndex + 1)
                                    end
                                end
                            end
                            if nextCharacter = "/"
                                if (currentIndex + 1) < textValue:GetSize()
                                    if textValue:GetCharacter(currentIndex + 1) = "/"
                                        currentToken = currentToken + textValue:GetCharacter(currentIndex + 1)
                                    end
                                end
                            end
                            tokenIsDone = true 

                        else
                            if (currentIndex + 1) < textValue:GetSize()
                                nextCharacter = textValue:GetCharacter(currentIndex + 1)
                            else
                                tokenIsDone = true
                            end
                        end                    
                    else
                        tokenIsDone = true
                    end
                else
                    currentToken = currentToken + nextCharacter
                    currentIndex = currentIndex + 1
                end
            else
                beginIndex = textValue:GetSize()
                currentToken = ""
                tokenIsDone = true
            end
        end
        if beginIndex + currentToken:GetSize() < textValue:GetSize()
            return beginIndex + currentToken:GetSize()
        else
            return textValue:GetSize()
        end
    end

    private action IsDoubleSpecialCharacter(text first, text second) returns boolean
        boolean isDoubleSpecialCharacter = false
        if (first = "(" and second = ")")
            isDoubleSpecialCharacter = true
        end
        if (first = ">" and second = ">")
            isDoubleSpecialCharacter = true
        end
        if (first = "<" and second = "<")
            isDoubleSpecialCharacter = true
        end
        if (first = "/" and second = "/")
            isDoubleSpecialCharacter = true
        end
        return isDoubleSpecialCharacter
    end

    private action IsSpecialCharacter(text value) returns boolean
        boolean isSpecialCharacter = false
        if value = "." or value = "/" or value = "*" or value = "-" or value = "+"
        or value = "(" or value = ")" or value = ":" or value = "<" or value = ">"
        or value = ";" or value = "," or value = "=" or value = value:GetDoubleQuote()
            isSpecialCharacter = true
        end
        return isSpecialCharacter
    end

    private action IsWhiteSpace(text value) returns boolean
        boolean isWhiteSpace = false
        if value = " " or value = value:GetCarriageReturn() or value = value:GetLineFeed() or 
        value = value:GetTab()
            isWhiteSpace = true
        end
        return isWhiteSpace
    end

    private action IsBeginningOfToken(integer index) returns boolean
        // Used by the accessibility system, which can ignore the "private" flag.
        // It's not clear if this will be necessary in the future.

        if index = 0
            return true
        end

        if index >= textValue:GetSize()
            return false
        end

        text previous = textValue:GetCharacter(index - 1)
        text current = textValue:GetCharacter(index)

        if IsWhiteSpace(current)
            return false
        end

        if IsWhiteSpace(previous)
            return true
        end

        if (IsSpecialCharacter(previous) and not IsSpecialCharacter(current))
            return true
        end

        if (IsSpecialCharacter(current))
            if current = ")"
                if previous = "("
                    return false
                end
            end
            if current = ">"
                if previous = ">"
                    return false
                end
            end
            if current = "<"
                if previous = "<"
                    return false
                end
            end
            if current = "/"
                if previous = "/"
                    return false
                end
            end

            return true
        end

        return false
    end

    /*
    This is set by the TextFieldSavePreviousCaretPositionBehavior for use by the 
    TextFieldSelectToMouseClickBehavior in determining the selection indices based on 
    the caret position prior to the mouse click
    */
    action SetPreviousCaretPosition(integer previous)
        previousCaretPosition = previous
    end

    action GetPreviousCaretPosition returns integer
        return previousCaretPosition
    end
end