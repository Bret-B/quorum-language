package Libraries.Interface.Controls

use Libraries.Containers.Array
use Libraries.Game.Graphics.Font
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Selections.ListSelection
use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Views.View2D
use Libraries.Interface.Views.LabelBoxView
use Libraries.Interface.Controls.Support.FirstLetterNavigator
use Libraries.Interface.Views.ControlShaderView

class List is ScrollableLineControl, FirstLetterNavigator

    ListSelection selection

    // The itemBehavior is called when a ListItem would be activated if it 
    // doesn't have an activation behavior of its own defined.
    Behavior itemBehavior = undefined

    ListRenderer renderer
    
    on create
        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:STANDARD)
        properties:SetVerticalLayoutMode(properties:STANDARD)

        SetInterfaceOptionsKey("List")

        SetInputGroup("List")

        SetFocusable(true)
        selection:Initialize(me)
        // TO-DO: This needs to be changed to something more appropriate.
        SetAccessibilityCode(parent:Item:LIST)
        SetName("List")
    end

    action IsAccessibleParent returns boolean
        return true
    end

    action Add(text entry)
        Add(NewListItem(entry))
    end

    action Add(integer position, text entry)
        Add(position, NewListItem(entry))
    end

    action Add(text entry, Icon icon)
        Add(NewListItem(entry, icon))
    end

    action Add(integer position, text entry, Icon icon)
        Add(position, NewListItem(entry, icon))
    end

    action Add(Item2D item)
        if not (item is ListItem)
            alert("I could not add the item called " + item:GetName() + " to the List -- only ListItems can be added to Lists.")
        end
        renderer:Add(item)
    end

    action Add(integer index, Item2D item)
        if not (item is ListItem)
            alert("I could not add the item called " + item:GetName() + " to the List -- only ListItems can be added to Lists.")
        end
        renderer:Add(index, item)
    end

    private action NewListItem(text value) returns Control
        return NewListItem(value, undefined)
    end

    private action NewListItem(text value, Icon icon) returns Control
        LayoutProperties properties = GetDefaultLayoutProperties()

        ListItem newItem
        newItem:SetText(value)

        if icon not= undefined
            newItem:SetIcon(icon)
        end

        return newItem
    end

    action Get(integer index) returns text
        return GetListItem(index):GetText()
    end

    action GetListItem(integer index) returns ListItem
        return renderer:GetListItem(index)
    end

    action GetSelection returns ListSelection
        return selection
    end

    action GetIndexOf(ListItem item) returns integer
        return renderer:GetChildren():GetFirstLocation(item)
    end

    action GetSize returns integer
        return renderer:GetItemCount()
    end

    /*
    This action selects the given ListItem, if it is present in this List.
    */
    action Select(ListItem item)
        ListItem oldSelection = selection:GetListItem()
        if oldSelection not= undefined
            oldSelection:LostSelection()
        end

        if item not= undefined
            item:GainedSelection()

            if item:GetY() + item:GetHeight() > renderer:GetHeight() or item:GetY() < 0
                GoToItem(GetIndexOf(item))
            end
        end

        selection:Set(item)
    end

    /*
    This action selects the ListItem at the given index.
    */
    action Select(integer index)
        ListItem oldSelection = selection:GetListItem()
        if oldSelection not= undefined
            oldSelection:LostSelection()
        end

        ListItem item = GetListItem(index)
        if item not= undefined
            item:GainedSelection()
            if item:GetY() + item:GetHeight() > renderer:GetHeight() or item:GetY() < 0
                GoToItem(GetIndexOf(item))
            end
        end

        selection:Set(index)
    end

    action Deselect
        ListItem oldSelection = selection:GetListItem()
        if oldSelection not= undefined
            oldSelection:LostSelection()
        end

        selection:Empty()
    end

    action MoveSelectionUp
        integer index = selection:GetIndex()
        
        if index > 0
            Select(index - 1)
        end
    end

    action MoveSelectionDown
        integer index = selection:GetIndex()
        
        if index < GetSize() - 1
            Select(index + 1)
        end
    end

    /*
    This action sets the item activation Behavior for this List. If a ListItem
    would ever be activated (such as by a double-click), if it doesn't have
    its own activation Behavior, the List's item activation Behavior will
    be used instead.
    */
    action SetItemActivationBehavior(Behavior behavior)
        itemBehavior = behavior
    end

    /*
    This action returns the item activation Behavior for this List. If a
    ListItem would ever be activated (such as by a double-click), if it doesn't 
    have its own activation Behavior, the List's cell activation Behavior will
    be used instead.
    */
    action GetItemActivationBehavior returns Behavior
        return itemBehavior
    end

    action GetListItems returns Array<ListItem>
        return cast(Array<ListItem>, renderer:GetChildren())
    end

    /*
    This action selects an item using first letter navigation. The incoming letters
    should be lower case only.
    */
    action SelectByFirstLetters(text firstLetters)
        Array<ListItem> items = GetListItems()
        ListItem originalSelection = selection:GetListItem()

        boolean originalFound = false
        if originalSelection = undefined
            originalFound = true
        end

        ListItem firstValid = undefined
        integer counter = 0
        repeat while counter < items:GetSize()
            ListItem current = items:Get(counter)
            if current = originalSelection
                originalFound = true
            end

            if current:GetText():ToLowerCase():StartsWith(firstLetters)
                if originalFound = true
                    current:Select()
                    return now
                elseif firstValid = undefined
                    firstValid = current
                end
            end

            counter = counter + 1
        end

        if firstValid not= undefined
            firstValid:Select()
        end
    end

    /*
    This action returns the total width of the content contained inside
    the scrollable region of this Control. If the content's width is larger
    than the width of the Control, then horizontal scrolling can be used.
    */
    action GetTotalContentWidth returns number
        // TO-DO: Optimize this so it isn't an O(n) check every time. This could be cached, if nothing else.
        number result = 0

        integer i = 0
        repeat while i < GetLineCount()
            ListItem item = GetListItem(i)
            number width = item:GetWidth()

            if width > result
                result = width
            end

            i = i + 1
        end

        return result
    end

    /*
    This action returns the total height of the content contained inside
    the scrollable region of this Control. If the content's height is larger
    than the height of the Control, then vertical scrolling can be used.
    */
    action GetTotalContentHeight returns number
        // TO-DO: Optimize this so it isn't an O(n) summation every time. This could be cached, if nothing else.
        number result = 0

        integer i = 0
        repeat while i < GetLineCount()
            ListItem item = GetListItem(i)
            result = result + item:GetHeight()
            i = i + 1
        end

        return result
    end

    /*
    This action returns the Control that represents the main content of the
    scrollable control. This is most commonly a pane or a specialized renderer
    used to display other elements inside of it.
    */
    action GetScrollableRegion returns Control
        return renderer
    end
    
    /*
    This action returns how far the scrollable region should scroll vertically for
    a single "tick" of mouse scrolling on the y-axis. This value is returned as a
    percentage of the total content height (represented between 0 and 1).
    */
    action GetScrollIncrement returns number
        return 1.0 / GetLineCount()
    end

    /*
    This action occurs just after the scroll positions are updated and just before Resizing occurs.
    It can be used to adjust any layout properties that need to be modified on the scrollable region
    before processing a resize.
    */
    private action RefreshScrollableRegion
        renderer:RefreshContents()
    end

    /*
    This action returns the height of the requested line in pixels. This action
    is 0-indexed, so the first line of a control is line 0.

    Attribute: Parameter line The line to get the height of.
    Attribute: Returns The height of the line in pixels.
    */
    action GetLineHeight(integer line) returns number
        if line >= GetLineCount()
            return 0
        end

        ListItem item = GetListItem(line)

        if item:GetDefaultLayoutProperties():NeedsRendering()
            item:LoadGraphics(item:GetDefaultLayoutProperties())
        end

        if item:NeedsLayout()
            item:Resize()
        end

        return item:GetHeight()
    end

    /*
    This action returns the y value of the requested line. This value is measured in pixels
    relative to the bottom of the ScrollableLineControl. Lines which are currently off the
    top of the scrolling region will return a value exceeding the control's height, and if 
    they're off the bottom of the region, this value will be negative.

    Attribute: Parameter line The requested line
    Attribute: Returns The y-position of the bottom of the line, relative to the bottom of the control.
    */
    action GetLineY(integer line) returns number
        number contentHeight = GetTotalContentHeight()

        number baseY = GetHeight() - ((line + 1.0) / GetLineCount() * contentHeight)
        number scrollOffset = GetScrollPercentageY() * contentHeight

        return baseY + scrollOffset
    end

    /*
    This action returns how many lines are in this control.

    Attribute: Returns The total number of lines currently in this control.
    */
    action GetLineCount returns integer
        return renderer:GetItemCount()
    end

    /*
    This action returns the index of the first visible line in the scrollable control.

    Attribute: Returns The index of the first visible line.
    */
    action GetFirstVisibleLine returns integer
        return cast(integer, GetScrollPercentageY() * GetLineCount())
    end

    action GoToItem(integer index)
        // ScrollPercentY = (y - (height - ((line + 1) / LineCount * contentHeight))) / contentHeight
        number height = renderer:GetHeight()
        number contentHeight = GetTotalContentHeight()
        number targetY = height / 2.0
        number result = (targetY - (height - ((index + 1) / GetLineCount() * contentHeight))) / contentHeight
        SetScrollPercentageY(result)
    end

end