package Libraries.Interface.Controls

use Libraries.Game.Graphics.Painter2D
use Libraries.Interface.Layouts.LayoutProperties

class ScrollableMenuPanel is MenuPanelBlueprint

    number itemsInView = 10
    number scrollIndex = 0
    
    Control scrollAnchor
    Control scrollBar
    Control scrollControl

    on create
        SetClipping(true)
        SetCustomDrawing(true)

        SetName("Scroll Menu Panel")

        scrollAnchor:SetName("Scroll Anchor")
        scrollBar:SetName("Scroll Bar")
        scrollControl:SetName("Scroll Control")
    end

    action IsScrollable returns boolean
        return true
    end

    action Draw(Painter2D painter)
        if not IsShowing()
            return now
        end

        if GetView2D() not= undefined
            GetView2D():Draw(painter)
        end

        integer intIndex = cast(integer, scrollIndex)
        integer itemsToView = cast(integer, itemsInView)

        // If there's a fractional component, we need to consider an additional item which will be at least partially off the screen.
        if itemsToView not= itemsInView
            itemsToView = itemsToView + 1
        end

        integer counter = intIndex
        repeat while counter < intIndex + itemsToView
            MenuItem item = Get(counter)
            item:Draw(painter)
            counter = counter + 1
        end
    end

    action SetItemsInView(number itemCount)
        if itemCount = itemsInView
            return now
        end

        itemsInView = itemCount
        // Setting the scroll index again triggers a resize, possibly updating
        // the index to a new value if the old value is no longer valid.
        SetScrollIndex(scrollIndex)
    end

    action GetItemsInView returns number
        return itemsInView
    end

    /*
    This action returns the index of the first MenuItem visible in the scroll
    pane. This can return non-integer values to indicate the first item is
    partially offscreen -- for example, a returned value of 8.4 would indicate
    that the first visible item in the scroll pane is the 8th indexed item, and
    it is 40% of the way off of the top of the pane.

    Attribute: Returns The index of the first item visible in the scroll pane, with a decimal component describing how much of it is off the top of the panel (if any).
    */
    action GetScrollIndex returns number
        return scrollIndex
    end

    action SetScrollIndex(number index)
        scrollIndex = index
        Resize()
    end

    action Resize
        /*
        We manually override the Resize call here to do special work.
        This is more convenient than using a Layout because we're doing
        custom rendering on our components anyway and we want to limit the
        amount of layout work we're doing to only the relevant MenuItems.
        */

        // If we're already resizing, return immediately from a recursive call.
        if parent:Item2D:isResizing
            return now
        end

        if IsEmpty()
            return now
        end

        if scrollIndex + itemsInView > GetSize()
            scrollIndex = GetSize() - itemsInView
        end

        parent:Item2D:isResizing = true

        LayoutProperties containerProperties = GetDefaultLayoutProperties()

        number leftBorder = 0
        number rightBorder = 0
        number topBorder = 0
        number bottomBorder = 0

        number thickness = containerProperties:GetBorderThickness()

        if containerProperties:HasLeftBorder()
             leftBorder = thickness
        end
        if containerProperties:HasRightBorder()
            rightBorder = thickness
        end
        if containerProperties:HasTopBorder()
            topBorder = thickness
        end
        if containerProperties:HasBottomBorder()
            bottomBorder = thickness
        end

        number longestWidth = 0
        integer i = 0

        repeat while i < GetSize()
            MenuItem menuItem = Get(i)
            LayoutProperties properties = menuItem:GetDefaultLayoutProperties()

            if properties:NeedsRendering()
                menuItem:LoadGraphics(properties)
            end

            if menuItem:GetIconWidth() > GetIconRegionWidth()
                SetIconRegionWidth(menuItem:GetIconWidth())
            end
            if menuItem:GetNameWidth() > GetLabelRegionWidth()
                SetLabelRegionWidth(menuItem:GetNameWidth())
            end
            if menuItem:GetShortcutWidth() > GetShortcutRegionWidth()
                SetShortcutRegionWidth(menuItem:GetShortcutWidth())
            end
            if menuItem:GetSubmenuIconWidth() > GetArrowRegionWidth()
                SetArrowRegionWidth(menuItem:GetSubmenuIconWidth())
            end

            i = i + 1
        end
 
        integer intIndex = cast(integer, scrollIndex)
        integer itemsToView = cast(integer, itemsInView)

        // If there's a fractional component, we need to consider an additional item which will be at least partially off the screen.
        if itemsToView not= itemsInView
            itemsToView = itemsToView + 1
        end

        integer last = intIndex + itemsToView
        number offset = scrollIndex - intIndex

        MenuItem lastItem = Get(last)
        lastItem:Resize()

        if longestWidth < lastItem:GetWidth()
            longestWidth = lastItem:GetWidth()
        end

        number y = -(1 - offset) * lastItem:GetHeight()
        lastItem:SetPosition(leftBorder, y)
        y = y + lastItem:GetHeight()

        number largestHeight = 0

        i = last
        repeat while i > intIndex
            i = i - 1
            MenuItem kid = Get(i)
            kid:Resize()

            if longestWidth < kid:GetWidth()
                longestWidth = kid:GetWidth()
            end

            kid:SetPosition(leftBorder, y)

            y = y + kid:GetHeight()

            if kid:GetHeight() > largestHeight
                largestHeight = kid:GetHeight()
            end
        end

        // Set the size of the menu panel to fit the items in view, and adjust the position so the top remains in the same place.
        number oldHeight = GetHeight()
        SetSize(longestWidth + leftBorder + rightBorder, bottomBorder + topBorder + largestHeight * itemsInView)
        MoveY(oldHeight - GetHeight())

        repeat while i < GetSize()
            Item2D kid = Get(i)
            kid:SetWidth(longestWidth)
            i = i + 1
        end

        /*
        We need to reset our layout flag to indicate we don't need resizing
        until more changes occur, and reset our resizing flag to allow future calls.
        */
        ResetLayoutFlag()
        parent:Item2D:isResizing = false
    end
end