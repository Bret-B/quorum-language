package Libraries.Interface.Controls

use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Label
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Gradient
use Libraries.Interface.Accessibility
use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Views.View2D
use Libraries.Interface.Views.ToggleView
use Libraries.Interface.Views.CheckboxView

class Checkbox is ToggleButton

    Icon buttonIcon
    Label label

    on create
        // The layout should already be present, courtesy of our inheritance of Button.
        FlowLayout layout = cast(FlowLayout, GetLayout())
        layout:SetIgnoreHidden(false)
        layout:SetSingleLine(true)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:FIT_CONTENTS)
        properties:SetVerticalLayoutMode(properties:FIT_FONT)
        properties:SetBorderThickness(2)

        // The properties already contain a loaded Font from the Button constructor.
        label:SetFont(properties:GetFont())
        label:SetFontSize(properties:GetFontSize())

        LayoutProperties iconProperties = buttonIcon:GetDefaultLayoutProperties()
        iconProperties:SetHorizontalLayoutMode(iconProperties:MAINTAIN_ASPECT_RATIO)
        iconProperties:SetVerticalLayoutMode(iconProperties:STANDARD)
        iconProperties:SetPercentageWidth(1.0)
        iconProperties:SetPercentageHeight(1.0)

        label:SetLeftPadding(6)

        Add(buttonIcon)
        Add(label)

        SetPaletteKey("Checkbox")
        buttonIcon:SetPaletteKey("Checkbox")

        SetAccessibilityCode(parent:Item:CHECKBOX)
    end

    action SetToggleState(boolean toggleState)
        /*
        This overwrites the ToggleButton implementation of SetToggleState.
        It is nearly identical to the ToggleButton implementation, except that
        it also tries to toggle the view of the Button icon.
        */
        if parent:ToggleButton:toggled = toggleState
            return now
        end

        ButtonGroup group = GetButtonGroup()
        if toggleState = true and group not= undefined
            group:DeselectAll()
        end

        parent:ToggleButton:toggled = toggleState
        if buttonIcon:GetView2D() is ToggleView
            ToggleView content = cast(ToggleView, buttonIcon:GetView2D())
            content:SetToggleState(toggleState)
        end

        Behavior behavior = GetActivationBehavior()
        if toggleState = true
            OnToggleOn()
            if behavior not= undefined
                BehaviorEvent event
                event:SetItem(me)
                behavior:Run(event)
            end
        else
            OnToggleOff()
            if behavior not= undefined
                behavior:Dispose()
            end
        end

        Accessibility accessibility = parent:ToggleButton:manager:GetAccessibility()
        if accessibility not= undefined
            accessibility:ToggleButtonToggled(me)
        end
    end

    /*
    This action is used to load the graphical components of the Control. This is
    handled automatically by the Game engine as needed, and most users shouldn't
    need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        parent:Control:LoadGraphics(properties)

        View2D buttonView = buttonIcon:GetView2D()
        View2D propertiesView = properties:GetView2D()

        if propertiesView not= undefined and buttonView not= propertiesView
            buttonIcon:SetView2D(propertiesView)
            buttonView = propertiesView
        end

        if label:GetSize() not= properties:GetFontSize()
            label:SetSize(properties:GetFontSize())
        end

        if label:GetText() not= properties:GetLabelText()
            label:SetText(properties:GetLabelText())
        end

        if buttonView = undefined
            CheckboxView checkboxView
            checkboxView:Initialize(properties)
            buttonIcon:SetView2D(checkboxView)
        end

        boolean toggleState = parent:ToggleButton:toggled
        if buttonIcon:GetView2D() is ToggleView
            ToggleView content = cast(ToggleView, buttonIcon:GetView2D())
            content:SetToggleState(toggleState)
        end

        if buttonIcon:GetView2D() is CheckboxView
            CheckboxView content = cast(CheckboxView, buttonIcon:GetView2D())
            content:SetCheckColor(buttonIcon:GetAccentColor())
        end
    end

end