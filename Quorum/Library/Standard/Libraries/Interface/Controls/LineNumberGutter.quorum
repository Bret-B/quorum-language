package Libraries.Interface.Controls

use Libraries.Containers.Array
use Libraries.Game.Graphics.Label
use Libraries.Game.Graphics.Font
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Language.Debug.BreakpointManager
use Libraries.Language.Debug.BreakpointListener
use Libraries.System.File
use Libraries.Language.Debug.BreakpointEvent
use Libraries.Language.Debug.Breakpoint
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Iterator

class LineNumberGutter is Gutter, BreakpointListener
    Array<Label> labels
    Array<Drawable> drawables
    Color color
    boolean positionOnBaseLine = true
    BreakpointManager breakpoints = undefined
    File file = undefined
    integer previousStartLine = 0
    integer debuggerLine = -1 //-1 means not active

    action GetBreakpointManager returns BreakpointManager
        return breakpoints
    end

    action SetBreakpointManager(BreakpointManager breakpoints)
        me:breakpoints = breakpoints
        breakpoints:Add(me)
    end

    action GetFile returns File
        return file
    end

    action SetFile(File file)
        me:file = file
    end

    action ToggledBreakpoint(BreakpointEvent event)
        Breakpoint breakpoint = event:GetBreakpoint()
        File breakFile = breakpoint:GetFile()
        text breakPath = breakFile:GetAbsolutePath()
        text path = ""
        if file not= undefined
            path = file:GetAbsolutePath()
        end

        if breakPath = path
            UpdateVisuals(previousStartLine)
        end
    end

    on create
        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetLeftMargin(6)
        properties:SetRightMargin(6)
    end

    private action SelectFont returns Font
        Font font = GetFont()
        if font = undefined
            font = GetControl():GetFont()
        end
        if font = undefined
            font = GetLabel(0):GetFont()
        end

        return font
    end

    action GetGutterThickness returns number
        ScrollableLineControl control = GetControl()

        Font font = SelectFont()

        text linesInText = "" + control:GetLineCount()
        integer glyphsRequired = linesInText:GetSize()
        
        return font:GetGlyph("0"):horizontalAdvance * glyphsRequired + (GetLeftMargin() + GetRightMargin()) * GetInterfaceScale()
    end

    action UpdateVisuals(integer startLine)
        Empty()
        previousStartLine = startLine

        ScrollableLineControl control = GetControl()
        integer fontSize = control:GetFontSize()
        if GetDefaultLayoutProperties():HasNumberPropertyOverride("fontSize")
            fontSize = GetFontSize()
        end

        Font font = SelectFont()

        LayoutProperties properties = GetCurrentLayoutProperties()
        if properties = undefined
            properties = GetDefaultLayoutProperties()
        end

        text linesInText = "" + control:GetLineCount()
        integer glyphsRequired = linesInText:GetSize()
        /*
        We assume the space required for the "0" glyph is a good predictor of
        the space used for each glyph in the font. For monospaced fonts this
        will be accurate and the choice of glyph is arbitrary. For other fonts,
        this is only an approximation, which may require some extra space via
        padding in order to look correct.
        */
        number leftMargin = properties:GetLeftMargin() * GetInterfaceScale()
        number rightMargin = properties:GetRightMargin() * GetInterfaceScale()
        number width = font:GetGlyph("0"):horizontalAdvance * glyphsRequired + leftMargin + rightMargin
        integer totalLines = control:GetLineCount()

        // If the horizontal scroll bar is visible, the rendering area will be slightly shorter than the gutter is.
        // We have to compensate for it if it's there.
        number barOffset = 0
        if control:IsShowingHorizontalBar()
            barOffset = control:GetBarThickness() * control:GetInterfaceScale()
        end

        integer counter = 0
        integer currentLine = startLine
        boolean last = false
        repeat while currentLine < totalLines and last = false
            number y = control:GetLineY(currentLine) + barOffset
            number height = control:GetLineHeight(currentLine)

            if y < 0
                last = true
            end

            Label label = GetLabel(counter)

            if font not= undefined
                label:SetFont(font)
            end

            Color color
            
            label:SetSize(fontSize)
            label:SetText("" + (currentLine + 1))
            label:SetPosition(width - label:GetWidth() - rightMargin, y + height / 2.0 - label:GetHeight() / 2.0)
            label:SetColor(GetFontColor())

            //this is a bit wasteful of memory, but might be ok.
            boolean fillBackground = false
            Drawable background = GetBackground(counter)
            if file not= undefined and breakpoints not= undefined
                integer myWidth = cast(integer, width - rightMargin - leftMargin)
                integer myHeight = cast(integer, height)
                integer descent = font:GetMaximumDescent()
                background:SetSize(myWidth, myHeight)
                
                background:SetPosition(width - background:GetWidth() - rightMargin, y + myHeight)

                Breakpoint point = breakpoints:GetBreakpoint(file:GetAbsolutePath(), currentLine - 1)
                if (point not= undefined) or (currentLine - 1 = debuggerLine and debuggerLine not= -1)
                    if currentLine - 1 = debuggerLine
                        background:SetColor(GetSelectionColor())
                    elseif point not= undefined and point:GetLine() = currentLine - 1
                        background:SetColor(GetAccentColor())
                    end
                    //label:SetColor(GetFocusFontColor())
                    //label:SetShadowColor(GetFontOutlineColor())
                    fillBackground = true
                end
            end

            if fillBackground
                Add(background)
            end
            Add(label)

            currentLine = currentLine + 1
            counter = counter + 1
        end
    end
 
    private action GetLabel(integer index) returns Label
        if labels:GetSize() <= index or labels:Get(index) = undefined
            Label label
label:SetAccessibilityCode(label:parent:Item:NOT_ACCESSIBLE)
            label:SetPositionOnBaseLine(positionOnBaseLine)
            labels:Add(index, label)
            return label
        else
            return labels:Get(index)
        end
    end

    private action GetBackground(integer index) returns Drawable
        if drawables:GetSize() <= index or drawables:Get(index) = undefined
            Drawable drawable
            
            color = color:White()
            drawable:LoadFilledRectangle(1,1, color)
            drawables:Add(index, drawable)
            return drawable
        else
            return drawables:Get(index)
        end
    end

    action IsPositioningOnBaseLine returns boolean
        return positionOnBaseLine
    end

    action SetPositionOnBaseLine(boolean positionOnBaseLine)
        if positionOnBaseLine not= me:positionOnBaseLine
            integer i = 0
            repeat while i < labels:GetSize()
                labels:Get(i):SetPositionOnBaseLine(positionOnBaseLine)
                i = i + 1
            end
        end

        me:positionOnBaseLine = positionOnBaseLine
    end

    /*
        A debugger line of -1 means not active. All other values
        indicate the line of code where the debugger is active.
    */
    action GetDebuggerLine returns integer
        return debuggerLine
    end

    /*
        A debugger line of -1 means not active. All other values
        indicate the line of code where the debugger is active.
    */
    action SetDebuggerLine(integer debuggerLine)
        me:debuggerLine = debuggerLine
        UpdateVisuals(previousStartLine)
    end

end