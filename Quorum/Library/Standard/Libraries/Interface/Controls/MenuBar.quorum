package Libraries.Interface.Controls

use Libraries.Interface.Controls.Control
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Selections.Selection
use Libraries.Interface.Selections.MenuSelection
use Libraries.Interface.Views.View2D
use Libraries.Interface.Views.LabelBoxView
use Libraries.Interface.Views.DrawableView
use Libraries.Interface.Views.ControlView
use Libraries.Interface.Views.MenuItemView
use Libraries.Interface.Views.DefaultMenuItemView
use Libraries.Interface.Events.MenuChangeEvent
use Libraries.Interface.Events.MenuChangeListener
use Libraries.Containers.Array
use Libraries.Containers.Support.Pair
use Libraries.Game.Graphics.Gradient
use Libraries.Game.Graphics.Color
use Libraries.Game.GameStateManager

class MenuBar is MenuRoot
    Layout defaultLayout = undefined
    LayoutProperties defaultLayoutProperties
    Array<MenuItem> menus

    on create
        FlowLayout layout
        defaultLayout = layout
        SetLayout(defaultLayout)

        defaultLayoutProperties = GetDefaultLayoutProperties()
        defaultLayoutProperties:SetPercentageWidth(1)
        defaultLayoutProperties:SetPercentageY(1)
        defaultLayoutProperties:SetVerticalLayoutMode(defaultLayoutProperties:FIT_CONTENTS)
        defaultLayoutProperties:SetBorderThickness(1)
        defaultLayoutProperties:SetBorderStyle(defaultLayoutProperties:BOTTOM)
        
        Color color
        Gradient gradient
        Color gray = color:CustomColor(0.85, 0.85, 0.9, 1)
        Color lightGray = color:CustomColor(0.9, 0.9, 0.9, 1)
        gradient:Set(gray, gray, lightGray, lightGray)
        defaultLayoutProperties:SetBackgroundColor(gradient)
        defaultLayoutProperties:SetBorderColor(color:Black())

        SetAccessibilityCode(parent:Item:MENU_BAR)
        SetName("Menu Bar")
    end

    action IsAccessibleParent returns boolean
        return true
    end

    action Add(Array<MenuItem> menuHeaders)
        integer counter = 0
        repeat while counter < menuHeaders:GetSize()
            MenuItem menu = menuHeaders:Get(counter)
            Add(menu)
            counter = counter + 1
        end
    end

    action Add(MenuItem item)
        menus:Add(item)
        parent:Item2D:Add(item)
        item:SetMenuRoot(me)
    end

    action Close
        integer counter = 0
        repeat while counter < menus:GetSize()
            menus:Get(counter):Close()
            counter = counter + 1
        end
        SetSelectingState(false)
    end

    action MoveSelectionLeft
        Array<MenuItem> path = GetSelection():GetPath()
        if path:IsEmpty()
            if menus:IsEmpty() = false
            Array<MenuItem> array
                array:Add(menus:GetFromEnd())
                Select(array)
            end

            return now
        end

        if path:GetSize() <= 2
            MenuItem name = path:Get(0)
            boolean shouldOpen = name:IsOpen()
            integer counter = 0
            repeat while counter < menus:GetSize()
                MenuItem menu = menus:Get(counter)
                if menu:Equals(name)
                    integer index = counter - 1
                    if index < 0
                        index = menus:GetSize() - 1
                    end
                    path:Set(0, menus:Get(index))
                    if shouldOpen
                        menus:Get(index):Open()
                    else
                        menus:Get(index):Close()
                    end
                    Select(path)
                    return now
                end
                counter = counter + 1
            end
        else
            path:RemoveFromEnd()
            Select(path)
        end
    end

    action MoveSelectionRight
        // Do a copy so modifying it here doesn't have side effects on the
        // original selection (we need to preserve it for Select to use).
        Array<MenuItem> path = GetSelection():GetPath():CopyToArray()
        if path:GetSize() = 1
            MenuItem name = path:Get(0)
            boolean shouldOpen = name:IsOpen()
            integer counter = 0
            repeat while counter < menus:GetSize()
                MenuItem menu = menus:Get(counter)
                if menu:Equals(name)
                    integer index = (counter + 1) mod menus:GetSize()
                    path:Set(0, menus:Get(index))
                    if shouldOpen
                        menus:Get(index):Open()
                    else
                        menus:Get(index):Close()
                    end
                    Select(path)
                    return now
                end
                counter = counter + 1
            end
        elseif path:GetSize() > 1
            MenuItem item = GetMenuItem(path)
            if item:IsMenu()
                if not item:IsOpen()
                    item:Open()
                end
                item:GetMenuItems():Next():Select()
            else
                MenuItem name = path:Get(0)
                integer counter = 0
                boolean shouldOpen = name:IsOpen()
                repeat while counter < menus:GetSize()
                    MenuItem menu = menus:Get(counter)
                    if menu:Equals(name)
                        integer index = (counter + 1) mod menus:GetSize()
                        path:Empty()
                        path:Add(menus:Get(index))
                        if shouldOpen
                            menus:Get(index):Open()
                        else
                            menus:Get(index):Close()
                        end
                        Select(path)
                        return now
                    end
                    counter = counter + 1
                end
            end
        elseif not menus:IsEmpty()
            Array<MenuItem> array
            array:Add(menus:Get(0))
            Select(array)
        end
    end

    action MoveSelectionDown
        MenuItem item = GetMenuItem(GetSelection():GetPath())
        if item not= undefined
            item:MenuSelectionDown()
        end
    end

    action MoveSelectionUp
        MenuItem item = GetMenuItem(GetSelection():GetPath())
        if item not= undefined
            item:MenuSelectionUp()
        end
    end

    /*
    This action is used to load the graphical components of the Control. This is
    handled automatically by the Game engine as needed, and most users shouldn't
    need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        if properties:GetView2D() not= undefined
            SetView2D(properties:GetView2D())
        elseif GetView2D() = undefined
            LabelBoxView defaultBar
            defaultBar:SetBorderStyle(defaultLayoutProperties:GetBorderStyle())
            defaultBar:SetBorderThickness(cast(integer, defaultLayoutProperties:GetBorderThickness()))
            defaultBar:Initialize(defaultLayoutProperties:GetBackgroundColor(), defaultLayoutProperties:GetBorderColor())
            SetView2D(defaultBar)
        end

        parent:Control:LoadGraphics(properties)
    end

    /*
    The HasBar action is used to specify if this MenuRoot uses a special layout
    for the first menu items (i.e., the first set of the menu items is placed in
    a menu bar, unlike submenus which use menu panels).
    */
    action HasBar returns boolean
        return true
    end
end
