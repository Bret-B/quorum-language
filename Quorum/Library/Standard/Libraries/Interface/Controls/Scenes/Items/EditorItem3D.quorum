package Libraries.Interface.Controls.Scenes.Items

use Libraries.Game.Graphics.Model
use Libraries.Game.Graphics.Color
use Libraries.Containers.Array
use Libraries.Game.Graphics.Material
use Libraries.Game.Graphics.ColorAttribute
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Interface.Events.FocusEvent
use Libraries.Compute.Vector3
use Libraries.Game.Scenes.SceneProperties
use Libraries.Interface.Controls.Scenes.Items.EditorItem
use Libraries.Interface.Controls.Scenes.Items.EditorModel

/*
    The EditorItem3D class represents a 3D object in the Scene Editor that is in the 
    scene and is being added, removed, or having its properties modified. 
    The main purpose of this class is to get and set information about certain properties 
    of an item in the scene such as those for physics calculations like mass and restitution. 
    Properties relating to physics and others important to the scene like position and the 
    texture of the object will be saved to the scene file. Specific 3D objects like point
    lights will have an intensity value which determines their brightness in the scene.
*/
class EditorItem3D is EditorItem, EditorModel

    /*
        This action returns the nearest parent object that is accessible. This 
        can be anything that the programmer wants to be accessible, from user interface
        components in a 2D interface to 3D components relative in 3-space on screen. 
        By default, items have no accessible parent and are self-contained, but 
        user interface components normally override the behavior so that controls
        can be logically nested within each other. This class returns the accessible parent
        from the EditorItem portion of this class not the model. 

        Attribute: Returns The accessible parent
    */
    action GetAccessibleParent returns Item
        return parent:EditorItem:GetAccessibleParent()
    end

    /*
        This action will set the intensity of a light, which indicates how bright
        it is. In the EditorItem3D class this does nothing but a class such as 
        EditorPointLight will override this. 
    */
    action SetIntensity(number intensity)
        // Do nothing. Overwritten by classes that care about this (e.g. EditorPointLight)
    end

    /*
        This action returns the intensity of this object. Intensity will only matter
        if the object is a light so this action in EditorItem3D will return 0 unless
        overwritten. 
    */
    action GetIntensity returns number
        return 0
    end
end