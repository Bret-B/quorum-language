package Libraries.Interface.Controls.Scenes.Items.Highlights

use Libraries.Interface.Item
use Libraries.Game.Scenes.SceneProperties
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Interface.Controls.Scenes.Items.EditorItem

/*
    The SelectionHighlight class represents a box that appears around an item
    in the scene to show that an item is being selected. The highlight makes gives
    a visual component to the selection but also the highlight is used to interact with
    the item itself. The SceneEditor doesn't not take Item2Ds and Item3Ds and change their
    properties directly. The SelectionHighlight keeps a reference to the item and then
    actions in the selection allow for changing properties of the item. 
*/
class SelectionHighlight is EditorItem

    /*
        Returns the item that is being selected and that the highlight will try to
        encapsulate. 
    */
    blueprint action GetItem returns Item

    /*
        Sets the name of the item being selected and in turn changes the name of the highlight.
    */
    action SetName(text name)
        Item item = GetItem()
        if item not= undefined and item:GetName() not= name
            item:SetName(name)
        end
        parent:EditorItem:SetName(name)
    end

    /*
        Returns if the selected item has physics enabled.
    */
    action IsEditorPhysicsEnabled returns boolean
        SceneProperties properties
        Item item = GetItem()
        if item:HasProperty(properties:PHYSICS_ENABLED)
            return item:GetProperty(properties:PHYSICS_ENABLED):GetBoolean()
        end
        return false
    end

    /*
        Sets the PhysicsEnabled property of the selected item.
    */
    action SetEditorPhysicsEnabled(boolean enable)
        SceneProperties properties
        Item item = GetItem()
        if item:HasProperty(properties:PHYSICS_ENABLED)
            JavaScriptObjectNotation json = item:GetProperty(properties:PHYSICS_ENABLED)
            json:SetBoolean(enable)
        else
            JavaScriptObjectNotation json
            json:SetBoolean(enable)
            item:SetProperty(properties:PHYSICS_ENABLED, json)
        end
    end

    /*
        Returns the Responsiveness property of the selected item.
    */
    action GetEditorResponsiveness returns integer
        SceneProperties properties
        Item item = GetItem()
        if item:HasProperty(properties:RESPONSIVENESS)
            return item:GetProperty(properties:RESPONSIVENESS):GetInteger()
        end

        // The default value is UNMOVABLE, or 0.
        return 0
    end

    /*
        Sets the Responsiveness property of the selected item.
    */
    action SetEditorResponsiveness(integer responsive)
        SceneProperties properties
        Item item = GetItem()
        if item:HasProperty(properties:RESPONSIVENESS)
            JavaScriptObjectNotation json = item:GetProperty(properties:RESPONSIVENESS)
            json:SetInteger(responsive)
        else
            JavaScriptObjectNotation json
            json:SetInteger(responsive)
            item:SetProperty(properties:RESPONSIVENESS, json)
        end
    end

    /*
        Returns the Mass property of the selected item.
    */
    action GetEditorMass returns number
        SceneProperties properties
        Item item = GetItem()
        if item:HasProperty(properties:MASS)
            return item:GetProperty(properties:MASS):GetNumber()
        end

        return 0
    end

    /*
        Sets the Mass property of the selected item.
    */
    action SetEditorMass(number mass)
        SceneProperties properties
        Item item = GetItem()
        if item:HasProperty(properties:MASS)
            JavaScriptObjectNotation json = item:GetProperty(properties:MASS)
            json:SetNumber(mass)
        else
            JavaScriptObjectNotation json
            json:SetNumber(mass)
            item:SetProperty(properties:MASS, json)
        end
    end

    /*
        Returns the Friction property of the selected item.
    */
    action GetEditorFriction returns number
        SceneProperties properties
        Item item = GetItem()
        if item:HasProperty(properties:FRICTION)
            return item:GetProperty(properties:FRICTION):GetNumber()
        end

        // The default value is 0.
        return 0
    end

    /*
        Sets the Friction property of the selected item.
    */
    action SetEditorFriction(number friction)
        SceneProperties properties
        Item item = GetItem()
        if item:HasProperty(properties:FRICTION)
            JavaScriptObjectNotation json = item:GetProperty(properties:FRICTION)
            json:SetNumber(friction)
        else
            JavaScriptObjectNotation json
            json:SetNumber(friction)
            item:SetProperty(properties:FRICTION, json)
        end
    end

    /*
        Returns the Restitution property of the selected item.
    */
    action GetEditorRestitution returns number
        SceneProperties properties
        Item item = GetItem()
        if item:HasProperty(properties:RESTITUTION)
            return item:GetProperty(properties:RESTITUTION):GetNumber()
        end

        // The default value is 0.
        return 0
    end

    /*
        Sets the Restitution property of the selected item.
    */
    action SetEditorRestitution(number restitution)
        SceneProperties properties
        Item item = GetItem()
        if item:HasProperty(properties:RESTITUTION)
            JavaScriptObjectNotation json = item:GetProperty(properties:RESTITUTION)
            json:SetNumber(restitution)
        else
            JavaScriptObjectNotation json
            json:SetNumber(restitution)
            item:SetProperty(properties:RESTITUTION, json)
        end
    end
end