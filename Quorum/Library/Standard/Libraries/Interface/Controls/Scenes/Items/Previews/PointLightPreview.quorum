package Libraries.Interface.Controls.Scenes.Items.Previews

use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Material
use Libraries.Game.Graphics.ColorAttribute
use Libraries.Interface.Controls.Scenes.Items.EditorCursor
use Libraries.Interface.Controls.Scenes.Blueprints.PointLightBlueprint
use Libraries.Interface.Controls.Scenes.Items.Previews.ItemPreview3D
use Libraries.Interface.Controls.Scenes.SceneEditor
use Libraries.Interface.Controls.Scenes.Items.EditorCursor3D
use Libraries.Interface.Controls.Scenes.Items.EditorPointLight

/*
    The PointLightPreview class is an item only meant to visible in the editor that represents
    a PointLight item in a 3D scene. In a 3D scene a PointLight is not like a model where it's a
    3D shape. A PointLight is meant to affect how other objects in the scene look so the preview is
    meant to be a box that is loaded to the user can have a visual of where the point light is 
    instead of inferring based on any other objects near it.
*/
class PointLightPreview is ItemPreview3D

    number intensity = 0

    /*
        This action loads a box with the point light texture on it. The box will not be visible in the scene
        when the game is run but it will be visible in the editor.
    */
    action Load(SceneEditor controller, PointLightBlueprint schematic)
        SetSceneEditor(controller)
        SetItemBlueprint(schematic)

        Color color
        color:SetColor(schematic:GetRed(), schematic:GetGreen(), schematic:GetBlue(), 0.75)
        
        SetName(schematic:GetName() + controller:GetNextNamePostfix(schematic:GetName()))
        SetDescription(schematic:GetDescription())

        LoadBox(0.5, 0.5, 0.5, schematic:GetModelTexture())
    
        // We need to add a diffuse color attribute to the model so that the textured box also supports color.
        SetColor(color)
        
        intensity = schematic:GetIntensity()

        EditorCursor cursor = controller:GetCursor()
        if cursor is EditorCursor3D
            EditorCursor3D cursor3D = cast(EditorCursor3D, cursor)
            SetPosition(cursor3D:GetX(), cursor3D:GetY(), cursor:GetZ())
        end
    end

    /*
        This action returns an EditorPointLight which is box with a texture on it to show where a point light would be.
        This model would not be visible in the normal scene running outside of the editor. 
    */
    action ConvertToModel returns Model
        EditorPointLight light
        light:SetName(GetName())
        light:SetDescription(GetDescription())
        
        PointLightBlueprint schematic = cast(PointLightBlueprint, GetItemBlueprint())
        Color color = GetColor():Copy()
        color:SetAlpha(1.0)

        light:SetLight(color, GetPosition(), GetIntensity())

        return light
    end

    /*
        SetIntensity sets the brightness of the light. The preview needs an intensity so the user can see how the light will
        affect other objects as there moving the preview.
    */
    action SetIntensity(number intensity)
        me:intensity = intensity
    end

    /*
        GetIntensity returns the brightness of the light. The preview needs an intensity so the user can see how the light will
        affect other objects as there moving the preview.
    */
    action GetIntensity returns number
        return intensity
    end

end