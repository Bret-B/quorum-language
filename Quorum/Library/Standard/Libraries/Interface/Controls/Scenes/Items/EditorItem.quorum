package Libraries.Interface.Controls.Scenes.Items

use Libraries.Interface.Controls.Scenes.SceneConstants
use Libraries.Interface.Controls.Scenes.SceneEditor_LIBRARY
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Interface.Events.FocusEvent
use Libraries.Game.Scenes.SceneProperties
use Libraries.Interface.Item


/*
    The Editor Item class represents an object in the Scene Editor that is in the 
    scene and is being added, removed, or having its properties modified. 
    The main purpose of this class is to get and set information about certain properties 
    of an item in the scene such as those for physics calculations like mass and restitution. 
    Properties relating to physics and others important to the scene like position and the 
    texture of the object will be saved to the scene file.  
*/
class EditorItem is Item
    
    SceneConstants constants
    SceneEditor_LIBRARY editor = undefined

    on create
        SetProperty(constants:EDITOR_TAG, undefined)
        SetFocusable(true)
        SetAccessibilityCode(parent:Item:CUSTOM)
    end

    /*
        ResetScale sets the scale of the object along each axis to the default which is usually 1. 
        The scale of the object affects how large it is in the scene. So a scale of 2 on the x-axis
        means the object is twice as big on the x-axis than when normally sized. 
    */
    blueprint action ResetScale

    /*
        Sets the SceneEditor object that this item is a part of.

        Attribute: Parameter editor The SceneEditor this item is attached to 
    */
    action SetSceneEditor(SceneEditor_LIBRARY editor)
        me:editor = editor
    end

    /*
        Returns the SceneEditor object that this item is a part of.

        Attribute: Returns The SceneEditor this item is attached to 
    */
    action GetSceneEditor returns SceneEditor_LIBRARY
        return editor
    end

    /*
        Used Internally. This action returns the class that contains all the constants
        used by this object. 
    */
    action GetConstants returns SceneConstants
        return constants
    end

    /*
        Internal action so that when an object in the editor gains focus it also tells the SceneEditor
        class that this is the item that currently has the selection.
    */
    action GainedFocus(FocusEvent event)
        if editor not= undefined
            editor:SetSelectedItem(me)
        end
    end

    action GainedSelection
        // Do nothing here -- inheriting classes may override this.
    end

    action LostSelection
        // Do nothing here -- inheriting classes may override this.
    end

    /*
        This action is used to send a message down to the Accessibility system so the user can notified
        of something that has changed or something the user may need to know to understand what is happening. 
    */
    action NotifyAccessibility(text message)
        editor:NotifyAccessibility(me, message)
    end


    /*
        This action returns true if physics is currently enabled for this item. 

        Attribute: Returns True if physics is enabled, false otherwise. 
    */
    action IsEditorPhysicsEnabled returns boolean
        SceneProperties properties
        if HasProperty(properties:PHYSICS_ENABLED)
            return GetProperty(properties:PHYSICS_ENABLED):GetBoolean()
        end
        return false
    end

    action SetEditorPhysicsEnabled(boolean enable)
        SceneProperties properties
        if HasProperty(properties:PHYSICS_ENABLED)
            JavaScriptObjectNotation json = GetProperty(properties:PHYSICS_ENABLED)
            json:SetBoolean(enable)
        else
            JavaScriptObjectNotation json
            json:SetBoolean(enable)
            SetProperty(properties:PHYSICS_ENABLED, json)
        end
    end

    action GetEditorResponsiveness returns integer
        SceneProperties properties
        if HasProperty(properties:RESPONSIVENESS)
            return GetProperty(properties:RESPONSIVENESS):GetInteger()
        end

        // The default value is UNMOVABLE, or 0.
        return 0
    end

    action SetEditorResponsiveness(integer responsive)
        SceneProperties properties
        if HasProperty(properties:RESPONSIVENESS)
            JavaScriptObjectNotation json = GetProperty(properties:RESPONSIVENESS)
            json:SetInteger(responsive)
        else
            JavaScriptObjectNotation json
            json:SetInteger(responsive)
            SetProperty(properties:RESPONSIVENESS, json)
        end
    end

    action GetEditorMass returns number
        SceneProperties properties
        if HasProperty(properties:MASS)
            return GetProperty(properties:MASS):GetNumber()
        end

        return 0
    end

    action SetEditorMass(number mass)
        SceneProperties properties
        if HasProperty(properties:MASS)
            JavaScriptObjectNotation json = GetProperty(properties:MASS)
            json:SetNumber(mass)
        else
            JavaScriptObjectNotation json
            json:SetNumber(mass)
            SetProperty(properties:MASS, json)
        end
    end

    action GetEditorFriction returns number
        SceneProperties properties
        if HasProperty(properties:FRICTION)
            return GetProperty(properties:FRICTION):GetNumber()
        end

        // The default value is 0.
        return 0
    end

    action SetEditorFriction(number friction)
        SceneProperties properties
        if HasProperty(properties:FRICTION)
            JavaScriptObjectNotation json = GetProperty(properties:FRICTION)
            json:SetNumber(friction)
        else
            JavaScriptObjectNotation json
            json:SetNumber(friction)
            SetProperty(properties:FRICTION, json)
        end
    end

    action GetEditorRestitution returns number
        SceneProperties properties
        if HasProperty(properties:RESTITUTION)
            return GetProperty(properties:RESTITUTION):GetNumber()
        end

        // The default value is 0.
        return 0
    end

    action SetEditorRestitution(number restitution)
        SceneProperties properties
        if HasProperty(properties:RESTITUTION)
            JavaScriptObjectNotation json = GetProperty(properties:RESTITUTION)
            json:SetNumber(restitution)
        else
            JavaScriptObjectNotation json
            json:SetNumber(restitution)
            SetProperty(properties:RESTITUTION, json)
        end
    end

end