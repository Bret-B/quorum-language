package Libraries.Interface.Controls.Scenes.Assets

use Libraries.Containers.HashTable
use Libraries.Game.Graphics.ImageSheet
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.TextureRegion
use Libraries.Containers.Iterator
use Libraries.System.File
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.Color
use Libraries.Containers.Array
use Libraries.Game.Scenes.SceneProperties
use Libraries.Interface.Controls.Scenes.Blueprints.ItemBlueprint
use Libraries.Interface.Controls.Scenes.Blueprints.DrawableBlueprint
use Libraries.Interface.Controls.Scenes.Blueprints.ModelBlueprint


/*
    The AssetPack class defines a set of blueprints organized into categories 
    to be used by a ScenePalette. The scene palette loads asset packs to create 
    the tree with all available items the user has to add to a scene. AssetPack 
    supports both 2D and 3D items which can either be added manually using 
    blueprints or through a JSON file that describes a whole tileset. 
*/
class AssetPack

    text name = "Asset Pack"
    HashTable<text, ItemBlueprint> blueprints
    HashTable<text, Array<ItemBlueprint>> categories
    public constant text DEFAULT = "Default"
    File tileset3DFolder

    action Add(ImageSheet sheet)
        // TO-DO
    end

    /*
        This action adds a drawable to the default category. This Add does not need a
        blueprint because one will be generated for it.

        Attribute: Parameter drawable The drawable to add to the asset pack
    */
    action Add(Drawable drawable)
        blueprints:Add(drawable:GetName(), DrawableToBlueprint(drawable))
        AddToCategory(DEFAULT, DrawableToBlueprint(drawable))
    end

    /*
        This action adds a blueprint to the default category.

        Attribute: Parameter item The blueprint to add to the asset pack
    */
    action Add(ItemBlueprint item)
        blueprints:Add(item:GetName(), item)
        AddToCategory(DEFAULT, item)
    end

    /*
        LoadTileset loads a 2D tileset from a JSON file. The JSON should contain the name of the 
        item, width, height, and the file path to the texture. This action will create blueprints
        for each entry in the tileset. If the JSON has a category field the items will be added 
        to a category with the same name as the text in that field.

        Attribute: Parameter file The path to the tileset JSON file
    */
    action LoadTileset(File file)
        JavaScriptObjectNotation json
        json:Read(file)
        
        SetName(json:GetValue("Name"))
        integer width = json:GetInteger("Width")
        integer height = json:GetInteger("Height")
        text filePath = json:GetValue("File")

        Texture texture
        texture:LoadFromFile(filePath)

        Color color
        SceneProperties properties

        JavaScriptObjectNotation tiles = json:GetObject("Tiles")
        Iterator<JavaScriptObjectNotation> iterator = tiles:GetIterator()
        repeat while iterator:HasNext()
            JavaScriptObjectNotation tile = iterator:Next()
            DrawableBlueprint schematic
            TextureRegion region
            integer x = tile:GetInteger("X")
            integer y = tile:GetInteger("Y")
            integer sizeX = 1
            integer sizeY = 1
            if tile:HasValue("SizeX")
                sizeX = tile:GetInteger("SizeX")
            end

            if tile:HasValue("SizeY")
                sizeY = tile:GetInteger("SizeY")
            end
            region:LoadTextureRegion(texture, x * width, y * height, width * sizeX, height * sizeY)
            
            schematic:SetName(tile:GetValue("Name"))
            schematic:SetDescription(tile:GetValue("Description"))
            schematic:SetTexture(region)
            schematic:SetSize(width * sizeX, height * sizeY)
            schematic:SetColor(color:White())
            schematic:SetPreferredGridWidth(width)
            schematic:SetPreferredGridHeight(height)
            schematic:SetDrawableType(properties:CUSTOM)

            if tile:HasValue("Physics Enabled")
                boolean hasPhysics = tile:GetBoolean("Physics Enabled")
                if hasPhysics
                    schematic:SetPhysicsEnabled(hasPhysics)
                    if tile:HasValue("Responsiveness")
                        schematic:SetResponsiveness(tile:GetInteger("Responsiveness"))
                    end
                end
            end

            blueprints:Add(schematic:GetName(), schematic)

            text category = DEFAULT
            boolean hasCategory = tile:HasValue("Category")
            if hasCategory
                category = tile:GetValue("Category")
            end
            AddToCategory(category, schematic)
        end
    end

    /*
        LoadTileset3D loads a 3D tileset from a JSON file. The JSON should contain the name of the 
        item, and the file path to the model, and path to its icon. This action will create blueprints
        for each entry in the tileset. If the JSON has a category field the items will be added 
        to a category with the same name as the text in that field.

        Attribute: Parameter file The path to the 3D tileset JSON file
    */
    action LoadTileset3D(File file)
        JavaScriptObjectNotation json
        json:Read(file)
        
        SetName(json:GetValue("Name"))

        Color color
        SceneProperties properties
    
        text path = GetTileset3DFolder():GetPath()
        JavaScriptObjectNotation tiles = json:GetObject("Tiles")
        Iterator<JavaScriptObjectNotation> iterator = tiles:GetIterator()
        repeat while iterator:HasNext()
            JavaScriptObjectNotation tile = iterator:Next()
            ModelBlueprint model

            model:SetName(tile:GetValue("Name"))
            model:SetDescription(tile:GetValue("Description"))
            model:SetDimensions(1, 1, 1)
            model:SetScale(1, 1, 1)
            model:SetRotation(0, 0, 0)
            
            File modelFile
            modelFile:SetPath(path + "/" + tile:GetValue("Model"))
            model:SetModelFile(modelFile)
            Drawable icon
            text res = tile:GetValue("Image")
            
            File iconPath
            iconPath:SetWorkingDirectory(path)
            iconPath:SetPath(res)
            icon:Load(iconPath)

            number width = icon:GetWidth()
            number iconScale = 128 / width

            model:SetPaletteCrop(0.15)
            model:SetPaletteScale(iconScale)
            model:SetPaletteIcon(icon)

            if tile:HasValue("Physics Enabled")
                boolean hasPhysics = tile:GetBoolean("Physics Enabled")
                if hasPhysics
                    model:SetPhysicsEnabled(hasPhysics)
                    if tile:HasValue("Responsiveness")
                        model:SetResponsiveness(tile:GetInteger("Responsiveness"))
                    end
                end
            end

            blueprints:Add(model:GetName(), model)

            text category = DEFAULT
            boolean hasCategory = tile:HasValue("Category")
            if hasCategory
                category = tile:GetValue("Category")
            end
            AddToCategory(category, model)
        end
    end

    /*
        AddToCategory adds a blueprint to a named category. This allows blueprints
        to be grouped together for organization in a ScenePalette. If the category
        does not already exist then the category will be created

        Attribute: Parameter category The name of the grouping the blueprint belongs to
        Attribute: Parameter schematic The blueprint to be added to the category
    */
    private action AddToCategory(text category, ItemBlueprint schematic)
        //add to the category keys
        boolean hasCatInHash = categories:HasKey(category)
        if hasCatInHash //get the array and add to it
            Array<ItemBlueprint> array = categories:GetValue(category)
            array:Add(schematic)
        else
            Array<ItemBlueprint> array
            array:Add(schematic)

            categories:Add(category, array)
        end
    end

    /*
        Internal action that makes a blueprint for a given drawable
    */
    private action DrawableToBlueprint(Drawable drawable) returns ItemBlueprint
        DrawableBlueprint result

        result:SetName(drawable:GetName())
        result:SetDescription(drawable:GetDescription())
        result:SetSize(drawable:GetWidth(), drawable:GetHeight())
        result:SetScale(drawable:GetScaleX(), drawable:GetScaleY())
        result:SetColor(drawable:GetColorGroup())

        TextureRegion region
        region:CopyTextureRegion(drawable)
        result:SetTexture(region)

        result:SetDrawableType(drawable:GetDrawableType())

        return result
    end

    /*
        GetBlueprint returns the ItemBlueprint associated with a particular name.

        Attribute: Parameter name The name of the blueprint to look for
        Attribute: Returns The blueprint associated with that name
    */
    action GetBlueprint(text name) returns ItemBlueprint
        return blueprints:GetValue(name)
    end

    /*
        GetCategoryKey returns an Iterator for all categories in this asset pack.
    */
    action GetCategoryKeyIterator returns Iterator<text>
        return categories:GetKeyIterator()
    end

    /*
        GetDefaultCategory returns an Iterator for all the ItemBlueprints grouped in
        the Default category. If a blueprint is added with specifying a category they
        will be added to the default category.
    */
    action GetDefaultCategory returns Iterator<ItemBlueprint>
        Array<ItemBlueprint> array = categories:GetValue(DEFAULT)
        if array not= undefined
            return array:GetIterator()
        end
        return undefined
    end

    /*
        GetCategory returns an Array for all the ItemBlueprints grouped in a specified category.

        Attribute: Parameter category The name of the category whose blueprints should be returned
    */
    action GetCategory(text category) returns Array<ItemBlueprint>
        Array<ItemBlueprint> array = categories:GetValue(category)
        if array not= undefined
            return array
        end
        return undefined
    end

    /*
        GetKeyIterator returns an Iterator for all the names of blueprints that have been added to the
        asset pack.
    */
    action GetKeyIterator returns Iterator<text>
        return blueprints:GetKeyIterator()
    end

    /*
        GetBlueprintIterator returns an Iterator for all blueprints objects that have been added to this
        asset pack.
    */
    action GetBlueprintIterator returns Iterator<ItemBlueprint>
        return blueprints:GetValueIterator()
    end

    /*
        Returns the name of the asset pack. The name affects the name that will appear on a ScenePalette.
    */
    action GetName returns text
        return name
    end

    /*
        Sets the name of the asset pack. The name affects the name that will appear on a ScenePalette.
    */
    action SetName(text name)
        me:name = name
    end

    /*
        Returns the path to the folder containing all the models and icons for a 3D tileset.
    */
    action GetTileset3DFolder returns File
        return tileset3DFolder
    end

    /*
        Sets the path for the folder that contains all the models and icons for the 3D tileset.
        Calling LoadTileset3D only expects the path to the JSON with all the information for each
        model but paths for models and icons will be relative to this folder.
    */
    action SetTileset3DFolder(File tileset3DFolder)
        me:tileset3DFolder = tileset3DFolder
    end

end
