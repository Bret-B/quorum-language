package Libraries.Interface.Controls.Scenes.Layers

use Libraries.Interface.Controls.Scenes.SceneEditor_LIBRARY
use Libraries.Interface.Controls.Scenes.Items.EditorCursor
use Libraries.Game.Layer
use Libraries.Compute.Vector3


/*
The EditorLayer class is used to manage the editor’s objects. This is the 
base class that the 2D and 3D EditorLayer versions will inherit from. The 
EditorLayer is the space where the objects being added to scene are drawn 
to and managed so the user can interact with them. This class handles showing 
grids, cursors, previews, and objects in the scene. 
*/
class EditorLayer is Layer

    Vector3 cameraEulerAngles
    SceneEditor_LIBRARY editor = undefined

    on create
        cameraEulerAngles:Set(0, 0, 0)
    end

    /*
        This action changes whether the EditorLayer should try to snap newly added 
        objects along the editor’s grid. If true grid snapping will be turned on, 
        false will turn off grid snapping. Snapping to a grid means an object's 
        position will line up exactly with points that are on the grid. 

        Attribute: Parameter enabled If true grid snapping will be turned on, if false it will be turned off
    */
    blueprint action SetGridSnapping(boolean enabled)

    /*
        This action takes a number and sets the size of a single unit 
        of the grid. For example, passing 40.0 to this action on a 2D grid 
        will make the grid consist of 40 by 40-pixel squares. 

        Attribute: Parameter units A length that will be used for the new grid size. 
    */
    blueprint action SetGridUnitSize(number units)

    /*
        Returns the current unit size of the grid. 

        Attribute: Returns Returns the unit size of the grid as a number.
    */
    blueprint action GetGridUnitSize returns number

    /*
        Returns true if this layer snaps items to a grid while editing, false otherwise. 

        Attribute: Returns True if snapping, false otherwise.
    */
    blueprint action IsGridSnapping returns boolean

    /*
        Returns true if the number passed would lie on the grid of this layer, false otherwise.

        Attribute: Returns True if the number is on the grid, false otherwise.
    */
    blueprint action IsGridCoordinate(number value) returns boolean

    /*
        If true is passed to this action than the components of the editor such as the grid
        and cursor are shown. They are hidden if false is passed. 

        Attribute: Parameter shouldShow Boolean dictating whether the components should be shown.
    */
    blueprint action ShowEditorComponents(boolean shouldShow)

    /*
        Given a number this action returns the nearest coordinate that lies on the grid of this layer.

        Attribute: Parameter coordinate The number used to calculate the grid coordinate
        Attribute: Returns The nearest coordinate on the grid
    */
    blueprint action GetNearestGridCoordinate(number coordinate) returns number

    /*
        Given a number this action returns the nearest coordinate on the grid of this layer that is
        greater than the number passed.

        Attribute: Parameter coordinate The number used to calculate the grid coordinate
        Attribute: Returns The next coordinate on the grid
    */
    blueprint action GetNextGridCoordinate(number coordinate) returns number

    /*
        Given a number this action returns the nearest coordinate on the grid of this layer that is
        less than the number passed.

        Attribute: Parameter coordinate The number used to calculate the grid coordinate
        Attribute: Returns The previous coordinate on the grid
    */
    blueprint action GetPreviousGridCoordinate(number coordinate) returns number

    /*
        Internal action the returns the EditorCursor object associated with this layer.

        Attribute: Returns The cursor associated with this layer
    */
    blueprint action GetCursor returns EditorCursor

    /*
        Sets the SceneEditor object that this layer is a part of.

        Attribute: Parameter editor The SceneEditor this layer is attached to 
    */
    action SetSceneEditor(SceneEditor_LIBRARY editor)
        me:editor = editor
    end

    /*
        Returns the SceneEditor object that this layer is a part of.

        Attribute: Returns The SceneEditor this layer is attached to 
    */
    action GetSceneEditor returns SceneEditor_LIBRARY
        return me:editor
    end


    /*
        Internal action that shows the components of the editor when this layer
        is selected.
    */
    action GainedSelection
        ShowEditorComponents(true)
    end

    /*
        Internal action that hides the components of the editor when this layer
        is deselected.
    */
    action LostSelection
        ShowEditorComponents(false)
    end

    /*
        Shows or hides the cursor based on the passed parameter.

        Attribute: Parameter visible If true the cursor will be shown, hidden otherwise.
    */
    action ShowCursor(boolean visible)
        EditorCursor cursor = GetCursor()
        if visible
            cursor:Show()
        else
            cursor:Hide()
        end
    end

    /*
        The SetCameraYawPitchRoll action sets the direction and orientation of the
        Camera using yaw angles. All angles are in degrees.
    
        The yaw describes how far the camera is rotated along the X/Z axis. It
        effectively controls how the camera turns left and right. A positive value
        will rotate the camera clockwise (typically to the right).

        Attribute: Parameter yaw The yaw angle, measured in degrees.
    */
    action SetCameraYaw(number yaw)
        cameraEulerAngles:SetX(yaw)
        GetCamera():SetYawPitchRoll(yaw, GetCameraPitch(), GetCameraRoll())
    end

    /*
        This action returns the yaw of the camera in degrees.
        
        Attribute: Returns The yaw angle, measured in degrees.
    */
    action GetCameraYaw returns number
        return cameraEulerAngles:GetX()
    end

    /*
        The SetCameraYawPitchRoll action sets the direction and orientation of the
        Camera using pitch angles. All angles are in degrees.

        The pitch describes how far the camera is angled up or down. The pitch value
        should typically be between -90 and 90 degrees. Larger values will cause the
        camera to look in the opposite direction specified by the yaw value. For
        pitch values between -90 and 90, positive values angle the camera upwards,
        and negative values angle it downwards.
    
        Attribute: Parameter pitch The pitch angle, measured in degrees.
    */
    action SetCameraPitch(number pitch)
        cameraEulerAngles:SetY(pitch)
        GetCamera():SetYawPitchRoll(GetCameraYaw(), pitch, GetCameraRoll())
    end

    /*
        This action returns the pitch of the camera in degrees.
        
        Attribute: Returns The pitch angle, measured in degrees.
    */
    action GetCameraPitch returns number
        return cameraEulerAngles:GetY()
    end

    /*
        The SetCameraYawPitchRoll action sets the direction and orientation of the
        Camera using roll angles. All angles are in degrees.
    
        The roll describes how the top of the camera is oriented. A roll value of 0
        will angle the camera so the top of the camera points upward, towards the
        positive Y axis. A positive roll value "twists" the camera clockwise, and a
        negative value will twist it counter-clockwise.

        Attribute: Parameter roll The roll angle, measured in degrees.
    */
    action SetCameraRoll(number roll)
        cameraEulerAngles:SetZ(roll)
        GetCamera():SetYawPitchRoll(GetCameraYaw(), GetCameraPitch(), roll)
    end

    /*
        This action returns the roll of the camera in degrees.
        
        Attribute: Returns The roll angle, measured in degrees.
    */
    action GetCameraRoll returns number
        return cameraEulerAngles:GetZ()
    end

    /*
        The SetCameraYawPitchRoll action sets the direction and orientation of the
        Camera using yaw, pitch, and roll angles. All angles are in degrees.
    
        The yaw describes how far the camera is rotated along the X/Z axis. It
        effectively controls how the camera turns left and right. A positive value
        will rotate the camera clockwise (typically to the right).
    
        The pitch describes how far the camera is angled up or down. The pitch value
        should typically be between -90 and 90 degrees. Larger values will cause the
        camera to look in the opposite direction specified by the yaw value. For
        pitch values between -90 and 90, positive values angle the camera upwards,
        and negative values angle it downwards.
    
        The roll describes how the top of the camera is oriented. A roll value of 0
        will angle the camera so the top of the camera points upward, towards the
        positive Y axis. A positive roll value "twists" the camera clockwise, and a
        negative value will twist it counter-clockwise.
    
        Attribute: Parameter yaw The yaw angle, measured in degrees.
        Attribute: Parameter pitch The pitch angle, measured in degrees.
        Attribute: Parameter roll The roll angle, measured in degrees.
    */
    action SetCameraYawPitchRoll(number yaw, number pitch, number roll)
        cameraEulerAngles:Set(yaw, pitch, roll)
        GetCamera():SetYawPitchRoll(yaw, pitch, roll)
    end

    /* 
        This action returns the yaw, pitch, and roll of the camera as a Vector3. Each value
        in the Vector represents the yaw, pitch, and roll in degrees.

        Attribute: Returns Vector3 containing the value of the yaw, pitch, and roll in degrees
    */
    action GetCameraYawPitchRoll returns Vector3
        return cameraEulerAngles
    end

end