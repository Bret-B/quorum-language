package Libraries.Interface.Controls.Scenes.Layers

use Libraries.Game.Layer3D
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Item
use Libraries.Interface.Controls.Scenes.Layers.EditorLayer
use Libraries.Interface.Controls.Scenes.Items.EditorCursor
use Libraries.Interface.Controls.Scenes.Items.Grid3D
use Libraries.Interface.Controls.Scenes.Items.EditorCursor3D
use Libraries.Interface.Controls.Scenes.Items.EditorCamera3D
use Libraries.Interface.Controls.Scenes.SceneEditor

/*
    The EditorLayer3D class is used to show and manage objects in a 3D scene. EditorLayer3D 
    provides a 3D grid, a cursor, and a camera preview for a 3D scene. The cursor goes along
    the grid and allows the user to select objects and edit them in the scene. For a 3D scene
    moving the editor camera affects where the camera starts when running a 3D scene.
*/
class EditorLayer3D is Layer3D, EditorLayer

    Grid3D grid
    boolean gridSnapEnabled = true

    EditorCursor3D cursor

    on create
        Add(grid)

        cursor:Load(me)
        Add(cursor)

        ShowEditorComponents(false)

        EditorCamera3D camera
        SetCamera(camera)
    end

    /*
    This action will notify mouse listeners that are a part of this layer of the
    given mouse event. This is called automatically by the Game engine as 
    needed. Most users will never need to use this action directly. This action is
    overridden here so that the input gets directed to the Layer2D.

    Attribute: Parameter event The MouseEvent to send to the MouseListeners.
    Attribute: Returns The Item which intercepted the event, or undefined if no Item received the event.
    */
    action ProcessMouseEvent(MouseEvent event) returns Item
        SceneEditor editor = GetSceneEditor()
        if editor = undefined or (not editor:GetSelectedLayer():Equals(me))
            return undefined
        end

        Item item = parent:Layer3D:ProcessMouseEvent(event)
        return item
    end

    /*
        Update is called by the Game loop every frame. This action resizes the viewport
        to fit the Layer so resizing the Game doesn't leave unused space in the EditorLayer.
    */
    action Update(number seconds)
        SceneEditor editor = GetSceneEditor()
        integer x = cast(integer, editor:GetGlobalX())
        integer y = cast(integer, editor:GetGlobalY())
        integer width = cast(integer, editor:GetWidth())
        integer height = cast(integer, editor:GetHeight())
        if GetViewportX() not= x or GetViewportY() not= y or GetViewportWidth() not= width or GetViewportHeight() not= height
            SetViewport(x, y, width, height)
        end

        parent:Layer3D:Update(seconds)
    end

    /*
        This action returns the Grid3D object the layer is using

        Attribute: Returns the grid object
    */
    action GetGrid returns Grid3D
        return grid
    end

    /*
        SetGridSnapping turns the grid on or off

        Attribute: Parameter enabled If true the grid will be enabled, the grid will be hidden if false
    */
    action SetGridSnapping(boolean enabled)
        if enabled
            grid:Show()
        else
            grid:Hide()
        end

        gridSnapEnabled = enabled
    end

    /*
        SetGridUnitSize sets the size of a single grid unit which affects the size
        of the grid and the size of the cursor.

        Attribute: Parameter units the size of a single grid unit
    */
    action SetGridUnitSize(number units)
        grid:SetGridUnitSize(units)

        grid:SetPosition(grid:GetNearestGridCoordinate(grid:GetGlobalX()),
            grid:GetNearestGridCoordinate(grid:GetGlobalY()),
            grid:GetNearestGridCoordinate(grid:GetGlobalZ()))
    end

    /*
        GetGridUnitSize returns the size of a single grid unit

        Attribute: Returns The size of a single grid unit
    */
    action GetGridUnitSize returns number
        return grid:GetGridUnitSize()
    end

    /*
        IsGridSnapping returns if the grid snapping is enabled which for editing 2D scene
        correlates with whether or not the grid is visible.

        Attribute: Returns True if grid snapping is enabled, false otherwise
    */
    action IsGridSnapping returns boolean
        return gridSnapEnabled
    end

    /*
        Given a number this action returns the nearest coordinate that lies on the grid of this layer.

        Attribute: Parameter coordinate The number used to calculate the grid coordinate
        Attribute: Returns The nearest coordinate on the grid
    */
    action GetNearestGridCoordinate(number coordinate) returns number
        return grid:GetNearestGridCoordinate(coordinate)
    end

    /*
        Given a number this action returns the nearest coordinate on the grid of this layer that is
        greater than the number passed.

        Attribute: Parameter coordinate The number used to calculate the grid coordinate
        Attribute: Returns The next coordinate on the grid
    */
    action GetNextGridCoordinate(number coordinate) returns number
        return grid:GetNextGridCoordinate(coordinate)
    end

    /*
        Given a number this action returns the nearest coordinate on the grid of this layer that is
        less than the number passed.

        Attribute: Parameter coordinate The number used to calculate the grid coordinate
        Attribute: Returns The previous coordinate on the grid
    */
    action GetPreviousGridCoordinate(number coordinate) returns number
        return grid:GetPreviousGridCoordinate(coordinate)
    end

    /*
        Returns true if the number passed would lie on the grid of this layer, false otherwise.

        Attribute: Returns True if the number is on the grid, false otherwise.
    */
    action IsGridCoordinate(number coordinate) returns boolean
        return grid:IsGridCoordinate(coordinate)
    end

    /*
        GetCursor returns the EditorCursor this layer is using.

        Attribute: Returns The EditorCursor this layer has
    */
    action GetCursor returns EditorCursor
        return cursor
    end

    /*
        ShowEditorComponents toggles the editor components which consists
        of the grid, and the cursor. When toggled off
        they will be hidden. When toggled on the grid will
        be visible in the editor.
    */
    action ShowEditorComponents(boolean shouldShow)
        if shouldShow
            if gridSnapEnabled
                grid:Show()
            end
        else
            cursor:Hide()
            grid:Hide()
        end
    end

    /*
        This action returns the Camera of this layer. Unlike the EditorLayer2D the 
        EditorCamera is the camera used to view the layer and not a preview visible
        in the layer. 

        Attribute: Returns The Camera this layer is using.
    */
    action GetEditorCamera returns EditorCamera3D
        return cast(EditorCamera3D, GetCamera())
    end
end