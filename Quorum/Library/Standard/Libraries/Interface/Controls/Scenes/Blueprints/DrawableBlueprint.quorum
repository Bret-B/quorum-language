package Libraries.Interface.Controls.Scenes.Blueprints

use Libraries.Game.Graphics.TextureRegion
use Libraries.Game.Graphics.ColorGroup
use Libraries.Interface.Controls.Scenes.Blueprints.ItemBlueprint


/*
    The DrawableBlueprint class is used in the 2D scene editor to add 
    Drawable type items to scenes such as squares, circles, and other 
    simple 2D shapes. This class builds on top of the ItemBlueprint class 
    and adds fields relating to the Texture of the Drawable and the drawable 
    is used as icon for use in palettes. There are also fields for the 
    preferred Grid dimensions to make it easier for use in the editor 
    with grid snapping enabled. 
*/
class DrawableBlueprint is ItemBlueprint

    TextureRegion texture = undefined
    ColorGroup color = undefined
    number width = 0
    number height = 0
    number scaleX = 1
    number scaleY = 1
    number rotation = 0

    integer preferredGridWidth = 0
    integer preferredGridHeight = 0

    integer drawableType = -1

    /*
        This action sets the texture the blueprint will be using.

        Attribute: Parameter texture The texture the blueprint will load
    */
    action SetTexture(TextureRegion texture)
        me:texture = texture
    end

    /*
        This action returns the texture the blueprint is using.

        Attribute: Returns The texture the blueprint is using
    */
    action GetTexture returns TextureRegion
        return texture
    end

    /*
        This action returns the texture to use for an icon in a palette.

        Attribute: Returns The palette icon texture
    */
    action GetPaletteIcon returns TextureRegion
        return GetTexture()
    end

    /*
        Color is a modifiable option in the editor so the color for the drawable
        can be set here.

        Attribute: Parameter color The color to use for this texture
    */
    action SetColor(ColorGroup color)
        me:color = color
    end

    /*
        This action returns the color of the drawable. This isn't what the color of the loaded
        texture is but what color is used to modify the texture.

        Attribute: Returns color The color to use for this texture.
    */
    action GetColor returns ColorGroup
        return color
    end

    /*
        Sets the width of the texture

        Attribute: Parameter width The width of the texture
    */
    action SetWidth(number width)
        me:width = width
    end

    /*
        Returns the width of the texture

        Attribute: Returns The width of the texture
    */
    action GetWidth returns number
        return width
    end

    /*
        Sets the height of the texture

        Attribute: Parameter height The height of the texture
    */
    action SetHeight(number height)
        me:height = height
    end

    /*
        Returns the height of the texture

        Attribute: Returns The height of the texture
    */
    action GetHeight returns number
        return height
    end

    /*
        Sets the width and height of the texture

        Attribute: Parameter width The width of the texture
        Attribute: Parameter height The height of the texture
    */
    action SetSize(number width, number height)
        SetWidth(width)
        SetHeight(height)
    end

    /*
        Sets the scale of the texture on the x-axis

        Attribute: Parameter scaleX How much to scale the texture on the x-axis
    */
    action SetScaleX(number scaleX)
        me:scaleX = scaleX
    end

    /*
        Returns the scale of the texture on the x-axis

        Attribute: Returns The amount of scaling on the x-axis
    */
    action GetScaleX returns number
        return scaleX
    end

    /*
        Sets the scale of the texture on the y-axis

        Attribute: Parameter scaleY How much to scale the texture on the y-axis
    */
    action SetScaleY(number scaleY)
        me:scaleY = scaleY
    end

    /*
        Returns the scale of the texture on the x-axis

        Attribute: Returns The amount of scaling on the x-axis
    */
    action GetScaleY returns number
        return scaleY
    end

    /*
        Sets the scale of the texture on both axes

        Attribute: Parameter scaleX The amount of scaling on the x-axis
        Attribute: Parameter scaleY The amount of scaling on the y-axis
    */
    action SetScale(number scaleX, number scaleY)
        SetScaleX(scaleX)
        SetScaleY(scaleY)
    end

    /*
        This action returns how much the texture is being rotated in degrees

        Attribute: Returns The current rotation of the texture in degrees
    */
    action GetRotation returns number
        return rotation
    end

    /*
        This action sets how much to rotate the texture by in degrees

        Attribute: Parameter rotation amount to rotate the texture by in degrees
    */
    action SetRotation(number rotation)
        me:rotation = rotation
    end

    /*
        This action returns a grid width that will nicely fit the texture

        Attribute: Returns a width that a grid can be that will nicely fit the texture
    */
    action GetPreferredGridWidth returns integer
        return preferredGridWidth
    end

    /*
        This action sets a value for a grid width that is preferable for the texture. What preferable
        means for the texture will vary but for example, the preferred width for a square shaped drawable
        might be the width of the square texture.

        Attribute: Parameter preferredGridWidth The width that a grid can be that will nicely fit the texture
    */
    action SetPreferredGridWidth(integer preferredGridWidth)
        me:preferredGridWidth = preferredGridWidth
    end

    /*
        This action returns a grid height that will nicely fit the texture

        Attribute: Returns A height that a grid can be that will nicely fit the texture
    */
    action GetPreferredGridHeight returns integer
        return preferredGridHeight
    end

    /*
        This action sets a value for a grid height that is preferable for the texture. What preferable
        means for the texture will vary but for example, the preferred height for a square shaped drawable
        might be the height of the square texture.

        Attribute: Parameter preferredGridHeight The height that a grid can be that will nicely fit the texture
    */
    action SetPreferredGridHeight(integer preferredGridHeight)
        me:preferredGridHeight = preferredGridHeight
    end

    /*
        Drawable type refers to the type of shape the drawable is. The editor will mainly check that this value
        is not negative because negative values are invalid. 0 is an accepted value which means custom. Here are
        other accepted values for drawables taken from the SceneProperties class:
            RECTANGLE = 1, 
            FILLED_RECTANGLE = 2, 
            CIRCLE = 3, 
            FILLED_CIRCLE = 4, 
            FILLED_TRIANGLE = 5, 
            CUSTOM_SHAPE = 6


        Attribute: Parameter type The type of drawable
    */
    action SetDrawableType(integer type)
        drawableType = type
    end

    /*
        Drawable type refers to the type of shape the drawable is. This action returns the type set for this blueprint
        A value of 0 means it is a custom type and negative values usually mean invalid or not loaded.
        Here are other accepted values for drawables taken from the SceneProperties class:
            RECTANGLE = 1, 
            FILLED_RECTANGLE = 2, 
            CIRCLE = 3, 
            FILLED_CIRCLE = 4, 
            FILLED_TRIANGLE = 5, 
            CUSTOM_SHAPE = 6

        Attribute: Returns The type of drawable
    */
    action GetDrawableType returns integer
        return drawableType
    end

end