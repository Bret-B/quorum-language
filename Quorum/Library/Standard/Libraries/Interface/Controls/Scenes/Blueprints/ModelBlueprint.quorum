package Libraries.Interface.Controls.Scenes.Blueprints

use Libraries.System.File
use Libraries.Game.Scenes.SceneProperties
use Libraries.Compute.Vector3
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.TextureRegion
use Libraries.Interface.Controls.Scenes.Blueprints.ItemBlueprint

/*
    The DrawableBlueprint class is used for the 3D scene editor to add 
    models to scenes such as cubes, spheres, cylinders and other 3D objects.
    This class builds on top of the ItemBlueprint class and adds fields that affect
    the scale, size, and rotation of the model.
*/
class ModelBlueprint is ItemBlueprint

    number width = 0
    number height = 0
    number depth = 0

    number scaleX = 1
    number scaleY = 1
    number scaleZ = 1

    number yaw = 0
    number pitch = 0
    number roll = 0

    Color color

    integer modelType = -1
    File modelFile = undefined

    TextureRegion paletteIcon = undefined

    on create
        color:SetColor(1, 1, 1, 1)
    end

    /*
        Model type refers to the type of shape the model is. The editor will mainly check that this value
        is not negative because negative values are invalid. 0 is an accepted value which means custom. Here are
        other accepted values for models taken from the SceneProperties class:
            BOX = 1, 
            CYLINDER = 2, 
            SPHERE = 3, 
            PLANE = 4

        Attribute: Returns The type of model
    */
    action GetModelType returns integer
        return modelType
    end

    /*
        This action sets the Model type which refers to the type of shape the model is. 
        0 is an accepted value which means custom. Here are other accepted values for 
        models taken from the SceneProperties class:
            BOX = 1, 
            CYLINDER = 2, 
            SPHERE = 3, 
            PLANE = 4

        Attribute: Parameter type The type of model
    */
    action SetModelType(integer modelType)
        me:modelType = modelType
    end

    /*
        This action returns the file object pointing to the model.

        Attribute: Returns The file for the model
    */
    action GetModelFile returns File
        return modelFile
    end

    /*
        This action sets the file object pointing to the custom asset and sets the 
        model type to CUSTOM.

        Attribute: Parameter modelFile The file for model
    */
    action SetModelFile(File modelFile)
        me:modelFile = modelFile
        
        if modelFile not= undefined
            SceneProperties properties
            SetModelType(properties:CUSTOM)
        end
    end

    /*
        This action sets the color of the model from a Color object.

        Attribute: Parameter color The color object used to set the color of the model
    */
    action SetColor(Color color)
        me:color:SetColor(color:GetRed(), color:GetGreen(), color:GetBlue(), color:GetAlpha())
    end

    /*
        This action sets the color of the model from 4 values.

        Attribute: Parameter red The red value of the color of this model
        Attribute: Parameter green The green value of the color of this model
        Attribute: Parameter blue The blue value of the color of this model
        Attribute: Parameter alpha The alpha value of the color of this model
    */
    action SetColor(number red, number green, number blue, number alpha)
        color:SetColor(red, green, blue, alpha)
    end

    /*
        This action sets the dimensions of the model. This is like the SetSize
        action of 2D objects but models being 3D means that 3 values are needed
        to set a size.

        Attribute: Parameter width The width of the model
        Attribute: Parameter height The height of the model
        Attribute: Parameter depth The depth of the model
    */
    action SetDimensions(number width, number height, number depth)
        me:width = width
        me:height = height
        me:depth = depth
    end

    /*
        This action sets the scale of the model on all 3 axes.

        Attribute: Parameter x The scale of the model on the x-axis
        Attribute: Parameter y The scale of the model on the y-axis
        Attribute: Parameter z The scale of the model on the z-axis
    */
    action SetScale(number x, number y, number z)
        scaleX = x
        scaleY = y
        scaleZ = z
    end

    /*
        This action sets the rotation of the model using three values

        Attribute: Parameter yaw The yaw of the model
        Attribute: Parameter pitch The pitch of the model
        Attribute: Parameter roll The roll of the model
    */
    action SetRotation(number yaw, number pitch, number roll)
        me:yaw = yaw
        me:pitch = pitch
        me:roll = roll
    end

    /*
        This action returns the width of the model.

        Attribute: Returns The width of the model
    */
    action GetWidth returns number
        return width
    end

    /*
        This action sets the width of the model.

        Attribute: Parameter width The width of the model
    */
    action SetWidth(number width)
        me:width = width
    end

    /*
        This action returns the height of the model.

        Attribute: Returns The height of the model
    */
    action GetHeight returns number
        return height
    end

    /*
        This action sets the height of the model.

        Attribute: Parameter height The height of the model
    */
    action SetHeight(number height)
        me:height = height
    end

    /*
        This action returns the depth of the model.

        Attribute: Returns The depth of the model
    */
    action GetDepth returns number
        return depth
    end

    /*
        This action sets the depth of the model.

        Attribute: Parameter depth The depth of the model
    */
    action SetDepth(number depth)
        me:depth = depth
    end

    /*
        This action returns the scale of the model on the x-axis.

        Attribute: Returns The scale of the model on the x-axis
    */
    action GetScaleX returns number
        return scaleX
    end

    /*
        This action sets the scale of the model on the x-axis.

        Attribute: Parameter scaleX The scale of the model on the x-axis
    */
    action SetScaleX(number scaleX)
        me:scaleX = scaleX
    end

    /*
        This action returns the scale of the model on the y-axis.

        Attribute: Returns The scale of the model on the y-axis
    */
    action GetScaleY returns number
        return scaleY
    end

    /*
        This action sets the scale of the model on the y-axis.

        Attribute: Parameter scaleY The scale of the model on the y-axis
    */
    action SetScaleY(number scaleY)
        me:scaleY = scaleY
    end

    /*
        This action returns the scale of the model on the z-axis.

        Attribute: Returns The scale of the model on the z-axis
    */
    action GetScaleZ returns number
        return scaleZ
    end

    /*
        This action sets the scale of the model on the z-axis.

        Attribute: Parameter scaleZ The scale of the model on the z-axis
    */
    action SetScaleZ(number scaleZ)
        me:scaleZ = scaleZ
    end

    /*
        This action returns the yaw of the model in degrees.

        Attribute: Returns The yaw of the model in degrees
    */
    action GetYaw returns number
        return yaw
    end

    /*
        This action sets the yaw of the model which affects rotation.

        Attribute: Parameter yaw The yaw of the model in degrees
    */
    action SetYaw(number yaw)
        me:yaw = yaw
    end

    /*
        This action returns the pitch of the model in degrees.

        Attribute: Returns The pitch of the model in degrees
    */
    action GetPitch returns number
        return pitch
    end

    /*
        This action sets the pitch of the model which affects rotation.

        Attribute: Parameter pitch The pitch of the model in degrees
    */
    action SetPitch(number pitch)
        me:pitch = pitch
    end

    /*
        This action returns the roll of the model in degrees.

        Attribute: Returns The roll of the model in degrees
    */
    action GetRoll returns number
        return roll
    end

    /*
        This action sets the roll of the model which affects rotation.

        Attribute: Parameter roll The roll of the model in degrees
    */
    action SetRoll(number roll)
        me:roll = roll
    end

    /*
        This action returns the texture to be used as an icon in a palette

        Attribute: Returns A texture for an icon for this model
    */
    action GetPaletteIcon returns TextureRegion
        return paletteIcon
    end

    /*
        This action sets the texture to be used as an icon in a palette

        Attribute: Parameter paletteIcon An icon texture for this model
    */
    action SetPaletteIcon(TextureRegion paletteIcon)
        me:paletteIcon = paletteIcon
    end

    /*
        This action returns the color of this model.

        Attribute: Returns The color set for the editor of this model
    */
    action GetColor returns Color
        return color
    end

end