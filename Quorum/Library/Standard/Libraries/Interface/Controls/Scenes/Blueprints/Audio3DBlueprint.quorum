package Libraries.Interface.Controls.Scenes.Blueprints

use Libraries.Game.Graphics.TextureRegion
use Libraries.Game.Graphics.Texture
use Libraries.Interface.Controls.Scenes.Blueprints.ItemBlueprint

/*
    The Audio3DBlueprint is a blueprint for an object in a 3D space that emits a sound. This
    class has fields for the audio component and for a texture visible only in the editor. 
    Audio3D objects aren't visible on their own when running a game but the blueprint holds
    a texture so that while editing a scene an object is visible where the sound would come from.
*/
class Audio3DBlueprint is ItemBlueprint

    TextureRegion paletteIcon = undefined
    
    // This texture is placed on a cube that acts as a placeholder inside the scene editor.
    Texture modelTexture = undefined
    
    text source = ""

    number maxVolumeDistance = 1
    number rolloffRate = 1
    
    number volume = 1
    number pitch = 1
    
    boolean playOnLoad = false
    boolean looping = false
    boolean doppler = true

    /*
        This action returns the texture to be used as an icon in a palette

        Attribute: Returns A texture for an icon for this model
    */
    action GetPaletteIcon returns TextureRegion
        return paletteIcon
    end

    /*
        This action sets the texture to be used as an icon in a palette

        Attribute: Parameter paletteIcon An icon texture for this model
    */
    action SetPaletteIcon(TextureRegion paletteIcon)
        me:paletteIcon = paletteIcon
    end

    /*
        This action returns the texture to be used as on the model visible only in the editor

        Attribute: Returns A texture for the model in the editor
    */
    action GetModelTexture returns Texture
        return modelTexture
    end

    /*
        This action sets the texture to be used as on the model visible only in the editor

        Attribute: Parameter modelTexture A texture for the editor model
    */
    action SetModelTexture(Texture modelTexture)
        me:modelTexture = modelTexture
    end

    /*
        This action returns the path to the source file of the audio the Audio3D object will use.

        Attribute: Returns Path to the audio file
    */
    action GetSource returns text
        return source
    end

    /*
        This action set the path to the source file of the audio the Audio3D object will use.

        Attribute: Parameter source Path to the audio file
    */
    action SetSource(text source)
        me:source = source
    end

    /*
    The GetMaximumVolumeDistance action returns how far away the listener may be
    from the Audio and still hear the Audio at full volume. When a new Audio
    object is created, its maximum volume distance is equal to the current 
    default distance, which begins as 1.0 and can be set by calling 
    SetDefaultMaximumVolumeDistance().
    
    Attribute: Returns The distance from this Audio where it may be heard at full volume.
    */
    action GetMaxVolumeDistance returns number
        return maxVolumeDistance
    end

    /*
    The SetMaximumVolumeDistance action will determine how far the sound can be
    from the listener before the volume is adjusted due to distance attenuation.
    If the audio listener is within the maximum volume distance of the audio,
    the audio will play at full volume. If the listener is farther away than
    this distance, then distance attenuation is applied relative to how much
    farther the listener is than this distance.

    When a new Audio object is created, its maximum volume distance is equal to 
    the current default distance, which begins as 1.0 and can be set by calling 
    SetDefaultMaximumVolumeDistance().

    Attribute: maxVolumeDistance How many units away from the Audio's position that the Audio may be heard at full volume.
    */
    action SetMaxVolumeDistance(number maxVolumeDistance)
        me:maxVolumeDistance = maxVolumeDistance
    end

    /*
    The GetRolloffRate action returns the rate at which 3D positional audio becomes
    quieter when positioned far away from the listener. When an Audio object is
    created, its rolloff rate is equal to the default value provided by
    GetDefaultRolloffRate, which begins at 1.0 (but may be changed by the user).
    Lower rolloff rates cause the sound to fade more slowly over long distances,
    and higher rolloff rates cause sound to fade more quickly. The rolloff value
    is always positive.

    Attribute: Returns The current rolloff rate of this Audio.
    */
    action GetRolloffRate returns number
        return rolloffRate
    end

    /*
    The SetRolloffRate action sets the rate at which 3D positional audio becomes
    quieter when positioned far away from the listener. When an Audio object is
    created, its rolloff rate is equal to the default value provided by
    GetDefaultRolloffRate, which begins at 1.0 (but may be changed by the user).
    Lower rolloff rates cause the sound to fade more slowly over long distances,
    and higher rolloff rates cause sound to fade more quickly. The rolloff value
    must always be positive.

    Attribute: Parameter rolloff The rolloff rate to use. Must be positive.
    */
    action SetRolloffRate(number rolloffRate)
        me:rolloffRate = rolloffRate
    end

    /*
    The GetVolume action returns the currently set volume. A number value of 1.0
    represents 100% of normal volume.


    Attribute: Returns The volume value being used
    */
    action GetVolume returns number
        return volume
    end

    /*
    The SetVolume action adjusts the volume of a sound. It takes a number value
    to set the volume to a percentage of the original sound volume. A value of
    1.0 will play the sound at 100% of standard volume. To reduce the sound by
    25%, for example, you would provide the number 0.75, or 75% volume.

    Attribute: Parameter volume The volume value to use.
    */
    action SetVolume(number volume)
        me:volume = volume
    end

    /*
    Returns the currently set pitch. The default pitch value is 1.0.

    Attribute: Returns The currently set pitch value.
    */
    action GetPitch returns number
        return pitch
    end

    /* 
    The SetPitch action sets the pitch of the sound. By default, sounds have a
    pitch value of 1.0 (or 100% normal pitch). Lower values reduce the pitch,
    while higher values increase the pitch. Changing the pitch also causes the
    audio to play slower (with low pitch) or faster (with high pitch).

    Attribute: Parameter pitch The pitch value to use.
    */
    action SetPitch(number pitch)
        me:pitch = pitch
    end

    /*
        This action returns if the Audio object will play the sound when the object loads.

        Attribute: Returns True if the audio will play on load, false otherwise
    */
    action GetPlayOnLoad returns boolean
        return playOnLoad
    end

    /*
        This action sets if the Audio object will play the sound when the object loads.

        Attribute: Parameter playOnLoad If true the audio will play on load
    */
    action SetPlayOnLoad(boolean playOnLoad)
        me:playOnLoad = playOnLoad
    end

    /*
        This action returns if the audio will loop when the audio source ends

        Attribute: Returns True if the audio will loop, false otherwise
    */
    action GetLooping returns boolean
        return looping
    end

    /*
        This action sets if the audio will loop when the audio source ends

        Attribute: Parameter looping If true the audio will loop
    */
    action SetLooping(boolean looping)
        me:looping = looping
    end

    /*
        This action returns if the audio will calculate doppler shift.

        Attribute: Returns True if the audio is calculating doppler shift, false otherwise
    */
    action GetDoppler returns boolean
        return doppler
    end

    /*
        This action sets if the audio will calculate doppler shift.

        Attribute: Parameter doppler If true the audio will calculate doppler shift
    */
    action SetDoppler(boolean doppler)
        me:doppler = doppler
    end

end