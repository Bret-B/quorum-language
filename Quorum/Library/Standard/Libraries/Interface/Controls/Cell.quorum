package Libraries.Interface.Controls

use Libraries.Interface.Views.ControlShaderView
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Game.Graphics.Label
use Libraries.Interface.Layouts.ManualLayout

class Cell is Control

    Spreadsheet table = undefined
    Label label

    number horizontalPadding = 0
    number verticalPadding = 0

    on create
        ManualLayout layout
        SetLayout(layout)

        label:SetPositionOnBaseLine(false)
        Add(label)
    end

    action LoadGraphics(LayoutProperties properties)
        parent:Control:LoadGraphics(properties)

        if GetView2D() = undefined
            ControlShaderView view
            view:Initialize()
            SetView2D(view)
        end

        if table not= undefined
            SetBackgroundColor(table:GetBackgroundColor())
            SetBorderColor(table:GetBorderColor())
            SetBorderThickness(table:GetBorderThickness())

            label:SetFont(table:GetFont())
            // Adding 0.5 and truncating to integer has the effect of rounding the value to the nearest integer
            label:SetFontSize(cast(integer, table:GetFontSize() * table:GetInterfaceScale() + 0.5))
        end
    end

    action SetValue(text value)
        SetName(value)
        label:SetText(value)
    end

    action GetSpreadsheet returns Spreadsheet
        return table
    end

    action SetSpreadsheet(Spreadsheet table)
        me:table = table
    end

    action SetInterfaceScale(number scale)
        // Do nothing. 
    end

    action GetInterfaceScale returns number
        // Due to how the renderer works, we never want the cell to handle its own interface scaling.
        // We want to manually handle scaling via the table's scaling value.
        // Thus we always return 1 here.
        return 1
    end

    action GetBorderThickness returns number
        if table not= undefined
            return table:GetBorderThickness() * table:GetInterfaceScale()
        end
        return parent:Control:GetBorderThickness()
    end

    action GetHorizontalPadding returns number
        return horizontalPadding
    end

    action SetHorizontalPadding(number horizontalPadding)
        me:horizontalPadding = horizontalPadding
    end

    action GetVerticalPadding returns number
        return verticalPadding
    end

    action SetVerticalPadding(number verticalPadding)
        me:verticalPadding = verticalPadding
    end

    action Resize
        number scale = 1
        if table not= undefined
            scale = table:GetInterfaceScale()
        end

        label:SetPosition(horizontalPadding * scale, GetHeight() - label:GetFont():GetLineHeight() - verticalPadding * scale)
        label:SetMaximumWidth(GetWidth() - (horizontalPadding * scale * 2))

        parent:Item2D:Resize()
    end

end