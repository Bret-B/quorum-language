package Libraries.Interface.Controls.TextStyles

use Libraries.Compute.Math
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Format
use Libraries.Game.Graphics.PixelMap
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.TextureRegion
use Libraries.Game.Graphics.TextureWrap

class TextUnderline is TextHighlight
    
    Texture texture = undefined
    ColorGroup color = undefined
    boolean isError = false

    on create
        Color c
        color = c:Red()

        SetLineHighlight(false)
        SetVisibleWhileSelected(true)
    end

    /*
    This action returns a Drawable representing the visual content of a text
    highlight of a given width and height.
    */
    action GetDrawable(number width, number height) returns Drawable
        if texture = undefined
            texture = GenerateTexture()
        end

        TextureRegion region
        region:LoadTextureRegion(texture)
        region:SetRegion(0, 0, cast(integer, width), texture:GetHeight())

        Drawable drawable
        drawable:Load(region)
        drawable:SetColor(color)

        return drawable
    end

    /*
    Used the first time this class needs to return a Drawable to generate the
    Texture used by drawables produced by this highlight.
    */
    private action GenerateTexture returns Texture
        Texture newTexture
        Color c
        Math math

        PixelMap map
        Format format
        format:SetValue(format:RGBA8888)

        map:CreatePixelMap(5, 4, format)
        map:Fill(c:CustomColor(1, 1, 1, 0))
        
        // 100% opaque white.
        Color c100 = c:CustomColor(1, 1, 1, 1)
        // 70% opaque white.
        Color c70 = c:CustomColor(1, 1, 1, 0.7)
        // 30% opaque white.
        Color c30 = c:CustomColor(1, 1, 1, 0.3)

        map:SetPixel(0, 3, c100)
        map:SetPixel(0, 2, c100)
        map:SetPixel(1, 3, c70)
        map:SetPixel(1, 2, c100)
        map:SetPixel(1, 1, c30)
        map:SetPixel(2, 2, c100)
        map:SetPixel(2, 1, c100)
        map:SetPixel(3, 2, c30)
        map:SetPixel(3, 1, c100)
        map:SetPixel(3, 0, c70)
        map:SetPixel(4, 1, c100)
        map:SetPixel(4, 0, c100)

        newTexture:LoadFromPixelMap(map)

        TextureWrap horizontalWrap
        horizontalWrap:ConstructTextureWrap(horizontalWrap:MIRRORED_REPEAT)
        TextureWrap verticalWrap
        verticalWrap:ConstructTextureWrap(verticalWrap:CLAMP_TO_EDGE)

        newTexture:SetWrap(horizontalWrap, verticalWrap)

        return newTexture
    end

    action SetColor(Color color)
        me:color = color
    end

    action GetColor returns ColorGroup
        return color
    end

    /*
    The SetErrorFlag action is used to designate this underline as representing
    an error in the text, most commonly a spelling error. This is used by the
    accessibility platform to inform screen readers if they interact with a
    spelling error.
    */
    action SetErrorFlag(boolean error)
        isError = error
    end

    /*
    This action returns a value indicating whether or not this underline
    represents an error in the text, most commonly a spelling error. This is
    used by the accessibility platform to inform screen readers if they interact
    with a spelling error. By default, this value returns false.
    */
    action IsError returns boolean
        return isError
    end
end