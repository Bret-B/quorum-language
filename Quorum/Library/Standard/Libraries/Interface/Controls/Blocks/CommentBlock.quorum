package Libraries.Interface.Controls.Blocks

use Libraries.Interface.Controls.Blocks.EditField
use Libraries.Interface.Controls.Blocks.BlockLabel
use Libraries.Interface.Options.BlockOptionConstants
use Libraries.Language.Compile.Context.all
use Libraries.Language.Compile.Location
use Libraries.Interface.Controls.Layouts.ScopeBlockLayout
use Libraries.Interface.Controls.Layouts.SingleLineBlockLayout
use Libraries.Language.Compile.Parsing.Token

class CommentBlock is SingleLineBlock
    BlockLabel commentLabel = undefined
    BlockLabel secondLabel = undefined
    EditBox messageBox = undefined
    EditField messageField = undefined
    boolean isMultiLineComment = false
    Token token = undefined

    on create
        BlockOptionConstants constants
        SetInterfaceOptionsKey(constants:ALERT_KEY)

        SingleLineBlockLayout layout
        SetLayout(layout)

        SetName("Comment Block")
    end

    action UpdateName(integer selectedLine)
        // TO-DO: NYI
        // This should be the entire text read by the screen reader when focused, not just the "output" portion
        SetName("Comment")
    end

    action SetupElements
        CodeEditor editor = GetEditor()
        number spacing = editor:GetDefaultGlyphWidth()
        SetLeftPadding(spacing * 0.5)
        SetRightPadding(spacing * 0.5)

        if not isMultiLineComment and token:value:StartsWith("//")
            BlockLabel bl
            me:commentLabel = bl
            commentLabel:SetFont(GetEditor():GetFont())
            commentLabel:SetFontSize(GetEditor():GetFontSize())
            commentLabel:SetText("//")
            commentLabel:SetRightPadding(spacing)
            Add(commentLabel)

            EditField box
            me:messageField = box
            Add(messageField)
            integer eolSize = editor:GetCode():GetDefaultLineSeparator():GetSize()
            messageField:Setup("Expression", token:startIndex + 2 - GetStartIndex(), 1 + token:endIndex - eolSize - GetStartIndex())
        else
            BlockLabel bl
            me:commentLabel = bl
            commentLabel:SetFont(GetEditor():GetFont())
            commentLabel:SetFontSize(GetEditor():GetFontSize())
            commentLabel:SetText("/*")
            commentLabel:SetRightPadding(spacing)
            Add(commentLabel)

            EditBox box
            me:messageBox = box
            Add(messageBox) 
    
            messageBox:Setup("Expression", token:startIndex + 2 - GetStartIndex(), 1 + token:endIndex - 2 - GetStartIndex())

            BlockLabel bl2
            me:secondLabel = bl2
            secondLabel:SetFont(GetEditor():GetFont())
            secondLabel:SetFontSize(GetEditor():GetFontSize())
            secondLabel:SetText("*/")
            Add(secondLabel)
        end
        

    end

    action IsMultiLineComment returns boolean
        return isMultiLineComment
    end

    action SetIsMultiLineComment(boolean multi)
        isMultiLineComment = multi
    end

    action GetToken returns Token
        return token
    end

    action SetToken(Token token)
        me:token = token
    end

    private action InitializeLocalIndices
        // Check if we have a valid context and parent block, but the start index hasn't been set yet.
        if token not= undefined and GetParentBlock() not= undefined and GetLocalStartIndex() < 0
            // Set our starting local values using the context and parent.
            SetLocalStartIndex(token:startIndex - GetParentBlock():GetStartIndex())
            SetLocalEndIndex(token:endIndex + 1 - GetParentBlock():GetStartIndex())
            SetLocalStartLine(token:startLine - 1 - GetParentBlock():GetStartLine())
            if token:value:StartsWith("//")
                SetLocalEndLine(token:endLine - 2 - GetParentBlock():GetStartLine())
            else
                SetLocalEndLine(token:endLine - 1 - GetParentBlock():GetStartLine())
            end
        end
    end
end