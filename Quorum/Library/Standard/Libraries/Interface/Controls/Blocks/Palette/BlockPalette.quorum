package Libraries.Interface.Controls.Blocks.Palette

use Libraries.Interface.Controls.TabPane
use Libraries.Interface.Controls.Tab
use Libraries.Interface.Forms.Form
use Libraries.Interface.Forms.Page
use Libraries.Interface.Pages.StackedRowPage
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Controls.List
use Libraries.Interface.Controls.Button
use Libraries.Interface.Controls.Blocks.CodeEditor
use Libraries.Game.GameStateManager
use Libraries.Game.Layer2D
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Events.SelectionListener
use Libraries.Language.Compile.CodeCompletionResult
use Libraries.Language.Compile.CodeCompletionRequest
use Libraries.Containers.Array
use Libraries.Interface.Controls.Blocks.Block
use Libraries.Game.Graphics.Font
use Libraries.System.File
use Libraries.Game.Graphics.TextureFilter
use Libraries.Interface.Options.InterfaceOptions
use Libraries.Interface.Options.BlockOptions
use Libraries.Interface.Options.BlockOptionConstants
use Libraries.Game.Graphics.PixelMap
use Libraries.Game.Graphics.Format
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Texture

class BlockPalette is TabPane

    CodeEditor editor = undefined
    Tab basicTab
    Tab controlTab
    Tab actionTab
    Tab suggestionTab
    
    SelectionListener suggestPage
    BlockSuggestionHandler suggestionHandler = undefined

    // Resources used to handle the visual component of dragging-and-dropping palette items.
    GameStateManager manager
    Layer2D draggedItemLayer = undefined
    boolean dragLayerInUse = false
    Drawable draggedItem = undefined
    Font fontAwesome
text fontPath = ""
    
    // The drawable used for the default circle icon applied to the tabs.
    Drawable circleTexture
    
    action Setup
        SetName("Block Palette")
        
        PixelMap pixels
Format format
        format:SetValue(format:RGBA8888)
        pixels:CreatePixelMap(81, 81, format)
        Color color
        pixels:FillCircle(40, 40, 40, color:Black())
        pixels:FillCircle(40, 40, 38, color:White())
        Texture texture
        texture:LoadFromPixelMap(pixels)
        circleTexture:Load(texture)
        
        // These texture filters will tell the game engine that when the circle isn't rendered pixel-perfect, try to smooth out the edges a little.
        TextureFilter minifyFilter
        TextureFilter magnifyFilter
        minifyFilter:ConstructTextureFilter(minifyFilter:LINEAR)
magnifyFilter:ConstructTextureFilter(magnifyFilter:LINEAR)
        circleTexture:GetTexture():SetFilter(minifyFilter, magnifyFilter)
        
        InterfaceOptions options = manager:GetInterfaceOptions()
        BlockOptions blockOptions = undefined
        if options is BlockOptions
            blockOptions = cast(BlockOptions, options)
        end
        
        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:FILL)
        properties:SetVerticalLayoutMode(properties:STANDARD)
        
        LeftAlignTabBar()
        SetLargeTabs(true)

        basicTab:SetName("Basic")
        basicTab:DisplayCloseButton(false)
        basicTab:SetRelatedItem(MakeBasicPage())
        basicTab:SetIcon(circleTexture)

        controlTab:SetName("Control")
        controlTab:DisplayCloseButton(false)
        controlTab:SetRelatedItem(MakeControlPage())
        controlTab:SetIcon(circleTexture)

        actionTab:SetName("Action")
        actionTab:DisplayCloseButton(false)
        actionTab:SetRelatedItem(MakeActionPage())
        actionTab:SetIcon(circleTexture)
        
        suggestionTab:SetName("Advice")
        suggestionTab:DisplayCloseButton(false)
        suggestionTab:SetRelatedItem(MakeSuggestionPage())
        suggestionTab:SetIcon(circleTexture)
        
        if blockOptions not= undefined
            BlockOptionConstants constants
            basicTab:SetIconColor(blockOptions:GetBackgroundColor(constants:ASSIGNMENT_KEY))
            controlTab:SetIconColor(blockOptions:GetBackgroundColor(constants:IF_KEY))
            actionTab:SetIconColor(blockOptions:GetBackgroundColor(constants:ACTION_KEY))
            suggestionTab:SetIconColor(blockOptions:GetBackgroundColor(constants:PACKAGE_KEY))
        end

                Add(suggestionTab)
Add(basicTab)
        Add(controlTab)
        Add(actionTab)
    end

    action SetEditor(CodeEditor editor)
        if me:editor not= undefined
            me:editor:RemoveSelectionListener(suggestPage)
        end
        me:editor = editor
        if editor not= undefined
            editor:AddSelectionListener(suggestPage)
            SetFontSize(editor:GetFontSize())
        end
    end
    
    action GetIconFont returns Font
        return fontAwesome
    end
    
    action SetFontPath(text path)
        me:fontPath = path
    end
    
    action LoadIconFont
File file
        file:SetPath(fontPath)
        fontAwesome:LoadFont(file)
        fontAwesome:SetSize(40)
    end

    action GetEditor returns CodeEditor
        return editor
    end

    action GetBasicTab returns Tab
        return basicTab
    end

    action GetControlTab returns Tab
        return basicTab
    end

    action GetActionTab returns Tab
        return basicTab
    end
    
    action GetSuggestionTab returns Tab
        return suggestionTab
    end

    action MakeBasicPage returns Page
        BlockPalettePage page
        page:SetPalette(me)
        page:AddBasicBlocks()
        page:SetName("Basic Palette Page")
        return page
    end

    action MakeControlPage returns Page
        BlockPalettePage page
        page:SetPalette(me)
        page:AddControlBlocks()
        return page
    end

    action MakeActionPage returns Page
        BlockPalettePage page
        page:SetPalette(me)
        page:AddActionBlocks()
        return page
    end
    
    action MakeSuggestionPage returns Page
        BlockSuggestionPage page
        page:SetPalette(me)
        me:suggestPage = page
        if GetEditor() not= undefined
            GetEditor():AddSelectionListener(page)
        end
        page:SetupDefaultSuggestions()
        return page
    end

    action SetNewCodeCompletion(CodeCompletionResult result)
        BlockSuggestionPage page = cast(BlockSuggestionPage, suggestionTab:GetRelatedItem())
        page:SetCodeCompletionResult(result)
    end

    action SetNewCodeCompletion(Array<text> list)
        BlockSuggestionPage page = cast(BlockSuggestionPage, suggestionTab:GetRelatedItem())
        page:SetFromList(list)
    end

    action SetSuggestionResult(BlockSuggestionResult result)
        BlockSuggestionPage page = cast(BlockSuggestionPage, suggestionTab:GetRelatedItem())
        page:SetFromResult(result)
    end
    
    action UpdateSuggestion(Block block, CodeCompletionRequest request)
        BlockSuggestionHandler handler
        handler:Request(block, request, me)
        me:suggestionHandler = handler
    end
    
action SetBlockSuggestionHandler(BlockSuggestionHandler suggestionHandler)
        me:suggestionHandler = suggestionHandler
    end

    action GetBlockSuggestionHandler returns BlockSuggestionHandler
        return suggestionHandler
    end

    /*
        This action is used when dragging an item from the palette into an editor. When an item
        is dragged a new layer is created so the item can be visible anywhere in the game and above
        other controls in the application. Setting the dragged item to be undefined also removes
        items in the layer so the layer does not persist and obstruct other controls after dragging
        is complete. 
    */
    action SetDraggedItem(Item item)
        // TO-DO: Handle 3D as well

        if draggedItemLayer = undefined
            Layer2D layer
            layer:SetName("Palette Drag Layer2D")
            draggedItemLayer = layer
        end

        if draggedItem not= undefined
            draggedItemLayer:Remove(draggedItem)
        end

        if item = undefined
            if dragLayerInUse
                manager:GetGame():RemoveLayer(draggedItemLayer)
            end

            dragLayerInUse = false
        else
            draggedItemLayer:Add(cast(Item2D, item))

            if dragLayerInUse = false
                manager:GetGame():AddLayer(draggedItemLayer)
            end

            dragLayerInUse = true
        end

        draggedItem = cast(Drawable, item)
    end

    /*
        Returns the item being dragged. 
    */
    action GetDraggedItem returns Item
        return draggedItem
    end

end