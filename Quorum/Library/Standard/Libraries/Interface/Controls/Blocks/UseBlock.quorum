package Libraries.Interface.Controls.Blocks

use Libraries.Interface.Controls.CodeEditor
use Libraries.Interface.Controls.Blocks.Controls.EditField
use Libraries.Interface.Controls.Blocks.Controls.BlockLabel
use Libraries.Interface.Options.BlockOptionConstants
use Libraries.Language.Compile.Context.all
use Libraries.Language.Compile.Location
use Libraries.Interface.Controls.Blocks.Layouts.ScopeBlockLayout
use Libraries.Interface.Controls.Blocks.Layouts.SingleLineBlockLayout

class UseBlock is SingleLineBlock

    BlockLabel useLabel = undefined
    UseContext useContext = undefined
    EditField nameField = undefined

    on create
        BlockOptionConstants constants
        SetInterfaceOptionsKey(constants:USE_KEY)

        SingleLineBlockLayout layout
        SetLayout(layout)

        SetName("Use Block")
    end

    action UpdateName(integer selectedLine)
        // TO-DO: NYI
        // This should be the entire text read by the screen reader when focused, not just the "output" portion
        SetName("use")
    end

    action SetupElements
        CodeEditor editor = GetEditor()
        number spacing = editor:GetDefaultGlyphWidth()
        SetLeftPadding(spacing * 0.5)
        SetRightPadding(spacing * 0.5)

        BlockLabel bl
        me:useLabel = bl
        useLabel:SetFont(GetEditor():GetFont())
        useLabel:SetFontSize(GetEditor():GetFontSize())
        useLabel:SetText("use")
        useLabel:SetRightPadding(spacing)
        Add(useLabel)

        ParseContext name = useContext:nameContext
        if name = undefined //this is an error. Should we flag it in the user interface?
            return now
        end

        Location location = name:GetLocation()
        

        EditField nameField
        me:nameField = nameField
        Add(nameField)

        nameField:Setup("Name", location:GetIndex() - GetStartIndex(), 1 + location:GetIndexEnd() - GetStartIndex())
    end

    action GetUseContext returns UseContext
        return useContext
    end

    action SetContext(UseContext context)
        me:useContext = context
        SetContext(cast(ParseContext,context))
    end

end