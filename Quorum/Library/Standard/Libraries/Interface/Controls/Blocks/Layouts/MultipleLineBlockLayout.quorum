package Libraries.Interface.Controls.Blocks.Layouts

use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Controls.Control
use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Interface.Controls.Blocks.Block
use Libraries.Interface.Controls.CodeEditor
use Libraries.Interface.Controls.Blocks.Controls.BlockItem
use Libraries.Interface.Controls.Blocks.MultipleLineBlock
use Libraries.Interface.Controls.Blocks.MultipleLineBlockPart

class MultipleLineBlockLayout is Layout

    action Layout(Control container, Array<Item2D> items, number newContainerWidth, number newContainerHeight)
        MultipleLineBlock block = cast(MultipleLineBlock, container)
        CodeEditor editor = block:GetEditor()

        integer lineRange = block:GetEndLine() - block:GetStartLine()
        number connectionTop = 0

        Array<MultipleLineBlockPart> blockParts = block:GetBlockParts()
        Array<Control> connectors = block:GetBlockConnectors()

        integer i = 0
        repeat while i < blockParts:GetSize()
            MultipleLineBlockPart part = blockParts:Get(i)

            if part:GetDefaultLayoutProperties():NeedsRendering()
                part:LoadGraphics(part:GetDefaultLayoutProperties())
            end

            // For now, assume the element is capable of figuring out its own size during a Resize.
            part:Resize()

            number currentHeight = GetHeightToLine(part, lineRange, part:GetLocalStartLine())

            part:SetPosition(0, currentHeight)

            if i > 0
                Control connector = connectors:Get(i - 1)
                number y = GetHeightToLine(part, lineRange, part:GetLocalStartLine() - 1) - 1 * part:GetBorderThickness() - 1
                connector:SetSize(editor:GetScopeIndentationWidth(), connectionTop - y)
                connector:SetPosition(0, y)
            end

            connectionTop = currentHeight + 1 * part:GetBorderThickness() + 1

            i = i + 1
        end

        block:SetSize(editor:GetTotalContentWidth() - (block:GetScopeDepth() * 4.5 + 1) * editor:GetDefaultGlyphWidth(), GetHeightToLine(block, lineRange, -1))
    end

    private action GetHeightToLine(Block block, integer lineRange, integer targetRelativeIndex) returns number
        number result = 0
        CodeEditor editor = block:GetEditor()        
        integer startLine = block:GetStartLine()

        integer i = lineRange
        repeat until i <= targetRelativeIndex
            result = result + editor:GetLineHeight(startLine + i)
            i = i - 1
        end

        return result
    end

end