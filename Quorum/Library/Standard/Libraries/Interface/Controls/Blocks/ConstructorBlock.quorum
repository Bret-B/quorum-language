package Libraries.Interface.Controls.Blocks

use Libraries.Interface.Controls.Blocks.EditRegion
use Libraries.Interface.Controls.Blocks.BlockLabel
use Libraries.Interface.Options.BlockOptionConstants
use Libraries.Interface.Controls.Layouts.SingleLineBlockLayout
use Libraries.Containers.Array
use Libraries.Language.Compile.Context.FormalParameterContext
use Libraries.Language.Compile.Location
use Libraries.Interface.Controls.Layouts.MultipleLineBlockLayout
use Libraries.Language.Compile.Context.ConstructorContext
use Libraries.Language.Compile.Context.ParseContext

class ConstructorBlock is MultipleLineBlock

    BlockLabel constructorLabel = undefined

    ConstructorContext constructorContext = undefined

    on create
        BlockOptionConstants constants
        SetInterfaceOptionsKey(constants:ACTION_KEY)

        MultipleLineBlockLayout layout
        SetLayout(layout)
//        SetCornerRounding(0.05, 0.05, 0.05, 0.05)
        SetName("Constructor Block")
    end

    private action SetupElements
        BlockEnvironment editor = GetBlockEnvironment()
        number spacing = editor:GetDefaultGlyphWidth()
        SetLeftPadding(spacing * 0.5)
        SetRightPadding(spacing * 0.5)
    end

    action AddStartLine returns MultipleLineBlockPart
        MultipleLineBlockPart part
        Add(part)
        part:UseEnterScopeStyling()

        // The start line is always the beginning of the multi-block, so it always starts at local index 0.
        part:SetLocalStartIndex(0)

        BlockEnvironment editor = GetBlockEnvironment()
        number spacing = editor:GetDefaultGlyphWidth()

        BlockLabel constructorLabel
        me:constructorLabel = constructorLabel
        constructorLabel:SetFont(editor:GetFont())
        constructorLabel:SetFontSize(editor:GetFontSize())
        constructorLabel:SetText("on create")
        part:Add(constructorLabel)

        // The end index is the same as the length of the label text, since we start from 0.
        part:SetLocalEndIndex(constructorLabel:GetText():GetSize())

        return part
    end

    action UpdateName(integer selectedLine)
//        if not IsSystemAction() and not IsBlueprintAction() and selectedLine = endLabel:GetRelativeLineIndex()
//            SetName("end")
//        else
//            SetName("action " + nameField:GetText())
//        end
    end

    action GetConstructorContext returns ConstructorContext
        return constructorContext
    end

    action SetContext(ConstructorContext context)
        me:constructorContext = context
        SetContext(cast(ParseContext, context))
    end

end