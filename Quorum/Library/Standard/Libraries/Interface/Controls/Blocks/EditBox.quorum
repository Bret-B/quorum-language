package Libraries.Interface.Controls.Blocks

use Libraries.Interface.Controls.TextBox
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Views.ControlShaderView
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.FocusEvent
use Libraries.Game.Graphics.ColorGroup
use Libraries.Interface.Options.BlockOptionConstants
use Libraries.Interface.Events.TextChangeEvent
use Libraries.Interface.Controls.Blocks.Block
use Libraries.Interface.Controls.Blocks.MultipleLineBlockPart
use Libraries.Containers.MultipleLineText

class EditBox is TextBox, EditRegion

    // Used to query for edit-specific properties from the options.
    BlockOptionConstants constants

    boolean initialized = false

    on create
        SetCornerRounding(0.5, 0.5, 0.5, 0.5)
        SetInputGroup("EditBox")
        SetPositionOnBaseLine(false)

        SetHorizontalBarVisibility(parent:ScrollableControl:NEVER_VISIBLE)
    end

    action Setup(text name, integer relativeStartIndex, integer relativeEndIndex)
        Block block = GetBlock()
        if block = undefined
            text dq = ""
            dq = dq:GetDoubleQuote()
            alert("I cannot set up the EditRegion named " + dq + name + dq + " because this region hasn't been added to a block yet. Add this to a block before calling Setup.")
        end

        SetName(name)

        SetFont(GetEditor():GetFont())
        SetFontSize(GetEditor():GetFontSize())
        SetIndices(relativeStartIndex, relativeEndIndex)
        SetText(GetEditor():GetCodeBetween(block:GetStartIndex() + relativeStartIndex, block:GetStartIndex() + relativeEndIndex))
        UpdateLength()

        initialized = true
    end

    action UpdateLength
        number glyphWidth = 10
        number height = 10
        CodeEditor editor = GetEditor()
        Block block = GetBlock()

        if editor not= undefined
            glyphWidth = editor:GetDefaultGlyphWidth()

            height = editor:GetDefaultUnpaddedLineHeight() * (block:GetLocalEndLine() - block:GetLocalStartLine() + 1)     
        end

        integer startIndex = GetStartIndex()
        integer endIndex = GetEndIndex()

        number minimumLength = 0
        number length = 0

        if block:GetLastBlockItem():Equals(me)
            minimumLength = block:GetMinimumWidth() - GetX() - block:GetRightPadding()
        end

        if block:GetLocalStartLine() not= block:GetLocalEndLine()
            MultipleLineText value = GetMultipleLineText()
            integer textLength = 0
            integer i = 0
            repeat while i < value:GetLineCount()
                integer currentLength = value:GetLine(i):GetSize()
                if currentLength > textLength
                    textLength = currentLength
                end
                i = i + 1
            end
            length = textLength * glyphWidth + GetLeftCharacterPadding() * 2
        else
            length = (endIndex - startIndex) * glyphWidth + GetLeftCharacterPadding() * 2
        end

        if length < glyphWidth + GetLeftCharacterPadding()
            length = glyphWidth + GetLeftCharacterPadding()
        end

        if length < minimumLength
            length = minimumLength
        end

        SetSize(length, height)
    end

    action GetLineCount returns integer
        // Get the actual line count for the TextBox.
        return parent:TextBox:GetLineCount()
    end

    action GainedFocus(FocusEvent event)
        parent:TextBox:GainedFocus(event)
        parent:BlockItem:GainedFocus(event)
    end

    action LostFocus(FocusEvent event)
        parent:TextBox:LostFocus(event)
        parent:Control:LostFocus(event)
    end

    action ShowCaret
        parent:TextBox:ShowCaret()
    end

    private action FitCharacterOnScreen(integer character)
        // This action is overridden to purposely disable the TextField's ability to move the underlying view.
        // We want the EditField to always show the first character, and will resize the field to show more characters as needed.
    end

    private action NotifyTextChangeListeners(TextChangeEvent event)
        if initialized = false
            return now
        end

        // Before we notify the listeners, let the editor know about the change to the indices.
        text added = event:GetAddedText()
        text deleted = event:GetDeletedText()
        integer change = added:GetSize() - deleted:GetSize()

        CodeEditor editor = GetEditor()
        if editor not= undefined
            editor:OnTextChange(event, GetBlock():GetStartIndex() + GetStartIndex())
        end

        /*
        While the field can't normally take new line characters, it becomes possible
        when interacting with special cases generated by Freeform block conversions.
        Manually count the number of new lines added and removed.
        */
        integer newLines = 0
        text lineFeed = ""
        lineFeed = lineFeed:GetLineFeed()
        
        integer i = 0
        repeat while i < added:GetSize()
            if added:GetUnicodeInteger(i) = lineFeed:GetUnicodeInteger(0)
                newLines = newLines + 1
            end
            i = i + 1
        end

        i = 0
        repeat while i < deleted:GetSize()
            if deleted:GetUnicodeInteger(i) = lineFeed:GetUnicodeInteger(0)
                newLines = newLines - 1
            end
            i = i + 1
        end

        // If the number of characters or lines has changed, update the length of the field and resize the block.
        if change not= 0 or newLines not= 0
            Block block = GetBlock()
            block:OffsetIndices(event:GetIndex() + GetStartIndex() + GetBlock():GetStartIndex(), change, newLines)
            UpdateLength()
            block:Resize()

            if IsSelected()
                editor:UpdateSelectionCursor()
            end
        end

        if editor not= undefined and newLines not= 0
            editor:RequestViewRefresh()
        end

        parent:TextBox:NotifyTextChangeListeners(event)
    end

end