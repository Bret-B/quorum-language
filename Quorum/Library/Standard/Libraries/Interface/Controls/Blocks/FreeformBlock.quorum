package Libraries.Interface.Controls.Blocks

use Libraries.Interface.Controls.Blocks.EditRegion
use Libraries.Interface.Options.BlockOptionConstants
use Libraries.Interface.Controls.Layouts.SingleLineBlockLayout
use Libraries.Interface.Events.TextInputEvent
use Libraries.Interface.Events.FocusEvent
use Libraries.Language.Compile.Parsing.QuorumParser
use Libraries.Language.Compile.Context.StartContext
use Libraries.Language.Compile.CompilerErrorManager
use Libraries.Language.Compile.Parsing.QuorumLexer
use Libraries.Language.Compile.Blocks.ParserToBlockListener
use Libraries.Language.Compile.Context.StatementContext
use Libraries.Language.Compile.Context.ClassStatementsContext
use Libraries.Interface.Controls.Blocks.FreeformBlockListener
use Libraries.Language.Compile.Context.OutputContext
use Libraries.Language.Compile.Context.ParseContext
use Libraries.Language.Compile.Location
use Libraries.Game.Graphics.Color
use Libraries.Interface.Views.BlockErrorShaderView
use Libraries.Interface.Views.SingleLineBlockView
use Libraries.Interface.Controls.Blocks.EditBox
use Libraries.Interface.Controls.Blocks.Block
use Libraries.Language.Compile.Parsing.Token
use Libraries.Language.Compile.Parsing.TokenIterator
use Libraries.Language.Compile.Parsing.QuorumLexerConstants
use Libraries.Language.Compile.Context.PackageContext
use Libraries.Language.Compile.Context.UseContext
use Libraries.Language.Compile.Context.DetectStatementContext
use Libraries.Language.Compile.Context.ActionContext
use Libraries.Language.Compile.Context.FullClassDeclarationContext

class FreeformBlock is SingleLineBlock
    FreeformBlockListener blockListener
    EditBox editRegion = undefined

    on create
        BlockOptionConstants constants
        SetInterfaceOptionsKey(constants:FREEFORM_KEY)

        SingleLineBlockLayout layout
        SetLayout(layout)

        SetName("Freeform Block")
    end
    
    action IsFastEditable returns boolean
        return true
    end

    action SetupElements
        CodeEditor editor = GetEditor()
        number spacing = editor:GetDefaultGlyphWidth()
        SetLeftPadding(spacing * 0.5)
        SetRightPadding(spacing * 0.5)

        EditBox edit
        editRegion = edit
        Add(editRegion) 

        editRegion:Setup("Free Text", 0, GetEndIndex() - GetStartIndex())
    end

    action UpdateName(integer line)
        SetName(editRegion:GetText())
    end

    action ReceivedTextInput(TextInputEvent event)
        editRegion:Focus()
        editRegion:SetCaretPosition(0)
        editRegion:Insert(event:GetText())
    end

    action GetEditBox returns EditBox
        return editRegion
    end

    action LostSelection
        ParseToBlock()
        parent:Block:LostSelection()
    end

    action GetName returns text
        if editRegion not= undefined and editRegion:GetSize() = 0
            return "Blank"
        else
            return parent:SingleLineBlock:GetName()
        end
    end

    action LexerForText(text code, CompilerErrorManager manager) returns QuorumLexer
        QuorumLexer lexer
        lexer:SetCompilerErrorManager(manager)
        lexer:Read(code)
        return lexer
    end

    action ParseExpression(text expression) returns ParseContext
        CompilerErrorManager manager
        QuorumLexer lexer = LexerForText(expression, manager)
        QuorumParser parser
        parser:SetCompilerErrorManager(manager)
        parser:SetLexer(lexer)
        return parser:Expression()
    end

    /*
    This action attempts to parse the content of the FreeformBlock and convert it into a suitable block.
    If a suitable block is found, it will replace this FreeformBlock in the editor.
    */
    action ParseToBlock
        // Don't try to parse this if it's not in the CodeEditor anymore.
        if not IsInEditorTree()
            return now
        end

        text code = editRegion:GetText()
        text newLine = editRegion:GetDefaultLineSeparator()
        text dq = code:GetDoubleQuote()
        if code = undefined or code = "" or GetParentBlock() = undefined
            return now
        end

        CodeEditor editor = GetEditor()

        /*
        First check special cases where the user has typed a short-cut.
        If so, insert extra code to make it valid before we parse it.
        */
        CompilerErrorManager errorManager
        QuorumLexer shortcutLexer = LexerForText(code, errorManager)
        
        // If there's an error, set the block to reflect it, then bail.
        if not errorManager:IsCompilationErrorFree()
            // TO-DO: Set error state visuals
            BlockErrorShaderView view
            view:Initialize()
            SetView2D(view)
            return now
        end
    // output
        TokenIterator<Token> tokenIterator
        tokenIterator:SetLexer(shortcutLexer)
        Token current
        QuorumLexerConstants constants
        isPackageStatement = false
        isUseStatement = false
        isClassStatement = false
        isEmpty = false

    
        // since we ignore white space the shortcuts will overwrite the text to guarantee spacing
        if tokenIterator:HasNext()
            current = tokenIterator:Next()
        else
            isEmpty = true
        end
        if current:category = constants:OUTPUT and not tokenIterator:HasNext()
            editRegion:SetCaretPosition(editRegion:GetSize())
            editRegion:SetText("output " + dq + dq)
            code = editRegion:GetText()

    //  input
        elseif current:category = constants:INPUT and not tokenIterator:HasNext()
            editRegion:SetCaretPosition(editRegion:GetSize())
            editRegion:SetText("text myInput = input()")
            code = editRegion:GetText()
    //  integer
        elseif current:category = constants:INTEGER_KEYWORD and not tokenIterator:HasNext()
            editRegion:SetCaretPosition(editRegion:GetSize())
            editRegion:SetText("integer " + "myInteger" + " = 0")
            code = editRegion:GetText()
    //  number
        elseif current:category = constants:NUMBER_KEYWORD and not tokenIterator:HasNext()
            editRegion:SetCaretPosition(editRegion:GetSize())
            editRegion:SetText("number " + "myNumber" + " = 0.0")
            code = editRegion:GetText()
    //  boolean
        elseif current:category = constants:BOOLEAN_KEYWORD and not tokenIterator:HasNext()
            editRegion:SetCaretPosition(editRegion:GetSize())
            editRegion:SetText("boolean " + "myBoolean" + " = false")
            code = editRegion:GetText()
    //  text
        elseif current:category = constants:TEXT and not tokenIterator:HasNext()
            editRegion:SetCaretPosition(editRegion:GetSize())
            editRegion:SetText("text " + "myText" + " = "+dq+dq)
            code = editRegion:GetText()
    //  say
        elseif current:category = constants:SAY and not tokenIterator:HasNext()
            editRegion:SetCaretPosition(editRegion:GetSize())
            editRegion:SetText("say " + dq + dq)
            code = editRegion:GetText()
    //  return (now for void or with a field if it does)
        elseif current:category = constants:RETURN and not tokenIterator:HasNext()
            editRegion:SetCaretPosition(editRegion:GetSize())
            Block parentBlock = GetParentBlock()
            repeat until parentBlock is ActionBlock or parentBlock = undefined
                parentBlock = parentBlock:GetParentBlock()
            end
            if parentBlock not= undefined
                ActionBlock parentAction = cast(ActionBlock, parentBlock)
                if parentAction:HasReturn()
                    editRegion:SetText("return undefined")
                else
                    editRegion:SetText("return now")
                    code = editRegion:GetText()
                end
            end
    // if
    // if (condition)
        elseif current:category = constants:IF
            if not tokenIterator:HasNext()
                editRegion:SetCaretPosition(editRegion:GetSize())
                text value = "if true" + newLine + editor:GetIndentationText(GetScopeDepth()) + "end"
                editRegion:SetText(value)
                code = editRegion:GetText()
            else
                // check for an expression
                current = tokenIterator:Next()
                expression = code:GetSubtext(current:startIndex)
                ParseContext ifExpression = ParseExpression(expression)
                if ifExpression not= undefined
                    // if an expression was successfully parsed then add an end if needed
                    repeat until not tokenIterator:HasNext()
                        current = tokenIterator:Next()
                    end
                    if current:category not= constants:END
                        code = "if " + expression + newLine + editor:GetIndentationText(GetScopeDepth()) + "end"
                        editRegion:SetText(code)
                    end
                else
                    BlockErrorShaderView view
                    view:Initialize()
                    SetView2D(view)
                    return now
                end
            end
    //  elseif
    //  elseif (condition)
        elseif current:category = constants:ELSE_IF
            text expression = ""
            
            Block grandparent = GetParentBlock():GetParentBlock()
            if grandparent not= undefined and grandparent is IfBlock
                IfBlock ifParent = cast(IfBlock, grandparent)
                if not tokenIterator:HasNext()
                    editRegion:SetCaretPosition(editRegion:GetSize())
                    editRegion:SetText("elseif false")
                    expression = "false"
                else
                    current = tokenIterator:Next()
                    expression = code:GetSubtext(current:startIndex)
                    ParseContext elseifExpression = ParseExpression(expression)
                    if elseifExpression = undefined
                        BlockErrorShaderView view
                        view:Initialize()
                        SetView2D(view)
                        return now
                    end
                end
                
                if ifParent:AddElseifLineFromFreeform(me, expression) = undefined
                    BlockErrorShaderView view
                    view:Initialize()
                    SetView2D(view)
                end
                return now
            else
                // TO-DO: Set error state visuals
                BlockErrorShaderView view
                view:Initialize()
                SetView2D(view)
                return now
            end
    //  else
        elseif current:category = constants:ELSE and not tokenIterator:HasNext()
            editRegion:SetCaretPosition(editRegion:GetSize())
            editRegion:SetText("else")
            Block grandparent = GetParentBlock():GetParentBlock()
            if grandparent not= undefined and grandparent is IfBlock
                IfBlock ifParent = cast(IfBlock, grandparent)
                if ifParent:AddElseLineFromFreeform(me) = undefined
                    BlockErrorShaderView view
                    view:Initialize()
                    SetView2D(view)
                end
                return now
            else
                // TO-DO: Set error state visuals
                BlockErrorShaderView view
                view:Initialize()
                SetView2D(view)
                return now
            end
    //  repeat - by default it's times
    //  repeat while
    //  repeat while (some expression) 
    //  repeat until
    //  repeat until (some expression)
        elseif current:category = constants:REPEAT
            if not tokenIterator:HasNext()
                editRegion:SetCaretPosition(editRegion:GetSize())
                editRegion:SetText("repeat 1 times" + newLine + editor:GetIndentationText(GetScopeDepth()) + "end")
                code = editRegion:GetText()
            else
                current = tokenIterator:Next()
                boolean hasExpression = true
                boolean whileType = false
                boolean untilType = false
                if current:category = constants:WHILE
                    whileType = true
                    if not tokenIterator:HasNext()
                        editRegion:SetCaretPosition(editRegion:GetSize())
                        editRegion:SetText("repeat while false" + newLine + editor:GetIndentationText(GetScopeDepth()) + "end")
                        code = editRegion:GetText()
                        hasExpression = false
                    end
                    tokenIterator:Next()
                elseif current:category = constants:UNTIL
                    untilType = false
                    if not tokenIterator:HasNext()
                        editRegion:SetCaretPosition(editRegion:GetSize())
                        editRegion:SetText("repeat until true" + newLine + editor:GetIndentationText(GetScopeDepth()) + "end")
                        code = editRegion:GetText()
                        hasExpression = false
                    end
                    tokenIterator:Next()
                end
                // there is an expression here
                if hasExpression
                    expression = code:GetSubtext(current:startIndex)
                    ParseContext repeatExpression = ParseExpression(expression)
                    if repeatExpression not= undefined
                        // if an expression was successfully parsed then add an end if needed
                        repeat until not tokenIterator:HasNext()
                            current = tokenIterator:Next()
                        end
                        if current:category not= constants:END
                            if whileType
                                code = "repeat while " + expression + newLine + editor:GetIndentationText(GetScopeDepth()) + "end"
                            elseif untilType
                                code = "repeat until " + expression + newLine + editor:GetIndentationText(GetScopeDepth()) + "end"
                            else
                                code = "repeat " + expression + newLine + editor:GetIndentationText(GetScopeDepth()) + "end"
                            end
                            editRegion:SetText(code)
                        end
                    else
                        BlockErrorShaderView view
                        view:Initialize()
                        SetView2D(view)
                        return now
                    end
                end
            end
    //  check
        elseif current:category = constants:CHECK
            editRegion:SetCaretPosition(editRegion:GetSize())
            text value ="check" + newLine + editor:GetIndentationText(GetScopeDepth()) + "detect error" + newLine +  editor:GetIndentationText(GetScopeDepth()) + "end"
            editRegion:SetText(value)
            code = editRegion:GetText()
    //  detect
        elseif current:category = constants:DETECT
            Block grandparent = GetParentBlock():GetParentBlock()
            if grandparent not= undefined and grandparent is CheckBlock
                if not tokenIterator:HasNext()
                    code = "detect error"
                    editRegion:SetText(code)
                else
                    code = editRegion:GetText()
                end
                QuorumLexer detectLexer = LexerForText(code, errorManager)
                QuorumParser parser
                parser:SetCompilerErrorManager(errorManager)
                parser:SetLexer(detectLexer)

                DetectStatementContext context = parser:DetectStatement()
                if context not= undefined
                    CheckBlock parentCheck = cast(CheckBlock, grandparent)
                    if parentCheck:AddDetectLineFromFreeform(me, context) not= undefined
                        return now
                    end
                end
                BlockErrorShaderView view
                view:Initialize()
                SetView2D(view)
                return now
            else
                BlockErrorShaderView view
                view:Initialize()
                SetView2D(view)
                return now
            end
    //  always
        elseif current:category = constants:ALWAYS
            Block grandparent = GetParentBlock():GetParentBlock()
            if grandparent not= undefined and grandparent is CheckBlock
                if tokenIterator:HasNext()
                    BlockErrorShaderView view
                    view:Initialize()
                    SetView2D(view)
                    return now
                end
                editRegion:SetText("always")
                CheckBlock parentCheck = cast(CheckBlock, grandparent)
                if parentCheck:AddAlwaysLineFromFreeform(me) = undefined
                    BlockErrorShaderView view
                    view:Initialize()
                    SetView2D(view)
                end
                return now
            else
                BlockErrorShaderView view
                view:Initialize()
                SetView2D(view)
                return now
            end
    //  action
        elseif current:category = constants:ACTION
            if tokenIterator:HasNext()
                // if there is more than just the action look for a valid action header
                ActionContext context
                QuorumLexer actionLexer = LexerForText(code, errorManager)
                QuorumParser parser
                parser:SetCompilerErrorManager(errorManager)
                parser:SetLexer(actionLexer)
                context = parser:ActionShared()
                if context = undefined
                    BlockErrorShaderView view
                    view:Initialize()
                    SetView2D(view)
                    return now
                end
                repeat until not tokenIterator:HasNext()
                    current = tokenIterator:Next()
                end
                if current:category not= constants:END
                    code = editRegion:GetText() + newLine + editor:GetIndentationText(GetScopeDepth()) + "end"
                    editRegion:SetText(code)
                end
            else
                code = "action MyAction" + newLine + editor:GetIndentationText(1) + "end"
            editRegion:SetText(code)
            end
    //  blueprint
        elseif current:category = constants:BLUEPRINT and not tokenIterator:HasNext()
            code = "blueprint action MyBlueprint"
            editRegion:SetText(code)
    //  system
        elseif current:category = constants:NATIVE and not tokenIterator:HasNext()
            code = "system action NativeAction"
            editRegion:SetText(code)
    //  class
        elseif current:category = constants:CLASS
            if not tokenIterator:HasNext()
                code = "class MyClass" + newLine + "end"
                editRegion:SetText(code)
            else 
                repeat until not tokenIterator:HasNext()
                    current = tokenIterator:Next()
                end
                if current:category not= constants:END
                    code = editRegion:GetText() + newLine + "end"
                    editRegion:SetText(code)
                end
            end
            isClassStatement = true
    //  shared
        elseif current:category = constants:STATIC
            if not tokenIterator:HasNext()
                code = "shared class MySharedClass" + newLine + editor:GetIndentationText(1) + "end"
                editRegion:SetText(code)
            end
            isClassStatement = true
    // other
        elseif current:category = constants:PACKAGE_NAME
            isPackageStatement = true
        elseif current:category = constants:USE
            isUseStatement = true
        end

        if editor:GetFailState()
            editor:SetCode(editor:GetCode())
            return now
        end
        /*
        Read the code, and if it's valid, try to parse it.
        */
        CompilerErrorManager manager
        QuorumLexer lexer
        lexer:SetCompilerErrorManager(manager)
        lexer:Read(code)
        
        // If there's an error, set the block to reflect it, then bail.
        if not manager:IsCompilationErrorFree()
            // TO-DO: Set error state visuals
            BlockErrorShaderView view
            view:Initialize()
            SetView2D(view)
            return now
        end

        QuorumParser parser
        parser:SetCompilerErrorManager(manager)
        parser:SetLexer(lexer)

        // Set the initial information for the listener. This gives it offset info it needs to calculate correct values.
        blockListener:SetSourceBlock(me)

        /*
        If the freeform block is attached to a class, we need to parse a class statement,
        which might be a full on action declaration.
        We can check for this by testing if our grandparent is a class block (which can only
        hold if our direct parent is one of the block parts of the class block).
        */
        if GetParentBlock() is MultipleLineBlockPart and GetParentBlock():GetParentBlock() is ClassBlock
            ClassStatementsContext statement = parser:ClassStatement()

            if statement not= undefined
                blockListener:EnterClassStatements(statement)
            end
            if blockListener:GetBlock() = undefined
                blockListener:SetQuorumLexer(lexer)
                blockListener:FillComment()
            end
        elseif isPackageStatement
            PackageContext context = parser:Package()
            if context not= undefined
                blockListener:EnterPackageRule(context)
            end
        elseif isUseStatement
            UseContext context = parser:Use()
            if context not= undefined
                blockListener:EnterUse(context)
            end
        elseif isClassStatement
            FullClassDeclarationContext context = parser:FullClass()
            if context not= undefined
                context:Traverse(blockListener)
            end
        else
            // If we're not in a class, parse for a standard statement. 
            // If you KNOW you are inside of an action, you use this
            StatementContext statement = parser:Statement()

            if statement not= undefined
                blockListener:EnterStatement(statement)
            end
            if blockListener:GetBlock() = undefined
                blockListener:SetQuorumLexer(lexer)
                blockListener:FillComment()
            end
        end

        // Once again, if there's an error, set the block to reflect it, then bail.
        if not manager:IsCompilationErrorFree() and not (blockListener:GetBlock() is CommentBlock and isEmpty)
            // TO-DO: Set error state visuals
            BlockErrorShaderView view
            view:Initialize()
            SetView2D(view)
            return now
        end

        // Once we've parsed, the listener will give us a block (if there's a valid option). It's stored here.
        Block result = blockListener:GetBlock()

        // If we have a valid block, replace this Freeform block with the new one.
        if result not= undefined
            editor:Replace(me, result)
        end
    end

end