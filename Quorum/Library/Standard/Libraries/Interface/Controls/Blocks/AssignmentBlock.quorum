package Libraries.Interface.Controls.Blocks

use Libraries.Interface.Options.BlockOptionConstants
use Libraries.Interface.Controls.CodeEditor
use Libraries.Interface.Controls.Blocks.Layouts.SingleLineBlockLayout
use Libraries.Interface.Controls.Blocks.Controls.EditField
use Libraries.Interface.Controls.Blocks.Controls.BlockLabel
use Libraries.Language.Compile.Context.NormalAssignmentContext
use Libraries.Language.Compile.Context.NoTypeAssignmentContext
use Libraries.Language.Compile.Location
use Libraries.Language.Compile.Context.ParseContext
use Libraries.Language.Compile.Context.UndefinedContext
use Libraries.Language.Compile.Context.ObjectAssignmentContext
use Libraries.Language.Compile.Context.ParentAssignmentContext
use Libraries.Language.Compile.Context.AccessModifierContext

class AssignmentBlock is SingleLineBlock

    EditField typeField = undefined
    EditField nameField = undefined
    EditField valueField = undefined
    BlockLabel accessModifierLabel = undefined
    BlockLabel constantLabel = undefined
    BlockLabel equalsLabel = undefined
    BlockLabel meLabel = undefined

    constant integer NORMAL_ASSIGNMENT = 0
    constant integer NO_TYPE_ASSIGNMENT = 1
    constant integer OBJECT_ASSIGNMENT = 2
    constant integer PARENT_ASSIGNMENT = 3

    integer assignmentType = NORMAL_ASSIGNMENT

    NormalAssignmentContext normalAssignmentContext = undefined
    NoTypeAssignmentContext noTypeAssignmentContext = undefined
    ObjectAssignmentContext objectAssignmentContext = undefined
    ParentAssignmentContext parentAssignmentContext = undefined

    on create
        BlockOptionConstants constants
        SetInterfaceOptionsKey(constants:ASSIGNMENT_KEY)

        SingleLineBlockLayout layout
        SetLayout(layout)

        SetName("Assignment Block")
    end

    private action SetupElements
        number spacing = GetEditor():GetDefaultGlyphWidth()
        SetLeftPadding(spacing * 0.5)
        SetRightPadding(spacing * 0.5)
        
        Location type
        Location variable = undefined

        if IsNormalAssignment()
            AddAccessModiferLabel(normalAssignmentContext:accessModifier)
            if normalAssignmentContext:isConstant
                BlockLabel constantLabel
                me:constantLabel = constantLabel
                constantLabel:SetFont(GetEditor():GetFont())
                constantLabel:SetFontSize(GetEditor():GetFontSize())
                constantLabel:SetText("constant")
                constantLabel:SetRightPadding(spacing)
                Add(constantLabel)
            end
            if normalAssignmentContext:leftHandSide:HasGenerics()
                type = normalAssignmentContext:declaration:GetLocation()
            else
                type = normalAssignmentContext:typeLocation
            end
            variable = normalAssignmentContext:variableLocation
            EditField typeField
            me:typeField = typeField
            Add(typeField)

            typeField:Setup("Type", type:GetIndex() - GetStartIndex(), type:GetIndexEnd() + 1 - GetStartIndex())
            typeField:SetRightPadding(spacing)

            AddVariableEditField(variable)
        elseif IsObjectAssignment()
            variable = objectAssignmentContext:variableLocation
            Location objName = objectAssignmentContext:objectLocation
            type = objectAssignmentContext:typeLocation

            EditField typeField
            me:typeField = typeField
            Add(typeField)

            typeField:Setup("Type", objName:GetIndex() - GetStartIndex(), objName:GetIndexEnd() + 1 - GetStartIndex())
            typeField:SetRightPadding(spacing)

            AddVariableEditField(variable)
        elseif IsParentAssignment()
            variable = parentAssignmentContext:variableLocation

            AddVariableEditField(parentAssignmentContext:GetLocation(), variable)
        elseif IsNoTypeAssignment()
            variable = noTypeAssignmentContext:variableLocation
            if noTypeAssignmentContext:hasMe
                AddVariableEditField(noTypeAssignmentContext:GetLocation(), variable)
            else
                AddVariableEditField(variable)
            end
        end

        Location expression = undefined
        if IsNormalAssignment() and normalAssignmentContext:expression not= undefined
            expression = normalAssignmentContext:expression:GetLocation()
        elseif IsNoTypeAssignment() and noTypeAssignmentContext:expression not= undefined
            expression = noTypeAssignmentContext:expression:GetLocation()
        elseif IsObjectAssignment() and objectAssignmentContext:expression not= undefined
            expression = objectAssignmentContext:expression:GetLocation()
        elseif IsParentAssignment() and parentAssignmentContext:expression not= undefined
            expression = parentAssignmentContext:expression:GetLocation()
        end

        if expression not= undefined
            BlockLabel label
            equalsLabel = label
            label:SetFont(GetEditor():GetFont())
            label:SetFontSize(GetEditor():GetFontSize())
            label:SetText("=")
            label:SetLeftPadding(spacing)
            label:SetRightPadding(spacing)
            Add(label)

            EditField region
            valueField = region
            Add(valueField)

            valueField:Setup("Value", expression:GetIndex() - GetStartIndex(), expression:GetIndexEnd() + 1 - GetStartIndex())
        end
    end

    action AddAccessModiferLabel(AccessModifierContext context)
        if context not= undefined
            number spacing = GetEditor():GetDefaultGlyphWidth()

            BlockLabel accessModifierLabel
            me:accessModifierLabel = accessModifierLabel
            accessModifierLabel:SetFont(GetEditor():GetFont())
            accessModifierLabel:SetFontSize(GetEditor():GetFontSize())
            if context:isPrivate
                accessModifierLabel:SetText("private")
            else
                accessModifierLabel:SetText("public")
            end
            accessModifierLabel:SetRightPadding(spacing)
            Add(accessModifierLabel)
        end
    end

    action AddVariableEditField(Location location)
        AddVariableEditField(location, location)
    end

    action AddVariableEditField(Location startLocation, Location endLocation)
        EditField nameField
        me:nameField = nameField
        Add(nameField)

        nameField:Setup("Name", startLocation:GetIndex() - GetStartIndex(), endLocation:GetIndexEnd() + 1 - GetStartIndex())
    end

    action UpdateName(integer selectedLine)
        text result = ""
        if typeField not= undefined
            result = typeField:GetText() + " "
        end

        if nameField not= undefined
            result = result + nameField:GetText()
        end

        if valueField not= undefined
            result = result + " = " + valueField:GetText()
        end

        SetName(result)
    end

    action IsNormalAssignment returns boolean
        return (assignmentType = NORMAL_ASSIGNMENT)
    end

    action IsNoTypeAssignment returns boolean
        return (assignmentType = NO_TYPE_ASSIGNMENT)
    end

    action IsObjectAssignment returns boolean
        return (assignmentType = OBJECT_ASSIGNMENT)
    end

    action IsParentAssignment returns boolean
        return (assignmentType = PARENT_ASSIGNMENT)
    end

    action SetContext(NormalAssignmentContext normalAssignmentContext)
        me:normalAssignmentContext = normalAssignmentContext
        me:assignmentType = NORMAL_ASSIGNMENT
        SetContext(cast(ParseContext,normalAssignmentContext))
    end

    action GetNormalAssignmentContext returns NormalAssignmentContext
        return normalAssignmentContext
    end

    action SetContext(NoTypeAssignmentContext noTypeAssignmentContext)
        me:noTypeAssignmentContext = noTypeAssignmentContext
        me:assignmentType = NO_TYPE_ASSIGNMENT
        SetContext(cast(ParseContext,noTypeAssignmentContext))
    end

    action GetNoTypeAssignmentContext returns NoTypeAssignmentContext
        return noTypeAssignmentContext
    end

    action SetContext(ObjectAssignmentContext objectAssignmentContext)
        me:objectAssignmentContext = objectAssignmentContext
        me:assignmentType = OBJECT_ASSIGNMENT
        SetContext(cast(ParseContext,objectAssignmentContext))
    end

    action GetObjectAssignmentContext returns ObjectAssignmentContext
        return objectAssignmentContext
    end

    action SetContext(ParentAssignmentContext parentAssignmentContext)
        me:parentAssignmentContext = parentAssignmentContext
        me:assignmentType = PARENT_ASSIGNMENT
        SetContext(cast(ParseContext,parentAssignmentContext))
    end

    action GetParentAssignmentContext returns ParentAssignmentContext
        return parentAssignmentContext
    end

end