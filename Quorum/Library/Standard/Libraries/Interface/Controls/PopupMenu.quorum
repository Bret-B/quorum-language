package Libraries.Interface.Controls

use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Game.GameStateManager
use Libraries.Game.InputMonitor
use Libraries.Game.Graphics.Color
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.MouseListener
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Interface.Views.LabelBoxView

class PopupMenu is MenuRoot, MouseListener
    
    MenuPanel panel
    Dialog dialog
    GameStateManager manager
    InputMonitor monitor
    Array<MenuItem> menuItems

    on create
        ManualLayout layout
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetBorderThickness(4)

        dialog:SetTopBarVisible(false)
        dialog:SetModal(false)
        dialog:Add(me)

        Add(panel)

        SetAccessibilityCode(parent:Item:POPUP_MENU)
        SetName("Pop-Up Menu")
    end

    action IsAccessibleParent returns boolean
        return true
    end

    action Add(Array<MenuItem> menuHeaders)
        // Add directly to the base MenuPanel.

        integer counter = 0
        repeat while counter < menuHeaders:GetSize()
            Add(menuHeaders:Get(counter))
            counter = counter + 1
        end
    end

    action Add(MenuItem item)
        // Add directly to the base MenuPanel.
        item:SetMenuRoot(me)
        menuItems:Add(item)
        panel:Add(item)
    end

    action Remove(MenuItem item)
        // Remove from the MenuPanel
        panel:Remove(item)
        menuItems:Remove(item)
        item:SetMenuRoot(undefined)

        // Correct the selection if we've just removed it.
        Array<MenuItem> path = GetSelection():GetPath()
        if path:IsEmpty() = false and path:Get(0) = item
            if menuItems:IsEmpty()
                Deselect()
            else
                path:Empty()
                path:Add(menuItems:Get(0))
                Select(path)
            end
        end
    end

    action Empty
        repeat while menuItems:IsEmpty() = false
            Remove(menuItems:GetFromEnd())
        end
    end

    action OpenAtCursor
        OpenAt(monitor:GetMouseX(), manager:GetGameDisplay():GetHeight() - monitor:GetMouseY())
    end

    action OpenAt(number x, number y)
        LayoutProperties properties = dialog:GetDefaultLayoutProperties()
        properties:SetPercentageX(0)
        properties:SetPercentageY(0)
        properties:SetPixelX(x)
        properties:SetPixelY(y)
        properties:SetPercentageOriginX(0)
        properties:SetPercentageOriginY(1)
        Open()
    end

    action Open
        dialog:Show()
        dialog:GetLayer():AddMouseListener(me)
        Focus()
        SetSelectingState(true)
    end

    action Close
        // Close each item on the base MenuPanel.

        integer counter = 0

        repeat while counter < menuItems:GetSize()
            MenuItem item = menuItems:Get(counter)
            item:Close()
            counter = counter + 1
        end

        dialog:Hide()
    end

    // Closely mirrors MenuBar's related action, but without concern for the top bar.
    action MoveSelectionLeft
        Array<MenuItem> path = GetSelection():GetPath()
        if path:GetSize() > 1
            path:RemoveFromEnd()
            Select(path)
        end
    end

    // Closely mirrors MenuBar's related action, but without concern for the top bar.
    action MoveSelectionRight
        // Do a copy so modifying it here doesn't have side effects on the
        // original selection (we need to preserve it for Select to use).
        Array<MenuItem> path = GetSelection():GetPath():CopyToArray()
        if path:GetSize() > 0
            MenuItem item = GetMenuItem(path)
            if item:IsMenu()
                if not item:IsOpen()
                    item:Open()
                end
                item:GetMenuItems():Next():Select()
            end
        end
    end

    action MoveSelectionDown
        Array<MenuItem> path = GetSelection():GetPath()
        if path:GetSize() = 0

            if menuItems:IsEmpty() = false
                MenuItem item = menuItems:Get(0)
                Array<MenuItem> selectionPath
                selectionPath:Add(item)
                Select(selectionPath)
            end
        elseif path:GetSize() = 1
            integer counter = 0
            MenuItem previous = path:Get(0)

            repeat while counter < menuItems:GetSize()
                MenuItem item = menuItems:Get(counter)
                if item:Equals(previous)

                    // Select next item in the list, if there is one.
                    if counter + 1 < menuItems:GetSize()
                        MenuItem menuItem = menuItems:Get(counter + 1)
                        menuItem:Select()
                    end

                    return now
                end
                counter = counter + 1
            end
        else
            MenuItem item = GetMenuItem(path)
            item:MenuSelectionDown()
        end
    end

    action MoveSelectionUp
        Array<MenuItem> path = GetSelection():GetPath()
        if path:GetSize() = 0
            Array<MenuItem> items = menuItems
            if items:IsEmpty() = false
                MenuItem item = items:GetFromEnd()
                Array<MenuItem> selectionPath
                selectionPath:Add(item)
                Select(selectionPath)
            end
        elseif path:GetSize() = 1
            integer counter = 0
            MenuItem previous = path:Get(0)

            repeat while counter < menuItems:GetSize()
                MenuItem item = menuItems:Get(counter)
                if item:Equals(previous)

                    // Select the previous element in the menu, if there is one.
                    if counter - 1 >= 0
                        MenuItem menuItem = menuItems:Get(counter - 1)
                        menuItem:Select()
                    end

                    return now
                end
                counter = counter + 1
            end
        else
            MenuItem item = GetMenuItem(GetSelection():GetPath())
            item:MenuSelectionUp()
        end
    end

    action LoadGraphics(LayoutProperties properties)
        Color color

        LabelBoxView content
        content:SetBorderThickness(cast(integer, properties:GetBorderThickness()))
        content:Initialize(color:CustomColor(1, 1, 1, 0), color:Black())

        panel:SetView2D(content)

        parent:Control:LoadGraphics(properties)
    end

    /*
    The PopupMenu listens for mouse clicks outside of the menu. If the user
    clicks outside the menu, the menu closes.
    */
    action ClickedMouse(MouseEvent event)
        if event:eventType = event:CLICKED_MOUSE and event:GetSource() = undefined
            event:SetEventHandled(false)
            Close()
        end
    end

    /*
    The HasBar action is used to specify if this MenuRoot uses a special layout
    for the first menu items (i.e., the first set of the menu items is placed in
    a menu bar, unlike submenus which use menu panels).
    */
    action HasBar returns boolean
        return false
    end

    action GetSize returns integer
        return menuItems:GetSize()
    end

    action GetIterator returns Iterator<MenuItem>
        return menuItems:GetIterator()
    end

end