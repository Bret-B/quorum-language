package Libraries.Data.Database

/*
    These names correspond to the constants in Java's JDBC. The names have been changed and the system can detect how everything maps to Quorum
*/
shared class DatabaseTypeConstants
    public constant integer BIT = -7
    
    action IsBoolean(integer value) returns boolean
        if  value = BIT
            return true
        end

        return false
    end
    //TINYINT
    public constant integer INTEGER8 = -6
    
    //SMALLINT
    public constant integer INTEGER16 = 5
    
    public constant integer INTEGER = 4

    public constant integer INTEGER32 = INTEGER
    
    /*
        This returns whether or not the value is an 8-bit, 16-bit, or 32-bit integer. For 64-bit integers,
        this does not count.
    */
    action IsInteger(integer value) returns boolean
        if  value = INTEGER8
            or value = INTEGER16
            or value = INTEGER32 //INTEGER not necessary because it is the same value
            return true
        end

        return false
    end

    action IsInteger64(integer value) returns boolean
        if  value = INTEGER64
            return true
        end

        return false
    end
    
    //BIGINT
    public constant integer INTEGER64 = -5
    
    /*
    FLOAT: This is a weird case in JDBC, where the original label is float, which implies
    single precision, but in practice it is actually 64 bits. We are thus labeling it to
    what it really is, with NUMBER being like Quorum, which is also a double in standard terminology.
    This is confusing, but also not our fault. Whether we should permanently expose this one or some of the
    other wrong or confusing ones is not clear.
    */
    private constant integer NUMBER64_WRONG = 6
    
    //REAL
    public constant integer NUMBER32 = 7
    
    //DOUBLE
    public constant integer NUMBER64 = 8

    public constant integer NUMBER = NUMBER64
    
    action IsNumber(integer value) returns boolean
        if  value = NUMBER64_WRONG
            or value = NUMBER32
            or value = NUMBER64 //NUMBER not necessary because it is the same value
            or value = NUMBER_EXTRA_PRECISION
            return true
        end

        return false
    end
    //NUMERIC: Must have number of digits (precision) and scale (digits after the decimal point)
    public constant integer NUMBER_EXACT_PRECISION = 2
    
    //DECIMAL: Must have at least the number of digits (precision) and scale (digits after the decimal point)
    public constant integer NUMBER_EXTRA_PRECISION = 3
    
    //CHAR: A text value of a fixed length, up to 254 in most implementations
    public constant integer TEXT_FIXED_SIZE = 1

    //VARCHAR
    public constant integer TEXT = 12
    
    //LONGVARCHAR
    private constant integer TEXT_LONG = -1

    action IsText(integer value) returns boolean
        if  value = TEXT_FIXED_SIZE
            or value = TEXT
            or value = TEXT_LONG
            return true
        end

        return false
    end
    
    public constant integer DATE = 91
    
    public constant integer TIME = 92
    
    public constant integer TIMESTAMP = 93
    
    action IsDateTime(integer value) returns boolean
        if  value = DATE
            or value = TIME
            or value = TIMESTAMP
            return true
        end

        return false
    end
    //BINARY
    public constant integer BYTE_FIXED_SIZE = -2
    
    //VARBINARY
    public constant integer BYTE = -3
    
    //LONGVARBINARY
    private constant integer BYTE_LONG = -4
    
    //NULL
    public constant integer UNDEFINED = 0

    action IsByteArray(integer value) returns boolean
        if  value = BYTE_FIXED_SIZE
            or value = BYTE
            or value = BYTE_LONG
            return true
        end

        return false
    end

    action IsUndefined(integer value) returns boolean
        if  value = UNDEFINED
            return true
        end

        return false
    end
    
    
//    public constant integer OTHER = 1111
//    
//    public constant integer JAVA_OBJECT = 2000
//    
//    public constant integer DISTINCT = 2001
//    
//    public constant integer STRUCT = 2002
//    
//    public constant integer ARRAY = 2003
//    
//    public constant integer BLOB = 2004
//    
//    public constant integer CLOB = 2005
//    
//    public constant integer REF = 2006
//    
//    public constant integer DATALINK = 70
//    
//    public constant integer BOOLEAN = 16
//    
//    public constant integer ROWID = -8
//    
//    public constant integer NCHAR = -15
//    
//    public constant integer NVARCHAR = -9
//    
//    public constant integer LONGNVARCHAR = -16
//    
//    public constant integer NCLOB = 2011
//    
//    public constant integer SQLXML = 2009
//    
//    public constant integer REF_CURSOR = 2012
//    
//    public constant integer TIME_WITH_TIMEZONE = 2013
//    
//    public constant integer TIMESTAMP_WITH_TIMEZONE = 2014
end