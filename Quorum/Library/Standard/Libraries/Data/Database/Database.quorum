package Libraries.Data.Database
use Libraries.Data.Database.Strategies.DefaultDatabaseStrategy
use Libraries.Compute.Statistics.DataFrame
use Libraries.Containers.Array

class Database
    DatabaseStrategy strategy = undefined
    DatabaseMetaData meta = undefined
    boolean connected = false
    on create
        //by default create a my sql database, but allow the user
        //to override it if they wish.
        DefaultDatabaseStrategy db
        strategy = db
    end

    action Connect(Connection connection)
        check
            strategy:Connect(connection)
            connected = true
        detect e
            connected = false
        end
    end

    action IsConnected returns boolean
        return connected
    end

    action Connect(text location, text database, text username, text password)
        Connection connection
        connection:SetLocation(location)
        connection:SetUsername(username)
        connection:SetPassword(password)
        connection:SetDatabase(database)
        Connect(connection)
    end

    action GetAutoCommit returns boolean
        return strategy:GetAutoCommit()
    end

    action SetAutoCommit(boolean commit)
        strategy:SetAutoCommit(commit)
    end

    action Commit
        strategy:Commit()
    end

    action Rollback
        strategy:Rollback()
    end

    action Close
        strategy:Close()
    end

    action Find(Find query) returns QueryResult
        SetMeta(query)
        return strategy:Find(query)
    end

    action Insert(Insert query) returns integer
        SetMeta(query)
        return strategy:Insert(query)
    end

    action Update(Update query) returns integer
        SetMeta(query)
        return strategy:Update(query)
    end

    action Delete(Delete query) returns integer
        SetMeta(query)
        return strategy:Delete(query)
    end

    action GetDatabaseMetaData returns DatabaseMetaData
        meta = strategy:GetDatabaseMetaData()
        return meta
    end

    private action SetMeta(Query query)
        if meta = undefined
            GetDatabaseMetaData()
        end
        query:SetDatabaseMetaData(meta)
    end

    private action RefreshMeta()
        if meta = undefined
            GetDatabaseMetaData()
        else
            meta:RefreshTables()
        end
    end

    action CreateTable(CreateTable creation)
        SetMeta(creation)
        strategy:CreateTable(creation)
        RefreshMeta()
    end

    action DropTable(DropTable drop)
        SetMeta(drop)
        strategy:DropTable(drop)
        RefreshMeta()
    end

    action EditTable(EditTable edit)
        SetMeta(edit)
        strategy:EditTable(edit)
        RefreshMeta()
    end

    action CreateView(CreateView view)
        SetMeta(view)
        strategy:CreateView(view)
        RefreshMeta()
    end

    action ConvertResultToDataFrame(QueryResult result) returns DataFrame
        QueryResultToDataFrameConverter converter
        return converter:Convert(result)
    end

    action FindAsDataFrame(Find query) returns DataFrame
        SetMeta(query)
        QueryResult result = strategy:Find(query)
        QueryResultToDataFrameConverter converter
        return converter:Convert(result)
    end

    action FindAsDataFrame(text table) returns DataFrame
        QueryResult result = Find(table)
        QueryResultToDataFrameConverter converter
        return converter:Convert(result)
    end

    action FindAsDataFrame(text table, text filter) returns DataFrame
        QueryResult result = Find(table, filter)
        QueryResultToDataFrameConverter converter
        return converter:Convert(result)
    end

    action Find(text table) returns QueryResult
        Find find
        find:SetTable(table)
        return Find(find)
    end

    action Find(text table, text filter) returns QueryResult
        Find find
        find:SetTable(table)
        find:Filter(filter)
        return Find(find)
    end

    action Find(Array<text> columns, text table) returns QueryResult
        return Find(columns, table, undefined)
    end

    action Find(Array<text> columns, text table, text filter) returns QueryResult
        Find find
        i = 0
        repeat columns:GetSize() times
            find:AddColumn(columns:Get(i))
        i = i + 1
        end
        find:SetTable(table)
        if filter not= undefined and filter not= ""
            find:Filter(filter)
        end
        return Find(find)
    end

    // multi column finds
    action OneColumnFind(text column, text table, text filter) returns QueryResult
        Array<text> columnList
        columnList:Add(column)
        return Find(columnList, table, filter)
    end

    action TwoColumnFind(text column1, text column2, text table, text filter) returns QueryResult
        Array<text> columnList
        columnList:Add(column1)
        columnList:Add(column2)
        return Find(columnList, table, filter)
    end

    action ThreeColumnFind(text column1, text column2, text column3, text table, text filter) returns QueryResult
        Array<text> columnList
        columnList:Add(column1)
        columnList:Add(column2)
        columnList:Add(column3)
        return Find(columnList, table, filter)
    end

    action FourColumnFind(text column1, text column2, text column3, text column4, text table, text filter) returns QueryResult
        Array<text> columnList
        columnList:Add(column1)
        columnList:Add(column2)
        columnList:Add(column3)
        columnList:Add(column4)
        return Find(columnList, table, filter)
    end


    /*INTERNAL ACTION FOR JOIN HELPER FUNCTIONS*/
    private action FindJoin(Array<text> columns, text table, text joinedTable, text joinCondition, text filter, integer joinType) returns QueryResult
    /*Join Types
        0 = INNER
        1 = LEFT
        2 = RIGHT
        3 = CROSS
    */
        Find find
        i = 0
        if columns not= undefined
            repeat columns:GetSize() times
                find:AddColumn(columns:Get(i))
            i = i + 1
            end
        end
        find:SetTable(table)
        if joinType = 0
            find:AddInnerJoin(joinedTable, joinCondition)
        elseif joinType = 1
            find:AddLeftJoin(joinedTable, joinCondition)
        elseif joinType = 2
            find:AddRightJoin(joinedTable, joinCondition)
        elseif joinType = 3
            find:AddCrossJoin(joinedTable)
        end
        return Find(find)
    end

    //INNER JOINS

    action FindInnerJoin(text table, text joinedTable, text joinCondition) returns QueryResult
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, undefined)
    end

    action FindInnerJoin(text table, text joinedTable, text joinCondition, text filter) returns QueryResult
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, filter)
    end

    action FindInnerJoinUsingColumn(text table, text joinedTable, text column) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, undefined)
    end

    action FindInnerJoinUsingColumn(text table, text joinedTable, text column, text filter) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, filter)
    end

    action FindInnerJoinUsingColumn(Array<text> columns, text table, text joinedTable, text column) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(columns, table, joinedTable, joinCondition, undefined)
    end

    action FindInnerJoinUsingColumn(Array<text> columns, text table, text joinedTable, text column, text filter) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(columns, table, joinedTable, joinCondition, filter)
    end

    action FindInnerJoin(Array<text> columns, text table, text joinedTable, text joinCondition, text filter) returns QueryResult
        return FindJoin(columns, table, joinedTable, joinCondition, filter, 0)
    end

    // LEFT JOINS
    action FindLeftJoin(text table, text joinedTable, text joinCondition) returns QueryResult
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, undefined)
    end

    action FindLeftJoin(text table, text joinedTable, text joinCondition, text filter) returns QueryResult
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, filter)
    end

    action FindLeftJoinUsingColumn(text table, text joinedTable, text column) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, undefined)
    end

    action FindLeftJoinUsingColumn(text table, text joinedTable, text column, text filter) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, filter)
    end

    action FindLeftJoinUsingColumn(Array<text> columns, text table, text joinedTable, text column) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(columns, table, joinedTable, joinCondition, undefined)
    end

    action FindLeftJoinUsingColumn(Array<text> columns, text table, text joinedTable, text column, text filter) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(columns, table, joinedTable, joinCondition, filter)
    end

    action FindLeftJoin(Array<text> columns, text table, text joinedTable, text joinCondition, text filter) returns QueryResult
        return FindJoin(columns, table, joinedTable, joinCondition, filter, 1)
    end

    // RIGHT JOINS
    action FindRightJoin(text table, text joinedTable, text joinCondition) returns QueryResult
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, undefined)
    end

    action FindRightJoin(text table, text joinedTable, text joinCondition, text filter) returns QueryResult
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, filter)
    end

    action FindRightJoinUsingColumn(text table, text joinedTable, text column) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, undefined)
    end

    action FindRightJoinUsingColumn(text table, text joinedTable, text column, text filter) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, filter)
    end

    action FindRightJoinUsingColumn(Array<text> columns, text table, text joinedTable, text column) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(columns, table, joinedTable, joinCondition, undefined)
    end

    action FindRightJoinUsingColumn(Array<text> columns, text table, text joinedTable, text column, text filter) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(columns, table, joinedTable, joinCondition, filter)
    end

    action FindRightJoin(Array<text> columns, text table, text joinedTable, text joinCondition, text filter) returns QueryResult
        return FindJoin(columns, table, joinedTable, joinCondition, filter, 2)
    end

    // CROSS JOINS
    action FindCrossJoin(text table, text joinedTable) returns QueryResult
        return FindInnerJoin(undefined, table, joinedTable, undefined, undefined)
    end

    action FindCrossJoin(text table, text joinedTable, text filter) returns QueryResult
        return FindInnerJoin(undefined, table, joinedTable, undefined, filter)
    end

    action FindCrossJoin(Array<text> columns, text table, text joinedTable, text filter) returns QueryResult
        return FindJoin(columns, table, joinedTable, undefined, filter, 4)
    end

    action Delete(text table, text filter) returns integer
        Delete delete
        delete:SetTable(table)
        delete:Filter(filter)
        return Delete(delete)
    end

    action CreateView(Find query)
        CreateView view
        view:SetQuery(query)
        CreateView(view)
    end

    action RenameTable(text table, text newName)
        EditTable edit
        edit:SetTable(table)
        edit:RenameTable(newName)
        EditTable(edit)
    end

    action RemoveTable(text table)
        DropTable drop
        drop:SetTable(table)
        DropTable(drop)
    end

    action EmptyTable(text table)
        DropTable drop
        drop:SetTable(table)
        drop:SetEmptyOnly(true)
        DropTable(drop)
    end

// debug actions

    action OutputQuery(Query query)
        SetMeta(query)
        output query:ConvertToStructuredQueryLanguage()
    end

    action OutputQueries(Array<Query> queries)
        integer i = 0
        repeat while i < queries:GetSize()
            OutputQuery(queries:Get(i))
            i = i + 1
        end
    end

end