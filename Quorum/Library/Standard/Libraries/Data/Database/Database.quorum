package Libraries.Data.Database
use Libraries.Data.Database.Strategies.DefaultDatabaseStrategy
use Libraries.Compute.Statistics.DataFrame
use Libraries.Containers.Array

/*
    The Database class is used to connect to a live database and either get 
    information about the Database or run queries on the database and return
    results. After calling Connect running a query or using a designated helper
    function will send a SQL query to that database. 
 
    Attribute: Example

use Libraries.Data.Database.Database
use Libraries.Data.Database.Find

Database database
database:Connect("localhost", "myDatabase", "user", "SuperSecret456")

Find query
query:SetTable("employees")
query:AddColumn("lastName")
query:AddColumn("firstName")

QueryResult results = database:Find(query)

*/

class Database
    DatabaseStrategy strategy = undefined
    DatabaseMetaData meta = undefined
    boolean connected = false
    text error = undefined

    on create
        //by default create a my sql database, but allow the user
        //to override it if they wish.
        DefaultDatabaseStrategy db
        strategy = db
    end

/*
    Takes a connection object used internally to connect to a database server. A connection
    object holds the user and location information. If the port of the database server is 3306
    this action does not need to used an the other Connect action with more parameter removes the
    need to create a Connection object.

    Attribute: Parameter connection The Connection object containing the information needed to establish a connection
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.Connection

    Database db

    Connection connection
    connection:SetLocation("localhost")
    connection:SetDatabase("myDB")
    connection:SetUsername("user2")
    connection:SetPassword("myPassword")
    db:Connect(connection)

*/
    action Connect(Connection connection)
        check
            strategy:Connect(connection)
            connected = true
        detect e
            error = e:GetStackTraceMessage()
            connected = false
        end
    end

    /*
        If the connection has an error, this action returns the stack trace for 
        the problem. 
    */
    action GetConnectionError returns text
        return error
    end
/*
    Returns whether or not this database object is currently connected to a database

    Attribute: Returns Returns true if currently connected to a database
    Attribute: Example

    use Libraries.Data.Database.Database

    Database db
    output db:IsConnected()
*/
    action IsConnected returns boolean
        return connected
    end

/*
    This action attempts to create a connection to a database using the given parameters.
    If the connection is made successfully IsConnected will return true.

    Attribute: Parameter location The location of the database. A common location is "localhost."
    Attribute: Parameter database The name of the database
    Attribute: Parameter username The name of the user
    Attribute: Parameter password The password for the user
    Attribute: Example

    use Libraries.Data.Database.Database

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    output db:IsConnected()
*/
    action Connect(text location, text database, text username, text password)
        Connection connection
        connection:SetLocation(location)
        connection:SetUsername(username)
        connection:SetPassword(password)
        connection:SetDatabase(database)
        Connect(connection)
    end

/*
    This action returns whether or not the database will automatically commit with every transaction on the database.
    An example of a "transaction" would be an Insert or Update. If the database has auto commit set to true then an
    insert will immediately take effect after being sent to the database. Auto-commit can be thought like an auto save
    feature for documents but for databases.

    Attribute: Returns Returns true if auto commit is on and false otherwise.
    Attribute: Example

    use Libraries.Data.Database.Database

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    output db:GetAutoCommit()
*/
    action GetAutoCommit returns boolean
        return strategy:GetAutoCommit()
    end

/*
    This action sets the auto-commit behavior of the database. Auto-commit can be thought like an auto save feature for documents
    but for databases. Auto-commit is where transactions on the database are automatically
    saved on the database. This can be compared to having a document automatically save every change made so the user does
    not have to press the save button. If this is set to false in order to save changes to the database the Commit() action
    needs to be used.

    Attribute: Parameter commit If true the database will automatically commit with every query.
    Attribute: Example

    use Libraries.Data.Database.Database

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    db:SetAutoCommit(false)
*/
    action SetAutoCommit(boolean commit)
        strategy:SetAutoCommit(commit)
    end

/*
    Any changes made through Inserts, Updates, or Deletes that occur when auto-commit is disabled will not be saved
    unless Commit() is used. A commit is like saving changes on a document. If auto commit is set to true this action
    does not need to be used.

    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.Update

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    db:SetAutoCommit(false)

    Update update
    update:SetTable("tasks")
    update:Add("priority", 1)
    update:Filter("priority = 4")

    db:Update(update)

    db:Commit()

*/
    action Commit
        strategy:Commit()
    end

/*
    This action will remove any nonpermanent changes currently on the database and revert the database to
    a previous state. This action will only work if auto-commit is set to false. If auto-commit is not enabled
    a query such as an Update can be undone before a Commit() is called.

    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.Update

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    db:SetAutoCommit(false)

    Update update
    update:SetTable("tasks")
    update:Add("priority", 1)
    update:Filter("priority = 4")

    integer rows = db:Update(update)

    if rows > 1
        db:Rollback()
    else
        db:Commit()
    end
*/
    action Rollback
        strategy:Rollback()
    end

/*
    This action closes the active connection to the database. If there are any uncommited changes
    they will be commited.

    Attribute: Example

    use Libraries.Data.Database.Database

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    output db:IsConnected()

    db:Close()

    output db:IsConnected()
*/
    action Close
        strategy:Close()
        connected = false
    end

/*
    This takes a Find query object and builds a query to send to the database.
    A Find query is used to grab data from the database. When interacting with
    a database a Find is usually the most common of type of query to use.

    Attribute: Parameter query The query to run
    Attribute: Returns Returns a query result which for a Find will be the rows that matched with the query.
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.Find

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    Find query
    query:SetTable("employees")
    query:AddColumn("id")
    QueryResult result = db:Find(query)

*/
    action Find(Find query) returns QueryResult
        SetMeta(query)
        return strategy:Find(query)
    end

/*
    This takes an Insert query and sends it to the database and returns the result.
    An Insert allows for adding more rows to a table and if the insert was successful
    the database will return the number of rows affected. For more information and how to
    do an insert look into the documentation of the Insert query class.

    Attribute: Parameter query The query to run
    Attribute: Returns Returns the number of rows that were affected
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.Insert

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    Insert insert
    insert:SetTable("tasks")
    insert:Add("title", "Come up with Resolution")
    insert:Add("priority", 4)
    insert:Add("start_date", "2021-12-31")
    integer rowsAffected = db:Insert(insert)

    output "Inserted " + rowsAffected + "row(s)"
*/
    action Insert(Insert query) returns integer
        SetMeta(query)
        return strategy:Insert(query)
    end

/*
    This action closes the active connection to the database. If there are any uncommited changes
    they will be commited.

    Attribute: Example

    use Libraries.Data.Database.Database

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    output db:IsConnected()

    db:Close()

    output db:IsConnected()
*/
    action GetLastInsertedID returns integer
        return strategy:GetLastInsertedID()
    end

/*
    This takes an Update query and sends it to the database and returns the result.
    An Update allows for changing the data in rows that already exist on the database.
    For more information and how to do an Update look into the documentation of the 
    Update class.

    Attribute: Parameter query The query to run
    Attribute: Returns Returns the number of rows affected by the Update
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.Update

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    Update update
    update:SetTable("tasks")
    update:AddExpression("priority", "priority + 1")
    update:Filter("priority >= 4 ")

    integer rowsAffected = db:Update(update)
    output rowsAffected + "row(s) updated"

*/
    action Update(Update query) returns integer
        SetMeta(query)
        return strategy:Update(query)
    end

/*
    This takes an Delete query and sends it to the database and returns the result.
    A Delete removes rows from a database table based on a given filter and then returns
    the number of rows deleted. A delete at minimum needs a table and a filter so there are
    helper functions in this Database class to make it easier to run a delete but using an
    object is also accepted. For more information on the deleting there is documentation
    on the Delete query.

    Attribute: Parameter query The query to run
    Attribute: Returns Returns the number of rows affected by the Delete
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.Delete

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    Delete delete
    delete:SetTable("tasks")
    delete:Filter("priority = 4")
    db:Delete(delete)

*/
    action Delete(Delete query) returns integer
        SetMeta(query)
        return strategy:Delete(query)
    end

/*
    Returns the DatabaseMetaData object which contains more information about the currently connected database
    such as what tables exist and how many tables there are. 

    Attribute: Returns Returns a DatabaseMetaData object filled with information from the connected database.
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.DatabaseMetaData

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    DatabaseMetaData meta = db:GetDatabaseMetaData()
    output "Number of tables: " + meta:GetSize()
*/
    action GetDatabaseMetaData returns DatabaseMetaData
        meta = strategy:GetDatabaseMetaData()
        return meta
    end

/*
    Returns the true if the Database has a specified table

    Attribute: Returns Returns true if the table exists on the database false otherwise.
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.DatabaseMetaData

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    output db:HasTable("myTable")
*/
    action HasTable(text table) returns boolean
        RefreshMeta()
        return meta:HasTable(table)
    end

    /* INTERNAL
        Queries need meta data in order to check if the query is valid such as if a column exists.
        This action is called to set the tmeta data on a query before the text of the query is generated.
    */
    private action SetMeta(Query query)
        if meta = undefined
            GetDatabaseMetaData()
        end
        query:SetDatabaseMetaData(meta)
    end

    /* Queries like CreateTable will make the metadata incorrect so this updates the metadata */
    private action RefreshMeta()
        if meta = undefined
            GetDatabaseMetaData()
        else
            meta:RefreshTables()
        end
    end

/*
    This action takes a CreateTable query and sends it to the database. If successful the metadata will 
    be updated to include the new table. The CreateTable query adds new tables to the database. For more
    information on creating tables there is documentation in the CreateTable class.

    Attribute: Parameter creation The query to run
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.CreateTable

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    CreateTable create
    create:SetTable("newTable")
    create:AddIntegerColumn("id")
    db:CreateTable(create)
*/
    action CreateTable(CreateTable creation)
        SetMeta(creation)
        strategy:CreateTable(creation)
        RefreshMeta()
    end

/*
    This action takes a DropTable query and sends it to the database. DropTable is used to remove tables or 
    to empty the data out of a table. If successful the metadata will be updated to reflect the changes. 
    Most of what can be through a DropTable query can be done through other actions in the class such 
    as RemoveTable().

    Attribute: Parameter drop The query to run
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.DropTable

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    DropTable drop
    drop:SetTable("oldTable")
    db:DropTable(drop)
*/
    action DropTable(DropTable drop)
        // if there is no table then don't send a query
        RefreshMeta()
        DatabaseMetaData meta = GetDatabaseMetaData()
        DatabaseTable table = meta:GetTable(drop:GetTable())
        if table = undefined
            return now
        end

        SetMeta(drop)
        strategy:DropTable(drop)
        RefreshMeta()
    end

/*
    This action takes a EditTable query and sends it to the database. The EditTable query allows for changes
    such as table renaming, or the adding and modifying of columns in a table. If successful the metadata
    will be updated to reflect any changes.

    Attribute: Parameter edit The query to run
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.EditTable

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    EditTable edit
    db:EditTable(edit)
*/
    action EditTable(EditTable edit)
        SetMeta(edit)
        strategy:EditTable(edit)
        RefreshMeta()
    end

/*
    This action takes a CreateView query and sends it to the database. If successful the metadata
    will be updated to include the new view. Creating a view typically consists of setting a Find 
    query so the other helper function can simplify adding a view. 

    Attribute: Parameter query The query to run
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.CreateView
    use Libraries.Data.Database.Find

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    Find find
    find:SetTable("myDB_table")
    find:AddColumn("id")

    CreateView view
    view:SetQuery(find)
    view:SetName("id_view")

    db:CreateView(view)
*/
    action CreateView(CreateView view)
        SetMeta(view)
        strategy:CreateView(view)
        RefreshMeta()
    end

/*
    This action takes a QueryResult and converts it to a DataFrame. The conversion will try to have the 
    columns of the DataFrame be the same type as returned by the result.

    Attribute: Parameter query The QueryResult to convert. Typically this QueryResult will come from running a Find
    Attribute: Returns Returns a DataFrame containing the results of the query
    Attribute: Example

    use Libraries.Data.Database.Database

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    db:ConvertResultToDataFrame(db:Find("myDB_table"))
*/
    action ConvertResultToDataFrame(QueryResult result) returns DataFrame
        QueryResultToDataFrameConverter converter
        return converter:Convert(result)
    end

/*
    This action runs a find query and returns the result as a DataFrame.

    Attribute: Parameter query The QueryResult to convert. Typically this QueryResult will come from running a Find
    Attribute: Returns Returns a DataFrame containing the results of the query
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.Find
    use Libraries.Compute.Statistics.DataFrame

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    Find find
    find:SetTable("myDB_table")

    DataFrame frame = db:FindAsDataFrame(find)

    output frame:ToText()
*/
    action FindAsDataFrame(Find query) returns DataFrame
        SetMeta(query)
        QueryResult result = strategy:Find(query)
        QueryResultToDataFrameConverter converter
        return converter:Convert(result)
    end

/*
    This action runs a find based on the given parameter and returns the result as a DataFrame.
    This action will return all columns and rows from a database table.

    Attribute: Parameter table The database table to run the query on
    Attribute: Returns Returns a DataFrame containing the results of the query
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Compute.Statistics.DataFrame

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    DataFrame frame = db:FindAsDataFrame("myDB_table")

    output frame:ToText()
*/
    action FindAsDataFrame(text table) returns DataFrame
        QueryResult result = Find(table)
        QueryResultToDataFrameConverter converter
        return converter:Convert(result)
    end

/*
    This action runs a find based on the given parameters and returns the result as a DataFrame.
    This action will return all columns and rows from a database table where the filter expression is true.

    Attribute: Parameter table The database table to run the query on
    Attribute: Parameter filter A filter to that will affect what will be returned by the query
    Attribute: Returns Returns a DataFrame containing the results of the query
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Compute.Statistics.DataFrame

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    DataFrame frame = db:FindAsDataFrame("myDB_table", "roomNumber = 1001")
    output frame:ToText()
*/
    action FindAsDataFrame(text table, text filter) returns DataFrame
        QueryResult result = Find(table, filter)
        QueryResultToDataFrameConverter converter
        return converter:Convert(result)
    end

/*
    This action runs a find based on the given parameters and returns the QueryResult.
    This action will return all columns and rows from a database table.

    Attribute: Parameter table The database table to run the query on
    Attribute: Returns Returns a QueryResult containing the results of the query
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.QueryResult

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    QueryResult result = db:Find("myDB_table")
*/
    action Find(text table) returns QueryResult
        Find find
        find:SetTable(table)
        return Find(find)
    end

/*
    This action runs a find based on the given parameters and returns the QueryResult.
    This action will return all columns and rows from a database table where the filter expression is true.

    Attribute: Parameter table The database table to run the query on
    Attribute: Parameter filter A filter to that will affect what will be returned by the query
    Attribute: Returns Returns a QueryResult containing the results of the query
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.QueryResult

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    QueryResult result = db:Find("myDB_table", "id > 200")
*/
    action Find(text table, text filter) returns QueryResult
        Find find
        find:SetTable(table)
        find:Filter(filter)
        return Find(find)
    end

/*
    This action runs a find based on the given parameters and returns the QueryResult.
    This action will return all columns and rows from a database table that match an expression if one
    is given and are of the column specified.

    Attribute: Parameter columns An array containing the list of columns that will be returned from the result. 
    Attribute: Parameter table The database table to run the query on
    Attribute: Returns Returns a QueryResult containing the results of the query
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.QueryResult
    use Libraries.Containers.Array

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    Array<text> columns
    columns:Add("id")
    columns:Add("roomNumber")
    QueryResult result = db:Find(columns, "myDB_table")
*/
    action Find(Array<text> columns, text table) returns QueryResult
        return Find(columns, table, undefined)
    end

/*
    This action runs a find based on the given parameters and returns the QueryResult.
    This action will return all columns and rows from a database table that match an expression if one
    is given and are of the column specified.

    Attribute: Parameter columns An array containing the list of columns that will be returned from the result. 
    Attribute: Parameter table The database table to run the query on
    Attribute: Parameter filter A filter to that will affect what will be returned by the query
    Attribute: Returns Returns a DataFrame containing the results of the query
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.QueryResult
    use Libraries.Containers.Array

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    Array<text> columns
    columns:Add("id")
    columns:Add("roomNumber")
    QueryResult result = db:Find(columns, "myDB_table", "id > 100")
*/
    action Find(Array<text> columns, text table, text filter) returns QueryResult
        Find find
        i = 0
        repeat columns:GetSize() times
            find:AddColumn(columns:Get(i))
        i = i + 1
        end
        find:SetTable(table)
        if filter not= undefined and filter not= ""
            find:Filter(filter)
        end
        return Find(find)
    end


    /* INTERNAL ACTION FOR JOIN HELPER FUNCTIONS
        Sets the join type and fills out the necessary parts to make a correct Find query
    */
    private action FindJoin(Array<text> columns, text table, text joinedTable, text joinCondition, text filter, integer joinType) returns QueryResult
    /*Join Types
        0 = INNER
        1 = LEFT
        2 = RIGHT
        3 = CROSS
    */
        Find find
        i = 0
        if columns not= undefined
            repeat columns:GetSize() times
                find:AddColumn(columns:Get(i))
            i = i + 1
            end
        end
        find:SetTable(table)
        if joinType = 0
            find:AddInnerJoin(joinedTable, joinCondition)
        elseif joinType = 1
            find:AddLeftJoin(joinedTable, joinCondition)
        elseif joinType = 2
            find:AddRightJoin(joinedTable, joinCondition)
        elseif joinType = 3
            find:AddCrossJoin(joinedTable)
        end
        return Find(find)
    end

    //INNER JOINS

    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set.
        An Inner Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")
    
        QueryResult result = db:FindInnerJoin("Orders", "Customers", "Orders:CustomerID = Customers:CustomerID")        
    */
    action FindInnerJoin(text table, text joinedTable, text joinCondition) returns QueryResult
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, undefined)
    end


    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set.
        An Inner Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")
    
        QueryResult result = db:FindInnerJoin("Orders", "Customers", "Orders:CustomerID = Customers:CustomerID", "OrderNumber = 55")        
    */
    action FindInnerJoin(text table, text joinedTable, text joinCondition, text filter) returns QueryResult
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, filter)
    end


    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set. This action instead of taking
        a condition it takes the name of a column. It is common to join to tables that share a column and only join them if
        values of those columns are equal. This action simplifies writing that specific join condition.
        An Inner Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")
    
        QueryResult result = db:FindInnerJoinUsingColumn("Orders", "Customers", "CustomerID")        
    */
    action FindInnerJoinUsingColumn(text table, text joinedTable, text column) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, undefined)
    end


    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set. This action instead of taking
        a condition it takes the name of a column. It is common to join to tables that share a column and only join them if
        values of those columns are equal. This action simplifies writing that specific join condition.
        An Inner Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")
    
        QueryResult result = db:FindInnerJoinUsingColumn("Orders", "Customers", "CustomerID", "OrderNumber = 55")        
    */
    action FindInnerJoinUsingColumn(text table, text joinedTable, text column, text filter) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, filter)
    end

    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set. This action instead of taking
        a condition it takes the name of a column. It is common to join to tables that share a column and only join them if
        values of those columns are equal. This action simplifies writing that specific join condition.
        An Inner Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
        use Libraries.Containers.Array
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")
    
        Array<text> columns
        columns:Add("OrderID")
        columns:Add("CustomerName")
        QueryResult result = db:FindInnerJoinUsingColumn(columns, "Orders", "Customers", "CustomerID")        
    */
    action FindInnerJoinUsingColumn(Array<text> columns, text table, text joinedTable, text column) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(columns, table, joinedTable, joinCondition, undefined)
    end

    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set. This action instead of taking
        a condition takes the name of a column. It is common to join to tables that share a column and only join them if
        values of those columns are equal. This action simplifies writing that specific join condition.
        An Inner Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
        use Libraries.Containers.Array
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")
    
        Array<text> columns
        columns:Add("OrderID")
        columns:Add("CustomerName")
        QueryResult result = db:FindInnerJoinUsingColumn(columns, "Orders", "Customers", "CustomerID", "OrderNumber = 55")        
    */
    action FindInnerJoinUsingColumn(Array<text> columns, text table, text joinedTable, text column, text filter) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(columns, table, joinedTable, joinCondition, filter)
    end

    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set.
        An Inner Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
        use Libraries.Containers.Array
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")
    
        Array<text> columns
        columns:Add("OrderID")
        columns:Add("CustomerName")
        QueryResult result = db:FindInnerJoin(columns, "Orders", "Customers", "Orders:CustomerID = Customers:CustomerID", "OrderNumber = 55")
    */
    action FindInnerJoin(Array<text> columns, text table, text joinedTable, text joinCondition, text filter) returns QueryResult
        return FindJoin(columns, table, joinedTable, joinCondition, filter, 0)
    end

    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set.
        A Left Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables. But if the condition fails then a new row is still added containing
        all the rows from the first table.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")
    
        QueryResult result = db:FindLeftJoin("Orders", "Customers", "Orders:CustomerID = Customers:CustomerID")        
    */
    action FindLeftJoin(text table, text joinedTable, text joinCondition) returns QueryResult
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, undefined)
    end

    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set.
        A Left Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables. But if the condition fails then a new row is still added containing
        all the rows from the first table.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")
    
        QueryResult result = db:FindLeftJoin("Orders", "Customers", "Orders:CustomerID = Customers:CustomerID", "OrderNumber = 55")        
    */
    action FindLeftJoin(text table, text joinedTable, text joinCondition, text filter) returns QueryResult
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, filter)
    end

    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set. This action instead of taking
        a conditions takes the name of a column. It is common to join to tables that share a column and only join them if
        values of those columns are equal. This action simplifies writing that specific join condition.
        A Left Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables. But if the condition fails then a new row is still added containing
        all the rows from the first table.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")
    
        QueryResult result = db:FindLeftJoinUsingColumn("Orders", "Customers", "CustomerID")        
    */
    action FindLeftJoinUsingColumn(text table, text joinedTable, text column) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, undefined)
    end

    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set. This action instead of taking
        a conditions takes the name of a column. It is common to join to tables that share a column and only join them if
        values of those columns are equal. This action simplifies writing that specific join condition.
        A Left Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables. But if the condition fails then a new row is still added containing
        all the rows from the first table.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")
    
        QueryResult result = db:FindLeftJoinUsingColumn("Orders", "Customers", "CustomerID", "OrderNumber = 55")        
    */
    action FindLeftJoinUsingColumn(text table, text joinedTable, text column, text filter) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, filter)
    end


    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set. This action instead of taking
        a conditions takes the name of a column. It is common to join to tables that share a column and only join them if
        values of those columns are equal. This action simplifies writing that specific join condition.
        A Left Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables. But if the condition fails then a new row is still added containing
        all the rows from the first table.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")

        Array<text> columns
        columns:Add("OrderID")
        columns:Add("CustomerName")
        QueryResult result = db:FindLeftJoinUsingColumn(columns, "Orders", "Customers", "CustomerID")        
    */
    action FindLeftJoinUsingColumn(Array<text> columns, text table, text joinedTable, text column) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(columns, table, joinedTable, joinCondition, undefined)
    end

    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set. This action instead of taking
        a conditions takes the name of a column. It is common to join to tables that share a column and only join them if
        values of those columns are equal. This action simplifies writing that specific join condition.
        A Left Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables. But if the condition fails then a new row is still added containing
        all the rows from the first table.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")
    
        Array<text> columns
        columns:Add("OrderID")
        columns:Add("CustomerName")
        QueryResult result = db:FindLeftJoinUsingColumn(columns, "Orders", "Customers", "CustomerID", "OrderNumber = 55")        
    */
    action FindLeftJoinUsingColumn(Array<text> columns, text table, text joinedTable, text column, text filter) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(columns, table, joinedTable, joinCondition, filter)
    end


    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set. 
        A Left Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables. But if the condition fails then a new row is still added containing
        all the rows from the first table.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")
    
        Array<text> columns
        columns:Add("OrderID")
        columns:Add("CustomerName")
        QueryResult result = db:FindLeftJoin(columns, "Orders", "Customers", "Orders:CustomerID = Customers:CustomerID", "OrderNumber = 55")        
    */
    action FindLeftJoin(Array<text> columns, text table, text joinedTable, text joinCondition, text filter) returns QueryResult
        return FindJoin(columns, table, joinedTable, joinCondition, filter, 1)
    end

    // RIGHT JOINS

    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set.
        A Right Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables. But if the condition fails then a new row is still added containing
        all the rows from the second table.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")
    
        QueryResult result = db:FindRightJoin("Orders", "Customers", "Orders:CustomerID = Customers:CustomerID")        
    */
    action FindRightJoin(text table, text joinedTable, text joinCondition) returns QueryResult
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, undefined)
    end

    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set.
        A Right Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables. But if the condition fails then a new row is still added containing
        all the rows from the second table.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")
    
        QueryResult result = db:FindRightJoin("Orders", "Customers", "Orders:CustomerID = Customers:CustomerID", "OrderNumber = 55")        
    */
    action FindRightJoin(text table, text joinedTable, text joinCondition, text filter) returns QueryResult
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, filter)
    end


    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set. This action instead of taking
        a conditions takes the name of a column. It is common to join to tables that share a column and only join them if
        values of those columns are equal. This action simplifies writing that specific join condition.
        A Right Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables. But if the condition fails then a new row is still added containing
        all the rows from the second table.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult

        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")

        QueryResult result = db:FindRightJoinUsingColumn("Orders", "Customers", "CustomerID")        
    */
    action FindRightJoinUsingColumn(text table, text joinedTable, text column) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, undefined)
    end

    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set. This action instead of taking
        a conditions takes the name of a column. It is common to join to tables that share a column and only join them if
        values of those columns are equal. This action simplifies writing that specific join condition.
        A Right Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables. But if the condition fails then a new row is still added containing
        all the rows from the second table.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")
    
        QueryResult result = db:FindRightJoinUsingColumn("Orders", "Customers", "CustomerID", "OrderNumber = 55")        
    */
    action FindRightJoinUsingColumn(text table, text joinedTable, text column, text filter) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(undefined, table, joinedTable, joinCondition, filter)
    end

    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set. This action instead of taking
        a conditions takes the name of a column. It is common to join to tables that share a column and only join them if
        values of those columns are equal. This action simplifies writing that specific join condition.
        A Right Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables. But if the condition fails then a new row is still added containing
        all the rows from the second table.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")

        Array<text> columns
        columns:Add("OrderID")
        columns:Add("CustomerName")
        QueryResult result = db:FindRightJoinUsingColumn(columns, "Orders", "Customers", "CustomerID")        
    */
    action FindRightJoinUsingColumn(Array<text> columns, text table, text joinedTable, text column) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(columns, table, joinedTable, joinCondition, undefined)
    end

    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set. This action instead of taking
        a conditions takes the name of a column. It is common to join to tables that share a column and only join them if
        values of those columns are equal. This action simplifies writing that specific join condition.
        A Right Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables. But if the condition fails then a new row is still added containing
        all the rows from the second table.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")

        Array<text> columns
        columns:Add("OrderID")
        columns:Add("CustomerName")
        QueryResult result = db:FindRightJoinUsingColumn("Orders", "Customers", "CustomerID", "OrderNumber = 55")        
    */
    action FindRightJoinUsingColumn(Array<text> columns, text table, text joinedTable, text column, text filter) returns QueryResult
        text joinCondition = table+":"+column+" = "+joinedTable+":"+column
        return FindInnerJoin(columns, table, joinedTable, joinCondition, filter)
    end

    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set.
        A Right Join compares every row from the first table to every row on the second table. If
        the values from the rows satisfy the condition then a new row is added containing the combined
        columns from both tables. But if the condition fails then a new row is still added containing
        all the rows from the second table.

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult
    
        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")

        Array<text> columns
        columns:Add("OrderID")
        columns:Add("CustomerName")
        QueryResult result = db:FindRightJoin(columns, "Orders", "Customers", ""Orders:CustomerID = Customers:CustomerID"", "OrderNumber = 55")        
    */
    action FindRightJoin(Array<text> columns, text table, text joinedTable, text joinCondition, text filter) returns QueryResult
        return FindJoin(columns, table, joinedTable, joinCondition, filter, 2)
    end

    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set.
        A Cross Join is different from the other joins in that there is no join condition. A Cross Join
        will return the Cartesian product of rows from the two tables. In other words, every row from the
        first table will be combined with every row from the second table and that will be returned. 

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult

        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")

        QueryResult result = db:FindCrossJoin("Products", "Stores")        
    */
    action FindCrossJoin(text table, text joinedTable) returns QueryResult
        return FindInnerJoin(undefined, table, joinedTable, undefined, undefined)
    end

    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set.
        A Cross Join is different from the other joins in that there is no join condition. A Cross Join
        will return the Cartesian product of rows from the two tables. In other words, every row from the
        first table will be combined with every row from the second table and that will be returned. 

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult

        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")


        QueryResult result = db:FindCrossJoin("Products", "Stores", "price >= 4.99")        
    */
    action FindCrossJoin(text table, text joinedTable, text filter) returns QueryResult
        return FindInnerJoin(undefined, table, joinedTable, undefined, filter)
    end

    /* 
        This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables
        and the type of join determines what columns will appear in the final result set.
        A Cross Join is different from the other joins in that there is no join condition. A Cross Join
        will return the Cartesian product of rows from the two tables. In other words, every row from the
        first table will be combined with every row from the second table and that will be returned. 

        use Libraries.Data.Database.Database
        use Libraries.Data.Database.QueryResult

        Database db
        db:Connect("localhost","myDB","root","superSecretPassword")

        Array<text> columns
        columns:Add("StoreName")
        columns:Add("ProductName")
        QueryResult result = db:FindCrossJoin(columns, "Products", "Stores", "price >= 4.99")        
    */
    action FindCrossJoin(Array<text> columns, text table, text joinedTable, text filter) returns QueryResult
        return FindJoin(columns, table, joinedTable, undefined, filter, 4)
    end


/*
    This action runs a delete query where rows are removed from a table if the columns of the row make the filter true.

    Attribute: Parameter table The database table to run the query on
    Attribute: Parameter filter A filter to that will affect what will be deleted
    Attribute: Returns Returns the number of rows affected by this delete
    Attribute: Example

    use Libraries.Data.Database.Database

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    integer rowsAffected = db:Delete("myDB_table", "id = 100")
*/
    action Delete(text table, text filter) returns integer
        Delete delete
        delete:SetTable(table)
        delete:Filter(filter)
        return Delete(delete)
    end

/*
    This action will create a view on the database from the passed Find query.

    Attribute: Parameter query The find query to build a view from
    Attribute: Example

    use Libraries.Data.Database.Database
    use Libraries.Data.Database.Find

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    Find find
    find:SetTable("myDB_table")
    find:AddColumn("id")

    db:CreateView(findQuery, "id_view")
*/
    action CreateView(Find query, text name)
        CreateView view
        view:SetName(name)
        view:SetQuery(query)
        CreateView(view)
    end

/*
    This action renames a table on the database.

    Attribute: Parameter table The table to rename
    Attribute: Parameter newName The new name to give to the table
    Attribute: Example

    use Libraries.Data.Database.Database

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    db:RenameTable("myDB_table", "tableWithNewName")
*/
    action RenameTable(text table, text newName)
        EditTable edit
        edit:SetTable(table)
        edit:RenameTable(newName)
        EditTable(edit)
    end

/*
    This action removes a table on the database. The table will no longer appear on the database
    along with any data that was on it.

    Attribute: Parameter table The table to remove
    Attribute: Example

    use Libraries.Data.Database.Database

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    db:RemoveTable("myDB_table")
*/
    action RemoveTable(text table)
        DropTable drop
        drop:SetTable(table)
        DropTable(drop)
    end

/*
    This action removes all rows in a table. The table will still appear in the database but all
    rows of data will be gone.

    Attribute: Parameter table The table to empty
    Attribute: Example

    use Libraries.Data.Database.Database

    Database db
    db:Connect("localhost","myDB","root","superSecretPassword")

    db:EmptyTable("myDB_table")
*/
    action EmptyTable(text table)
        DropTable drop
        drop:SetTable(table)
        drop:SetEmptyOnly(true)
        DropTable(drop)
    end


end