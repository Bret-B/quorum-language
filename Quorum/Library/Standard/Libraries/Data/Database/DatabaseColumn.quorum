package Libraries.Data.Database
use Libraries.Language.Compile.Symbol.Type

/*
    The DatabaseColumn class contains information about a column in a database table.
    This class is useful when checking the type of a column which is used interally in the system
    for type checking filter expressions. 
 
    Attribute: Example

use Libraries.Data.Database.DatabaseMetaData
use Libraries.Data.Database.DatabaseTable
use Libraries.Data.Database.DatabaseColumn

Database database
database:Connect("localhost", "myDatabase", "user", "SuperSecret456")

DatabaseMetaData meta = database:GetDatabaseMetaData()
DatabaseTable table = meta:GetTable("myDB")
DatabaseColumn column = table:GetColumn("id")
output column:GetName()

*/

class DatabaseColumn
    text name = ""
    integer type = -1
    integer columnSize = -1
    integer decimalDigits = -1
    boolean isNullable = false
    boolean isAutoIncrement = false

    /* This action returns the name of this column as returned by the database
    */
    action GetName returns text
        return name
    end

    /* This action sets the name of this column. This is used by the system when
        the metadata is grabbed. Not meant to be used the user.
    */
    action SetName(text name)
        me:name = name
    end

    /* This action returns the raw integer returned by the database, which indicates
        the type recognized by the system.
    */
    action GetRawType returns integer
        return type
    end

    /* This action returns the type of this column based on the raw type. Used internally
        for type checking.
    */
    action GetType returns Type
        DatabaseTypeConstants constants
        
        if constants:IsInteger(type)
            Type result
            result:SetToInteger()
            return result
        elseif constants:IsNumber(type)
            Type result
            result:SetToNumber()
            return result
        elseif constants:IsText(type)
            Type result
            result:SetToText()
            return result
        elseif constants:IsBoolean(type)
            Type result
            result:SetToBoolean()
            return result
        elseif constants:IsUndefined(type)
            Type result
            result:SetToUndefined()
            return result
        end 

        return undefined
    end

end