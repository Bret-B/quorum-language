package Libraries.Data.Database

    /*
        The EditTable query represents the ALTER TABLE command of the SQL (Structured Query Language) language. 
        This query allows for table manipulations by adding, dropping, or modify columns.

        Attribute: Example

use Libraries.Data.Database.Database
use Libraries.Data.Database.EditTable

Database database
database:Connect("localhost", "mydatabase", "user", "SuperSecret456")

EditTable query
query:SetTable("tasks")
query:AddColumn("dueDate", "date")

database:EditTable(query)

    */
class EditTable is Query
    private constant text NO_TABLE_ERROR = "Must specify table to edit"
    private constant text TABLE_NOT_FOUND = "Could not find table '?tablename?' in the database"
    private constant text EMPTY_QUERY = "You must specify how you intend to edit the table"
    private constant text VIEW_ERROR = "The chosen operation cannot be performed on a view"

    private constant integer ADD = 0
    private constant integer DROP = 1
    private constant integer MODIFY = 2
    private constant integer RENAME = 3
    private constant integer AUTO_INCREMENT = 4

    private integer modifier = -1
    private text column = ""
    private text type = ""
    private text name = ""
    private integer newIncrement = 0

    /*
        This action adds a column to the table.

        Attribute: Parameter column The name of the column to add
        Attribute: Parameter dataType The associated data type of the column to add

        Attribute: Example

        use Libraries.Data.Database.EditTable
        
        EditTable query
        query:SetTable("tasks")
        query:AddColumn("dueDate", "date")

    */
    action AddColumn(text column, text dataType)
        me:column = column
        me:type = dataType
        me:modifier = ADD
    end

    /*
        This action drops a column from a table.

        Attribute: Paramter column The name of the column to drop

        Attribute: Example

        use Libraries.Data.Database.EditTable
        
        EditTable query
        query:SetTable("tasks")
        query:DropColumn("dueDate")
    */
    action DropColumn(text column)
        me:column = column
        me:type = ""
        me:modifier = DROP
    end

    /*
        This action allows the type of a column to be changed.

        Attribute: Parameter column The name of the column to modify
        Attribute: Parameter dataType The new data type the column will have after the modify

        Attribute: Example

        use Libraries.Data.Database.EditTable
        
        EditTable query
        query:SetTable("tasks")
        query:ModifyColumn("startDate", "datetime")
    */
    action ModifyColumn(text column, text dataType)
        me:column = column
        me:type = dataType
        me:modifier = MODIFY
    end

    /*
        This action renames a table in the database

        Attribute: Parameter newName The new name to give to a table

        Attribute: Example

        use Libraries.Data.Database.EditTable
        
        EditTable query
        query:SetTable("tasks")
        query:RenameTable("unfinished_tasks")
    */
    action RenameTable(text newName)
        me:name = newName
        me:modifier = RENAME
    end

    /*
        This action allows the auto increment value to be changed. The auto increment works by incrementing and adding a value
        to a row each time a new row is inserted. If the value is changed then on the next insert the incremented value will start
        at the one set here.

        Attribute: Parameter newStart The integer where auto increment will start at on the next insert

        Attribute: Example

        use Libraries.Data.Database.EditTable
        
        EditTable query
        query:SetTable("tasks")
        query:AlterAutoIncrement(1000)
    */
    action AlterAutoIncrement(integer newStart)
        me:column = ""
        me:newIncrement = newStart
        me:modifier = AUTO_INCREMENT
    end

    /*
        This action returns the name of the column associated with this query.

        Attribute: Returns The name of the column that will be affected or added by this query

        Attribute: Example

        use Libraries.Data.Database.AlterTable
    */
    action GetColumn returns text
        return column
    end

    /*
        This action returns the query as text in Structured Query Language (SQL).
        Not intended to be used directly by the user, this is more for internals 
        of the API to make calls to the database
    */
    action ConvertToStructuredQueryLanguage returns text
        text query = "ALTER TABLE "
        text table = GetTable()

        if table = undefined or table = ""
            alert(NO_TABLE_ERROR)
        end

        DatabaseMetaData meta = GetDatabaseMetaData()
        DatabaseTable tableToAlter = meta:GetTable(table)
        if tableToAlter = undefined
            alert(TABLE_NOT_FOUND:Replace("?tablename?",table))
        end
        boolean isView = tableToAlter:IsView()

        query = query + table

        if modifier = ADD
            if isView alert(VIEW_ERROR) end
            query = query + " ADD " + column + " " + type
        elseif modifier = DROP
            if isView alert(VIEW_ERROR) end
            query = query + " DROP COLUMN " + column
        elseif modifier = MODIFY
            if isView alert(VIEW_ERROR) end
            //MySQL syntax
            query = query + " MODIFY COLUMN " + column + " " + type
        elseif modifier = RENAME
            if isView
                // the RENAME TABLE query must be used if it is a view
                query = "RENAME TABLE " + table + " TO " + name
            else
                query = query + " RENAME TO " + name
            end
        elseif modifier = AUTO_INCREMENT
            if isView alert(VIEW_ERROR) end
            query = query + " AUTO_INCREMENT=" + newIncrement
        else
            alert(EMPTY_QUERY)
        end

        return query
    end

end