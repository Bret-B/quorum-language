package Libraries.Data.Database
use Libraries.Containers.HashTable
use Libraries.Containers.Array

class CreateTable is Query
    constant text NAME_ERROR = "Cannot create a column with an empty or undefined name."
    HashTable<text, text> columns

    /* This array stores the keys in order of insertion. */
    Array<text> keys
    /*
        This action adds a text column to the table. If the value is less than 0, this throws an error. 
        If the value is greater than 0 and less than 65,535, a VARCHAR is created on the database. 
        If the value is greater than this, a LONGTEXT is created, which has a maximum value of 4,294,967,295. 
        If the version of this action is called with fixed = true, then the integer can have a maximum size of 255 
        characters and the text is always of fixed length.

        Attribute: Parameter name the name of the column
        Attribute: Parameter size the name of the column

        Attribute: Example
        use Libraries.Data.Database.CreateTable

        CreateTable mine
        mine:AddTextColumn("LastName", 400)
        
    */
    action AddTextColumn(text name, integer size)
        AddTextColumn(name, size, false)
    end

    /*
        This action adds a text column to the table. If the value is less than 0, this throws an error. 
        If the value is greater than 0 and less than 65,535, a VARCHAR is created on the database. 
        If the value is greater than this, a LONGTEXT is created, which has a maximum value of 4,294,967,295. 
        If the version of this action is called with fixed = true, then the integer can have a maximum size of 255 
        characters and the text is always of fixed length.

        Attribute: Parameter name the name of the column
        Attribute: Parameter size the name of the column

        Attribute: Example
        use Libraries.Data.Database.CreateTable

        CreateTable mine
        mine:AddTextColumn("LastName", 255, true)
        
    */
    action AddTextColumn(text name, integer size, boolean fixed)
        CheckName(name)

        if columns:HasKey(name)
            alert("The name '" + name + "' is already being prepared for entry into the database.")
        end

        if fixed
            if size > 255 or size < 0
                alert("Cannot create a fixed size text column with a size greater than 255 or less than 0 characters.")
            end

            text result = name + " CHAR(" + size + ")" 
            keys:Add(name)
            columns:Add(name, result)
        else
            text result = ""
            if size < 0
                alert("Cannot create a text column with a size less than 0 characters.")
            elseif size > 0 and size <= 65535
                 result = name + " VARCHAR(" + size + ")" 
            elseif size > 65535
                result = name + " MEDIUMTEXT" 
            elseif size > 16777215
                result = name + " LONGTEXT" 
            end
            
            keys:Add(name)
            columns:Add(name, result)
        end
    end

    /*
        This action adds a 32 bit integer column to the table. 

        Attribute: Parameter name the name of the column

        Attribute: Example
        use Libraries.Data.Database.CreateTable

        CreateTable mine
        mine:AddIntegerColumn("id")
        
    */
    action AddIntegerColumn(text name)
        CheckName(name)

        text result = name + " INTEGER"
        
        keys:Add(name)
        columns:Add(name, result)
    end

    /*
        This action adds a 32 bit integer column to the table. 

        Attribute: Parameter name the name of the column

        Attribute: Example
        use Libraries.Data.Database.CreateTable

        CreateTable mine
        mine:AddIntegerColumn("id")
        
    */
    action AddDateTimeColumn(text name)
        CheckName(name)

        text result = name + " DATETIME"
        
        keys:Add(name)
        columns:Add(name, result)
    end

    private action CheckName(text name)
        if name = undefined or name:IsEmpty()
            alert(NAME_ERROR)
        end
    end
    /*
        No matter the data type, this action removes the previously added column from the create query.

        Attribute: Parameter name the name of the column

        Attribute: Example
        use Libraries.Data.Database.CreateTable

        CreateTable mine
        mine:RemoveColumn("LastName")
    */
    action RemoveColumn(text name) returns text
        if columns:HasKey(name)
            keys:Remove(name)
            return columns:RemoveKey(name)
        end

        return undefined
    end

    action ConvertToStructuredQueryLanguage returns text
        text table = GetTable()
        if table = undefined or table:IsEmpty()
            alert(NAME_ERROR)
        end

        text result = "CREATE TABLE " + table + "(" + table:GetLineFeed()
        i = 0
        repeat while i < keys:GetSize()
            text key = keys:Get(i)
            text value = columns:GetValue(key)
            result = result + value

            if i = keys:GetSize() - 1
                result = result + table:GetLineFeed() + ");"
            else
                result = result + "," + table:GetLineFeed()
            end
            i = i + 1
        end

        return result
    end
end