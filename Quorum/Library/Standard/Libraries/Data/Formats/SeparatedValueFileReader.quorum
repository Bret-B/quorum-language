package Libraries.Data.Formats

use Libraries.Containers.Array
use Libraries.System.FileReader

class SeparatedValueFileReader is FileReader
    boolean isSetup = false
    text total = ""
    integer current = 0
    Array<text> lines

    action ReadLine() returns text
        if not isSetup
            Setup()
        end
        
        value = lines:Get(current)
        current = current + 1
        return value
    end

    action ReadLines() returns Array<text>
        if not isSetup
            Setup()
        end
        return lines
    end

    action IsAtEndOfFile() returns boolean
        if not isSetup
            Setup()
        end
        if current < lines:GetSize()
            return false
        else
            return true
        end
    end

    private action Setup
        isSetup = true
        total = parent:FileReader:Read()
        BreakIntoLines()
    end

    private action BreakIntoLines
        size = total:GetSize()
        Array<text> lines
        isInDoubleQuote = false
        myTotal = total //temporary fix to possible compiler bug with using autoboxed primitives in fields.
        
        line = ""
        dq = myTotal:GetDoubleQuote()
        text lineFeed = myTotal:GetLineFeed()
        text newline = myTotal:GetCarriageReturn()
        
        integer totalSize = myTotal:GetSize()
        i = 0
        repeat while i < totalSize
            char = myTotal:GetCharacter(i)
            if char = dq
                isInDoubleQuote = not isInDoubleQuote
            end

            //Check to see if it's a carriage return, a line feed, or a carriage return line feed. Seems like not all of 
            //the CSV files out there actually follow a reasonable spec, so we have to do stuff like this.
            if (char = lineFeed and not isInDoubleQuote) or (char = newline and not isInDoubleQuote)
                or (i = (size - 1))

                if char = newline and i + 1 < (size - 1) and myTotal:GetCharacter(i + 1) = lineFeed
                    //we need to skip a character, because this is a carriage return, line feed
                    i = i + 1
                end

                if i = (size - 1) //don't miss the last character
                    line = line + char
                end
                lines:Add(line)
                line = ""
            else 
                if char not= lineFeed and char not= newline
                    line = line + char
                else 
                    line = line + " "
                end
            end

            i = i + 1
        end

        me:lines = lines
    end
end