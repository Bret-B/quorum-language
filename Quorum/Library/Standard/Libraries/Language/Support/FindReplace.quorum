package Libraries.Language.Support

use Libraries.Containers.Support.Pair
use Libraries.Containers.Array

class FindReplace
    text value  = ""

    action Main
        check
            Array<Pair<integer>> array = Find("textValue", true, true)
            output "Total size: " + array:GetSize()
            i = 0
            repeat while i < array:GetSize()
                Pair<integer> pair = array:Get(i)
                output pair:GetFirstValue() + ", " + pair:GetSecondValue()
                i = i + 1
            end
        detect e
            e:OutputStackTrace()
        end
    end

    action SetText(text value)
        me:value = value
    end

    action GetText returns text
        return value
    end

    private action IsWholeWordCharacter(text value) returns boolean
        text break = "
"
        if (value = " ") or (value = ".") or (value = "/")
            or (value = "*") or (value = "(") or (value = ")") or (value = "+") 
            or (value = "-") or (value = ">") or (value = "<") or (value = "=") 
            or (value = break) or (value = ",") or (value = ":")
            return true
        end
        return false
    end

    action Find(text find) returns Array<Pair<integer>>
        return Find(find, false, false)
    end

    action Find(text find, boolean wholeWord, boolean matchCase) returns Array<Pair<integer>> //Hello
        Array<Pair<integer>> array
        if find = undefined or find:IsEmpty()
            return array
        end

        text textValue = GetText()
        integer findIndex = 0
        integer findSize = find:GetSize()       //size of the word we are searching for
        integer endIndex = textValue:GetSize()
        text previousCharacter = ""
        text nextCharacter = ""

        repeat while (findIndex >= 0) and ((findIndex + findSize) < endIndex + 1)   //start from beginning of text and go through til the end
            Pair<integer> indices
            text sub = textValue:GetSubtext(findIndex, (findIndex + findSize))
            
            if wholeWord
                startIndex = findIndex
                previousIndex = startIndex - 1
                nextIndex = startIndex + findSize
                if previousIndex < 0
                    previousCharacter = " "
                else
                    previousCharacter = textValue:GetCharacter(previousIndex)
                end
                if nextIndex > textValue:GetSize() - 1
                    nextCharacter = " "
                else
                    nextCharacter = textValue:GetCharacter(nextIndex)
                end

                boolean prevBool = IsWholeWordCharacter(previousCharacter)
                boolean nextBool = IsWholeWordCharacter(nextCharacter)
                if matchCase and find:Equals(sub) and prevBool and nextBool
                    indices:Set(findIndex, (findIndex + (findSize - 1)))
                    array:Add(indices)
                    findIndex = findIndex + findSize
                elseif not matchCase and find:EqualsIgnoringCase(sub) and prevBool and nextBool
                    indices:Set(findIndex, (findIndex + (findSize - 1)))
                    array:Add(indices)
                    findIndex = findIndex + findSize
                else
                    findIndex = findIndex + 1
                end

            elseif matchCase and not wholeWord and find:Equals(sub)
                indices:Set(findIndex, (findIndex + (findSize - 1)))
                array:Add(indices)
                findIndex = findIndex + findSize
            elseif not matchCase and not wholeWord and find:EqualsIgnoringCase(sub)
                indices:Set(findIndex, (findIndex + (findSize - 1)))
                array:Add(indices)
                findIndex = findIndex + findSize
            else
                findIndex = findIndex + 1
            end
        end

        return array
    end
end