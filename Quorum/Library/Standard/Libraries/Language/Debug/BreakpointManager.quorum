package Libraries.Language.Debug
use Libraries.System.File
use Libraries.Containers.HashTable
use Libraries.Containers.Iterator
use Libraries.Containers.Array

class BreakpointManager
    HashTable<text, HashTable<integer, Breakpoint>> breakpoints
    Array<BreakpointListener> breakpointListeners
    Array<Breakpoint> bpCache

    action Add(BreakpointListener listener)
        if listener = undefined
            return now
        end
        breakpointListeners:Add(listener)
    end

    action Remove(BreakpointListener listener)
        if listener = undefined
            return now
        end
        breakpointListeners:Remove(listener)
    end

    action GetListeners returns Iterator<BreakpointListener>
        return breakpointListeners:GetIterator()
    end
    
    action Rehash(text path)
        HashTable<integer, Breakpoint> points = breakpoints:GetValue(path)
        
        if points not= undefined
            Iterator<Breakpoint> iterator = points:GetValueIterator()
            repeat while iterator:HasNext()
                Breakpoint bp = iterator:Next()
                bpCache:Add(bp)
            end

            points:Empty()
            i = 0
            repeat while i < bpCache:GetSize()
                Breakpoint value = bpCache:Get(i)
                points:Add(value:GetLine(), value)
                i = i + 1
            end

            bpCache:Empty()
        end

        BreakpointEvent event
        event:SetPath(path)
        event:SetRehashEvent(true)
        FireEvent(event)
    end

    action GetBreakpoints returns Iterator<Breakpoint>
        Array<Breakpoint> bps
        Iterator<text> iterator = breakpoints:GetKeyIterator()
        repeat while iterator:HasNext()
            text value = iterator:Next()
            HashTable<integer,Breakpoint> lines = breakpoints:GetValue(value)
            Iterator<Breakpoint> points = lines:GetValueIterator()
            repeat while points:HasNext()
                Breakpoint bp = points:Next()
                bps:Add(bp)
            end
        end
        return bps:GetIterator()
    end

    action ToggleBreakpoint(Breakpoint point)
        File file = point:GetFile()
        integer line = point:GetLine()
        text path = file:GetAbsolutePath()
        BreakpointEvent event
        event:SetBreakpoint(point)
        if breakpoints:HasKey(path)
            HashTable<integer, Breakpoint> lines = breakpoints:GetValue(path)
            if lines:HasKey(line)
                lines:RemoveKey(line)

                if lines:IsEmpty()
                    breakpoints:RemoveKey(path)
                end
                event:SetIsAdded(false)
            else 
                lines:Add(line, point)
                event:SetIsAdded(true)
            end
        else 
            HashTable<integer, Breakpoint> lines
            lines:Add(line, point)
            breakpoints:Add(path, lines)
            event:SetIsAdded(true)
        end

        FireEvent(event)
    end

    action ToggleBreakpoint(File file, integer line)
        Breakpoint point
        point:SetLine(line)
        point:SetFile(file)
        ToggleBreakpoint(point)
    end

    action GetBreakpoints(text path) returns Iterator<Breakpoint>
        HashTable<integer, Breakpoint> points = breakpoints:GetValue(path)
        if points = undefined
            Array<Breakpoint> bps
            return bps:GetIterator()
        end

        Iterator<Breakpoint> iterator = points:GetValueIterator()
        return iterator
    end

    action GetBreakpoint(text path, integer line) returns Breakpoint
        HashTable<integer, Breakpoint> points = breakpoints:GetValue(path)
        if points = undefined
            return undefined
        end

        //undefined if it doesn't exist
        Breakpoint point = points:GetValue(line)
        return point
    end

    action FireEvent(BreakpointEvent event)
        i = 0
        repeat while i < breakpointListeners:GetSize()
            BreakpointListener listener = breakpointListeners:Get(i)
            listener:ToggledBreakpoint(event)
            i = i + 1
        end
    end
end