package Libraries.Language.Compile
use Libraries.Language.Compile.Translate.ActionCallOpcode
use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Symbol.Variable
use Libraries.Language.Compile.Context.ActionCallContext
use Libraries.Containers.Stack
use Libraries.Language.Compile.Translate.QuorumOpcode
use Libraries.Language.Compile.Symbol.Class
use Libraries.Language.Compile.Symbol.Action
use Libraries.Language.Compile.Symbol.Block
use Libraries.Language.Compile.Context.VariableFunctionCallContext
use Libraries.Language.Compile.Context.UndefinedContext
use Libraries.Language.Compile.Context.CastContext
use Libraries.Language.Compile.Context.MeContext
use Libraries.Language.Compile.Context.TextContext
use Libraries.Language.Compile.Context.BooleanContext
use Libraries.Language.Compile.Context.MultiplicationContext
use Libraries.Language.Compile.Context.AndOrContext
use Libraries.Language.Compile.Context.IntegerContext
use Libraries.Language.Compile.Context.NumberContext
use Libraries.Language.Compile.Symbol.TypeCheckResult
use Libraries.Language.Compile.Symbol.TypeChecker
use Libraries.Language.Compile.Symbol.Operation
use Libraries.Containers.Array
use Libraries.Language.Compile.Context.ParseContext
use Libraries.Language.Compile.Symbol.ActionCall
use Libraries.Language.Compile.Symbol.ActionCallResolution

/*
    The codeCompletionListener is a QuorumSourceListener designed to read
    expressions for code completion. It processes a limited subset of the language
    on a per line basis, notably expressions, and places an opcode on the opcode 
    stack of a particular type. This type is the type being requested for code completion
    information.

    Attribute: Author Andreas Stefik
*/
class CodeCompletionListener is QuorumSourceListener
    Stack<QuorumOpcode> opcodeStack
    Stack<Type> typeStack
    CodeCompletionRequest request = undefined
    boolean canCodeComplete = false
    Class clazz = undefined
    Action method = undefined
    Block block = undefined
    text currentActionName = ""
    Class currentClass = undefined
    boolean hasError = false
    boolean doTypeChecking = false

    action ExitActionCall(ActionCallContext context)
        if not context:isActionCall
            ActionCallOpcode actionCall
            actionCall:SetLocation(context:GetLocation())

            //get the name of the variable
            text name = context:name

            if block not= undefined
                Variable variable = block:GetVariable(name)
                if variable not= undefined
                    request:variable = variable
                    Type type = variable:GetType()
                    actionCall:SetType(type)
                    actionCall:SetIsActionCall(false)
                    canCodeComplete = true
                    opcodeStack:Push(actionCall)
                end
            end
        else
            text name = context:name
            if currentClass not= undefined

                //for now, only do this for items with no parameters. 
                text key = name
                if context:expressionList = undefined or context:expressionList:IsEmpty()
                    //attempt to construct the static key from any parameters
                    Action act = currentClass:GetVirtualAction(name)
                    if act not= undefined
                        Type type = act:GetReturnType()
                        if type not= undefined
                            typeStack:Push(type)
                        end
                    end
                elseif IsChaining() //if the expression list is not empty and we are type checking, try to find the right action. If one
                     //does not exist, then empty the type stack and say we cannot code complete
                    Array<ParseContext> contexts = context:expressionList:contexts
                    if contexts = undefined or contexts:IsEmpty() //should not happen because of the above, but maybe there's a crazy case I'm not thinking of
                        typeStack:Empty()
                    end

                    //do the types match the expression list? If not, there's a semantic analysis issue at runtime
                    //most likely, we are not yet supporting some feature of Quorum the user is using, but that hasn't made it 
                    //it into this implementation (e.g., casting, some operator)
                    if typeStack:GetSize() not=contexts:GetSize() 
                        typeStack:Empty()
                    end

                    Array<Type> params
                    i = 0
                    repeat while i < typeStack:GetSize()
                        params:Add(undefined)
                        i = i + 1
                    end
                    i = typeStack:GetSize() - 1
                    repeat while not typeStack:IsEmpty()
                        params:Set(i, typeStack:Pop())
                        i = i - 1
                    end
                    ActionCall call
                    call:name = name
                    call:actualParameters = params
                    
                    ActionCallResolution resolve = currentClass:ResolveAction(call)

                    integer a = 5
                else 
                    typeStack:Empty()
                end
            end
        end
    end

    private action IsChaining returns boolean
        return doTypeChecking and not hasError and GetTypeChecker() not= undefined
    end

    action ExitNumber(NumberContext context) 
        if IsChaining() return now end
        Type type
        type:SetIsConstant(true)
        type:SetNumberConstant(context:value)
        typeStack:Push(type)
    end

    action ExitInteger(IntegerContext context) 
        if IsChaining() return now end
        Type type
        type:SetIsConstant(true)
        type:SetIntegerConstant(context:value)
        typeStack:Push(type)
    end

    action ExitOr(AndOrContext context)
        if IsChaining() return now end
        DoAndOr(context)
    end

    action ExitAnd(AndOrContext context) 
        if IsChaining() return now end
        DoAndOr(context)
    end

    action DoAndOr(AndOrContext context)
        if IsChaining() return now end
        TypeChecker checker = GetTypeChecker()
        Type right = typeStack:Pop()
        Type left = typeStack:Pop()
        Operation op
        if context:isAnd
            op:SetOperation(op:AND)
        else 
            op:SetOperation(op:OR)
        end

        if left = undefined or right = undefined
            return now //An error has already been issued.
        end

        TypeCheckResult result = checker:Check(left, right, op)
        CompilerError error = result:GetCompilerError(context:GetLocation())
        if error not= undefined
            hasError = true
            return now
        end

        Type type = result:result
        typeStack:Push(type)
    end

    action ExitMultiplication(MultiplicationContext context) 
        if IsChaining() return now end
        TypeChecker checker = GetTypeChecker()
        Type right = typeStack:Pop()
        Type left = typeStack:Pop()
        Operation op
        if context:isDivide
            op:SetOperation(op:DIVIDE)
        elseif context:isMultiply
            op:SetOperation(op:TIMES)
        else
            op:SetOperation(op:MODULUS)
        end

        if left = undefined or right = undefined
            return now //An error has already been issued.
        end

        TypeCheckResult result = checker:Check(left, right, op)
        CompilerError error = result:GetCompilerError(context:GetLocation())
        if error not= undefined
            hasError = true
            return now
        end

        Type type = result:result
        typeStack:Push(type)
    end

    action ExitBoolean(BooleanContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetBooleanConstant(context:value)
        typeStack:Push(type)
    end

    action ExitText(TextContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetTextConstant(context:value)
        typeStack:Push(type)
    end

    action ExitUndefined(UndefinedContext context) 
        if IsChaining() return now end
    end

    action ExitCast(CastContext context) 
        if IsChaining() return now end
    end

    action ExitMe(MeContext context) 
        if IsChaining() return now end
    end

    action GetOpcodeStack returns Stack<QuorumOpcode>
        return opcodeStack
    end

    action GetRequest returns CodeCompletionRequest
        return request
    end

    action SetRequest(CodeCompletionRequest request)
        me:request = request
        clazz = request:clazz
        method = request:method
        block = request:block
    end

    action CanCodeComplete returns boolean
        return canCodeComplete
    end

    action SetCanCodeComplete(boolean canCodeComplete)
        me:canCodeComplete = canCodeComplete
    end
    action GetCurrentClass returns Class
        return currentClass
    end

    action SetCurrentClass(Class currentClass)
        me:currentClass = currentClass
    end

    action PeekTypeStack returns Type
        if not typeStack:IsEmpty()
            return typeStack:Peek()
        end
        return undefined
    end
end