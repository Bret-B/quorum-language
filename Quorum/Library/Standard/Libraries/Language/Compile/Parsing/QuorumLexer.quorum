package Libraries.Language.Compile.Parsing

use Libraries.Containers.Array
use Libraries.System.File
use Libraries.Containers.HashTable
use Libraries.Language.Compile.CompilerErrorManager
use Libraries.Language.Compile.CompilerError
use Libraries.Language.Compile.Hints.Hint
use Libraries.Language.Compile.CompilerErrorType

/* 
    This is a default class named Main. It has one action, also named Main,
    that starts the program.

    Attribute: Author Andreas Stefik

    Attribute: Example
    use Libraries.System.File
    use Libraries.Language.Interpreter.QuorumLexer
    use Libraries.Language.Compile.CompilerErrorManager

    QuorumLexer lexer
    File file
    file:SetPath("file.quorum")

    CompilerErrorManager errors
    lexer:SetCompilerErrorManager(errors)
    lexer:Read(file)
*/
class QuorumLexer is Lexer
    QuorumLexerConstants constants
    integer index = -1
    integer currentLine = 1
    integer currentColumn = -1
    text currentValue = ""
    text currentChar = ""
    integer charCode = -1
    Token token = undefined
    CompilerErrorManager compilerErrorManager = undefined
    CompilerErrorType typeConstants
    File currentFile = undefined
    constant integer LINE_FEED = 10

    text quote = ""
    HashTable<text, integer> keywords

    on create
        quote = quote:GetDoubleQuote()
        AddKeywords()
    end

    private action SendToCompilerErrorManager(CompilerError error)
        if compilerErrorManager not= undefined
            compilerErrorManager:Add(error)
        end
    end

    private action SendToCompilerErrorManager(Hint hint)
        if compilerErrorManager not= undefined
            compilerErrorManager:Add(hint)
        end
    end

    private action AddKeywords
        keywords:Add(constants:OUTPUT_TEXT, constants:OUTPUT)
        keywords:Add(constants:ON_TEXT, constants:ON)
        keywords:Add(constants:CREATE_TEXT, constants:CREATE)
        keywords:Add(constants:CONSTANT_TEXT, constants:CONSTANT)
        keywords:Add(constants:ELSE_IF_TEXT, constants:ELSE_IF)
        keywords:Add(constants:ME_TEXT, constants:ME)
        keywords:Add(constants:UNTIL_TEXT, constants:UNTIL)
        keywords:Add(constants:PUBLIC_TEXT, constants:PUBLIC)
        keywords:Add(constants:PRIVATE_TEXT, constants:PRIVATE)
        keywords:Add(constants:ALERT_TEXT, constants:ALERT)
        keywords:Add(constants:DETECT_TEXT, constants:DETECT)
        keywords:Add(constants:ALWAYS_TEXT, constants:ALWAYS)
        keywords:Add(constants:CHECK_TEXT, constants:CHECK)
        keywords:Add(constants:PARENT_TEXT, constants:PARENT)
        keywords:Add(constants:BLUEPRINT_TEXT, constants:BLUEPRINT)
        keywords:Add(constants:NATIVE_TEXT, constants:NATIVE)
        keywords:Add(constants:INHERITS_TEXT, constants:INHERITS)
        keywords:Add(constants:CAST_TEXT, constants:CAST)
        keywords:Add(constants:INPUT_TEXT, constants:INPUT)
        keywords:Add(constants:SAY_TEXT, constants:SAY)
        keywords:Add(constants:NOW_TEXT, constants:NOW)
        keywords:Add(constants:WHILE_TEXT, constants:WHILE)
        keywords:Add(constants:PACKAGE_NAME_TEXT, constants:PACKAGE_NAME)
        keywords:Add(constants:TIMES_TEXT, constants:TIMES)
        keywords:Add(constants:REPEAT_TEXT, constants:REPEAT)
        keywords:Add(constants:ELSE_TEXT, constants:ELSE)
        keywords:Add(constants:RETURNS_TEXT, constants:RETURNS)
        keywords:Add(constants:RETURN_TEXT, constants:RETURN)
        keywords:Add(constants:AND_TEXT, constants:AND)
        keywords:Add(constants:OR_TEXT, constants:OR)
        keywords:Add(constants:NULL_TEXT, constants:NULL)
        keywords:Add(constants:STATIC_TEXT, constants:STATIC)
        keywords:Add(constants:ACTION_TEXT, constants:ACTION)
        keywords:Add(constants:INTEGER_KEYWORD_TEXT, constants:INTEGER_KEYWORD)
        keywords:Add(constants:NUMBER_KEYWORD_TEXT, constants:NUMBER_KEYWORD)
        keywords:Add(constants:TEXT_TEXT, constants:TEXT)
        keywords:Add(constants:BOOLEAN_KEYWORD_TEXT, constants:BOOLEAN_KEYWORD)
        keywords:Add(constants:USE_TEXT, constants:USE)
        keywords:Add(constants:NOT_TEXT, constants:NOT)
        keywords:Add(constants:NOT_EQUALS_TEXT, constants:NOT_EQUALS)
        keywords:Add(constants:MODULO_TEXT, constants:MODULO)
        keywords:Add(constants:IF_TEXT, constants:IF)
        keywords:Add(constants:END_TEXT, constants:END)
        keywords:Add(constants:CLASS_TEXT, constants:CLASS)
        keywords:Add(constants:BOOLEAN_TRUE_TEXT, constants:BOOLEAN)
        keywords:Add(constants:BOOLEAN_FALSE_TEXT, constants:BOOLEAN)
    end

    /*
    This action is used to read a text value and converts it into a token stream.

    Attribute: Parameter value The text value to lex.

    Attribute: Example

    use Libraries.System.File
    use Libraries.Language.Interpreter.QuorumLexer
    use Libraries.Language.Compile.CompilerErrorManager

    QuorumLexer lexer
    File file
    file:SetPath("file.quorum")

    CompilerErrorManager errors
    lexer:SetCompilerErrorManager(errors)
    lexer:Read(file:Read())
    */
    action Read(text value)
        currentValue = value
        text line = value:GetCarriageReturn() + value:GetLineFeed()
        text string = ""
        index = 0
        repeat while index < value:GetSize()
            currentChar = value:GetCharacter(index)
            charCode = currentChar:GetUnicodeInteger(0)
            
            token = undefined
            if charCode = LINE_FEED //linefeed
                currentLine = currentLine + 1
                currentColumn = -1
            end
            currentColumn = currentColumn + 1

            boolean isValid = true
            boolean isIgnored = false
            
            if IsSingleLineComment()
                token = CreateToken()
                ProcessSingleLineComment(token)
            elseif IsMultilineComment()
                token = CreateToken()
                ProcessMultilineComment(token)
            elseif IsNumeric()
                token = CreateToken()
                ProcessNumeric(token)
            elseif CheckSymbols() //don't need to do anything here, just separating it
            elseif IsIdentifier()
                token = CreateToken()
                ProcessIdentifier(token)
            elseif IsQuotedText()
                token = CreateToken()
                ProcessText(token)
            elseif IsWhiteSpace()
                isIgnored = true
            else
                isValid = false
            end

            if isValid and not isIgnored
                token:endLine = currentLine
                token:endColumn = currentColumn
                token:endIndex = index

                Add(token)
            elseif not isIgnored //it's not an ignorable character and it's not valid
                CompilerError error = CreateCompilerError(typeConstants:LEXER_NO_VIABLE_ALTERNATIVE)
                SetCompilerErrorLocation(error)
                error:SetErrorMessage("The character '" + currentChar +
                    "' has no meaning and cannot be used. Try removing it.")
                SendToCompilerErrorManager(error)
            end
            index = index + 1
        end
    end

    private action CreateToken returns Token
        Token token
        token:startLine = currentLine
        token:startColumn = currentColumn
        token:startIndex = index

        return token
    end

    private action SetCompilerErrorLocation(CompilerError error)
        error:SetLineNumber(currentLine)
        error:SetLineNumberEnd(currentLine)
        error:SetColumnNumber(currentColumn)
        error:SetColumnNumberEnd(currentColumn + 1)
        error:SetIndex(index)
        error:SetIndexEnd(index + 1)

        if currentFile not= undefined
            error:SetFile(currentFile)
        end
    end

    private action CreateCompilerError(integer type) returns CompilerError
        CompilerError error
        CompilerErrorType errorType
        errorType:SetCurrentType(type)
        error:SetCompilerErrorType(errorType)
        return error
    end

    private action IsWhiteSpace returns boolean
        if charCode = LINE_FEED or//linefeed
           charCode = 11 or//vertical tab
           charCode = 13 or //carriage return
           charCode = 32 or //space
           charCode = 9 //horizontal tab
            return true
        end
        return false
    end

    private action IsSingleLineComment returns boolean
        if MatchesFromIndex(constants:SINGLE_LINE_COMMENT_TEXT)
            return true
        end
        return false
    end

    private action IsMultilineComment returns boolean
        if MatchesFromIndex(constants:MULTI_LINE_COMMENT_START_TEXT)
            return true
        end
        return false
    end

    private action CalculateIndexChange(text value) returns integer
        return value:GetSize() - 1
    end

    private action MatchesFromIndex(text value) returns boolean
        if (index + value:GetSize() - 1) < currentValue:GetSize() 
            and currentValue:GetSubtext(index, index + value:GetSize()) = value
            return true
        end
        return false
    end

    private action MatchesFromIndex(text value, integer i) returns boolean
        if (i + value:GetSize() - 1) < currentValue:GetSize() 
            and currentValue:GetSubtext(i, i + value:GetSize()) = value
            return true
        end
        return false
    end

    private action ProcessMultilineComment(Token token)
        ProcessGreedy(token, constants:MULTI_LINE_COMMENT_END_TEXT)
        token:SetToCommentChannel()
        token:category = constants:COMMENTS
    end

    private action ProcessSingleLineComment(Token token)
        text linefeed = ""
        linefeed = linefeed:GetLineFeed()
        ProcessGreedy(token, linefeed)
        token:SetToCommentChannel()
        token:category = constants:COMMENTS
    end

    private action ProcessGreedy(Token token, text ending)
        string = ""
        j = index
        boolean done = false
        repeat while j < currentValue:GetSize() and not done
            char2 = currentValue:GetCharacter(j)
            integer code = char2:GetUnicodeInteger(0)
            
            if MatchesFromIndex(ending, j)
                j = j + CalculateIndexChange(ending)
                done = true
            else 
                string = string + char2
            end

            if code = LINE_FEED
                currentLine = currentLine + 1
                currentColumn = -1
            else
                currentColumn = currentColumn + 1
            end
            
            j = j + 1
        end
        token:category = constants:COMMENTS
        token:value = string
        index = j - 1
    end

    private action CheckSymbols returns boolean
        //first handle symbols that actually take two or more positions
        if MatchesFromIndex(constants:GREATER_EQUAL_TEXT)
            token = CreateToken()
            token:category = constants:GREATER_EQUAL
            token:value = constants:GREATER_EQUAL_TEXT
            index = index + constants:GREATER_EQUAL_TEXT:GetSize() - 1
            return true
        elseif MatchesFromIndex(constants:LESS_EQUAL_TEXT)
            token = CreateToken()
            token:category = constants:LESS_EQUAL
            token:value = constants:LESS_EQUAL_TEXT
            index = index + constants:LESS_EQUAL_TEXT:GetSize() - 1
            return true
        elseif MatchesFromIndex(constants:NOT_EQUALS_TEXT)
            token = CreateToken()
            token:category = constants:NOT_EQUALS
            token:value = constants:NOT_EQUALS_TEXT
            index = index + constants:NOT_EQUALS_TEXT:GetSize() - 1
            return true
        //Now move to single position values
        elseif MatchesFromIndex(constants:PERIOD_TEXT)
            token = CreateToken()
            token:category = constants:PERIOD
            token:value = constants:PERIOD_TEXT
            return true
        elseif MatchesFromIndex(constants:COMMA_TEXT)
            token = CreateToken()
            token:category = constants:COMMA
            token:value = constants:COMMA_TEXT
            return true
        elseif MatchesFromIndex(constants:EQUALITY_TEXT)
            token = CreateToken()
            token:category = constants:EQUALITY
            token:value = constants:EQUALITY_TEXT
            return true
        elseif MatchesFromIndex(constants:GREATER_TEXT)
            token = CreateToken()
            token:category = constants:GREATER
            token:value = constants:GREATER_TEXT
            return true
        elseif MatchesFromIndex(constants:LESS_TEXT)
            token = CreateToken()
            token:category = constants:LESS
            token:value = constants:LESS_TEXT
            return true
        elseif MatchesFromIndex(constants:PLUS_TEXT)
            token = CreateToken()
            token:category = constants:PLUS
            token:value = constants:PLUS_TEXT
            return true
        elseif MatchesFromIndex(constants:MINUS_TEXT)
            token = CreateToken()
            token:category = constants:MINUS
            token:value = constants:MINUS_TEXT
            return true
        elseif MatchesFromIndex(constants:MULTIPLY_TEXT)
            token = CreateToken()
            token:category = constants:MULTIPLY
            token:value = constants:MULTIPLY_TEXT
            return true
        elseif MatchesFromIndex(constants:DIVIDE_TEXT)
            token = CreateToken()
            token:category = constants:DIVIDE
            token:value = constants:DIVIDE_TEXT
            return true
        elseif MatchesFromIndex(constants:LEFT_PAREN_TEXT)
            token = CreateToken()
            token:category = constants:LEFT_PAREN
            token:value = constants:LEFT_PAREN_TEXT
            return true
        elseif MatchesFromIndex(constants:RIGHT_PAREN_TEXT)
            token = CreateToken()
            token:category = constants:RIGHT_PAREN
            token:value = constants:RIGHT_PAREN_TEXT
            return true
        elseif MatchesFromIndex(constants:COLON_TEXT)
            token = CreateToken()
            token:category = constants:COLON
            token:value = constants:COLON_TEXT
            return true
        end
        return false
    end
    
    private action IsNumeric returns boolean
        if IsDigit(charCode)
            return true
        end
        return false
    end

    private action ProcessIdentifier(Token token)
        integer startIndex = index
        integer j = index + 1
        boolean done = false
        text string = currentChar
        repeat while j < currentValue:GetSize() and not done
            char2 = currentValue:GetCharacter(j)
            integer code = char2:GetUnicodeInteger(0)
            if IsAlphaNumeric(code) or IsUnderscore(code)
                string = string + char2
                currentColumn = currentColumn + 1
            else //stop at the first non-digit
                done = true
            end
            j = j + 1
        end

        token:value = string
        //check if this is a keyword
        if keywords:HasKey(string)
            integer value = keywords:GetValue(string)
            token:category = value
        else
            token:category = constants:ID
        end

        index = startIndex + string:GetSize() - 1
    end

    private action IsIdentifier returns boolean
        //if we allow weird non-quorum expressions in the DSL for data frames, this is where it would go.
        if IsIdentifierFirstValue() //a magic identifier section?
            return true
        end
        return false
    end

    private action IsIdentifierFirstValue returns boolean
        if IsAlpha(charCode) or IsUnderscore(charCode)
            return true
        end
        return false
    end

    private action IsAlpha(integer code) returns boolean
        //capital letters
        if code >= 65 and code <= 90
            return true
        elseif code >= 97 and code <= 122
            return true
        end
        return false
    end

    private action IsUnderscore(integer code) returns boolean
        if 95 = code
            return true
        end

        return false
    end

    private action IsAlphaNumeric(integer code) returns boolean
        if IsAlpha(code)
            return true
        elseif IsDigit(code)
            return true
        end
        return false
    end

    /* Private helper action for determining if a value is a digit. */
    private action IsDigit(integer code) returns boolean
        //digit zero through digit 9 in unicode
        if code >= 48 and code <= 57
            return true
        end
        return false
    end

    private action IsQuotedText returns boolean
        if currentChar = quote
            return true
        end
        return false
    end

    private action ProcessNumeric(Token token)
        text string = currentChar
        integer j = index + 1
        digitCount = 0
        if IsDigit(charCode)
            digitCount = 1
        end

        done = false
        repeat while j < currentValue:GetSize() and not done
            char2 = currentValue:GetCharacter(j)
            integer code = char2:GetUnicodeInteger(0)
            if IsDigit(code)
                string = string + char2
                digitCount = digitCount + 1
                currentColumn = currentColumn + 1
                j = j + 1
            else //stop at the first non-digit
                //This means there was a minus sign, but no digits following it.
                if digitCount = 0
                    CompilerError error = CreateCompilerError(typeConstants:LEXER_NO_VIABLE_ALTERNATIVE)
                    SetCompilerErrorLocation(error)
                    error:SetErrorMessage("A Minus (-) must be followed by any number of digits (0-9)")
                    SendToCompilerErrorManager(error)
                end
                done = true
            end
        end

        //there are digits, so it's an int, although if it is a decimal, we'll change the code.
        if digitCount > 0
            token:category = constants:INT
        end

        //we now have a bunch of digits. The next character is either 
        //an e or a dot.
        if j < currentValue:GetSize()
            char2 = currentValue:GetCharacter(j)
            if char2 = "."
                token:category = constants:DECIMAL
                string = string + char2
                j = j + 1
                done = false
                digitCount = 0
                repeat while j < currentValue:GetSize() and not done
                    char2 = currentValue:GetCharacter(j)
                    integer code = char2:GetUnicodeInteger(0)
                    if IsDigit(code)
                        string = string + char2
                        digitCount = digitCount + 1
                        currentColumn = currentColumn + 1
                        j = j + 1
                    else //stop at the first non-digit
                        if digitCount = 0
                            CompilerError error = CreateCompilerError(typeConstants:LEXER_NO_VIABLE_ALTERNATIVE)
                            SetCompilerErrorLocation(error)
                            error:SetErrorMessage("A period (.) must be followed by any number of digits (0-9)")
                            SendToCompilerErrorManager(error)
                        end
                        done = true
                    end
                end
            else
                token:category = constants:INT
            end
        end

        //whether there was a dot or not, the last thing 
        //we might have is the exponent
        if j < currentValue:GetSize()
            char2 = currentValue:GetCharacter(j)
            if char2 = "e" //unlike typical scientific notation, lowercase e only, for readability.
                string = string + char2
                j = j + 1

                //now check if is a plus or a minus
                if j < currentValue:GetSize()
                    char2 = currentValue:GetCharacter(j)
                    if char2 = "+" or char2 = "-"
                        string = string + char2
                        j = j + 1
                    end
                end

                //now add more integers
                done = false
                digitCount = 0
                repeat while j < currentValue:GetSize() and not done
                    char2 = currentValue:GetCharacter(j)
                    integer code = char2:GetUnicodeInteger(0)
                    if IsDigit(code)
                        string = string + char2
                        j = j + 1
                        currentColumn = currentColumn + 1
                        digitCount = digitCount + 1
                    else //stop at the first non-digit
                        if digitCount = 0
                            CompilerError error = CreateCompilerError(typeConstants:LEXER_NO_VIABLE_ALTERNATIVE)
                            SetCompilerErrorLocation(error)
                            error:SetErrorMessage("An exponent (e) must be followed by any number of digits (0-9)")
                            SendToCompilerErrorManager(error)
                        end
                        done = true
                    end
                end
            end
        end

        index = j - 1
        token:value = string
    end

    private action ProcessText(Token token)
        string = ""
        j = index + 1
        boolean done = false
        repeat while j < currentValue:GetSize() and not done
            char2 = currentValue:GetCharacter(j)
            integer code = char2:GetUnicodeInteger(0)
            if char2 = quote
                token:category = constants:STRING
                token:value = string
                string = ""
                done = true
            //temporarily remove this new change.
            //elseif char2 = "\" and j + 1 < currentValue:GetSize() and currentValue:GetCharacter(j + 1) = quote
            //    string = string + quote
            //    j = j + 1 //add an extra value
            //    currentColumn = currentColumn + 1
            else 
                string = string + char2
            end
            
            if code = LINE_FEED
                currentLine = currentLine + 1
                currentColumn = -1
            else
                currentColumn = currentColumn + 1
            end
            j = j + 1
        end
        index = j - 1
    end

    /*
    This action is used to read a text file and converts it into a token strea.

    Attribute: Parameter file The file to read and lex.

    Attribute: Example

    use Libraries.System.File
    use Libraries.Language.Interpreter.QuorumLexer
    use Libraries.Language.Compile.CompilerErrorManager

    QuorumLexer lexer
    File file
    file:SetPath("file.quorum")

    CompilerErrorManager errors
    lexer:SetCompilerErrorManager(errors)
    lexer:Read(file)
    */
    action Read(File file)
        me:currentFile = file
        text value = file:Read()
        Read(value)
    end

    action GetCompilerErrorManager returns CompilerErrorManager
        return compilerErrorManager
    end

    action SetCompilerErrorManager(CompilerErrorManager compilerErrorManager)
        me:compilerErrorManager = compilerErrorManager
    end

    action GetFile returns File
        return currentFile
    end

    action SetFile(File file)
        currentFile = file
    end
end