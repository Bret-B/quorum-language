package Libraries.Language.Compile.Parsing

use Libraries.Containers.Iterator

/*
    This class iterates over a token stream and provides helper operations in doing so.
 
    Attribute: Author Andreas Stefik
*/
class TokenIterator<Type> is Iterator<Type>
    Lexer lexer = undefined
    integer index = -1
    boolean readAllChannels = false
    integer channelToRead = 0

    /*
        This action gets the current item and does not move onto the next item
        to be iterated over. 

        Attribute: Returns Returns the object. 
    */
    action GetCurrent returns Type
        return lexer:GetToken(index)
    end

    /* Returns whether the current token has a valid index. 
        Attribute: Returns true if the current token is at a valid index.

    */
    action IsValid returns boolean
        return index >= 0 and index < lexer:GetSize()
    end

    /*
        This action determines if there is a next item in the iteration. 

        Attribute: Returns true if there is a next item and false if there is not. 
    */
    action HasNext returns boolean
        i = index + 1
        repeat while i < lexer:GetSize()
            Token value = lexer:GetToken(i)
            if value = undefined
                return false
            end

            if readAllChannels or value:channel = channelToRead
                return true
            end
            i = i + 1
        end
        return false
    end

    /*
        This action gets the next item in the iteration and continues the iteration. 

        Attribute: Returns Returns the object if it is valid and undefined otherwise. 
    */
    action Next returns Type
        //by default, read only channel 0
        index = index + 1
        repeat while index < lexer:GetSize()
            Token value = lexer:GetToken(index)
            if value = undefined
                return undefined
            end

            if readAllChannels or value:channel = channelToRead
                return value
            end
            index = index + 1
        end
        return undefined
    end

    /* This action finds the most recent documentation token. */
    action FindRecentDocumentation returns Token
        integer j = index - 1
        if j < 0 or j > lexer:GetSize()
            return undefined
        end

        repeat while j >= 0
            Token token = lexer:GetToken(j)
            if token:IsWhiteSpaceChannel() //ignore it
                //return undefined // only check the most recent one
            elseif token:IsCommentChannel()
                return token
            elseif token:IsNormalChannel()
                return undefined
            end
            j = j - 1
        end
        return undefined
    end

    /* This is a deprecated helper action that was used for testing comparisons to Antlr. */
    action IsRecentDocumentationFirstTokenOnly returns boolean
        integer j = index - 1
        if j < 0 or j > lexer:GetSize()
            return false
        end

        repeat while j >= 0
            Token token = lexer:GetToken(j)
            if token:IsWhiteSpaceChannel() //ignore it
                //return undefined // only check the most recent one
            elseif token:IsCommentChannel()
                if token:startLine > 0 and j not= 0
                    return false
                end
                return true
            elseif token:IsNormalChannel()
                return false
            end
            j = j - 1
        end
        return false
    end
    
    /*
        This action looks ahead in the token stream and returns a token if one is found. The token
        returned is the one on the same channel currently being read.
    */
    action LookAhead(integer bump) returns Type
        //find the number of on channel tokens ahead of the current spot
        if bump < 0
            return undefined
        end

        if bump = 0
            return GetCurrent()
        end
        
        integer look = 0
        i = index + 1
        repeat while i < lexer:GetSize()
            Token value = lexer:GetToken(i)
            if value not= undefined and (readAllChannels or value:channel = channelToRead)
                look = look + 1
                if look = bump
                    return value
                end
            end
            i = i + 1
        end
        return undefined
    end

    /*
        This action looks ahead or behind in the token stream and returns a token if one is found. The token
        returned is the one on the same channel currently being read.
    */
    action Look(integer bump) returns Type
        if bump = 0
            return GetCurrent()
        end
        
        integer look = 0
        integer i = index
        if bump > 0
            i = index + 1
        else
            i = index - 1
        end
        repeat while i < lexer:GetSize() and i >= 0
            Token value = lexer:GetToken(i)
            if value not= undefined and (readAllChannels or value:channel = channelToRead)
                if bump > 0
                    look = look + 1
                else
                    look = look - 1
                end
                if look = bump
                    return value
                end
            end
            if bump > 0
                i = i + 1
            else
                i = i - 1
            end
        end
        return undefined
    end

    
    /*
        This action starts the iteration over from the beginning. 
    */
    action Rewind
        index = -1
    end

    /*
        This action copies the iterator. This copy is shallow, meaning it does not copy the tokens involved 
        and instead is used to provide more complex lookahead situations where we want to preserve the original 
        iterator.
    */
    action Copy returns TokenIterator<Type>
        TokenIterator<Type> array
        array:SetLexer(GetLexer())
        array:index = index
        array:readAllChannels = readAllChannels
        array:channelToRead = channelToRead
        return array
    end

    /* This returns the lexer we are working on. */
    action GetLexer returns Lexer
        return lexer
    end

    /* This sets the lexer we are working on. */
    action SetLexer(Lexer lexer)
        me:lexer = lexer
        Next()
    end
    /* This gets which channel we are going to work on. */
    action GetChannelToRead returns integer
        return channelToRead
    end
    /* This sets which channel we are going to work on. */
    action SetChannelToRead(integer channelToRead)
        me:channelToRead = channelToRead
    end

    /* This determines whether or not we are counting all tokens as part of the source stream or skipping. */
    action IsReadingAllChannels returns boolean
        return readAllChannels
    end

    /* This sets whether or not we are counting all tokens as part of the source stream or skipping. */
    action SetReadingAllChannels(boolean readAllChannels)
        me:readAllChannels = readAllChannels
    end
end