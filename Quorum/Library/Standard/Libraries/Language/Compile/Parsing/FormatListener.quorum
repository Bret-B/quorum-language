package Libraries.Language.Compile.Parsing

use Libraries.Language.Compile.Context.all
use Libraries.Language.Compile.Parsing.Token
use Libraries.Language.Compile.QuorumSourceListener
use Libraries.Language.Compile.QualifiedName

class FormatListener is QuorumSourceListener
    integer tabSpaces = 4
    integer tabs = 0
    text tabSpacesText = ""
    text source = undefined
    text sourceFormatted = undefined
    text line = ""
    QuorumLexerConstants constants
    QuorumLexer lexer = undefined
    boolean preserveLines = true

    on create
        line = line:GetLineFeed()
        sourceFormatted = ""
    end

    private action ChangeTab(integer amount)
        tabs = tabs + amount
        if tabs < 0
            tabs = 0
        end
        tabSpacesText = ""
        i = 0
        repeat while i < tabs * tabSpaces
            tabSpacesText = tabSpacesText + " "
            i = i + 1
        end
    end
    action GetTokenRegionText(Token first, Token last) returns text
        integer find = first:startIndex
        integer lind = last:endIndex
        return source:GetSubtext(find, lind + 1)
    end

    action EnterDocumentation(DocumentationContext context) end
    action ExitDocumentation(DocumentationContext context) end

    action EnterNoActionsNoClass(NoActionsNoClassContext context) end
    action ExitNoActionsNoClass(NoActionsNoClassContext context) end

    action EnterActionsNoClass(ActionsNoClassContext context) end
    action ExitActionsNoClass(ActionsNoClassContext context) end
    
    action EnterNumber(NumberContext context) end
    action ExitNumber(NumberContext context) end

    action EnterParenthesisExpression(ParenthesisContext context) end
    action ExitParenthesisExpression(ParenthesisContext context) end

    action EnterCast(CastContext context) end
    action ExitCast(CastContext context) end

    action EnterSayStatement(SayContext context) end
    action ExitSayStatement(SayContext context) end

    action EnterCheckStatement(CheckContext context) end
    action ExitCheckStatement(CheckContext context) end

    action EnterParentFieldAccess(ParentFieldAccessContext context) end
    action ExitParentFieldAccess(ParentFieldAccessContext context) end

    action EnterFullClassDeclaration(FullClassDeclarationContext context) 
        if not sourceFormatted:IsEmpty()
            sourceFormatted = sourceFormatted + line
        end        
        if context:staticClass
            sourceFormatted = sourceFormatted + "shared "
        end

        sourceFormatted = sourceFormatted + "class " + context:className
        if context:generic not= undefined
            text value = GetTokenRegionText(context:generic:GetFirstToken(), context:generic:GetLastToken())
            sourceFormatted = sourceFormatted + value + " " 
        end

        if context:inherit not= undefined
            text value = GetTokenRegionText(context:inherit:GetFirstToken(), context:inherit:GetLastToken())
            sourceFormatted = sourceFormatted + value + " " 
        end
        ChangeTab(1)
    end
    action ExitFullClassDeclaration(FullClassDeclarationContext context) 
        sourceFormatted = sourceFormatted + line + "end"
        ChangeTab(-1)
    end

    action EnterNoClassDeclaration(NoClassDeclarationContext ctx) end
    action ExitNoClassDeclaration(NoClassDeclarationContext ctx)  end

    action EnterFormalParameter(FormalParameterContext context) end
    action ExitFormalParameter(FormalParameterContext context) end

    action EnterStatement(StatementContext context)
        text value = GetTokenRegionText(context:GetFirstToken(), context:GetLastToken())
        sourceFormatted = sourceFormatted + line + tabSpacesText + value + " "
    end
    action ExitStatement(StatementContext context) end

    action EnterMe(MeContext context) end
    action ExitMe(MeContext context) end

    action EnterActionExpressionList(ActionExpressionListContext context) end
    action ExitActionExpressionList(ActionExpressionListContext context) end

    action EnterStart(StartContext context) end
    action ExitStart(StartContext context) end

    action EnterText(TextContext context) end
    action ExitText(TextContext context) end

    action EnterOr(AndOrContext context) end
    action ExitOr(AndOrContext context) end

    action EnterOutputStatement(OutputContext context) end
    action ExitOutputStatement(OutputContext context) end

    action EnterSystemAction(ActionContext context) end
    action ExitSystemAction(ActionContext context) end

    action EnterConstructor(ConstructorContext context) 
        Token firstToken = context:GetFirstToken()
        Token lastToken = context:GetLastToken()

        if context:block not= undefined
            Token blockToken = context:block:GetFirstToken()
            text value = GetTextWithoutWhiteSpace(firstToken, blockToken, false)
            sourceFormatted = sourceFormatted + line + value + " "
        else

        end
    end
    action ExitConstructor(ConstructorContext context) 
        Token lastToken = context:GetLastToken()
        sourceFormatted = sourceFormatted + line + tabSpacesText
        sourceFormatted = sourceFormatted + lastToken:ToText()
    end

    action EnterBlueprintAction(ActionContext context) end
    action ExitBlueprintAction(ActionContext context) end

    action GetTextWithoutWhiteSpace(Token first, Token last, boolean includeLast) returns text
        text result = tabSpacesText
        integer firstIndex = first:tokenIndex
        integer lastIndex = last:tokenIndex
        if not includeLast
            lastIndex = lastIndex - 1
        end
        integer size = lexer:GetSize()
        i = firstIndex
        repeat while i < size and i <= lastIndex
            Token token = lexer:GetToken(i)
            if not constants:IsWhiteSpace(token)
                result = result + token:ToText() + GetDefaultSeparator(token)
            end
            i = i + 1
        end
        return result
    end

    action GetDefaultSeparator(Token token) returns text
        if constants:IsKeyword(token)
            return " "
        end
        return " " //what should the standard be?
    end

    action EnterActionHeader(ActionContext context) 
        
    end
    action ExitActionHeader(ActionContext context) end

    action EnterAction(ActionContext context) 
        Token firstToken = context:GetFirstToken()
        Token lastToken = context:GetLastToken()
        
        if context:block not= undefined

            if context:block:statements not= undefined
                Token blockToken = context:block:GetFirstToken()
                text value = GetTextWithoutWhiteSpace(firstToken, blockToken, false)
                sourceFormatted = sourceFormatted + line + value + " "
            else
                Token blockToken = context:block:GetFirstToken()
                text value = GetTextWithoutWhiteSpace(firstToken, lastToken, false)
                sourceFormatted = sourceFormatted + line + value + " "
            end
        else

        end
    end
    action ExitAction(ActionContext context) 
        Token lastToken = context:GetLastToken()
        sourceFormatted = sourceFormatted + line + tabSpacesText + lastToken:ToText()
    end

    action EnterGenericStatement(GenericContext context) end
    action ExitGenericStatement(GenericContext context) end

    action EnterAnd(AndOrContext context) end
    action ExitAnd(AndOrContext context) end

    action EnterUndefined(UndefinedContext context) end
    action ExitUndefined(UndefinedContext context) end

    action EnterIs(IsContext context) end
    action ExitIs(IsContext context) end

    action EnterIfStatement(IfContext context) end
    action ExitIfStatement(IfContext context) end

    action EnterElseIfStatement(IfContext context) end
    action ExitElseIfStatement(IfContext context) end

    action EnterElseStatement(IfContext context) end
    action ExitElseStatement(IfContext context) end

    action EnterAccessModifier(AccessModifierContext context) end
    action ExitAccessModifier(AccessModifierContext context) end

    action EnterBlock(BlockContext context) 
        ChangeTab(1)
    end
    action ExitBlock(BlockContext context) 
        ChangeTab(-1)
    end

    action EnterClassStatements(ClassStatementsContext context)
         
//        if context:statement not= undefined
//            Token firstToken = context:statement:GetFirstToken()
//            Token lastToken = context:statement:GetLastToken()
//            text value = GetTokenRegionText(firstToken, lastToken)
//            sourceFormatted = sourceFormatted + line + tabSpacesText + value + " "
//        end
    end
    action ExitClassStatements(ClassStatementsContext context) end

    action EnterQualifiedName(QualifiedNameContext context) 
        
    end
    action ExitQualifiedName(QualifiedNameContext context) end

    action EnterLoopStatement(LoopContext context) end
    action ExitLoopStatement(LoopContext context) end

    action EnterAssignmentDeclaration(AssignmentDeclaractionContext context) end
    action ExitAssignmentDeclaration(AssignmentDeclaractionContext context) end

    action EnterInheritStatements(InheritStatementsContext context) end
    action ExitInheritStatements(InheritStatementsContext context) end

    action EnterInheritStatement(InheritStatementContext context) end
    action ExitInheritStatement(InheritStatementContext context) end

    action EnterDetectStatement(DetectStatementContext context) end
    action ExitDetectStatement(DetectStatementContext context) end

    action EnterAlwaysStatement(AlwaysStatementContext context) end
    action ExitAlwaysStatement(AlwaysStatementContext context) end

    action EnterAddition(AdditionContext addition) end
    action ExitAddition(AdditionContext addition) end

    action EnterReturnStatement(ReturnContext context) end
    action ExitReturnStatement(ReturnContext context) end

    action EnterInput(InputContext context) end
    action ExitInput(InputContext context) end

    action EnterInputNoParameters(InputContext context) end
    action ExitInputNoParameters(InputContext context) end

    action EnterMultiplication(MultiplicationContext context) end
    action ExitMultiplication(MultiplicationContext context) end

    action EnterMinus(UnaryMinusContext context) end
    action ExitMinus(UnaryMinusContext context) end

    action EnterBoolean(BooleanContext context) end
    action ExitBoolean(BooleanContext context) end

    action EnterAlertStatement(AlertContext context) end
    action ExitAlertStatement(AlertContext context) end

    

    action EnterNot(NotContext context) end
    action ExitNot(NotContext context) end

    action EnterGenericDeclaration(GenericDeclarationContext context) end
    action ExitGenericDeclaration(GenericDeclarationContext context) end

    action EnterClassType(ClassTypeContext context) end
    action ExitClassType(ClassTypeContext context) end

    action EnterEquals(EqualsContext context) end
    action ExitEquals(EqualsContext context) end

    action EnterInequality(InequalityContext context) end
    action ExitInequality(InequalityContext context) end

    action EnterInteger(IntegerContext int) end
    action ExitInteger(IntegerContext int) end

    action EnterPackageRule(PackageContext context) 
        QualifiedName name = context:name
        sourceFormatted = sourceFormatted + "package " + name:GetStaticKey()
    end
    action ExitPackageRule(PackageContext context) 
        sourceFormatted = sourceFormatted + line + line
    end

    action EnterUse(UseContext context) 
        QualifiedName name = context:name
        sourceFormatted = sourceFormatted + "use " + name:GetStaticKey()
    end
    action ExitUse(UseContext context)
        sourceFormatted = sourceFormatted + line
    end

    action EnterNormalAssignment(NormalAssignmentContext context) end
    action ExitNormalAssignment(NormalAssignmentContext context) end

    action EnterParentAssignment(ParentAssignmentContext context) end
    action ExitParentAssignment(ParentAssignmentContext context) end

    action EnterObjectAssignment(ObjectAssignmentContext context) end
    action ExitObjectAssignment(ObjectAssignmentContext context) end

    action EnterNoTypeAssignment(NoTypeAssignmentContext context) end
    action ExitNoTypeAssignment(NoTypeAssignmentContext context) end

    action EnterMeVariableAccess(MeVariableAccessContext context) end
    action ExitMeVariableAccess(MeVariableAccessContext context) end

    action EnterVariableSoloFunctionCall(VariableFunctionCallContext context) end
    action ExitVariableSoloFunctionCall(VariableFunctionCallContext context) end

    action EnterParentVariableSoloFunctionCall(ParentVariableFunctionCallContext context) end
    action ExitParentVariableSoloFunctionCall(ParentVariableFunctionCallContext context) end

    action EnterInitialParentActionCall(ActionCallContext ctx) end
    action ExitInitialParentActionCall(ActionCallContext ctx) end

    action EnterVariableFunctionCall(VariableFunctionCallContext context) end
    action ExitVariableFunctionCall(VariableFunctionCallContext context) end

    action EnterParentVariableFunctionCall(ParentVariableFunctionCallContext context) end
    action ExitParentVariableFunctionCall(ParentVariableFunctionCallContext context) end

    action EnterActionCall(ActionCallContext ctx) end
    action ExitActionCall(ActionCallContext ctx) end
    action GetSource returns text
        return source
    end

    action SetSource(text source)
        me:source = source
    end

    action GetSourceFormatted returns text
        return sourceFormatted
    end

    action SetSourceFormatted(text sourceFormatted)
        me:sourceFormatted = sourceFormatted
    end

    action GetQuorumLexer returns QuorumLexer
        return me:lexer
    end

    action SetQuorumLexer(QuorumLexer lexer)
        me:lexer = lexer
    end
end