package Libraries.Language.Compile.Parsing

use Libraries.Containers.Array
use Libraries.System.File

/*
    This is a general purpose class for defining lexers in Quorum. Subclasses implement the interface
    how they see fit for particular languages.
*/
class Lexer
    /* The raw tokens from the lex. */
    Array<Token> tokens

    action Add(Token token)
        tokens:Add(token)
    end

    /*
        This action is used to read a text value and converts it into a token stream. Subclasses for particular
        languages define how they read and manage errors.
    
        Attribute: Parameter value The text value to lex.
    */
    blueprint action Read(text value)

    /*
        This action is used to read a text file and converts it into a token stream.
    
        Attribute: Parameter file The file to read and lex.
    */
    blueprint action Read(File file)

     /*
        This method returns a token at a particular position in the lex.
    
        Attribute: Parameter i The index of the token to get
    */
    action GetToken(integer i) returns Token
        return tokens:Get(i)
    end

    /* 
        This action returns an iterator over the tokens. We can use this to automatically
        iterate over non-documentation tokens, to do lookahead and look back, and other operations
        that are harder to manage through the raw Get action.

        Attribute: Returns TokenIterator<Token>
    */
    action GetIterator returns TokenIterator<Token>
        TokenIterator<Token> iterator
        iterator:SetLexer(me)
        return iterator
    end

    /*
    This action returns the number of tokens in the token stream.

    Attribute: Returns The number of tokens in the stream.
    */
    action GetSize returns integer
        return tokens:GetSize()
    end

    /*
    This action empties the list of tokens.
    */
    action Empty
        tokens:Empty()
    end

    /*
    This action Returns whether or not there are tokens in the token stream

    Attribute: Returns a boolean value to indicate if the stream is empty.
    */
    action IsEmpty returns boolean
        return tokens:IsEmpty()
    end
end