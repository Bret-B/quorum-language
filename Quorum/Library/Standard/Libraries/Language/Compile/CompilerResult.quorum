package Libraries.Language.Compile

use Libraries.Language.Compile.Symbol.SymbolTable
use Libraries.Language.Compile.Symbol.TypeChecker
use Libraries.Containers.HashTable
use Libraries.Language.Compile.Translate.ClassOpcode
use Libraries.System.File
use Libraries.Containers.Array
use Libraries.Language.Compile.Symbol.Class
use Libraries.Containers.Iterator

class CompilerResult
    public CompilerErrorManager compilerErrorManager = undefined
    public SymbolTable symbolTable = undefined
    public Library standardLibrary = undefined
    public TypeChecker typeChecker = undefined
    public CompilerProfiler profiler = undefined
    public text convertedJavaScript = ""
    public number time = 0.0
    public HashTable<text, ClassOpcode> opcodes = undefined
    public text source = ""
    public File sourceLocation = undefined
    public Array<File> projectFiles = undefined
    public HashTable<text, Lexer> lexers
    public Array<Token> sourceTokens = undefined

    action CopyToBareResult returns CompilerResult
        CompilerResult result
        SymbolTable table

        if standardLibrary = undefined
            return result
        end

        SymbolTable lst = standardLibrary:GetSymbolTable()
        if symbolTable not= undefined
            Iterator<Class> iterator = symbolTable:GetClasses()
            repeat while iterator:HasNext()
                Class clazz = iterator:Next()
                table:Add(clazz)
            end
        end

        result:symbolTable = table
        return result
    end

    /*
        This action attempts to save memory by removing information that may 
        not be necessary for many applications. Specifically, this removes any
        opcodes used for writing files, and destroys the type checker, so it 
        should not be used if this information is required in an application.
        The symbol tabls and the lexers are left intact. 
    */
    action Dispose
        typeChecker = undefined
        opcodes = undefined
    end
end