package Libraries.Language.Compile.Blocks

use Libraries.Language.Compile.QuorumSourceListener
use Libraries.Language.Compile.Context.all
use Libraries.Containers.Array
use Libraries.Interface.Controls.Blocks.all
use Libraries.Language.Compile.Parsing.Token
use Libraries.Language.Compile.Parsing.QuorumLexer


class ParserToBlockListener is QuorumSourceListener
    StartContext startContext = undefined
    integer startLine = -1
    integer finishLine = -1
    BlockEnvironment editor = undefined
    integer scopeDepth = 0
    QuorumLexer lexer = undefined

    RootBlock rootBlock
    Block currentBlock = undefined
    integer recentToken = -1
    
    action EnterDocumentation(DocumentationContext context) end
    action ExitDocumentation(DocumentationContext context) end

    action EnterNoActionsNoClass(NoActionsNoClassContext context) end
    action ExitNoActionsNoClass(NoActionsNoClassContext context) end

    action EnterActionsNoClass(ActionsNoClassContext context) end
    action ExitActionsNoClass(ActionsNoClassContext context) end
    
    action EnterNumber(NumberContext context) end
    action ExitNumber(NumberContext context) end

    action EnterParenthesisExpression(ParenthesisContext context) end
    action ExitParenthesisExpression(ParenthesisContext context) end

    action EnterCast(CastContext context) end
    action ExitCast(CastContext context) end

    action EnterSayStatement(SayContext context) 
        SayBlock block
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(editor)
        block:SetSayContext(context)
        currentBlock:Add(cast(Block, block))

        block:Setup()
    end
    action ExitSayStatement(SayContext context) end

    action EnterCheckStatement(CheckContext context)
        CheckBlock block
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(editor)
        block:SetContext(context)

        currentBlock:Add(cast(Block, block))

        MultipleLineBlockPart startLine = block:AddStartLine()
        currentBlock = startLine

        scopeDepth = scopeDepth + 1

    end
    action ExitCheckStatement(CheckContext context)
        CheckBlock checkBlock = cast(CheckBlock, currentBlock:GetParentBlock())
        FillPreviousCommentBlocks(context:GetLastToken(), context:GetLastToken())
        checkBlock:AddEndLine()
        checkBlock:Setup()
        currentBlock = checkBlock:GetParentBlock()
        scopeDepth = scopeDepth - 1
    end

    action EnterParentFieldAccess(ParentFieldAccessContext context) end
    action ExitParentFieldAccess(ParentFieldAccessContext context) end

    private action FillPreviousCommentBlocks(Token first, Token last)
        integer index = first:tokenIndex
        i = index - 1
        Array<Token> comments
        repeat while i >= 0 and i > recentToken
            Token next = lexer:GetToken(i)
            boolean isComment = next:IsCommentChannel()
            if isComment
                comments:AddToEnd(next)
            end
            i = i - 1
        end

        i = comments:GetSize() - 1
        repeat while i >= 0
            Token next = comments:Get(i)
            CommentBlock comment
            comment:SetIsMultiLineComment(next:IsMultiLineComment())
            comment:SetToken(next)
            comment:SetScopeDepth(scopeDepth)
            comment:SetBlockEnvironment(editor)
            currentBlock:Add(cast(Block, comment))
            comment:Setup()
            i = i - 1
        end

        recentToken = index
    end
    
    action EnterFullClassDeclaration(FullClassDeclarationContext context)
        ClassBlock block
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())
        block:SetBlockEnvironment(editor)
        block:SetFullClass(context)
        
        currentBlock:Add(cast(Block, block))

        MultipleLineBlockPart startLine = block:AddStartLine()
        currentBlock = startLine

        scopeDepth = scopeDepth + 1
    end

    action ExitFullClassDeclaration(FullClassDeclarationContext ctx)
        FillPreviousCommentBlocks(ctx:GetLastToken(), ctx:GetLastToken())
        // The current block must be one of the parts of a class block. Get the class block from the part.
        ClassBlock classBlock = cast(ClassBlock, currentBlock:GetParentBlock())
        
        // Add the last line of the class block.
        classBlock:AddEndLine()

        // Now that all parts have been added, call Setup on the block.
        classBlock:Setup()

        // Go back to the parent of the class block.
        currentBlock = classBlock:GetParentBlock()
        scopeDepth = scopeDepth - 1
    end

    action EnterNoClassDeclaration(NoClassDeclarationContext ctx) 
        // For now, do nothing. Don't generate a block if there's no class. Things are logically attached to the root directly in this case.
    end

    action ExitNoClassDeclaration(NoClassDeclarationContext ctx)
    end

    action EnterFormalParameter(FormalParameterContext context) end
    action ExitFormalParameter(FormalParameterContext context) end

    action EnterStatement(StatementContext context) end
    action ExitStatement(StatementContext context) end

    action EnterMe(MeContext context) end
    action ExitMe(MeContext context) end

    action EnterActionExpressionList(ActionExpressionListContext context) end
    action ExitActionExpressionList(ActionExpressionListContext context) end

    action EnterStart(StartContext context) 
    end
    action ExitStart(StartContext context) 
        FillFinalCommentBlocks()
    end

    private action FillFinalCommentBlocks()
        i = recentToken + 1
        repeat while i < lexer:GetSize()
            Token next = lexer:GetToken(i)
            boolean isComment = next:IsCommentChannel()
            if isComment
                CommentBlock comment
                comment:SetIsMultiLineComment(next:IsMultiLineComment())
                comment:SetToken(next)
                comment:SetScopeDepth(scopeDepth)
                comment:SetBlockEnvironment(editor)
                currentBlock:Add(cast(Block, comment))
                comment:Setup()
            end
            i = i + 1
        end

        recentToken = lexer:GetSize()
    end

    action EnterText(TextContext context) end
    action ExitText(TextContext context) end

    action EnterOr(AndOrContext context) end
    action ExitOr(AndOrContext context) end

    action EnterOutputStatement(OutputContext context) 
        OutputBlock block
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(editor)
        block:SetOutputContext(context)
        currentBlock:Add(cast(Block, block))

        block:Setup()
    end
    action ExitOutputStatement(OutputContext context) end

    action EnterSystemAction(ActionContext context) end
    action ExitSystemAction(ActionContext context) end

    action EnterConstructor(ConstructorContext context)
        ConstructorBlock block
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(editor)
        block:SetContext(context)

        MultipleLineBlockPart startLine = block:AddStartLine()
        
        currentBlock:Add(cast(Block, block))
        currentBlock = startLine

        scopeDepth = scopeDepth + 1
    end

    action ExitConstructor(ConstructorContext context)
        FillPreviousCommentBlocks(context:GetLastToken(), context:GetLastToken())
        ConstructorBlock block = cast(ConstructorBlock, currentBlock:GetParentBlock())
        block:AddEndLine()
        block:Setup()
        currentBlock = block:GetParentBlock()
        scopeDepth = scopeDepth - 1
    end

    action EnterBlueprintAction(ActionContext context) end
    action ExitBlueprintAction(ActionContext context) end

    action EnterActionHeader(ActionContext context) 
        ActionBlock block
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(editor)
        block:SetActionContext(context)

        currentBlock:Add(cast(Block, block))

        MultipleLineBlockPart startLine = block:AddStartLine()

        // system and blueprint actions are single line blocks
        if not context:isSystem and not context:isBlueprint
            currentBlock = startLine
            scopeDepth = scopeDepth + 1
        else
            // Don't change the current block, as this is essentially a single line block. Set up the block immediately.
            block:Setup()
        end
    end
    action ExitActionHeader(ActionContext context) 
        
    end

    action EnterAction(ActionContext context) 
    end
    action ExitAction(ActionContext context) 
        if not context:isSystem and not context:isBlueprint
            FillPreviousCommentBlocks(context:GetLastToken(), context:GetLastToken())
            // The current block must be one of the parts of an action block. Get the action block from the part.
            ActionBlock actionBlock = cast(ActionBlock, currentBlock:GetParentBlock())
            
            // Add the last line of the action block.
            actionBlock:AddEndLine()
    
            // Now that all parts have been added, call Setup on the block.
            actionBlock:Setup()

            // Go back to the parent of the action block.
            currentBlock = actionBlock:GetParentBlock()
            scopeDepth = scopeDepth - 1
        end
    end

    action EnterGenericStatement(GenericContext context) end
    action ExitGenericStatement(GenericContext context) end

    action EnterAnd(AndOrContext context) end
    action ExitAnd(AndOrContext context) end

    action EnterUndefined(UndefinedContext context) end
    action ExitUndefined(UndefinedContext context) end

    action EnterIs(IsContext context) end
    action ExitIs(IsContext context) end

    integer elseifCounter = 0
    action EnterIfStatement(IfContext context)
        IfBlock block
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(editor)
        block:SetContext(context)

        currentBlock:Add(cast(Block, block))
        MultipleLineBlockPart startLine = block:AddStartLine()
        
        currentBlock = startLine

        scopeDepth = scopeDepth + 1
        elseifCounter = 0
    end

    action ExitIfStatement(IfContext context)
        // The current block must be one of the parts of an if block. Get the if block from the part.
        IfBlock ifBlock = cast(IfBlock, currentBlock:GetParentBlock())
        FillPreviousCommentBlocks(context:GetLastToken(), context:GetLastToken())
        
        // Add the last line of the if block.
        ifBlock:AddEndLine()

        // Now that all parts have been added, call Setup on the block.
        ifBlock:Setup()

        // Go back to the parent of the if block.
        currentBlock = ifBlock:GetParentBlock()
        scopeDepth = scopeDepth - 1

        elseifCounter = 0
    end

    action EnterElseIfStatement(IfContext context)
        // The current block must be one of the parts of an if block. Get the if block from the part.
        IfBlock ifBlock = cast(IfBlock, currentBlock:GetParentBlock())
        FillPreviousCommentBlocks(context:elseIfTokens:Get(ifBlock:GetChildCount() - 1), context:GetLastToken())
        elseifCounter = elseifCounter + 1
        MultipleLineBlockPart newPart = ifBlock:AddElseifLine(ifBlock:GetChildCount() - 1)

        currentBlock = newPart
    end

    action ExitElseIfStatement(IfContext context)
    end

    action EnterElseStatement(IfContext context) 
        // The current block must be one of the parts of an if block. Get the if block from the part.
        IfBlock ifBlock = cast(IfBlock, currentBlock:GetParentBlock())
        FillPreviousCommentBlocks(context:elseToken, context:GetLastToken())

        MultipleLineBlockPart newPart = ifBlock:AddElseLine()

        currentBlock = newPart
    end

    action ExitElseStatement(IfContext context) 
    end

    action EnterAccessModifier(AccessModifierContext context) end
    action ExitAccessModifier(AccessModifierContext context) end

    action EnterBlock(BlockContext context) end
    action ExitBlock(BlockContext context) end

    action EnterClassStatements(ClassStatementsContext context) end
    action ExitClassStatements(ClassStatementsContext context) end

    action EnterQualifiedName(QualifiedNameContext context) end
    action ExitQualifiedName(QualifiedNameContext context) end

    action EnterLoopStatement(LoopContext context)
        RepeatBlock block
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(editor)
        block:SetContext(context)

        currentBlock:Add(cast(Block, block))
        MultipleLineBlockPart startLine = block:AddStartLine()
        
        currentBlock = startLine
        scopeDepth = scopeDepth + 1
    end

    action ExitLoopStatement(LoopContext context)
        RepeatBlock repeatBlock = cast(RepeatBlock, currentBlock:GetParentBlock())
        FillPreviousCommentBlocks(context:GetLastToken(), context:GetLastToken())

        repeatBlock:AddEndLine()
        repeatBlock:Setup()

        currentBlock = repeatBlock:GetParentBlock()
        scopeDepth = scopeDepth - 1
    end

    action EnterAssignmentDeclaration(AssignmentDeclaractionContext context) end
    action ExitAssignmentDeclaration(AssignmentDeclaractionContext context) end

    action EnterInheritStatements(InheritStatementsContext context) end
    action ExitInheritStatements(InheritStatementsContext context) end

    action EnterInheritStatement(InheritStatementContext context) end
    action ExitInheritStatement(InheritStatementContext context) end

    action EnterDetectStatement(DetectStatementContext context)
        CheckBlock checkBlock = cast(CheckBlock, currentBlock:GetParentBlock())
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())

        MultipleLineBlockPart newPart = checkBlock:AddDetectLine(context)

        currentBlock = newPart
    end
    action ExitDetectStatement(DetectStatementContext context) end

    action EnterAlwaysStatement(AlwaysStatementContext context)
        CheckBlock checkBlock = cast(CheckBlock, currentBlock:GetParentBlock())
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())

        MultipleLineBlockPart newPart = checkBlock:AddAlwaysLine(context)

        currentBlock = newPart
    end
    action ExitAlwaysStatement(AlwaysStatementContext context) end

    action EnterAddition(AdditionContext addition) end
    action ExitAddition(AdditionContext addition) end

    action EnterReturnStatement(ReturnContext context)
        ReturnBlock block
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(editor)
        block:SetContext(context)
        currentBlock:Add(cast(Block, block))

        block:Setup()
    end
    action ExitReturnStatement(ReturnContext context) end

    action EnterInput(InputContext context) end
    action ExitInput(InputContext context) end

    action EnterInputNoParameters(InputContext context) end
    action ExitInputNoParameters(InputContext context) end

    action EnterMultiplication(MultiplicationContext context) end
    action ExitMultiplication(MultiplicationContext context) end

    action EnterMinus(UnaryMinusContext context) end
    action ExitMinus(UnaryMinusContext context) end

    action EnterBoolean(BooleanContext context) end
    action ExitBoolean(BooleanContext context) end

    action EnterAlertStatement(AlertContext context)
        AlertBlock block
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(editor)
        block:SetContext(context)
        currentBlock:Add(cast(Block, block))

        block:Setup()
    end
    action ExitAlertStatement(AlertContext context) end

    action EnterUse(UseContext context)
        UseBlock block
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(editor)
        block:SetContext(context)
        currentBlock:Add(cast(Block, block))

        block:Setup()
    end
    action ExitUse(UseContext context) end

    action EnterNot(NotContext context) end
    action ExitNot(NotContext context) end

    action EnterGenericDeclaration(GenericDeclarationContext context) end
    action ExitGenericDeclaration(GenericDeclarationContext context) end

    action EnterClassType(ClassTypeContext context) end
    action ExitClassType(ClassTypeContext context) end

    action EnterEquals(EqualsContext context) end
    action ExitEquals(EqualsContext context) end

    action EnterInequality(InequalityContext context) end
    action ExitInequality(InequalityContext context) end

    action EnterInteger(IntegerContext int) end
    action ExitInteger(IntegerContext int) end

    action EnterPackageRule(PackageContext context)
        PackageBlock block
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(editor)
        block:SetContext(context)
        currentBlock:Add(cast(Block, block))

        block:Setup()
    end
    action ExitPackageRule(PackageContext context) end

    action EnterNormalAssignment(NormalAssignmentContext context)
        AssignmentBlock block
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(editor)
        block:SetContext(context)
        currentBlock:Add(cast(Block, block))

        block:Setup()
    end
    action ExitNormalAssignment(NormalAssignmentContext context)
    end

    action EnterParentAssignment(ParentAssignmentContext context)
        AssignmentBlock block
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(editor)
        block:SetContext(context)
        currentBlock:Add(cast(Block, block))

        block:Setup()
    end
    action ExitParentAssignment(ParentAssignmentContext context) end

    action EnterObjectAssignment(ObjectAssignmentContext context)
        AssignmentBlock block
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(editor)
        block:SetContext(context)
        currentBlock:Add(cast(Block, block))

        block:Setup()
    end
    action ExitObjectAssignment(ObjectAssignmentContext context) end

    action EnterNoTypeAssignment(NoTypeAssignmentContext context)
        AssignmentBlock block
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(editor)
        block:SetContext(context)
        currentBlock:Add(cast(Block, block))

        block:Setup()
    end
    action ExitNoTypeAssignment(NoTypeAssignmentContext context) end

    action EnterMeVariableAccess(MeVariableAccessContext context) end
    action ExitMeVariableAccess(MeVariableAccessContext context) end

    action EnterVariableSoloFunctionCall(VariableFunctionCallContext context)
        ActionCallBlock block
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(editor)
        block:SetContext(context)
        currentBlock:Add(cast(Block, block))

        block:Setup()
    end
    action ExitVariableSoloFunctionCall(VariableFunctionCallContext context) end

    action EnterParentVariableSoloFunctionCall(ParentVariableFunctionCallContext context)
        ActionCallBlock block
        FillPreviousCommentBlocks(context:GetFirstToken(), context:GetLastToken())
        block:SetScopeDepth(scopeDepth)
        block:SetBlockEnvironment(editor)
        block:SetContext(context)
        currentBlock:Add(cast(Block, block))

        block:Setup()
    end
    action ExitParentVariableSoloFunctionCall(ParentVariableFunctionCallContext context) end

    action EnterInitialParentActionCall(ActionCallContext ctx) end
    action ExitInitialParentActionCall(ActionCallContext ctx) end

    action EnterVariableFunctionCall(VariableFunctionCallContext context) end
    action ExitVariableFunctionCall(VariableFunctionCallContext context) end

    action EnterParentVariableFunctionCall(ParentVariableFunctionCallContext context) end
    action ExitParentVariableFunctionCall(ParentVariableFunctionCallContext context) end

    action EnterActionCall(ActionCallContext ctx) end
    action ExitActionCall(ActionCallContext ctx) end

    action GetStartContext returns StartContext
        return startContext
    end

    action SetStartContext(StartContext startContext)
        me:startContext = startContext
    end

    /*
        The start and end line to parse off of.
    */
    action Update(integer start, integer finish) returns RootBlock
        startLine = start
        finishLine = finish
        if startContext = undefined
            rootBlock:EmptyChildBlocks()
            rootBlock:SetBlockEnvironment(editor)
            rootBlock:SetStartContext(undefined)
            return rootBlock
        end

        rootBlock:EmptyChildBlocks()
        rootBlock:SetBlockEnvironment(editor)
        rootBlock:SetStartContext(startContext)
        currentBlock = rootBlock

        startContext:Traverse(me)

        return rootBlock
    end

    action GetBlockEnvironment returns BlockEnvironment
        return editor
    end

    action SetBlockEnvironment(BlockEnvironment editor)
        me:editor = editor
    end

    action GetQuorumLexer returns QuorumLexer
        return lexer
    end

    action SetQuorumLexer(QuorumLexer lexer)
        me:lexer = lexer
    end
end