package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Location
use Libraries.Language.Compile.Symbol.ActionCallResolution
use Libraries.Language.Compile.Symbol.Action
use Libraries.Language.Compile.Symbol.Class
use Libraries.Language.Compile.Symbol.Variable
use Libraries.Containers.Array
use Libraries.Language.Compile.Interpreter.Runtime
use Libraries.Language.Compile.Interpreter.Result
use Libraries.Language.Compile.Interpreter.RuntimeBlock

class ActionCallOpcode is QuorumOpcode
    JavaBytecodeOpcodes opcodes
    boolean isActionCall = false
    ActionCallResolution actionResolution = undefined
    boolean pushOnMe = false
    boolean isField = false
    Variable field = undefined
    Class fieldHolder = undefined
    Array<QuorumOpcode> parameters = undefined
    Array<Type> parameterTypes = undefined
    Class callingClass = undefined
    boolean isChainedCall = false
    boolean isSoloObjectCall = false
    boolean isParentCall = false
    Variable variableToMakeParentCallOn = undefined
    Class classToMakeParentCallOn = undefined
    

    Class parentToCallOn = undefined
    QuorumOpcode autoBoxing = undefined
    Type callerType = undefined
    
    boolean isInFieldBlock = false
    action IsInFieldBlock returns boolean
        return isInFieldBlock
    end

    action SetIsInFieldBlock(boolean block)
        isInFieldBlock = block
    end

    action SetBytecodeWriteOffsetToAllChildren(integer offset)
        SetBytecodeWriteOffset(offset)

        integer numParams = 0
        if parameters not= undefined
            numParams = parameters:GetSize()
        end

        i = 0
        repeat numParams times
            QuorumOpcode param = parameters:Get(i)
            param:SetBytecodeWriteOffsetToAllChildren(offset)
            i = i + 1
        end

        if autoBoxing not= undefined
            autoBoxing:SetBytecodeWriteOffsetToAllChildren(offset)
        end
    end

    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)
        integer numParams = 0
        if parameters not= undefined
            numParams = parameters:GetSize()
        end

        i = 0
        repeat numParams times
            QuorumOpcode param = parameters:Get(i)
            param:SetMethodWriterToAllChildren(writer)
            i = i + 1
        end

        if autoBoxing not= undefined
            autoBoxing:SetMethodWriterToAllChildren(writer)
        end
    end

    action Evaluate(Runtime runtime)
        RuntimeBlock block = runtime:GetCurrentBlock()
        text name = field:GetName()
        Result result = block:GetVariableResult(name)        
        runtime:PushToStack(result)
    end

    action SetVariableToMakeParentCallOn(Variable variable)
        variableToMakeParentCallOn = variable
    end

    action GetVariableToMakeParentCallOn returns Variable
        return variableToMakeParentCallOn
    end

    action SetClassToMakeParentCallOn(Class clazz)
        classToMakeParentCallOn = clazz
    end

    action GetClassToMakeParentCallOn returns Class
        return classToMakeParentCallOn
    end

    action IsParentCall returns boolean
        return isParentCall
    end

    action SetIsParentCall(boolean isParent)
        isParentCall = isParent
    end

    action GetParentToCallOn returns Class
        return parentToCallOn
    end

    action SetParentToCallOn(Class clazz)
        parentToCallOn = clazz
    end

    action GetCallerType returns Type
        return callerType
    end

    action SetCallerType(Type type)
        me:callerType = type
    end

    action GetAutoBoxOpcode returns QuorumOpcode
        return autoBoxing
    end

    action SetAutoBoxOpcode(QuorumOpcode opcode)
        autoBoxing = opcode
    end

    action IsSoloObjectCall returns boolean
        return isSoloObjectCall
    end

    action SetIsSoloObjectCall(boolean call)
        isSoloObjectCall = call
    end

    action IsChainedCall returns boolean
        return isChainedCall
    end

    action SetChainedCall(boolean chained)
        isChainedCall = chained
    end

    action GetCallingClass returns Class
        return callingClass
    end

    action SetCallingClass(Class cl) 
        callingClass = cl
    end

    action GetParameters returns Array<QuorumOpcode>
        return parameters
    end

    action SetParameters(Array<QuorumOpcode> array)
        parameters = array
    end

    action GetParameterTypes returns Array<Type>
        return parameterTypes
    end

    action SetParameterTypes(Array<Type> array)
        parameterTypes = array
    end

    action IsField returns boolean
        return isField
    end

    action SetIsField(boolean field)
        isField = field
    end

    action GetField returns Variable
        return field
    end

    action SetField(Variable field)
        me:field = field
    end

    action GetFieldHolder returns Class
        return fieldHolder
    end

    action SetFieldHolder(Class fieldHolder)
        me:fieldHolder = fieldHolder
    end

    action GetPushOnMe returns boolean
        return pushOnMe
    end

    action SetPushOnMe(boolean this)
        pushOnMe = this
    end

    action GetActionCallResolution returns ActionCallResolution
        return actionResolution
    end

    action SetActionCallResolution(ActionCallResolution resolution)
        actionResolution = resolution
        Action act = actionResolution:resolvedAction
        Type returnType = act:GetReturnType()
        me:SetType(returnType)
    end

    action IsActionCall returns boolean
        return isActionCall
    end

    action SetIsActionCall(boolean act)
        isActionCall = act
    end

    action LoadHiddenMe
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        methodWriter:VisitVariable(opcodes:GetObjectLoad(), 0)

        //if this is an error class, it is a class, not an interface.
        if not callingClass:IsError()
            //owner, name, description
            text owner = callingClass:ConvertStaticKeyToBytecodePath()
            text name = "hidden_"
            text description = callingClass:ConvertStaticKeyToBytecodePathTypeNameInterface()
            methodWriter:VisitField(opcodes:GetField(), owner, name, description)
        end
    end

    action Write
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        VisitLineNumber()

        if isActionCall
            if isParentCall //if this is a parent variable, push it on.
                WriteParentVariable()
                //return now
            elseif pushOnMe //if there's a variable, load it.
                //push on the variable hidden_
                LoadHiddenMe()
            end

            if isSoloObjectCall
                if field:IsField()
                    Type type = field:GetType()
                    path = callingClass:ConvertStaticKeyToBytecodeInterfacePath()
                    methodWriter:VisitVariable(opcodes:GetObjectLoad(), 0)
                    getterName = fieldHolder:ConvertToActionNameFromField(field, true)
                    methodName = type:ConvertToSignatureFromFieldInterface(true)

                    if not callingClass:IsError()
                        methodWriter:VisitMethodInvoke(opcodes:GetInvokeInterface(), 
                            path, getterName, methodName, true)
                    else
                        methodWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), 
                            callingClass:ConvertStaticKeyToBytecodePath(), getterName, methodName, false)
                    end
                else
                    methodWriter:VisitVariable(opcodes:GetObjectLoad(), field:GetBytecodeLocation() + CalculateBytecodeOffset(field))
                end
            end

            Action act = actionResolution:resolvedAction
            Class clazz = actionResolution:classToMakeCallOn
            //This is a special case where we are calling from a parent Object, 
            //which in Quorum-11 means we need to route it to a static function
            //in order to do that, we need to add a parameter for the main class
            //of this so the static function knows which class is being referenced
            //So effectively we need "me" twice on the stack.
            if act not= undefined and clazz not= undefined and isParentCall and clazz:IsObject()
                methodWriter:VisitVariable(opcodes:GetObjectLoad(), 0)
            end

            //push on parameters, if necessary
            integer numParams = parameters:GetSize()
            i = 0
            repeat numParams times
                QuorumOpcode param = parameters:Get(i)
                param:Write()
                i = i + 1
            end

            if isParentCall
                clazz = parentToCallOn
            end

            if act not= undefined and clazz not= undefined
                if actionResolution:isCallOnPrimitive
                    text path = "plugins/" + clazz:ConvertStaticKeyToBytecodePath()
                    text signature = act:ConvertPrimitiveActionToBytecodeParameterInterfaceSignature()
                    text primitiveName = "Primitive" + act:GetName()
                    methodWriter:VisitMethodInvoke(opcodes:GetInvokeStatic(), 
                        path, primitiveName, signature, false)
                else
                    if not clazz:IsError()
                        //in the case that we are explicitly calling a parent object's action, 
                        //we need the original action
                        if isParentCall and clazz:IsObject()
                            classReference = callingClass:ConvertStaticKeyToBytecodeInterfacePath()
                            text sharedPlugin = "plugins/quorum/Libraries/Language/SharedClass"
                            text quorumObjectInterface = clazz:ConvertStaticKeyToBytecodePathTypeNameInterface()
                            if act:GetName() = "Equals"
                                methodWriter:VisitMethodInvoke(opcodes:GetInvokeStatic(), sharedPlugin, 
                                "ObjectEquals", "("+quorumObjectInterface+quorumObjectInterface+")Z", false)
                            elseif act:GetName() = "GetHashCode"
                                methodWriter:VisitMethodInvoke(opcodes:GetInvokeStatic(), sharedPlugin, 
                                "ObjectGetHashCode", "("+quorumObjectInterface+")I", false)
                            elseif act:GetName() = "Compare"
                                methodWriter:VisitMethodInvoke(opcodes:GetInvokeStatic(), sharedPlugin, 
                                "ObjectCompare", "("+quorumObjectInterface+quorumObjectInterface+")I", false)
                            end
                            
                        else
                            methodWriter:VisitMethodInvoke(opcodes:GetInvokeInterface(), 
                                clazz:ConvertStaticKeyToBytecodeInterfacePath(), act:GetName(), 
                                act:ConvertActionToBytecodeParameterInterfaceSignature(), true)
                        end
                        
                    else
                        methodWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), 
                            clazz:ConvertStaticKeyToBytecodePath(), act:GetName(), 
                            act:ConvertActionToBytecodeParameterInterfaceSignature(), false)
                    end
                end
            end

            if autoBoxing not= undefined
                autoBoxing:Write()
            end
        else

            if isParentCall //if this is a parent variable, push it on.
                WriteParentVariable()
                
                Type type = GetCallerType()
                if not field:IsField()
                    methodWriter:VisitVariable(opcodes:ConvertTypeToBytecodeLoadOpcode(GetCallerType()), field:GetBytecodeLocation() + CalculateBytecodeOffset(field))
                else
                    //Now write the getter for the field
                    text path = ""
                    if variableToMakeParentCallOn not= undefined
                        path = parentToCallOn:ConvertStaticKeyToBytecodeInterfacePath()
                    end

                    if variableToMakeParentCallOn = undefined
                        path = parentToCallOn:ConvertStaticKeyToBytecodeInterfacePath()
                    end

                    getterName = parentToCallOn:ConvertToActionNameFromField(field, true)
                    methodName = type:ConvertToSignatureFromFieldInterface(true)
                    methodWriter:VisitMethodInvoke(opcodes:GetInvokeInterface(), 
                        path, getterName, methodName, true)
                end
                return now
            end

            Type type = GetCallerType()
            if not field:IsField()
                methodWriter:VisitVariable(opcodes:ConvertTypeToBytecodeLoadOpcode(GetCallerType()), field:GetBytecodeLocation() + CalculateBytecodeOffset(field))
            else
                //Now write the getter for the field
                text path = ""
                if isChainedCall
                    if not callingClass:IsError()
                        path = fieldHolder:ConvertStaticKeyToBytecodeInterfacePath()
                    else
                        path = fieldHolder:ConvertStaticKeyToBytecodePath()
                    end
                end

                if not isChainedCall
                    if not callingClass:IsError()
                        path = callingClass:ConvertStaticKeyToBytecodeInterfacePath()
                    else
                        path = callingClass:ConvertStaticKeyToBytecodePath()
                    end
                end
                
                getterName = fieldHolder:ConvertToActionNameFromField(field, true)
                methodName = type:ConvertToSignatureFromFieldInterface(true)
                if pushOnMe and not isParentCall
                    methodWriter:VisitVariable(opcodes:GetObjectLoad(), 0)
                end

                if not callingClass:IsError()
                    methodWriter:VisitMethodInvoke(opcodes:GetInvokeInterface(), 
                        path, getterName, methodName, true)
                else
                    methodWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), 
                        path, getterName, methodName, false)
                end
            end
        end
    end

    action WriteParentVariable
        //if this parent call was made on a variable, push that on.
                //otherwise, make the call on the current class this is in.
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        if variableToMakeParentCallOn not= undefined
            if not variableToMakeParentCallOn:IsField()
                methodWriter:VisitVariable(opcodes:ConvertTypeToBytecodeLoadOpcode(variableToMakeParentCallOn:GetType()), variableToMakeParentCallOn:GetBytecodeLocation())
            else
                Type type = variableToMakeParentCallOn:GetType()
                text path = ""
                path = callingClass:ConvertStaticKeyToBytecodeInterfacePath()


                getterName = callingClass:ConvertToActionNameFromField(variableToMakeParentCallOn, true)
                methodName = type:ConvertToSignatureFromFieldInterface(true)
                methodWriter:VisitVariable(opcodes:GetObjectLoad(), 0)
                methodWriter:VisitMethodInvoke(opcodes:GetInvokeInterface(), 
                    path, getterName, methodName, true)
            end
        else 
            methodWriter:VisitVariable(opcodes:GetObjectLoad(), 0)
        end

        text owner = ""
        if variableToMakeParentCallOn not= undefined
            owner = classToMakeParentCallOn:ConvertStaticKeyToBytecodeInterfacePath()
        else
            owner = callingClass:ConvertStaticKeyToBytecodeInterfacePath()
        end
        text name = parentToCallOn:ConvertStaticKeyToParentActionName()
        text description = "()" + parentToCallOn:ConvertStaticKeyToBytecodePathTypeName()

        //If the parent we are calling is object, this is not necessary
        if not parentToCallOn:IsObject()
            methodWriter:VisitMethodInvoke(opcodes:GetInvokeInterface(), 
                owner, name, description, true)
        end
    end

    action WritePython returns text 
        text result = ""
        if isActionCall
            Action act = actionResolution:resolvedAction
            Class clazz = act:GetParentClass()
            
            if isParentCall
                if variableToMakeParentCallOn not= undefined
                    //in Quorum-11, this is not true for objects
                    if not variableToMakeParentCallOn:IsField()
                        result = result + variableToMakeParentCallOn:GetJavaScriptName()
                    else
                        result = result + "self." + variableToMakeParentCallOn:GetJavaScriptName()
                    end
                end

                if parentToCallOn not= undefined
                    text value = parentToCallOn:ConvertStaticKeyToParentFieldName()
                    if not parentToCallOn:IsObject()
                        if variableToMakeParentCallOn not= undefined
                            result = result + "." + value
                        else
                            result = result + "self." + value
                        end
                    end
                end
            end

            if not pushOnMe //object call
                text name = act:ConvertActionToPythonName()
                if field = undefined
                    if actionResolution:isCallOnPrimitive
                        text value = clazz:ConvertStaticKeyToJavaScriptName()
                        if clazz:GetStaticKey() = "Libraries.Language.Types.Integer"
                            name = name + "$IntegerPrimitive"
                        elseif clazz:GetStaticKey() = "Libraries.Language.Types.Number"
                            name = name + "$NumberPrimitive"
                        end
                        
                        result = result + "." + name + "("
                    else 
                        result = result + "." + name + "("
                    end
                else 
                    if field:IsField()
                        result = result + "self." + field:GetJavaScriptName() + "." + name + "("
                    else
                        result = result + field:GetJavaScriptName() + "." + name + "("
                    end
                end
            else 
                if isParentCall
                    if not parentToCallOn:IsObject()
                        text t = "." + act:ConvertActionToPythonName()
                        result = result + t + "("
                    else
                        if act:GetName() = "Equals"
                            result = result + "global_Object_Equals(this.prototype, "
                        elseif act:GetName() = "GetHashCode"
                            result = result + "global_Object_GetHashCode(this.prototype, "
                        elseif act:GetName() = "Compare"
                            result = result + "global_Object_Compare(this.prototype, "
                        end
                    end
                else
                    text t = "self.me_." + act:ConvertActionToPythonName()
                    result = result + t + "("
                end
            end

            integer numParams = parameters:GetSize()
            i = 0
            repeat numParams times
                QuorumOpcode param = parameters:Get(i)
                result = result + param:WritePython()
                i = i + 1

                if i < numParams
                    result = result + ", "
                end
            end
            
            result = result + ")"

            
            if autoBoxing not= undefined
                result = result + autoBoxing:WritePython()
            end
            result = result
        else
            if field:IsField()
                if isChainedCall
                    Class p = field:GetParentClass()
                    result = result + "." + p:ConvertToActionNameFromField(field, true) + "()"
                else
                    if isParentCall
                        path = parentToCallOn:ConvertStaticKeyToParentFieldName()
                        result = result 
                        if variableToMakeParentCallOn not= undefined
                            if variableToMakeParentCallOn:IsField()
                                result = result + "self."
                            end
                            result = result + variableToMakeParentCallOn:GetJavaScriptName() + "."
                        else 
                            result = result + "self."
                        end
                        result = result + path + "." + field:GetJavaScriptName()
                    else
                        Class p = field:GetParentClass()
                        result = result + "self." + p:ConvertToActionNameFromField(field, true) + "()"
                    end
                    
                end
            else
                result = result + field:GetJavaScriptName()
            end
            
        end
        return result
    end

    action WriteJavaScript returns text 
        text result = ""
        if isActionCall
            Action act = actionResolution:resolvedAction
            Class clazz = act:GetParentClass()
            
            if isParentCall
                if variableToMakeParentCallOn not= undefined
                    //in Quorum-11, this is not true for objects
                    if not variableToMakeParentCallOn:IsField()
                        result = result + "this." + variableToMakeParentCallOn:GetJavaScriptName()
                    else
                        result = result + variableToMakeParentCallOn:GetJavaScriptName()
                    end
                end

                if parentToCallOn not= undefined
                    text value = parentToCallOn:ConvertStaticKeyToParentFieldName()
                    if not parentToCallOn:IsObject()
                        if variableToMakeParentCallOn not= undefined
                            result = result + "." + value
                        else
                            result = result + "this." + value
                        end
                    end
                end
            end

            if not pushOnMe //object call
                text name = act:ConvertActionToJavaScriptName()
                if field = undefined
                    if actionResolution:isCallOnPrimitive
                        text value = clazz:ConvertStaticKeyToJavaScriptName()
                        if clazz:GetStaticKey() = "Libraries.Language.Types.Integer"
                            name = name + "$IntegerPrimitive"
                        elseif clazz:GetStaticKey() = "Libraries.Language.Types.Number"
                            name = name + "$NumberPrimitive"
                        end
                        
                        result = result + "." + name + "("
                    else 
                        result = result + "." + name + "("
                    end
                else 
                    if field:IsField()
                        result = result + "this." + field:GetJavaScriptName() + "." + name + "("
                    else
                        result = result + field:GetJavaScriptName() + "." + name + "("
                    end
                end
            else 
                if isParentCall
                    if not parentToCallOn:IsObject()
                        text t = "." + act:ConvertActionToJavaScriptName()
                        result = result + t + "("
                    else
                        if act:GetName() = "Equals"
                            result = result + "global_Object_Equals(this.prototype, "
                        elseif act:GetName() = "GetHashCode"
                            result = result + "global_Object_GetHashCode(this.prototype, "
                        elseif act:GetName() = "Compare"
                            result = result + "global_Object_Compare(this.prototype, "
                        end
                    end
                else
                    text t = "this.prototype." + act:ConvertActionToJavaScriptName()
                    result = result + t + "("
                end
            end

            integer numParams = parameters:GetSize()
            i = 0
            repeat numParams times
                QuorumOpcode param = parameters:Get(i)
                result = result + param:WriteJavaScript()
                i = i + 1

                if i < numParams
                    result = result + ", "
                end
            end
            
            result = result + ")"

            
            if autoBoxing not= undefined
                result = result + autoBoxing:WriteJavaScript()
            end
            EOL = ""
            result = result + EOL

        else
            if field:IsField()
                if isChainedCall
                    Class p = field:GetParentClass()
                    result = result + "." + p:ConvertToActionNameFromField(field, true) + "()"
                else
                    if isParentCall
                        path = parentToCallOn:ConvertStaticKeyToParentFieldName()
                        result = result 
                        if variableToMakeParentCallOn not= undefined
                            if variableToMakeParentCallOn:IsField()
                                result = result + "this."
                            end
                            result = result + variableToMakeParentCallOn:GetJavaScriptName() + "."
                        else 
                            result = result + "this."
                        end
                        result = result + path + "." + field:GetJavaScriptName()
                    else
                        Class p = field:GetParentClass()
                        result = result + "this." + p:ConvertToActionNameFromField(field, true) + "()"
                    end
                    
                end
            else
                result = result + field:GetJavaScriptName()
            end
            
        end
        return result
    end

    action GetTemplateCopy returns QuorumOpcode
        ActionCallOpcode op
        Type t = GetType()
        me:SetType(t:Copy())
        return op
    end
end