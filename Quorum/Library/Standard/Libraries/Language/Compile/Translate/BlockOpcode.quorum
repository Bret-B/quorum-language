package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Symbol.Block
use Libraries.Language.Compile.Symbol.Variable
use Libraries.Language.Compile.Symbol.Action
use Libraries.Containers.List
use Libraries.Containers.Iterator

class BlockOpcode is QuorumOpcode
    List<QuorumOpcode> opcodes
    BlockOpcode parentOpcode = undefined
    Block block = undefined

    action SetBlock(Block block)
        me:block = block
    end

    action GetBlock returns Block
        return block
    end

    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)
        Iterator<QuorumOpcode> it = opcodes:GetIterator()
        repeat while it:HasNext()
            QuorumOpcode op = it:Next()
            op:SetMethodWriterToAllChildren(writer)
        end
    end

    action SetBytecodeWriteOffsetToAllChildren(integer offset)
        SetBytecodeWriteOffset(offset)
        Iterator<QuorumOpcode> it = opcodes:GetIterator()
        repeat while it:HasNext()
            QuorumOpcode op = it:Next()
            op:SetBytecodeWriteOffsetToAllChildren(offset)
        end
    end

    action Write
        JavaBytecodeLabel start
        JavaBytecodeLabel finish
        JavaBytecodeMethodWriter writer = GetMethodWriter()

        writer:VisitLabel(start)
        Iterator<QuorumOpcode> iterator = opcodes:GetIterator()
        repeat while iterator:HasNext()
            QuorumOpcode opcode = iterator:Next()
            opcode:Write()
        end
        writer:VisitLabel(finish)

        //now get all the variables in this block and write the debugging
        //table
        Iterator<Variable> variables = block:GetVariables()
        repeat while variables:HasNext()
            Variable variable = variables:Next()

            if not variable:IsField() and variable:IsVisibleToDebugger()
                Type type = variable:GetType()

                text description = type:ConvertTypeToBytecodeSignatureInterface()
                text signature = type:ConvertTypeToBytecodeSignatureInterface()
                integer location = variable:GetBytecodeLocation()
                writer:VisitLocalVariable(variable:GetName(), description,
                    undefined, start, finish, location)
            end
        end
    end

    action GetParentBlock returns BlockOpcode
        return parentOpcode
    end

    action SetParentBlock(BlockOpcode block)
        parentOpcode = block
    end

    /*
        This action returns true only if the block contains opcodes. This is
        potentially useful for the case when a block exists, but there
        is no valid code inside of it.
    */
    action IsEmpty returns boolean
        return opcodes:IsEmpty()
    end

    action WritePython returns text
        text result = ""
        Iterator<QuorumOpcode> iterator = opcodes:GetIterator()
        repeat while iterator:HasNext()
            QuorumOpcode opcode = iterator:Next()
            result = result + opcode:WritePython()
        end

        return result
    end

    action WriteJavaScript returns text
        text result = ""
        Iterator<QuorumOpcode> iterator = opcodes:GetIterator()
        repeat while iterator:HasNext()
            QuorumOpcode opcode = iterator:Next()
            result = result + opcode:WriteJavaScript()
        end

        return result
    end

    action GetTemplateCopy returns QuorumOpcode
        BlockOpcode op
        return op
    end

    action Add(QuorumOpcode opcode)
        opcodes:Add(opcode)
    end
end