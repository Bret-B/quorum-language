package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Interpreter.Runtime
use Libraries.Language.Compile.Interpreter.Result

class NumberToTextCast is ExplicitCastOpcode
    JavaBytecodeOpcodes opcodes

    action Write
        VisitLineNumber()
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()

        QuorumOpcode opcodeToCast = GetOpcodeToCast()
        if opcodeToCast not= undefined
            opcodeToCast:Write()
        end
        methodWriter:VisitMethodInvoke(opcodes:GetInvokeStatic(), "java/lang/Double", "toString",
                "(D)Ljava/lang/String;", false)
    end
    
    action WritePython returns text
        text result = ""
        text DQ = result:GetDoubleQuote()
        QuorumOpcode opcodeToCast = GetOpcodeToCast()
        if opcodeToCast not= undefined
            text temp = opcodeToCast:WritePython()
            result = result + " Global_Cast_Number_To_Text(" + temp + ")"
        end
        return result
    end

    action WriteJavaScript returns text
        text result = ""
        text DQ = result:GetDoubleQuote()
        QuorumOpcode opcodeToCast = GetOpcodeToCast()
        if opcodeToCast not= undefined
            text temp = opcodeToCast:WriteJavaScript()
            result = result + "(global_number_converter_(" + temp + "))"
        end
        return result
    end

    action Evaluate(Runtime runtime)
        QuorumOpcode opcodeToCast = GetOpcodeToCast()
        if opcodeToCast not= undefined
            Result left = runtime:PopFromStack()

            Result result
            Type type
            
            result:type = type
            type:SetToText()

            if left not= undefined
                result:textValue = "" + left:numberValue
                runtime:PushToStack(result)
            end
        end
    end

    action GetTemplateCopy returns QuorumOpcode
        NumberToTextCast op
        op:SetType(me:GetType())
        return op
    end
end