package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Symbol.Operation
use Libraries.Language.Compile.Interpreter.Result
use Libraries.Language.Compile.Interpreter.Runtime

class BinaryAndOrOpcode is QuorumOpcode
    public boolean isAnd = true
    public QuorumOpcode left = undefined
    public QuorumOpcode right = undefined
    //public JavaBytecodeMethodWriter methodWriter = undefined
    JavaBytecodeLabel trueLabel = undefined
    JavaBytecodeLabel falseLabel = undefined
    JavaBytecodeLabel finalLabel = undefined
    JavaBytecodeLabel leftHandSideLabel = undefined
    JavaBytecodeLabel rightHandSideLabel = undefined
    JavaBytecodeLabel jumpLabel = undefined
    JavaBytecodeOpcodes opcodes
    public boolean hasParent = false
    public boolean isOnLeft = false
    public BinaryAndOrOpcode opcodeParent = undefined
    Operation op = undefined

    action SetOperation(Operation op)
        me:op = op
    end

    action GetOperation returns Operation
        return op
    end

    action IsAnd returns boolean
        return isAnd
    end

    action IsOnLeft returns boolean
        return isOnLeft
    end

    action Evaluate(Runtime runtime)
        me:left:Evaluate(runtime)
        Result left = runtime:PopFromStack()
        integer current = op:GetOperation()

        Result result
        Type type
        
        result:type = type

        //short circuit at runtime
        if current = op:AND
            type:SetToBoolean()
            if not left:booleanValue //if it's false, push false and bail 
                result:booleanValue = false
            else //evaluate the right hand side
                me:right:Evaluate(runtime)
                Result right = runtime:PopFromStack()
                if right:booleanValue
                    result:booleanValue = true
                else
                    result:booleanValue = false
                end
            end

            runtime:PushToStack(result)
            return now
        elseif current = op:OR
            type:SetToBoolean()
            if left:booleanValue //if it's true, push true and bail 
                result:booleanValue = true
            else //evaluate the right hand side, becaue the left is false
                me:right:Evaluate(runtime)
                Result right = runtime:PopFromStack()
                if right:booleanValue
                    result:booleanValue = true
                else
                    result:booleanValue = false
                end
            end

            runtime:PushToStack(result)
            return now
        end

        runtime:PushToStack(result)
    end

    action SetBytecodeWriteOffsetToAllChildren(integer offset)
        SetBytecodeWriteOffset(offset)
        if left not= undefined
            left:SetBytecodeWriteOffsetToAllChildren(offset)
        end

        if right not= undefined
            right:SetBytecodeWriteOffsetToAllChildren(offset)
        end
    end

    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)
        Libraries.Language.Compile.Location value = GetLocation()
        if left not= undefined
            left:SetMethodWriterToAllChildren(writer)
        end

        if right not= undefined
            right:SetMethodWriterToAllChildren(writer)
        end
    end

    action WritePython returns text
        //This isn't working yet, it's just been stubbed in
        text result = "(" + left:WritePython()
        text operator = ""
        integer current = op:GetOperation()

        if current = op:PLUS
            operator =  "+"
        elseif current = op:MINUS
            operator =  "-"
        elseif current = op:TIMES
            operator =  "*"
        elseif current = op:DIVIDE
            operator =  "/"
        elseif current = op:MODULUS
            operator =  "%"
        elseif current = op:AND
            operator =  "and"
        elseif current = op:OR
            operator =  "or"
        elseif current = op:EQUALS
            operator =  "=="
        elseif current = op:NOT_EQUALS
            operator =  "!="
        elseif current = op:GREATER_EQUALS
            operator =  ">="
        elseif current = op:GREATER
            operator =  ">"
        elseif current = op:LESS_EQUALS
            operator =  "<="
        elseif current = op:LESS
            operator =  "<"
        elseif current = op:NOT
            operator =  "!"
        end

        result = result + " " + operator
        result = result + " " + right:WritePython() + ")"
        return result
    end

    action WriteJavaScript returns text
        //This isn't working yet, it's just been stubbed in
        text result = "(" + left:WriteJavaScript()
        text operator = ""
        integer current = op:GetOperation()

        if current = op:PLUS
            operator =  "+"
        elseif current = op:MINUS
            operator =  "-"
        elseif current = op:TIMES
            operator =  "*"
        elseif current = op:DIVIDE
            operator =  "/"
        elseif current = op:MODULUS
            operator =  "%"
        elseif current = op:AND
            operator =  "&&"
        elseif current = op:OR
            operator =  "||"
        elseif current = op:EQUALS
            operator =  "=="
        elseif current = op:NOT_EQUALS
            operator =  "!="
        elseif current = op:GREATER_EQUALS
            operator =  ">="
        elseif current = op:GREATER
            operator =  ">"
        elseif current = op:LESS_EQUALS
            operator =  "<="
        elseif current = op:LESS
            operator =  "<"
        elseif current = op:NOT
            operator =  "!"
        end

        result = result + " " + operator
        result = result + " " + right:WriteJavaScript() + ")"
        return result
    end

    private action CalculateJumpPoint
        if not hasParent
            if isAnd
                jumpLabel = falseLabel
            else
                jumpLabel = trueLabel
            end
            return now
        end

        boolean onRight = not isOnLeft
        QuorumOpcode op = opcodeParent
        BinaryAndOrOpcode currentParent = undefined
        BinaryAndOrOpcode currentChild = me
        if op = undefined
            return now
        end

        if op is BinaryAndOrOpcode
            currentParent = cast(BinaryAndOrOpcode, op)
        end

        repeat while currentParent not= undefined
            if currentParent:IsAnd() and currentChild:IsOnLeft() and not currentChild:IsAnd()
                jumpLabel = currentParent:GetRightHandSideLabel()
                return now
            elseif currentParent:IsAnd() and currentChild:IsOnLeft() and currentChild:IsAnd()
                jumpLabel = currentParent:GetJumpLabel()
                return now
            elseif not currentParent:IsAnd() and currentChild:IsOnLeft() and currentChild:IsAnd()
                jumpLabel = currentParent:GetRightHandSideLabel()
                return now
            end


            QuorumOpcode parentParent = currentParent:opcodeParent
            if parentParent not= undefined and parentParent is BinaryAndOrOpcode
                currentChild = currentParent
                currentParent = cast(BinaryAndOrOpcode, parentParent)
            else //terminate the loop, we're done
                if currentParent:IsAnd() and currentChild:IsOnLeft()
                    jumpLabel = falseLabel
                elseif currentParent:IsAnd() and not currentChild:IsOnLeft() and isAnd
                    jumpLabel = falseLabel
                elseif currentParent:IsAnd() and not currentChild:IsOnLeft() and not isAnd
                    jumpLabel = trueLabel
                elseif not currentParent:IsAnd() and currentChild:IsOnLeft() and not onRight
                    jumpLabel = trueLabel
                elseif not currentParent:IsAnd() and currentChild:IsOnLeft() and onRight
                    jumpLabel = currentParent:GetRightHandSideLabel()

                /*
                    These cases account for when the topmost parent is an OR and we
                    are on the right hand side. If it is an and, it should jump to the 
                    false label, otherwise it should go to the true condition
                */
                elseif not currentParent:IsAnd() and not currentChild:IsOnLeft() and isAnd
                    jumpLabel = falseLabel
                elseif not currentParent:IsAnd() and not currentChild:IsOnLeft() and not isAnd
                    jumpLabel = trueLabel
                end
                currentParent = undefined
            end
        end
    end

    action Write
        VisitLineNumber()
        leftHandSideLabel = GetLeftHandSideLabel()
        rightHandSideLabel = GetRightHandSideLabel()
        if not hasParent
            trueLabel = GetTrueLabel()
            falseLabel = GetFalseLabel()
            finalLabel = GetFinalLabel()
            SetChildLabels(trueLabel, falseLabel)
        end

        //Set the position that the opcode will jump to.
        CalculateJumpPoint()

        //visit the left hand side
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        methodWriter:VisitLabel(leftHandSideLabel)
        left:Write()

        //visit the opcode to jump past any unnecessary code.
        if isAnd
            methodWriter:VisitJump(opcodes:GetIfEquals(), jumpLabel)
        else
            methodWriter:VisitJump(opcodes:GetIfNotEquals(), jumpLabel)
        end
        methodWriter:VisitLabel(rightHandSideLabel)
        right:Write()

        //if there is no parent, write the end of the jumping routine.
        if not hasParent
            methodWriter:VisitJump(opcodes:GetIfEquals(), falseLabel)
            methodWriter:VisitLabel(trueLabel)
            methodWriter:VisitConstant(1)
            methodWriter:VisitJump(opcodes:GetGoto(), finalLabel)
            methodWriter:VisitLabel(falseLabel)
            methodWriter:VisitConstant(0)
            methodWriter:VisitLabel(finalLabel)
        end
    end

    action SetChildLabels(JavaBytecodeLabel trueLabel, JavaBytecodeLabel falseLabel)
        me:trueLabel = trueLabel
        me:falseLabel = falseLabel
        if left is BinaryAndOrOpcode
            BinaryAndOrOpcode leftOp = cast(BinaryAndOrOpcode, left)
            leftOp:SetChildLabels(me:trueLabel, me:falseLabel)
        end

        if right is BinaryAndOrOpcode
            BinaryAndOrOpcode rightOp = cast(BinaryAndOrOpcode, right)
            rightOp:SetChildLabels(me:trueLabel, me:falseLabel)
        end
    end

    action GetFinalLabel returns JavaBytecodeLabel
        if finalLabel = undefined
            JavaBytecodeLabel f
            finalLabel = f
        end
        return finalLabel
    end

    action GetFalseLabel returns JavaBytecodeLabel
        if falseLabel = undefined
            JavaBytecodeLabel f
            falseLabel = f
        end
        return falseLabel
    end

    action GetTrueLabel returns JavaBytecodeLabel
        if trueLabel = undefined
            JavaBytecodeLabel f
            trueLabel = f
        end
        return trueLabel
    end

    action GetRightHandSideLabel returns JavaBytecodeLabel
        if rightHandSideLabel = undefined
            JavaBytecodeLabel f
            rightHandSideLabel = f
        end
        return rightHandSideLabel
    end

    action GetJumpLabel returns JavaBytecodeLabel
        return jumpLabel
    end

    action GetLeftHandSideLabel returns JavaBytecodeLabel
        if leftHandSideLabel = undefined
            JavaBytecodeLabel f
            leftHandSideLabel = f
        end
        return leftHandSideLabel
    end

    action GetTemplateCopy returns QuorumOpcode
        BinaryAndOrOpcode opcode
        Type t = GetType()
        me:SetType(t:Copy())
        return opcode
    end
end