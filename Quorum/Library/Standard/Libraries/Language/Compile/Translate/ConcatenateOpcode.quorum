package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Symbol.Operation
use Libraries.Language.Compile.Interpreter.Runtime
use Libraries.Language.Compile.Interpreter.Result

class ConcatenateOpcode is BinaryOpcode
    public boolean convertRightToText = false
    public boolean convertLeftToText = false
    text concatenationClass = ""
    text concatenationConvertMethod = ""
    Type constants
    JavaBytecodeOpcodes opcodes

    action Write
        VisitLineNumber()
        QuorumOpcode left = GetLeftOpcode()
        left:Write()
        WriteLeft()
        QuorumOpcode right = GetRightOpcode()
        right:Write()
        WriteRight()

        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        methodWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), 
            "java/lang/String", "concat", "(Ljava/lang/String;)Ljava/lang/String;", false)
    end

    action WritePython returns text
        QuorumOpcode left = GetLeftOpcode()
        text leftText = left:WritePython()

        QuorumOpcode right = GetRightOpcode()
        text rightText = right:WritePython()
        
        Type lt = left:GetType()
        Type rt = right:GetType()
        if not lt:IsText() and not lt:IsBoolean()
            leftText = "Global_Cast_To_Text(" + leftText + ")"
        elseif not lt:IsText() and lt:IsBoolean()
            leftText = "Global_Cast_Boolean_To_Text(" + leftText + ")"
        end

        if not rt:IsText() and not rt:IsBoolean()
            rightText = "Global_Cast_To_Text(" + rightText + ")"
        elseif not rt:IsText() and rt:IsBoolean()
            rightText = "Global_Cast_Boolean_To_Text(" + rightText + ")"
        end

        return leftText + " + " + rightText
    end

    action Evaluate(Runtime runtime)
        QuorumOpcode left = GetLeftOpcode()
        QuorumOpcode right = GetRightOpcode()
        left:Evaluate(runtime)
        Result lr = runtime:PopFromStack()
        right:Evaluate(runtime)
        Result rr = runtime:PopFromStack()

        text leftText = lr:textValue
        text rightText = rr:textValue

        if convertLeftToText
            leftText = ConvertToText(lr)
        end

        if convertRightToText
            rightText = ConvertToText(rr)
        end
        
        Result result
        Type type
        
        result:type = type
        if leftText not= undefined and rightText not= undefined
            result:textValue = leftText + rightText
        else
            result:textValue = undefined //otherwise it's a runtime error
        end
        type:SetToText()
        runtime:PushToStack(result)
    end

    private action ConvertToText(Result result) returns text
        if result:type:IsInteger()
            return "" + result:integerValue
        elseif result:type:IsNumber()
            return "" + result:numberValue
        elseif result:type:IsBoolean()
            return "" + result:booleanValue
        end
        return undefined
    end

    action WriteLeft
        if convertLeftToText
            WriteConvertToTextOpcodes()
        end
    end

    action WriteRight
        if convertRightToText
            WriteConvertToTextOpcodes()
        end
    end

    private action WriteConvertToTextOpcodes
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        methodWriter:VisitMethodInvoke(opcodes:GetInvokeStatic(), 
            concatenationClass, "toString", concatenationConvertMethod, false)
    end

    action SetConvertStringForConcatenation(text type) 
        if constants:BOOLEAN_PRIMITIVE_KEY = type
            requiresTypeConvertToText = true
            concatenationClass = "java/lang/Boolean"
            concatenationConvertMethod = "(Z)Ljava/lang/String;"
        elseif constants:INTEGER_PRIMITIVE_KEY = type
            requiresTypeConvertToText = true
            concatenationClass = "java/lang/Integer"
            concatenationConvertMethod = "(I)Ljava/lang/String;"
        elseif constants:NUMBER_PRIMITIVE_KEY = type
            requiresTypeConvertToText = true
            concatenationClass = "java/lang/Double"
            concatenationConvertMethod = "(D)Ljava/lang/String;"
        elseif constants:TEXT_PRIMITIVE_KEY = type
            requiresTypeConvertToText = false
        else 
            alert ("Cannot setup a string concatenation with an incorrect type")
        end
    end

    action GetTemplateCopy returns QuorumOpcode
        ConcatenateOpcode op
        Type t = GetType()
        me:SetType(t:Copy())
        op:convertLeftToText = convertLeftToText
        op:convertRightToText = convertRightToText
        op:concatenationClass = concatenationClass
        op:concatenationConvertMethod = concatenationConvertMethod

        Operation newOp
        Operation oldOp = me:GetOperation()
        newOp:SetOperation(oldOp:GetOperation())
        op:SetOperation(newOp)
        return op
    end
end