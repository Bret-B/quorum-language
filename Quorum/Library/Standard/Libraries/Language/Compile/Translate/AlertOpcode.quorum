package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Containers.List
use Libraries.Containers.Iterator
use Libraries.Language.Compile.Symbol.Action
use Libraries.Language.Compile.Translate.JavaBytecodeOpcodes

class AlertOpcode is QuorumOpcode

    QuorumOpcode opcode = undefined
    JavaBytecodeOpcodes opcodes
    QuorumBytecodeConverter converter
    
    action SetBytecodeWriteOffsetToAllChildren(integer offset)
        SetBytecodeWriteOffset(offset)
        if opcode not= undefined
            opcode:SetBytecodeWriteOffsetToAllChildren(offset)
        end
    end

    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)
        if opcode not= undefined
            opcode:SetMethodWriterToAllChildren(writer)
        end
    end

    action GetOpcode returns QuorumOpcode
        return opcode
    end

    action SetOpcode(QuorumOpcode op)
        opcode = op
    end

    action Write
        VisitLineNumber()
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()

        Type type = opcode:GetType()
        text error = "quorum/Libraries/Language/Errors/Error"
        if type:IsText() //wrap this into an Error class
            methodWriter:VisitType(opcodes:GetNew(), error)
            methodWriter:VisitInstruction(opcodes:GetDuplicate())
            methodWriter:VisitInstruction(opcodes:GetDuplicate())
            methodWriter:VisitMethodInvoke(opcodes:GetInvokeSpecial(), error, "<init>", "()V", false)
        end

        opcode:Write()

        if type:IsText()
            methodWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), error, "SetErrorMessage", "(Ljava/lang/String;)V", false)
        end
        methodWriter:VisitInstruction(opcodes:GetObjectThrow())
    end

    action WritePython returns text
        text result = ""
        text EOL = result:GetCarriageReturn() + result:GetLineFeed()
        TranslateConstants constants
        text tabs = constants:GetTabText()

        if opcode not= undefined
            Type value = opcode:GetType()
            //raise quorum_Libraries_Language_Errors_Error_(0, "Sorry, bro")
            if value:IsText()
                result = result + tabs + "raise quorum_Libraries_Language_Errors_Error_" + 
                    "(0, " + opcode:WritePython() + ")" + EOL
//                result = result + "var exceptionInstance_ = new quorum_Libraries_Language_Errors_Error_();" + EOL
//                result = result + " exceptionInstance_.SetErrorMessage$quorum_text(" + opcode:WriteJavaScript() + ");" + EOL
//                result = result +  "throw exceptionInstance_;" + EOL
            else
                result = result + tabs + "raise " + opcode:WritePython() + EOL
            end
        end

        return result
    end

    action WriteJavaScript returns text
        text result = ""
        text EOL = result:GetCarriageReturn() + result:GetLineFeed()
        if opcode not= undefined
            Type value = opcode:GetType()
            if value:IsText()
                result = result + "var exceptionInstance_ = new quorum_Libraries_Language_Errors_Error_();" + EOL
                result = result + " exceptionInstance_.SetErrorMessage$quorum_text(" + opcode:WriteJavaScript() + ");" + EOL
                result = result +  "throw exceptionInstance_;" + EOL
            else
                result = result +  "throw " + opcode:WriteJavaScript() + ";"
            end
        end

        return result
    end

    action GetTemplateCopy returns QuorumOpcode
        AlertOpcode op
        return op
    end
end