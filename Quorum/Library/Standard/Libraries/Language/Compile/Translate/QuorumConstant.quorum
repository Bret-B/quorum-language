package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Interpreter.Runtime
use Libraries.Language.Compile.Interpreter.Result

class QuorumConstant is QuorumOpcode
    public integer integerValue = 0
    public number numberValue = 0
    public boolean booleanValue = false
    public text textValue = ""

    action SetBytecodeWriteOffsetToAllChildren(integer offset)
        SetBytecodeWriteOffset(offset)
    end

    action Evaluate(Runtime runtime)
        Result result
        result:type = GetType()
        Type type = GetType()
        if type:IsInteger()
            result:integerValue = type:GetIntegerConstant()
        elseif type:IsNumber()
            result:numberValue = type:GetNumberConstant()
        elseif type:IsBoolean()
            result:booleanValue = type:GetBooleanConstant()
        elseif type:IsText()
            result:textValue = type:GetTextConstant() 
        elseif type:IsUndefined()
            result:objectValue = undefined
        end
        runtime:PushToStack(result)
    end

    action WriteJavaScript returns text
        Type type = GetType()
        if type:IsInteger()
            return type:GetIntegerConstant() + ""
        elseif type:IsNumber()
            return type:GetNumberConstant() + ""
        elseif type:IsBoolean()
            return type:GetBooleanConstant() + ""
        elseif type:IsText()
            text value = type:GetTextConstant() 
            //because this is javascript, strings have to be sanitized for escape characters.
            //namely \ needs to become \\ and we have to handle carriage returns and line feeds differently
            text processedText = ""
            text CR = value:GetCarriageReturn()
            text LF = value:GetLineFeed()
            i = 0
            repeat while i < value:GetSize()
                text character = value:GetCharacter(i)
                
                if character = "\"
                    character = "\\"
                elseif character = LF
                    character = "\n"
                elseif character = CR
                    character = "\r"
                end

                processedText = processedText + character
                i = i + 1
            end

            return textValue:GetDoubleQuote() + processedText + textValue:GetDoubleQuote() + ""
        elseif type:IsUndefined()
            return "null"
        end
        return ""
    end

    action Write
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        VisitLineNumber()
        Type type = GetType()
        if type:IsInteger()
            methodWriter:VisitConstant(integerValue)
        elseif type:IsNumber()
            methodWriter:VisitConstant(numberValue)
        elseif type:IsBoolean()
            methodWriter:VisitConstant(booleanValue)
        elseif type:IsText()
            methodWriter:VisitConstant(textValue)
        elseif type:IsUndefined()
            methodWriter:VisitUndefinedConstant()
        end
    end

    action GetTemplateCopy returns QuorumOpcode
        QuorumConstant con
        con:integerValue = integerValue
        con:numberValue = numberValue
        con:booleanValue = booleanValue
        con:textValue = textValue
        Type t = GetType()
        me:SetType(t:Copy())
        return con
    end
end