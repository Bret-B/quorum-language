package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Translate.QuorumOpcode
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Language.Compile.Symbol.Type

class ChainedActionCallOpcode is QuorumOpcode
    boolean isSoloCall = false
    Array<ActionCallOpcode> ops
    boolean popReturn = false
    JavaBytecodeOpcodes opcodes

    /*
        If this action returns true, then this opcode will automatically
        pop the return value off the stack.
    */
    action GetPopReturn returns boolean
        return popReturn
    end

    /*
        This action sets whether or not this chained action call should
        pop the return value off the stack.
    */
    action SetPopReturn(boolean pop)
        popReturn = pop
    end

    action IsSoloCall returns boolean
        return isSoloCall
    end

    action SetIsSoloCall(boolean isSolo)
        isSoloCall = isSolo
    end

    action Add(ActionCallOpcode op)
        ops:Add(op)
        SetType(op:GetType())
    end

    action SetBytecodeWriteOffsetToAllChildren(integer offset)
        SetBytecodeWriteOffset(offset)
        Iterator<ActionCallOpcode> it = ops:GetIterator()
        repeat while it:HasNext()
            ActionCallOpcode op = it:Next()
            op:SetBytecodeWriteOffsetToAllChildren(offset)
        end
    end

    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)
        Iterator<ActionCallOpcode> it = ops:GetIterator()
        repeat while it:HasNext()
            ActionCallOpcode op = it:Next()
            op:SetMethodWriterToAllChildren(writer)
        end
    end

    action Write 
        Iterator<ActionCallOpcode> it = ops:GetIterator()
        repeat while it:HasNext()
            ActionCallOpcode op = it:Next()
            op:Write()
        end

        ActionCallOpcode last = ops:GetFromEnd()
        Type type = last:GetType()
        if popReturn
            JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
            if type:IsNumber()
                methodWriter:VisitInstruction(opcodes:GetPopDouble())
            else
                methodWriter:VisitInstruction(opcodes:GetPop())
            end
        end
    end

    action WritePython returns text
        text result = ""
        EOL = result:GetCarriageReturn() + result:GetLineFeed()
        TranslateConstants constants
        text tabs = constants:GetTabText()
        Iterator<ActionCallOpcode> it = ops:GetIterator()
        repeat while it:HasNext()
            ActionCallOpcode op = it:Next()
            boolean wrapGetValue = false
            QuorumOpcode op2 = op:GetAutoBoxOpcode()
            if op2 not= undefined
                Type box = op2:GetType()
                //if it's a primitive, do something else
                if box not= undefined
                    if box:IsPrimitive()
                        wrapGetValue = true
                    end
                end
            end

            if wrapGetValue
                text DQ = ""
                DQ = DQ:GetDoubleQuote()
                result = result + op:WritePython()//might need to wrap. Not sure yet.
            else
                result = result + op:WritePython()
            end
        end
        if isSoloCall
            result = tabs + result + EOL// + ";" + result:GetCarriageReturn() + result:GetLineFeed()
        end

        return result
    end

    action WriteJavaScript returns text
        text result = ""
        Iterator<ActionCallOpcode> it = ops:GetIterator()
        repeat while it:HasNext()
            ActionCallOpcode op = it:Next()
            boolean wrapGetValue = false
            QuorumOpcode op2 = op:GetAutoBoxOpcode()
            if op2 not= undefined
                Type box = op2:GetType()
                //if it's a primitive, do something else
                if box not= undefined
                    if box:IsPrimitive()
                        wrapGetValue = true
                    end
                end
            end

            if wrapGetValue
                text DQ = ""
                DQ = DQ:GetDoubleQuote()
                result = "global_GetValue_(" + result + op:WriteJavaScript() + ", " + DQ + GetType():GetStaticKey() + DQ + ")"
            else
                result = result + op:WriteJavaScript()
            end
        end
        if isSoloCall
            result = result + ";" + result:GetCarriageReturn() + result:GetLineFeed()
        end

        return result
    end


    action GetTemplateCopy returns QuorumOpcode
        ChainedActionCallOpcode op
        op:SetType(me:GetType())
        return op
    end
end