package Libraries.Testing
use Libraries.Compute.Math

/*
    This class represents an abstract test on the system. It can either be 
    instantiated and its state altered or it can be subclassed and executed 
    externally, by a tester or otherwise. Inside it contains a series of helper 
    actions for having one or more value checks. By default, if this test 
    receives a check and at least one of these checks fails, the overall 
    test fails on a run.

    Attribute: Author Andreas Stefik 

    Attribute: Example

    use Libraries.Testing.Tester
    use Libraries.Testing.Test
    
    Tester tests
    
    Test result
    result:SetMessage("This is a failed test.")
    
    tests:Add(result)
*/
class Test
    /* Whether or not the test as a whole passed */
    boolean passed = false

    /* If this threw an error during its run. */
    boolean threwError = false

    /* The error message that was thrown. */
    text error = ""

    /* A custom message for the test. */
    text message = ""

    /* A default threshold for how different number values can be. This can be changed by the client. */
    number threshold = 0.000001

    /* This flag keeps track of whether or not at least one pass to check has failed.*/
    boolean atLeastOneCheckFailed = false

    /* The name of the test. */
    text name = ""

    /*
        This action executes the test. By default, it does nothing.

        Attribute: Example

        use Libraries.Testing.Tester
        use Libraries.Testing.Test
        
        Tester tests
        
        Test result
        result:SetMessage("This is a failed test.")
        
        tests:Run(result)
    */
    action Run
    end

    /*
        This action checks whether two number values are equal, using the default threshold value as the difference allowed.

        Attribute: parameter value the value we received
        Attribute: parameter expected the value we thought we would receive

        Attribute: Example
        use Libraries.Testing.Test
        
        Test result
        output result:Check(0.01, 0.02) //false
    */
    action Check(number value, number expected) returns boolean
        Math math
        boolean result = math:Equals(value, expected, threshold)
        OneTimeCheck(result)
        
        return result
    end

    /*
        This action checks whether two number values are equal, using the default threshold value as the difference allowed.

        Attribute: parameter value the value we received
        Attribute: parameter expected the value we thought we would receive
        Attribute: difference the allowable difference between value and expected
        Attribute: Example
        use Libraries.Testing.Test
        
        Test result
        output result:Check(0.01, 0.02, 0.01) //true
    */
    action Check(number value, number expected, number difference) returns boolean
        Math math
        boolean result = math:Equals(value, expected, difference)
        OneTimeCheck(result)
        
        return result
    end

    /*
        This action checks whether two values are equal.

        Attribute: parameter value the value we received
        Attribute: parameter expected the value we thought we would receive

        Attribute: Example
        use Libraries.Testing.Test
        
        Test result
        output result:Check(1, 2) //false
    */
    action Check(integer value, number expected) returns boolean
        boolean result = false
        if value = expected
            result = true
        end
        OneTimeCheck(result)
        
        return result
    end

     /*
        This action checks whether two values are equal.

        Attribute: parameter value the value we received
        Attribute: parameter expected the value we thought we would receive

        Attribute: Example
        use Libraries.Testing.Test
        
        Test result
        output result:Check("Hi", "Not Hi") //false
    */
    action Check(text value, text expected) returns boolean
        boolean result = false
        if (value = undefined and expected = undefined) or (value = expected)
            result = true
        end
        OneTimeCheck(result)
        
        return result
    end

     /*
        This action checks whether two values are equal.

        Attribute: parameter value the value we received
        Attribute: parameter expected the value we thought we would receive

        Attribute: Example
        use Libraries.Testing.Test
        
        Test result
        output result:Check(true, false) //false
    */
    action Check(boolean value, boolean expected) returns boolean
        boolean result = false
        if value = expected
            result = true
        end
        OneTimeCheck(result)
        
        return result
    end

    /*
        This action keeps state in the sense that each time a value is 
        passed, if it fails at least once, this test forever has failed.
        As such, if future tests pass, the total pass result will still be 
        false.
    */
    private action OneTimeCheck(boolean result)
        if not result
            atLeastOneCheckFailed = true
            passed = false
        elseif result and not atLeastOneCheckFailed
            passed = true
        end
    end

    /*
        This action returns true if the test passed. By default, it returns false. If even a 
        single check call failed, this test fails unless SetPassed is called explicitly.

        Attribute: Returns true if the test passed.
    */
    action IsPassed returns boolean
        return passed
    end

    /*
        This action tells the test whether or not it passed.
    
        Attribute: Parameter passed tells the test to indicate that it passed
    */
    action SetPassed(boolean passed)
        me:passed = passed
    end

    /*
        Returns an error message from the test.

        Attribute: Returns the message
    */
    action GetErrorMessage returns text
        return error
    end

    /*
        Sets an error message from the test.

        Attribute: Parameter error the message
    */
    action SetErrorMessage(text error)
        me:error = error
    end

    /*
        Returns whether or not this test threw an error while it executed.

        Attribute: Returns true if it threw an error
    */
    action HasThrewError returns boolean
        return threwError
    end

    /*
        Sets whether or not this test threw an error while it executed.

        Attribute: Parameter threwError Sets whether this test through an error
    */
    action SetThrewError(boolean threwError)
        me:threwError = threwError
    end

    /*
        Returns a message from the test.

        Attribute: Returns the message
    */
    action GetMessage returns text
        return message
    end

    /*
        Sets a error message from the test.

        Attribute: Paramter message the message
    */
    action SetMessage(text message)
        me:message = message
    end

    /*
        Returns the default threshold for the comparison of two numbers.

        Attribute: Returns the threshold, which is equivalent to me:threshold
    */
    action GetThreshold returns number
        return threshold
    end

    /*
        Sets the default threshold for the comparison of two numbers.

        Attribute: Parameter threshold the threshold, which is equivalent to me:threshold
    */
    action SetThreshold(number threshold)
        me:threshold = threshold
    end

    /*
        Returns the name of the test. Tests do not have a name by default.

        Attribute: Returns the name
    */
    action GetName returns text
        return name
    end

    /*
        Sets the name of the test

        Attribute: Parameter name the name of the test
    */
    action SetName(text name)
        me:name = name
    end

end