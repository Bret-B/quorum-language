package Libraries.Compute.Statistics

use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Containers.Iterator
use Libraries.System.File
use Libraries.Compute.Statistics.DataFrameCalculation
use Libraries.Compute.Statistics.Loaders.CommaSeparatedLoader
use Libraries.Compute.Statistics.Loaders.CommaSeparatedSaver
use Libraries.Compute.Matrix
use Libraries.Compute.Statistics.Tests.CompareGroups
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Tests.CompareGroupToMean
use Libraries.Compute.Statistics.Tests.CorrelateGroups
use Libraries.Compute.Statistics.Tests.CorrelateRanks
use Libraries.Compute.Statistics.Tests.CompareVariances
use Libraries.Compute.Statistics.Tests.Regression
use Libraries.Compute.Statistics.Inputs.FactorInput
use Libraries.Compute.Statistics.Calculations.Mean
use Libraries.Compute.Statistics.Calculations.Variance
use Libraries.Compute.Statistics.Calculations.StandardDeviation
use Libraries.Compute.Calculations.InterQuartileRange
use Libraries.Compute.Statistics.Calculations.Median
use Libraries.Compute.Calculations.Summarize
use Libraries.Compute.Statistics.Calculations.Kurtosis
use Libraries.Compute.Statistics.Calculations.Skew
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Compute.Statistics.Charts.HistogramCreator
use Libraries.Interface.Controls.Charts.Histogram

/*
    The DataFrame class is a collection of columns and rows, like a spreadsheet, 
    that can be used for statistics and other calculations. By default, it can load
    comma separated files. Other file types can be supported using the Load action with 
    a file loader for the custom type. DataFrame objects can also be transformed
    using the Transform action, which is useful for sorting, filtering, or other
    operations. Transforms generally make a copy of the data frame and act on that copy,
    not the original.

    Attribute: Author Andreas Stefik

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame

    //Load a comma separated file
    DataFrame frame
    frame:Load("Data.csv") 
*/
class DataFrame
    Array<DataFrameColumn> columns
    DataFrameSelection selection = undefined
    HashTable<integer, DataFrameColumn> columnsOnLoad = undefined

    /*
        This action adds a column that, when the DataFrame is loaded
        will be used for processing a particular column. This will allow
        the loader to use customized type information specific to a particular
        file or situation.

        Attribute: Parameter index the position of the index on loading. For example, 
            an index of means the column at index 0, if one is loaded.
        Attribute: Parameter column the DataFrameColumn to use and enter into the 
            DataFrame.

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame

        DataFrame frame
        NumberColumn column
        frame:AddColumnOnLoad(0, column)

        frame:Load("Data/Sheet.csv")
        output frame:ToText()
    */
    action AddColumnOnLoad(integer index, DataFrameColumn column)
        if columnsOnLoad = undefined
            HashTable<integer, DataFrameColumn> col
            columnsOnLoad = col
        end

        columnsOnLoad:Add(index, column)
    end

    /*
        This action returns a column to load with at a particular index, if one
        exists.
    */
    action GetColumnOnLoad(integer index) returns DataFrameColumn 
        if columnsOnLoad not= undefined
            return columnsOnLoad:GetValue(index)
        end
        return undefined
    end
    
    /*
        This action removes a column from the on load procedure. 
    */
    action RemoveColumnOnLoad(integer index)
        columnsOnLoad:RemoveAllKeys(index)
    end

    /*
        This action empties the columns loaded and frees up memory from 
        the initialization. After any load operation, this action is automatically
        called.
    */
    action EmptyColumnsOnLoad
        columnsOnLoad = undefined //free up memory
    end

    /*
        This action loads a data frame from a file. 

        Attribute: Parameter file The file to load.
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.System.File

        //Load a comma separated file
        DataFrame frame
        File file
        file:SetPath("Data.csv")
        frame:Load(file) 
    */
    action Load(File file)
        if file not= undefined and file:Exists()
            text extension = file:GetFileExtension()
            if extension = "csv"
                CommaSeparatedLoader loader
                Load(file, loader)
            end
        end
        EmptyColumnsOnLoad()
    end

    /*
        This action runs a calculation on the data frame. Calculations are not intended
        to be destructive to the original data.

        Attribute: Parameter calculation The calculation we want conducted on this frame.
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.System.File

        //Load a comma separated file
        DataFrame frame
        File file
        file:SetPath("Data.csv")
        frame:Load(file)
    */
    action Calculate(DataFrameCalculation calculation)
        calculation:Calculate(me)
    end

    /*
        This action loads a data frame from a file relative to the working directory,
        which is typically where the executable lives.

        Attribute: Parameter location The file to load, parsed as text relative to the working directly. This is
                usually the directory of the executable.

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame

        //Load a comma separated file
        DataFrame frame
        frame:Load("Data.csv") 
    */
    action Load(text location)
        File file
        file:SetPath(location)
        Load(file)
    end

    /*
        This action obtains a column from the DataFrame. This column is the original, not a copy,
        so modifications made to the column will be permanent. If the goal is to obtain a copy, 
        then either the Copy actions or the Transform classes should be used.


        Attribute: Parameter index The column we want back.

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame

        //Load a comma separated file
        DataFrame frame
        frame:Load("Data.csv") 
        DataFrameColumn column = frame:GetColumn(0)
    */
    action GetColumn(integer index) returns DataFrameColumn
        return columns:Get(index)
    end

    /*
        This action replaces the columns in the DataFrame. It is needed by
        the Loader infrastructure in order to change the columns. However, for most users,
        the Transform infrastructure should be used instead of adjusting these manually.
        In other words, do not use this action unless you know what you are doing.

        Attribute: Parameter columns The new columns.

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame

        //Load a comma separated file
        DataFrame frame
        frame:Load("Data.csv") 
        Array<DataFrameColumn> col
        frame:SetColumns(col)
    */
    action SetColumns(Array<DataFrameColumn> columns)
        me:columns = columns
    end

    /*
        This action adds a column to the data frame. It is destructive in that it changes
        the existing DataFrame without making a copy.

        Attribute: Parameter column The column to add.

        Attribute: Example

        //We need the DataFrame class to load in files for Data Science operations.
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Columns.NumberColumn
        use Libraries.Containers.Array
        use Libraries.Compute.Statistics.DataFrameColumn
        
        //Create a DataFrame, which is essentially a table that understands 
        //more information about the data that is being loaded.
        DataFrame frame
        
        //This creates a NumberColumn, which contains numbers
        NumberColumn column
        column:SetHeader("My Column")
        column:Add(1)
        column:Add(2)
        column:Add(3)
        column:Add(4)
        column:Add(5)
        column:Add(6)
        frame:AddColumn(column)
        
        //The system loaded the file, but can also output it a text value, or the console, if we want that.
        output frame:ToText()
    */
    action AddColumn(DataFrameColumn column)
        me:columns:Add(column)
    end

    /*
        This action adds a column to the data frame. It is destructive in that it changes
        the existing DataFrame without making a copy.

        Attribute: Parameter index the position of the column
        Attribute: Parameter column The column to add.
        Attribute: Example

        //We need the DataFrame class to load in files for Data Science operations.
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Columns.NumberColumn
        use Libraries.Containers.Array
        use Libraries.Compute.Statistics.DataFrameColumn
        
        //Create a DataFrame, which is essentially a table that understands 
        //more information about the data that is being loaded.
        DataFrame frame
        
        //This creates a NumberColumn, which contains numbers
        NumberColumn column
        column:SetHeader("My Column")
        column:Add(1)
        column:Add(2)
        column:Add(3)
        column:Add(4)
        column:Add(5)
        column:Add(6)
        frame:AddColumn(0, column)
        
        //The system loaded the file, but can also output it a text value, or the console, if we want that.
        output frame:ToText()
    */
    action AddColumn(integer index, DataFrameColumn column)
        me:columns:Add(index, column)
    end

    /*
        This action removes a column from the data frame. It is destructive in that it changes
        the existing DataFrame without making a copy.

        Attribute: Parameter column The column to add.

        Attribute: Example

        //We need the DataFrame class to load in files for Data Science operations.
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Columns.NumberColumn
        use Libraries.Containers.Array
        use Libraries.Compute.Statistics.DataFrameColumn
        
        //Create a DataFrame, which is essentially a table that understands 
        //more information about the data that is being loaded.
        DataFrame frame
        
        //This creates a NumberColumn, which contains numbers
        NumberColumn column
        column:SetHeader("My Column")
        column:Add(1)
        column:Add(2)
        column:Add(3)
        column:Add(4)
        column:Add(5)
        column:Add(6)
        frame:AddColumn(column)
        
        //The system loaded the file, but can also output it a text value, or the console, if we want that.
        output frame:ToText()
    */
    action RemoveColumnAt(integer index)
        me:columns:RemoveAt(index)
    end

    /*
        This action gets the columns in the DataFrame. This allows direct
        control of the columns for this particular data frame. We suggest not using 
        these values directly unless required by an application.

        Attribute: Parameter columns The new columns.

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame

        //Load a comma separated file
        DataFrame frame
        frame:Load("Data.csv") 
        Array<DataFrameColumn> col = frame:GetColumns()
    */
    action GetColumns returns Array<DataFrameColumn>
        return me:columns
    end
    /*
        This action returns the number of columns in the data frame. This value
        is not related to the number of rows in any particular column.

        Attribute: Returns the number of columns in the DataFrame.

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame

        //Load a comma separated file
        DataFrame frame
        frame:Load("Data.csv") 
        output frame:GetSize()
    */
    action GetSize returns integer
        return columns:GetSize()
    end

    /*
        This action returns true if the number of columns is zero

        Attribute: Returns true if the number of columns is zero.

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame

        //Load a comma separated file
        DataFrame frame
        frame:Load("Data.csv") 
        output frame:IsEmpty()
    */
    action IsEmpty returns boolean
        return columns:GetSize() = 0
    end

    /*
        This action returns the first column with the name "header" in
        its header row. If multiple columns have the same name, then to 
        get them all, you will need to iterate and find each one using GetColumn(integer) instead. 


        Attribute: Parameter header The column we want back.
        Attribute: Returns the column, possibly undefined if no column of that name exists
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame

        //Load a comma separated file
        DataFrame frame
        frame:Load("Data.csv") 
        DataFrameColumn column = frame:GetColumn("Gender")
    */
    action GetColumn(text header) returns DataFrameColumn
        i = 0
        repeat while i < columns:GetSize()
            DataFrameColumn column = columns:Get(i)
            if column not= undefined and column:GetHeader() = header
                return column
            end
            i = i + 1
        end

        return undefined
    end

    /*
        This action loads data from a file and then places it into the existing data frame. 
        If data already exists in this data frame, it is discarded and replaced.

        Attribute: Parameter file The file we want processed
        Attribute: Parameter loader The object we want to manage loading the file type
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Loaders.CommaSeparatedLoader
        use Libraries.System.File

        //Load a comma separated file
        DataFrame frame
        File file
        file:SetPath("Data.csv")
        CommaSeparatedLoader loader
        frame:Load(file, loader) 
    */
    action Load(File file, DataFrameLoader loader)
        loader:Load(me, file)
        EmptyColumnsOnLoad()
    end

    /*
        This action data to a file from a data frame. 

        Attribute: Parameter file The file we want processed
        Attribute: Parameter saver The object we want to manage saving the file type
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Loaders.CommaSeparatedSaver
        use Libraries.System.File

        //Load a comma separated file
        DataFrame frame
        File file
        file:SetPath("Data.csv")
        CommaSeparatedLoader loader
        frame:Load(file, loader) 

        CommaSeparatedSaver saver
        frame:Save(file, saver)
    */
    action Save(File file, DataFrameSaver saver)
        saver:Save(me, file)
    end

    /*
        This action saves a data frame from a file relative to the working directory,
        which is typically where the executable lives. The file must have a csv file extension
        for this to save. Otherwise, it fails silently.

        Attribute: Parameter location The file to save. This action uses the default format of comma separate values (CSV).

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame

        //Load a comma separated file
        DataFrame frame
        frame:Save("Data.csv") 
    */
    action Save(text location)
        File file
        file:SetPath(location)

        text extension = file:GetFileExtension()
        if extension = "csv"
            CommaSeparatedSaver saver
            Save(file, saver)
        end
    end

    /*
        This action takes a DataFrame and converts it into a matrix with number values. If
        the data frame contains columns that cannot be converted to numbers, this action
        throws an exception. Finally, all columns must have the same size for this conversion to work.

        Attribute: Returns A matrix of real number values
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Matrix

        //Load a comma separated file
        DataFrame frame
        frame:Load("Data.csv")

        //reverse the data frame
        Matrix matrix = frame:ConvertToMatrix()
        output matrix:ToText()
    */
    action ConvertToMatrix returns Matrix
        Matrix matrix

        if IsEmpty()
            return matrix
        end
        DataFrameColumn first = GetColumn(0)
        integer firstSize = first:GetSize()
        matrix:SetSize(first:GetSize(), GetSize())

        i = 0
        repeat while i < GetSize()
            DataFrameColumn column = GetColumn(i)
            if column:GetSize() not= firstSize
                alert("Cannot create an n x m Matrix, as the columns have different sizes")
            end
            
            integer j = 0
            repeat while j < column:GetSize()
                number value = column:GetAsNumber(j)
                matrix:Set(j, i, value)
                j = j + 1
            end
            i = i + 1
        end
        return matrix
    end

    /*
        This action takes the data from the current DataFrame then transforms into 
        a copy of this data frame. While custom Transforms can choose to adjust the original, 
        by default they do not. 

        Attribute: Parameter transform The object we want to copy and transform the frame
        Attribute: Returns Typically a copy of the DataFrame, transformed by the transformer.
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Transforms.ReverseTransform
        use Libraries.System.File

        //Load a comma separated file
        DataFrame frame
        frame:Load("Data.csv")

        //reverse the data frame
        ReverseTransform reverse
        frame:Transform(reverse) 
    */
    action Transform(DataFrameTransform transform) returns DataFrame
        return transform:Transform(me)
    end

    /*
        This action creates a chart, given a particular DataFrameChartCreator instance
        and returns a chart from it for this particular data.

        Attribute: Parameter creator The object that converts the DataFrame into a chart
        Attribute: Returns A chart object, which can be embedded into a user interface
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Charts.BarChartCreator
        use Libraries.System.File

        //Load a comma separated file
        DataFrame frame
        frame:Load("Data.csv")

        //We might instantiate an object to create a bar chart, setting some properties if we want to
        BarChartCreator create
        frame:CreateChart(create) 
    */
    action CreateChart(DataFrameChartCreator creator) returns Chart
        return creator:Create(me)
    end

    /*
        Returns a copy of the data frame, except that it only copies certain columns and rows

        Attribute: Parameter columnStart The 0-indexed first column
        Attribute: Parameter columnEnd The 0-indexed last column
        Attribute: Parameter rowStart The 0-indexed first row
        Attribute: Parameter rowEnd The 0-indexed last row
        Attribute: Returns A copy of the data frame with constrained columns and rows

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame

        //Load a comma separated file
        DataFrame frame
        frame:Load("Data.csv")

        //return a copy with a max of the first five rows
        DataFrame copy = frame:Copy(0, frame:GetSize(), 0, 5)
    */
    action Copy(integer columnStart, integer columnEnd, integer rowStart, integer rowEnd) returns DataFrame
        DataFrame newFrame
        
        i = columnStart
        repeat while i < columnEnd
            DataFrameColumn column = GetColumn(i)
            DataFrameColumn copy = column:Copy(rowStart, rowEnd)
            newFrame:columns:Add(copy)
            i = i + 1
        end

        return newFrame
    end

    /*
        This action returns a copy of the data frame, which deep copies every column.

        Attribute: Returns A copy of the data frame with constrained columns and rows

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame

        //Load a comma separated file
        DataFrame frame
        frame:Load("Data.csv")

        //return a copy of the entire DataFrame
        DataFrame copy = frame:Copy()
    */
    action Copy returns DataFrame
        DataFrame newFrame
        
        i = 0
        repeat while i < GetSize()
            DataFrameColumn column = GetColumn(i)
            DataFrameColumn copy = column:Copy()
            newFrame:columns:Add(copy)
            i = i + 1
        end

        return newFrame
    end

    
    /* 
        Classes can register as listeners of the selection in the DataFrame.
    */
    action Add(DataFrameSelectionListener listener)
        selection:Add(listener)
    end

    /* 
        Classes can also de-register as listeners of the selection in the DataFrame.
    */
    action Remove(DataFrameSelectionListener listener)
        selection:Remove(listener)
    end

    /* 
        This action returns an iterator of the listeners on the DataFrame's selection.
    */
    action GetListeners returns Iterator<DataFrameSelectionListener>
        return selection:GetListeners()
    end

    /*
        This adds adds columns to the selected range, starting from start and ending
        at finish, inclusive. In this case, this means that calculations will be conducted
        across this entire range.
    
        Attribute: Parameter start the start of the range
        Attribute: Parameter finish the end of the range
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumnRange(0, 2)
        output frame:ToText()
    */
    action AddSelectedColumnRange(integer start, integer finish)
        CheckDefaultSelection()
        integer i = start
        repeat while i <= finish //inclusive
            AddSelectedColumn(i)
            i = i + 1
        end
    end

    /*
        This adds sets columns to the selected range, starting from start and ending
        at finish, inclusive. In this case, this means that calculations will be conducted
        across this entire range. If any previous range was indicated, it is removed.
    
        Attribute: Parameter start the start of the range
        Attribute: Parameter finish the end of the range
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:SetSelectedColumnRange(0, 2)
        output frame:ToText()
    */
    action SetSelectedColumnRange(integer start, integer finish)
        CheckDefaultSelection()
        selection:EmptyColumns()
        AddSelectedColumnRange(start, finish)
    end

    /*
        This adds removes columns from the selected range, starting from start and ending
        at finish, inclusive. In this case, this means that calculations will be conducted
        across this entire range.
    
        Attribute: Parameter start the start of the range
        Attribute: Parameter finish the end of the range
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumnRange(0, 2)
        frame:RemoveSelectedColumnRange(1, 2)
        output frame:ToText()
    */
    action RemoveSelectedColumnRange(integer start, integer finish)
        if selection = undefined or selection:IsEmptyColumns()
            return now
        end
        integer i = start
        repeat while i <= finish //inclusive
            RemoveSelectedColumn(i)
            i = i + 1
        end
    end
    
    /*
        This adds adds factors to the selected range, starting from start and ending
        at finish, inclusive. In this case, this means that calculations will be conducted
        across this entire range.
    
        Attribute: Parameter start the start of the range
        Attribute: Parameter finish the end of the range
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedFactorRange(0, 2)
        output frame:ToText()
    */
    action AddSelectedFactorRange(integer start, integer finish)
        CheckDefaultSelection()
        integer i = start
        repeat while i <= finish //inclusive
            AddSelectedFactor(i)
            i = i + 1
        end
    end

    /*
        This adds sets factors to the selected range, starting from start and ending
        at finish, inclusive. In this case, this means that calculations will be conducted
        across this entire range. If any previous range was indicated, it is removed.
    
        Attribute: Parameter start the start of the range
        Attribute: Parameter finish the end of the range
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:SetSelectedFactorRange(0, 2)
        output frame:ToText()
    */
    action SetSelectedFactorRange(integer start, integer finish)
        CheckDefaultSelection()
        selection:EmptyColumns()
        AddSelectedFactorRange(start, finish)
    end

    /*
        This adds removes factors from the selected range, starting from start and ending
        at finish, inclusive. In this case, this means that calculations will be conducted
        across this entire range.
    
        Attribute: Parameter start the start of the range
        Attribute: Parameter finish the end of the range
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedFactorRange(0, 2)
        frame:RemoveSelectedFactorRange(1, 2)
        output frame:ToText()
    */
    action RemoveSelectedFactorRange(integer start, integer finish)
        if selection = undefined or selection:IsEmptyColumns()
            return now
        end
        integer i = start
        repeat while i <= finish //inclusive
            RemoveSelectedFactor(i)
            i = i + 1
        end
    end

    /*
        This action gets the selection in the DataFrame. 
    
        Attribute: Returns the selection of the frame
    */
    action GetSelection returns DataFrameSelection
        return selection
    end

    /* Private undefined checker. */
    private action CheckDefaultSelection
        if selection = undefined
            DataFrameSelection select
            select:SetFrame(me)
            me:selection = select
        end
    end

    /*
        This adds a column to the selected range.
    
        Attribute: Parameter index the column index of the column to add
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumn(0)
        output frame:ToText()
    */
    action AddSelectedColumn(integer index) 
        CheckDefaultSelection()

        selection:AddColumn(index)
    end

    /*
        This removes a column at the index of the selection.
    
        Attribute: Parameter index the selection index of the column to remove
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumn(0)
        frame:RemoveSelectedColumnAt(0)
        output frame:ToText()
    */
    action RemoveSelectedColumnAt(integer index)
        if selection = undefined or index < 0 or index >= selection:GetColumnSize()
            return now
        end

        selection:RemoveColumnAt(index)
    end

    /*
        This removes a column of a particular index anywhere from the selection.
    
        Attribute: Parameter index the column index of the column to remove
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumn(0)
        frame:RemoveSelectedColumn(0)
        output frame:ToText()
    */
    action RemoveSelectedColumn(integer index)
        if selection = undefined
            return now
        end

        selection:RemoveColumn(index)
    end

    /*
        This adds a factor of a particular index anywhere from the selection.
    
        Attribute: Parameter index the index of the factor to add
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedFactor(0)
        output frame:ToText()
    */
    action AddSelectedFactor(integer index) 
        CheckDefaultSelection()

        selection:AddFactor(index)
    end

    /*
        This removes a factor at a particular index from the selection.
    
        Attribute: Parameter index the selection index of the factor to remove
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedFactor(0)
        frame:RemoveSelectedFactorAt(0)
        output frame:ToText()
    */
    action RemoveSelectedFactorAt(integer index)
        if selection = undefined or index < 0 or index >= selection:GetFactorSize()
            return now
        end

        selection:RemoveFactorAt(index)
    end

    /*
        This removes a factor of a particular index anywhere from the selection.
    
        Attribute: Parameter index the factor index of the factor to remove
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedFactor(0)
        frame:RemoveSelectedFactor(0)
        output frame:ToText()
    */
    action RemoveSelectedFactor(integer index)
        if selection = undefined
            return now
        end

        selection:RemoveFactor(index)
    end

    /*
        This action empties the selection, so that no columns are selected.
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedFactor(0)
        frame:EmptySelectedColumns()
        output frame:ToText()
    */
    action EmptySelectedColumns
        if selection = undefined
            return now
        end

        selection:EmptyColumns()
    end

    /*
        This action empties the selection, so that no factors are selected.
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedFactor(0)
        frame:EmptySelectedFactors()
        output frame:ToText()
    */
    action EmptySelectedFactors
        if selection = undefined
            return now
        end

        selection:EmptyFactors()
    end

    /*
        This action obtains how many columns are selected in the selection.
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumn(0)
        output frame:GetSelectedColumnSize()
    */
    action GetSelectedColumnSize returns integer
        if selection = undefined
            return 0
        end
        return selection:GetColumnSize()
    end

    /*
        This action obtains how many factors are selected in the selection.
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedFactor(0)
        output frame:GetSelectedFactorSize()
    */
    action GetSelectedFactorSize returns integer
        if selection = undefined
            return 0
        end
        return selection:GetFactorSize()
    end

    /*
        This action receives a list of comma separated header values. It returns a list of all
        columns that would be selected by this list in sorted order by index. It ignores duplicate keys,
        but throws an error if either a header is not found or if the original DataFrame contains duplicate
        header names. As such, it is intentionally rigid to prevent the user from making accidental mistakes.
        The columns do not return in the same order as the header list, nor does it need to because
        it is designed to change the selection, which is not order dependent.
    */
    private action GetColumnsFromHeaderNames(text headers) returns Array<integer> 
        Array<integer> columns
        if headers = undefined or headers:IsEmpty()
            return columns
        end

        Array<text> split = headers:Split(",")
        if split = undefined or split:IsEmpty()
            return columns
        end

        //Hash all of the header names
        HashTable<text, integer> head
        i = 0
        repeat while i < GetSize()
            DataFrameColumn column = GetColumn(i)
            text key = column:GetHeader()

            //Don't allow duplicates, as this could lead to really easy user mistakes. If a user wants to use this system
            //it is on them to give unique header names. Otherwise they can specify columns by index
            if head:HasKey(key)
                alert("Detected non-unique column names in this data set, " + key + ". To use this helper action, all column names must be unique in the loaded DataFrame.")
            else
                head:Add(key, i)
            end
            i = i + 1
        end

        //now hash all of the values into an array, then sort it
        HashTable<text, integer> splitHash
        i = 0
        repeat while i < split:GetSize()
            text key = split:Get(i)
            if not head:HasKey(key)
                alert("Could not find key " + key + " in the DataFrame. Are you sure it exists?")
            else
                integer value = head:GetValue(key)
                splitHash:Add(key, value) //this automatically ignores duplicates, since it would hash the same
            end
            i = i + 1
        end

        Iterator<text> keys = splitHash:GetKeyIterator()
        repeat while keys:HasNext()
            text key = keys:Next()
            integer value = splitHash:GetValue(key)
            columns:Add(value)
        end
        columns:Sort()
        return columns
    end

    /*
        This action reads a comma separated list of header names and determines the indices 
        from this list. This action is inherently strict, where if the parsing fails, the headers are 
        not unique, or there are other issues in the list, this action throws an error. 

        Attribute: Parameter headers the columns to select
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumns("name1,name2")
        output frame:GetSelectedColumnSize()
    */
    action AddSelectedColumns(text headers) 
        CheckDefaultSelection()
        Array<integer> selected = GetColumnsFromHeaderNames(headers)
        integer i = 0
        repeat while i < selected:GetSize()
            AddSelectedColumn(selected:Get(i))
            i = i + 1
        end
    end

    /*
        This action reads a comma separated list of header names and determines the indices 
        from this list. This action is inherently strict, where if the parsing fails, the headers are 
        not unique, or there are other issues in the list, this action throws an error. 

        Attribute: Parameter headers the columns to select
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedFactors("name1,name2")
        output frame:GetSelectedColumnSize()
    */
    action AddSelectedFactors(text headers) 
        CheckDefaultSelection()
        Array<integer> selected = GetColumnsFromHeaderNames(headers)
        integer i = 0
        repeat while i < selected:GetSize()
            AddSelectedFactor(selected:Get(i))
            i = i + 1
        end
    end

    /*
        This action reads a comma separated list of header names and determines the indices 
        from this list. This action is inherently strict, where if the parsing fails, the headers are 
        not unique, or there are other issues in the list, this action throws an error. This 
        action removes any previous selection.

        Attribute: Parameter headers the columns to select
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:SetSelectedColumns("name1,name2")
        output frame:GetSelectedColumnSize()
    */
    action SetSelectedColumns(text headers) 
        CheckDefaultSelection()
        selection:EmptyColumns()
        AddSelectedColumns(headers)
    end

    /*
        This action reads a comma separated list of header names and determines the indices 
        from this list. This action is inherently strict, where if the parsing fails, the headers are 
        not unique, or there are other issues in the list, this action throws an error. This 
        action removes any previous selection.

        Attribute: Parameter headers the columns to select
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:SetSelectedFactors("name1,name2")
        output frame:GetSelectedColumnSize()
    */
    action SetSelectedFactors(text headers) 
        CheckDefaultSelection()
        selection:EmptyFactors()
        AddSelectedFactors(headers)
    end

    /*
        This action reads a comma separated list of header names and determines the indices 
        from this list. This action is inherently strict, where if the parsing fails, the headers are 
        not unique, or there are other issues in the list, this action throws an error. This 
        action removes the selection from the list of headers.

        Attribute: Parameter headers the columns to select
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:SetSelectedColumns("name1,name2")
        frame:RemoveSelectedColumns("name2")
        output frame:GetSelectedColumnSize()
    */
    action RemoveSelectedColumns(text headers)
        if selection = undefined
            return now
        end

        Array<integer> selected = GetColumnsFromHeaderNames(headers)

        i = 0
        repeat while i < selected:GetSize()
            integer value = selected:Get(i)
            RemoveSelectedColumn(value)
            i = i + 1    
        end
    end

    /*
        This action reads a comma separated list of header names and determines the indices 
        from this list. This action is inherently strict, where if the parsing fails, the headers are 
        not unique, or there are other issues in the list, this action throws an error. This 
        action removes the selection from the list of headers.

        Attribute: Parameter headers the columns to select
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:SetSelectedFactors("name1,name2")
        frame:RemoveSelectedFactors("name2")
        output frame:GetSelectedColumnSize()
    */
    action RemoveSelectedFactors(text headers)
        if selection = undefined
            return now
        end

        Array<integer> selected = GetColumnsFromHeaderNames(headers)

        i = 0
        repeat while i < selected:GetSize()
            integer value = selected:Get(i)
            RemoveSelectedFactor(value)
            i = i + 1    
        end
    end

    /* Checks if the selection is valid. */
    private action IsInvalidSelection returns boolean
        if selection = undefined or (selection:IsEmptyColumns() and selection:IsEmptyFactors())
            return true
        end
        return false
    end

    /*
        This action uses the selection to conduct a comparison between two or more columns. 
        The comparison is traditionally called a 1-way ANOVA. The CompareGroups object 
        returned gives information back in several formats, including text formatted in the 
        American Psychological Association (APA) style.

        Attribute: Returns an object representing the comparison
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumnRange(0,2)
        CompareGroups groups = CompareSelectedColumns()
        output groups:GetFormalSummary()
    */
    action CompareSelectedColumns returns CompareGroups
        if IsInvalidSelection()
            alert("Invalid Selection")
        end

        if selection:GetColumnSize() < 2
            alert("Must compare 2 or more columns")
        end

        CompareGroups groups
        //the cast isn't technically necessary, but I'm future proofing, as it could be down the road in case some tests allow both
        selection:CopyTo(cast(ColumnInput, groups))
        groups:Calculate(me)
        return groups
    end

    /*
        This action uses the selection to conduct a comparison between a column and a mean.
        The comparison is traditionally called a one sample t-test. The CompareGroupToMean object
        returned gives information back in several formats, including text formatted in the
        American Psychological Association (APA) style.

        Attribute: Returns an object representing the comparison
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumn(0)
        CompareGroupToMean result = CompareSelectedColumnToMean(0)
        output result:GetFormalSummary()
    */
    action CompareSelectedColumnToMean(number mean) returns CompareGroupToMean
        if IsInvalidSelection()
            alert("Invalid Selection")
        end

        if selection:GetColumnSize() not= 1
            alert("Must compare the mean to 1 column")
        end

        CompareGroupToMean groups
        groups:SetGroup(selection:GetColumn(0))
        groups:SetMean(mean)
        groups:Calculate(me)
        return groups
    end

    /*
        This action uses the selection to conduct a correlation between two or more columns. 
        The comparison is traditionally called a Pearson Correlation. The CompareGroups object 
        returned gives information back in several formats, including text formatted in the 
        American Psychological Association (APA) style.

        Attribute: Returns an object representing the comparison
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumnRange(0,2)
        CorrelateGroups groups = CorrelateSelectedColumns()
        output groups:GetFormalSummary()
    */
    action CorrelateSelectedColumns returns CorrelateGroups
        if IsInvalidSelection()
            alert("Invalid Selection")
        end

        if selection:GetColumnSize() < 2
            alert("Must compare 2 or more columns")
        end

        CorrelateGroups groups
        //the cast isn't technically necessary, but I'm future proofing, as it could be down the road in case some tests allow both
        selection:CopyTo(cast(ColumnInput, groups))
        groups:Calculate(me)
        return groups
    end

    /*
        This action uses the selection to conduct a correlation between the ranks of values
        between two or more columns. 
        The comparison is traditionally called a Spearman Correlation. The CompareGroups object 
        returned gives information back in several formats, including text formatted in the 
        American Psychological Association (APA) style.

        Attribute: Returns an object representing the comparison
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumnRange(0,2)
        CorrelateRanks groups = CorrelateSelectedRanks()
        output groups:GetFormalSummary()
    */
    action CorrelateSelectedRanks returns CorrelateRanks
        if IsInvalidSelection()
            alert("Invalid Selection")
        end

        if selection:GetColumnSize() < 2
            alert("Must compare 2 or more columns")
        end

        CorrelateRanks groups
        //the cast isn't technically necessary, but I'm future proofing, as it could be down the road in case some tests allow both
        selection:CopyTo(cast(ColumnInput, groups))
        groups:Calculate(me)
        return groups
    end

    /*
        This action uses the selection to conduct a comparison variances in columns. 
        The comparison is traditionally called a Levene's Test. The CompareGroups object 
        returned gives information back in several formats, including text formatted in the 
        American Psychological Association (APA) style.

        Attribute: Returns an object representing the comparison
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumnRange(0,2)
        CompareVariances groups = CompareSelectedVariances()
        output groups:GetFormalSummary()
    */
    action CompareSelectedVariances returns CompareVariances
        if IsInvalidSelection()
            alert("Invalid Selection")
        end

        if selection:GetColumnSize() < 2
            alert("Must compare 2 or more columns")
        end

        CompareVariances groups
        //the cast isn't technically necessary, but I'm future proofing, as it could be down the road in case some tests allow both
        selection:CopyTo(cast(ColumnInput, groups))
        groups:Calculate(me)
        return groups
    end

    /*
        This action uses the selection to conduct a regression.
        The comparison is traditionally called a Regression. The CompareGroups object
        returned gives information back in several formats, including text formatted in the
        American Psychological Association (APA) style.

        Attribute: Returns an object representing the comparison
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumn(0)
        frame:AddSelectedFactor(1)
        frame:AddSelectedFactor(2)
        frame:AddSelectedFactor(3)
        Regression result = RegressionOnSelected()
        output result:GetFormalSummary()
    */
    action RegressionOnSelected returns Regression
        if IsInvalidSelection()
            alert("Invalid Selection")
        end

        if selection:GetColumnSize() = 1
            alert("Must have a dependent variable having a column")
        end

        if selection:GetFactorSize() < 1
            alert("Must have at least one independent variable (factor column)")
        end

        Regression groups
        //the cast isn't technically necessary, but I'm future proofing, as it could be down the road in case some tests allow both
        selection:CopyTo(cast(FactorInput, groups))
        groups:Calculate(me)
        return groups
    end

    /* Checks if a single column is selected. */
    private action IsSingleColumnSelection returns boolean
        if IsInvalidSelection()
            return false
        end

        if selection:GetColumnSize() = 1
            return true
        end

        return false
    end

    /* Detects if more than one columns is selected. */
    private action IsMultiColumnSelection returns boolean
        if IsInvalidSelection()
            return false
        end

        if selection:GetColumnSize() >= 1
            return true
        end

        return false
    end

    /*
        This action calculates the mean of the selected column.

        Attribute: Returns the mean
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumn(0)
        output frame:Mean()
    */
    action Mean returns number
        if not IsSingleColumnSelection()
            alert("Can only conduct this calculation on a single column")
        end

        Mean calculation
        GetColumn(selection:GetColumn(0)):Calculate(calculation)
        return calculation:GetMean()
    end

    /*
        This action calculates the mean of the selected columns. In this case, the full
        calculation objects are returned.

        Attribute: Returns an array of the calculations
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumnRange(0,2)
        Array<Mean> values = frame:MeanSelectedColumns()
    */
    action MeanSelectedColumns returns Array<Mean>
        if not IsMultiColumnSelection()
            alert("Can only conduct this calculation on one or more columns")
        end

        Array<Mean> calculations
        integer i = 0
        repeat while i < selection:GetColumnSize()
            Mean calculation
            GetColumn(selection:GetColumn(i)):Calculate(calculation)
            calculations:Add(calculation)
            i = i + 1
        end
        
        return calculations
    end

    /*
        This action calculates the variance of the selected column.

        Attribute: Returns the variance
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumn(0)
        output frame:Variance()
    */
    action Variance returns number
        if not IsSingleColumnSelection()
            alert("Can only conduct this calculation on a single column")
        end

        Variance calculation
        GetColumn(selection:GetColumn(0)):Calculate(calculation)
        return calculation:GetVariance()
    end

    /*
        This action calculates the variance of the selected columns. In this case, the full
        calculation objects are returned.

        Attribute: Returns an array of the calculations
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumnRange(0,2)
        Array<Variance> values = frame:VarianceSelectedColumns()
    */
    action VarianceSelectedColumns returns Array<Variance>
        if not IsMultiColumnSelection()
            alert("Can only conduct this calculation on one or more columns")
        end

        Array<Variance> calculations
        integer i = 0
        repeat while i < selection:GetColumnSize()
            Variance calculation
            GetColumn(selection:GetColumn(i)):Calculate(calculation)
            calculations:Add(calculation)
            i = i + 1
        end
        
        return calculations
    end

    /*
        This action calculates the standard deviation of the selected column.

        Attribute: Returns the standard deviation
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumn(0)
        output frame:StandardDeviation()
    */
    action StandardDeviation returns number
        if not IsSingleColumnSelection()
            alert("Can only conduct this calculation on a single column")
        end

        StandardDeviation calculation
        GetColumn(selection:GetColumn(0)):Calculate(calculation)
        return calculation:GetStandardDeviation()
    end

    /*
        This action calculates the standard deviation of the selected columns. In this case, the full
        calculation objects are returned.

        Attribute: Returns an array of the calculations
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumnRange(0,2)
        Array<StandardDeviation> values = frame:StandardDeviationSelectedColumns()
    */
    action StandardDeviationSelectedColumns returns Array<StandardDeviation>
        if not IsMultiColumnSelection()
            alert("Can only conduct this calculation on one or more columns")
        end

        Array<StandardDeviation> calculations
        integer i = 0
        repeat while i < selection:GetColumnSize()
            StandardDeviation calculation
            GetColumn(selection:GetColumn(i)):Calculate(calculation)
            calculations:Add(calculation)
            i = i + 1
        end
        
        return calculations
    end

    /*
        This action calculates the InterQuartileRange of the selected column.

        Attribute: Returns the interquartile range
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumn(0)
        InterQuartileRange range = frame:InterQuartileRange()
    */
    action InterQuartileRange returns InterQuartileRange
        if not IsSingleColumnSelection()
            alert("Can only conduct this calculation on a single column")
        end

        InterQuartileRange calculation
        GetColumn(selection:GetColumn(0)):Calculate(calculation)
        return calculation
    end

    /*
        This action calculates the interquartile range of the selected columns. 
        In this case, the full calculation objects are returned.

        Attribute: Returns an array of the calculations
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumnRange(0,2)
        Array<InterQuartileRange> values = frame:InterQuartileRangeSelectedColumns()
    */
    action InterQuartileRangeSelectedColumns returns Array<InterQuartileRange>
        if not IsMultiColumnSelection()
            alert("Can only conduct this calculation on one or more columns")
        end

        Array<InterQuartileRange> calculations
        integer i = 0
        repeat while i < selection:GetColumnSize()
            InterQuartileRange calculation
            GetColumn(selection:GetColumn(i)):Calculate(calculation)
            calculations:Add(calculation)
            i = i + 1
        end
        
        return calculations
    end

    /*
        This action calculates the median of the selected column.

        Attribute: Returns the median
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumn(0)
        output frame:Median()
    */
    action Median returns number
        if not IsSingleColumnSelection()
            alert("Can only conduct this calculation on a single column")
        end

        Median calculation
        GetColumn(selection:GetColumn(0)):Calculate(calculation)
        return calculation:GetMedian()
    end

    /*
        This action calculates the median of the selected columns. In this case, the full
        calculation objects are returned.

        Attribute: Returns an array of the calculations
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumnRange(0,2)
        Array<Median> values = frame:MedianSelectedColumns()
    */
    action MedianSelectedColumns returns Array<Median>
        if not IsMultiColumnSelection()
            alert("Can only conduct this calculation on one or more columns")
        end

        Array<Median> calculations
        integer i = 0
        repeat while i < selection:GetColumnSize()
            Median calculation
            GetColumn(selection:GetColumn(i)):Calculate(calculation)
            calculations:Add(calculation)
            i = i + 1
        end
        
        return calculations
    end

    /*
        This action calculates the skew of the selected column.

        Attribute: Returns the skew
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumn(0)
        output frame:Skew()
    */
    action Skew returns number
        if not IsSingleColumnSelection()
            alert("Can only conduct this calculation on a single column")
        end

        Skew calculation
        GetColumn(selection:GetColumn(0)):Calculate(calculation)
        return calculation:GetSkew()
    end

    /*
        This action calculates the skew of the selected columns. In this case, the full
        calculation objects are returned.

        Attribute: Returns an array of the calculations
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumnRange(0,2)
        Array<Skew> values = frame:SkewSelectedColumns()
    */
    action SkewSelectedColumns returns Array<Skew>
        if not IsMultiColumnSelection()
            alert("Can only conduct this calculation on one or more columns")
        end

        Array<Skew> calculations
        integer i = 0
        repeat while i < selection:GetColumnSize()
            Skew calculation
            GetColumn(selection:GetColumn(i)):Calculate(calculation)
            calculations:Add(calculation)
            i = i + 1
        end
        
        return calculations
    end

    /*
        This action calculates the kurtosis of the selected column.

        Attribute: Returns the kurtosis
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumn(0)
        output frame:Kurtosis()
    */
    action Kurtosis returns number
        if not IsSingleColumnSelection()
            alert("Can only conduct this calculation on a single column")
        end

        Kurtosis calculation
        GetColumn(selection:GetColumn(0)):Calculate(calculation)
        return calculation:GetKurtosis()
    end

    /*
        This action calculates the kurtosis of the selected columns. In this case, the full
        calculation objects are returned.

        Attribute: Returns an array of the calculations
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumnRange(0,2)
        Array<Kurtosis> values = frame:KurtosisSelectedColumns()
    */
    action KurtosisSelectedColumns returns Array<Kurtosis>
        if not IsMultiColumnSelection()
            alert("Can only conduct this calculation on one or more columns")
        end

        Array<Kurtosis> calculations
        integer i = 0
        repeat while i < selection:GetColumnSize()
            Kurtosis calculation
            GetColumn(selection:GetColumn(i)):Calculate(calculation)
            calculations:Add(calculation)
            i = i + 1
        end
        
        return calculations
    end

    /*
        This action calculates summary information for the column.

        Attribute: Returns the summary
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumn(0)
        Summarize summary = frame:Summarize()
    */
    action Summarize returns Summarize
        if not IsSingleColumnSelection()
            alert("Can only conduct this calculation on a single column")
        end

        Summarize calculation
        GetColumn(selection:GetColumn(0)):Calculate(calculation)
        return calculation
    end

    /*
        This action calculates summaries of the selected columns. In this case, the full
        calculation objects are returned.

        Attribute: Returns an array of the calculations
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
    
        DataFrame frame
        frame:Load("Data.csv")
        frame:AddSelectedColumnRange(0,2)
        Array<Summarize> values = frame:SummarizeSelectedColumns()
    */
    action SummarizeSelectedColumns returns Array<Summarize>
        if not IsMultiColumnSelection()
            alert("Can only conduct this calculation on one or more columns")
        end

        Array<Summarize> calculations
        integer i = 0
        repeat while i < selection:GetColumnSize()
            Summarize calculation
            GetColumn(selection:GetColumn(i)):Calculate(calculation)
            calculations:Add(calculation)
            i = i + 1
        end
        
        return calculations
    end

    /*
        This action creates a Histogram from the current column selection in the DataFrame.
        By default, it uses the interquartile range to calculate its bin width. This
        can be overriden by calling Histogram(integer) and passing the bin width directly.

        Attribute: Returns a Histogram chart that can be displayed or placed into a user interface or game.
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Interface.Controls.Charts.Histogram
        
        DataFrame frame
        frame:Load("Dogs.csv")
        frame:AddSelectedColumns("Maximum Life Span")
        Histogram chart = frame:Histogram()
        chart:SetTitle("Maximum Life Span of Dog Breeds")
        chart:SetXAxisTitle("Max Life Span")
        chart:Display()
    */
    action Histogram returns Histogram
        if not IsSingleColumnSelection()
            alert("Can only conduct this calculation on a single column")
        end

        HistogramCreator creator
        creator:SetColumn(selection:GetColumn(0))
        
        return cast(Histogram, CreateChart(creator))
    end

    /*
        This action creates a Histogram from the current column selection in the DataFrame.
        By default, Histogram() uses the interquartile range to calculate its bin width, whereas in this version, 
        this is overriden and this bin width is used instead.

        Attribute: Returns a Histogram chart that can be displayed or placed into a user interface or game.
    
        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Interface.Controls.Charts.Histogram
        
        DataFrame frame
        frame:Load("Dogs.csv")
        frame:AddSelectedColumns("Maximum Life Span")
        Histogram chart = frame:Histogram(5)
        chart:SetTitle("Maximum Life Span of Dog Breeds")
        chart:SetXAxisTitle("Max Life Span")
        chart:Display()
    */
    action Histogram(integer binWidth) returns Histogram
        if not IsSingleColumnSelection()
            alert("Can only conduct this calculation on a single column")
        end

        HistogramCreator creator
        creator:SetColumn(selection:GetColumn(0))
        creator:SetBinWidth(binWidth)
        
        return cast(Histogram, CreateChart(creator))
    end

    /*
        This action returns a text based representation of the data frame.

        Attribute: Returns a text based representation, in comma separated format

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame

        //Load a comma separated file
        DataFrame frame
        frame:Load("Data.csv")

        //output the frame to the console
        output frame:ToText()
    */
    action ToText returns text
        CommaSeparatedSaver saver
        return saver:ConvertToText(me)
    end
end