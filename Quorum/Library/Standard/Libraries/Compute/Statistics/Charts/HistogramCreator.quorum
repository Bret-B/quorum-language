package Libraries.Compute.Statistics.Charts

use Libraries.Compute.Statistics.DataFrameChartCreator
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Compute.Statistics.DataFrame
use Libraries.Interface.Controls.Charts.BarChart
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Interface.Controls.Charts.Histogram
use Libraries.Compute.Statistics.Calculations.InterQuartileRange
use Libraries.Compute.Math
use Libraries.Interface.Controls.Charts.BarGroup
use Libraries.Interface.Controls.Charts.Bar
use Libraries.Interface.Controls.Charts.Series
use Libraries.Interface.Controls.Charts.Legend
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Charts.ColumnToTextArray
use Libraries.Compute.Statistics.Charts.ColumnToNumberArray
use Libraries.Containers.Support.Comparison
use Libraries.Compute.Statistics.Inputs.FactorInput

/*
    This class is used to create a histogram for use in an application. By default, it uses 
    the Freedman-Diaconis rule for bin widths, which provides a reasonable looking histogram
    in most cases. More information can be found at:

    https://en.wikipedia.org/wiki/Freedman%E2%80%93Diaconis_rule

    Attribute: Author Andreas Stefik
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Charts.HistogramCreator

    DataFrame frame
    frame:Load("Data/Data.csv")

    //Create a Bar Chart and set some properties
    DataFrame frame
    frame:Load("Data/Data.csv")

    HistogramCreator creator
    creator:SetValueColumn("DRT")

    Chart chart = frame:CreateChart(creator)

    chart:SetTitle("Histogram")
    chart:SetYAxisTitle("Frequency")
    chart:SetXAxisTitle("DT")

    //we might then add this chart to a game.
*/
class HistogramCreator is DataFrameChartCreator, ColumnInput, FactorInput
    number binWidthOverride = -1
    boolean decimalScale = false

    Comparison comparison = undefined
    
    action Create(DataFrame frame) returns Chart
        Histogram chart
        if GetFactorSize() > 0
            alert("HistogramCreator does not support factors.")
        end

        chart:SetYAxisTitle("Frequency")
        chart:SetXAxisTitle("Range")
        HashTable <text, Series> seriesFactor
        HashTable <text, BarGroup> groupFactor
        number maxFrequency = 0.0
        number min = 10000000.0
        number max = 0.0

        if GetColumnSize() < 1
            alert("Cannot create a Histogram without any columns.")
        end

        integer columnSize = 0 // This will keep track of the largest column (if they are not all the same)

        // Find overall max and min of all series and largest column
        integer n = 0
        repeat while n < GetColumnSize()
            DataFrameColumn column = frame:GetColumn(GetColumn(n))
           if not column:IsNumberColumn()
                alert("HistogramCreator does not support text columns. " + column:GetHeader() + " is a text column.")
                return undefined
            end
            chart:GetColumns():Add(column)
            if(column:GetSize() > columnSize)
                columnSize = column:GetSize()
            end
            InterQuartileRange range
            column:Calculate(range)
            if(range:GetMinimum() < min)
                min = range:GetMinimum()
            end
            if(range:GetMaximum() > max)
                max = range:GetMaximum()
            end
            n = n + 1 
        end

        if binWidthOverride > 0.0
            chart:SetBinWidth(binWidthOverride)
        end
        chart:SetDataMinimum(min)
        chart:SetDataMaximum(max)
        chart:GetHorizontalPanel():SetMinimum(min)
        chart:GetHorizontalPanel():SetMaximum(max)
        chart:MakeBins()
        return chart
    end

    /* Obtains what the bin width was. */
    action GetBinWidth returns number
        return binWidthOverride
    end

    /* Manually changes the bin width. */
    action SetBinWidth(number binWidthOverride)
        me:binWidthOverride = binWidthOverride
    end

    /* 
        Boolean to see if binwidth is a number or integer, helps with clean x labels 
        Example a bin width of 1 (integer) would produce a label [1-2] and a bin width of 1.0 would produce [1.0-2.0]
    */
    action BinWidthIsNumber(boolean flag)
        decimalScale = flag
    end
end