package Libraries.Compute.Statistics.Charts

use Libraries.Compute.Statistics.DataFrameChartCreator
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Compute.Statistics.DataFrame
use Libraries.Interface.Controls.Charts.BarChart
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Interface.Controls.Charts.Histogram
use Libraries.Compute.Statistics.Calculations.InterQuartileRange
use Libraries.Compute.Math

/*
    This class is used to create a histogram for use in an application. By default, it uses 
    the Freedman-Diaconis rule for bin widths, which provides a reasonable looking histogram
    in most cases. More information can be found at:

    https://en.wikipedia.org/wiki/Freedman%E2%80%93Diaconis_rule

    Attribute: Author Andreas Stefik
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Charts.HistogramCreator

    DataFrame frame
    frame:Load("Data/Data.csv")

    //Create a Bar Chart and set some properties
    DataFrame frame
    frame:Load("Data/Data.csv")

    HistogramCreator creator
    creator:SetValueColumn("DRT")

    Chart chart = frame:CreateChart(creator)

    chart:SetTitle("Histogram")
    chart:SetYAxisTitle("Frequency")
    chart:SetXAxisTitle("DT")

    //we might then add this chart to a game.
*/
class HistogramCreator is DataFrameChartCreator
    private integer valueColumn = -1
    private integer ticks = 5
    number binWidthOverride = -1

    action Create(DataFrame frame) returns Chart
        Histogram chart

        //error checking
        DataFrameColumn values = frame:GetColumn(valueColumn)

        if values = undefined
            alert("Could not find a column named " + valueColumn)
        end

        //first calculate the inter-quartile range
        InterQuartileRange range
        values:Calculate(range)

        number binWidth = 2 * range:GetInterQuartileRange()

        //if the user set the bin width, let them adjust as they see fit.
        //if they didn't, record the default.
        if binWidthOverride > 0
            binWidth = binWidthOverride
        else 
            binWidthOverride = binWidth
        end

        Math math

        integer n = values:GetSize()
        number val = math:RaiseToPower(n, -(1.0 / 3.0))
        
        binWidth = binWidth * val

        number min = range:GetMinimum()
        number max = range:GetMaximum()

        number binSpacing = (max - min)  / binWidth

        integer bins = cast(integer, binSpacing) + 1
        Array<integer> count
        Array<number> binFloor
        i = 0
        repeat while i < bins
            count:Add(0)
            binFloor:Add(binWidth:GetMaximumValue())
            i = i + 1
        end
        
        i = 0
        repeat while i < n
            if not values:IsUndefined(i)
                number value = values:GetAsNumber(i)
                integer bin = cast(integer, (value - min) / binWidth)
                count:Set(bin, count:Get(bin) + 1)
    
                if value < binFloor:Get(bin)
                    binFloor:Set(bin, value)
                end
            end
            i = i + 1
        end

        number maxFrequency = 0
        i = 0
        repeat while i < count:GetSize()
            integer amount = count:Get(i)
            if amount > maxFrequency
                maxFrequency = amount
            end
            i = i + 1
        end

        chart:SetScaleMaximum(maxFrequency)

        number value = math:RaiseToPower(maxFrequency, -(1.0 / 3.0))
        
        chart:SetYTickSteps(ticks)
        i = 0
        repeat while i < count:GetSize()
            integer amount = count:Get(i)
            number floor = binFloor:Get(i)
            boolean doNotDisplay = floor = floor:GetMaximumValue()
            text valueDisplay = "" + cast(integer, floor)
            if doNotDisplay
                valueDisplay = ""
            end
            chart:AddBar(valueDisplay, (amount / maxFrequency))
            i = i + 1
        end
        return chart
    end

    /*
        Returns the name of the value column specified.
    */
    action GetColumn returns integer
        return valueColumn
    end

    /*
        Sets the name of the name column specified.
    */
    action SetColumn(integer column)
        me:valueColumn = column
    end

    /*
        This returns the number of ticks to present on the chart.

        Attribute: Returns the number of ticks    
    */
    action GetTicks returns integer
        return ticks
    end

    /*
        This sets the number of ticks to present on the chart.

        Attribute: Parameter ticks the number of ticks    
    */
    action SetTicks(integer ticks)
        me:ticks = ticks
    end

    /* Obtains what the bin width was. */
    action GetBinWidth returns number
        return binWidthOverride
    end

    /* Manually changes the bin width. */
    action SetBinWidth(number binWidthOverride)
        me:binWidthOverride = binWidthOverride
    end
end