package Libraries.Compute.Statistics.Charts

use Libraries.Compute.Statistics.DataFrameChartCreator
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Compute.Statistics.DataFrame
use Libraries.Interface.Controls.Charts.BarChart
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Interface.Controls.Charts.Histogram
use Libraries.Compute.Statistics.Calculations.InterQuartileRange
use Libraries.Compute.Math
use Libraries.Interface.Controls.Charts.BarGroup
use Libraries.Interface.Controls.Charts.Bar
use Libraries.Interface.Controls.Charts.Series
use Libraries.Interface.Controls.Charts.Legend
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Charts.ColumnToTextArray
use Libraries.Compute.Statistics.Charts.ColumnToNumberArray
use Libraries.Containers.Support.Comparison

/*
    This class is used to create a histogram for use in an application. By default, it uses 
    the Freedman-Diaconis rule for bin widths, which provides a reasonable looking histogram
    in most cases. More information can be found at:

    https://en.wikipedia.org/wiki/Freedman%E2%80%93Diaconis_rule

    Attribute: Author Andreas Stefik
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Charts.HistogramCreator

    DataFrame frame
    frame:Load("Data/Data.csv")

    //Create a Bar Chart and set some properties
    DataFrame frame
    frame:Load("Data/Data.csv")

    HistogramCreator creator
    creator:SetValueColumn("DRT")

    Chart chart = frame:CreateChart(creator)

    chart:SetTitle("Histogram")
    chart:SetYAxisTitle("Frequency")
    chart:SetXAxisTitle("DT")

    //we might then add this chart to a game.
*/
class HistogramCreator is DataFrameChartCreator, ColumnInput
    private integer valueColumn = -1
    private integer ticks = 5
    number binWidthOverride = -1
    Comparison comparison = undefined
    
    action Create(DataFrame frame) returns Chart
        Histogram chart
        chart:SetYAxisTitle("Count")
        HashTable <text, Series> seriesFactor
        HashTable <text, BarGroup> groupFactor
        number maxFrequency = 0.0
        integer totalCount = 0
        number min = 10000000.0
        number max = 0.0

        integer columnSize = 0
        if GetColumnSize() = 1
            chart:SetXAxisTitle(frame:GetColumn(GetColumn(0)):GetHeader())
        end
        // Find overall max and min of all series and largest column
        integer n = 0
        repeat while n < GetColumnSize()
            DataFrameColumn column = frame:GetColumn(GetColumn(n))
            if(column:GetSize() > columnSize)
                columnSize = column:GetSize()
            end
            InterQuartileRange range
            column:Calculate(range)
            if(range:GetMinimum() < min)
                min = range:GetMinimum()
            end
            if(range:GetMaximum() > max)
                max = range:GetMaximum()
            end
            n = n + 1 
        end

        Math math
        // Take square root of number of data points and round up for default number of bins
        // If too many bins are made, they won't be placed on chart after the max value
        integer numberOfBins = cast(integer, math:RaiseToPower(columnSize, (1.0 / 2.0))) + 1
        // Take range and divide it amongst bins and round up to get the default bin width
        number binWidth = ((max - min)  / (cast(number, numberOfBins))) + 1.0

        Array<integer> count
        Array<number> binFloor

        n = 0
        number nextFloor = min
        repeat while n < numberOfBins
            count:Add(0)
            binFloor:Add(nextFloor)
            text valueDisplay = "[" + cast(integer, nextFloor) + "-" + cast(integer, nextFloor + binWidth) + "]"
            if(not groupFactor:HasKey(valueDisplay))
                BarGroup group
                group:SetName(valueDisplay)
                groupFactor:Add(valueDisplay, group)
            end
            nextFloor = nextFloor + binWidth
            n = n + 1
        end  

        n = 0
        repeat while n < GetColumnSize()  
            DataFrameColumn column = frame:GetColumn(GetColumn(n))   

            // Reset counts to zero for each series
            i = 0
            repeat while i < numberOfBins
                count:Set(i, 0)
                i = i + 1
            end     

            i = 0
            repeat while i < column:GetSize()
                if not column:IsUndefined(i)
                    number value = column:GetAsNumber(i)
                    integer bin = cast(integer, (value - min) / binWidth)
                    number binRoof = binFloor:Get(bin) + binWidth
                    if value < binRoof and value >= binFloor:Get(bin)
                        count:Set(bin, count:Get(bin) + 1)
                    elseif value >= binRoof
                        count:Set(bin+1, count:Get(bin+1) + 1)
                    end
                end
                i = i + 1
            end
    
            // Find max frequency of all counts across all series
            i = 0
            repeat while i < count:GetSize()
                integer amount = count:Get(i)
                if amount > maxFrequency
                    maxFrequency = amount
                end
                i = i + 1
            end

            // If a new series (ie new column)
            if(not seriesFactor:HasKey(column:GetHeader()))
                Series series
                series:SetName(column:GetHeader())
                seriesFactor:Add(column:GetHeader(), series)
            end
    
            i = 0
            number floor = 0.0
            repeat while i < count:GetSize() and (floor+binWidth) < max
                integer amount = count:Get(i)
                floor = binFloor:Get(i)
                text valueDisplay = "[" + cast(integer, floor) + "-" + cast(integer, floor+binWidth) + "]"

                Bar bar
                bar:SetValue(amount)
                bar:SetName(valueDisplay)
                // If bar is part of a group
                if(groupFactor:HasKey(valueDisplay))
                    groupFactor:GetValue(valueDisplay):AddBar(bar)
                end
                // If bar is part of a series
                if(seriesFactor:HasKey(column:GetHeader()))
                    seriesFactor:GetValue(column:GetHeader()):AddItem(bar:GetIcon())
                end
                i = i + 1
            end
            n = n + 1
        end

        // Bar Groups
        i = 0
        repeat while i < groupFactor:GetSize()
            floor = binFloor:Get(i)
            text valueDisplay = "[" + cast(integer, floor) + "-" + cast(integer, floor+binWidth) + "]"
            if(groupFactor:HasKey(valueDisplay) and (floor+binWidth) < max) 
                chart:AddBarGroup(groupFactor:GetValue(valueDisplay))
            end
            i = i + 1
        end    
        
        // Series
        Array<text> seriesKeyArray = seriesFactor:CopyToKeyArray()
        if comparison = undefined
            seriesKeyArray:Sort()
        else
            seriesKeyArray:Sort(comparison)
        end
        i = 0
        repeat while i < seriesKeyArray:GetSize()
            chart:AddSeries(seriesFactor:GetValue(seriesKeyArray:Get(i)))
            i = i + 1
        end

        chart:SetScaleMaximum(maxFrequency)
        chart:SetYTickSteps(ticks)
        Legend legend
        chart:SetMaxBarValue(maxFrequency)
        legend:SetSeriesList(chart:GetSeriesList())
        chart:SetLegend(legend)
        return chart
    end

    /*
        Returns the name of the value column specified.
    */
    action GetColumn returns integer
        return valueColumn
    end

    /*
        Sets the name of the name column specified.
    */
    action SetColumn(integer column)
        me:valueColumn = column
    end

    /*
        This returns the number of ticks to present on the chart.

        Attribute: Returns the number of ticks    
    */
    action GetTicks returns integer
        return ticks
    end

    /*
        This sets the number of ticks to present on the chart.

        Attribute: Parameter ticks the number of ticks    
    */
    action SetTicks(integer ticks)
        me:ticks = ticks
    end

    /* Obtains what the bin width was. */
    action GetBinWidth returns number
        return binWidthOverride
    end

    /* Manually changes the bin width. */
    action SetBinWidth(number binWidthOverride)
        me:binWidthOverride = binWidthOverride
    end
end