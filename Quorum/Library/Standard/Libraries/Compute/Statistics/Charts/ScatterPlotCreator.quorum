package Libraries.Compute.Statistics.Charts

use Libraries.Compute.Statistics.DataFrameChartCreator
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Interface.Controls.Charts.ScatterPlot
use Libraries.Compute.Vector
use Libraries.Compute.Statistics.Calculations.Summarize
use Libraries.Interface.Controls.Charts.ChartPoint
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Inputs.FactorInput
use Libraries.Interface.Controls.Charts.Series
use Libraries.Interface.Controls.Charts.Legend
use Libraries.Interface.Controls.Charts.ChartOptions
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Containers.Support.Comparison
use Libraries.Compute.Statistics.Tests.Regression
use Libraries.Interface.Controls.Charts.RegressionLine
use Libraries.Compute.Statistics.Columns.NumberColumn

/*
    This class is used to create a scatter plot for use in an application.

    Attribute: Author Andreas Stefik, William Allee
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.ScatterPlot

    DataFrame frame
    frame:Load("Data.csv")
    frame:AddSelectedColumn(1) //Independent Variable
    frame:AddSelectedColumn(2)
    ScatterPlot chart = frame:ScatterPlot()
    chart:SetTitle("My Awesome Title")
    chart:SetXAxisTitle("Time")
    chart:Display()
*/
class ScatterPlotCreator is DataFrameChartCreator, ColumnInput, FactorInput
    // The minimum and maximum values portrayed in the chart area.
    number xAxisMinimum = 0
    number xAxisMaximum = 1
    number yAxisMinimum = 0
    number yAxisMaximum = 1
    Comparison comparison = undefined
    ChartOptions options

    action Create(DataFrame frame) returns Chart
        integer columns = GetColumnSize()
        integer factors = GetFactorSize()

        if columns > 1 and factors = 0
            return CreateChart(frame, false)
        elseif columns = 2 and factors = 1
            return CreateChart(frame, true)
        else
            alert("ScatterPlotCreator does not support the number of column/factors that were selected.")
        end

        return undefined
    end

    action CreateChart(DataFrame frame, boolean useFactor) returns Chart
        ScatterPlot chart
        boolean numericalXData = true
        boolean numericalYData = true
        boolean numericalFactor = false
        integer columns = GetColumnSize()

        HashTable<text, Series> seriesFactor
        HashTable<text, Array<DataFrameColumn>> regressionFactor //Used for regression lines
        HashTable<number, text> numberForText //Used to later sort
        HashTable<text, number> xLabels //Used for non-numerical data
        HashTable<text, number> yLabels //Used for non-numerical data
        Vector xVector
        Vector yVector

        DataFrameColumn factor = frame:GetColumn(GetColumn(0)) // Initialized. This will be overwritten if factor is used
        if useFactor
            factor = frame:GetColumn(GetFactor(0))
            if factor:IsNumberColumn()
                numericalFactor = true
            end
            integer i = 0 
            repeat while i < factor:GetSize()
                if not factor:IsUndefined(i)
                    if(not seriesFactor:HasKey(factor:GetAsText(i)))
                        Series series
                        series:SetName(factor:GetAsText(i))
                        seriesFactor:Add(factor:GetAsText(i), series)
                        if numericalFactor
                            numberForText:Add(factor:GetAsNumber(i), factor:GetAsText(i))
                        end
                        Array<DataFrameColumn> regColumns
                        NumberColumn column1 //independent
                        NumberColumn column2 //dependent
                        regColumns:Add(column1)
                        regColumns:Add(column2)
                        regressionFactor:Add(factor:GetAsText(i), regColumns)
                    end
                end
                i = i + 1 
            end
        end

        // The first column will default to the x-axis (independent variable)
        DataFrameColumn dfx = frame:GetColumn(GetColumn(0))
        if(dfx:IsNumberColumn())
            if dfx = undefined and dfx:CanConvertToVector()
                alert("Could not compute a scatterplot on the x column")  
            end
            xVector = dfx:ConvertToVector()
        else
            numericalXData = false
        end

        integer i = 1
        repeat while i < columns
            DataFrameColumn dfy = frame:GetColumn(GetColumn(i))

            if(dfy:IsNumberColumn())
                if dfy = undefined and dfy:CanConvertToVector()
                    alert("Could not compute a scatterplot on a y column")        
                end
                yVector = dfy:ConvertToVector()
                if dfx:GetSize() not= dfy:GetSize()
                    alert("Columns must be the same size in order to create Scatter Plot")
                end
            else
                numericalYData = false
            end

            if not useFactor
                if(not seriesFactor:HasKey(dfy:GetHeader()))
                    Series series
                    series:SetName(dfy:GetHeader())
                    seriesFactor:Add(dfy:GetHeader(), series)
                    Array<DataFrameColumn> regColumns
                    NumberColumn column1 //independent
                    column1:SetHeader(dfx:GetHeader())
                    NumberColumn column2 //dependent
                    column2:SetHeader(dfy:GetHeader())
                    regColumns:Add(column1)
                    regColumns:Add(column2)
                    regressionFactor:Add(dfy:GetHeader(), regColumns)
                end
            end
            i = i + 1
        end

        chart:SetXAxisTitle(dfx:GetHeader())
        if columns = 2
            chart:SetYAxisTitle(frame:GetColumn(GetColumn(1)):GetHeader())
        end

        number xMin = chart:GetXAxisMinimum()
        number xMax = chart:GetXAxisMaximum()
        number yMin = chart:GetYAxisMinimum()
        number yMax = chart:GetYAxisMaximum()

        // If everything is numerical - regression is possible
        if numericalXData and numericalYData
            Summarize xSum
            dfx:Calculate(xSum)
            xMin = xSum:GetMinimum()
            xMax = xSum:GetMaximum()
    
            Summarize ySum
            frame:GetColumn(GetColumn(1)):Calculate(ySum)
            yMin = ySum:GetMinimum()
            yMax = ySum:GetMaximum()
    
            i = 1 
            repeat while i < columns
                frame:GetColumn(GetColumn(i)):Calculate(ySum)
                if ySum:GetMinimum() < yMin
                    yMin = ySum:GetMinimum()
                end
                if ySum:GetMaximum() > yMax
                    yMax = ySum:GetMaximum()
                end
                i = i + 1
            end
            yAxisMinimum = yMin
            yAxisMaximum = yMax
            xAxisMinimum = xMin
            xAxisMaximum = xMax
    
            i = 1
            repeat while i < columns
                DataFrameColumn dfy = frame:GetColumn(GetColumn(i))
                integer j = 0
                repeat while j < dfx:GetSize()
                    if not dfx:IsUndefined(j) and not dfy:IsUndefined(j) and not factor:IsUndefined(j)
                        number x = dfx:GetAsNumber(j)
                        number y = dfy:GetAsNumber(j)
                        ChartPoint point
                        point:SetValueX(x)
                        point:SetValueY(y)
                        point:SetName("Point for " + x + " " + dfx:GetHeader() + " and " + y + " " + dfy:GetHeader())

                        if useFactor
                            if(seriesFactor:HasKey(factor:GetAsText(j)))
                                seriesFactor:GetValue(factor:GetAsText(j)):AddItem(point)
                                point:SetSeries(seriesFactor:GetValue(factor:GetAsText(j)))
                                
                                if regressionFactor:HasKey(factor:GetAsText(j))
                                    regressionFactor:GetValue(factor:GetAsText(j)):Get(0):Add(cast(text, x))
                                    regressionFactor:GetValue(factor:GetAsText(j)):Get(1):Add(cast(text, y))
                                end
                            end
                        else
                            if(seriesFactor:HasKey(dfy:GetHeader()))
                                seriesFactor:GetValue(dfy:GetHeader()):AddItem(point)
                                point:SetSeries(seriesFactor:GetValue(dfy:GetHeader()))

                                if regressionFactor:HasKey(dfy:GetHeader())
                                    regressionFactor:GetValue(dfy:GetHeader()):Get(0):Add(cast(text, x))
                                    regressionFactor:GetValue(dfy:GetHeader()):Get(1):Add(cast(text, y))
                                end
                            end
                        end
                        chart:Add(point)
                    end
                    j = j + 1
                end
                i = i + 1
            end

            // Compute the regression lines for each series (they may not be shown)
            Array<text> regKeyArray = regressionFactor:CopyToKeyArray()
            i = 0
            repeat while i < regKeyArray:GetSize()
                DataFrameColumn indepVals = regressionFactor:GetValue(regKeyArray:Get(i)):Get(0)
                DataFrameColumn depVals = regressionFactor:GetValue(regKeyArray:Get(i)):Get(1)
                if indepVals:GetSize() < 3 or depVals:GetSize() < 3
                    output "Linear regression was not computable for " + regKeyArray:Get(i)
                else
                    RegressionLine regLine
                    DataFrame regressionFrame
                    regressionFrame:SetColumns(regressionFactor:GetValue(regKeyArray:Get(i)))
                    if useFactor
                        regLine:SetIndependentVariable(chart:GetXAxisTitle())
                        regLine:SetDependentVariable(chart:GetYAxisTitle())
                    else
                        regLine:SetIndependentVariable(regressionFactor:GetValue(regKeyArray:Get(i)):Get(0):GetHeader())
                        regLine:SetDependentVariable(regressionFactor:GetValue(regKeyArray:Get(i)):Get(1):GetHeader())
                        if columns > 2
                            regLine:NamedAfterSeries(true)
                        end
                    end
                    Regression regression 
                    regression:AddFactor(0) //the independent variable
                    regression:AddColumn(1) //the dependent variable
                    regressionFrame:Calculate(regression)
                    regLine:SetRegression(regression)
                    if seriesFactor:HasKey(regKeyArray:Get(i))
                        regLine:SetSeries(seriesFactor:GetValue(regKeyArray:Get(i)))
                        seriesFactor:GetValue(regKeyArray:Get(i)):SetRegressionLine(regLine)
                    end
                end
                i = i + 1
            end 

        // If x data is non-numerical and y data is numerical
        elseif not numericalXData and numericalYData
            // Get distinct x-axis labels
            i = 0
            repeat while i < dfx:GetSize()
                if not dfx:IsUndefined(i)
                    if(not xLabels:HasKey(dfx:GetAsText(i)))
                        xLabels:Add(dfx:GetAsText(i), cast(number, i))
                    end
                end
                i = i + 1
            end
            
            //Sort the labels
            Array<text> xLabelTextArray = xLabels:CopyToKeyArray()
            if comparison = undefined
                xLabelTextArray:Sort()
            else
                xLabelTextArray:Sort(comparison)
            end

            //Get new position on x-axis for each label
            i = 0
            repeat while i < xLabelTextArray:GetSize()
                if(xLabels:HasKey(xLabelTextArray:Get(i)))
                    xLabels:Set(xLabelTextArray:Get(i), cast(number, i))
                end
                i = i + 1
            end
            

            xMax = xLabels:GetSize()-1
            xMin = 0

            Summarize ySum
            frame:GetColumn(GetColumn(1)):Calculate(ySum)
            yMin = ySum:GetMinimum()
            yMax = ySum:GetMaximum()
    
            i = 2 
            repeat while i < columns
                frame:GetColumn(GetColumn(i)):Calculate(ySum)
                if ySum:GetMinimum() < yMin
                    yMin = ySum:GetMinimum()
                end
                if ySum:GetMaximum() > yMax
                    yMax = ySum:GetMaximum()
                end
                i = i + 1
            end

            i = 1
            repeat while i < columns
                DataFrameColumn dfy = frame:GetColumn(GetColumn(i))
                integer j = 0
                repeat while j < dfx:GetSize()
                    if not dfx:IsUndefined(j) and not dfy:IsUndefined(j) and not factor:IsUndefined(j)
                        number x = xLabels:GetValue(dfx:GetAsText(j))
                        number y = dfy:GetAsNumber(j)
                        ChartPoint point
                        point:SetValueX(x)
                        point:SetValueY(y)
                        point:SetName("Point for " + x + " " + dfx:GetHeader() + " and " + y + " " + dfy:GetHeader())

                        if useFactor
                            if(seriesFactor:HasKey(factor:GetAsText(j)))
                                seriesFactor:GetValue(factor:GetAsText(j)):AddItem(point)
                                point:SetSeries(seriesFactor:GetValue(factor:GetAsText(j)))
                            end
                        else
                            if(seriesFactor:HasKey(dfy:GetHeader()))
                                seriesFactor:GetValue(dfy:GetHeader()):AddItem(point)
                                point:SetSeries(seriesFactor:GetValue(dfy:GetHeader()))
                            end
                        end
                        chart:Add(point)
                    end
                    j = j + 1
                end
                i = i + 1
            end
            xTicks = xLabels:GetSize()
            yAxisMinimum = yMin
            yAxisMaximum = yMax
            xAxisMinimum = xMin
            xAxisMaximum = xMax
            
            chart:OverrideXLabelsWithText(xLabelTextArray)

        // If everything is non-numerical data
        elseif not numericalXData and not numericalYData 
            // Get distinct x-axis labels
            i = 0
            repeat while i < dfx:GetSize()
                if not dfx:IsUndefined(i)
                    if(not xLabels:HasKey(dfx:GetAsText(i)))
                        xLabels:Add(dfx:GetAsText(i), cast(number, i))
                    end
                end
                i = i + 1
            end
            //Sort the x labels
            Array<text> xLabelTextArray = xLabels:CopyToKeyArray()
            if comparison = undefined
                xLabelTextArray:Sort()
            else
                xLabelTextArray:Sort(comparison)
            end
            //Get new position on x-axis for each label
            i = 0
            repeat while i < xLabelTextArray:GetSize()
                if(xLabels:HasKey(xLabelTextArray:Get(i)))
                    xLabels:Set(xLabelTextArray:Get(i), cast(number, i))
                end
                i = i + 1
            end


            // Get distinct y-axis labels
            i = 1
            repeat while i < columns
                DataFrameColumn dfy = frame:GetColumn(GetColumn(i))
                integer j = 0
                repeat while j < dfy:GetSize()
                    if not dfy:IsUndefined(j)
                        if(not yLabels:HasKey(dfy:GetAsText(j)))
                            yLabels:Add(dfy:GetAsText(j), cast(number, j))
                        end
                    end
                    j = j + 1
                end
                i = i + 1
            end
            //Sort the y labels
            Array<text> yLabelTextArray = yLabels:CopyToKeyArray()
            if comparison = undefined
                yLabelTextArray:Sort()
            else
                yLabelTextArray:Sort(comparison)
            end
            //Get new position on y-axis for each label
            i = 0
            repeat while i < yLabelTextArray:GetSize()
                if(yLabels:HasKey(yLabelTextArray:Get(i)))
                    yLabels:Set(yLabelTextArray:Get(i), cast(number, i))
                end
                i = i + 1
            end

            yAxisMinimum = 0
            yAxisMaximum = yLabels:GetSize()-1
            xAxisMinimum = 0
            xAxisMaximum = xLabels:GetSize()-1

            i = 1
            repeat while i < columns
                DataFrameColumn dfy = frame:GetColumn(GetColumn(i))
                integer j = 0
                repeat while j < dfx:GetSize()
                    if not dfx:IsUndefined(j) and not dfy:IsUndefined(j) and not factor:IsUndefined(j)
                        number x = xLabels:GetValue(dfx:GetAsText(j))
                        number y = yLabels:GetValue(dfy:GetAsText(j))
                        ChartPoint point
                        point:SetValueX(x)
                        point:SetValueY(y)
                        point:SetName("Point for " + x + " " + dfx:GetHeader() + " and " + y + " " + dfy:GetHeader())

                        if useFactor
                            if(seriesFactor:HasKey(factor:GetAsText(j)))
                                seriesFactor:GetValue(factor:GetAsText(j)):AddItem(point)
                                point:SetSeries(seriesFactor:GetValue(factor:GetAsText(j)))
                            end
                        else
                            if(seriesFactor:HasKey(dfy:GetHeader()))
                                seriesFactor:GetValue(dfy:GetHeader()):AddItem(point)
                                point:SetSeries(seriesFactor:GetValue(dfy:GetHeader()))
                            end
                        end
                        chart:Add(point)
                    end
                    j = j + 1
                end
                i = i + 1
            end
            xTicks = xLabels:GetSize()
            yTicks = yLabels:GetSize()

            chart:OverrideXLabelsWithText(xLabelTextArray)
            chart:OverrideYLabelsWithText(yLabelTextArray)

        // If x data is numerical and y data is non-numerical
        else
            Summarize xSum
            dfx:Calculate(xSum)
            xMin = xSum:GetMinimum()
            xMax = xSum:GetMaximum()

            // Get distinct y-axis labels
            i = 1
            repeat while i < columns
                DataFrameColumn dfy = frame:GetColumn(GetColumn(i))
                integer j = 0
                repeat while j < dfy:GetSize()
                    if not dfy:IsUndefined(j)
                        if(not yLabels:HasKey(dfy:GetAsText(j)))
                            yLabels:Add(dfy:GetAsText(j), cast(number, j))
                        end
                    end
                    j = j + 1
                end
                i = i + 1
            end
            //Sort the y labels
            Array<text> yLabelTextArray = yLabels:CopyToKeyArray()
            if comparison = undefined
                yLabelTextArray:Sort()
            else
                yLabelTextArray:Sort(comparison)
            end
            //Get new position on y-axis for each label
            i = 0
            repeat while i < yLabelTextArray:GetSize()
                if(yLabels:HasKey(yLabelTextArray:Get(i)))
                    yLabels:Set(yLabelTextArray:Get(i), cast(number, i))
                end
                i = i + 1
            end

            yAxisMinimum = 0
            yAxisMaximum = yLabels:GetSize()-1
            xAxisMinimum = xMin
            xAxisMaximum = xMax
            if (xMax - xMin) < 10
                xTicks = cast(integer, xMax - xMin) + 1
            else
                xTicks = 10
            end            

            i = 1
            repeat while i < columns
                DataFrameColumn dfy = frame:GetColumn(GetColumn(i))
                integer j = 0
                repeat while j < dfx:GetSize()
                    if not dfx:IsUndefined(j) and not dfy:IsUndefined(j) and not factor:IsUndefined(j)
                        number x = dfx:GetAsNumber(j)
                        number y = yLabels:GetValue(dfy:GetAsText(j))
                        ChartPoint point
                        point:SetValueX(x)
                        point:SetValueY(y)
                        point:SetName("Point for " + x + " " + dfx:GetHeader() + " and " + y + " " + dfy:GetHeader())

                        if useFactor
                            if(seriesFactor:HasKey(factor:GetAsText(j)))
                                seriesFactor:GetValue(factor:GetAsText(j)):AddItem(point)
                                point:SetSeries(seriesFactor:GetValue(factor:GetAsText(j)))
                            end
                        else
                            if(seriesFactor:HasKey(dfy:GetHeader()))
                                seriesFactor:GetValue(dfy:GetHeader()):AddItem(point)
                                point:SetSeries(seriesFactor:GetValue(dfy:GetHeader()))
                            end
                        end
                        chart:Add(point)
                    end
                    j = j + 1
                end
                i = i + 1
            end
            yTicks = yLabels:GetSize()
            chart:OverrideYLabelsWithText(yLabelTextArray)
        end

        // Sort and add the series
        Array <Series> seriesList
        Array<text> seriesKeyArray = seriesFactor:CopyToKeyArray()
        if numericalFactor
            Array<number> numberKeyArray = numberForText:CopyToKeyArray()
            if comparison = undefined
                numberKeyArray:Sort()
            else
                numberKeyArray:Sort(comparison)
            end
            i = 0
            repeat while i < numberKeyArray:GetSize()
                seriesList:Add(seriesFactor:GetValue(numberForText:GetValue(numberKeyArray:Get(i))))
                i = i + 1
            end
        else
            if comparison = undefined
                seriesKeyArray:Sort()
            else
                seriesKeyArray:Sort(comparison)
            end
            i = 0
            repeat while i < seriesKeyArray:GetSize()
                seriesList:Add(seriesFactor:GetValue(seriesKeyArray:Get(i)))
                i = i + 1
            end
        end 

        if useFactor
            chart:SetLegendTitle(factor:GetHeader())
        end

        chart:SetSeriesList(seriesList)
        SetScale(chart, yAxisMinimum, yAxisMaximum, xAxisMinimum, xAxisMaximum)
        return chart
    end

    private action SetScale(ScatterPlot chart, number ymin, number ymax, number xmin, number xmax)
        chart:GetVerticalPanel():SetMinimum(ymin)
        chart:GetVerticalPanel():SetMaximum(ymax)
        chart:GetHorizontalPanel():SetMinimum(xmin)
        chart:GetHorizontalPanel():SetMaximum(xmax)
    end
end