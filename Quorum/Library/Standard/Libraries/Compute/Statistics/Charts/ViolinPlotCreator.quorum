package Libraries.Compute.Statistics.Charts

use Libraries.Compute.Statistics.DataFrameChartCreator
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Inputs.FactorInput
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Columns.all
use Libraries.Interface.Controls.Charts.all
use Libraries.Compute.Statistics.Calculations.InterQuartileRange
use Libraries.Compute.Statistics.Calculations.Summarize
use Libraries.Compute.Statistics.Analysis.UnivariateAction
use Libraries.Compute.Vector
use Libraries.Containers.Array
use Libraries.Containers.HashTable

/*
    This class is used to create a Violin Chart from columns/factor of data in a DataFrame.
    It combines a box and whisker graph and a normal distribution graph. The max value on 
    y-axis is based on the max value of all columns. X-axis is devided equally to holds at most 3 
    violin chart with labels of each column.

    Attribute: Authors Silafu Yiliyaer, Hannah Williams
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Charts.ViolinPlotCreator

    //Create a ViolinPlot and set some properties
    DataFrame frame
    frame:Load("Data/Data.csv")

    ViolinPlotCreator creator
    creator:AddColumn(1)

    SigmoidAction act
    creator:SetWindowingAction(act)

    ViolinPlot chart = frame:CreateChart(creator)
    chart:SetTitle("Violin Chart")
    chart:SetYAxisTitle("Y-values")
    chart:SetXAxisTitle("X-Values")
    chart:SetBandWidth(10)
*/
class ViolinPlotCreator is DataFrameChartCreator, InterQuartileRange, ColumnInput, FactorInput
    UnivariateAction window = undefined

    action Create(DataFrame frame) returns Chart
        //If there are no factors to map to, each column will be map at its own x-tick
        if GetColumnSize() > 0 and GetFactorSize() = 0
            return CreateChartWithoutFactor(frame)
        elseif GetColumnSize() > 0 and GetFactorSize() = 1
            DataFrameColumn factor = frame:GetColumn(GetFactor(0))
            if factor:IsUndefined() // If the factor is undefined don't use a factor
                return CreateChartWithoutFactor(frame)
            else
                return CreateChartWithFactor(frame)
            end
        else
            alert("ViolinPlotCreator does not support the number of column/factors that were selected.")
            alert("Please include at least one numerical column. Violin Plots can support at most one factor.")
        end

        return undefined
    end

    action CreateChartWithoutFactor(DataFrame frame) returns Chart
        ViolinPlot chart
        integer columns = GetColumnSize()

        chart:SetYAxisTitle("Total")
        chart:SetXAxisTitle("Group")
        if(columns = 1)
            chart:SetTitle(frame:GetColumn(GetColumn(0)):GetHeader() + " Violin Plot")
        end

        Array<text> groupNames
        HashTable<text, Series> seriesFactor
        HashTable<text, PlotGroup> groupFactor
        boolean numericalGroupName = false

        number yMax = 0
        number yMin = 0

        integer i = 0
        repeat while i < GetColumnSize()
            DataFrameColumn column = frame:GetColumn(GetColumn(i))
            if not column:IsUndefined()
                if not column:CanConvertToVector()
                    alert("Could not covert values in " + GetColumn(i) + " to vector")
                end
                
                NumberColumn newColumn
                if column:GetUndefinedSize() > 0
                    newColumn = RemoveUndefinedValues(cast(NumberColumn, column:Copy(true, false)))
                else
                    newColumn = cast(NumberColumn, column:Copy())
                end
                Vector dataset = newColumn:ConvertToVector()
                dataset:Sort()                
                
                if dataset:GetSize() > 0
                    if i = 0
                        yMin = dataset:Get(0)
                        yMax = dataset:Get(dataset:GetSize()-1)
                    else
                        if yMin > dataset:Get(0)
                            yMin = dataset:Get(0)
                        end
                        if yMax < dataset:Get(dataset:GetSize()-1)
                            yMax = dataset:Get(dataset:GetSize()-1)
                        end
                    end
                end
    
                Plot plot
                plot:SetData(dataset)
                plot:SetInfo(Calculations(newColumn, dataset))
                plot:SetName(column:GetHeader())
    
                if not seriesFactor:HasKey(column:GetHeader())
                    Series series
                    groupNames:Add(column:GetHeader())
                    series:SetName(column:GetHeader())
                    series:AddItem(plot:GetIcon())
                    series:AddItem(plot)
                    plot:SetSeries(series)
                    seriesFactor:Add(column:GetHeader(), series)
    
                    PlotGroup group
                    group:SetName(column:GetHeader())
                    group:AddPlot(plot)
                    groupFactor:Add(column:GetHeader(), group)
                end
                i = i + 1 
            end
        end

        //Use the default windowing action (Kernel) if undefined
        if window not= undefined
            chart:SetWindowingAction(window)
        end

        // Add the groups and series
        Array <Series> seriesList
        i = 0
        repeat while i < groupNames:GetSize()
            seriesList:Add(seriesFactor:GetValue(groupNames:Get(i)))
            chart:AddPlotGroup(groupFactor:GetValue(groupNames:Get(i)))
            i = i + 1
        end

        SetScale(chart, yMin, yMax, 0, groupNames:GetSize())
        chart:OverrideXLabelsWithText(groupNames)
        chart:SetSeriesList(seriesList)
        chart:GetHorizontalPanel():NumericalOverrideLabels(numericalGroupName)
        return chart
    end

    action CreateChartWithFactor(DataFrame frame) returns Chart
        ViolinPlot chart
        integer columns = GetColumnSize()

        chart:SetYAxisTitle("Total")
        if(columns = 1)
            chart:SetTitle(frame:GetColumn(GetColumn(0)):GetHeader() + " Violin Plot")
        end

        HashTable<text, Series> seriesFactor
        HashTable<text, PlotGroup> groupFactor
        HashTable<text, NumberColumn> dataFactor 
        boolean dateFactor = false
        boolean numericalFactor = false

        DataFrameColumn factor = frame:GetColumn(GetFactor(0))
        chart:SetXAxisTitle(factor:GetHeader())

        Array <text> groupNames 
        if factor:IsDateTimeColumn()
            dateFactor = true
            DateTimeColumn dates = cast(DateTimeColumn, factor:Copy(true, true))
            integer i = 0 
            repeat while i < dates:GetSize()
                if not dates:IsUndefined(i)
                    if not groupFactor:HasKey(dates:GetAsText(i))
                        PlotGroup group
                        group:SetName(dates:GetAsText(i))
                        groupNames:Add(dates:GetAsText(i))
                        groupFactor:Add(dates:GetAsText(i), group)
                    end
                end
                i = i + 1
            end
        else
            if factor:IsNumberColumn()
                numericalFactor = true
            end
            DataFrameColumn labels = factor:Copy(true, true)
            integer i = 0 
            repeat while i < labels:GetSize()
                if not labels:IsUndefined(i)
                    if not groupFactor:HasKey(labels:GetAsText(i))
                        PlotGroup group
                        group:SetName(labels:GetAsText(i))
                        groupNames:Add(labels:GetAsText(i))
                        groupFactor:Add(labels:GetAsText(i), group)
                    end
                end
                i = i + 1
            end
        end

        Array <text> seriesNames
        i = 0
        repeat while i < columns
            DataFrameColumn column = frame:GetColumn(GetColumn(i))
            if column:CanConvertToVector() = false
                alert("Could not covert values in " + GetColumn(i)+ " to vector")
            end
            if not seriesFactor:HasKey(column:GetHeader())
                Series series
                seriesNames:Add(column:GetHeader())
                series:SetName(column:GetHeader())
                seriesFactor:Add(column:GetHeader(), series)
            end
            integer j = 0
            repeat while j < column:GetSize()
                if not factor:IsUndefined(j) and not column:IsUndefined(j)
                    number value = column:GetAsNumber(j)
                    
                    text dataKey = factor:GetAsText(j) + " " + column:GetHeader()
                    if not dataFactor:HasKey(dataKey)
                        NumberColumn newColumn
                        newColumn:Add(value)
                        dataFactor:Add(dataKey, newColumn)
                    else
                        dataFactor:GetValue(dataKey):Add(value)
                    end
                end
                j = j + 1
            end
            i = i + 1
        end

        // Fill the plot groups
        number yMax = 0
        number yMin = 0
        i = 0
        repeat while i < groupNames:GetSize()
            integer j = 0
            repeat while j < seriesNames:GetSize()
                text dataKey = groupNames:Get(i) + " " + seriesNames:Get(j)
                NumberColumn column = dataFactor:GetValue(dataKey)
                
                Vector dataset = column:ConvertToVector()
                dataset:Sort()            
                
                if dataset:GetSize() > 0
                    if i = 0
                        yMin = dataset:Get(0)
                        yMax = dataset:Get(dataset:GetSize()-1)
                    else
                        if yMin > dataset:Get(0)
                            yMin = dataset:Get(0)
                        end
                        if yMax < dataset:Get(dataset:GetSize()-1)
                            yMax = dataset:Get(dataset:GetSize()-1)
                        end
                    end
                end
    
                Plot plot
                plot:SetData(dataset)
                plot:SetInfo(Calculations(column, dataset))
                plot:SetName(column:GetHeader())
                if(seriesFactor:HasKey(seriesNames:Get(j)))
                    seriesFactor:GetValue(seriesNames:Get(j)):AddItem(plot:GetIcon())
                    seriesFactor:GetValue(seriesNames:Get(j)):AddItem(plot)
                    plot:SetSeries(seriesFactor:GetValue(seriesNames:Get(j)))
                end
                if groupFactor:HasKey(groupNames:Get(i))
                    groupFactor:GetValue(groupNames:Get(i)):AddPlot(plot)
                end

                j = j + 1
            end
            i = i + 1  
        end

        //Use the default windowing action (Kernel) if undefined
        if window not= undefined
            chart:SetWindowingAction(window)
        end

        // Add the groups
        i = 0
        repeat while i < groupNames:GetSize()
            PlotGroup group = groupFactor:GetValue(groupNames:Get(i))
            chart:AddPlotGroup(group)
            i = i + 1
        end

        // Add the series
        Array <Series> seriesList
        i = 0
        repeat while i < seriesNames:GetSize()
            seriesList:Add(seriesFactor:GetValue(seriesNames:Get(i)))
            i = i + 1
        end

        SetScale(chart, yMin, yMax, 0, groupNames:GetSize())
        chart:OverrideXLabelsWithText(groupNames)
        chart:SetSeriesList(seriesList)
        chart:GetHorizontalPanel():NumericalOverrideLabels(numericalFactor)
        return chart
    end

    private action SetScale(ViolinPlot chart, number ymin, number ymax, number xmin, number xmax)
        chart:GetVerticalPanel():SetMinimum(ymin)
        chart:GetVerticalPanel():SetMaximum(ymax)
        chart:GetHorizontalPanel():SetMinimum(xmin)
        chart:GetHorizontalPanel():SetMaximum(xmax)
    end

    private action RemoveUndefinedValues(NumberColumn column) returns NumberColumn
        NumberColumn newColumn
        integer i = 0
        repeat while i < column:GetSize()
            if not column:IsUndefined(i)
                newColumn:Add(column:GetAsNumber(i))
            end
            i = i + 1
        end
        return newColumn
    end

    /*
    This action returns the five number summary of a dataset as an array, in the order median, lower quartile, upper quartile, smallest, largest. 
    It also excludes outliers in the set as smallest and largest.
    */
    action Calculations(NumberColumn column, Vector dataset) returns Array<number>
        Array<number> myData
        Array <number> outliers
    
        number median = 0
        number lowerQuartile = 0
        number upperQuartile = 0

        integer lastIndex = dataset:GetSize()-1
        number largest = dataset:Get(lastIndex)
        number smallest = dataset:Get(0)

        if dataset:GetSize() > 3
            Calculate(column)
            median = GetMedian()
            lowerQuartile = GetBottomMedian()
            upperQuartile = GetTopMedian()
        else // If the vector has 3 or less values then the IQR Class calculation won't work.
            median = GetMedian(dataset,0,lastIndex)
            integer medianIndex = 0
            integer lowerMedianIndex = 0
            integer upperMedianIndex = 0
            //Calculating what needs to be sent to GetMedian is slightly different depending on even or odd data sets.
            if dataset:GetSize() mod 2 = 0
                lowerMedianIndex = (lastIndex)/2
                upperMedianIndex = dataset:GetSize()/2
                lowerQuartile = GetMedian(dataset,0,lowerMedianIndex)
                upperQuartile = GetMedian(dataset,upperMedianIndex,lastIndex)
            else
                medianIndex = (lastIndex)/2
                lowerQuartile = GetMedian(dataset,0,medianIndex)
                upperQuartile = GetMedian(dataset,medianIndex,lastIndex)
            end
        end

        //We want to exclude outliers from the data as our high and low values.
        iqr = upperQuartile-lowerQuartile
        lowerRange = lowerQuartile - iqr*1.5
        upperRange = upperQuartile + iqr*1.5

        // Add the lower outliers to be plotted as points
        integer index = 0
        repeat while index < dataset:GetSize()
            if dataset:Get(index) < lowerRange
                if index > 0
                    if not (dataset:Get(index) = dataset:Get(index-1)) //Skip duplicates since we only need one point to show an outlier
                        outliers:Add(dataset:Get(index))
                    end
                else
                    outliers:Add(dataset:Get(index))
                end
            else
                smallest = dataset:Get(index)
                index = index + dataset:GetSize() + 1 //Skip the rest
            end
            index = index + 1
        end

        // Add the upper outliers to be plotted as points
        index = lastIndex
        repeat while index > 0
            if dataset:Get(index) > upperRange
                if index < lastIndex
                    if not (dataset:Get(index) = dataset:Get(index+1)) //Skip duplicates since we only need one point to show an outlier
                        outliers:Add(dataset:Get(index))
                    end
                else
                    outliers:Add(dataset:Get(index))
                end
            else
                largest = dataset:Get(index)
                index = index - dataset:GetSize() - 1 //Skip the rest
            end
            index = index - 1
        end
        
        myData:Add(median)
        myData:Add(lowerQuartile)
        myData:Add(upperQuartile)
        myData:Add(smallest)
        myData:Add(largest)
        outliers:Sort()
        integer i = 0
        repeat while i < outliers:GetSize()
            myData:Add(outliers:Get(i))
            i = i + 1
        end
        Empty()
        return myData
    end

    action GetWindowingAction returns UnivariateAction
        return window
    end

    action SetWindowingAction(UnivariateAction window)
        me:window = window
    end
end