package Libraries.Compute.Statistics.Charts

use Libraries.Compute.Statistics.DataFrameChartCreator
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Interface.Controls.Charts.LineChart
use Libraries.Compute.Statistics.Calculations.Summarize
use Libraries.Interface.Controls.Charts.ChartOptions
use Libraries.Compute.Math
use Libraries.Interface.Controls.Charts.ChartPoint
use Libraries.Interface.Controls.Charts.TwoVariableChart
use Libraries.Interface.Controls.Charts.ChartLine
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Inputs.FactorInput
use Libraries.Game.Graphics.Color
use Libraries.Containers.Array
use Libraries.Interface.Controls.Charts.Series
use Libraries.Interface.Controls.Charts.Legend
use Libraries.Containers.HashTable
use Libraries.Containers.Support.Comparison
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Interface.Controls.Charts.RegressionLine
use Libraries.Compute.Statistics.Tests.Regression

/*
    This class is used to create a Line Chart from a dataframe. The class contains two possible inputs, 
    factors and columns. Each column represents a line on the chart, while the single allowed factor
    represents where each data point will be mapped. 

    Attribute: Author Cody Molisee and Andreas Stefik
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Charts.LineChartCreator

    //Create a LineChart and set some properties
    DataFrame frame
    frame:Load("Data/Data.csv")

    LineChartCreator creator
    creator:AddColumn(1)
    creator:AddFactor(0)
    Chart chart = frame:CreateChart(creator)

    chart:SetTitle("Chocolate Interest over time")
    chart:SetXAxisTitle("Time Periods")
    chart:SetYAxisTitle("Popularity Percentage")
    chart:Display(1500, 750)
*/
class LineChartCreator is DataFrameChartCreator, ColumnInput, FactorInput
    integer xTicks = 5
    integer yTicks = 5
    //integer tickSkips = 1

    // The minimum and maximum values portrayed in the chart area.
    number xAxisMinimum = 0
    number xAxisMaximum = 1
    number yAxisMinimum = 0
    number yAxisMaximum = 1
    Color defaultColor

    Comparison comparison = undefined
    ChartOptions options

    on create
        defaultColor = defaultColor:Black()
    end
    
    action Create(DataFrame frame) returns Chart
        //If there are no factors to map to, just use id (row) as factor
        if GetColumnSize() > 0 and GetFactorSize() = 0
            return CreateChart(frame, false) // Boolean to track if factor is used or not
        elseif GetColumnSize() > 0 and GetFactorSize() = 1
            return CreateChart(frame, true)
        else
            alert("LineChartCreator does not support the number of column/factors that were selected.")
        end

        return undefined
    end

    action CreateChart(DataFrame frame, boolean useFactor) returns Chart
        LineChart chart
        integer columns = GetColumnSize()
        boolean numericalFactor = false

        HashTable<text, Array<ChartPoint>> groupFactor
        HashTable<text, Series> seriesFactor
        HashTable<text, ChartLine> lineFactor
        HashTable<text, ChartPoint> pointFactor
        HashTable<number, text> textForNumber
        
        
        number max = 0.0
        number min = 0.0

        DataFrameColumn factor = frame:GetColumn(GetColumn(0)) // Initialized. This will be overwritten if factor is used
        if useFactor
            factor = frame:GetColumn(GetFactor(0))
            chart:SetXAxisTitle(factor:GetHeader())
            if factor:IsNumberColumn()
                numericalFactor = true
                min = factor:GetAsNumber(0) // default min
            end
        else
            numericalFactor = true
        end

        integer i = 0
        repeat while i < factor:GetSize()
            if not factor:IsUndefined(i)
                text key = factor:GetAsText(i)
                number value = 0.0
                if not useFactor
                    key = ""+i
                    value = cast(number, i)
                end
                if not groupFactor:HasKey(key)
                    Array <ChartPoint> arr
                    groupFactor:Add(key, arr)
                    if numericalFactor
                        if useFactor
                            textForNumber:Add(factor:GetAsNumber(i), key)
                            if factor:GetAsNumber(i) > max
                                max = factor:GetAsNumber(i)
                            end
                            if factor:GetAsNumber(i) < min
                                min = factor:GetAsNumber(i)
                            end
                        else
                            textForNumber:Add(value, key)
                            max = value
                        end
                    end
                end
            end
            i = i + 1
        end
        xAxisMaximum = max
        xAxisMinimum = min
        
        max = 0.0
        min = 0.0

        i = 0
        repeat while i < columns
            DataFrameColumn column = frame:GetColumn(GetColumn(i))
            if not column:IsNumberColumn()
                alert("LineChartCreator does not support text columns.")
                return undefined
            end
            if not seriesFactor:HasKey(column:GetHeader())
                ChartLine newline
                newline:SetName(column:GetHeader()) 
                lineFactor:Add(column:GetHeader(), newline)
                Series series
                series:SetName(column:GetHeader())
                series:AddItem(newline)
                newline:SetSeries(series)
                seriesFactor:Add(column:GetHeader(), series)
            end
    
            number valueForName = 0.0
            integer j = 0
            repeat while j < column:GetSize()
                if not column:IsUndefined(j) and not factor:IsUndefined(j)
                    valueForName = column:GetAsNumber(j)
                    text xposition = factor:GetAsText(j)
                    if not useFactor
                        xposition = ""+j
                    end
                    text pointKey = xposition + " " + column:GetHeader()
                    if not pointFactor:HasKey(pointKey)
                        ChartPoint point
                        point:SetValueY(valueForName)
                        point:SetName(pointKey)
                        pointFactor:Add(pointKey, point)
                        if groupFactor:HasKey(xposition)
                            groupFactor:GetValue(xposition):Add(point)
                        end
                        if lineFactor:HasKey(column:GetHeader())
                            lineFactor:GetValue(column:GetHeader()):Add(point)
                        end
                    else
                        ChartPoint point = pointFactor:GetValue(pointKey)
                        valueForName = valueForName + point:GetValueY()
                        point:SetValueY(valueForName)
                    end
                    if(valueForName > max)
                        max = valueForName
                    end
                    if(valueForName < min)
                        min = valueForName
                    end
                end
                j = j + 1
            end
            i = i + 1
        end
        yAxisMaximum = max
        yAxisMinimum = min
        
        Array<text> groupKeyArray = groupFactor:CopyToKeyArray()
        HashTable<text, number> numberForText
        if numericalFactor
            Array<number> numberKeyArray = textForNumber:CopyToKeyArray()
            Array<text> xLabels
            if comparison = undefined
                numberKeyArray:Sort()
            else
                numberKeyArray:Sort(comparison)
            end
            i = 0
            repeat while i < numberKeyArray:GetSize()
                if not useFactor
                    xLabels:Add(textForNumber:GetValue(numberKeyArray:Get(i)))
                    numberForText:Add(textForNumber:GetValue(numberKeyArray:Get(i)), numberKeyArray:Get(i))
                    chart:SetXAxisNumberFormat("integer")
                else
                    xLabels:Add(textForNumber:GetValue(numberKeyArray:Get(i)))
                    numberForText:Add(textForNumber:GetValue(numberKeyArray:Get(i)), numberKeyArray:Get(i))
                end
                i = i + 1
            end
            groupKeyArray = xLabels
        else
            if comparison = undefined
                groupKeyArray:Sort()
            else
                groupKeyArray:Sort(comparison)
            end
            i = 0
            repeat while i < groupKeyArray:GetSize()
                numberForText:Add(groupKeyArray:Get(i), cast(number, i))
                i = i + 1
            end
            xAxisMaximum = groupKeyArray:GetSize()-1
        end

        if not numericalFactor 
            chart:OverrideXLabelsWithText(groupKeyArray)
        end

        i = 0
        repeat while i < groupKeyArray:GetSize()
            if groupFactor:HasKey(groupKeyArray:Get(i))
                Array <ChartPoint> points = groupFactor:GetValue(groupKeyArray:Get(i))
                integer j = 0
                repeat while j < points:GetSize()
                    ChartPoint point = points:Get(j)
                    point:SetValueX(numberForText:GetValue(groupKeyArray:Get(i)))
                    j = j + 1
                end
            end
            i = i + 1
        end  

        // Series
        Array <Series> seriesList
        Array<text> seriesKeyArray = seriesFactor:CopyToKeyArray()
        if comparison = undefined
            seriesKeyArray:Sort()
        else
            seriesKeyArray:Sort(comparison)
        end
        i = 0
        repeat while i < seriesKeyArray:GetSize()
            seriesList:Add(seriesFactor:GetValue(seriesKeyArray:Get(i)))
            lineFactor:GetValue(seriesKeyArray:Get(i)):SortPoints()
            chart:AddChartLine(lineFactor:GetValue(seriesKeyArray:Get(i)))
            if numericalFactor
                Array<DataFrameColumn> regColumns 
                NumberColumn column1 //independent
                NumberColumn column2 //dependent
                ChartLine line = lineFactor:GetValue(seriesKeyArray:Get(i))
                integer j = 0
                repeat while j < line:GetPoints():GetSize()
                    column1:Add(cast(text, line:GetPoints():Get(j):GetValueX()))
                    column2:Add(cast(text, line:GetPoints():Get(j):GetValueY()))
                    j = j + 1
                end
                if line:GetPoints():GetSize() < 3
                    output "Linear regression was not computable for " + seriesKeyArray:Get(i)
                else
                    regColumns:Add(column1)
                    regColumns:Add(column2)
                    RegressionLine regLine
                    regLine:SetIndependentVariable(chart:GetXAxisTitle())
                    regLine:SetDependentVariable(seriesKeyArray:Get(i))
                    regLine:NamedAfterSeries(true)
                    DataFrame regressionFrame
                    regressionFrame:SetColumns(regColumns)
                    Regression regression 
                    regression:AddFactor(0) //the independent variable
                    regression:AddColumn(1) //the dependent variable
                    regressionFrame:Calculate(regression)
                    regLine:SetRegression(regression)
                    regLine:SetSeries(seriesFactor:GetValue(seriesKeyArray:Get(i)))
                    seriesFactor:GetValue(seriesKeyArray:Get(i)):SetRegressionLine(regLine)
                end
            end
            i = i + 1
        end

        chart:SetSeriesList(seriesList)
        SetScale(chart, yAxisMinimum, yAxisMaximum, xAxisMinimum, xAxisMaximum)
        return chart
    end

    private action SetScale(LineChart chart, number ymin, number ymax, number xmin, number xmax)
        chart:GetVerticalPanel():SetMinimum(ymin)
        chart:GetVerticalPanel():SetMaximum(ymax)
        chart:GetHorizontalPanel():SetMinimum(xmin)
        chart:GetHorizontalPanel():SetMaximum(xmax)
    end
end