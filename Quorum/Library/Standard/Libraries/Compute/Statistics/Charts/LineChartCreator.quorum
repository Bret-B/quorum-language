package Libraries.Compute.Statistics.Charts

use Libraries.Compute.Statistics.DataFrameChartCreator
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Statistics.Columns.DateTimeColumn
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Inputs.FactorInput
use Libraries.Compute.Statistics.Tests.Regression
use Libraries.Compute.Statistics.Calculations.Summarize
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Charts.LineChart
use Libraries.Interface.Controls.Charts.ChartPoint
use Libraries.Interface.Controls.Charts.ChartLine
use Libraries.Interface.Controls.Charts.Series
use Libraries.Interface.Controls.Charts.Graphics.RegressionLine
use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Containers.Support.Comparison
use Libraries.System.DateTime
use Libraries.Compute.Statistics.DataFrameSelection

/*
    This class is used to create a Line Chart from a dataframe. The class contains two possible inputs, 
    factors and columns. Each column represents a line on the chart, while the single allowed factor
    represents where each data point will be mapped. 

    Attribute: Author Cody Molisee and Andreas Stefik
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Charts.LineChartCreator

    //Create a LineChart and set some properties
    DataFrame frame
    frame:Load("Data/Data.csv")

    LineChartCreator creator
    creator:AddColumn(1)
    creator:AddFactor(0)
    Chart chart = frame:CreateChart(creator)

    chart:SetTitle("Chocolate Interest over time")
    chart:SetXAxisTitle("Time Periods")
    chart:SetYAxisTitle("Popularity Percentage")
    chart:Display(1500, 750)
*/
class LineChartCreator is DataFrameChartCreator, ColumnInput, FactorInput
    // The minimum and maximum values portrayed in the chart area.
    number xAxisMinimum = 0
    number xAxisMaximum = 1
    number yAxisMinimum = 0
    number yAxisMaximum = 1

    Comparison comparison = undefined
    
    action Create(DataFrame frame) returns Chart
        //If there are no factors to map to, just use id (row) as factor
        if GetColumnSize() > 0 and GetFactorSize() = 0
            return CreateChart(frame, false) // Boolean to track if factor is used or not
        elseif GetColumnSize() > 0 and GetFactorSize() = 1
            return CreateChart(frame, true)
        else
            alert("LineChartCreator does not support the number of column/factors that were selected.")
        end

        return undefined
    end

    action CreateChart(DataFrame frame, boolean useFactor) returns Chart
        LineChart chart
        integer columns = GetColumnSize()
        boolean defaultFactor = false   // Uses each row as a factor
        boolean textFactor = false      // Uses a unique text entry as a factor
        boolean numericalFactor = false // Uses a unique number/integer entry as a factor
        boolean dateFactor = false      // Uses unique date/time as a factor  

        HashTable<text, Array<ChartPoint>> groupFactor
        HashTable<text, Series> seriesFactor
        HashTable<text, ChartLine> lineFactor
        HashTable<text, ChartPoint> pointFactor
        HashTable<text, DateTime> dateForText
     
        number xMin = 0.0   
        number xMax = 0.0
        DateTime xdateMin = undefined
        DateTime xdateMax = undefined

        Array<text> groupNames
        DataFrameColumn factor = frame:GetColumn(GetColumn(0)) // Initialized. This will be overwritten if factor is used
        if useFactor
            factor = frame:GetColumn(GetFactor(0))
            chart:SetXAxisTitle(factor:GetHeader())

            // DATE-TIME
            if factor:IsDateTimeColumn()
                dateFactor = true
                integer i = 0
                repeat while i < factor:GetSize()
                    if not factor:IsUndefined(i)
                        if not dateForText:HasKey(factor:GetAsText(i))
                            dateForText:Add(factor:GetAsText(i), factor:GetAsDateTime(i))
                        end
                        if not groupFactor:HasKey(factor:GetAsText(i))
                            Array <ChartPoint> arr
                            groupFactor:Add(factor:GetAsText(i), arr)
                        end
                    end
                    i = i + 1
                end   
                DateTimeColumn dates = cast(DateTimeColumn, frame:GetColumn(factor:GetHeader()):Copy(true, true))
                if dates:GetSize() > 0
                    xMin = 0 
                    xMax = dates:Get(dates:GetSize()-1):GetDayDifference(dates:Get(0))
                    xdateMin = dates:Get(0)
                    xdateMax = dates:Get(dates:GetSize()-1)
                    chart:GetHorizontalPanel():SetMinimumDate(xdateMin)
                    chart:GetHorizontalPanel():SetMaximumDate(xdateMax)  
                end          

            // NUMBER-INTEGER
            elseif factor:IsNumberColumn()
                numericalFactor = true
                integer i = 0
                repeat while i < factor:GetSize()
                    if not factor:IsUndefined(i)
                        if not groupFactor:HasKey(factor:GetAsText(i))
                            Array <ChartPoint> arr
                            groupFactor:Add(factor:GetAsText(i), arr)
                        end
                    end
                    i = i + 1
                end  
                Summarize calc
                factor:Calculate(calc)
                xMin = calc:GetMinimum()
                xMax = calc:GetMaximum() 

            // TEXT
            else //if factor:IsTextColumn()
                textFactor = true
                DataFrameColumn labels = factor:Copy(true, true)
                integer i = 0 
                repeat while i < labels:GetSize()
                    if not labels:IsUndefined(i)
                        groupNames:Add(labels:GetAsText(i))
                        Array <ChartPoint> arr
                        groupFactor:Add(labels:GetAsText(i), arr)
                    end
                    i = i + 1
                end
                xMin = 0
                xMax = groupFactor:GetSize()
            end
        else
            numericalFactor = true
            defaultFactor = true
            integer i = 0
            repeat while i < factor:GetSize()
                Array <ChartPoint> arr
                groupFactor:Add(""+i, arr)
                i = i + 1
            end 
            xMin = 0
            xMax = i-1
        end
    
        xAxisMinimum = xMin
        xAxisMaximum = xMax
        
        Array<text> seriesNames
        i = 0
        repeat while i < columns
            DataFrameColumn column = frame:GetColumn(GetColumn(i))
            if not column:IsNumberColumn() 
                alert("LineChartCreator does not support non-numerical columns.")
                return undefined
            end

            if not seriesFactor:HasKey(column:GetHeader())
                ChartLine newline
                newline:SetName(column:GetHeader()) 
                lineFactor:Add(column:GetHeader(), newline)
                
                Series series
                seriesNames:Add(column:GetHeader())
                series:SetName(column:GetHeader())
                series:AddItem(newline)
                newline:SetSeries(series)
                seriesFactor:Add(column:GetHeader(), series)
            end
    
            number valueForName = 0.0
            integer j = 0
            repeat while j < column:GetSize()
                if not column:IsUndefined(j) and not factor:IsUndefined(j)
                    valueForName = column:GetAsNumber(j)
                    
                    text factorPosition = factor:GetAsText(j)
                    if defaultFactor
                        factorPosition = ""+j
                    end
                    text pointKey = factorPosition + " " + column:GetHeader()

                    if not pointFactor:HasKey(pointKey)
                        ChartPoint point
                        point:SetValueY(valueForName)
                        point:SetName(pointKey)
                        pointFactor:Add(pointKey, point)
                        if groupFactor:HasKey(factorPosition)
                            groupFactor:GetValue(factorPosition):Add(point)
                        end
                        if lineFactor:HasKey(column:GetHeader())
                            lineFactor:GetValue(column:GetHeader()):Add(point)
                        end
                    else
                        ChartPoint point = pointFactor:GetValue(pointKey)
                        valueForName = valueForName + point:GetValueY()
                        point:SetValueY(valueForName)
                    end
                end
                j = j + 1
            end
            i = i + 1
        end
        
        if dateFactor
            Array<text> groupKeyArray = groupFactor:CopyToKeyArray()
            i = 0
            repeat while i < groupKeyArray:GetSize()
                if groupFactor:HasKey(groupKeyArray:Get(i))
                    Array <ChartPoint> points = groupFactor:GetValue(groupKeyArray:Get(i))
                    integer j = 0
                    repeat while j < points:GetSize()
                        ChartPoint point = points:Get(j)
                        if dateForText:HasKey(groupKeyArray:Get(i)) and xdateMin not= undefined
                            number x = dateForText:GetValue(groupKeyArray:Get(i)):GetDayDifference(xdateMin)
                            point:SetValueX(x)
                        end
                        j = j + 1
                    end
                end
                i = i + 1
            end  

        elseif numericalFactor
            Array<text> groupKeyArray = groupFactor:CopyToKeyArray()
            i = 0
            repeat while i < groupKeyArray:GetSize()
                if groupFactor:HasKey(groupKeyArray:Get(i))
                    Array <ChartPoint> points = groupFactor:GetValue(groupKeyArray:Get(i))
                    integer j = 0
                    repeat while j < points:GetSize()
                        ChartPoint point = points:Get(j)
                        number x = cast(number, groupKeyArray:Get(i))
                        point:SetValueX(x)
                        j = j + 1
                    end
                end
                i = i + 1
            end  

        elseif textFactor
            i = 0
            repeat while i < groupNames:GetSize()
                if groupFactor:HasKey(groupNames:Get(i))
                    Array <ChartPoint> points = groupFactor:GetValue(groupNames:Get(i))
                    integer j = 0
                    repeat while j < points:GetSize()
                        ChartPoint point = points:Get(j)
                        number x = i
                        point:SetValueX(x)
                        j = j + 1
                    end
                end
                i = i + 1
            end  
            chart:OverrideXLabelsWithText(groupNames)

        else // defaultFactor
            Array<text> groupKeyArray = groupFactor:CopyToKeyArray()
            i = 0
            repeat while i < groupKeyArray:GetSize()
                if groupFactor:HasKey(groupKeyArray:Get(i))
                    Array <ChartPoint> points = groupFactor:GetValue(groupKeyArray:Get(i))
                    integer j = 0
                    repeat while j < points:GetSize()
                        ChartPoint point = points:Get(j)
                        number x = i
                        point:SetValueX(x)
                        j = j + 1
                    end
                end
                i = i + 1
            end    
        end

        number yMin = 0.0   
        number yMax = 0.0

        // Series
        Array <Series> seriesList
        i = 0
        repeat while i < seriesNames:GetSize()
            seriesList:Add(seriesFactor:GetValue(seriesNames:Get(i)))
            lineFactor:GetValue(seriesNames:Get(i)):SortPoints()
            lineMaxY = lineFactor:GetValue(seriesNames:Get(i)):GetLineMax():GetValueY()
            lineMinY = lineFactor:GetValue(seriesNames:Get(i)):GetLineMin():GetValueY()
            if i = 0
                yMax = lineMaxY
                yMin = lineMinY
            end
            if(lineMaxY > yMax)
                yMax = lineMaxY
            end
            if(lineMinY < yMin)
                yMin = lineMinY
            end

            chart:AddChartLine(lineFactor:GetValue(seriesNames:Get(i)))
            if not textFactor
                Array<DataFrameColumn> regColumns 
                NumberColumn column1 //independent
                NumberColumn column2 //dependent
                ChartLine line = lineFactor:GetValue(seriesNames:Get(i))
                integer j = 0
                repeat while j < line:GetPoints():GetSize()
                    column1:Add(cast(text, line:GetPoints():Get(j):GetValueX()))
                    column2:Add(cast(text, line:GetPoints():Get(j):GetValueY()))
                    j = j + 1
                end
                if line:GetPoints():GetSize() < 3
                    output "Linear regression was not computable for " + seriesNames:Get(i)
                else
                    regColumns:Add(column1)
                    regColumns:Add(column2)
                    RegressionLine regLine
                    regLine:SetIndependentVariable(chart:GetXAxisTitle())
                    regLine:SetDependentVariable(seriesNames:Get(i))
                    regLine:NamedAfterSeries(true)
                    DataFrame regressionFrame
                    regressionFrame:SetColumns(regColumns)
                    Regression regression

                    DataFrameSelection oldSelection = frame:GetSelection()

                    //temporarily flip the selection
                    DataFrameSelection newSelection
                    newSelection:AddFactor(0)
                    newSelection:AddColumn(1)
                    regressionFrame:SetSelection(newSelection)

                    regressionFrame:Calculate(regression)
                    regressionFrame:SetSelection(oldSelection)
                    regLine:SetRegression(regression)
                    regLine:SetSeries(seriesFactor:GetValue(seriesNames:Get(i)))
                    seriesFactor:GetValue(seriesNames:Get(i)):SetRegressionLine(regLine)
                end
            end
            i = i + 1
        end
        yAxisMinimum = yMin
        yAxisMaximum = yMax

        chart:SetSeriesList(seriesList)
        SetScale(chart, yAxisMinimum, yAxisMaximum, xAxisMinimum, xAxisMaximum)
        return chart
    end

    private action SetScale(LineChart chart, number ymin, number ymax, number xmin, number xmax)
        chart:GetVerticalPanel():SetMinimum(ymin)
        chart:GetVerticalPanel():SetMaximum(ymax)
        chart:GetHorizontalPanel():SetMinimum(xmin)
        chart:GetHorizontalPanel():SetMaximum(xmax)
    end
end