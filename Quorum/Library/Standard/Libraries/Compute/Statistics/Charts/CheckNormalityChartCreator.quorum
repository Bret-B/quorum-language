package Libraries.Compute.Statistics.Charts

use Libraries.Compute.Statistics.DataFrameChartCreator
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Inputs.FactorInput
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Distributions.NormalDistribution
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Compute.Statistics.Calculations.CalculateRanks
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Interface.Controls.Charts.ScatterPlot
use Libraries.Compute.Statistics.DataFrameSelection
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Columns.TextColumn

/*
    This action creates what is often called a QQ plot, or quartile quartile plot, 
    in the academic literature. The broad idea is that it maps the values in a column 
    to the theoretical ranking values in a normal distribution. If the chart is largely 
    linear up and to the right, then the data appears to be reasonably, although informally, 
    normally distributed. This action is a helper that can only conduct this calculation on 
    one column for a normal distribution, although the broad idea could be extended further 
    if needed.

    Attribute: Returns a ScatterPlot that can be displayed or placed into a user interface or game.

    Attribute: Example
    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Interface.Controls.Charts.ScatterPlot

    DataFrame frame
    frame:Load("Data.csv")
    frame:AddSelectedColumn(1)
    ScatterPlot chart = frame:NormalityCheckChart()
    chart:SetTitle("My Normality Check Chart")
    chart:Display()
*/
class CheckNormalityChartCreator is DataFrameChartCreator, ColumnInput, FactorInput

    action Create(DataFrame frame) returns Chart
        integer columns = GetColumnSize()
        integer factors = GetFactorSize()

        if columns = 1 and factors = 0
            return CreateChart(frame, false)
        elseif columns = 1 and factors = 1
            return CreateChart(frame, true)
        else
            alert("CheckNormalityCreator does not support multiple columns.")
        end

        return undefined
    end

    action CreateChart(DataFrame frame, boolean useFactor) returns Chart
        integer index = GetColumn(0)
        DataFrameColumn theCol = frame:GetColumn(index)
        text columnName = theCol:GetHeader()

        HashTable<text, DataFrameColumn> factorGrouping
        DataFrame newFrame
        if useFactor
            DataFrameColumn theFactor = frame:GetColumn(GetFactor(0))
            i = 0
            repeat while i < theCol:GetSize()
                if not theCol:IsUndefined(i)
                    if not factorGrouping:HasKey(theFactor:GetAsText(i))
                        NumberColumn col
                        col:Add(theCol:GetAsText(i))
                        factorGrouping:Add(theFactor:GetAsText(i), col)
                    else
                        factorGrouping:GetValue(theFactor:GetAsText(i)):Add(theCol:GetAsText(i))
                    end
                end
                i = i + 1
            end

            TextColumn factor
            factor:SetHeader("Groups")
            factor:SetSize(theCol:GetSize())
            newFrame:AddColumn(factor)

            NumberColumn theoretical
            theoretical:SetHeader("Theoretical")
            theoretical:SetSize(theCol:GetSize())
            newFrame:AddColumn(theoretical)

            NumberColumn actual
            actual:SetHeader(columnName)
            actual:SetSize(theCol:GetSize())
            newFrame:AddColumn(actual)

            // Do the ranks and theoretical calculations for each grouping
            NormalDistribution normal
            DataFrameColumn unique = theFactor:Copy(false, true)
            integer rowindex = 0
            i = 0
            repeat while i < unique:GetSize()
                DataFrameColumn theColumn = factorGrouping:GetValue(unique:GetAsText(i))
                CalculateRanks ranks
                theColumn:Calculate(ranks)
                DataFrameColumn ranked = ranks:GetRanks()
                ranked:SetHeader(columnName + "Ranked")

                DataFrame tempFrame
                tempFrame:AddColumn(theColumn)
                tempFrame:AddColumn(ranked)
                
                tempFrame:AddColumn(columnName + "DistCalc",columnName + "Ranked" + " - 0.5")
                tempFrame:AddColumn(columnName + "Dist",columnName + "DistCalc" + " / " + ranked:GetSize())
                DataFrameColumn dist = tempFrame:GetColumn(columnName + "Dist")

                j = 0
                repeat while dist:GetSize() times
                    number rank = dist:GetAsNumber(j)
                    number inverse = normal:InverseCumulativeDistribution(rank)

                    factor:SetAsText(rowindex, unique:GetAsText(i)) 
                    theoretical:SetAsNumber(rowindex, inverse)
                    actual:SetAsNumber(rowindex, theColumn:GetAsNumber(j))
                    rowindex = rowindex + 1
                    j = j + 1
                end
                i = i + 1
            end

            newFrame:EmptySelectedColumns()
            newFrame:AddSelectedFactors("Groups")
            newFrame:AddSelectedColumns("Theoretical")
            newFrame:AddSelectedColumns(columnName)
        else
            CalculateRanks ranks
            theCol:Calculate(ranks)
            DataFrameColumn ranked = ranks:GetRanks()
            ranked:SetHeader(columnName + "Ranked")
            
            //Make a new DataFrame with the items
            newFrame:AddColumn(theCol)
            newFrame:AddColumn(ranked)
            
            
            newFrame:AddColumn(columnName + "DistCalc",columnName + "Ranked" + " - 0.5")
            newFrame:AddColumn(columnName + "Dist",columnName + "DistCalc" + " / " + ranked:GetSize())
            DataFrameColumn dist = newFrame:GetColumn(columnName + "Dist")
            
            NumberColumn theoretical
            theoretical:SetHeader("Theoretical")
            theoretical:SetSize(ranked:GetSize())
            newFrame:AddColumn(theoretical)
            
            NormalDistribution normal
            i = 0
            repeat while dist:GetSize() times
                number rank = dist:GetAsNumber(i)
                number inverse = normal:InverseCumulativeDistribution(rank)
                theoretical:SetAsNumber(i, inverse)
                i = i + 1
            end
            
            newFrame:EmptySelectedColumns()
            newFrame:AddSelectedColumns("Theoretical")
            newFrame:AddSelectedColumns(columnName)
        end
        
        ScatterPlot chart = newFrame:ScatterPlot()
        return chart
    end
end