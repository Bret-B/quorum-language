package Libraries.Compute.Statistics.Charts

use Libraries.Compute.Statistics.DataFrameChartCreator
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Compute.Statistics.DataFrame
use Libraries.Interface.Controls.Charts.BarChart
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Compute.Statistics.Charts.ColumnToTextArray
use Libraries.Compute.Statistics.Charts.ColumnToNumberArray
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Inputs.FactorInput
use Libraries.Containers.Iterator
use Libraries.Interface.Controls.Charts.BarChart
use Libraries.Compute.Statistics.Calculations.Summarize
use Libraries.Containers.Support.Comparison
use Libraries.Interface.Controls.Charts.Bar
use Libraries.Interface.Controls.Charts.BarGroup
use Libraries.Interface.Controls.Charts.Series
use Libraries.Interface.Controls.Charts.Legend

/*
    This class is used to create a Bar Chart from columns of data in a DataFrame.
    This creator is also capable of using columns and factors. If only one column is given, 
    the system counts the number of items for each point. If a factor and a column are given,
    the factor is the X-axis and the column is the Y-axis.

    Attribute: Author Andreas Stefik and Gabriel Contreras
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Charts.BarChartCreator

    DataFrame frame
    frame:Load("Data/Data.csv")

    //Create a Bar Chart and set some properties
    BarChartCreator creator
    creator:AddColumn(4)
    creator:AddFactor(0)
    creator:SetXSteps(4)

    Chart chart = frame:CreateChart(creator)
    chart:Display(2000,1000)
*/
class BarChartCreator is DataFrameChartCreator, ColumnInput, FactorInput
    number maxScale = maxScale:GetMinimumValue()
    number minScale = maxScale:GetMaximumValue()
    integer xSteps = -1
    integer ySteps = 5
    Comparison comparison = undefined
    integer countMax = 0
    integer countMin = 0
    number sumMax = 0
    number sumMin = 0

    private action CalculateItemCounts(DataFrameColumn column) returns HashTable<text, integer>
        HashTable<text, integer> result
        integer groupCount = 0
        integer size = column:GetSize()
        integer undefinedCount = 0
        i = 0
        repeat while i < size
            //just keep track of the fact that we have undefined values
            if column:IsUndefined(i)
                undefinedCount = undefinedCount + 1
            else
                text name = column:GetAsText(i)
                if not result:HasKey(name)
                    result:Add(name, 1)
                else
                    result:Add(name, result:GetValue(name) + 1)
                end
            end
            
            i = i + 1
        end
        result:Add(undefined, undefinedCount)
        return result
    end

    
    private action CalculateCountMinMax(HashTable<text, integer> hash)
        Iterator<integer> iterator = hash:GetValueIterator()
        //adjust values to percentage
        integer max = 0
        integer min = 0
        max = max:GetMinimumValue()
        min = min:GetMaximumValue()
        integer i = 1
        repeat while iterator:HasNext()
            integer value = iterator:Next()
            if value > max
                max = value
            end

            if value < min
                min = value
            end
        i = i + 1
        end
        countMax = max
        countMin = min
    end

    private action CalculateSumMinMax(HashTable<text, Number> hash)
        Iterator<Number> iterator = hash:GetValueIterator()
        //adjust values to percentage
        number max = 0
        number min = 0

        max = max:GetMinimumValue()
        min = min:GetMaximumValue()
        integer i = 1
        repeat while iterator:HasNext()
            Number value = iterator:Next()
            if value not= undefined
                if value:GetValue() > max
                    max = value:GetValue()
                end
    
                if value:GetValue() < min
                    min = value:GetValue()
                end
            end
            i = i + 1
        end
        sumMax = max
        sumMin = min
    end
    
    private action CalculateSumMinMaxTwoFactor(HashTable<text, HashTable<text, Number>> hash)
        Iterator<HashTable<text,Number>> iterator = hash:GetValueIterator()
        //adjust values to percentage
        number max = 0
        number min = 0
        max = max:GetMinimumValue()
        min = min:GetMaximumValue()
        integer i = 1
        repeat while iterator:HasNext()
            HashTable<text,Number> innerHash = iterator:Next()
            Iterator<Number> innerIterator = innerHash:GetValueIterator()
            repeat while innerIterator:HasNext()
                Number value = innerIterator:Next()
                if value not= undefined
                    if value:GetValue() > max
                        max = value:GetValue()
                    end
        
                    if value:GetValue() < min
                        min = value:GetValue()
                    end
                end
                i = i + 1
            end
        end
        sumMax = max
        sumMin = min
    end
    

    private action BuildCountChart(DataFrameColumn column) returns BarChart
        BarChart chart

        HashTable<text, integer> hash = CalculateItemCounts(column)
        DataFrameColumn labels = column:Copy(true,true)

        CalculateCountMinMax(hash)
        integer max = countMax
        integer min = countMin
        integer stepCounter = 0

        //make chart
        i = 0
        repeat while i < labels:GetSize()
            number valueForName = hash:GetValue(labels:GetAsText(i))

            BarGroup group
            group:SetName(labels:GetAsText(i))
            Bar bar
            bar:SetName(labels:GetAsText(i))
            bar:SetValue(valueForName)
            group:AddBar(bar)
            chart:AddBarGroup(group)
            i = i + 1
        end 
        Legend legend
        Series series
        series:SetName(" ")
        chart:AddSeries(series)
        chart:SetMaxBarValue(max)
        legend:SetSeriesList(chart:GetSeriesList())
        chart:SetLegend(legend)
        SetTicks(chart)
        SetScale(chart, min, max)
        chart:SetTitle(column:GetHeader())
        chart:SetXAxisTitle(column:GetHeader())
        chart:SetYAxisTitle("Count")
        chart:GetLegend():SetName(column:GetHeader())
        chart:HasBarGroups(false) //remove the bargroup level of accessible navigation since every bar group should have 1 bar
        return chart
    end

    private action BuildCountChart(DataFrame frame, boolean useFactor) returns BarChart
        BarChart chart

        Array <text> factorText
        HashTable<text, BarGroup> groupFactor
        HashTable<text, Series> seriesFactor
        chart:SetYAxisTitle("Count")
        
        number max = 0.0
        number min = 10000000.0

        DataFrameColumn factor = frame:GetColumn(GetColumn(0))  //May or may not use factor but still requires initialization
        if(useFactor)
            factor =  frame:GetColumn(GetFactor(0))
            chart:SetXAxisTitle(factor:GetHeader())
        end
        integer i = 0
        repeat while i < factor:GetSize()
            if(useFactor)
                if(not groupFactor:HasKey(factor:GetAsText(i)))
                    BarGroup group
                    group:SetName(factor:GetAsText(i))
                    groupFactor:Add(factor:GetAsText(i), group)
                end
                factorText:Add(factor:GetAsText(i))
            else
                if(not groupFactor:HasKey(""+(i+1)))
                    BarGroup group
                    group:SetName(""+(i+1))
                    groupFactor:Add(""+(i+1), group)
                end
                factorText:Add(""+(i+1))
            end
            i = i + 1
        end

        i = 0
        repeat while i < GetColumnSize()
            DataFrameColumn column = frame:GetColumn(GetColumn(i))

            if(not seriesFactor:HasKey(column:GetHeader()))
                Series series
                series:SetName(column:GetHeader())
                seriesFactor:Add(column:GetHeader(), series)
            end
    
            //make chart
            number valueForName = 0.0
            integer j = 0
            HashTable<text, Bar> barFactor
            repeat while j < column:GetSize()
                valueForName = column:GetAsNumber(j)

                text barKey = factorText:Get(j) + " " + column:GetHeader()
                if(not barFactor:HasKey(barKey))
                    Bar bar
                    bar:SetName(barKey)
                    bar:SetValue(valueForName)
                    barFactor:Add(barKey, bar)
                    if(groupFactor:HasKey(factorText:Get(j)))
                        groupFactor:GetValue(factorText:Get(j)):AddBar(bar)
                    end
                    if(seriesFactor:HasKey(column:GetHeader()))
                        seriesFactor:GetValue(column:GetHeader()):AddItem(bar:GetIcon())
                    end
                else
                    valueForName = valueForName + barFactor:GetValue(barKey):GetValue()
                    barFactor:GetValue(barKey):SetValue(valueForName)
                end
                if(valueForName > max)
                    max = valueForName
                end
                j = j + 1
            end
            i = i + 1
        end
        // Bar Groups
        Array<text> groupKeyArray = groupFactor:CopyToKeyArray()
        if comparison = undefined
            groupKeyArray:Sort()
        else
            groupKeyArray:Sort(comparison)
        end
        i = 0
        repeat while i < groupKeyArray:GetSize()
            chart:AddBarGroup(groupFactor:GetValue(groupKeyArray:Get(i)))
            i = i + 1
        end    
        
        // Series
        Array<text> seriesKeyArray = seriesFactor:CopyToKeyArray()
        if comparison = undefined
            seriesKeyArray:Sort()
        else
            seriesKeyArray:Sort(comparison)
        end
        i = 0
        repeat while i < seriesKeyArray:GetSize()
            chart:AddSeries(seriesFactor:GetValue(seriesKeyArray:Get(i)))
            i = i + 1
        end

        Legend legend
        legend:SetSeriesList(chart:GetSeriesList())
        chart:SetLegend(legend)
        chart:SetMaxBarValue(max)
        SetTicks(chart)
        SetScale(chart, min, max)
        return chart
    end

    private action SetScale(BarChart chart, number min, number max)
        if max not= maxScale:GetMinimumValue()
            chart:SetScaleMaximum(max)
        else
            chart:SetScaleMaximum(max)
        end

        if min not= maxScale:GetMaximumValue()
            chart:SetScaleMinimum(min)
        else
            chart:SetScaleMaximum(min)
        end
    end

    private action SetTicks(BarChart chart)
        if xSteps not= -1
            chart:SetXTickSteps(xSteps)
        end

        if ySteps not= -1
            chart:SetYTickSteps(ySteps)
        end
    end

    private action CreateChart(DataFrameColumn factor, DataFrameColumn column) returns BarChart
        BarChart chart
        Series series
        series:SetName(" ")

        chart:SetTitle(column:GetHeader())
        chart:SetXAxisTitle(factor:GetHeader())
        chart:SetYAxisTitle(column:GetHeader())
        Summarize summary
        column:Calculate(summary)
        number max = summary:GetMaximum()
        number min = summary:GetMinimum()
        DataFrameColumn uniqueFactor = factor:Copy(true,true)
        HashTable<text, Number> groupingFactor = CreateSortedGrouping(uniqueFactor) 
        i = 0
        repeat while i < column:GetSize()
            if not column:IsUndefined(i) and not factor:IsUndefined(i)
                number valueForName = column:GetAsNumber(i)
                if groupingFactor:GetValue(factor:GetAsText(i)) not= undefined
                    valueForName = valueForName + groupingFactor:GetValue(factor:GetAsText(i)):GetValue()
                    groupingFactor:Add(factor:GetAsText(i), valueForName)
                else
                    groupingFactor:Add(factor:GetAsText(i), valueForName)
                end
            end
            
            i = i + 1
        end

        CalculateSumMinMax(groupingFactor)

        i = 0
        repeat while i < uniqueFactor:GetSize()
            
            Number value = groupingFactor:GetValue(uniqueFactor:GetAsText(i))
            
            if value not= undefined
                BarGroup group
                group:SetName(uniqueFactor:GetAsText(i))
                Bar bar
                bar:SetName(uniqueFactor:GetAsText(i))
                bar:SetValue(value)
                group:AddBar(bar)
                series:AddItem(bar:GetIcon())
                chart:AddBarGroup(group)
            end
            i = i + 1
        end

        Legend legend
        chart:AddSeries(series)
        chart:SetMaxBarValue(sumMax)
        legend:SetSeriesList(chart:GetSeriesList())
        legend:SetName(factor:GetHeader())
        chart:SetLegend(legend)
        SetTicks(chart)
        SetScale(chart, sumMin, sumMax)
        return chart
    end

private action CreateChart(DataFrameColumn factor1, DataFrameColumn factor2, DataFrameColumn column) returns BarChart
        BarChart chart

        chart:SetTitle(column:GetHeader())
        chart:SetXAxisTitle(factor1:GetHeader())
        chart:SetYAxisTitle(column:GetHeader())
        Summarize summary
        column:Calculate(summary)
        number max = summary:GetMaximum()
        number min = summary:GetMinimum()
        
        DataFrameColumn uniqueFactor1 = factor1:Copy(true,true)
        DataFrameColumn uniqueFactor2 = factor2:Copy(true,true)       

        HashTable<text, HashTable<text, Number>> groupingFactor = CreateSortedGrouping(uniqueFactor1,uniqueFactor2)
        HashTable<text, Series> seriesFactor = CreateSortedSeriesList(uniqueFactor2)

        i = 0
        repeat while i < column:GetSize()
            if not column:IsUndefined(i) and not factor1:IsUndefined(i) and not factor2:IsUndefined(i)
                number valueForName = column:GetAsNumber(i)
                
                if groupingFactor:GetValue(factor1:GetAsText(i)):GetValue(factor2:GetAsText(i)) not= undefined
                    valueForName = valueForName + groupingFactor:GetValue(factor1:GetAsText(i)):GetValue(factor2:GetAsText(i)):GetValue()
                end
                groupingFactor:GetValue(factor1:GetAsText(i)):Add(factor2:GetAsText(i), valueForName)
                
            end
            
            i = i + 1
        end

        
        CalculateSumMinMaxTwoFactor(groupingFactor)

        i = 0
        repeat while i < uniqueFactor1:GetSize()
            HashTable<text, Number> innerHash = groupingFactor:GetValue(uniqueFactor1:GetAsText(i))
            BarGroup group
            group:SetName(uniqueFactor1:GetAsText(i))
            j = 0
            repeat while j < uniqueFactor2:GetSize()
                Number value = innerHash:GetValue(uniqueFactor2:GetAsText(j))
                
                if value not= undefined
                    Bar innerBar
                    innerBar:SetName(uniqueFactor2:GetAsText(j))
                    innerBar:SetValue(value)
                    group:AddBar(innerBar)
    
                    //Add bar to the correct Series
                    if(seriesFactor:HasKey(uniqueFactor2:GetAsText(j)))
                        seriesFactor:GetValue(uniqueFactor2:GetAsText(j)):AddItem(innerBar:GetIcon())
                    end
                end
                j = j + 1
            end
            if(group:GetSize() > 0)
                chart:AddBarGroup(group)
            end
            i = i + 1
        end

        Array<text> seriesKeyArray = seriesFactor:CopyToKeyArray()

        Legend legend
        i = 0
        repeat while i < uniqueFactor2:GetSize()

            chart:AddSeries(seriesFactor:GetValue(uniqueFactor2:GetAsText(i)))
            i = i + 1
        end

        legend:SetSeriesList(chart:GetSeriesList())
        legend:SetName(factor2:GetHeader())
        chart:SetMaxBarValue(sumMax)
        chart:SetLegend(legend)
        SetTicks(chart)
        SetScale(chart, sumMin, sumMax)
        return chart
    end

    action CreateSortedGrouping(DataFrameColumn factor) returns HashTable<text, Number>
        HashTable<text, Number> groupingFactor
        
        integer i = 0
        repeat while i < factor:GetSize()
            if not groupingFactor:HasKey(factor:GetAsText(i))
                groupingFactor:Add(factor:GetAsText(i), undefined)
            end
            i = i + 1
        end
        return groupingFactor
    end
    
    action CreateSortedGrouping(DataFrameColumn factor1, DataFrameColumn factor2) returns HashTable<text, HashTable<text,Number>>
        HashTable<text, HashTable<text, Number>> groupingFactor

        integer i = 0
        repeat while i < factor1:GetSize()
            integer j = 0
            repeat while j < factor2:GetSize()
                if(groupingFactor:HasKey(factor1:GetAsText(i)))
                    if not groupingFactor:GetValue(factor1:GetAsText(i)):HasKey(factor2:GetAsText(j))
                        groupingFactor:GetValue(factor1:GetAsText(i)):Add(factor2:GetAsText(j), undefined)
                    end
                else
                    HashTable<text, number> innerGrouping
                    groupingFactor:Add(factor1:GetAsText(i), innerGrouping)
                    groupingFactor:GetValue(factor1:GetAsText(i)):Add(factor2:GetAsText(j), undefined)
                end
                j = j + 1
            end
            i = i + 1
        end
        return groupingFactor
    end

    action CreateSortedSeriesList(DataFrameColumn col) returns HashTable<text, Series>
        HashTable<text, Series> seriesFactor

        DataFrameColumn seriesNames = col:Copy(true,true)

        integer i = 0
        repeat while i < seriesNames:GetSize()
            if(not seriesFactor:HasKey(seriesNames:GetAsText(i)))
                Series series
                series:SetName(seriesNames:GetAsText(i))
                seriesFactor:Add(seriesNames:GetAsText(i), series)
            end
            i = i + 1
        end
        return seriesFactor
    end

    action Create(DataFrame frame) returns Chart
        //there are no factors to map to, so just count the number of items
        //in each bucket and toss them on the X-axis by default
        if GetColumnSize() = 1 and GetFactorSize() = 0
            DataFrameColumn column = frame:GetColumn(GetColumn(0))
            return BuildCountChart(column)
        elseif GetColumnSize() = 1 and GetFactorSize() = 1
            //Make a copy of the frame so it can be sorted without altering the original
            DataFrame copyFrame = frame:Copy()
            copyFrame:Sort(copyFrame:GetColumn(GetFactor(0)):GetHeader())
            DataFrameColumn factor = copyFrame:GetColumn(GetFactor(0))
            DataFrameColumn column = copyFrame:GetColumn(GetColumn(0))
            return CreateChart(factor, column)
        elseif GetColumnSize() = 1 and GetFactorSize() = 2
            //Make a copy of the frame so it can be sorted without altering the original
            DataFrame copyFrame = frame:Copy()
            copyFrame:Sort(copyFrame:GetColumn(GetFactor(0)):GetHeader() + "," + copyFrame:GetColumn(GetFactor(1)):GetHeader())
            DataFrameColumn factor1 = copyFrame:GetColumn(GetFactor(0))
            DataFrameColumn factor2 = copyFrame:GetColumn(GetFactor(1))
            DataFrameColumn column = copyFrame:GetColumn(GetColumn(0))
            return CreateChart(factor1, factor2, column)
        elseif GetColumnSize() > 1 and GetFactorSize() = 0
            return BuildCountChart(frame, false) //Boolean will track if using a factor or not
        elseif GetColumnSize() > 1 and GetFactorSize() = 1
            DataFrameColumn factor = frame:GetColumn(GetFactor(0))
            return BuildCountChart(frame, true)
        else
            alert("BarChartCreator does not support the number of column/factors that were selected")
        end
    

        return undefined
    end

    action CalculateValueSet(DataFrameColumn column) returns Array<text>
        Array<text> values
        integer groupCount = 0
        HashTable<text, text> nameHash
        integer size = column:GetSize()
        boolean hasUndefined = false
        i = 0
        repeat while i < size
            //just keep track of the fact that we have undefined values
            if column:IsUndefined(i)
                hasUndefined = true
            else
                text name = column:GetAsText(i)
                if not nameHash:HasKey(name)
                    nameHash:Add(name, name)
                end
            end
            
            i = i + 1
        end
          
        return values
    end

    

    action GetYSteps returns integer
        return ySteps
    end

    action GetXSteps returns integer
        return xSteps
    end

    /*
        Sets the number of steps in the scale. 
    */
    action SetYSteps(integer steps)
        ySteps = steps
    end
    /*
        Sets the number of steps in the scale. 
    */
    action SetXSteps(integer steps)
        xSteps = steps
    end

    
    /*
        Sets the maxiumum value that will appear at the top of the scale. Note 
        that the other values of the scale will be affected by the maximum.
    */
    action SetScaleMaximum(number max)
        maxScale = max
    end

    /*
        Sets the maxiumum value that will appear at the top of the scale. Note 
        that the other values of the scale will be affected by the maximum.
    */
    action SetScaleMinimum(number min)
        minScale = min
    end

    action GetComparison returns Comparison
        return comparison
    end

    action SetComparison(Comparison comparison)
        me:comparison = comparison
    end
end