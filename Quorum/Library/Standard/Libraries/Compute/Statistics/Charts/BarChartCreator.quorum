package Libraries.Compute.Statistics.Charts

use Libraries.Compute.Statistics.DataFrameChartCreator
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Compute.Statistics.DataFrame
use Libraries.Interface.Controls.Charts.BarChart
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Compute.Statistics.Charts.ColumnToTextArray
use Libraries.Compute.Statistics.Charts.ColumnToNumberArray
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Inputs.FactorInput
use Libraries.Containers.Iterator
use Libraries.Interface.Controls.Charts.BarChart
use Libraries.Compute.Statistics.Calculations.Summarize
use Libraries.Containers.Support.Comparison
use Libraries.Interface.Controls.Charts.Bar
use Libraries.Interface.Controls.Charts.BarGroup
use Libraries.Interface.Controls.Charts.Series
use Libraries.Interface.Controls.Charts.Legend

/*
    This class is used to create a Bar Chart from columns of data in a DataFrame.
    This creator is also capable of using columns and factors. If only one column is given, 
    the system counts the number of items for each point. If a factor and a column are given,
    the factor is the X-axis and the column is the Y-axis.

    Attribute: Author Andreas Stefik and Gabriel Contreras
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Charts.BarChartCreator

    DataFrame frame
    frame:Load("Data/Data.csv")

    //Create a Bar Chart and set some properties
    BarChartCreator creator
    creator:AddColumn(4)
    creator:AddFactor(0)
    creator:SetXSteps(4)

    Chart chart = frame:CreateChart(creator)
    chart:Display(2000,1000)
*/
class BarChartCreator is DataFrameChartCreator, ColumnInput, FactorInput
    number maxScale = maxScale:GetMinimumValue()
    number minScale = maxScale:GetMaximumValue()
    integer xSteps = -1
    integer ySteps = 5
    Comparison comparison = undefined
    integer hashMax = 0
    integer hashMin = 0

    private action CalculateItemCounts(DataFrameColumn column) returns HashTable<text, integer>
        HashTable<text, integer> result
        integer groupCount = 0
        integer size = column:GetSize()
        integer undefinedCount = 0
        i = 0
        repeat while i < size
            //just keep track of the fact that we have undefined values
            if column:IsUndefined(i)
                undefinedCount = undefinedCount + 1
            else
                text name = column:GetAsText(i)
                if not result:HasKey(name)
                    result:Add(name, 1)
                else
                    result:Add(name, result:GetValue(name) + 1)
                end
            end
            
            i = i + 1
        end
        result:Add(undefined, undefinedCount)
        return result
    end

    
    private action CalculateMinMaxCount(HashTable<text, integer> hash)
        Iterator<integer> iterator = hash:GetValueIterator()
        //adjust values to percentage
        integer max = 0
        integer min = 0
        max = max:GetMinimumValue()
        min = min:GetMaximumValue()
        integer i = 1
        repeat while iterator:HasNext()
            integer value = iterator:Next()
            if value > max
                max = value
            end

            if value < min
                min = value
            end
        i = i + 1
        end
        hashMax = max
        hashMin = min
    end

    private action BuildCountChart(HashTable<text, integer> hash) returns BarChart
        BarChart chart

        Array<text> namesArray = hash:CopyToKeyArray()
        if comparison = undefined
            namesArray:Sort()
        else
            namesArray:Sort(comparison)
        end

        CalculateMinMaxCount(hash)
        integer max = hashMax
        integer min = hashMin
        integer stepCounter = 0

        //make chart
        i = 0
        repeat while i < namesArray:GetSize()
            number valueForName = hash:GetValue(namesArray:Get(i))
            number percent = valueForName / max

            BarGroup group
            group:SetName(namesArray:Get(i))
            Bar bar
            bar:SetName(namesArray:Get(i))
            bar:SetHeight(percent)
            group:AddBar(bar)
            chart:AddBarGroup(group)
            i = i + 1
        end 
        SetTicks(chart)
        SetScale(chart, min, max)

        
        return chart
    end

    private action SetScale(BarChart chart, number min, number max)
        if max not= maxScale:GetMinimumValue()
            chart:SetScaleMaximum(max)
        else
            chart:SetScaleMaximum(max)
        end

        if min not= maxScale:GetMaximumValue()
            chart:SetScaleMinimum(min)
        else
            chart:SetScaleMaximum(min)
        end
    end

    private action SetTicks(BarChart chart)
        if xSteps not= -1
            chart:SetXTickSteps(xSteps)
        end

        if ySteps not= -1
            chart:SetYTickSteps(ySteps)
        end
    end

    private action CreateChart(DataFrameColumn factor, DataFrameColumn column) returns BarChart
        BarChart chart

        Summarize summary
        column:Calculate(summary)
        number max = summary:GetMaximum()
        number min = summary:GetMinimum()
        HashTable<text, number> groupingFactor    
        i = 0
        repeat while i < column:GetSize()
            if not column:IsUndefined(i) and not factor:IsUndefined(i)
                number valueForName = column:GetAsNumber(i)
                //number percent = valueForName / max
                
                //chart:AddBar(factor:GetAsText(i), percent)
                if(groupingFactor:HasKey(factor:GetAsText(i)))
                    valueForName = valueForName + groupingFactor:GetValue(factor:GetAsText(i))
                    groupingFactor:Add(factor:GetAsText(i), valueForName)
                else
                    groupingFactor:Add(factor:GetAsText(i), valueForName)
                end
            end
            
            i = i + 1
        end

        Array<number> valueArray = groupingFactor:CopyToValueArray()
        if(valueArray:GetSize() > 0)
            max = valueArray:Get(0)
            min = valueArray:Get(0)
        end
        i = 0
        repeat while i < valueArray:GetSize()
            if(valueArray:Get(i) > max)
                max = valueArray:Get(i)
            end

            if(valueArray:Get(i) < min)
                min = valueArray:Get(i)
            end
            
            i = i + 1
        end

        Iterator<text> it = groupingFactor:GetKeyIterator()
        repeat while it:HasNext()
            text key = it:Next()
            number value = groupingFactor:GetValue(key)
            
            number percent = value / max
            
            BarGroup group
            group:SetName(key)
            Bar bar
            bar:SetName(key)
            bar:SetHeight(percent)
            group:AddBar(bar)
            chart:AddBarGroup(group)
        end

        SetTicks(chart)
        SetScale(chart, min, max)
        return chart
    end

private action CreateChart(DataFrameColumn factor1, DataFrameColumn factor2, DataFrameColumn column) returns BarChart
        BarChart chart

        Summarize summary
        column:Calculate(summary)
        number max = summary:GetMaximum()
        number min = summary:GetMinimum()
        HashTable<text, HashTable<text, number>> groupingFactor
        HashTable<text, Series> seriesFactor
        i = 0
        repeat while i < column:GetSize()
            if not column:IsUndefined(i) and not factor1:IsUndefined(i) and not factor2:IsUndefined(i)
                number valueForName = column:GetAsNumber(i)
                //number percent = valueForName / max
                
                
                //chart:AddBar(factor:GetAsText(i), percent)
                if(groupingFactor:HasKey(factor1:GetAsText(i)))
                       if(groupingFactor:GetValue(factor1:GetAsText(i)):HasKey(factor2:GetAsText(i)))
                            valueForName = valueForName + groupingFactor:GetValue(factor1:GetAsText(i)):GetValue(factor2:GetAsText(i))
                            groupingFactor:GetValue(factor1:GetAsText(i)):Add(factor2:GetAsText(i), valueForName)
                       else
                            groupingFactor:GetValue(factor1:GetAsText(i)):Add(factor2:GetAsText(i), valueForName)
                       end
                else
                    HashTable<text, number> innerGrouping
                    groupingFactor:Add(factor1:GetAsText(i), innerGrouping)
                    groupingFactor:GetValue(factor1:GetAsText(i)):Add(factor2:GetAsText(i), valueForName)
                end
              
                //Get a running list of all factor2 options
                if(not seriesFactor:HasKey(factor2:GetAsText(i)))
                    Series series
                    series:SetName(factor2:GetAsText(i))
                    seriesFactor:Add(factor2:GetAsText(i), series)
                end
            end
            
            i = i + 1
        end

        Array<HashTable<text, number>> valueArray = groupingFactor:CopyToValueArray()
        if(valueArray:GetSize() > 0)
            Array<number> innerValue = valueArray:Get(0):CopyToValueArray()
            if(innerValue:GetSize() > 0)
                max = innerValue:Get(0)
                min = innerValue:Get(0)
            end
        end
        i = 0
        repeat while i < valueArray:GetSize()
            Array<number> innerValue = valueArray:Get(i):CopyToValueArray()
            integer j = 0
            repeat while j < innerValue:GetSize()
                if(innerValue:Get(j) > max)
                    max = innerValue:Get(j)
                end
    
                if(innerValue:Get(j) < min)
                    min = innerValue:Get(j)
                end
                j = j + 1
            end
            i = i + 1
        end

        Iterator<text> it = groupingFactor:GetKeyIterator()
        repeat while it:HasNext()
            text key = it:Next()
            HashTable<text, number> innerHash = groupingFactor:GetValue(key)

            BarGroup group
            group:SetName(key)
            Iterator<text> innerIt = innerHash:GetKeyIterator()
            repeat while innerIt:HasNext()
                text innerKey = innerIt:Next()
                number value = innerHash:GetValue(innerKey)

                number percent = value / max
                //chart:AddBar(innerKey, percent)
                Bar innerBar
                innerBar:SetName(innerKey)
                innerBar:SetHeight(percent)
                group:AddBar(innerBar)

                //Add bar to the correct Series
                if(seriesFactor:HasKey(innerKey))
                    seriesFactor:GetValue(innerKey):AddItem(innerBar:GetIcon())
                end
            end
            chart:AddBarGroup(group)
        end

        Array<text> seriesKeyArray = seriesFactor:CopyToKeyArray()

        if comparison = undefined
            seriesKeyArray:Sort()
        else
            seriesKeyArray:Sort(comparison)
        end

        Legend legend
        i = 0
        repeat while i < seriesKeyArray:GetSize()

            chart:AddSeries(seriesFactor:GetValue(seriesKeyArray:Get(i)))
            i = i + 1
        end

        legend:SetSeriesList(chart:GetSeriesList())
        chart:SetLegend(legend)
        SetTicks(chart)
        SetScale(chart, min, max)
        return chart
    end

    action Create(DataFrame frame) returns Chart
        //there are no factors to map to, so just count the number of items
        //in each bucket and toss them on the X-axis by default
        if GetColumnSize() = 1 and GetFactorSize() = 0
            DataFrameColumn column = frame:GetColumn(GetColumn(0))
            HashTable<text, integer> hash = CalculateItemCounts(column)
            Chart chart = BuildCountChart(hash)
            chart:SetXAxisTitle(column:GetHeader())
            chart:SetYAxisTitle("Count")
            return chart
        elseif GetColumnSize() = 1 and GetFactorSize() = 1
            DataFrameColumn factor = frame:GetColumn(GetFactor(0))
            DataFrameColumn column = frame:GetColumn(GetColumn(0))
            return CreateChart(factor, column)
        elseif GetColumnSize() = 1 and GetFactorSize() = 2
            DataFrameColumn factor1 = frame:GetColumn(GetFactor(0))
            DataFrameColumn factor2 = frame:GetColumn(GetFactor(1))
            DataFrameColumn column = frame:GetColumn(GetColumn(0))
            return CreateChart(factor1, factor2, column)
        end
    

        return undefined
    end

    action CalculateValueSet(DataFrameColumn column) returns Array<text>
        Array<text> values
        integer groupCount = 0
        HashTable<text, text> nameHash
        integer size = column:GetSize()
        boolean hasUndefined = false
        i = 0
        repeat while i < size
            //just keep track of the fact that we have undefined values
            if column:IsUndefined(i)
                hasUndefined = true
            else
                text name = column:GetAsText(i)
                if not nameHash:HasKey(name)
                    nameHash:Add(name, name)
                end
            end
            
            i = i + 1
        end
          
        return values
    end

    action GetYSteps returns integer
        return ySteps
    end

    action GetXSteps returns integer
        return xSteps
    end

    /*
        Sets the number of steps in the scale. 
    */
    action SetYSteps(integer steps)
        ySteps = steps
    end
    /*
        Sets the number of steps in the scale. 
    */
    action SetXSteps(integer steps)
        xSteps = steps
    end

    
    /*
        Sets the maxiumum value that will appear at the top of the scale. Note 
        that the other values of the scale will be affected by the maximum.
    */
    action SetScaleMaximum(number max)
        maxScale = max
    end

    /*
        Sets the maxiumum value that will appear at the top of the scale. Note 
        that the other values of the scale will be affected by the maximum.
    */
    action SetScaleMinimum(number min)
        minScale = min
    end

    action GetComparison returns Comparison
        return comparison
    end

    action SetComparison(Comparison comparison)
        me:comparison = comparison
    end
end