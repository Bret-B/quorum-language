package Libraries.Compute.Statistics.Charts

use Libraries.Compute.Statistics.DataFrameChartCreator
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Compute.Statistics.DataFrame
use Libraries.Interface.Controls.Charts.BarChart
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Compute.Statistics.Charts.ColumnToTextArray
use Libraries.Compute.Statistics.Charts.ColumnToNumberArray
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Inputs.FactorInput
use Libraries.Containers.Iterator
use Libraries.Interface.Controls.Charts.BarChart
use Libraries.Compute.Statistics.Calculations.Summarize
use Libraries.Containers.Support.Comparison
use Libraries.Interface.Controls.Charts.Bar
use Libraries.Interface.Controls.Charts.BarGroup
use Libraries.Interface.Controls.Charts.Series
use Libraries.Interface.Controls.Charts.Legend
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Statistics.Tests.Regression
use Libraries.Interface.Controls.Charts.RegressionLine

/*
    This class is used to create a Bar Chart from columns of data in a DataFrame.
    This creator is also capable of using columns and factors. If only one column is given, 
    the system counts the number of items for each point. If a factor and a column are given,
    the factor is the X-axis and the column is the Y-axis.

    Attribute: Author Andreas Stefik and Gabriel Contreras
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Charts.BarChartCreator

    DataFrame frame
    frame:Load("Data/Data.csv")

    //Create a Bar Chart and set some properties
    BarChartCreator creator
    creator:AddColumn(4)
    creator:AddFactor(0)
    creator:SetXSteps(4)

    Chart chart = frame:CreateChart(creator)
    chart:Display(2000,1000)
*/
class BarChartCreator is DataFrameChartCreator, ColumnInput, FactorInput
    Comparison comparison = undefined
    integer countMax = 0
    integer countMin = 0
    number sumMax = 0
    number sumMin = 0

    action Create(DataFrame frame) returns Chart
        integer columns = GetColumnSize()
        integer factors = GetFactorSize()

        if columns = 1 and factors = 0
            DataFrameColumn column = frame:GetColumn(GetColumn(0))
            if column:IsNumberColumn()
                return CreateChartBySum(frame) // Create bars by sum of column
            else
                return CreateChartByCount(column) // Create bars by count
            end

        elseif columns > 1 and factors = 0
            return CreateChartBySum(frame) // Create bars by sum of each column

        elseif columns = 0 and factors = 1
            DataFrameColumn factor = frame:GetColumn(GetFactor(0))
            return CreateChartByCount(factor) // Create bars by count

        elseif columns = 1 and factors = 1
            //Make a copy of the frame so it can be sorted without altering the original
            DataFrame copyFrame = frame:Copy()
            copyFrame:Sort(copyFrame:GetColumn(GetFactor(0)):GetHeader())
            DataFrameColumn factor = copyFrame:GetColumn(GetFactor(0))
            DataFrameColumn column = copyFrame:GetColumn(GetColumn(0))
            return CreateChart(factor, column, true)

        elseif columns > 1 and factors = 1
            return CreateChart(frame, true)

        elseif columns = 1 and factors = 2
            //Make a copy of the frame so it can be sorted without altering the original
            DataFrame copyFrame = frame:Copy()
            copyFrame:Sort(copyFrame:GetColumn(GetFactor(0)):GetHeader() + "," + copyFrame:GetColumn(GetFactor(1)):GetHeader())
            DataFrameColumn factor1 = copyFrame:GetColumn(GetFactor(0))
            DataFrameColumn factor2 = copyFrame:GetColumn(GetFactor(1))
            DataFrameColumn column = copyFrame:GetColumn(GetColumn(0))
            return CreateChart(factor1, factor2, column, true)

        else
            alert("BarChartCreator does not support the number of column/factors that were selected")
        end
        return undefined
    end

    action Create(DataFrame frame, boolean sort) returns Chart
        integer columns = GetColumnSize()
        integer factors = GetFactorSize()

        if columns = 1 and factors = 0
            DataFrameColumn column = frame:GetColumn(GetColumn(0))
            if column:IsNumberColumn()
                return CreateChartBySum(frame) // Create bars by sum of column
            else
                return CreateChartByCount(column) // Create bars by count
            end

        elseif columns > 1 and factors = 0
            return CreateChartBySum(frame) // Create bars by sum of each column

        elseif columns = 0 and factors = 1
            DataFrameColumn factor = frame:GetColumn(GetFactor(0))
            return CreateChartByCount(factor) // Create bars by count

        elseif columns = 1 and factors = 1
            //Make a copy of the frame so it can be sorted without altering the original
            DataFrame copyFrame = frame:Copy()
            if sort
                copyFrame:Sort(copyFrame:GetColumn(GetFactor(0)):GetHeader())
            end
            DataFrameColumn factor = copyFrame:GetColumn(GetFactor(0))
            DataFrameColumn column = copyFrame:GetColumn(GetColumn(0))
            return CreateChart(factor, column, sort)

        elseif columns > 1 and factors = 1
            return CreateChart(frame, sort)

        elseif columns = 1 and factors = 2
            //Make a copy of the frame so it can be sorted without altering the original
            DataFrame copyFrame = frame:Copy()
            if sort
                copyFrame:Sort(copyFrame:GetColumn(GetFactor(0)):GetHeader() + "," + copyFrame:GetColumn(GetFactor(1)):GetHeader())
            end
            DataFrameColumn factor1 = copyFrame:GetColumn(GetFactor(0))
            DataFrameColumn factor2 = copyFrame:GetColumn(GetFactor(1))
            DataFrameColumn column = copyFrame:GetColumn(GetColumn(0))
            return CreateChart(factor1, factor2, column, sort)

        else
            alert("BarChartCreator does not support the number of column/factors that were selected")
        end
        return undefined
    end

    private action CreateChartByCount(DataFrameColumn column) returns BarChart
        BarChart chart

        HashTable<text, integer> hash = CalculateItemCounts(column)
        DataFrameColumn labels = column:Copy(true,true)
        chart:SetTitle(column:GetHeader():ToUpperCase())
        chart:SetXAxisTitle(column:GetHeader())
        chart:SetYAxisTitle("Count")
        boolean numerical = false

        CalculateCountMinMax(hash)
        integer max = countMax
        integer min = 0
        integer stepCounter = 0

        Array <Series> seriesList
        Series series
        series:SetName(column:GetHeader())

        if labels:IsNumberColumn()
            numerical = true
        end
        Array <text> barNames
        //make chart

        Array<DataFrameColumn> regColumns 
        NumberColumn column1 //independent
        NumberColumn column2 //dependent
        i = 0
        repeat while i < labels:GetSize()
            if not labels:IsUndefined(i)
                number valueForName = hash:GetValue(labels:GetAsText(i))
    
                BarGroup group
                group:SetName(labels:GetAsText(i))
                barNames:Add(labels:GetAsText(i))
                Bar bar
                bar:SetName(labels:GetAsText(i))
                bar:SetValue(valueForName)
                group:AddBar(bar)
                series:AddItem(bar:GetIcon())
                bar:SetSeries(series)
                chart:AddBarGroup(group)

                if numerical
//                    column1:Add(labels:GetAsText(i))
                    column1:Add(""+i)
                    column2:Add(cast(text, valueForName))
                end
            end
            i = i + 1
        end
        
        if numerical
            if labels:GetSize() < 3
                output "Linear regression was not computable for " + column:GetHeader()
            else
                regColumns:Add(column1)
                regColumns:Add(column2)
                RegressionLine regLine
//                regLine:SetIndependentVariable(column:GetHeader())
//                regLine:SetDependentVariable("Count")
//                regLine:NamedAfterSeries(true)
                DataFrame regressionFrame
                regressionFrame:SetColumns(regColumns)
                Regression regression 
                regression:AddFactor(0) //the independent variable
                regression:AddColumn(1) //the dependent variable
                regressionFrame:Calculate(regression)
                regLine:SetRegression(regression)
                regLine:SetSeries(series)
                series:SetRegressionLine(regLine)
            end
        end
        seriesList:Add(series)
        
        SetScale(chart, min, max, 0, barNames:GetSize())
        chart:OverrideXLabelsWithText(barNames)
        chart:SetSeriesList(seriesList)
        chart:GetHorizontalPanel():NumericalOverrideLabels(numerical)
        return chart
    end

    action CreateChartBySum(DataFrame frame) returns Chart
        BarChart chart
        integer columns = GetColumnSize()

        chart:SetYAxisTitle("TOTAL")
        chart:SetXAxisTitle("GROUP")

        HashTable<text, Series> seriesFactor
        HashTable<text, BarGroup> groupFactor
        boolean numericalGroupName = false

        number yMax = 0
        number yMin = 0

        integer i = 0
        repeat while i < columns
            DataFrameColumn column = frame:GetColumn(GetColumn(i))
            if not column:IsNumberColumn()
                alert("BarChartCreator does not support multiple columns when a text column is used. Text columns can be used alone or used as a factor.")
                return undefined
            end
            number sum = 0.0
            integer j = 0
            repeat while j < column:GetSize()
                if not column:IsUndefined(j)
                    sum = sum + column:GetAsNumber(j)         
                end
                j = j + 1
            end
            if sum > yMax
                yMax = sum
            end
            Bar bar
            bar:SetValue(sum)
            bar:SetName(column:GetHeader())
            if not seriesFactor:HasKey(column:GetHeader())
                Series series
                series:SetName(column:GetHeader())
                series:AddItem(bar:GetIcon())
                bar:SetSeries(series)
                seriesFactor:Add(column:GetHeader(), series)
            end
            if not groupFactor:HasKey(column:GetHeader())
                BarGroup group
                group:SetName(column:GetHeader())
                group:AddBar(bar)
                groupFactor:Add(column:GetHeader(), group)
            end
            i = i + 1
        end

        // Add Groups
        Array<text> groupNames = groupFactor:CopyToKeyArray()
        if comparison = undefined
            groupNames:Sort()
        else
            groupNames:Sort(comparison)
        end
        i = 0
        repeat while i < groupNames:GetSize()
            chart:AddBarGroup(groupFactor:GetValue(groupNames:Get(i)))
            i = i + 1
        end

        // Add Series
        Array <Series> seriesList
        Array<text> seriesKeyArray = seriesFactor:CopyToKeyArray()
        if comparison = undefined
            seriesKeyArray:Sort()
        else
            seriesKeyArray:Sort(comparison)
        end
        i = 0
        repeat while i < seriesKeyArray:GetSize()
            seriesList:Add(seriesFactor:GetValue(seriesKeyArray:Get(i)))
            i = i + 1
        end

        SetScale(chart, yMin, yMax, 0, groupNames:GetSize())
        chart:OverrideXLabelsWithText(groupNames)
        chart:SetSeriesList(seriesList)
        chart:GetHorizontalPanel():NumericalOverrideLabels(numericalGroupName)
        return chart
    end

    private action CreateChart(DataFrame frame, boolean sort) returns BarChart
        BarChart chart
        integer columns = GetColumnSize()
        
        number max = 0.0
        number min = 0.0

        HashTable<text, BarGroup> groupFactor
        HashTable<text, Series> seriesFactor
        HashTable<text, Bar> barFactor
        HashTable<number, text> numberForText
        boolean numerical = false

        DataFrameColumn factor = frame:GetColumn(GetFactor(0))
        chart:SetYAxisTitle("TOTAL")
        chart:SetXAxisTitle(factor:GetHeader():ToUpperCase())

        if factor:IsNumberColumn()
            numerical = true
        end

        integer i = 0
        repeat while i < factor:GetSize()
            if not factor:IsUndefined(i)
                if not (factor:GetAsText(i) = "") and not groupFactor:HasKey(factor:GetAsText(i))
                    BarGroup group
                    group:SetName(factor:GetAsText(i))
                    groupFactor:Add(factor:GetAsText(i), group)
                    if numerical
                        numberForText:Add(factor:GetAsNumber(i), factor:GetAsText(i))
                    end
                end
            end
            i = i + 1
        end

        i = 0
        repeat while i < columns
            DataFrameColumn column = frame:GetColumn(GetColumn(i))
            if not column:IsNumberColumn()
                alert("BarChartCreator does not support text columns used with factors.")
                return undefined
            end
            if(not seriesFactor:HasKey(column:GetHeader()))
                Series series
                series:SetName(column:GetHeader())
                seriesFactor:Add(column:GetHeader(), series)
            end
    
            //make chart
            number valueForName = 0.0
            integer j = 0
            repeat while j < column:GetSize()
                if not column:IsUndefined(j) and not factor:IsUndefined(j)
                    valueForName = column:GetAsNumber(j)
    
                    text barKey = factor:GetAsText(j) + " " + column:GetHeader()
                    if not barFactor:HasKey(barKey)
                        Bar bar
                        bar:SetName(barKey)
                        bar:SetValue(valueForName)
                        barFactor:Add(barKey, bar)
                        if(groupFactor:HasKey(factor:GetAsText(j)))
                            groupFactor:GetValue(factor:GetAsText(j)):AddBar(bar)
                        end
                        if(seriesFactor:HasKey(column:GetHeader()))
                            seriesFactor:GetValue(column:GetHeader()):AddItem(bar:GetIcon())
                            bar:SetSeries(seriesFactor:GetValue(column:GetHeader()))
                        end
                    else
                        valueForName = valueForName + barFactor:GetValue(barKey):GetValue()
                        barFactor:GetValue(barKey):SetValue(valueForName)
                    end
                    if(valueForName > max)
                        max = valueForName
                    end
                end
                j = j + 1
            end
            i = i + 1
        end
        // Sort and add the series
        Array <Series> seriesList
        Array<text> seriesKeyArray = seriesFactor:CopyToKeyArray()
        if sort
            if comparison = undefined
                seriesKeyArray:Sort()
            else
                seriesKeyArray:Sort(comparison)
            end
        end
        i = 0
        repeat while i < seriesKeyArray:GetSize()
            seriesList:Add(seriesFactor:GetValue(seriesKeyArray:Get(i)))
            i = i + 1
        end

        // Sort the bars within each group to match series legend display
        Array<text> groupKeyArray = groupFactor:CopyToKeyArray()
        i = 0
        repeat while i < groupKeyArray:GetSize()
            BarGroup group
            group:SetName(groupKeyArray:Get(i))
            integer j = 0
            repeat while j < seriesKeyArray:GetSize()
                text barKey = groupKeyArray:Get(i) + " " + seriesKeyArray:Get(j)
                group:AddBar(barFactor:GetValue(barKey))
                j = j + 1
            end
            groupFactor:Set(groupKeyArray:Get(i), group)
            i = i + 1
        end

        Array <text> groupNames
        // Sort the bar groups within the chart
        if numerical
            Array<number> numberKeyArray = numberForText:CopyToKeyArray()
            if sort
                if comparison = undefined
                    numberKeyArray:Sort()
                else
                    numberKeyArray:Sort(comparison)
                end
            end
            i = 0
            repeat while i < numberKeyArray:GetSize()
                BarGroup group = groupFactor:GetValue(numberForText:GetValue(numberKeyArray:Get(i)))
                chart:AddBarGroup(group)
                groupNames:Add(numberForText:GetValue(numberKeyArray:Get(i)))
                i = i + 1
            end
        else
            if sort
                if comparison = undefined
                    groupKeyArray:Sort()
                else
                    groupKeyArray:Sort(comparison)
                end
            end
            i = 0
            repeat while i < groupKeyArray:GetSize()
                BarGroup group = groupFactor:GetValue(groupKeyArray:Get(i))
                chart:AddBarGroup(group)
                groupNames:Add(groupKeyArray:Get(i))
                i = i + 1
            end  
        end  

        SetScale(chart, min, max, 0, groupNames:GetSize())
        chart:OverrideXLabelsWithText(groupNames)
        chart:SetSeriesList(seriesList)
        chart:GetHorizontalPanel():NumericalOverrideLabels(numerical)
        return chart
    end

    private action CreateChart(DataFrameColumn factor, DataFrameColumn column, boolean sort) returns BarChart
        BarChart chart
        if not column:IsNumberColumn()
            alert("BarChartCreator does not support text columns used with factors.")
            return undefined
        end

        boolean numerical = false
        if factor:IsNumberColumn()
            numerical = true
        end

        Array <Series> seriesList
        Series series
        series:SetName(factor:GetHeader())

        chart:SetTitle(column:GetHeader():ToUpperCase())
        chart:SetXAxisTitle(factor:GetHeader():ToUpperCase())
        chart:SetYAxisTitle(column:GetHeader():ToUpperCase())
        Summarize summary
        column:Calculate(summary)
        number max = summary:GetMaximum()
        number min = summary:GetMinimum()
        DataFrameColumn uniqueFactor = factor:Copy(sort,true)
        if not sort
            DataFrameColumn preserveOrder = uniqueFactor:Copy()
            integer preserveOrderIndex = 0
            integer i = 0
            repeat while i < factor:GetSize()
                integer j = 0
                repeat while j < uniqueFactor:GetSize()
                    if uniqueFactor:GetAsText(j) not= undefined and factor:GetAsText(i) = uniqueFactor:GetAsText(j)
                        preserveOrder:CopyToRow(uniqueFactor, preserveOrderIndex, j)
                        uniqueFactor:SetAsText(j,undefined)
                        preserveOrderIndex = preserveOrderIndex + 1
                    end
                    j = j + 1
                end

                i = i + 1
            end
            uniqueFactor = preserveOrder:Copy()
        end
        HashTable<text, Number> groupingFactor = CreateSortedGrouping(uniqueFactor)
        i = 0
        repeat while i < column:GetSize()
            if not column:IsUndefined(i) and not factor:IsUndefined(i)
                number valueForName = column:GetAsNumber(i)
                if groupingFactor:GetValue(factor:GetAsText(i)) not= undefined
                    valueForName = valueForName + groupingFactor:GetValue(factor:GetAsText(i)):GetValue()
                    groupingFactor:Add(factor:GetAsText(i), valueForName)
                else
                    groupingFactor:Add(factor:GetAsText(i), valueForName)
                end
            end
            
            i = i + 1
        end

        CalculateSumMinMax(groupingFactor)
        Array <text> groupNames

        i = 0
        repeat while i < uniqueFactor:GetSize()
            
            Number value = groupingFactor:GetValue(uniqueFactor:GetAsText(i))
            
            if value not= undefined
                BarGroup group
                group:SetName(uniqueFactor:GetAsText(i))
                groupNames:Add(uniqueFactor:GetAsText(i))
                Bar bar
                bar:SetName(uniqueFactor:GetAsText(i))
                bar:SetValue(value)
                group:AddBar(bar)
                series:AddItem(bar:GetIcon())
                bar:SetSeries(series)
                chart:AddBarGroup(group)
            end
            i = i + 1
        end

        seriesList:Add(series)

        SetScale(chart, 0, sumMax, 0, groupNames:GetSize())
        chart:OverrideXLabelsWithText(groupNames)
        chart:SetSeriesList(seriesList)
        chart:GetHorizontalPanel():NumericalOverrideLabels(numerical)
        return chart
    end

    private action CreateChart(DataFrameColumn factor1, DataFrameColumn factor2, DataFrameColumn column, boolean sort) returns BarChart
        BarChart chart
        if not column:IsNumberColumn()
            alert("BarChartCreator does not support text columns used with factors.")
            return undefined
        end

        boolean numerical = false
        if factor1:IsNumberColumn()
            numerical = true
        end

        chart:SetTitle(column:GetHeader():ToUpperCase())
        chart:SetXAxisTitle(factor1:GetHeader():ToUpperCase())
        chart:SetYAxisTitle(column:GetHeader():ToUpperCase())
        Summarize summary
        column:Calculate(summary)
        number max = summary:GetMaximum()
        number min = summary:GetMinimum()
        
        DataFrameColumn uniqueFactor1 = factor1:Copy(sort,true)
        if not sort
            DataFrameColumn preserveOrder = uniqueFactor1:Copy()
            integer preserveOrderIndex = 0
            integer i = 0
            repeat while i < factor1:GetSize()
                integer j = 0
                repeat while j < uniqueFactor1:GetSize()
                    if uniqueFactor1:GetAsText(j) not= undefined and factor1:GetAsText(i) = uniqueFactor1:GetAsText(j)
                        preserveOrder:CopyToRow(uniqueFactor1, preserveOrderIndex, j)
                        uniqueFactor1:SetAsText(j,undefined)
                        preserveOrderIndex = preserveOrderIndex + 1
                    end
                    j = j + 1
                end

                i = i + 1
            end
            uniqueFactor1 = preserveOrder:Copy()
        end

        DataFrameColumn uniqueFactor2 = factor2:Copy(sort,true)  
        if not sort
            DataFrameColumn preserveOrder = uniqueFactor2:Copy()
            integer preserveOrderIndex = 0
            integer i = 0
            repeat while i < factor2:GetSize()
                integer j = 0
                repeat while j < uniqueFactor2:GetSize()
                    if uniqueFactor2:GetAsText(j) not= undefined and factor2:GetAsText(i) = uniqueFactor2:GetAsText(j)
                        preserveOrder:CopyToRow(uniqueFactor2, preserveOrderIndex, j)
                        uniqueFactor2:SetAsText(j,undefined)
                        preserveOrderIndex = preserveOrderIndex + 1
                    end
                    j = j + 1
                end

                i = i + 1
            end
            uniqueFactor2 = preserveOrder:Copy()
        end     

        HashTable<text, HashTable<text, Number>> groupingFactor = CreateSortedGrouping(uniqueFactor1,uniqueFactor2)
        HashTable<text, Series> seriesFactor = CreateSortedSeriesList(uniqueFactor2)

        i = 0
        repeat while i < column:GetSize()
            if not column:IsUndefined(i) and not factor1:IsUndefined(i) and not factor2:IsUndefined(i)
                number valueForName = column:GetAsNumber(i)
                
                if groupingFactor:GetValue(factor1:GetAsText(i)):GetValue(factor2:GetAsText(i)) not= undefined
                    valueForName = valueForName + groupingFactor:GetValue(factor1:GetAsText(i)):GetValue(factor2:GetAsText(i)):GetValue()
                end
                groupingFactor:GetValue(factor1:GetAsText(i)):Add(factor2:GetAsText(i), valueForName)
                
            end
            
            i = i + 1
        end

        
        CalculateSumMinMaxTwoFactor(groupingFactor)

        Array <text> groupNames

        i = 0
        repeat while i < uniqueFactor1:GetSize()
            HashTable<text, Number> innerHash = groupingFactor:GetValue(uniqueFactor1:GetAsText(i))
            BarGroup group
            group:SetName(uniqueFactor1:GetAsText(i))
            j = 0
            repeat while j < uniqueFactor2:GetSize()
                Number value = innerHash:GetValue(uniqueFactor2:GetAsText(j))
                
                if value not= undefined
                    Bar innerBar
                    innerBar:SetName(uniqueFactor2:GetAsText(j))
                    innerBar:SetValue(value)
                    group:AddBar(innerBar)
    
                    //Add bar to the correct Series
                    if(seriesFactor:HasKey(uniqueFactor2:GetAsText(j)))
                        seriesFactor:GetValue(uniqueFactor2:GetAsText(j)):SetName(uniqueFactor2:GetAsText(j))
                        seriesFactor:GetValue(uniqueFactor2:GetAsText(j)):AddItem(innerBar:GetIcon())
                        innerBar:SetSeries(seriesFactor:GetValue(uniqueFactor2:GetAsText(j)))
                    end
                end
                j = j + 1
            end
            if(group:GetSize() > 0)
                chart:AddBarGroup(group)
                groupNames:Add(group:GetName())
            end
            i = i + 1
        end

        Array <Series> seriesList
        Array <text> seriesKeyArray = seriesFactor:CopyToKeyArray()

        Legend legend
        i = 0
        repeat while i < uniqueFactor2:GetSize()
            seriesList:Add(seriesFactor:GetValue(uniqueFactor2:GetAsText(i)))
            i = i + 1
        end

        SetScale(chart, 0, sumMax, 0, groupNames:GetSize())
        chart:OverrideXLabelsWithText(groupNames)
        chart:SetSeriesList(seriesList)
        chart:GetHorizontalPanel():NumericalOverrideLabels(numerical)
        return chart
    end

    private action CalculateItemCounts(DataFrameColumn column) returns HashTable<text, integer>
        HashTable<text, integer> result
        integer groupCount = 0
        integer size = column:GetSize()
        integer undefinedCount = 0
        i = 0
        repeat while i < size
            //just keep track of the fact that we have undefined values
            if column:IsUndefined(i)
                undefinedCount = undefinedCount + 1
            else
                text name = column:GetAsText(i)
                if not result:HasKey(name)
                    result:Add(name, 1)
                else
                    result:Add(name, result:GetValue(name) + 1)
                end
            end
            
            i = i + 1
        end
        result:Add(undefined, undefinedCount)
        return result
    end

    
    private action CalculateCountMinMax(HashTable<text, integer> hash)
        Iterator<integer> iterator = hash:GetValueIterator()
        //adjust values to percentage
        integer max = 0
        integer min = 0
        max = max:GetMinimumValue()
        min = min:GetMaximumValue()
        integer i = 1
        repeat while iterator:HasNext()
            integer value = iterator:Next()
            if value > max
                max = value
            end

            if value < min
                min = value
            end
        i = i + 1
        end
        countMax = max
        countMin = min
    end

    private action CalculateSumMinMax(HashTable<text, Number> hash)
        Iterator<Number> iterator = hash:GetValueIterator()
        //adjust values to percentage
        number max = 0
        number min = 0

        max = max:GetMinimumValue()
        min = min:GetMaximumValue()
        integer i = 1
        repeat while iterator:HasNext()
            Number value = iterator:Next()
            if value not= undefined
                if value:GetValue() > max
                    max = value:GetValue()
                end
    
                if value:GetValue() < min
                    min = value:GetValue()
                end
            end
            i = i + 1
        end
        sumMax = max
        sumMin = min
    end
    
    private action CalculateSumMinMaxTwoFactor(HashTable<text, HashTable<text, Number>> hash)
        Iterator<HashTable<text,Number>> iterator = hash:GetValueIterator()
        //adjust values to percentage
        number max = 0
        number min = 0
        max = max:GetMinimumValue()
        min = min:GetMaximumValue()
        integer i = 1
        repeat while iterator:HasNext()
            HashTable<text,Number> innerHash = iterator:Next()
            Iterator<Number> innerIterator = innerHash:GetValueIterator()
            repeat while innerIterator:HasNext()
                Number value = innerIterator:Next()
                if value not= undefined
                    if value:GetValue() > max
                        max = value:GetValue()
                    end
        
                    if value:GetValue() < min
                        min = value:GetValue()
                    end
                end
                i = i + 1
            end
        end
        sumMax = max
        sumMin = min
    end


    private action SetScale(BarChart chart, number ymin, number ymax, number xmin, number xmax)
        chart:GetVerticalPanel():SetMinimum(ymin)
        chart:GetVerticalPanel():SetMaximum(ymax)
        chart:GetHorizontalPanel():SetMinimum(xmin)
        chart:GetHorizontalPanel():SetMaximum(xmax)
    end

    

    action CreateSortedGrouping(DataFrameColumn factor) returns HashTable<text, Number>
        HashTable<text, Number> groupingFactor
        
        integer i = 0
        repeat while i < factor:GetSize()
            if not groupingFactor:HasKey(factor:GetAsText(i))
                groupingFactor:Add(factor:GetAsText(i), undefined)
            end
            i = i + 1
        end
        return groupingFactor
    end
    
    action CreateSortedGrouping(DataFrameColumn factor1, DataFrameColumn factor2) returns HashTable<text, HashTable<text,Number>>
        HashTable<text, HashTable<text, Number>> groupingFactor

        integer i = 0
        repeat while i < factor1:GetSize()
            integer j = 0
            repeat while j < factor2:GetSize()
                if(groupingFactor:HasKey(factor1:GetAsText(i)))
                    if not groupingFactor:GetValue(factor1:GetAsText(i)):HasKey(factor2:GetAsText(j))
                        groupingFactor:GetValue(factor1:GetAsText(i)):Add(factor2:GetAsText(j), undefined)
                    end
                else
                    HashTable<text, number> innerGrouping
                    groupingFactor:Add(factor1:GetAsText(i), innerGrouping)
                    groupingFactor:GetValue(factor1:GetAsText(i)):Add(factor2:GetAsText(j), undefined)
                end
                j = j + 1
            end
            i = i + 1
        end
        return groupingFactor
    end

    action CreateSortedSeriesList(DataFrameColumn col) returns HashTable<text, Series>
        HashTable<text, Series> seriesFactor

        DataFrameColumn seriesNames = col:Copy(true,true)

        integer i = 0
        repeat while i < seriesNames:GetSize()
            if(not seriesFactor:HasKey(seriesNames:GetAsText(i)))
                Series series
                series:SetName(seriesNames:GetAsText(i))
                seriesFactor:Add(seriesNames:GetAsText(i), series)
            end
            i = i + 1
        end
        return seriesFactor
    end

    action CalculateValueSet(DataFrameColumn column) returns Array<text>
        Array<text> values
        integer groupCount = 0
        HashTable<text, text> nameHash
        integer size = column:GetSize()
        boolean hasUndefined = false
        i = 0
        repeat while i < size
            //just keep track of the fact that we have undefined values
            if column:IsUndefined(i)
                hasUndefined = true
            else
                text name = column:GetAsText(i)
                if not nameHash:HasKey(name)
                    nameHash:Add(name, name)
                end
            end
            
            i = i + 1
        end
          
        return values
    end

    action GetComparison returns Comparison
        return comparison
    end

    action SetComparison(Comparison comparison)
        me:comparison = comparison
    end
end