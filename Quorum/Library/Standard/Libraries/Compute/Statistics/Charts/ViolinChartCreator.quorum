package Libraries.Compute.Statistics.Charts

use Libraries.Compute.Statistics.DataFrameChartCreator
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Calculations.Summarize
use Libraries.Compute.Math
use Libraries.Compute.Vector
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Charts.ViolinChart
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Interface.Controls.Charts.ViolinChart
use Libraries.Compute.Statistics.Analysis.UnivariateAction

/*
    This class is used to create a Violin Chart from columns(at most 3) of data in a DataFrame.
    It combines a box and whisker graph and a normal distribution graph. The max value on 
    y-axis is based on the max value of all columns. X-axis is devided equally to holds at most 3 
    violin chart with labels of each column.

    Attribute: Author Silafu Yiliyaer
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Charts.ViolinChartCreator

    //Create a ViolinChart and set some properties
    DataFrame frame
    frame:Load("Data/Data.csv")

    ViolinChartCreator creator
    creator:AddColumn(1)

    SigmoidAction act
    creator:SetWindowingAction(act)

    ViolinChart chart = frame:CreateChart(creator)
    chart:SetTitle("Violin Chart")
    chart:SetYAxisTitle("Y-values")
    chart:SetXAxisTitle("X-Values")
    chart:SetBandWidth(10)
*/
class ViolinChartCreator is DataFrameChartCreator, ColumnInput
    private integer bandWidth = 0
    //y axis tick number, by defalut is 5
    private integer yTicks = 5
    UnivariateAction window = undefined

    action Create(DataFrame frame) returns Chart
        //only 3 violin graph in one chart
        ViolinChart chart
        if GetColumnSize() = 0
            alert("Must define at least one column.")
        end

        //initial datasets for graphing
        //1.find the largest number from these dataframes
        //2.Calculate the needed values for box and whiksers from each dataframe
        //3.Store all name from each dataframe
        //4.Store all data
        Array<text> colNames
        Array<Array<number>> infos
        Array<Vector> dataSets
        number largest = 0 
        integer i = 0
        repeat while i < GetColumnSize()
            DataFrameColumn dataFrame = frame:GetColumn(GetColumn(i))
            if dataFrame = undefined and dataFrame:CanConvertToVector()
                alert("Could not find a column number " + GetColumn(i))
            end
            if dataFrame:CanConvertToVector() = false
                alert("Could not convert valuse a column number " + GetColumn(i) + "to a vector")
            end
            //1
            Summarize sum
            sum:Calculate(dataFrame)
            if largest < sum:GetMaximum()
                largest = sum:GetMaximum()
            end
            //2
            Vector dataset = dataFrame:ConvertToVector()
            dataset:Sort()
            infos:Add(Calculations(dataset))
            //3
            colNames:Add(dataFrame:GetHeader())
            //4
            dataSets:Add(dataset)
            i = i + 1
        end

        //Use the default windowing action (Kernel) if undefined
        if window not= undefined
            chart:SetWindowingAction(window)
        end
        chart:SetChartInfos(infos)
        chart:SetXAxisLabels(colNames)
        chart:SetBandWidth(bandWidth)
        chart:SetData(dataSets)
        chart:SetYTickCount(yTicks)
        chart:SetYMax(largest)
        return chart
    end

    /*
    This action returns how many scale ticks should be used along the Y axis of the LineChart.
    By default, this value is 5.

    Attribute: Returns The number of ticks along the Y axis of the LineChart.
    */
    action GetYTickCount returns integer
        return yTicks
    end

    /*   This action sets how many scale ticks should be used along the Y axis of the LineChart.
    By default, this value is 5.

    Attribute: Parameter yTicks How many ticks should be used along the Y axis of the LineChart.
    */
    action SetYTickCount(integer yTicks)
        me:yTicks = yTicks
    end
    
    //interval number
    action SetBandWidth(integer num)
        bandWidth = num
    end

    /*   This action calculates the median, lower quartile, upper quartile, largest and smallest
    values to form a box and whisker graph. 

    It then returns an Array that stores all the informations listed above
    */
    action Calculations(Vector dataset) returns Array<number>                
        number median = 0
        number lowerMedian = 0
        number upperMedian = 0
        number smallest = 0
        number largest = 0
        integer lowerIndex = 0
        integer upperIndex = 0
        Array<number> info
        
        //Get median of the full dataset
        info = GetMedian(dataset:GetSize()-1,0,0,dataset)
        median = info:Get(0)
        lowerIndex = cast(integer,info:Get(1))
        upperIndex = cast(integer,info:Get(2))
        //Get median from the lower half
        info = GetMedian(lowerIndex,0,0,dataset)
        lowerMedian = info:Get(0)
        //Get median from the upper half
        info = GetMedian(dataset:GetSize()-1,upperIndex,upperIndex,dataset)
        upperMedian = info:Get(0)
        //Find outliers and exclude them
        number iqr = upperMedian-lowerMedian
        number lowerRange = lowerMedian - iqr*1.5
        number upperRange = upperMedian + iqr*1.5
        boolean find = false
        integer index = 0
        repeat while find = false
            if dataset:Get(index)>lowerRange
                smallest = dataset:Get(index)
                find = true
            end
            if index = lowerIndex
                find = true
            end
            index = index+1
        end
        find = false
        index = dataset:GetSize()-1
        repeat while find = false
            if dataset:Get(index)<upperRange
                largest = dataset:Get(index)
                find = true
            end
            if index = upperIndex
                find = true
            end
            index = index-1
        end
        Array<number> myData
        myData:Add(median)
        myData:Add(lowerMedian)
        myData:Add(upperMedian)
        myData:Add(smallest)
        myData:Add(largest)
        return myData
    end

    action GetMedian(integer upperIndex, integer lowerIndex, integer span,Vector dataset) returns Array<number>
        Array<number> info
        integer count = upperIndex-lowerIndex+1
        integer medianIndex = 0
        number median = 0
        if count mod 2 >0
            medianIndex = (count+1)/2-1+span
            median = dataset:Get(medianIndex)
            lowerIndex = medianIndex-1
            upperIndex = medianIndex+1
        else
            medianIndex = count/2-1+span
            median = (dataset:Get(medianIndex)+dataset:Get(medianIndex+1))/2
            lowerIndex = medianIndex
            upperIndex = medianIndex+1
        end
        info:Add(median)
        info:Add(lowerIndex)
        info:Add(upperIndex)
        return info
    end

    action GetWindowingAction returns UnivariateAction
        return window
    end

    action SetWindowingAction(UnivariateAction window)
        me:window = window
    end
end