package Libraries.Compute.Statistics.Charts

use Libraries.Compute.Statistics.DataFrameChartCreator
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Inputs.FactorInput
use Libraries.Compute.Statistics.Calculations.Summarize

use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Containers.Support.Comparison

use Libraries.Interface.Controls.Charts.Chart
use Libraries.Interface.Controls.Charts.PieChart
use Libraries.Interface.Controls.Charts.Series
use Libraries.Interface.Controls.Charts.Graphics.Wedge
use Libraries.Compute.Statistics.Columns.DateTimeColumn

/*
    This class is used to create a Pie Chart from columns of data in a DataFrame.
    There are three ways to make a pie chart from the data frame using this class:
        1. One column or one factor: Each unique item will have its own wedge using its frequency as the value.
        2. More than one column without a factor: Each column will have its own wedge using its sum as the value. 
        3. One or more columns with a factor: Sum of all values associated with each factor will be in one wedge.
    
    Attribute: Author Hannah Williams
    Attribute: Example
    
    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Charts.PieChart
    
    DataFrame frame
    frame:Load("Data/Data.csv")
    frame:AddSelectedFactors("Factor")
    frame:AddSelectedColumns("Numerical Column")
    
    PieChart chart = frame:PieChart()
    chart:Display(1200,1000)
*/
class PieChartCreator is DataFrameChartCreator, ColumnInput, FactorInput
    Comparison comparison = undefined

    action Create(DataFrame frame) returns Chart
        integer columns = GetColumnSize()
        integer factors = GetFactorSize()

        if columns = 0 and factors = 1 
            DataFrameColumn factor = frame:GetColumn(GetFactor(0))
            return CreateChartByCount(factor) 
        elseif columns = 1 and factors = 0
            DataFrameColumn column = frame:GetColumn(GetColumn(0))
            return CreateChartByCount(column)
        elseif columns > 1 and factors = 0 
            return CreateChartBySum(frame)
        elseif columns >= 1 and factors = 1
            return CreateChart(frame) //perhaps make side by side pie charts?? 
        else
            alert("PieChartCreator does not support the number of column/factors that were selected")
        end
        return undefined
    end

    /*
        This action is used by Create to create wedges based on each unique item.
        The wedge value will be the number of times that item is seen in the column.
        Each count and unique item will be saved as a wedge and a series for the legend.
    
        Attribute: Parameter column, the data to be counted.
    */
    private action CreateChartByCount(DataFrameColumn column) returns PieChart
        PieChart chart

        chart:SetTitle(column:GetHeader())

        boolean dateFactor = false
        boolean numericalFactor = false
        HashTable<text, integer> hash

        Array <text> seriesNames 
        if column:IsDateTimeColumn()
            dateFactor = true
            DateTimeColumn dates = cast(DateTimeColumn, column:Copy(true, false))
            integer i = 0 
            repeat while i < dates:GetSize()
                if hash:HasKey(dates:GetAsText(i))
                    hash:Add(dates:GetAsText(i), hash:GetValue(dates:GetAsText(i)) + 1)
                else
                    seriesNames:Add(dates:GetAsText(i))
                    hash:Add(dates:GetAsText(i), 1)
                end
                i = i + 1
            end
        else
            if column:IsNumberColumn()
                numericalFactor = true
            end
            DataFrameColumn labels = column:Copy(true, false)
            integer i = 0 
            repeat while i < labels:GetSize()
                if hash:HasKey(labels:GetAsText(i))
                    hash:Add(labels:GetAsText(i), hash:GetValue(labels:GetAsText(i)) + 1)
                else
                    seriesNames:Add(labels:GetAsText(i))
                    hash:Add(labels:GetAsText(i), 1)
                end
                i = i + 1
            end
        end

        Array <Series> seriesList
        i = 0 
        repeat while i < seriesNames:GetSize()
            text name = seriesNames:Get(i)
            integer value = hash:GetValue(name)

            Wedge wedge
            wedge:SetName(name)
            wedge:SetValue(value)
            chart:AddSlice(wedge)

            Series series
            series:SetName(name)
            series:AddItem(wedge)
            seriesList:Add(series)
            i = i + 1
        end

        chart:SetSeriesList(seriesList)
        SetScale(chart, 0, 1, 0, 1)
        return chart
    end

    /*
        This action is used by Create to create wedges based on each column.
        The wedge value will be the sum of all values in that column.
        Because it relies on numerical data it will error if text columns are given.
        Each column is saved as a series and a wedge.
    
        Attribute: Parameter frame (with multiple columns and no factors)
    */
    private action CreateChartBySum(DataFrame frame) returns PieChart
        PieChart chart
        integer columns = GetColumnSize()

        HashTable<text, Wedge> sliceFactor

        integer i = 0
        repeat while i < columns
            DataFrameColumn column = frame:GetColumn(GetColumn(i))
            if not column:IsNumberColumn()
                alert("PieChartCreator does not support multiple columns when a text column is used. Text columns can be used alone or used as a factor.")
                return undefined
            end
            if not column:CanConvertToVector()
                alert("Could not covert values in " + GetColumn(i)+ " to vector")
            end

            Summarize sum
            sum:Calculate(column)
            sum:GetSum()

            if not sliceFactor:HasKey(column:GetHeader())
                Wedge slice
                slice:SetName(column:GetHeader())
                slice:SetValue(sum:GetSum())
                sliceFactor:Add(column:GetHeader(), slice)
            end
            i = i + 1
        end

        // Sort and add the series
        Array <Series> seriesList
        Array<text> seriesKeyArray = sliceFactor:CopyToKeyArray()
        if comparison = undefined
            seriesKeyArray:Sort()
        else
            seriesKeyArray:Sort(comparison)
        end
        i = 0
        repeat while i < seriesKeyArray:GetSize()
            Series series
            series:SetName(seriesKeyArray:Get(i))
            series:AddItem(sliceFactor:GetValue(seriesKeyArray:Get(i)))
            seriesList:Add(series)
            chart:AddSlice(sliceFactor:GetValue(seriesKeyArray:Get(i)))
            i = i + 1
        end

        chart:SetSeriesList(seriesList)
        SetScale(chart, 0, 1, 0, 1)
        return chart
    end

    /*
        This action is used by Create to create wedges based on a factor across one or more columns
        The wedge value will be the sum of all values associated with that factor.
        Because it relies on numerical data it will error if text columns are given.
        However, the factor can be text or numerical.
        Each factor is saved as a series and a wedge.
    
        Attribute: Parameter frame (one or more columns and one factor)
    */
    private action CreateChart(DataFrame frame) returns PieChart
        PieChart chart
        integer columns = GetColumnSize()

        HashTable<text, Wedge> sliceFactor

        boolean dateFactor = false
        boolean numericalFactor = false

        DataFrameColumn factor = frame:GetColumn(GetFactor(0))

        Array <text> seriesNames 
        if factor:IsDateTimeColumn()
            dateFactor = true
            DateTimeColumn dates = cast(DateTimeColumn, factor:Copy(true, false))
            integer i = 0 
            repeat while i < dates:GetSize()
                if not dates:IsUndefined(i)
                    if not sliceFactor:HasKey(dates:GetAsText(i))
                        Wedge slice
                        slice:SetName(dates:GetAsText(i))
                        seriesNames:Add(dates:GetAsText(i))
                        sliceFactor:Add(dates:GetAsText(i), slice)
                    end
                end
                i = i + 1
            end
        else
            if factor:IsNumberColumn()
                numericalFactor = true
            end
            DataFrameColumn labels = factor:Copy(true, false)
            integer i = 0 
            repeat while i < labels:GetSize()
                if not labels:IsUndefined(i)
                    if not sliceFactor:HasKey(labels:GetAsText(i))
                        Wedge slice
                        slice:SetName(labels:GetAsText(i))
                        seriesNames:Add(labels:GetAsText(i))
                        sliceFactor:Add(labels:GetAsText(i), slice)
                    end
                end
                i = i + 1
            end
        end

        i = 0
        repeat while i < columns
            DataFrameColumn column = frame:GetColumn(GetColumn(i))
            if not column:IsNumberColumn()
                alert("PieChartCreator does not support text columns when using a factor.")
                return undefined
            end
            if not column:CanConvertToVector()
                alert("Could not covert values in " + GetColumn(i) + " to vector")
            end
            integer j = 0
            repeat while j < column:GetSize()
                if not column:IsUndefined(j) and not factor:IsUndefined(j)
                    number value = column:GetAsNumber(j)
                    number oldValue = sliceFactor:GetValue(factor:GetAsText(j)):GetValue()
                    sliceFactor:GetValue(factor:GetAsText(j)):SetValue(oldValue + value)
                end
                j = j + 1
            end            
            i = i + 1
        end

        // Add the series
        Array <Series> seriesList
        i = 0
        repeat while i < seriesNames:GetSize()
            Series series
            series:SetName(seriesNames:Get(i))
            series:AddItem(sliceFactor:GetValue(seriesNames:Get(i)))
            seriesList:Add(series)
            chart:AddSlice(sliceFactor:GetValue(seriesNames:Get(i)))
            i = i + 1
        end

        chart:SetSeriesList(seriesList)
        SetScale(chart, 0, 1, 0, 1)
        return chart
    end    

    /*
        This sets the initial scale for the x and y axis.
        PieChart does not show the x and y axis by default.
    */
    private action SetScale(PieChart chart, number ymin, number ymax, number xmin, number xmax)
        chart:GetVerticalPanel():SetMinimum(ymin)
        chart:GetVerticalPanel():SetMaximum(ymax)
        chart:GetHorizontalPanel():SetMinimum(xmin)
        chart:GetHorizontalPanel():SetMaximum(xmax)
    end
end

