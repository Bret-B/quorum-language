package Libraries.Compute.Statistics.Distributions
use Libraries.Compute.Math

/*
    This represents a normal (guassian) distribution. More information can be found at:

    http://en.wikipedia.org/wiki/Normal_distribution

    This is a port of Apache Commons.
    
    Attribute: Example
    use Libraries.Compute.Statistics.Distributions.NormalDistribution
    NormalDistribution distribution
    
    //should output approximately
    //0.0000002866515719
    output distribution:CumulativeDistribution(-5)
*/
class NormalDistribution is NumberDistribution
    constant number DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1.0e-9
    number solverAbsoluteAccuracy = DEFAULT_INVERSE_ABSOLUTE_ACCURACY
    number mean = 0
    number standardDeviation = 1.0

    action GetLowerBound returns number
        return mean:GetNegativeInfinityValue()
    end

    action GetUpperBound returns number
        return mean:GetPositiveInfinityValue()
    end

    action GetMean returns number
        return mean
    end

    action GetVariance returns number
        return standardDeviation * standardDeviation
    end

    /*
        For a random variable {@code X} whose values are distributed according
        to this distribution, this method returns P(X <= x). In other
        words, this method represents the (cumulative) distribution function
        (CDF) for this distribution.
             
        Attribute: Parameter x the point at which the CDF is evaluated
        Attribute: Returns the probability that a random variable with this
                   distribution takes a value less than or equal to x
    */
    action CumulativeDistribution(number x) returns number
        number dev = x - mean
        Math math

        //Basically, 40 standard deviations is extreme, so just return 1 or 0 at that point
        if math:AbsoluteValue(dev) > 40 * standardDeviation
            if dev < 0
                return 0
            else
                return 1
            end
        end

        number gammaX = -dev / (standardDeviation * math:squareRoot2)
        Gamma gamma
        number ret = gamma:RegularizedGammaQ(0.5, gammaX * gammaX, gamma:DEFAULT_EPSILON, 10000)
        if x < 0
            ret = 2 - ret
        end
        return 1 - (0.5 * ret)
    end

    /*  This action overrides the standard Inverse Cumulative Distribution action to one
        specifically for normal distributions. To do this it uses the inverse 
        calculation from 

        http://people.maths.ox.ac.uk/gilesm/files/gems_erfinv.pdf

        Approximating the erfinv function</a> by Mike Giles, 
        Oxford-Man Institute of Quantitative Finance,
        which was published in GPU Computing Gems, volume 2, 2010.

        Attribute: Parameter p the p-value to approximate from.

        Attribute: Returns an estimate of the number that would return the probability.
    */
    action InverseCumulativeDistribution(number p)  returns number
        if p < 0.0 or p > 1.0
            alert("Cannot have a probability greater than 1 or less than 0")
        end

        Math math
        number ret = mean + standardDeviation * math:squareRoot2

        ErrorAction act
        number otherX = 2 * p - 1
        return ret * act:InverseError(otherX)
    end

    action IsSupportConnected returns boolean
        return true
    end

    action GetSolverAbsoluteAccuracy returns number
        return solverAbsoluteAccuracy
    end
end