package Libraries.Compute.Statistics.Distributions

use Libraries.Compute.Math
use Libraries.Containers.Array

/*
    This class is an implementation of the Studentized-Range-Distribution.
    It was partially adapted from the same model in FORTRAN
    More information can be found here: https://en.wikipedia.org/wiki/Studentized_range_distribution
*/
class StudentizedRangeDistribution is NumberDistribution
    constant number DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1.0e-9
    number solverAbsoluteAccuracy = DEFAULT_INVERSE_ABSOLUTE_ACCURACY
    number degreesOfFreedom = 0.0
    number numberOfMeans = 0
    number utility = 0.0
    NormalDistribution norm
    Gamma gamma
    Math math

    // Used in CDF function
    number pcutj = 0.00003
    number pcutk = 0.0001
    number step = 0.45
    number vmax = 120.0 
    number cv1 = 0.193064705
    number cv2 = 0.293525326
    number cvmax = 0.39894228
    Array<number> cv

    // Used in Inverse CDF fucntion 
    number eps = 1.0e-4
    integer maxIterations = 50

    on create
        cv:Add(0.318309886)
        cv:Add(-0.268132716e-2)
        cv:Add(0.347222222e-2)
        cv:Add(0.833333333e-1)
    end
    

    action Setup(number numberOfMeans, number degreesOfFreedom)
        if degreesOfFreedom < 1
            alert("Cannot compute a studentized-range-distribution with a degree of freedom value of " + degreesOfFreedom)
        end
        if numberOfMeans < 2
            alert("Cannot compute a studentized-range-distribution with only " + numberOfMeans + " means.")
        end

        me:degreesOfFreedom = degreesOfFreedom
        me:numberOfMeans = numberOfMeans
    end

    /* 
        It is a Quorum implmentation of the Fortran code from Applied Statistics
        Evaluates the probability from 0 to q for a studentized
        range having v degrees of freedom and r samples.

        See Algorithm AS 190 - 1985 Edition
        http://bayanbox.ir/view/3820206914900746365/StatLab-Applied-Statistics-Algorithms.pdf
    */
    action CumulativeDistribution(number q) returns number
        integer jmin = 3
        integer jmax = 15
        integer kmin = 7
        integer kmax = 15
        Array<number> vw
        Array<number> qw

        // Fill with zeros
        i = 0
        repeat while i <= 30
            qw:Add(0)
            vw:Add(0)
            i = i + 1
        end

        number prtrng = 0
        number v = degreesOfFreedom
        number r = numberOfMeans

        // Check initial values
        if not (v < 1 or r < 2 or q <= 0)

            // Compute constants, local midpoint, adjust steps
            number g = step * math:RaiseToPower(r, -0.2)
            number gmid = 0.5 * math:NaturalLogarithm(r)
            number r1 = r - 1.0
            number c = math:NaturalLogarithm(r * g * cvmax)
            number h = 0
            number v2 = 0

            if v <= vmax
                h = step * math:RaiseToPower(v, -0.5)
                v2 = v * 0.5
                if v = 1
                    c = cv1
                elseif v = 2
                    c = cv2
                else
                    c = math:SquareRoot(v2) * cv:Get(0) / (1.0 + ((cv:Get(1) / v2 + cv:Get(2)) / v2 + cv:Get(3)) / v2)
                end
                c = math:NaturalLogarithm(c * r * g * h)
            end

            // Compute integral
            number gk = 0
            number pk = 0
            number pz = 0
            number pj = 0
            number x = 0
            number w0 = 0
            integer jump = 0
            integer jj = 0
            number hj = 0
            number ehj = 0
    
            boolean loop21 = false
            boolean loop22 = false

            number gstep = g
            qw:Set(1, -1.0) 
            qw:Set(jmax + 1, -1.0) 
            number pk1 = 1.0
            number pk2 = 1.0
            integer k = 1
            repeat while k <= kmax
                gstep = gstep - g
                loop21 = true
                repeat while loop21
                    gstep = -gstep
                    gk = gmid + gstep
                    pk = 0 
                    if not (pk2 <= pcutk and k > kmin)
                        w0 = c - gk * gk * 0.5
                        pz = 1.0 - norm:CumulativeDistribution(gk)
                        x = 1.0 - norm:CumulativeDistribution(gk - q) - pz
                        if x > 0
                            pk = math:RaiseNaturalNumberToPower(w0 + r1 * math:NaturalLogarithm(x))
                        end
                        if not (v > vmax)
                            jump = -jmax
                            loop22 = true
                            repeat while loop22
                                jump = jump + jmax
                                integer j = 1
                                repeat while j <= jmax
                                    jj = j + jump
                                    if not (qw:Get(jj) > 0)
                                        hj = h * j
                                        if j > jmax
                                            qw:Set(jj + 1, -1.0) 
                                        end
                                        ehj = math:RaiseNaturalNumberToPower(hj)
                                        qw:Set(jj, q * ehj)
                                        vw:Set(jj, v * (hj + 0.5 - ehj * ehj * 0.5))
                                    end
                                    pj = 0
                                    x = 1.0 - norm:CumulativeDistribution(gk - qw:Get(jj)) - pz
                                    if x > 0
                                        pj = math:RaiseNaturalNumberToPower(w0 + vw:Get(jj) + r1 * math:NaturalLogarithm(x))
                                    end
                                    pk = pk + pj
                                    if not (pj > pcutj)
                                        if jj > jmin or k > kmin
                                            j = jmax + 1
                                        end
                                    end
                                    j = j + 1
                                end
                                h = -h
                                loop22 = h < 0
                            end
                        end
                    end
                    prtrng = prtrng + pk
                    if k > kmin and pk <= pcutk and pk1 <= pcutk
                        k = kmax + 1
                        loop21 = false
                    else
                        pk2 = pk1
                        pk1 = pk
                        loop21 = gstep > 0 
                    end
                end
                k = k + 1
            end
        end
        return prtrng
    end

    /* 
        This action is a Quorum implmentation of the Fortran code from Applied Statistics
        Approximates the quantile p for a studentized range
        distribution having v degrees of freedom and r samples
        for probability p.

        See Algorithm AS 190.1 - 1985 Edition
        http://bayanbox.ir/view/3820206914900746365/StatLab-Applied-Statistics-Algorithms.pdf
        ALSO
        See Secant Method
        https://en.wikipedia.org/wiki/Secant_method

        The result from this action is accurate to the 4th decimal place.
    */
    action InverseCumulativeDistribution(number p)  returns number
        if p < 0.0 or p > 1.0
            alert("Cannot have a probability greater than 1 or less than 0")
        end
        
        number qtrng = 0
        number v = degreesOfFreedom
        number r = numberOfMeans

        // Check initial values
        if not (v < 1 or r < 2)
            number q1 = InitialInverseCumulativeDistribution(p)
            number p1 = CumulativeDistribution(q1)
            number q2 = 0
            number p2 = 0
    
            if p1 > p
                q2 = math:MaximumOf(p, q1 - 1.0) 
            else
                q2 = q1 + 1.0
            end
            p2 = CumulativeDistribution(q2)

            integer i = 1
            repeat while i < maxIterations
                qtrng = q2 - ((p2 * (q2 - q1)) / (p2 - p1))
                p1 = p2
                q1 = q2
                if qtrng < 0
                    qtrng = 0
                    p2 = -p
                end

                p2 = CumulativeDistribution(qtrng) - p
                q2 = qtrng

                if math:AbsoluteValue(q2 - q1) < eps
                    return qtrng
                end
                i = i + 1
            end
            alert("Maximum iterations exceeded. Did not converge.")
        end
        return qtrng
    end

    /* 
        This action is a Quorum implmentation of the Fortran code from Applied Statistics
        Calculates an initial quantile p for a studentized range
        distribution having v degrees of freedom and r samples
        for probability p

        This action is a combination of the following algorithms in order to get a more 
        accurate approximation across all p/alpha values.

        See Algorithm AS 190.2 - 1985 Edition
        http://bayanbox.ir/view/3820206914900746365/StatLab-Applied-Statistics-Algorithms.pdf
        ALSO
        See Algorithm AS 70 - 1974 Edition
        https://www.jstor.org/stable/2347061?origin=crossref&seq=2#page_scan_tab_contents
        ALSO
        See Algorithm AS 111 - 1985 Edition
        http://bayanbox.ir/view/3820206914900746365/StatLab-Applied-Statistics-Algorithms.pdf
    */
    private action InitialInverseCumulativeDistribution(number p) returns number
        number p0 = 0.322232421088
        number q0 = 0.993484626060e-1
        number p1 = -1.0
        number q1 = 0.588581570495
        number p2 = -0.342242088547
        number q2 = 0.531103462366
        number p3 = -0.204231210125
        number q3 = 0.103537752850
        number p4 = -0.453642210148e-4
        number q4 = 0.38560700634e-2

        number c1 = 0.8832
        number c2 = 0.2368
        number c3 = 1.214
        number c4 = 1.208
        number c5 = 1.4142

        number qtrng0 = 0
        number v = degreesOfFreedom
        number r = numberOfMeans
        number ps = 0.5 - 0.5 * p
        number yi = math:SquareRoot(math:NaturalLogarithm(1.0 / (ps * ps)))
        number t = yi + ((((yi * p4 + p3) * yi + p2) * yi + p1) * yi + p0) / ((((yi * q4 + q3) * yi + q2) * yi + q1) * yi + q0)
        if v < vmax
            t = t + (t * t * t + t) / v / 4.0
        end
        qtrng0 = c1 - c2 * t
        if v < vmax
            qtrng0 = qtrng0 + (-c3 / v + c4 * t / v)
        end
        qtrng0 = t * (qtrng0 * math:NaturalLogarithm(r - 1.0) + c5)
        return qtrng0
    end

    action GetDegreesOfFreedom() returns number
        return degreesOfFreedom
    end

    action GetNumberOfMeans returns number
        return numberOfMeans
    end

    action GetSupportLowerBound() returns number
        return utility:GetNegativeInfinityValue()
    end

    action GetSupportUpperBound() returns number
        return utility:GetPositiveInfinityValue()
    end

    action IsSupportLowerBoundInclusive() returns boolean
        return false
    end

    action IsSupportUpperBoundInclusive() returns boolean
        return false
    end

    action IsSupportConnected() returns boolean
        return true
    end

    action GetSolverAbsoluteAccuracy() returns number
        return solverAbsoluteAccuracy
    end

    action GetLowerBound returns number
        return utility:GetNegativeInfinityValue()
    end

    action GetUpperBound returns number
        return utility:GetPositiveInfinityValue()
    end

    action GetMean returns number
        return utility:GetNotANumberValue()
    end

    action GetVariance returns number
        return utility:GetNotANumberValue()
    end
end