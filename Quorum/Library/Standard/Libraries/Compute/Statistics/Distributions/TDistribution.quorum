package Libraries.Compute.Statistics.Distributions

use Libraries.Compute.Math

/*
    This class, ported from Apache Commons, is an implementation of the T-Distribution.
    More information can be found here: https://en.wikipedia.org/wiki/Student%27s_t-distribution
*/
class TDistribution
    constant number DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 0.000000001
    number degreesOfFreedom = 0.0
    number solverAbsoluteAccuracy = 0.0
    number factor = 0.0
    number utility = 0.0
    Beta beta
    Math math

    action Setup(number degreesOfFreedom)
        if degreesOfFreedom <= 0
            alert("Cannot compute a t-distribution with a degree of freedom value of " + degreesOfFreedom)
        end

        me:degreesOfFreedom = degreesOfFreedom
        me:solverAbsoluteAccuracy = DEFAULT_INVERSE_ABSOLUTE_ACCURACY

        constant number n = degreesOfFreedom
        constant number nPlus1Over2 = (n + 1) / 2

        Gamma gamma
        me:factor = gamma:LogGamma(nPlus1Over2) - 
            0.5 * (math:Logarithm(math:pi) + math:Logarithm(n)) - 
            gamma:LogGamma(n / 2)
    end

    action GetDegreesOfFreedom() returns number
        return degreesOfFreedom
    end

    /** {@inheritDoc} */
    action Density(number x) returns number
        return math:RaiseNaturalNumberToPower(LogDensity(x))
    end

    /** {@inheritDoc} */
    action LogDensity(number x) returns number
        number n = degreesOfFreedom
        number nPlus1Over2 = (n + 1) / 2
        return factor - nPlus1Over2 * math:NaturalLogarithm(1 + x * x / n)
    end

    action CumulativeProbability(number x) returns number
        number ret = 0.0
        if x = 0.0
            ret = 0.5
        else
            number t = beta:RegularizedBeta(
                    degreesOfFreedom / (degreesOfFreedom + (x * x)),
                    0.5 * degreesOfFreedom,
                    0.5)

            if x < 0.0
                ret = 0.5 * t
            else
                ret = 1.0 - 0.5 * t
            end
        end
        return ret
    end

    /**
     * {@inheritDoc}
     *
     * The lower bound of the support is always negative infinity no matter the
     * parameters.
     *
     * @return lower bound of the support (always
     * {@code Double.NEGATIVE_INFINITY})
     */
    action GetSupportLowerBound() returns number
        return utility:GetNegativeInfinityValue()
    end

    /**
     * {@inheritDoc}
     *
     * The upper bound of the support is always positive infinity no matter the
     * parameters.
     *
     * @return upper bound of the support (always
     * {@code Double.POSITIVE_INFINITY})
     */
    action GetSupportUpperBound() returns number
        return utility:GetPositiveInfinityValue()
    end

    /** {@inheritDoc} */
    action IsSupportLowerBoundInclusive() returns boolean
        return false
    end

    /** {@inheritDoc} */
    action IsSupportUpperBoundInclusive() returns boolean
        return false
    end

    /**
     * {@inheritDoc}
     *
     * The support of this distribution is connected.
     *
     * @return {@code true}
     */
    action IsSupportConnected() returns boolean
        return true
    end

    /** {@inheritDoc} */
    //@Override
    action GetSolverAbsoluteAccuracy() returns number
        return solverAbsoluteAccuracy
    end

    /**
     * {@inheritDoc}
     *
     * For degrees of freedom parameter {@code df}, the mean is
     * <ul>
     *  <li>if {@code df > 1} then {@code 0},</li>
     * <li>else undefined ({@code Double.NaN}).</li>
     * </ul>
     */
    action GetNumericalMean() returns number
        number df = GetDegreesOfFreedom()

        if df > 1
            return 0.0
        end

        return utility:GetNotANumberValue()
    end

    /**
     * {@inheritDoc}
     *
     * For degrees of freedom parameter {@code df}, the variance is
     * <ul>
     *  <li>if {@code df > 2} then {@code df / (df - 2)},</li>
     *  <li>if {@code 1 < df <= 2} then positive infinity
     *  ({@code Double.POSITIVE_INFINITY}),</li>
     *  <li>else undefined ({@code Double.NaN}).</li>
     * </ul>
     */
    action GetNumericalVariance() returns number
        number df = GetDegreesOfFreedom()

        if df > 2 
            return df / (df - 2)
        end

        if df > 1 and df <= 2
            return utility:GetPositiveInfinityValue()
        end

        return utility:GetNotANumberValue()
    end


end