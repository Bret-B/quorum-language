package Libraries.Compute.Statistics.Distributions
use Libraries.Compute.Math
use Libraries.Compute.Statistics.Analysis.CulumativeDistributionAction
use Libraries.Compute.Analysis.RootFinder
use Libraries.Compute.Statistics.Analysis.InverseCumulativeDistributionAction

/*
    This is a parent class of distributions that use real numbers as part of their
    distribution. It contains some default actions to assist in calculating probabilities
    and distributions. This is adapted from Apache Commons and NIST:
    
    https://www.itl.nist.gov/div898/handbook/eda/section3/eda362.htm
    
    Attribute: Author Andreas Stefik
*/
class NumberDistribution
    /*
      Access the lower bound of the support. This method must return the same
      value as InverseCumulativeProbability(0). In other words, this
      method must return
     
      Attribute: Returns lower bound of the support
     */
    blueprint action GetLowerBound returns number

    /*
      Access the lower bound of the support. This method must return the same
      value as InverseCumulativeProbability(1). In other words, this
      method must return
     
      Attribute: Returns upper bound of the support
     */
    blueprint action GetUpperBound returns number

    /*
        Returns the mean for this distribution.

        Attribute: Returns the mean
    */
    blueprint action GetMean returns number

    /*
        Returns the variance for this distribution.

        Attribute: Returns the variance
    */
    blueprint action GetVariance returns number

    /*
        For a random variable {@code X} whose values are distributed according
        to this distribution, this method returns P(X <= x). In other
        words, this method represents the (cumulative) distribution function
        (CDF) for this distribution.
             
        Attribute: Parameter x the point at which the CDF is evaluated
        Attribute: Returns the probability that a random variable with this
                   distribution takes a value less than or equal to x
    */
    blueprint action CumulativeDistribution(number p) returns number

    /*
        If this action returns true, then all values between the lower and upper bound are supported
        by this distribution.

        Attribute: Returns whether or not all values are supported
    */
    blueprint action IsSupportConnected returns boolean

    /*
        This action returns the current accuracy of the solving calculations. 
        These are used typically for the inverse calculations.

        Attribute: Returns the accuracy
    */
    blueprint action GetSolverAbsoluteAccuracy returns number

    /*
        This action is an implementation of the survival function, as described by 
        
        NIST/SEMATECH e-Handbook of Statistical Methods, http://www.itl.nist.gov/div898/handbook/, date.
        
        This action is equivalent to CumulativeDistribution(1 - p)
        
        https://www.itl.nist.gov/div898/handbook/eda/section3/eda362.htm
        
        Attribute: Returns the result of the survival function
    */
    action Survival(number p) returns number
        return CumulativeDistribution(1.0 - p)
    end

    /*
        This action is an implementation of the inverse survival function, as described by 
        
        NIST/SEMATECH e-Handbook of Statistical Methods, http://www.itl.nist.gov/div898/handbook/, date.
        
        This action is equivalent to InverseCumulativeDistribution(1 - p)
        
        https://www.itl.nist.gov/div898/handbook/eda/section3/eda362.htm
        
        Attribute: Returns the result of the survival function
    */
    action InverseSurvival(number p) returns number
        return InverseCumulativeDistribution(1.0 - p)
    end

    /*
        This action is an implementation of the Inverse Cumulative Distribution, which is also called the Percent Point Function. NIST describes this as 
        
        NIST/SEMATECH e-Handbook of Statistical Methods, http://www.itl.nist.gov/div898/handbook/, date.
        
        https://www.itl.nist.gov/div898/handbook/eda/section3/eda362.htm
        
        Attribute: Returns the result of the action
    */
    action InverseCumulativeDistribution(number p)  returns number
        if p < 0.0 or p > 1.0
            alert("The inverse probability passed must be between 0 and 1, inclusive.")
        end

        number lowerBound = GetLowerBound()
        if p = 0.0
            return lowerBound
        end
        
        number upperBound = GetUpperBound()
        if p = 1.0
            return upperBound
        end

        Math math
        number mu = GetMean()
        number sig = math:SquareRoot(GetVariance())
        boolean chebyshevApplies = not (mu:IsInfinite() or mu:IsNotANumber() or sig:IsInfinite() or sig:IsNotANumber())

        if lowerBound = mu:GetNegativeInfinityValue()
            if chebyshevApplies
                lowerBound = mu - sig * math:SquareRoot((1.0 - p) / p)
            else
                lowerBound = -1.0
                repeat while CumulativeDistribution(lowerBound) >= p
                    lowerBound = lowerBound * 2.0
                end
            end
        end

        if upperBound = mu:GetPositiveInfinityValue()
            if chebyshevApplies
                upperBound = mu + sig * math:SquareRoot(p / (1.0 - p))
            else
                upperBound = 1.0
                repeat while CumulativeDistribution(upperBound) < p
                    upperBound = upperBound * 2.0
                end
            end
        end

        InverseCumulativeDistributionAction act
        act:SetSubtractConstant(p)
        act:SetDistribution(me)

        //Apache commons uses a brent solver, which we call a root finder
        RootFinder solver
        solver:SetFunction(act)
        solver:SetMinimum(lowerBound)
        solver:SetMaximum(upperBound)
        solver:SetDefaultInitial()
        solver:SetAbsoluteAccuracy(GetSolverAbsoluteAccuracy())
        integer max = 0
        solver:SetMaxIterations(max:GetMaximumValue())
        number x = solver:Find()

        if IsSupportConnected()
            number dx = GetSolverAbsoluteAccuracy()
            if x - dx >= GetLowerBound()
                number px = CumulativeDistribution(x)
                if CumulativeDistribution(x - dx) = px
                    upperBound = x
                    repeat while upperBound - lowerBound > dx
                        number midPoint = 0.5 * (lowerBound + upperBound)
                        if CumulativeDistribution(midPoint) < px
                            lowerBound = midPoint
                        else
                            upperBound = midPoint
                        end
                    end
                    return upperBound
                end
            end
        end

        return x
    end
end