package Libraries.Compute.Statistics.Distributions

use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Calculations.GammaContinuedFraction

/*
    This class, ported from Apache Commons, is an implementation of the Gamma Distribution.
    More information can be found here: https://en.wikipedia.org/wiki/Gamma_distribution
*/
class Gamma 
    constant number GAMMA = 0.577215664901532860606512090082
    public number DEFAULT_EPSILON = 1.0e-14
    Math math
    constant number LANCZOS_G = 607.0 / 128.0
    constant number HALF_LOG_2_PI = 0.5 * math:NaturalLogarithm(2.0 * math:pi)
    /** The constant value of &radic;(2&pi;). */
    constant number SQRT_TWO_PI = 2.506628274631000502

    Array<number> lanczos

    /** The constant {@code A0} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_A0 = 0.611609510448141581788e-8

    /** The constant {@code A1} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_A1 = 0.624730830116465516210e-8

    /** The constant {@code B1} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_B1 = 0.203610414066806987300

    /** The constant {@code B2} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_B2 = 0.0266205348428949217746

    /** The constant {@code B3} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_B3 = 0.493944979382446875238e-3

    /** The constant {@code B4} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_B4 = -0.851419432440314906588e-5

    /** The constant {@code B5} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_B5 = -0.643045481779353022248e-5

    /** The constant {@code B6} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_B6 = 0.992641840672773722196e-6

    /** The constant {@code B7} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_B7 = -0.607761895722825260739e-7

    /** The constant {@code B8} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_B8 = 0.195755836614639731882e-9

    /** The constant {@code P0} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_P0 = 0.6116095104481415817861e-8

    /** The constant {@code P1} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_P1 = 0.6871674113067198736152e-8

    /** The constant {@code P2} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_P2 = 0.6820161668496170657918e-9

    /** The constant {@code P3} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_P3 = 0.4686843322948848031080e-10

    /** The constant {@code P4} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_P4 = 0.1572833027710446286995e-11

    /** The constant {@code P5} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_P5 = -0.1249441572276366213222e-12

    /** The constant {@code P6} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_P6 = 0.4343529937408594255178e-14

    /** The constant {@code Q1} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_Q1 = 0.3056961078365221025009

    /** The constant {@code Q2} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_Q2 = 0.05464213086042296536016

    /** The constant {@code Q3} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_Q3 = 0.004956830093825887312020

    /** The constant {@code Q4} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_Q4 = 0.2692369466186361192876e-3

    /** The constant {@code C} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_C = -0.422784335098467139393487909917598

    /** The constant {@code C0} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_C0 = 0.577215664901532860606512090082402

    /** The constant {@code C1} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_C1 = -0.655878071520253881077019515145390

    /** The constant {@code C2} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_C2 = -0.0420026350340952355290039348754298

    /** The constant {@code C3} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_C3 = 0.166538611382291489501700795102105

    /** The constant {@code C4} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_C4 = -0.0421977345555443367482083012891874

    /** The constant {@code C5} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_C5 = -0.00962197152787697356211492167234820

    /** The constant {@code C6} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_C6 = 0.00721894324666309954239501034044657

    /** The constant {@code C7} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_C7 = -0.00116516759185906511211397108401839

    /** The constant {@code C8} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_C8 = -0.215241674114950972815729963053648e-3

    /** The constant {@code C9} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_C9 = 0.128050282388116186153198626328164e-3

    /** The constant {@code C10} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_C10 = -0.201348547807882386556893914210218e-4

    /** The constant {@code C11} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_C11 = -0.125049348214267065734535947383309e-5

    /** The constant {@code C12} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_C12 = 0.113302723198169588237412962033074e-5

    /** The constant {@code C13} defined in {@code DGAM1}. */
    constant number INV_GAMMA1P_M1_C13 = -0.205633841697760710345015413002057e-6

    on create
       lanczos:Add(0.99999999999999709182)
       lanczos:Add(57.156235665862923517)
       lanczos:Add(-59.597960355475491248)
       lanczos:Add(14.136097974741747174)
       lanczos:Add(-0.49191381609762019978)
       lanczos:Add(0.33994649984811888699e-4)
       lanczos:Add(0.46523628927048575665e-4)
       lanczos:Add(-0.98374475304879564677e-4)
       lanczos:Add(0.15808870322491248884e-3)
       lanczos:Add(-0.21026444172410488319e-3)
       lanczos:Add(0.21743961811521264320e-3)
       lanczos:Add(-0.16431810653676389022e-3)
       lanczos:Add(0.84418223983852743293e-4)
       lanczos:Add(-0.26190838401581408670e-4)
       lanczos:Add(0.36899182659531622704e-5)
    end

    action Gamma(number x) returns number
        if x = math:RoundToNearestInteger(x) and x <= 0.0
            return x:GetNotANumberValue()
        end

        number ret = 0.0
        number absX = math:AbsoluteValue(x)

        if absX <= 20.0
            if x >= 1.0
                /*
                 * From the recurrence relation
                 * Gamma(x) = (x - 1) * ... * (x - n) * Gamma(x - n),
                 * then
                 * Gamma(t) = 1 / [1 + invGamma1pm1(t - 1)],
                 * where t = x - n. This means that t must satisfy
                 * -0.5 <= t - 1 <= 1.5.
                 */
                number prod = 1.0
                number t = x
                repeat while t > 2.5
                    t = t - 1.0
                    prod = prod * t
                end
                ret = prod / (1.0 + InvGamma1pm1(t - 1.0))
            else 
                /*
                 * From the recurrence relation
                 * Gamma(x) = Gamma(x + n + 1) / [x * (x + 1) * ... * (x + n)]
                 * then
                 * Gamma(x + n + 1) = 1 / [1 + invGamma1pm1(x + n)],
                 * which requires -0.5 <= x + n <= 1.5.
                 */
                number prod = x
                number t = x
                repeat while t < -0.5
                    t = t + 1.0
                    prod =  prod * t
                end
                ret = 1.0 / (prod * (1.0 + InvGamma1pm1(t)))
            end
        else
            number y = absX + LANCZOS_G + 0.5
            number gammaAbs = SQRT_TWO_PI / absX *
                math:RaiseToPower(y, absX + 0.5) *
                math:RaiseNaturalNumberToPower(-y) * Lanczos(absX)

            if x > 0.0
                ret  = gammaAbs
            else
                /*
                 * From the reflection formula
                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,
                 * and the recurrence relation
                 * Gamma(1 - x) = -x * Gamma(-x),
                 * it is found
                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].
                 */
                ret = -math:pi / (x * math:Sine(math:pi * x) * gammaAbs)
            end
        end

        return ret
    end

    /*
        Computes the function ln(Gamma(x)). This is adapted from Apache Commons.
     
        The implementation is based on:
        <ul>
        <li><a href="http://mathworld.wolfram.com/GammaFunction.html">Gamma
            Function</a>, equation (28).</li>
        <li><a href="http://mathworld.wolfram.com/LanczosApproximation.html">
            Lanczos Approximation</a>, equations (1) through (5).</li>
        <li><a href="http://my.fit.edu/~gabdo/gamma.txt">Paul Godfrey, A note on
            the computation of the convergent Lanczos complex Gamma
            approximation</a></li>
        </ul>

        Attribute: Parameter x the value.
        Attribute: Returns the log gamma function ln(Gamma(x))
    */
    action LogGamma(number x) returns number
        number ret = 0

        if x:IsNotANumber() or x <= 0.0
            return x:GetNotANumberValue()
        elseif x < 0.5
            return LogGamma1p(x) - math:NaturalLogarithm(x)
        elseif x <= 2.5
            return LogGamma1p((x - 0.5) - 0.5)
        elseif x <= 8.0
            integer n =  cast(integer, math:Floor(x - 1.5))
            number prod = 1.0
            i = 1
            repeat while i <= n
                prod = prod * (x - i)
                i = i + 1
            end
            return LogGamma1p(x - (n + 1)) + math:NaturalLogarithm(prod)
        else 
            number sum = Lanczos(x)
            number tmp = x + LANCZOS_G + 0.5
            ret = ((x + 0.5) * math:NaturalLogarithm(tmp)) - tmp +
                HALF_LOG_2_PI + math:NaturalLogarithm(sum / x)
        end
        return ret
    end

    action Lanczos(number x) returns number
        number sum = 0.0
        i = lanczos:GetSize() - 1
        repeat while i > 0
            sum = sum + lanczos:Get(i) / (x + i)
            i = i - 1
        end

        return sum + lanczos:Get(0)
    end

    action LogGamma1p(number x) returns number
        if x < -0.5
            alert("Number too small")
        elseif x > 1.5
            alert("Number too large")
        end
        return -math:NaturalLogarithm(1 + InvGamma1pm1(x))
    end

    action InvGamma1pm1(number x) returns number
        if x < -0.5
            alert("x is less than -0.5")
        end

        if x > 1.5
             alert("x is greater than 1.5")
        end

        number ret = 0
        number t = 0
        if x <= 0.5
            t = x
        else
            t = (x - 0.5) - 0.5
        end

        if t < 0.0
            number a = INV_GAMMA1P_M1_A0 + t * INV_GAMMA1P_M1_A1
            number b = INV_GAMMA1P_M1_B8
            b = INV_GAMMA1P_M1_B7 + t * b
            b = INV_GAMMA1P_M1_B6 + t * b
            b = INV_GAMMA1P_M1_B5 + t * b
            b = INV_GAMMA1P_M1_B4 + t * b
            b = INV_GAMMA1P_M1_B3 + t * b
            b = INV_GAMMA1P_M1_B2 + t * b
            b = INV_GAMMA1P_M1_B1 + t * b
            b = 1.0 + t * b

            number c = INV_GAMMA1P_M1_C13 + t * (a / b)
            c = INV_GAMMA1P_M1_C12 + t * c
            c = INV_GAMMA1P_M1_C11 + t * c
            c = INV_GAMMA1P_M1_C10 + t * c
            c = INV_GAMMA1P_M1_C9 + t * c
            c = INV_GAMMA1P_M1_C8 + t * c
            c = INV_GAMMA1P_M1_C7 + t * c
            c = INV_GAMMA1P_M1_C6 + t * c
            c = INV_GAMMA1P_M1_C5 + t * c
            c = INV_GAMMA1P_M1_C4 + t * c
            c = INV_GAMMA1P_M1_C3 + t * c
            c = INV_GAMMA1P_M1_C2 + t * c
            c = INV_GAMMA1P_M1_C1 + t * c
            c = INV_GAMMA1P_M1_C + t * c

            if x > 0.5
                ret = t * c / x
            else 
                ret = x * ((c + 0.5) + 0.5)
            end
        else
            number p = INV_GAMMA1P_M1_P6
            p = INV_GAMMA1P_M1_P5 + t * p
            p = INV_GAMMA1P_M1_P4 + t * p
            p = INV_GAMMA1P_M1_P3 + t * p
            p = INV_GAMMA1P_M1_P2 + t * p
            p = INV_GAMMA1P_M1_P1 + t * p
            p = INV_GAMMA1P_M1_P0 + t * p

            number q = INV_GAMMA1P_M1_Q4
            q = INV_GAMMA1P_M1_Q3 + t * q
            q = INV_GAMMA1P_M1_Q2 + t * q
            q = INV_GAMMA1P_M1_Q1 + t * q
            q = 1.0 + t * q

            number c = INV_GAMMA1P_M1_C13 + (p / q) * t
            c = INV_GAMMA1P_M1_C12 + t * c
            c = INV_GAMMA1P_M1_C11 + t * c
            c = INV_GAMMA1P_M1_C10 + t * c
            c = INV_GAMMA1P_M1_C9 + t * c
            c = INV_GAMMA1P_M1_C8 + t * c
            c = INV_GAMMA1P_M1_C7 + t * c
            c = INV_GAMMA1P_M1_C6 + t * c
            c = INV_GAMMA1P_M1_C5 + t * c
            c = INV_GAMMA1P_M1_C4 + t * c
            c = INV_GAMMA1P_M1_C3 + t * c
            c = INV_GAMMA1P_M1_C2 + t * c
            c = INV_GAMMA1P_M1_C1 + t * c
            c = INV_GAMMA1P_M1_C0 + t * c

            if x > 0.5
                ret = (t / x) * ((c - 0.5) - 0.5)
            else
                ret = x * c
            end
        end

        return ret
    end

    /*
      Returns the regularized gamma function Q(a, x) = 1 - P(a, x). This is adapted from Apache Commons.
     
      Attribute: Parameter a the a parameter.
      Attribute: Parameter x the value.
      Attribute: Returns the regularized gamma function P(a, x)
     */
    action RegularizedGammaQ(number a, number x) returns number
        integer max = 0
        return RegularizedGammaQ(a, x, DEFAULT_EPSILON, max:GetMaximumValue())
    end

    /*
      Returns the regularized gamma function Q(a, x) = 1 - P(a, x). This is adapted from Apache Commons.
     
      The implementation of this method is based on:
      <ul>
       <li>
        <a href="http://mathworld.wolfram.com/RegularizedGammaFunction.html">
        Regularized Gamma Function</a>, equation (1).
       </li>
       <li>
        <a href="http://functions.wolfram.com/GammaBetaErf/GammaRegularized/10/0003/">
        Regularized incomplete gamma function: Continued fraction representations
        (formula 06.08.10.0003)</a>
       </li>
      </ul>
     
      Attribute: Parameter a the a parameter.
      Attribute: Parameter x the value.
      Attribute: Parameter epsilon When the absolute value of the nth item in the
      series is less than epsilon the approximation ceases to calculate
      further elements in the series.
      Attribute: Parameter maxIterations Maximum number of "iterations" to complete.
      Attribute: Returns the regularized gamma function P(a, x)
     */
    action RegularizedGammaQ(number a, number x, number epsilon, integer maxIterations) returns number
        number ret = 0
        //Math math
        if a:IsNotANumber() or x:IsNotANumber() or a <= 0.0 or x < 0.0
            ret = a:GetNotANumberValue()
        elseif x = 0.0
            ret = 1.0
        elseif x < a + 1.0
            ret = 1.0 - RegularizedGammaP(a, x, epsilon, maxIterations)
        else
            GammaContinuedFraction cf
            cf:SetA(a)
            ret = 1.0 / cf:Evaluate(x, epsilon, maxIterations)
            ret = math:RaiseNaturalNumberToPower(-x + (a * math:NaturalLogarithm(x)) - LogGamma(a)) * ret
        end

        return ret
    end

    /*
      Returns the regularized gamma function P(a, x). The action is ported from Apache Commons.
      This uses the default epsilon (error) and the maximum number of iterations is the largest
      possible integer.
     
      Attribute: Parameter  a the a parameter.
      Attribute: Parameter  x the value.
      Attribute: Returns the regularized gamma function P(a, x)
     */
    action RegularizedGammaP(number a, number x) returns number
        integer max = 0
        return RegularizedGammaP(a, x, DEFAULT_EPSILON, max:GetMaximumValue())
    end

    /*
      Returns the regularized gamma function P(a, x). The action is ported from Apache Commons
     
      The implementation of this method is based on:
      <ul>
       <li>
        <a href="http://mathworld.wolfram.com/RegularizedGammaFunction.html">
        Regularized Gamma Function</a>, equation (1)
       </li>
       <li>
        <a href="http://mathworld.wolfram.com/IncompleteGammaFunction.html">
        Incomplete Gamma Function</a>, equation (4).
       </li>
       <li>
        <a href="http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html">
        Confluent Hypergeometric Function of the First Kind</a>, equation (1).
       </li>
      </ul>
     
      Attribute: Parameter  a the a parameter.
      Attribute: Parameter  x the value.
      Attribute: Parameter  epsilon When the absolute value of the nth item in the
      series is less than epsilon the approximation ceases to calculate
      further elements in the series.
      Attribute: Parameter maxIterations Maximum number of "iterations" to complete.
      Attribute: Returns the regularized gamma function P(a, x)
     */
    action RegularizedGammaP(number a, number x, number epsilon, integer maxIterations) returns number
        number ret = 0
        //Math math
        if a:IsNotANumber() or x:IsNotANumber() or a <= 0.0 or x < 0.0
            ret = a:GetNotANumberValue()
        elseif x = 0.0
            ret = 0.0
        elseif x >= a + 1
            ret = 1.0 - RegularizedGammaQ(a, x, epsilon, maxIterations)
        else
            number n = 0.0
            number an = 1.0 / a
            number sum = an
            repeat while math:AbsoluteValue(an / sum) > epsilon and n < maxIterations and sum < n:GetPositiveInfinityValue()
                n = n + 1.0
                an = an * x / (a + n)
                sum = sum + an
            end
            if n >= maxIterations
                alert("Maximum iterations exceeded. Did not converge.")
            elseif sum:IsInfinite()
                ret = 1.0
            else
                ret = math:RaiseNaturalNumberToPower(-x + (a * math:NaturalLogarithm(x)) - LogGamma(a)) * sum
            end
        end
        return ret
    end
end