package Libraries.Compute.Statistics.Clustering
use Libraries.Compute.Vector
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Calculations.Mean

/*
    This represents a Cluster in the sense that it contains a series of points that are being 
    clumped together by a clustering algorithm. The points are contained as N-dimensional vectors 
    and some basic add and remove style actions are allowed. 

    Attribute: Author Andreas Stefik
*/
class Cluster
    integer row = -1
    Vector center = undefined
    Array<Vector> points

    /* Add a vector to the list. */
    action Add(Vector point)
        points:Add(point)
    end

    /* This action removes a point from the cluster at a particular index. */
    action RemoveAt(integer i) returns Vector
        Vector point = points:RemoveAt(i)
        return point
    end

    /*
        This action calculates the geometric center of the cluster of points. More information can be found about
        this operation on wikipedia: https://en.wikipedia.org/wiki/Centroid In this case, the action calculates 
        the average across all dimensions, which becomes the center. This action does the calculation, 
        but does not by default set this Vector as the point center of this cluster. This should be done
        only if this is the desired result. 
    */
    action CalculateCentroid returns Vector
        if points:IsEmpty()
            return undefined
        end
        Array<Mean> means
        Vector first = points:Get(0)
        i = 0
        repeat while i < first:GetSize()
            Mean mean
            mean:SetSize(points:GetSize())
            means:Add(mean)
            i = i + 1
        end
        i = 0
        repeat while i < points:GetSize()
            Vector point = points:Get(i)
            j = 0
            repeat while j < point:GetSize()
                Mean mean = means:Get(j)
                number value = point:Get(j)
                mean:Add(value)
                j = j + 1
            end
            i = i + 1
        end

        Vector centroid
        centroid:SetSize(first:GetSize())
        i = 0
        repeat while i < means:GetSize()
            Mean mean = means:Get(i)
            number value = mean:GetMean()
            centroid:Set(i, value)
            i = i + 1
        end
        return centroid
    end

    /*
        This returns whatever value was selected as the center of this cluster. This value
        may have been randomly selected, or otherwise just chosen, and as such, one should not
        assume that this center value is mathematically equivalent to the centroid.
    */
    action GetCenter returns Vector
        return center
    end

    /*
        This sets whatever value was selected as the center of this cluster. This value
        may have been randomly selected, or otherwise just chosen, and as such, one should not
        assume that this center value is mathematically equivalent to the centroid.
    */
    action SetCenter(Vector center)
        me:center = center
    end

    /* This returns the number of points in the current cluster. */
    action GetSize returns integer
        return points:GetSize()
    end

    /* This action empties all points from the cluster. */
    action Empty
        points:Empty()
    end

    /* This action detects whether or not the current cluster is empty. */
    action IsEmpty returns boolean
        return points:IsEmpty()
    end
end