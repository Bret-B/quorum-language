package Libraries.Compute.Statistics.Clustering

use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.DataFrameSelection
use Libraries.Compute.Statistics.Columns.BooleanColumn
use Libraries.Containers.Array
use Libraries.Compute.Random
use Libraries.Compute.Vector
use Libraries.Compute.Math
use Libraries.Compute.Statistics.Columns.IntegerColumn
use Libraries.Compute.Statistics.Calculations.Variance

/*
    This class represents an approach to clustering data, similar to the KMeans++ algorithm. The original
    code was adapted from Apache Commons Math:https://commons.apache.org/proper/commons-math/download_math.cgi.

    As a TODO, there are other optimizations and features that are either not included from the original or that
    probably should be included. First, there are optimizations that exist for KMeans++ to reduce the initialization
    efforts: http://vldb.org/pvldb/vol5/p622_bahmanbahmani_vldb2012.pdf. These have not been included. Second, this
    implementation needs to be made more flexible to include competing strategies for empty clusters and 
    alternative distance computations. Currently, only Euclidian distance is included. 

    This implementation requires that any of the values in the DataFrame must be an integer or a number, or
    convertable as such, and that no undefined values exist. In either case, an error will be thrown 
    when the algorithm processes the values. It also requires the cluster count to be greater than 0 and 
    the number of clusters must be strictly less than the number of rows.

    Attribute: Author Andreas Stefik

    Attribute: Example
    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Clustering.ClusterByMeans

    //make a DataFrame and toss some data in it
    DataFrame frame
    frame:LoadFromCommaSeparatedValue(
        "X,Y
        1,2
        2,4
        3,6
        4,8
        5,10
        9,18
        10,20
        11,22
        12,24
        13,26"
    )
    //set the range of points on which we will calculate distance
    frame:AddSelectedColumnRange(0,1)

    output "Calculating K-means Clustering"
    ClusterByMeans means
    means:SetClustersSize(3)

    //Clusters return an additional column with labels, so they can 
    //be included in a chart or other approach, per point
    //If we want this in the DataFrame, we need to add it manually
    ClusterResult result = means:Cluster(frame)
    Array<Cluster> value = result:GetClusters()
    IntegerColumn assignments = result:GetClusterIndices()
    assignments:SetHeader("Clusters")
    frame:AddColumn(assignments) 
    
    //we can also chart the clusters if
    //we specify that the new clusters are a factor
    frame:AddSelectedFactor(2)
    ScatterPlot chart = frame:ScatterPlot()
    chart:SetTitle("K-Means Clustering Demo")
    chart:Display()
*/
class ClusterByMeans
    //The number of clusters to have in the calculation
    integer clusterCount = 3
    integer totalPoints = -1
    integer maxIterations = 1000
    Array<Cluster> currentClusters = undefined
    Array<Vector> currentPoints = undefined
    text errorMessage = "Cannot calculate a cluster analysis on an invalid frame. Either 
                the columns are not convertable to a vector or the sizes do not match"
    Random random


    /*
        This example states to cluster the DataFrame, with the particular selected columns, 
        without taking any factors into account. By default, 3 clusters are selected and this
        value needs to be modified using SetClusterSize if a different number is desired. 

        Attribute: Parameter frame The DataFrame we want to do our calculations on. 

        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Clustering.ClusterByMeans
    
        //make a DataFrame and toss some data in it
        DataFrame frame
        frame:LoadFromCommaSeparatedValue(
            "X,Y
            1,2
            2,4
            3,6
            4,8
            5,10
            9,18
            10,20
            11,22
            12,24
            13,26"
        )
        //set the range of points on which we will calculate distance
        frame:AddSelectedColumnRange(0,1)
    
        output "Calculating K-means Clustering"
        ClusterByMeans means
        means:SetClustersSize(3)
    
        //Clusters return an additional column with labels, so they can 
        //be included in a chart or other approach, per point
        //If we want this in the DataFrame, we need to add it manually
        ClusterResult result = means:Cluster(frame)
        Array<Cluster> value = result:GetClusters()
        IntegerColumn assignments = result:GetClusterIndices()
        assignments:SetHeader("Clusters")
        frame:AddColumn(assignments) 
        
        //we can also chart the clusters if
        //we specify that the new clusters are a factor
        frame:AddSelectedFactor(2)
        ScatterPlot chart = frame:ScatterPlot()
        chart:SetTitle("K-Means Clustering Demo")
        chart:Display()
    */
    action Cluster(DataFrame frame) returns ClusterResult
        boolean isValid = IsValid(frame)
        ClusterResult result
        if not isValid
            alert(errorMessage)
        end
        Setup(frame)

        IntegerColumn assignments
        assignments:SetSize(totalPoints)
        AssignPointsToClusters(currentClusters, currentPoints, assignments)

        // iterate through updating the centers until we're done
        count = 0
        repeat while count < maxIterations
            boolean hasEmptyCluster = HasEmptyCluster(currentClusters)
            Array<Cluster> newClusters = AdjustClusterCenters(currentClusters, currentPoints, assignments)
            integer changes = AssignPointsToClusters(newClusters, currentPoints, assignments)
            currentClusters = newClusters
            if changes = 0 and not hasEmptyCluster
                result:SetClusterIndices(assignments)
                result:SetClusters(newClusters)
                return result
            end

            count = count + 1
        end

        return result
    end

    /*
        This example states to cluster the DataFrame, with the particular selected columns, 
        without taking any factors into account. By default, 3 clusters are selected and this
        value needs to be modified using SetClusterSize if a different number is desired. 

        Attribute: Parameter frame The DataFrame we want to do our calculations on. 
        Attribute: Parameter seed A set seed for the clustering. 

        Attribute: Example
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Clustering.ClusterByMeans
    
        //make a DataFrame and toss some data in it
        DataFrame frame
        frame:LoadFromCommaSeparatedValue(
            "X,Y
            1,2
            2,4
            3,6
            4,8
            5,10
            9,18
            10,20
            11,22
            12,24
            13,26"
        )
        //set the range of points on which we will calculate distance
        frame:AddSelectedColumnRange(0,1)
    
        output "Calculating K-means Clustering"
        ClusterByMeans means
        means:SetClustersSize(3)
    
        //Clusters return an additional column with labels, so they can 
        //be included in a chart or other approach, per point
        //If we want this in the DataFrame, we need to add it manually
        ClusterResult result = means:Cluster(frame, 42)
        Array<Cluster> value = result:GetClusters()
        IntegerColumn assignments = result:GetClusterIndices()
        assignments:SetHeader("Clusters")
        frame:AddColumn(assignments) 
        
        //we can also chart the clusters if
        //we specify that the new clusters are a factor
        frame:AddSelectedFactor(2)
        ScatterPlot chart = frame:ScatterPlot()
        chart:SetTitle("K-Means Clustering Demo")
        chart:Display()
    */
    action Cluster(DataFrame frame, integer seed) returns ClusterResult
        random:SetSeed(seed)
        boolean isValid = IsValid(frame)
        ClusterResult result
        if not isValid
            alert(errorMessage)
        end
        Setup(frame)

        IntegerColumn assignments
        assignments:SetSize(totalPoints)
        AssignPointsToClusters(currentClusters, currentPoints, assignments)

        // iterate through updating the centers until we're done
        count = 0
        repeat while count < maxIterations
            boolean hasEmptyCluster = HasEmptyCluster(currentClusters)
            Array<Cluster> newClusters = AdjustClusterCenters(currentClusters, currentPoints, assignments)
            integer changes = AssignPointsToClusters(newClusters, currentPoints, assignments)
            currentClusters = newClusters
            if changes = 0 and not hasEmptyCluster
                result:SetClusterIndices(assignments)
                result:SetClusters(newClusters)
                return result
            end

            count = count + 1
        end

        return result
    end

    private action HasEmptyCluster(Array<Cluster> clusters) returns boolean
        i = 0
        repeat while i < clusters:GetSize()
            Cluster cluster = clusters:Get(i)
            if cluster:IsEmpty() return true end
            i = i + 1
        end
        return false
    end

    /*
        Implemenation note: This should not be the only strategy used, but we should likely
        do this as a strategy pattern, as opposed to a flag and competing values. The
        same goes with the distance action.
    */
    private action GetPointFromLargestVarianceCluster(Array<Cluster> clusters, 
        Array<Vector> points, IntegerColumn assignments) returns Vector

        number maxVariance = 0
        maxVariance = maxVariance:GetNegativeInfinityValue()
        Array<Variance> variances
        variances:SetSize(clusters:GetSize())

        //make a variance object for each cluster
        i = 0
        repeat while i < clusters:GetSize()
            Variance variance
            variances:Set(i, variance)
            i = i + 1
        end

        //calculate the variances for each cluster by going through all points
        //for each point, add it to the appropriate cluster
        i = 0
        repeat while i < points:GetSize()
            integer clusterIndex = assignments:GetAsInteger(i)
            Cluster cluster = clusters:Get(clusterIndex)
            Variance variance = variances:Get(clusterIndex)
            Vector point = points:Get(i)
            number distance = Distance(point, cluster:GetCenter())
            variance:Add(distance)
            i = i + 1
        end

        integer winningCluster = -1
        boolean allEmpty = true
        i = 0
        repeat while i < variances:GetSize()
            Variance variance = variances:Get(i)
            Cluster cluster = clusters:Get(i)
            if not cluster:IsEmpty()
                allEmpty = false
                number result = variance:GetVariance()
                if result > maxVariance
                    maxVariance = result
                    winningCluster = i
                end
            end
            i = i + 1
        end

        if allEmpty
            alert("ClusterByMeans did not converge and contained an empty cluster.")
        end

        output winningCluster
        Cluster selectedCluster = clusters:Get(winningCluster)
        integer result = random:RandomIntegerBetween(0, selectedCluster:GetSize() - 1)
        return selectedCluster:RemoveAt(result)
    end

    /*
        This adjusts the centers of the clusters on each iteration. If a cluster is empty, 
        it removes a value from the cluster with the highest variance. If a cluster is not
        empty, it moves the center based on the centroid, which is calculated as the average
        across the N-dimensional space (e.g., average of all X, average of all Y, average of all Z).
    */
    private action AdjustClusterCenters(Array<Cluster> clusters, 
        Array<Vector> points, IntegerColumn assignments) returns Array<Cluster>

        Array<Cluster> newClusters
        newClusters:SetSize(clusters:GetSize())

        i = 0
        repeat while i < clusters:GetSize()
            Cluster cluster = clusters:Get(i) //only do the variance one for now
            Cluster newCluster

            //if the old cluster is empty, fill it with one of various strategies
            if cluster:IsEmpty()
                Vector point = GetPointFromLargestVarianceCluster(clusters, points, assignments)
                newCluster:Add(point)
            else
                Vector centroid = cluster:CalculateCentroid()
                newCluster:SetCenter(centroid)
            end

            newClusters:Set(i, newCluster)
            i = i + 1
        end
        return newClusters
    end

    /*
        This action takes a set of clusters and assigns points to them. These assignments
        move the points to the cluster and also mark them in the Assignments column.
    */
    private action AssignPointsToClusters(Array<Cluster> clusters, Array<Vector> points, IntegerColumn assignments)
        returns integer
        integer assignedDifferently = 0
        integer pointIndex = 0

        //first tell the clusters there is nothing in them
        i = 0
        repeat while i < clusters:GetSize()
            Cluster cluster = clusters:Get(i)
            cluster:Empty()
            i = i + 1
        end

        i = 0
        repeat while i < points:GetSize()
            Vector p = points:Get(i)
            integer clusterIndex = GetNearestCluster(clusters, p)
            integer oldIndex = -1
            if not assignments:IsUndefined(i)
                oldIndex = assignments:GetAsInteger(i)
            end

            if clusterIndex not= oldIndex
                assignedDifferently = assignedDifferently + 1
            end

            //In Apache Commons, they create Centroid Clusters, but this is not necessary here
            assignments:SetAsInteger(i, clusterIndex)

            //tell the clusters another point has been added
            Cluster cluster = clusters:Get(clusterIndex)
            cluster:Add(p)
            i = i + 1
        end
        return assignedDifferently
    end

    /*
        This action sets the DataFrame up through the KMeans++ initialization step. Implementation
        note: We should replace this action with the initialization steps mentioned in KMeans||
        as mentioned in the class comment.
    */
    private action Setup(DataFrame frame)
        integer pointDimensions = frame:GetSelectedColumnSize()
        BooleanColumn taken
        taken:SetSize(totalPoints)

        integer firstIndex = random:RandomIntegerBetween(0, totalPoints - 1)
        Array<Vector> points = ConvertToVectorPoints(frame)
        Vector firstPoint = points:Get(firstIndex)

        taken:SetAsBoolean(firstIndex, true)

        Vector minDistanceSquared
        minDistanceSquared:SetSize(totalPoints)
        i = 0
        repeat while i < totalPoints
            if i not= firstIndex
                number distance = Distance(firstPoint, points:Get(i))
                minDistanceSquared:Set(i, distance * distance)
            end
            i = i + 1
        end

        //setup a default cluster with a center at the first point
        Cluster cluster
        cluster:SetCenter(firstPoint)

        Array<Cluster> resultSet
        resultSet:Add(cluster)

        boolean done = false
        repeat while resultSet:GetSize() < clusterCount and not done
            number distSqSum = 0

            i = 0
            repeat while i < totalPoints
                if taken:IsUndefined(i) //for anything not taken
                    distSqSum = distSqSum + minDistanceSquared:Get(i)
                end
                i = i + 1
            end

            number r = random:RandomNumber() * distSqSum
            integer nextPointIndex = -1
            number sum = 0.0
            i = 0
            boolean innerDone = false
            repeat while i < totalPoints and not innerDone
                if taken:IsUndefined(i) //for anything not taken
                    sum = sum + minDistanceSquared:Get(i)
                    if sum >= r
                        nextPointIndex = i
                        innerDone = true
                    end
                end
                i = i + 1
            end

            //we did not find one so pick any of them that remain
            if nextPointIndex = -1 
                i = 0
                innerDone = false
                repeat while i < totalPoints and not innerDone
                    if taken:IsUndefined(i) //for anything not taken
                        nextPointIndex = i
                        innerDone = true
                    end
                    i = i + 1
                end
            end

            if nextPointIndex >= 0 //I have you now!
                Vector p = points:Get(nextPointIndex)

                //make a new cluster and add it to the results
                Cluster nextCluster
                nextCluster:SetCenter(p)
                resultSet:Add(nextCluster)
                taken:SetAsBoolean(nextPointIndex, true)

                if resultSet:GetSize() < clusterCount
                    i = 0
                    repeat while i < totalPoints
                        if taken:IsUndefined(i) //for anything not taken
                            number distance = Distance(p, points:Get(i))
                            number d2 = distance * distance
                            if d2 < minDistanceSquared:Get(i)
                                minDistanceSquared:Set(i, d2)
                            end
                        end
                        i = i + 1
                    end
                end
            else //none remaining, break out of the loop
                done = true
            end
        end
        currentClusters = resultSet
        currentPoints = points
    end
    
    /*
        This needs to be changed so you can customize the distance calculation. This is only the Euclidian
        distance. 
    */
    private action Distance(Vector a, Vector b) returns number
        return a:Distance(b)
    end

    /*
        This takes the DataFrame and converts it to vectors for efficiency.
    */
    private action ConvertToVectorPoints(DataFrame frame) returns Array<Vector>
        Array<Vector> vectors
        vectors:SetSize(totalPoints)
        
        i = 0
        repeat while i < totalPoints
            Vector v
            v:SetSize(frame:GetSelectedColumnSize())
            FillVectorFromFrame(frame, v, i)
            vectors:Set(i, v)
            i = i + 1
        end

        return vectors
    end

    /*
        This action takes an existing vector and changes the values in it
        from the row in the DataFrame. This essentially makes a point.
    */
    private action FillVectorFromFrame(DataFrame frame, Vector vector, integer row)
        DataFrameSelection selection = frame:GetSelection()
        i = 0
        repeat while i < selection:GetColumnSize()
            integer index = selection:GetColumn(i)
            DataFrameColumn column = frame:GetColumn(index)
            number value = column:GetAsNumber(row)
            vector:Set(i, value)
            i = i + 1
        end
    end

    /*
        This action checks if the selected columns are the same size
        and that they are vectorable, meaning can be converted to numbers
        in each row. If not, it returns false. Under various error conditions, 
        an error message is returned and then an error is thrown.
    */
    private action IsValid(DataFrame frame) returns boolean
        DataFrameSelection selection = frame:GetSelection()
        //if there are no columns, there is nothing to cluster
        if selection:GetColumnSize() < 1
            errorMessage = "Cannot compute a cluster on a DataFrame with less than
                one selected columns."
            return false
        end
        //check each column to make sure they are the same size and of a compatible type
        integer columnSize = -1
        i = 0
        repeat while i < selection:GetColumnSize()
            integer index = selection:GetColumn(i)
            DataFrameColumn column = frame:GetColumn(index)
            integer size = column:GetSize()
            if columnSize = -1
                columnSize = size
            else
                if columnSize not= size //columns must be the same size
                    errorMessage = "Cannot calculate clustering, as the selected
                        columns are not the same size"
                    return false
                end
            end

            //if it can convert to a vector, we are good to go, otherwise bail
            if not column:CanConvertToVector()
                errorMessage = "Cannot calculate clustering, as column " + index + " 
                    cannot be converted to a vector. It needs to be numerical in nature."
                return false
            end
            i = i + 1
        end

        //now check if the number of clusters is strictly lower than 
        //the number of points in the columns
        if columnSize < clusterCount
            errorMessage = "Cannot calculate clustering, as the number of points in the 
                columns, " + columnSize + ", must be greater than or equal to the 
                the expected number of clusters, " + clusterCount + "."
            return false
        end

        if clusterCount = 0
            errorMessage = "Cannot calculate clustering, as the number of clusters
                must be greater than 0."
            return false
        end

        totalPoints = columnSize
        return true
    end
    
    /*
        This calculates, for a particular point, the nearest cluster using 
        the appropriate distance function.
    */
    private action GetNearestCluster(Array<Cluster> clusters, Vector point) returns integer
        number minDistance = 0
        minDistance = minDistance:GetMaximumValue()
        integer clusterIndex = 0
        integer minCluster = 0
        i = 0
        repeat while i < clusters:GetSize()
            Cluster c = clusters:Get(i)
            number distance = Distance(point, c:GetCenter())
            if distance < minDistance
                minDistance = distance
                minCluster = i
            end
            i = i + 1
        end
        return minCluster
    end

    /* 
        This returns the number of clusters expected when the algorithm has finished. The default is 3.
    */
    action GetClustersSize returns integer
        return clusterCount
    end

    /*
        This sets the number of clusters expected when the algorithm has finished. The default is 3.
    */
    action SetClustersSize(integer amount)
        me:clusterCount = amount
    end
end