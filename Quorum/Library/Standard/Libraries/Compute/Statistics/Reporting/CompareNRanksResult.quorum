package Libraries.Compute.Statistics.Reporting

use Libraries.Containers.Array
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.Calculations.Median

/*
    This class represents data that comes back from a CompareRanks calculation.

    Attribute: Author Hannah Williams
*/
class CompareNRanksResult is CompareRanksResult 
    integer sampleSize = 0

    /* The pairwise results of each 2-sample test within an N-sample test */
    Array<CompareRanksResult> pairwise 

    action SetSamples(Array<DataFrameColumn> samples)
        sampleSize = 0
        if samples:GetSize() > 0
            if IndependentSamples()
                i = 0
                repeat while i < samples:GetSize()
                    sampleSize = sampleSize + samples:Get(i):GetSize()
                    i = i + 1
                end
            else
                sampleSize = samples:Get(0):GetSize()
            end
        end
        parent:CompareRanksResult:SetSamples(samples)
    end

    action SetPairwiseResults(Array<CompareRanksResult> pairwise)
        me:pairwise = pairwise
    end

    action GetPairwiseResults returns Array<CompareGroupsResult>
        return pairwise
    end

    /*
        This action summarizes the result and lists it informally.
    */
    action GetSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()

        text dependence = ""
        if IndependentSamples()
            dependence = "independent"
        else
            dependence = "dependent"
        end

        summary = summary + "A "+ GetFormalTestName() + " was conducted across " + GetSamples():GetSize() + " " + dependence +" samples."
        if GetFactor() not= ""
            summary = summary + lf + "Factor: " + GetFactor()
        end

        if IndependentSamples()
            summary = summary + lf + "Statistic (H): " + GetTestStatistic()
        else
            summary = summary + lf + "Statistic (χ2): " + GetTestStatistic()
        end

        summary = summary + lf + "Degrees Of Freedome: " + GetDegreesOfFreedom()

        summary = summary + lf + "Probability: " + GetProbabilityValue()

        summary = summary + lf + "Effect Size (" + GetEffectSizeName() + "): " + GetEffectSize()

        return summary
    end

    /*
        This action summarizes the result and places it into formal academic language, in 
        APA format.

        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf
    */
    action GetFormalSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()

        text dependence = ""
        if IndependentSamples()
            dependence = "independent"
        else
            dependence = "dependent"
        end

        summary = summary + "A " + GetFormalTestName() + " conducted across " + GetSamples():GetSize()
                            + " " + dependence + " samples"

        if IsSignificant()
            summary = summary + " indicated that there was a statistically significant difference between the samples"
        else
            summary = summary + " indicated that there was not a statistically significant difference between the samples"
        end
        summary = summary + ", " + GetFormalNumericalResult() + "."

        return summary
    end

    action GetFormalNumericalResult() returns text
        text summary = ""
        if GetSamples():GetSize() > 0
            if IndependentSamples()
                summary = summary + "H(" + GetFormat():FormatDegreesOfFreedom(GetDegreesOfFreedom()) 
                                  + ", N = " + sampleSize + ") = " 
                                  + GetFormat():FormatTestStatistic(GetTestStatistic())
            else
                summary = summary + "χ2(" + GetFormat():FormatDegreesOfFreedom(GetDegreesOfFreedom()) 
                                  + ", N = " + sampleSize + ") = " 
                                  + GetFormat():FormatTestStatistic(GetTestStatistic())
            end
    
            number p = GetProbabilityValue()
            if p < GetFormat():PRECISION_LIMIT
                summary = summary + ", p < " + GetFormat():FormatProbabilityValue(p)
            else
                summary = summary + ", p = " + GetFormat():FormatProbabilityValue(p)
            end
        end
        if IndependentSamples()
            summary = summary + ", Ε^2  = " + GetFormat():FormatCorrelation(GetEffectSize())
        else
            summary = summary + ", W  = " + GetFormat():FormatCorrelation(GetEffectSize())
        end
        return summary
    end
end