package Libraries.Compute.Statistics.Reporting

use Libraries.Compute.Math
use Libraries.Compute.Statistics.DataFrame
use Libraries.System.File
use Libraries.Web.Page.all

/*
    This class represents data that comes back from a kmo test 
    in CheckReducibilityStrength

    Attribute: Author Hannah Williams
*/
class CheckReducibilityStrengthResult is StatisticalTestResult
    Math math
    integer numberOfVariables = 0
    DataFrame individualScores

    action GetNumberOfVariables returns integer
        return numberOfVariables
    end

    action SetNumberOfVariables(integer numberOfVariables)
        me:numberOfVariables = numberOfVariables
    end

    action GetIndividualScores returns DataFrame
        return individualScores
    end

    action SetIndividualScores(DataFrame individualScores)
        me:individualScores = individualScores
    end

    action GetNullHypothesis returns text
        return ""
    end

    action GetAlternativeHypothesis returns text
        return ""
    end

    /*
        This action summarizes the result and lists it informally.
    */
    action GetSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        integer digits = GetFormat():GetSignificantDigits()

        summary = summary + "A "+ GetFormalTestName() + " was conducted across " + numberOfVariables + " variables."

        summary = summary + lf + "Statistic (KMO): " + math:Round(GetTestStatistic(), digits)

        summary = summary + lf + "Strength: "

        // See: https://www.analysisinn.com/post/kmo-and-bartlett-s-test-of-sphericity/
        if GetTestStatistic() < 0.5
            summary = summary + "Unacceptable"
        elseif GetTestStatistic() < 0.6
            summary = summary + "Terrible"
        elseif GetTestStatistic() < 0.7
            summary = summary + "Mediocre"
        elseif GetTestStatistic() < 0.8
            summary = summary + "Average"
        elseif GetTestStatistic() < 0.9
            summary = summary + "Meritorious"
        elseif GetTestStatistic() <= 1.0
            summary = summary + "Marvelous"
        end

        if GetEffectSizeName() not= ""
            summary = summary + lf + "Effect Size (" + GetEffectSizeName() + "): " + math:Round(GetEffectSize(), digits)
        end

        return summary
    end

    /*
        This action summarizes the result and places it into formal academic language, in APA format.
        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf
    */
    action GetFormalSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()

        summary = summary + "A "+ GetFormalTestName() + " was conducted across " + numberOfVariables + " variables"

        // See: https://www.analysisinn.com/post/kmo-and-bartlett-s-test-of-sphericity/
        if GetTestStatistic() < 0.5
            summary = summary + lf + "The result was unacceptable, indicating that the data is not suitable for factor analysis"
        elseif GetTestStatistic() < 0.6
            summary = summary + lf + "The result was terrible, indicating the data may not be suitable for factor analysis"
        elseif GetTestStatistic() < 0.7
            summary = summary + lf + "The result was mediocre, indicating the data may not be suitable for factor analysis"
        elseif GetTestStatistic() < 0.8
            summary = summary + lf + "The result was average, indicating the data may or may not be suitable for factor analysis"
        elseif GetTestStatistic() < 0.9
            summary = summary + lf + "The result was meritorious, indicating the data may be suitable for factor analysis"
        elseif GetTestStatistic() <= 1.0
            summary = summary + lf + "The result was marvelous, indicating the data is suitable for factor analysis"
        end

        summary = summary + lf + GetFormalNumericalResult()

        return summary
    end

    /*
        This action returns the formal numrical result in APA format.
        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf
    */
    action GetFormalNumericalResult() returns text
        text summary = ""

        summary = summary + "KMO = " + GetFormat():FormatTestStatistic(GetTestStatistic())

        return summary
    end

     /*
        This creates an HTML page with the results as its contents.  
    */
    action GetReport(File file)
        WebPage page        

        //add language headers
        page:AddAttribute("xml:lang", "en")
        page:SetLanguage("en")

        //add the meta-data character set
        MetaData charset
        charset:SetCharacterSet("UTF-8")
        page:AddMetaData(charset)

        MetaData viewport
        viewport:SetContent("width=device-width, initial-scale=1")
        viewport:SetName("viewport")
        page:AddMetaData(viewport)

        page:AddIcon("http://quorumlanguage.com/media/favicon.ico")
        page:AddScript("http://quorumlanguage.com/script/quorumCharts.js")
        page:AddStylesheet("http://quorumlanguage.com/style/quorumCharts.css")
        page:SetWebPageTitle("Quorum Statistical Report: " + GetFormalTestName())

        page:Add(GetReportDiv())                          

        file:Write(page:Generate()) 
    end
    
    action GetReportDiv() returns Division       
        // BoxPlotWriter chartWriter
        Division divide
       
        // for summary
        divide:SetStyle("font-family: sans-serif")
        divide:AddHeading(GetFormalTestName() + " Report", 2)
        divide:AddHeading("Summary: GetSummary()", 3)
        divide:AddParagraph(GetSummary())
        divide:AddHeading("Formal Summary: GetFormalSummary()", 3)
        divide:AddParagraph(GetFormalSummary())

        // for table
//        divide:AddHeading("Table Summary", 3)
//        WebTable table1
//        WebTable table2
//        table1:SetBorder(true)
//        table2:SetBorder(true)     
//
//        table1:Add(GetSummaryDataFrame())
//        divide:Add(table1)
//        table2:Add(GetDescriptiveStatisticsDataFrame())
//        divide:Add(table2)

//        BoxPlot chart = GetChart()
//        chart:Display(true)
//        divide:AddText(chartWriter:WriteOutChart(chart))       
        return divide             
    end

end