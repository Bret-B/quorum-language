package Libraries.Compute.Statistics.Reporting

use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Calculations.Summarize
use Libraries.Compute.Math
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.Columns.TextColumn
use Libraries.Compute.Statistics.Columns.NumberColumn

/*
    This class represents data that comes back from a CorrelateGroups
    calculation (Pearson or Spearman correlation).

    Attribute: Author Andreas Stefik, Hannah Williams
*/
class CorrelateGroupsResult is StatisticalTestResult
    Array<DataFrameColumn> groups                       // The groups used in this calculation.
    boolean ranked = false 
    number correlation = 0
    text factor = ""
    Math math

    /* Returns the factor, if used in this calculation */
    action GetFactor returns text
        return factor
    end

    /* Sets the factor, if used in this calculation */
    action SetFactor(text factor)
        me:factor = factor
    end

    /* Returns the groups used in this calculation */
    action GetGroups returns Array<DataFrameColumn>
        return groups
    end

    /* Sets the groups used in this calculation */
    action SetGroups(DataFrameColumn group1, DataFrameColumn group2)
        Array<DataFrameColumn> groups
        groups:Add(group1)
        groups:Add(group2)
        me:groups = groups
    end

    action Ranked returns boolean
        return ranked
    end

    action Ranked(boolean ranked)
        me:ranked = ranked
    end

    /*
        Obtains the correlation calculated by the test. This may be of any kind.

        Attribute: Returns the correlation
    */
    action GetCorrelation returns number
        return correlation
    end

    /*
        Sets the correlation calculated by the test. This may be of any kind.

        Attribute: Parameter correlation the correlation
    */
    action SetCorrelation(number correlation)
        me:correlation = correlation
    end


    /*
        This action summarizes the result and lists it informally.
    */
    action GetSummary returns text
        if GetGroups():GetSize() = 2
            text summary = ""
            text lf = summary:GetLineFeed()
            text variable1 = GetGroups():Get(0):GetHeader()
            text variable2 = GetGroups():Get(1):GetHeader()
            integer digits = GetFormat():GetSignificantDigits()
    
            summary = summary + "A "+ GetFormalTestName() + " was performed."
            if factor not= ""
                summary = summary + lf + "Factor: " + factor
            end
           
            summary = summary + lf + "Groups: " + variable1 + " and " + variable2
    
            summary = summary + lf + "Statistic (t): " + math:Round(GetTestStatistic(), digits)
    
            summary = summary + lf + "Degrees Of Freedom: " + math:Round(GetDegreesOfFreedom(), digits)
    
            summary = summary + lf + "Probability: " + math:Round(GetProbabilityValue(), digits)
    
            summary = summary + lf + "Correlation: " + math:Round(GetCorrelation(), digits)
    
            if GetEffectSizeName() not= ""
                summary = summary + lf + "Effect Size: " + GetEffectSizeName() + " = " + math:Round(GetEffectSize(), digits)
            end
    
            return summary
        end
        return ""
    end

    /*
        This action summarizes the result and places it into formal academic language, in APA format.
        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf
    */
    action GetFormalSummary returns text
        if GetGroups():GetSize() = 2
            text summary = ""
            text lf = summary:GetLineFeed()
            text variable1 = GetGroups():Get(0):GetHeader()
            text variable2 = GetGroups():Get(1):GetHeader()
    
            if factor = ""
                summary = summary + "A "+ GetFormalTestName() + " was performed to assess the linear relationship between " 
                                    + variable1 + " and " + variable2 + "."
            else
                summary = summary + "A "+ GetFormalTestName() + " was performed on " + factor + " to assess the linear relationship between " 
                                    + variable1 + " and " + variable2 + "."
            end
    
            if correlation = -1 
                summary = summary + lf + "There was a perfect negative correlation between the two variables"
            elseif correlation = 1
                summary = summary + lf + "There was a perfect positive correlation between the two variables"
            elseif correlation = 0
                summary = summary + lf + "There was no correlation between the two variables"
            elseif correlation < 0 
                text level = ""
                if correlation <= -0.5
                    level = "strong"
                elseif correlation <= -0.3 and correlation > -0.5
                    level = "moderate"
                else
                    level = "weak"
                end
                summary = summary + lf + "There was a " + level + " negative correlation between the two variables"
            else
                text level = ""
                if correlation >= 0.5
                    level = "strong"
                elseif correlation >= 0.3 and correlation < 0.5
                    level = "moderate"
                else
                    level = "weak"
                end
                summary = summary + lf + "There was a " + level + " positive correlation between the two variables"
            end   
            summary = summary + ", " + GetFormalNumericalResult() + "."
            return summary
        end
        return ""
    end

    /*
        This action returns the formal numrical result in APA format.
        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf

        Correlate2Groups (Pearson Correlation)
        Numerical result format: r(degress of freedom) = correlation, p = probability-value
        Example:
            r(4) = .23, p = .667
   
        Correlate2RankedGroups (Spearman Correlation)
        Numerical result format: rs(degress of freedom) = correlation, p = probability-value
        Example:
            rs(4) = .03, p = .957
    */
    action GetFormalNumericalResult() returns text
        if GetGroups():GetSize() = 2
            text summary = ""
            if ranked
                summary = summary + "rs("
            else
                summary = summary + "r("
            end
            summary = summary + GetFormat():FormatDegreesOfFreedom(GetDegreesOfFreedom()) + ") = " 
                              + GetFormat():FormatCorrelation(GetCorrelation())
    
            number p = GetProbabilityValue()
            if p < GetFormat():PRECISION_LIMIT
                summary = summary + ", p < " + GetFormat():FormatProbabilityValue(p)
            else
                summary = summary + ", p = " + GetFormat():FormatProbabilityValue(p)
            end
            return summary
        end
        return ""
    end

    action GetSummaryDataFrame returns DataFrame
        integer digits = GetFormat():GetSignificantDigits()

        TextColumn name
        TextColumn c1
        TextColumn c2
        NumberColumn r
        NumberColumn t
        NumberColumn df
        NumberColumn p
        NumberColumn ef  
        TextColumn apa

        name:SetHeader(GetFormalTestName()) 
        t:SetHeader("Statistic (T)")
        c1:SetHeader("Group1")
        c2:SetHeader("Group2")
        df:SetHeader("Degrees Of Freedom (DF)")
        p:SetHeader("Probability (P)")
        apa:SetHeader("APA report")   
        r:SetHeader("Correlation (R)")

        if IsSignificant()
            name:Add("Failed")
        else
            name:Add("Passed")
        end
        t:Add(math:Round(GetTestStatistic(), digits))
        df:Add(math:Round(GetDegreesOfFreedom(), digits))
        p:Add(math:Round(GetProbabilityValue(), digits))
        apa:Add(GetFormalNumericalResult())
        r:Add(GetCorrelation())
        if GetGroups():GetSize() = 2
            c1:Add(GetGroups():Get(0):GetHeader())
            c2:Add(GetGroups():Get(1):GetHeader())
        end
        if GetEffectSizeName() not= "" 
            ef:SetHeader("Effect Size (" + GetEffectSizeName() + ")")
            ef:Add(math:Round(GetEffectSize(), digits))
        end

        DataFrame table
        table:AddColumn(name)
        table:AddColumn(c1)
        table:AddColumn(c2)
        table:AddColumn(t)
        table:AddColumn(df)
        table:AddColumn(p)
        table:AddColumn(r)
        if ef:GetSize() > 0
            table:AddColumn(ef)
        end
        table:AddColumn(apa)
        return table
    end
end