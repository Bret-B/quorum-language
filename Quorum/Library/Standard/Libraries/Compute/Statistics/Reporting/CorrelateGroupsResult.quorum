package Libraries.Compute.Statistics.Reporting

use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Calculations.Summarize
use Libraries.Compute.Math
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.Columns.TextColumn
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Interface.Controls.Charts.all
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Web.Page.all
use Libraries.System.File
use Libraries.Compute.Statistics.Calculations.Mean
use Libraries.Compute.Statistics.Columns.TextColumn
use Libraries.Compute.Statistics.Calculations.StandardDeviation
use Libraries.Interface.Controls.Charts.ScatterPlot

/*
    This class represents data that comes back from a CorrelateGroups
    calculation (Pearson or Spearman correlation).

    Attribute: Author Andreas Stefik, Hannah Williams
*/
class CorrelateGroupsResult is StatisticalTestResult
    Array<DataFrameColumn> groups                       // The groups used in this calculation.
    boolean ranked = false 
    number correlation = 0
    text factor = ""
    Math math

    /* Returns the factor, if used in this calculation */
    action GetFactor returns text
        return factor
    end

    /* Sets the factor, if used in this calculation */
    action SetFactor(text factor)
        me:factor = factor
    end

    /* Returns the groups used in this calculation */
    action GetGroups returns Array<DataFrameColumn>
        return groups
    end

    /* Sets the groups used in this calculation */
    action SetGroups(DataFrameColumn group1, DataFrameColumn group2)
        Array<DataFrameColumn> groups
        groups:Add(group1)
        groups:Add(group2)
        me:groups = groups
    end

    action Ranked returns boolean
        return ranked
    end

    action Ranked(boolean ranked)
        me:ranked = ranked
    end

    /*
        Obtains the correlation calculated by the test. This may be of any kind.

        Attribute: Returns the correlation
    */
    action GetCorrelation returns number
        return correlation
    end

    /*
        Sets the correlation calculated by the test. This may be of any kind.

        Attribute: Parameter correlation the correlation
    */
    action SetCorrelation(number correlation)
        me:correlation = correlation
    end


    /*
        This action summarizes the result and lists it informally.
    */
    action GetSummary returns text
        if GetGroups():GetSize() = 2
            text summary = ""
            text lf = summary:GetLineFeed()
            text variable1 = GetGroups():Get(0):GetHeader()
            text variable2 = GetGroups():Get(1):GetHeader()
            integer digits = GetFormat():GetSignificantDigits()
    
            summary = summary + "A "+ GetFormalTestName() + " was performed."
            if factor not= ""
                summary = summary + lf + "Factor: " + factor
            end
           
            summary = summary + lf + "Groups: " + variable1 + " and " + variable2
    
            summary = summary + lf + "Statistic (t): " + math:Round(GetTestStatistic(), digits)
    
            summary = summary + lf + "Degrees Of Freedom: " + math:Round(GetDegreesOfFreedom(), digits)
    
            summary = summary + lf + "Probability: " + math:Round(GetProbabilityValue(), digits)
    
            summary = summary + lf + "Correlation: " + math:Round(GetCorrelation(), digits)
    
            if GetEffectSizeName() not= ""
                summary = summary + lf + "Effect Size: " + GetEffectSizeName() + " = " + math:Round(GetEffectSize(), digits)
            end
    
            return summary
        end
        return ""
    end

    /*
        This action summarizes the result and places it into formal academic language, in APA format.
        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf
    */
    action GetFormalSummary returns text
        if GetGroups():GetSize() = 2
            text summary = ""
            text lf = summary:GetLineFeed()
            text variable1 = GetGroups():Get(0):GetHeader()
            text variable2 = GetGroups():Get(1):GetHeader()
    
            if factor = ""
                summary = summary + "A "+ GetFormalTestName() + " was performed to assess the linear relationship between " 
                                    + variable1 + " and " + variable2 + "."
            else
                summary = summary + "A "+ GetFormalTestName() + " was performed on " + factor + " to assess the linear relationship between " 
                                    + variable1 + " and " + variable2 + "."
            end
    
            if correlation = -1 
                summary = summary + lf + "There was a perfect negative correlation between the two variables"
            elseif correlation = 1
                summary = summary + lf + "There was a perfect positive correlation between the two variables"
            elseif correlation = 0
                summary = summary + lf + "There was no correlation between the two variables"
            elseif correlation < 0 
                text level = ""
                if correlation <= -0.5
                    level = "strong"
                elseif correlation <= -0.3 and correlation > -0.5
                    level = "moderate"
                else
                    level = "weak"
                end
                summary = summary + lf + "There was a " + level + " negative correlation between the two variables"
            else
                text level = ""
                if correlation >= 0.5
                    level = "strong"
                elseif correlation >= 0.3 and correlation < 0.5
                    level = "moderate"
                else
                    level = "weak"
                end
                summary = summary + lf + "There was a " + level + " positive correlation between the two variables"
            end   
            summary = summary + ", " + GetFormalNumericalResult() + "."
            return summary
        end
        return ""
    end

    /*
        This action returns the formal numrical result in APA format.
        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf

        Correlate2Groups (Pearson Correlation)
        Numerical result format: r(degress of freedom) = correlation, p = probability-value
        Example:
            r(4) = .23, p = .667
   
        Correlate2RankedGroups (Spearman Correlation)
        Numerical result format: rs(degress of freedom) = correlation, p = probability-value
        Example:
            rs(4) = .03, p = .957
    */
    action GetFormalNumericalResult() returns text
        if GetGroups():GetSize() = 2
            text summary = ""
            if ranked
                summary = summary + "rs("
            else
                summary = summary + "r("
            end
            summary = summary + GetFormat():FormatDegreesOfFreedom(GetDegreesOfFreedom()) + ") = " 
                              + GetFormat():FormatCorrelation(GetCorrelation())
    
            number p = GetProbabilityValue()
            if p < GetFormat():PRECISION_LIMIT
                summary = summary + ", p < " + GetFormat():FormatProbabilityValue(p)
            else
                summary = summary + ", p = " + GetFormat():FormatProbabilityValue(p)
            end
            return summary
        end
        return ""
    end
    
    action GetDescriptiveStatisticsDataFrame returns DataFrame
        DataFrame resultFrame
        
        text group1Name = GetGroups():Get(0):GetHeader()
        text group2Name = GetGroups():Get(1):GetHeader()
        text statName = GetFormalTestName()
        integer digits = GetFormat():GetSignificantDigits()
        
        TextColumn sampleCol
        sampleCol:SetHeader("Sample")
        sampleCol:Add(group1Name)
        sampleCol:Add(group2Name)
        NumberColumn sizeCol
        // IDK HOW TO GET THE SIZE 
        sizeCol:SetHeader("Size")
        sizeCol:Add(GetGroups():GetSize())
//        sizeCol:Add(GetGroups():GetValue(group1Name):GetValue("size"))
//        sizeCol:Add(result:GetInformation():GetValue(group2Name):GetValue("size"))
        
        resultFrame:AddColumn(sampleCol)
        resultFrame:AddColumn(sizeCol)

        DataFrame groupFrame
        groupFrame:AddColumn(GetGroups():Get(0))
        groupFrame:AddColumn(GetGroups():Get(1))
        groupFrame:SelectAllColumns()
               
        Array<Mean> means = groupFrame:MeanSelectedColumns()
        NumberColumn meanCol
        meanCol:SetHeader("Mean")
        meanCol:Add(means:Get(0):GetMean())
        meanCol:Add(means:Get(1):GetMean())      

        Array<StandardDeviation> sds = groupFrame:StandardDeviationSelectedColumns()
        NumberColumn sdCol
        sdCol:SetHeader("Standard Deviation")
        sdCol:Add(sds:Get(0):GetStandardDeviation())
        sdCol:Add(sds:Get(1):GetStandardDeviation())
          
        resultFrame:AddColumn(meanCol)  
        resultFrame:AddColumn(sdCol)                  
               
        return resultFrame
    end

    action GetSummaryDataFrame returns DataFrame
        integer digits = GetFormat():GetSignificantDigits()

        TextColumn name
        TextColumn c1
        TextColumn c2
        TextColumn sig
        NumberColumn r
        NumberColumn t
        NumberColumn df
        NumberColumn p
        NumberColumn ef  
        TextColumn apa

        name:SetHeader("Technical Name")
        sig:SetHeader("Significance") 
        t:SetHeader("Statistic (T)")
        c1:SetHeader("Comparison 1")
        c2:SetHeader("Comparison 2")
        df:SetHeader("Degrees Of Freedom (DF)")
        p:SetHeader("Probability (P)")
        apa:SetHeader("APA report")   
        r:SetHeader("Correlation (R)")

        name:Add(GetFormalTestName())
        if IsSignificant()
            sig:Add("Failed")
        else
            sig:Add("Passed")
        end
        t:Add(math:Round(GetTestStatistic(), digits)) 
        df:Add(math:Round(GetDegreesOfFreedom(), digits))       
        p:Add(math:Round(GetProbabilityValue(), digits))
        apa:Add(GetFormalNumericalResult())
        r:Add(GetCorrelation())
        if GetGroups():GetSize() = 2
            c1:Add(GetGroups():Get(0):GetHeader())
            c2:Add(GetGroups():Get(1):GetHeader())
        end
        if GetEffectSizeName() not= "" 
            ef:SetHeader("Effect Size (" + GetEffectSizeName() + ")")
            ef:Add(math:Round(GetEffectSize(), digits))
        end

        DataFrame table
        table:AddColumn(name)
        table:AddColumn(c1)
        table:AddColumn(c2)
        table:AddColumn(t)
        table:AddColumn(df)        
        table:AddColumn(p)
        table:AddColumn(r)
        if ef:GetSize() > 0
            table:AddColumn(ef)
        end
        table:AddColumn(apa)
        return table
    end

    action GetChart() returns ScatterPlot        
        DataFrame frame
        frame:AddColumn(GetGroups():Get(0))
        frame:AddColumn(GetGroups():Get(1))    
        frame:SelectAllColumns()    
        ScatterPlot chart = frame:ScatterPlot()        
        chart:SetTitle("Scatter Plot")     
        // this must be there for the html to generate so it can be used in the report
        chart:Display()
        return chart
    end

    action GetReport(File file)
        WebPage page        

        //add language headers
        page:AddAttribute("xml:lang", "en")
        page:SetLanguage("en")

        //add the meta-data character set
        MetaData charset
        charset:SetCharacterSet("UTF-8")
        page:AddMetaData(charset)

        MetaData viewport
        viewport:SetContent("width=device-width, initial-scale=1")
        viewport:SetName("viewport")
        page:AddMetaData(viewport)

        page:AddIcon("http://quorumlanguage.com/media/favicon.ico")
        page:AddScript("http://quorumlanguage.com/script/quorumCharts.js")
        page:AddStylesheet("http://quorumlanguage.com/style/quorumCharts.css")
        page:SetWebPageTitle("Quorum Statistical Report: " + GetFormalTestName())

        page:Add(GetReportDiv())                          

        file:Write(page:Generate()) 
    end

    action GetReportDiv() returns Division       
        ScatterPlotWriter chartWriter
        Division divide
       
        // for summary
        divide:SetStyle("font-family: sans-serif")
        divide:AddHeading(GetFormalTestName() + " Report", 2)
        divide:AddHeading("Summary: GetSummary()", 3)
        divide:AddParagraph(GetSummary())
//        divide:AddHeading("Formal Summary: GetFormalSummary()", 3)
//        divide:AddParagraph(GetFormalSummary())
//        divide:AddHeading("Summary: GetEasySummary()", 3)
        //divide:AddParagraph(GetEasySummary())

        // for table
        divide:AddHeading("Table Summary", 3)
        WebTable table1
        WebTable table2
        table1:SetBorder(true)
        table2:SetBorder(true)     

        table1:Add(GetSummaryDataFrame())
        divide:Add(table1)
        table2:Add(GetDescriptiveStatisticsDataFrame())
        divide:Add(table2)

        divide:AddText(chartWriter:WriteOutChart(GetChart()))       
        return divide             
    end

end