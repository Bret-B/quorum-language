package Libraries.Compute.Statistics.Reporting

use Libraries.Compute.Math
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Calculations.Mean
use Libraries.Compute.Statistics.Calculations.Variance
use Libraries.Containers.Array

/*
    This class represents data that comes back from a two sample t-test 
    in CompareGroups.

    Attribute: Author Hannah Williams
*/
class Compare2GroupsResult is CompareGroupsResult
    DataFrameColumn group1 = undefined
    DataFrameColumn group2 = undefined
    number group1Variance = 0
    number group2Variance = 0
    number group1Mean = 0
    number group2Mean = 0
    boolean paired = true

    action SetGroups(DataFrameColumn group1, DataFrameColumn group2)
        me:group1 = group1
        if group1 not= undefined
            Mean mean
            group1:Calculate(mean)
            group1Mean = mean:GetMean()

            Variance variance
            variance:SetMean(group1Mean)
            group1:Calculate(variance)
            group1Variance = variance:GetVariance()
        else
            group1Mean = 0
            group1Variance = 0
        end

        me:group2 = group2
        if group2 not= undefined
            Mean mean
            group2:Calculate(mean)
            group2Mean = mean:GetMean()

            Variance variance
            variance:SetMean(group2Mean)
            group2:Calculate(variance)
            group2Variance = variance:GetVariance()
        else
            group2Mean = 0
            group2Variance = 0
        end

        Array<DataFrameColumn> groups
        groups:Add(group1)
        groups:Add(group2)
        SetGroups(groups)
    end

    /*
        Returns the mean of the first column.
    */
    action GetMean1 returns number
        return group1Mean
    end

    /*
        Sets the mean of the first column.
    */
    action SetMean1(number mean)
        group1Mean = mean
    end

    /*
        Returns the mean of the second column.
    */
    action GetMean2 returns number
        return group2Mean
    end

    /*
        Sets the mean of the second column.
    */
    action SetMean2(number mean)
        group2Mean = mean
    end

    /*
        Returns the variance of the first column.
    */
    action GetVariance1 returns number
        return group1Variance
    end

    /*
        Sets the variance of the first column.
    */
    action SetVariance1(number variance)
        group1Variance = variance
    end

    /*
        Returns the variance of the second column.
    */
    action GetVariance2 returns number
        return group2Variance
    end

    /*
        Sets the variance of the second column.
    */
    action SetVariance2(number variance)
        group2Variance = variance
    end

    action GetPaired returns boolean
        return paired
    end

    action SetPaired(boolean paired)
        me:paired = paired
    end

    /*
        This action summarizes the result and lists it informally.
    */
    action GetSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        text dependence = ""
        if paired
            dependence = "independent"
        else
            dependence = "dependent"
        end

        summary = summary + "A "+ GetFormalTestName() + " was conducted on two "+dependence+" samples."
        if GetFactor() not= ""
            summary = summary + lf + "Factor: " + GetFactor()
        end
       
        text sample1 = ""
        text sample2 = ""
        if GetGroups():GetSize() > 1
            sample1 = GetGroups():Get(0):GetHeader()
            sample2 = GetGroups():Get(1):GetHeader()
            summary = summary + lf + "Columns: " + sample1 + " and " + sample2
            if not paired
                sample1 = "difference"
                sample2 = "given"
            end
            summary = summary + lf + "Mean of " + sample1 + ": " + GetMean1()
        
            summary = summary + lf + "Mean of " + sample2 + ": " + GetMean2()
        end

        summary = summary + lf + "Statistic (t): " + GetTestStatistic()

        summary = summary + lf + "Degrees Of Freedom: " + GetDegreesOfFreedom()

        summary = summary + lf + "Probability: " + GetProbabilityValue()

        if GetEffectSizeName() not= ""
            summary = summary + lf + "Effect Size (" + GetEffectSizeName() + "): " + GetEffectSize()
        end

        return summary
    end

    /*
        This action summarizes the result and places it into formal academic language, in 
        APA format.

        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf
    */
    action GetFormalSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()

        Math math
        text m1 = GetFormat():FormatTestStatistic(GetMean1())
        text sd1 = GetFormat():FormatTestStatistic(math:SquareRoot(GetVariance1()))
        text m2 = GetFormat():FormatTestStatistic(GetMean2())
        text sd2 = GetFormat():FormatTestStatistic(math:SquareRoot(GetVariance2()))
        text dependence = ""
        if paired
            dependence = "independent"
        else
            dependence = "dependent"
        end

        if GetGroups():GetSize() > 1 
            if paired
                text sample1 = GetGroups():Get(0):GetHeader()
                text sample2 = GetGroups():Get(1):GetHeader()
                if GetFactor() = ""
                    summary = summary + "A " + GetFormalTestName() + " was conducted to compare two "+dependence+" samples " + sample1 + " and " + sample2 + "."
                else
                    summary = summary + "A " + GetFormalTestName() + " was conducted on " + GetFactor() + " to compare two "+dependence+" samples " + sample1 + " and " + sample2 + "."
                end
                if GetMean1() > GetMean2()
                    summary = summary + lf + sample1 + " had a higher overall mean (M = " + m1 + ", SD = " + sd1 + ") compared to "
                        + sample2 + " (M = " + m2 + ", SD = " + sd2 + ")"
                else
                    summary = summary + lf + sample2 + " had a higher overall mean (M = " + m2 + ", SD = " + sd2 + ") compared to "
                        + sample1 + " (M = " + m1 + ", SD = " + sd1 + ")"
                end
            else
                text sample1 = "difference"
                if GetFactor() = ""
                    summary = summary + lf + "A " + GetFormalTestName() + " was conducted to compare " + sample1 + " to a mean of " + m2 + "."
                else
                    summary = summary + lf + "A " + GetFormalTestName() + " was conducted on " + GetFactor() + " to compare " + sample1 + " to a mean of " + m2 + "."
                end
                if GetMean1() > GetMean2()
                    summary = summary + lf + sample1 + " had a higher overall mean (M = " + m1 + ", SD = " + sd1 + ")" 
                else
                    summary = summary + lf + sample1 + " had a lower overall mean (M = " + m1 + ", SD = " + sd1 + ")"
                end
            end
        end

        summary = summary + ", t(" + GetFormat():FormatDegreesOfFreedom(GetDegreesOfFreedom()) + ") = " + GetFormat():FormatTestStatistic(GetTestStatistic())
        number p = GetProbabilityValue()
        if p < GetFormat():PRECISION_LIMIT
            summary = summary + ", p < " + GetFormat():FormatProbabilityValue(p)
        else
            summary = summary + ", p = " + GetFormat():FormatProbabilityValue(p)
        end
        summary = summary + ", d = " + GetFormat():FormatTestStatistic(GetEffectSize()) + "."

        return summary
    end
end