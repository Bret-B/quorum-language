package Libraries.Compute.Statistics.Reporting

use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Statistics.Transforms.ComponentRotation
use Libraries.Compute.Math
use Libraries.Compute.Vector
use Libraries.Containers.Array
use Libraries.Interface.Controls.Charts.Chart
use Libraries.Compute.Matrix

/*
    This class represents data that comes back from a principal component analysis 
    in a PrincipalComponentAnalysis statistical test.

    Attribute: Author Hannah Williams
*/
class PrincipalComponentAnalysisResult
    Math math
    StatisticsFormatting format
    Chart screePlot = undefined
    Chart residualHistogram = undefined
    ComponentRotation rotation = undefined
    DataFrame factorLoadings = undefined
    DataFrame structure = undefined
    DataFrame residuals = undefined
    Vector sumOfSquaredLoadings = undefined
    Vector proportionVariance = undefined
    Vector proportionExplained = undefined
    Vector communality = undefined
    Vector uniqueness = undefined
    Vector complexity = undefined
    Vector eigenvalues = undefined
    Array<Vector> eigenvectors = undefined
    number meanComplexity = 0
    number rootMeanSquareOfResiduals = 0
    number modelFit = 0
    number probabilityValue = 0
    number testStatistic = 0
    number degreesOfFreedom = 0
    boolean obliqueRotation = false
    boolean orthogonalRotation = false
    text formalTestName = ""

    /*
        Returns the name of the test in formal mathematical language.

        Attribute: Returns the name of the test in mathematical language.
    */
    action GetFormalTestName returns text
        return formalTestName
    end

    /*
        Sets the name of the test in formal mathematical language.

        Attribute: Parameter formalTestName the name of the test in mathematical language.
    */
    action SetFormalTestName(text formalTestName)
        me:formalTestName = formalTestName
    end

    /*
        This action summarizes the result and lists it informally.
    */
    action GetSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        integer digits = GetFormat():GetSignificantDigits()
        
        if GetFactorLoadings() not= undefined
            integer factorsExtracted = GetFactorLoadings():GetSize()
            summary = summary + "A "+ GetFormalTestName() + " was modeled on " + factorsExtracted + " extracted components."

            if GetComponentRotation() not= undefined
                summary = summary + lf + "This model used an " + GetRotation() + " rotation."
                if Converged()
                    summary = summary + lf + "Convergence was reached in " + GetIterations() + " iterations."
                else
                    summary = summary + lf + "Convergence was not reached in " + GetMaximumIterations() + " iterations."
                end
            end

            summary = summary + lf + "Statistic (Empirical χ2): " + math:Round(GetTestStatistic(), digits)
    
            summary = summary + lf + "Degrees Of Freedom: " + math:Round(GetDegreesOfFreedom(), digits)
    
            summary = summary + lf + "Probability: " + math:Round(GetProbabilityValue(), digits)
        
            summary = summary + lf + "Model Fit: "+ math:Round(GetModelFit(), digits) 
        end

        return summary
    end

    /*
        This action summarizes the result and places it into formal academic language, in APA format.
        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf
    */
    action GetFormalSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()

        if GetFactorLoadings() not= undefined
            integer factorsExtracted = GetFactorLoadings():GetSize()
            summary = summary + "A "+ GetFormalTestName() + " was modeled on " + factorsExtracted + " extracted components."

            if GetComponentRotation() not= undefined
                summary = summary + lf + "This model used an " + GetRotation() + " rotation."
                if Converged()
                    summary = summary + lf + "Convergence was reached in " + GetIterations() + " iterations."
                else
                    summary = summary + lf + "Convergence was not reached in " + GetMaximumIterations() + " iterations."
                end
            end
        
            summary = summary + lf + "The fit of the model is "+ GetModelFit() + "."

            summary = summary + lf + GetFormalNumericalResult()
        end

        return summary
    end

    /*
        This action returns the formal numrical result in APA format.
        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf
    */
    action GetFormalNumericalResult() returns text
        text summary = ""
        summary = summary + "χ2("                
            + GetFormat():FormatDegreesOfFreedom(GetDegreesOfFreedom()) + ") = " 
            + GetFormat():FormatTestStatistic(GetTestStatistic())

        number p = GetProbabilityValue()
        if p < GetFormat():PRECISION_LIMIT
            summary = summary + ", p < " + GetFormat():FormatProbabilityValue(p)
        else
            summary = summary + ", p = " + GetFormat():FormatProbabilityValue(p)
        end
        return summary
    end

    /* Returns the statistical format for the output in the summary or formal summary. */
    action GetFormat returns StatisticsFormatting
        return format
    end

    /* Stores the statistical format for the output in the summary or formal summary. */
    action SetFormat(StatisticsFormatting format)
        me:format = format
    end

    /* Returns the scree plot chart that plots all eigenvalues. */
    action GetScreePlot returns Chart
        if screePlot = undefined and eigenvalues not= undefined
            screePlot = ScreePlot(eigenvalues)
        end
        return screePlot
    end

    /* Returns the histogram chart that shows the upper triangle of the residuals. */
    action GetResidualHistogram returns Chart
        if residualHistogram = undefined and residuals not= undefined
            residualHistogram = ResidualHistogram(residuals:ConvertToMatrix())
        end
        return residualHistogram
    end

    /* Returns a vector of eigenvalues from the pca on all variables. */
    action GetEigenvalues returns Vector
        return eigenvalues
    end

    /* Stores a vector of eigenvalues from the pca on all variables. */
    action SetEigenvalues(Vector eigenvalues)
        me:eigenvalues = eigenvalues
    end

    /* Returns an array of eigenvectors from the pca on all variables. */
    action GetEigenvectors returns Array
        return eigenvectors
    end

    /* Stores an array of eigenvectors from the pca on all variables. */
    action SetEigenvectors(Array <Vector> eigenvectors)
        me:eigenvectors = eigenvectors
    end

    /* Returns the component factor loadings dataframe from the pca. */
    /* Returns the rotated component factor loadings dataframe from the rotation, if a rotation occurred. */
    action GetFactorLoadings returns DataFrame
        return factorLoadings
    end

    /* Stores the component factor loadings dataframe from the pca. */
    /* Stores the rotated component factor loadings dataframe from the rotation, if a rotation occurred. */
    action SetFactorLoadings(DataFrame factorLoadings)
        me:factorLoadings = factorLoadings
    end

    /* Returns the residuals from the factor loadings. */
    action GetResiduals returns DataFrame
        return residuals
    end

    /* Stores the residuals from the factor loadings. */
    action SetResiduals(DataFrame residuals)
        me:residuals = residuals
    end

    /* Returns a vector of the component communalities. */
    /* For more information: https://www.statisticshowto.com/communality */
    action GetCommunality returns Vector
        return communality
    end

    /* Stores a vector of the component communalities. */
    /* For more information: https://www.statisticshowto.com/communality */
    action SetCommunality(Vector communality)
        me:communality = communality
    end

    /* Returns a vector of the component uniqueness. */
    action GetUniqueness returns Vector
        return uniqueness
    end

    /* Stores a vector of the component uniqueness. */
    action SetUniqueness(Vector uniqueness)
        me:uniqueness = uniqueness
    end

    /* Returns a vector of the hoffman complexities. */
    /* For more information: https://files.eric.ed.gov/fulltext/ED074155.pdf */
    action GetItemComplexity returns Vector
        return complexity
    end

    /* Stores a vector of the hoffman complexities. */
    /* For more information: https://files.eric.ed.gov/fulltext/ED074155.pdf */
    action SetItemComplexity(Vector complexity)
        me:complexity = complexity
    end

    /* Returns the mean value of all the hoffman complexities. */
    action GetMeanItemComplexity returns number
        return meanComplexity
    end

    /* Stores the mean value of all the hoffman complexities. */
    action SetMeanItemComplexity(number meanComplexity)
        me:meanComplexity = meanComplexity
    end

    /* Returns a vector of the component ss loadings. */
    /* When no rotation occurs, these are simply the eigenvalues */
    /* When an orthogonal rotation occurs, these are computed from the rotated component loadings */
    /* When an oblique rotation occurs, these are computed from the structure loadings produced by the rotation */
    action GetSumOfSquaredLoadings returns Vector
        return sumOfSquaredLoadings
    end

    /* Stores a vector of the component ss loadings. */
    /* When no rotation occurs, these are simply the eigenvalues */
    /* When an orthogonal rotation occurs, these are computed from the rotated component loadings */
    /* When an oblique rotation occurs, these are computed from the structure loadings produced by the rotation */
    action SetSumOfSquaredLoadings(Vector sumOfSquaredLoadings)
        me:sumOfSquaredLoadings = sumOfSquaredLoadings
    end

    /* Returns a vector of the proportion variances. */
    action GetProportionVariance returns Vector
        return proportionVariance
    end

    /* Stores a vector of the proportion variances. */
    action SetProportionVariance(Vector proportionVariance)
        me:proportionVariance = proportionVariance
    end

    /* Returns a vector of the proportion explained. */
    action GetProportionExplained returns Vector
        return proportionExplained
    end

    /* Stores a vector of the proportion explained. */
    action SetProportionExplained(Vector proportionExplained)
        me:proportionExplained = proportionExplained
    end

    /* Returns the root mean square of the residual matrix (rmsr). */
    /* If a correlation matrix was used for PCA, this is the standardized rmsr */
    /* If a covariance matrix was used for PCA, this is the non-standardized rmsr */
    action GetRootMeanSquareOfResiduals returns number
        return rootMeanSquareOfResiduals
    end

    /* Stores the root mean square of the residual matrix (rmsr). */
    /* If a correlation matrix was used for PCA, this is the standardized rmsr */
    /* If a covariance matrix was used for PCA, this is the non-standardized rmsr */
    action SetRootMeanSquareOfResiduals(number rootMeanSquareOfResiduals)
        me:rootMeanSquareOfResiduals = rootMeanSquareOfResiduals
    end

    /* Returns the fit of the model. */
    /* This is computed as (upper triangle of residuals) / (upper triangle of original correlations) - 1.0 */
    action GetModelFit returns number
        return modelFit
    end

    /* Stores the fit of the model. */
    /* This is computed as sumofsquares(upper triangle of residuals) / sumofsquares(upper triangle of original correlations) - 1.0 */
    action SetModelFit(number modelFit)
        me:modelFit = modelFit
    end

    /* Obtains the probability value (p in statistics) of the model calculated by the test. */
    action GetProbabilityValue returns number
        return probabilityValue
    end

    /* Sets the probability value (p in statistics) of the model calculated by the test. */
    action SetProbabilityValue(number probabilityValue)
        me:probabilityValue = probabilityValue
    end

    /* This indicates the test statistic of the model for the test that was run */
    action GetTestStatistic returns number
        return testStatistic
    end

    /* This sets the calculated test statistic of the model for the test that was run */
    action SetTestStatistic(number testStatistic)
        me:testStatistic = testStatistic
    end

    /* Obtains the degrees of freedom value (df in statistics) of the model calculated by the test. */
    action GetDegreesOfFreedom returns number
        return degreesOfFreedom
    end

    /* Sets the degrees of freedom value (df in statistics) of the model calculated by the test. */
    action SetDegreesOfFreedom(number degreesOfFreedom)
        me:degreesOfFreedom = degreesOfFreedom
    end

    /* Stores what type of rotation was used, if a rotation occurred. */
    action SetObliqueRotation(boolean obliqueRotation)
        me:obliqueRotation = obliqueRotation
    end

    /* Stores what type of rotation was used, if a rotation occurred. */
    action SetOrthogonalRotation(boolean orthogonalRotation)
        me:orthogonalRotation = orthogonalRotation
    end

    /* Returns the rotation object, if a rotation occurred. */
    action GetComponentRotation returns ComponentRotation
        return rotation
    end

    /* Stores the rotation object, if a rotation occurred. */
    action SetComponentRotation(ComponentRotation rotation)
        me:rotation = rotation
    end

    /* Returns the type of component rotation that took place if any. */
    action GetRotation returns text
        if obliqueRotation
            return "oblique quartimin"
        elseif orthogonalRotation
            return "orthogonal varimax"
        else
            return "none"
        end
    end

    /* Returns the structure dataframe from the rotation calculations, if a rotation occurred. */
    /* This can be calculated by the dot product between loadings and the correlation matrix (phi) from the rotation */
    action GetStructureLoadings returns DataFrame
        if GetComponentRotation() not= undefined 
            return GetComponentRotation():GetStructure()
        else
            return undefined
        end
    end

    /* Returns the rotation matrix from the rotation calculations, if a rotation occurred. */
    action GetRotationMatrix returns Matrix
        if GetComponentRotation() not= undefined 
            return GetComponentRotation():GetRotationMatrix()
        else
            return undefined
        end
    end

    /* Returns the correlation matrix (known sometimes as phi) from the rotation calculations, if a rotation occurred. */
    action GetCorrelationMatrix returns Matrix
        if GetComponentRotation() not= undefined 
            return GetComponentRotation():GetCorrelationMatrix()
        else
            return undefined
        end
    end

    /* Returns the flag of whether convergence was reached within the max iterations in rotation, if a rotation occurred. */
    action Converged returns boolean
        if GetComponentRotation() not= undefined 
            return GetComponentRotation():Converged()
        else
            return false
        end
    end

    /* Returns the flag of whether Kaiser normalization was applied to the rotation, if a rotation occurred. */
    action Normalize returns boolean
        if GetComponentRotation() not= undefined 
            return GetComponentRotation():Normalize()
        else
            return false
        end
    end

    /* Returns the epsilon value used in rotation, if a rotation occurred. */
    action GetEpsilon returns number
        if GetComponentRotation() not= undefined 
            return GetComponentRotation():GetEpsilon()
        else
            return 0
        end
    end

    /* Returns the number of iterations that actually occurred during a rotation, if a rotation occurred. */
    action GetIterations returns integer
        if GetComponentRotation() not= undefined 
            return GetComponentRotation():GetIterations()
        else
            return 0
        end
    end

    /* Returns the maximum number of iterations that can occur during a rotation, if a rotation occurs. */
    action GetMaximumIterations returns integer
        if GetComponentRotation() not= undefined 
            return GetComponentRotation():GetMaximumIterations()
        else
            return 0
        end
    end

    /*
        Scree Plot:
            This makes a chart object of the eigenvalues (aka a scree plot) that can be displayed if requested.
            Used to determine the inflection point and ultimately how many factors should be extracted.
    */
    private action ScreePlot(Vector eigenvalues) returns Chart
        DataFrame result
        NumberColumn values
        values:SetHeader("Eigenvalue")
        NumberColumn eigen
        eigen:SetHeader("Size")

        result:AddColumn(values)
        result:AddColumn(eigen)

        i = 0
        repeat while i < eigenvalues:GetSize()
            number value = eigenvalues:Get(i)
            values:Add(i + 1)
            eigen:Add(value)

            i = i + 1
        end

        result:SetSelectedFactors("Eigenvalue")
        result:SetSelectedColumns("Size")
        Chart chart = result:LineChart()
        chart:SetXAxisMinimum(1)
        chart:ShowLegend(false)
        chart:SetTitle("PCA Scree Plot")
        chart:SetXAxisTitle("eigenvalue index")
        chart:SetYAxisTitle("eigenvalue")
        return chart
    end

    /*
        Residual Histogram:
            This makes a chart object of the upper triangle of residuals that can be displayed if requested.
            Used to determine the outliers and whether the model is a good fit.
    */
    private action ResidualHistogram(Matrix residuals) returns Chart
        NumberColumn values
        values:SetHeader("Residuals")

        DataFrame result
        result:AddColumn(values)

        i = 0
        repeat while i < residuals:GetRows()
            j = i + 1
            repeat while j < residuals:GetColumns()
                number value = residuals:Get(i, j)
                values:Add(value)
                j = j + 1
            end
            i = i + 1
        end

        result:SetSelectedColumns("Residuals")
        Chart chart = result:Histogram()
        chart:SetTitle("Histogram of residuals")
        chart:ShowLegend(false)
        chart:SetXAxisTitle("residuals")
        chart:SetYAxisTitle("frequency")
        return chart
    end
end