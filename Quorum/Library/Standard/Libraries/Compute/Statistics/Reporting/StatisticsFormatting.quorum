package Libraries.Compute.Statistics.Reporting
use Libraries.Compute.Math

/*
    This class handles some basic formatting operations for statistical reporting. By default
    It uses the conventions from the American Psychological Association. See their
    Statistics guide for more information: 

    https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf

    Attribute: Author Andreas Stefik
*/
class StatisticsFormatting
    public constant number PRECISION_LIMIT = 0.001
    integer probabilitySignificantDigits = 3
    integer correlationSignificantDigits = 2
    integer criticalValueSignificantDigits = 2
    integer degreesOfFreedomSignificantDigits = 2
    integer testStatisticSignificantDigits = 2
    integer significantDigits = 3
    Math math

    /*
        This action formats specifically the p-value for a particular statistical test.
        This applies for statistics that CANNOT be greater than 1. Remove leading 0.

        Attribute: Parameter value the p-value to format
    */
    action FormatProbabilityValue(number value) returns text
        if value < PRECISION_LIMIT
            return ".001"
        end

        value = math:Round(value, probabilitySignificantDigits)
        text str = "" + value

        if str:GetCharacter(0) = "0"
            return str:GetSubtext(1, str:GetSize())
        else
            return str
        end
    end

    /*
        This action formats specifically the correlation for a particular statistical test.
        This applies for statistics that CANNOT be greater than 1. Remove leading 0.

        Attribute: Parameter value the value to format
    */
    action FormatCorrelation(number value) returns text
        value = math:Round(value, correlationSignificantDigits)
        text str = "" + value

        if str:GetCharacter(0) = "0"
            return str:GetSubtext(1, str:GetSize())
        else
            return str
        end
    end


    /*
        This action formats specifically the critical value for a particular statistical test.

        Attribute: Parameter value the value to format
    */
    action FormatCriticalValue(number value) returns text
        value = math:Round(value, criticalValueSignificantDigits)
        text str = "" + value

        if cast(integer, value) = value
            str = "" + cast(integer, value)
        end
        return str
    end

    /*
        This action formats specifically the degrees of freedom for a particular statistical test.

        Attribute: Parameter value the value to format
    */
    action FormatDegreesOfFreedom(number value) returns text
        value = math:Round(value, degreesOfFreedomSignificantDigits)
        text str = "" + value

        if cast(integer, value) = value
            str = "" + cast(integer, value)
        end
        return str
    end 

    /*
        This action formats specifically the test statistic (t-value, x2-value) for a particular statistical test.
        This applies for statistics that CAN be greater than 1. Keep the leading 0.

        Attribute: Parameter value the value to format
    */
    action FormatTestStatistic(number value) returns text
        value = math:Round(value, testStatisticSignificantDigits)
        text str = "" + value

        if cast(integer, value) = value
            str = "" + cast(integer, value)
        end
        return str
    end 


    /* The number of significant digits for p-values*/
    action GetProbabilitySignificantDigits returns integer
        return probabilitySignificantDigits
    end

    /* The number of significant digits for p-values*/
    action SetProbabilitySignificantDigits(integer probabilitySignificantDigits)
        me:probabilitySignificantDigits = probabilitySignificantDigits
    end

    /* The number of significant digits for correlations */
    action GetCorrelationSignificantDigits returns integer
        return correlationSignificantDigits
    end

    /* The number of significant digits for correlations */
    action SetCorrelationSignificantDigits(integer correlationSignificantDigits)
        me:correlationSignificantDigits = correlationSignificantDigits
    end

    /* The number of significant digits for other tests */
    action GetSignificantDigits returns integer
        return significantDigits
    end

    /* The number of significant digits for other tests */
    action SetSignificantDigits(integer significantDigits)
        me:significantDigits = significantDigits
    end

    /* The number of significant digits for test statistics (t-value, x2 value, f-value, etc) */
    action GetCriticalValueSignificantDigits returns integer
        return criticalValueSignificantDigits
    end

    /* The number of significant digits for test statistics (t-value, x2 value, f-value, etc) */
    action SetCriticalValueSignificantDigits(integer criticalValueSignificantDigits)
        me:criticalValueSignificantDigits = criticalValueSignificantDigits
    end

    /* The number of significant digits for test statistics (t-value, x2 value, f-value, etc) */
    action GetTestStatisticSignificantDigits returns integer
        return testStatisticSignificantDigits
    end

    /* The number of significant digits for test statistics (t-value, x2 value, f-value, etc) */
    action SetTestStatisticSignificantDigits(integer testStatisticSignificantDigits)
        me:testStatisticSignificantDigits = testStatisticSignificantDigits
    end

    /* The number of significant digits for degrees of freedom */
    action GetDegreesOfFreedomSignificantDigits returns integer
        return degreesOfFreedomSignificantDigits
    end

    /* The number of significant digits for degrees of freedom */
    action SetDegreesOfFreedomSignificantDigits(integer degreesOfFreedomSignificantDigits)
        me:degreesOfFreedomSignificantDigits = degreesOfFreedomSignificantDigits
    end

end