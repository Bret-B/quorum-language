package Libraries.Compute.Statistics.Reporting

use Libraries.Containers.Array
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.Columns.TextColumn
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.System.File

/*
    This class represents data that comes back from CompareNIndependentGroups 
    or CompareNDependentGroups in a CompareGroups calculation (one way anova).

    Attribute: Author Hannah Williams
*/
class CompareNGroupsResult is CompareGroupsResult
    number degreesOfFreedomBetweenGroups = 0
    number sumOfSquaresBetweenGroup = 0
    number meanSumOfSquaresBetweenGroup = 0

    number degreesOfFreedomWithinGroups = 0
    number sumOfSquaresWithinGroup = 0
    number meanSumOfSquaresWithinGroup = 0

    number degreesOfFreedomError = 0
    number sumOfSquaresError = 0
    number meanSumOfSquaresError = 0

    boolean repeatedMeasures = false
    boolean equalVariances = false

    DataFrame anovaTable

    Array<CompareGroupsResult> pairwise // The pairwise results of each two-sample t-test within the anova.
    CompareVariancesResult varianceResult

    action GetDegreesOfFreedomBetweenGroups returns number
        return degreesOfFreedomBetweenGroups
    end

    action SetDegreesOfFreedomBetweenGroups(number degreesOfFreedomBetweenGroups)
        me:degreesOfFreedomBetweenGroups = degreesOfFreedomBetweenGroups
    end

    action GetSumOfSquaresBetweenGroups returns number
        return sumOfSquaresBetweenGroup
    end

    action SetSumOfSquaresBetweenGroups(number sumOfSquaresBetweenGroup)
        me:sumOfSquaresBetweenGroup = sumOfSquaresBetweenGroup
    end

    action GetMeanSumOfSquaresBetweenGroups returns number
        return meanSumOfSquaresBetweenGroup
    end

    action SetMeanSumOfSquaresBetweenGroups(number meanSumOfSquaresBetweenGroup)
        me:meanSumOfSquaresBetweenGroup = meanSumOfSquaresBetweenGroup
    end

    action GetDegreesOfFreedomWithinGroups returns number
        return degreesOfFreedomWithinGroups
    end

    action SetDegreesOfFreedomWithinGroups(number degreesOfFreedomWithinGroups)
        me:degreesOfFreedomWithinGroups = degreesOfFreedomWithinGroups
    end

    action GetSumOfSquaresWithinGroups returns number
        return sumOfSquaresWithinGroup
    end

    action SetSumOfSquaresWithinGroups(number sumOfSquaresWithinGroup)
        me:sumOfSquaresWithinGroup = sumOfSquaresWithinGroup
    end

    action GetMeanSumOfSquaresWithinGroups returns number
        return meanSumOfSquaresWithinGroup
    end

    action SetMeanSumOfSquaresWithinGroups(number meanSumOfSquaresWithinGroup)
        me:meanSumOfSquaresWithinGroup = meanSumOfSquaresWithinGroup
    end

    action GetDegreesOfFreedomError returns number
        return degreesOfFreedomError
    end

    action SetDegreesOfFreedomError(number degreesOfFreedomError)
        me:degreesOfFreedomError = degreesOfFreedomError
    end

    action GetSumOfSquaresError returns number
        return sumOfSquaresError
    end

    action SetSumOfSquaresError(number sumOfSquaresError)
        me:sumOfSquaresError = sumOfSquaresError
    end

    action GetMeanSumOfSquaresError returns number
        return meanSumOfSquaresError
    end

    action SetMeanSumOfSquaresError(number meanSumOfSquaresError)
        me:meanSumOfSquaresError = meanSumOfSquaresError
    end

    action GetPairwiseResults returns Array<CompareGroupsResult>
        return pairwise
    end

    action SetPairwiseResults(Array<CompareGroupsResult> pairwise)
        me:pairwise = pairwise
    end

    action RepeatedMeasures returns boolean
        return repeatedMeasures
    end

    action RepeatedMeasures(boolean repeatedMeasures)
        me:repeatedMeasures = repeatedMeasures
    end

    action EqualVariances(boolean equalVariances)
        me:equalVariances = equalVariances
    end

    action GetCompareVariancesResult returns CompareVariancesResult
        return varianceResult
    end

    action SetCompareVariancesResult(CompareVariancesResult varianceResult)
        me:varianceResult = varianceResult
    end

    /* 
        This action summarizes the pairwise results if computes and lists them.
    */
    action GetPairwiseSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()

        integer i = 0
        repeat while i < pairwise:GetSize()
            CompareGroupsResult pair = pairwise:Get(i)
            if i = 0
                summary = summary + "A "+ pair:GetFormalTestName() + " was conducted."
            end
            if pair:GetGroups():GetSize() > 1
                summary = summary + lf + pair:GetGroups():Get(0):GetHeader() + "-" + pair:GetGroups():Get(1):GetHeader()
                summary = summary + lf + "  Probability: " + pair:GetProbabilityValue()
                if pair:GetProbabilityValue() <= pair:GetSignificanceLevel()
                    summary = summary + " ** significant **"
                end
            end
            i = i + 1
        end

        return summary
    end

    /*
        This action summarizes the result and lists it informally.
    */
    action GetSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()

        if repeatedMeasures
            summary = summary + "A "+ GetFormalTestName() + " was conducted across " + GetGroups():GetSize() + " dependent samples."
        else
            summary = summary + "A "+ GetFormalTestName() + " was conducted across " + GetGroups():GetSize() + " independent samples."
        end
        if GetFactor() not= ""
            summary = summary + lf + "Factor: " + GetFactor()
        end

        if equalVariances
            summary = summary + lf + "Sum Of Squares Between Groups: " + sumOfSquaresBetweenGroup
    
            summary = summary + lf + "Degrees Of Freedom Between Groups: " + degreesOfFreedomBetweenGroups
    
            summary = summary + lf + "Mean Sum Of Squares Between Groups: " + meanSumOfSquaresBetweenGroup
    
            summary = summary + lf + "Sum Of Squares Within Groups: " + sumOfSquaresWithinGroup
    
            summary = summary + lf + "Degrees Of Freedom Within Groups: " + degreesOfFreedomWithinGroups
    
            summary = summary + lf + "Mean Sum Of Squares Within Groups: " + meanSumOfSquaresWithinGroup
        else
            summary = summary + lf + "Degrees Of Freedom Between Groups: " + degreesOfFreedomBetweenGroups
    
            summary = summary + lf + "Degrees Of Freedom Within Groups: " + degreesOfFreedomWithinGroups
        end

        if repeatedMeasures
            summary = summary + lf + "Sum Of Squares Error: " + sumOfSquaresError
    
            summary = summary + lf + "Degrees Of Freedom Error: " + degreesOfFreedomError
    
            summary = summary + lf + "Mean Sum Of Squares Error: " + meanSumOfSquaresError

            summary = summary + lf + "Statistic (F) Between Groups: " + GetTestStatistic()

            summary = summary + lf + "Probability Between Groups: " + GetProbabilityValue()
        else
            summary = summary + lf + "Statistic (F): " + GetTestStatistic()

            summary = summary + lf + "Probability: " + GetProbabilityValue()
        end

        if GetEffectSizeName() not= ""
            summary = summary + lf + "Effect Size (" + GetEffectSizeName() + "): " + GetEffectSize()
        end

        return summary
    end

    /*
        This action summarizes the result and places it into formal academic language, in 
        APA format.

        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf
    */
    action GetFormalSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()

        if repeatedMeasures
            if GetFactor() = ""
                summary = summary + "A " + GetFormalTestName() + " was conducted across " + GetGroups():GetSize() + " dependent samples."
            else
                summary = summary + "A " + GetFormalTestName() + " was conducted on " + GetFactor() + " across " + GetGroups():GetSize() + " dependent samples."
            end

            if varianceResult:GetCorrection() not= 1
                summary = summary  + lf + varianceResult:GetFormalTestName() + " indicated that the assumption of sphericity had been violated, " 
                + varianceResult:GetFormalNumericalResult() + ", therefore the degrees of freedom were corrected using Greenhouse-Geisser estimates of sphericity "
                + "(ε ="+GetFormat():FormatWithoutLeadingZero(varianceResult:GetCorrection(), 2)+")."
            end
        else
            if GetFactor() = ""
                summary = summary + "A " + GetFormalTestName() + " was conducted across " + GetGroups():GetSize() + " independent samples."
            else
                summary = summary + "A " + GetFormalTestName() + " was conducted on " + GetFactor() + " across " + GetGroups():GetSize() + " independent samples."
            end
        end

        if GetProbabilityValue() <= GetSignificanceLevel()
            //P-value ≤ α: The differences between some of the means are statistically significant (Reject H0)
            summary = summary + lf + "There was statistically significant differences in means of at least two groups"
        else
            //P-value > α: The differences between the means are not statistically significant (Fail to reject H0)
            summary = summary + lf + "There was not statistically significant differences in means"
        end

        summary = summary + ", " + GetFormalNumericalResult() + "."

        return summary
    end

    action GetFormalNumericalResult() returns text
        text summary = ""
        if repeatedMeasures
            summary = summary + "F(" + GetFormat():FormatDegreesOfFreedom(degreesOfFreedomBetweenGroups) + ", " 
                                       + GetFormat():FormatDegreesOfFreedom(degreesOfFreedomError) + ") = " 
                                       + GetFormat():FormatTestStatistic(GetTestStatistic())
        else
            if equalVariances
                summary = summary + "F(" + GetFormat():FormatDegreesOfFreedom(degreesOfFreedomBetweenGroups) + ", " 
                                       + GetFormat():FormatDegreesOfFreedom(degreesOfFreedomWithinGroups) + ") = " 
                                       + GetFormat():FormatTestStatistic(GetTestStatistic())
            else
                summary = summary + "Welch's F(" + GetFormat():FormatDegreesOfFreedom(degreesOfFreedomBetweenGroups) + ", " 
                                       + GetFormat():FormatDegreesOfFreedom(degreesOfFreedomWithinGroups) + ") = " 
                                       + GetFormat():FormatTestStatistic(GetTestStatistic())
            end
        end
        number p = GetProbabilityValue()
        if p < GetFormat():PRECISION_LIMIT
            summary = summary + ", p < " + GetFormat():FormatProbabilityValue(p)
        else
            summary = summary + ", p = " + GetFormat():FormatProbabilityValue(p)
        end
        if repeatedMeasures or equalVariances
            summary = summary + ", η2 = " + GetFormat():FormatWithoutLeadingZero(GetEffectSize(),3)
        else
            summary = summary + ", ω2 = " + GetFormat():FormatWithoutLeadingZero(GetEffectSize(),3)
        end

        return summary
    end


    private action ConvertResultToDataFrame returns DataFrame
        number nan = 0

        TextColumn source
        source:SetHeader("Source")
        source:Add("Between Groups")
        source:Add("Within Groups")
        if repeatedMeasures
            source:Add("Error")
        end
        source:Add("Total")

        NumberColumn ss
        ss:SetHeader("Sum Of Squares")
        ss:Add(sumOfSquaresBetweenGroup)
        ss:Add(sumOfSquaresWithinGroup)
        if repeatedMeasures
            ss:Add(sumOfSquaresError)
        end
        ss:Add(sumOfSquaresBetweenGroup + sumOfSquaresWithinGroup + sumOfSquaresError)

        NumberColumn df
        df:SetHeader("Degrees Of Freedom")
        df:Add(degreesOfFreedomBetweenGroups)
        df:Add(degreesOfFreedomWithinGroups)
        if repeatedMeasures
            df:Add(degreesOfFreedomError)
        end
        df:Add(degreesOfFreedomBetweenGroups + degreesOfFreedomWithinGroups + degreesOfFreedomError)


        NumberColumn ms
        ms:SetHeader("Mean Sum Of Squares")
        ms:Add(meanSumOfSquaresBetweenGroup)
        ms:Add(meanSumOfSquaresWithinGroup)
        if repeatedMeasures
            ms:Add(meanSumOfSquaresError)
        end
        ms:Add(nan:GetNotANumberValue())

        NumberColumn f
        f:SetHeader("F Statistic")
        f:Add(GetTestStatistic())
        f:Add(nan:GetNotANumberValue()) // Not implemented yet.
        if repeatedMeasures
            f:Add(nan:GetNotANumberValue())
        end
        f:Add(nan:GetNotANumberValue())

        NumberColumn p
        p:SetHeader("Probability Value")
        p:Add(GetProbabilityValue())
        p:Add(nan:GetNotANumberValue()) // Not implemented yet.
        if repeatedMeasures
            p:Add(nan:GetNotANumberValue())
        end
        p:Add(nan:GetNotANumberValue())

        DataFrame anovaTable
        anovaTable:AddColumn(source)
        anovaTable:AddColumn(ss)
        anovaTable:AddColumn(df)
        anovaTable:AddColumn(ms)
        anovaTable:AddColumn(f)
        anovaTable:AddColumn(p)
        return anovaTable
    end

    /*
        This action saves this result to disk at the position of the current file. To conduct the 
        conversion, the file extension is used. Only Comma Separated Values (CSV) is currently 
        supported.

        Attribute: Parameter file the location of where to save the file.

        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareGroups
    
        DataFrame frame
        frame:Load("data.csv")
        frame:AddSelectedColumns(0)
        frame:AddSelectedColumns(1)
        frame:AddSelectedColumns(2)
    
        CompareGroups compare = frame:CompareSelectedColumns()
        compare:GetResult():Save("anova.csv")
    */
    action Save(text path)
        File file
        file:SetPath(path)
        if file:GetFileExtension() = "csv"
            ConvertResultToDataFrame():Save(path)
        else
           alert("Save currently only supports Comma Separated Values (CSV), please use a .csv file extension.")
        end
    end
end