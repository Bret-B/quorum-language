package Libraries.Compute.Statistics.Reporting

use Libraries.Containers.Array
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.Columns.TextColumn
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.System.File
use Libraries.Compute.Math
use Libraries.Compute.Statistics.Distributions.VarianceRatioDistribution

/*
    This class represents data that comes back from an N-sample test 
    in CompareGroups:
        CompareNDependentGroups 
        CompareNIndependentGroups
        CompareNDependentRankedGroups 
        CompareNIndependentRankedGroups

    Attribute: Author Hannah Williams
*/
class CompareNGroupsResult is CompareGroupsResult
    Math math
    /* The pairwise results of each two-sample tests within the post hoc test (if conducted) */
    Array<CompareGroupsResult> pairwise 

    /* Saved result for normal distribution tests (if conducted) */
    Array<CompareDistributionsResult> distributionResults = undefined

    /* Saved result for equal variance test (if conducted) */
    CompareVariancesResult varianceResult = undefined

    number degreesOfFreedomBetweenGroups = 0
    number sumOfSquaresBetweenGroups = 0
    number meanSumOfSquaresBetweenGroups = 0

    number degreesOfFreedomBetweenSubjects = 0
    number sumOfSquaresBetweenSubjects = 0
    number meanSumOfSquaresBetweenSubjects = 0

    number degreesOfFreedomWithinGroups = 0
    number sumOfSquaresWithinGroups = 0
    number meanSumOfSquaresWithinGroups = 0

    number degreesOfFreedomError = 0
    number sumOfSquaresError = 0
    number meanSumOfSquaresError = 0

    integer sampleSize = 0

    action SetGroups(Array<DataFrameColumn> groups)
        if RepeatedMeasures()
            if groups:GetSize() > 0
                sampleSize = groups:Get(0):GetSize()
            end
        else
            i = 0
            repeat while i < groups:GetSize()
                sampleSize = sampleSize + groups:Get(i):GetSize()
                i = i + 1
            end
        end
        parent:CompareGroupsResult:SetGroups(groups)
    end

    action SetBetweenGroups(number sumOfSquares, number degreesOfFreedom)
        sumOfSquaresBetweenGroups = sumOfSquares
        degreesOfFreedomBetweenGroups = degreesOfFreedom
        if degreesOfFreedom not= 0
            meanSumOfSquaresBetweenGroups = sumOfSquares / degreesOfFreedom
        end    
    end

    action GetDegreesOfFreedomBetweenGroups returns number
        return degreesOfFreedomBetweenGroups
    end

    action GetSumOfSquaresBetweenGroups returns number
        return sumOfSquaresBetweenGroups
    end

    action GetMeanSumOfSquaresBetweenGroups returns number
        return meanSumOfSquaresBetweenGroups
    end

    action SetBetweenSubjects(number sumOfSquares, number degreesOfFreedom)
        sumOfSquaresBetweenSubjects = sumOfSquares
        degreesOfFreedomBetweenSubjects = degreesOfFreedom
        if degreesOfFreedom not= 0
            meanSumOfSquaresBetweenSubjects = sumOfSquares / degreesOfFreedom
        end
    end

    action GetDegreesOfFreedomBetweenSubjects returns number
        return degreesOfFreedomBetweenSubjects
    end

    action GetSumOfSquaresBetweenSubjects returns number
        return sumOfSquaresBetweenSubjects
    end

    action GetMeanSumOfSquaresBetweenSubjects returns number
        return meanSumOfSquaresBetweenSubjects
    end

    action SetWithinGroups(number sumOfSquares, number degreesOfFreedom)
        sumOfSquaresWithinGroups = sumOfSquares
        degreesOfFreedomWithinGroups = degreesOfFreedom
        if degreesOfFreedom not= 0
            meanSumOfSquaresWithinGroups = sumOfSquares / degreesOfFreedom
        end
    end

    action GetDegreesOfFreedomWithinGroups returns number
        return degreesOfFreedomWithinGroups
    end

    action GetSumOfSquaresWithinGroups returns number
        return sumOfSquaresWithinGroups
    end

    action GetMeanSumOfSquaresWithinGroups returns number
        return meanSumOfSquaresWithinGroups
    end

    action SetError(number sumOfSquares, number degreesOfFreedom)
        sumOfSquaresError = sumOfSquares
        degreesOfFreedomError = degreesOfFreedom
        if degreesOfFreedom not= 0
            meanSumOfSquaresError = sumOfSquares / degreesOfFreedom
        end
    end

    action GetDegreesOfFreedomError returns number
        return degreesOfFreedomError
    end

    action GetSumOfSquaresError returns number
        return sumOfSquaresError
    end

    action GetMeanSumOfSquaresError returns number
        return meanSumOfSquaresError
    end

    // Saved result for equal variance test (if conducted)
    action GetVarianceResult returns CompareVariancesResult
        return varianceResult
    end

    action SetVarianceResult(CompareVariancesResult varianceResult)
        me:varianceResult = varianceResult
    end

    // Saved results for normal distribution test (if conducted)
    action GetDistributionResults returns Array<CompareDistributionsResult>
        return distributionResults
    end

    action SetDistributionResults(Array<CompareDistributionsResult> distributionResults)
        me:distributionResults = distributionResults
    end

    // Saved results for pairwise post hoc test (if conducted)
    action GetPairwiseResults returns Array<CompareGroupsResult>
        return pairwise
    end

    action SetPairwiseResults(Array<CompareGroupsResult> pairwise)
        me:pairwise = pairwise
    end

    action GetNullHypothesis returns text
        if GetGroups():GetSize() >= 2
            if Ranked()
                return GetRankedNullHypothesis()
            end
            return "There is no significant difference in the means"
        end
        return ""
    end

    private action GetRankedNullHypothesis returns text
        return "There is no significant difference in the medians"
    end

    action GetAlternativeHypothesis returns text
        if GetGroups():GetSize() >= 2
            if Ranked()
                return GetRankedNullHypothesis()
            end
            return "At least one of the means is significantly different from the others"
        end
        return ""
    end

    private action GetRankedAlternativeHypothesis returns text
        return "At least one of the medians is significantly different from the others"
    end

    /*
        This action summarizes the result and lists it informally.
    */
    action GetSummary returns text
        if GetGroups():GetSize() >= 2
            if Ranked()
                return GetRankedSummary()
            end
            text summary = ""
            text lf = summary:GetLineFeed()
            integer digits = GetFormat():GetSignificantDigits()
    
            if RepeatedMeasures()
                summary = summary + "A "+ GetFormalTestName() + " was conducted across " + GetGroups():GetSize() + " dependent samples."
            else
                summary = summary + "A "+ GetFormalTestName() + " was conducted across " + GetGroups():GetSize() + " independent samples."
            end
            if GetFactor() not= ""
                summary = summary + lf + "Factor: " + GetFactor()
            end
    
            if EqualVariances()
                summary = summary + lf + "Sum Of Squares Between Groups: " + math:Round(sumOfSquaresBetweenGroups, digits)
        
                summary = summary + lf + "Degrees Of Freedom Between Groups: " + math:Round(degreesOfFreedomBetweenGroups, digits)
        
                summary = summary + lf + "Mean Sum Of Squares Between Groups: " + math:Round(meanSumOfSquaresBetweenGroups, digits)
        
                summary = summary + lf + "Sum Of Squares Within Groups: " + math:Round(sumOfSquaresWithinGroups, digits)
        
                summary = summary + lf + "Degrees Of Freedom Within Groups: " + math:Round(degreesOfFreedomWithinGroups, digits)
        
                summary = summary + lf + "Mean Sum Of Squares Within Groups: " + math:Round(meanSumOfSquaresWithinGroups, digits)
            else
                summary = summary + lf + "Degrees Of Freedom Between Groups: " + math:Round(degreesOfFreedomBetweenGroups, digits)
        
                summary = summary + lf + "Degrees Of Freedom Within Groups: " + math:Round(degreesOfFreedomWithinGroups, digits)
            end
    
            if RepeatedMeasures()
                summary = summary + lf + "Sum Of Squares Error: " + math:Round(sumOfSquaresError, digits)
        
                summary = summary + lf + "Degrees Of Freedom Error: " + math:Round(degreesOfFreedomError, digits)
        
                summary = summary + lf + "Mean Sum Of Squares Error: " + math:Round(meanSumOfSquaresError, digits)
    
                summary = summary + lf + "Statistic (F) Between Groups: " + math:Round(GetTestStatistic(), digits)
    
                summary = summary + lf + "Probability Between Groups: " + math:Round(GetProbabilityValue(), digits)
            else
                if EqualVariances()
                    summary = summary + lf + "Statistic (F): " + math:Round(GetTestStatistic(), digits)
                else
                    summary = summary + lf + "Statistic (Welch F): " + math:Round(GetTestStatistic(), digits)
                end
    
                summary = summary + lf + "Probability: " + math:Round(GetProbabilityValue(), digits)
            end
    
            if GetEffectSizeName() not= ""
                summary = summary + lf + "Effect Size (" + GetEffectSizeName() + "): " + math:Round(GetEffectSize(), digits)
            end
    
            return summary
        end
        return ""
    end

    private action GetRankedSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        integer digits = GetFormat():GetSignificantDigits()

        text dependence = ""
        if RepeatedMeasures()
            dependence = "dependent"
        else
            dependence = "independent"
        end

        summary = summary + "A "+ GetFormalTestName() + " was conducted across " + GetGroups():GetSize() + " " + dependence +" samples."
        if GetFactor() not= ""
            summary = summary + lf + "Factor: " + GetFactor()
        end

        if RepeatedMeasures()
            summary = summary + lf + "Statistic (Friedman χ2): " + math:Round(GetTestStatistic(), digits)
        else
            summary = summary + lf + "Statistic (H): " + math:Round(GetTestStatistic(), digits)
        end

        summary = summary + lf + "Degrees Of Freedome: " + math:Round(GetDegreesOfFreedom(), digits)

        summary = summary + lf + "Probability: " + math:Round(GetProbabilityValue(), digits)

        summary = summary + lf + "Effect Size (" + GetEffectSizeName() + "): " + math:Round(GetEffectSize(), digits)

        return summary
    end

    /*
        This action summarizes the result and places it into formal academic language, in APA format.
        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf
    */
    action GetFormalSummary returns text
        if GetGroups():GetSize() >= 2
            if Ranked()
                return GetRankedFormalSummary()
            end
            text summary = ""
            text lf = summary:GetLineFeed()
    
            if RepeatedMeasures()
                if GetFactor() = ""
                    summary = summary + "A " + GetFormalTestName() + " was conducted across " + GetGroups():GetSize() + " dependent samples."
                else
                    summary = summary + "A " + GetFormalTestName() + " was conducted on " + GetFactor() + " across " + GetGroups():GetSize() + " dependent samples."
                end
    
                if varianceResult not= undefined and varianceResult:GetCorrection() not= 1
                    summary = summary  + lf + varianceResult:GetFormalTestName() + " indicated that the assumption of sphericity had been violated, " 
                    + varianceResult:GetFormalNumericalResult() + ", therefore the degrees of freedom were corrected using Greenhouse-Geisser estimates of sphericity "
                    + "(ε ="+GetFormat():FormatWithoutLeadingZero(varianceResult:GetCorrection(), 2)+")."
                end
            else
                if GetFactor() = ""
                    summary = summary + "A " + GetFormalTestName() + " was conducted across " + GetGroups():GetSize() + " independent samples."
                else
                    summary = summary + "A " + GetFormalTestName() + " was conducted on " + GetFactor() + " across " + GetGroups():GetSize() + " independent samples."
                end
            end

            if GetProbabilityValue() <= GetSignificanceLevel()
                //P-value ≤ α: The differences between some of the means are statistically significant (Reject H0)
                summary = summary + lf + "There was statistically significant differences in means of at least two groups"
            else
                //P-value > α: The differences between the means are not statistically significant (Fail to reject H0)
                summary = summary + lf + "There was not statistically significant differences in means"
            end
    
            summary = summary + ", " + GetFormalNumericalResult() + "."
    
            return summary
        end
        return ""
    end

    private action GetRankedFormalSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()

        text dependence = ""
        if RepeatedMeasures()
            dependence = "dependent"
        else
            dependence = "independent"
        end

        summary = summary + "A " + GetFormalTestName() + " conducted across " + GetGroups():GetSize()
                            + " " + dependence + " samples"

        if IsSignificant()
            summary = summary + " indicated that there was a statistically significant difference between the samples"
        else
            summary = summary + " indicated that there was not a statistically significant difference between the samples"
        end
        summary = summary + ", " + GetFormalNumericalResult() + "."

        return summary
    end

    /*
        This action returns the formal numrical result in APA format.
        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf

        CompareNDependentGroups (A One-Way Repeated Measures ANOVA)
        Numerical result format: F(between-groups df, within-groups df) = f-statistic, p = probability-value, η2 = effect-size
        Example:
            F(3, 1000.5) = 1.35, p = .258, η2 = .003
   
        CompareNIndependentGroups (A One-Way ANOVA)
        Numerical result format: F(between-groups df, within-groups df) = f-statistic, p = probability-value, η2 = effect-size
        Example:
            F(3, 1334) = 2.97, p = .031, η2 = .007

        CompareNDependentRankedGroups (A Friedman Test)
        Numerical result format: χ2(degrees of freedom, N = sample size) = chi-squared-statistic, p = probability-value, W  = effect-size
        Example:
            χ2(2, N = 1338) = 2095.99, p < .001, W  = .78.
   
        Compare2IndependentRankedGroups (A Kruskal-Wallis Test)
        Numerical result format: H(degrees of freedom, N = total size) = h-statistic, p = probability-value, Ε^2  = effect-size
        Example:
            H(2, N = 4014) = 2777.06, p < .001, Ε^2  = 2777.06
    */
    action GetFormalNumericalResult() returns text
        if GetGroups():GetSize() >= 2
            if Ranked()
                return GetRankedFormalNumericalResult()
            end
            text summary = ""
            if RepeatedMeasures()
                summary = summary + "F(" + GetFormat():FormatDegreesOfFreedom(degreesOfFreedomBetweenGroups) + ", " 
                                           + GetFormat():FormatDegreesOfFreedom(degreesOfFreedomError) + ") = " 
                                           + GetFormat():FormatTestStatistic(GetTestStatistic())
            else
                if EqualVariances()
                    summary = summary + "F(" + GetFormat():FormatDegreesOfFreedom(degreesOfFreedomBetweenGroups) + ", " 
                                           + GetFormat():FormatDegreesOfFreedom(degreesOfFreedomWithinGroups) + ") = " 
                                           + GetFormat():FormatTestStatistic(GetTestStatistic())
                else
                    summary = summary + "Welch's F(" + GetFormat():FormatDegreesOfFreedom(degreesOfFreedomBetweenGroups) + ", " 
                                           + GetFormat():FormatDegreesOfFreedom(degreesOfFreedomWithinGroups) + ") = " 
                                           + GetFormat():FormatTestStatistic(GetTestStatistic())
                end
            end
            number p = GetProbabilityValue()
            if p < GetFormat():PRECISION_LIMIT
                summary = summary + ", p < " + GetFormat():FormatProbabilityValue(p)
            else
                summary = summary + ", p = " + GetFormat():FormatProbabilityValue(p)
            end
            if RepeatedMeasures() or EqualVariances()
                summary = summary + ", η2 = " + GetFormat():FormatWithoutLeadingZero(GetEffectSize(),3)
            else
                summary = summary + ", ω2 = " + GetFormat():FormatWithoutLeadingZero(GetEffectSize(),3)
            end

            return summary
        end
        return ""
    end

    private action GetRankedFormalNumericalResult returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        if RepeatedMeasures()
            summary = summary + "H(" + GetFormat():FormatDegreesOfFreedom(GetDegreesOfFreedom()) 
                                + ", N = " + sampleSize + ") = " 
                                + GetFormat():FormatTestStatistic(GetTestStatistic())
        else
            summary = summary + "χ2(" + GetFormat():FormatDegreesOfFreedom(GetDegreesOfFreedom()) 
                                + ", N = " + sampleSize + ") = " 
                                + GetFormat():FormatTestStatistic(GetTestStatistic())
        end

        number p = GetProbabilityValue()
        if p < GetFormat():PRECISION_LIMIT
            summary = summary + ", p < " + GetFormat():FormatProbabilityValue(p)
        else
            summary = summary + ", p = " + GetFormat():FormatProbabilityValue(p)
        end
        if RepeatedMeasures()
            summary = summary + ", W  = " + GetFormat():FormatCorrelation(GetEffectSize())
        else
            summary = summary + ", ε2  = " + GetFormat():FormatCorrelation(GetEffectSize())
        end
        return summary
    end

    action GetSummaryDataFrame returns DataFrame
        if Ranked()
            return GetRankedSummaryDataFrame()
        end
        boolean welch = not RepeatedMeasures() and not EqualVariances()
        integer digits = GetFormat():GetSignificantDigits()
        VarianceRatioDistribution fDistribution

        TextColumn name
        name:SetHeader(GetFormalTestName())
        if IsSignificant()
            name:Add("Failed")
        else
            name:Add("Passed")
        end

        TextColumn source
        source:SetHeader("Source")
        source:Add("Between Groups")
        if RepeatedMeasures()
            source:Add("Between Subjects")
            source:Add("Within Groups")
            source:Add("Error")
        else
            source:Add("Within Groups")
        end
        source:Add("Total")

        NumberColumn ss
        ss:SetHeader("Sum Of Squares (SS)")
        ss:Add(math:Round(sumOfSquaresBetweenGroups, digits))
        if RepeatedMeasures()
            ss:Add(math:Round(sumOfSquaresBetweenSubjects, digits))
        end
        ss:Add(math:Round(sumOfSquaresWithinGroups, digits))
        if RepeatedMeasures()
            ss:Add(math:Round(sumOfSquaresError, digits))
        end
        ss:Add(math:Round(math:Round(sumOfSquaresBetweenGroups, digits) + math:Round(sumOfSquaresWithinGroups, digits), digits))

        NumberColumn df
        df:SetHeader("Degrees Of Freedom (DF)")
        df:Add(math:Round(degreesOfFreedomBetweenGroups, digits))
        if RepeatedMeasures()
            df:Add(math:Round(degreesOfFreedomBetweenSubjects, digits))
        end
        df:Add(math:Round(degreesOfFreedomWithinGroups, digits))
        if RepeatedMeasures()
            df:Add(math:Round(degreesOfFreedomError, digits))
        end
        df:Add(math:Round(math:Round(degreesOfFreedomBetweenGroups, digits) + math:Round(degreesOfFreedomWithinGroups, digits), digits))


        NumberColumn ms
        ms:SetHeader("Mean Sum Of Squares (MS)")
        ms:Add(math:Round(meanSumOfSquaresBetweenGroups, digits))
        if RepeatedMeasures()
            ms:Add(math:Round(meanSumOfSquaresBetweenSubjects, digits))
        end
        ms:Add(math:Round(meanSumOfSquaresWithinGroups, digits))
        if RepeatedMeasures()
            ms:Add(math:Round(meanSumOfSquaresError, digits))
        end

        number pBetweenSubjects = 0
        number pWithinGroups = 0
        NumberColumn f
        f:SetHeader("Statistic (F)")
        f:Add(math:Round(GetTestStatistic(), digits))
        if RepeatedMeasures()
            number fBS = meanSumOfSquaresBetweenSubjects / meanSumOfSquaresError        
            fDistribution:Setup(degreesOfFreedomBetweenSubjects, degreesOfFreedomError)
            pBetweenSubjects = 1.0 - fDistribution:CumulativeDistribution(fBS)
            f:Add(math:Round(fBS, digits))

            number fWG = meanSumOfSquaresWithinGroups / meanSumOfSquaresError        
            fDistribution:Setup(degreesOfFreedomWithinGroups, degreesOfFreedomError)
            pWithinGroups = 1.0 - fDistribution:CumulativeDistribution(fWG)
            f:Add(math:Round(fWG, digits))
        end

        NumberColumn p
        p:SetHeader("Probability (P)")
        p:Add(math:Round(GetProbabilityValue(), digits))
        if RepeatedMeasures()
            p:Add(math:Round(pBetweenSubjects, digits))
            p:Add(math:Round(pWithinGroups, digits))
        end

        DataFrame anovaTable
        anovaTable:AddColumn(name)
        anovaTable:AddColumn(source)
        if not welch
            anovaTable:AddColumn(ss)
        end
        anovaTable:AddColumn(df)
        if not welch
            anovaTable:AddColumn(ms)
        end
        anovaTable:AddColumn(f)
        anovaTable:AddColumn(p)

        if GetEffectSizeName() not= "" 
            number totalSS = 0 
            if GetEffectSize() not= 0
                totalSS = sumOfSquaresBetweenGroups / GetEffectSize()
            end
            NumberColumn effect
            effect:SetHeader("Effect Size (" + GetEffectSizeName() + ")")
            effect:Add(math:Round(GetEffectSize(), digits))
            if RepeatedMeasures() 
                if totalSS not= 0
                    effect:Add(math:Round(sumOfSquaresBetweenSubjects/totalSS, digits))
                    effect:Add(math:Round(sumOfSquaresWithinGroups/totalSS, digits))
                end
            end
            anovaTable:AddColumn(effect)
        end

        if GetDistributionResults() not= undefined 
            TextColumn norm
            norm:SetHeader("Normality Test")
            boolean failed = false
            i = 0
            repeat while i < GetDistributionResults():GetSize()
                if GetDistributionResults():Get(i):IsSignificant()
                    failed = true
                end
                i = i + 1
            end
            if failed
                norm:Add("Failed")
            else
                norm:Add("Passed")
            end
            anovaTable:AddColumn(norm)
        end

        if GetVarianceResult() not= undefined 
            TextColumn var
            if RepeatedMeasures()
                var:SetHeader("Sphericity Test")
            else
                var:SetHeader("Variance Equality Test")
            end
            if GetVarianceResult():IsSignificant()
                var:Add("Failed")
            else
                var:Add("Passed")
            end
            anovaTable:AddColumn(var)
        end

        if RepeatedMeasures() and GetVarianceResult() not= undefined and GetVarianceResult():IsSignificant()
            number correction = GetVarianceResult():GetCorrection()
            if correction not= 1
                NumberColumn gg
                gg:SetHeader(GetVarianceResult():GetCorrectionName())
                gg:Add(math:Round(correction, digits))

                NumberColumn ggdf
                ggdf:SetHeader("Adjusted DF")

                NumberColumn ggms
                ggms:SetHeader("Adjusted MS")
                
                NumberColumn ggp
                ggp:SetHeader("Adjusted P")

                number dferror = degreesOfFreedomError * correction
                number mse = sumOfSquaresError / dferror

                number dfbg = degreesOfFreedomBetweenGroups * correction
                number msbg = sumOfSquaresBetweenGroups / dfbg
                number fbg = msbg / mse        
                fDistribution:Setup(dfbg, dferror)
                number newp = 1.0 - fDistribution:CumulativeDistribution(fbg)
                ggdf:Add(math:Round(dfbg, digits))
                ggms:Add(math:Round(msbg, digits))
                ggp:Add(math:Round(newp, digits))

                number dfbs = degreesOfFreedomBetweenSubjects * correction
                number msbs = sumOfSquaresBetweenSubjects / dfbs
                number fbs = msbs / mse        
                fDistribution:Setup(dfbs, dferror)
                newp = 1.0 - fDistribution:CumulativeDistribution(fbs)
                ggdf:Add(math:Round(dfbs, digits))
                ggms:Add(math:Round(msbs, digits))
                ggp:Add(math:Round(newp, digits))

                number dfwg = degreesOfFreedomWithinGroups * correction
                number mswg = sumOfSquaresWithinGroups / dfwg
                number fwg = mswg / mse        
                fDistribution:Setup(dfwg, dferror)
                newp = 1.0 - fDistribution:CumulativeDistribution(fwg)
                ggdf:Add(math:Round(dfwg, digits))
                ggms:Add(math:Round(mswg, digits))
                ggp:Add(math:Round(newp, digits))

                ggdf:Add(math:Round(dferror, digits))
                ggms:Add(math:Round(mse, digits))

                anovaTable:AddColumn(gg)
                anovaTable:AddColumn(ggdf)
                anovaTable:AddColumn(ggms)
                anovaTable:AddColumn(ggp)
            end
        end

        TextColumn apa
        apa:SetHeader("APA report")
        apa:Add(GetFormalNumericalResult())
        anovaTable:AddColumn(apa)

        return anovaTable
    end

    private action GetRankedSummaryDataFrame returns DataFrame
        integer digits = GetFormat():GetSignificantDigits()
  
        TextColumn name
        name:SetHeader(GetFormalTestName()) 
        if IsSignificant()
            name:Add("Failed")
        else
            name:Add("Passed")
        end

        NumberColumn t
        if RepeatedMeasures()
            t:SetHeader("Statistic (Friedman χ2)")
        else
            t:SetHeader("Statistic (H)")
        end
        t:Add(math:Round(GetTestStatistic(), digits))

        NumberColumn df
        df:SetHeader("Degrees Of Freedom (DF)")
        df:Add(math:Round(GetDegreesOfFreedom(), digits))

        NumberColumn p
        p:SetHeader("Probability (P)")
        p:Add(math:Round(GetProbabilityValue(), digits))

        NumberColumn ef 
        ef:SetHeader("Effect Size (" + GetEffectSizeName() + ")")
        if GetEffectSizeName() not= "" 
            ef:Add(math:Round(GetEffectSize(), digits))
        end

        TextColumn apa
        apa:SetHeader("APA report")   
        apa:Add(GetFormalNumericalResult())

        DataFrame table
        table:AddColumn(name)
        table:AddColumn(t)
        table:AddColumn(df)
        table:AddColumn(p)
        if ef:GetSize() > 0
            table:AddColumn(ef)
        end
        table:AddColumn(apa)
        return table
    end
end