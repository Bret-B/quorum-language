package Libraries.Compute.Statistics.Reporting

use Libraries.Containers.HashTable
use Libraries.Containers.Iterator
use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.Columns.TextColumn
use Libraries.Compute.Statistics.Columns.NumberColumn

class CompareMeansSummary
    CompareMeansResult result = undefined
    StatisticsFormatting format = undefined
    integer numberOfSamples = 0
    boolean multivariate = false
    boolean fatcorial = false
    Math math
    
    action SetResult(CompareMeansResult result)
        if result not= undefined
            me:result = result
            me:format = result:GetFormat()
            numberOfSamples = result:GetGroupsFrame():GetSize()
            if result:GetFactors():GetSize() > 0 and result:GetColumns():GetSize() > 1
                multivariate = true
                numberOfSamples = result:GetGroupsTable():GetSize()
            end
            if result:GetFactors():GetSize() > 1 
                factorial = true
            end
        end
    end

    action GetSummary returns text
        if result not= undefined
            if numberOfSamples = 1
                return GetSummaryOne()

            elseif numberOfSamples = 2 and not multivariate
                return GetSummaryTwo()

            else //numberOfSamples >= 2
                return GetSummarySeveral()
            end
        end
        alert("There is no CompareMeansResult defined to summarize. Try using SetResult()")
    end

    action GetFormalSummary returns text
        if result not= undefined
            if numberOfSamples = 1
                return GetFormalSummaryOne()
    
            elseif numberOfSamples = 2 and not multivariate
                return GetFormalSummaryTwo()
    
            else //numberOfSamples >= 2
                return GetFormalSummarySeveral()
            end
        end
        alert("There is no CompareMeansResult defined to summarize. Try using SetResult()")
    end

    action GetFormalNumericalResult returns text
        if result not= undefined
            if numberOfSamples = 1
                return GetFormalNumericalResultOne()
    
            elseif numberOfSamples = 2 and not multivariate
                return GetFormalNumericalResultTwo()
    
            else //numberOfSamples >= 2
                text list = ""
                i = 0
                repeat while i < result:GetSources():GetSize()
                    text source = result:GetSources():Get(i)
                    text equation = GetFormalNumericalResultSeveral(source)
                    if equation not= ""
                        if result:GetSources():GetSize() = 1
                            list = equation
                        else
                            list = list + source + ": "+ equation + list:GetLineFeed()
                        end
                    end
                    i = i + 1
                end
                return list
            end
        end
        alert("There is no CompareMeansResult defined to summarize. Try using SetResult()")
    end

    action GetSummaryDataFrame returns DataFrame
        if result not= undefined
            if numberOfSamples = 1
                return GetSummaryDataFrameOne()
            elseif numberOfSamples = 2 and not multivariate
                return GetSummaryDataFrameTwo()
            else //numberOfSamples >= 2
                return GetSummaryDataFrameSeveral()
            end
        end
        alert("There is no CompareMeansResult defined to summarize. Try using SetResult()")
    end

    private action GetSummaryOne() returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        integer digits = format:GetSignificantDigits()
        text groupName = result:GetGroupsFrame():GetColumn(0):GetHeader()
        text factors = result:GetFactorList()
        text columns = result:GetColumnList()
        text statisticName = result:GetTestStatisticName()
        number statistic = result:GetTestStatistic()
        number pvalue = result:GetProbabilityValue()

        if result:IsRanked()
            number groupMedian = result:GetInformation():GetValue(groupName):GetValue("median")
            number proposedMedian = result:GetInformation():GetValue("proposed"):GetValue("median")
            summary = summary + "A "+ result:GetFormalTestName() + " was conducted to compare "+ groupName +" to a proposed median of " + proposedMedian
            if factors not= "None"
                summary = summary + lf + "Factor: " + columns + " by " + factors
            end
            summary = summary + lf + "Median of " + groupName + ": " + math:Round(groupMedian, digits)
            summary = summary + lf + "Statistic ("+statisticName+"): " + math:Round(statistic, digits)
        else
            number groupMean = result:GetInformation():GetValue(groupName):GetValue("mean")
            number proposedMean = result:GetInformation():GetValue("proposed"):GetValue("mean")
            summary = summary + "A "+ result:GetFormalTestName() + " was conducted to compare "+ groupName +" to a proposed mean of " + proposedMean
            if factors not= "None"
                summary = summary + lf + "Factor: " + columns + " by " + factors
            end
            summary = summary + lf + "Mean of " + groupName + ": " + math:Round(groupMean, digits)
            summary = summary + lf + "Statistic ("+statisticName+"): " + math:Round(statistic, digits)
            number degreesOfFreedom = result:GetDegreesOfFreedom()
            summary = summary + lf + "Degrees Of Freedom: " + math:Round(degreesOfFreedom, digits)
        end
        summary = summary + lf + "Probability: " + math:Round(pvalue, digits)

        if result:GetEffectSizesTable():GetSize() > 0
            text effectSizeName = result:GetEffectSizeName()
            number effectSize = result:GetEffectSize()
            summary = summary + lf + "Effect Size (" + effectSizeName + "): " + math:Round(effectSize, digits)
        end
        return summary
    end

    private action GetSummaryTwo() returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        integer digits = format:GetSignificantDigits()
        text group1Name = result:GetGroupsFrame():GetColumn(0):GetHeader()
        text group2Name = result:GetGroupsFrame():GetColumn(1):GetHeader()

        text factors = result:GetFactorList()
        text columns = result:GetColumnList()
        text statisticName = result:GetTestStatisticName()
        integer group1Size = cast(integer, result:GetInformation():GetValue(group1Name):GetValue("size"))
        integer group2Size = cast(integer, result:GetInformation():GetValue(group1Name):GetValue("size"))
        number statistic = result:GetTestStatistic()
        number pvalue = result:GetProbabilityValue()

        text dependence = ""
        if result:IsRepeated()
            dependence = "dependent"
        else
            dependence = "independent"
        end
        summary = summary + "A "+ result:GetFormalTestName() + " was conducted on two "+dependence+" samples"
        if factors not= "None"
            summary = summary + lf + "Factor: " + columns + " by " + factors
        end
        summary = summary + lf + "Samples: " + group1Name + " and " + group2Name
        if result:IsRanked()
            number group1Median = result:GetInformation():GetValue(group1Name):GetValue("median")
            number group2Median = result:GetInformation():GetValue(group2Name):GetValue("median")
            summary = summary + lf + "Median of " + group1Name + ": " + math:Round(group1Median, digits)
            summary = summary + lf + "Median of " + group2Name + ": " + math:Round(group2Median, digits)
            summary = summary + lf + "Size of " + group1Name + ": " + group1Size
            summary = summary + lf + "Size of " + group2Name + ": " + group2Size
            if result:IsRepeated()
                number differenceMean = result:GetInformation():GetValue("difference"):GetValue("median")
                number proposedMean = result:GetInformation():GetValue("proposed"):GetValue("median")
                summary = summary + lf + "Paired Difference Median: " + math:Round(differenceMean, digits)
                summary = summary + lf + "Proposed Median: " + math:Round(proposedMean, digits)
            end
            summary = summary + lf + "Statistic ("+statisticName+"): " + math:Round(statistic, digits)
        else
            number group1Mean = result:GetInformation():GetValue(group1Name):GetValue("mean")
            number group2Mean = result:GetInformation():GetValue(group2Name):GetValue("mean")
            summary = summary + lf + "Mean of " + group1Name + ": " + math:Round(group1Mean, digits)
            summary = summary + lf + "Mean of " + group2Name + ": " + math:Round(group2Mean, digits)
            summary = summary + lf + "Size of " + group1Name + ": " + group1Size
            summary = summary + lf + "Size of " + group2Name + ": " + group2Size
            if result:IsRepeated()
                number differenceMean = result:GetInformation():GetValue("difference"):GetValue("mean")
                number proposedMean = result:GetInformation():GetValue("proposed"):GetValue("mean")
                summary = summary + lf + "Paired Difference Mean: " + math:Round(differenceMean, digits)
                summary = summary + lf + "Proposed Mean: " + math:Round(proposedMean, digits)
            end
            number degreesOfFreedom = result:GetDegreesOfFreedom()
            summary = summary + lf + "Statistic ("+statisticName+"): " + math:Round(statistic, digits)
            summary = summary + lf + "Degrees Of Freedom: " + math:Round(degreesOfFreedom, digits)
        end
        summary = summary + lf + "Probability: " + math:Round(pvalue, digits)
        if result:GetEffectSizesTable():GetSize() > 0
            text effectSizeName = result:GetEffectSizeName()
            number effectSize = result:GetEffectSize()
            summary = summary + lf + "Effect Size (" + effectSizeName + "): " + math:Round(effectSize, digits)
        end
        return summary
    end

    private action GetSummarySeveral() returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        text tab = "    "
        integer digits = format:GetSignificantDigits()

        text factors = result:GetFactorList()
        text columns = result:GetColumnList()
        text dependence = ""
        if result:IsRepeated()
            dependence = "dependent"
        else
            dependence = "independent"
        end
        if not result:IsRepeated() and not result:IsRanked() and result:HasEqualVariances() and not multivariate and fatcorial
            summary = summary + "An "+ result:GetFormalTestName() + " was conducted on "+numberOfSamples+" "+dependence+" samples"
        else
            summary = summary + "A "+ result:GetFormalTestName() + " was conducted on "+numberOfSamples+" "+dependence+" samples"
        end
        if factors not= "None"
            summary = summary + lf + "Factor: " + columns + " by " + factors
        end
        if multivariate
            // For each source:
            i = 0
            repeat while i < result:GetSources():GetSize()
                text source = result:GetSources():Get(i)
                if result:GetTestStatisticsTable():HasKey(source)
                    summary = summary + lf + "Source: " + source
                    text statName = ""
                    if result:UseWilksStatistic()
                        statName = "Wilks Lambda"
                    elseif result:UsePillaiStatistic()
                        statName = "Pillai Trace"
                    elseif result:UseHotellingStatistic()
                        statName = "Hotelling Trace"
                    end
                    text statSource = source+statName
                    text effName = result:GetEffectSizesTable():GetValue(statSource):GetKeyIterator():Next()
                    number stat = result:GetTestStatisticsTable():GetValue(source):GetValue(statName)
                    number f = result:GetTestStatisticsTable():GetValue(statSource):GetValue("F")
                    number eff = result:GetEffectSizesTable():GetValue(statSource):GetValue(effName)
                    number df = result:GetDegreesOfFreedomTable():GetValue(source):GetValue(source)
                    number errordf = result:GetInformation():GetValue(source):GetValue("error df")
                    number dfn = result:GetDegreesOfFreedomTable():GetValue(statSource):GetValue("numerator")
                    number dfd = result:GetDegreesOfFreedomTable():GetValue(statSource):GetValue("denominator")
                    number pval = result:GetProbabilityValuesTable():GetValue(statSource):GetValue(statSource)
                    summary = summary + lf + tab + "Degrees Of Freedom: " + math:Round(df, digits)
                    summary = summary + lf + tab + "Error Degrees Of Freedom: " + math:Round(errordf, digits)
                    summary = summary + lf + tab + "Statistic ("+statName+"): " + math:Round(stat, digits)
                    summary = summary + lf + tab + "Statistic (Approximate F): " + math:Round(f, digits)
                    summary = summary + lf + tab + "Degrees Of Freedom Numerator: " + math:Round(dfn, digits)
                    summary = summary + lf + tab + "Degrees Of Freedom Denominator: " + math:Round(dfd, digits)
                    summary = summary + lf + tab + "Probability: " + math:Round(pval, digits)
                    summary = summary + lf + tab + "Effect Size (" + effName + "): " + math:Round(eff, digits)
                end
                i = i + 1
            end
        else
            // For each source:
            i = 0
            repeat while i < result:GetSources():GetSize()
                text source = result:GetSources():Get(i)
                summary = summary + lf + "Source: " + source
                if result:GetTestStatisticsTable():HasKey(source)
                    text statName = result:GetTestStatisticsTable():GetValue(source):GetKeyIterator():Next()
                    text effName = result:GetEffectSizesTable():GetValue(source):GetKeyIterator():Next()
                    number stat = result:GetTestStatisticsTable():GetValue(source):GetValue(statName)
                    number eff = result:GetEffectSizesTable():GetValue(source):GetValue(effName)
                    if result:IsRepeated() and not result:IsRanked()
                        number pval = result:GetProbabilityValuesTable():GetValue(source):GetValue(statName)
                        number ss = result:GetInformation():GetValue(source):GetValue("ss")
                        number df = result:GetInformation():GetValue(source):GetValue("df")
                        number errorss = result:GetInformation():GetValue(source):GetValue("error ss")
                        number errordf = result:GetInformation():GetValue(source):GetValue("error df")
                        summary = summary + lf + tab + "Sum Of Squares: " + math:Round(ss, digits)
                        summary = summary + lf + tab + "Error Sum Of Squares: " + math:Round(errorss, digits)
                        summary = summary + lf + tab + "Degrees Of Freedom: " + math:Round(df, digits)
                        summary = summary + lf + tab + "Error Degrees Of Freedom: " + math:Round(errordf, digits)
                        summary = summary + lf + tab + "Statistic ("+statName+"): " + math:Round(stat, digits)
                        summary = summary + lf + tab + "Probability: " + math:Round(pval, digits)
                        if result:GetVarianceResult() not= undefined
                            text correctionName = result:GetVarianceResult():GetCorrectionName()
                            if correctionName not= ""
                                number adjp = result:GetInformation():GetValue(source):GetValue("corrected p")
                                summary = summary + lf + tab + correctionName + " (ε): " + math:Round(result:GetVarianceResult():GetCorrection(), digits)
                                summary = summary + lf + tab + "Corrected Probability: " + math:Round(adjp, digits)
                            end
                        end
                        summary = summary + lf + tab + "Effect Size (" + effName + "): " + math:Round(eff, digits)                   

                    elseif result:HasEqualVariances() or result:IsRanked()
                        number df = result:GetDegreesOfFreedomTable():GetValue(source):GetValue(statName)
                        number pval = result:GetProbabilityValuesTable():GetValue(source):GetValue(statName)
                        if not result:IsRanked() 
                            number ss = result:GetInformation():GetValue(source):GetValue("ss")
                            summary = summary + lf + tab + "Sum Of Squares: " + math:Round(ss, digits)
                        end
                        summary = summary + lf + tab + "Statistic ("+statName+"): " + math:Round(stat, digits)
                        summary = summary + lf + tab + "Degrees Of Freedom: " + math:Round(df, digits)
                        summary = summary + lf + tab + "Probability: " + math:Round(pval, digits)
                        summary = summary + lf + tab + "Effect Size (" + effName + "): " + math:Round(eff, digits)
                    else
                        number dfn = result:GetDegreesOfFreedomTable():GetValue(source):GetValue("numerator")
                        number dfd = result:GetDegreesOfFreedomTable():GetValue(source):GetValue("denominator")
                        number pval = result:GetProbabilityValuesTable():GetValue(source):GetValue(source)
                        summary = summary + lf + tab + "Statistic ("+statName+"): " + math:Round(stat, digits)
                        summary = summary + lf + tab + "Degrees Of Freedom Numerator: " + math:Round(dfn, digits)
                        summary = summary + lf + tab + "Degrees Of Freedom Denominator: " + math:Round(dfd, digits)
                        summary = summary + lf + tab + "Probability: " + math:Round(pval, digits)
                        summary = summary + lf + tab + "Effect Size (" + effName + "): " + math:Round(eff, digits)
                    end
                else 
                    number df = result:GetDegreesOfFreedomTable():GetValue(source):GetValue(source)
                    if not result:IsRanked()
                        number ss = result:GetInformation():GetValue(source):GetValue("ss")
                        summary = summary + lf + tab + "Sum Of Squares: " + math:Round(ss, digits)
                    end
                    summary = summary + lf + tab + "Degrees Of Freedom: " + math:Round(df, digits)
                end
                i = i + 1
            end
        end
        return summary
    end

    private action GetFormalSummaryOne() returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        integer digits = format:GetSignificantDigits()
        text groupName = result:GetGroupsFrame():GetColumn(0):GetHeader()
        text factors = result:GetFactorList()
        text columns = result:GetColumnList()
        if factors = "None"
            summary = summary + "A " + result:GetFormalTestName() + " was conducted on one sample " + groupName + ". "
        else
            summary = summary + "A " + result:GetFormalTestName() + " was conducted on " + factors + " on one sample " + groupName + ". "
        end

        if result:IsRanked()
            number groupMedian = math:Round(result:GetInformation():GetValue(groupName):GetValue("median"), digits)
            number proposedMedian = math:Round(result:GetInformation():GetValue("proposed"):GetValue("median"), digits)
            if result:IsSignificant()
                summary = summary + lf + "The difference was indicated to be statistically significant."
                if groupMedian > proposedMedian
                    summary = summary + lf + groupName + " had a higher overall median (Mdn = " + groupMedian + ") compared to "
                        + " (Mdn = " + proposedMedian +")"
                elseif groupMedian < proposedMedian
                    summary = summary + lf + groupName + " had a lower overall median (Mdn = " + groupMedian + ") compared to "
                        + " (Mdn = " + proposedMedian +")"
                else
                    summary = summary + lf + groupName + " had an equal median (Mdn = " + groupMedian + ") compared to "
                        + " (Mdn = " + proposedMedian +")"             
                end
            else
                summary = summary + lf + groupName + " (Mdn = " + groupMedian + ") is not significantly different from (Mdn = " + proposedMedian +")"
            end
        else
            number groupMean = math:Round(result:GetInformation():GetValue(groupName):GetValue("mean"), digits)
            number groupSD = math:Round(math:SquareRoot(result:GetInformation():GetValue(groupName):GetValue("variance")), digits)
            number proposedMean = math:Round(result:GetInformation():GetValue("proposed"):GetValue("mean"), digits)
            if result:IsSignificant()
                summary = summary + "The difference was indicated to be statistically significant."
                if groupMean > proposedMean
                    summary = summary + lf + groupName + " had a higher overall mean (M = " + groupMean + ", SD = " + groupSD + ") compared to "
                        + " (M = " + proposedMean +")"
                elseif groupMean < proposedMean
                    summary = summary + lf + groupName + " had a lower overall mean (M = " + groupMean + ", SD = " + groupSD + ") compared to "
                        + " (M = " + proposedMean +")"
                else
                    summary = summary + lf + groupName + " had an equal mean (M = " + groupMean + ", SD = " + groupSD + ") compared to "
                        + " (M = " + proposedMean +")"             
                end
            else
                summary = summary + lf + groupName + " (M = " + groupMean + ", SD = " + groupSD + ") is not significantly different from (M = " + proposedMean +")"
            end
        end
        summary = summary + ", " + GetFormalNumericalResult() + "."
        return summary
    end

    private action GetFormalSummaryTwo() returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        integer digits = format:GetSignificantDigits()
        text group1Name = result:GetGroupsFrame():GetColumn(0):GetHeader()
        text group2Name = result:GetGroupsFrame():GetColumn(1):GetHeader()
        text factors = result:GetFactorList()
        text columns = result:GetColumnList()
        if factors = "None"
            summary = summary + "A " + result:GetFormalTestName() + " was conducted on two samples " + group1Name + " and "+ group2Name +"."
        else
            summary = summary + "A " + result:GetFormalTestName() + " was conducted on " + factors + " on two samples " + group1Name + " and "+ group2Name +"."
        end

        if result:IsRanked()
            if result:IsRepeated()
                text groupName = "The difference between "+ group1Name + " and "+ group2Name
                number groupMedian = math:Round(result:GetInformation():GetValue("difference"):GetValue("median"), digits)
                number proposedMedian = math:Round(result:GetInformation():GetValue("proposed"):GetValue("median"), digits)
                if result:IsSignificant()
                    summary = summary + "The difference was indicated to be statistically significant."
                    if groupMedian > proposedMedian
                        summary = summary + lf + groupName + " had a higher overall median (Mdn = " + groupMedian + ") compared to "
                            + " (Mdn = " + proposedMedian +")"
                    elseif groupMedian < proposedMedian
                        summary = summary + lf + groupName + " had a lower overall median (Mdn = " + groupMedian + ") compared to "
                            + " (Mdn = " + proposedMedian +")"
                    else
                        summary = summary + lf + groupName + " had an equal median (Mdn = " + groupMedian + ") compared to "
                            + " (Mdn = " + proposedMedian +")"             
                    end
                else
                    summary = summary + lf + groupName + " (Mdn = " + groupMedian + ") is not significantly different from (Mdn = " + proposedMedian +")"
                end
            else
                number group1Median = math:Round(result:GetInformation():GetValue(group1Name):GetValue("median"), digits)
                number group2Median = math:Round(result:GetInformation():GetValue(group2Name):GetValue("median"), digits)
                if result:IsSignificant()
                    summary = summary + lf + "The difference was indicated to be statistically significant."
                    if group1Median > group2Median
                        summary = summary + lf + group1Name + " had a higher overall median (Mdn = " + group1Median + ") compared to "
                            + group2Name + " (Mdn = " + group2Median +")"
                    elseif group1Median < group2Median
                        summary = summary + lf + group1Name + " had a lower overall median (Mdn = " + group1Median + ") compared to "
                            + group2Name + " (Mdn = " + group2Median +")"
                    else
                        summary = summary + lf + group1Name + " had an equal median (Mdn = " + group1Median + ") compared to "
                            + group2Name + " (Mdn = " + group2Median +")"             
                    end
                else
                    summary = summary + lf + " " + group1Name + " (Mdn = " + group1Median + ") is not significantly different from " + group2Name +" (Mdn = " + group2Median +")"
                end
            end
        else
            if result:IsRepeated()
                text groupName = "The difference between "+ group1Name + " and "+ group2Name
                number groupMean = math:Round(result:GetInformation():GetValue("difference"):GetValue("mean"), digits)
                number groupSD = math:Round(math:SquareRoot(result:GetInformation():GetValue("difference"):GetValue("variance")), digits)
                number proposedMean = math:Round(result:GetInformation():GetValue("proposed"):GetValue("mean"), digits)
                if result:IsSignificant()
                    summary = summary + " The difference was indicated to be statistically significant."
                    if groupMean > proposedMean
                        summary = summary + lf + groupName + " had a higher overall mean (M = " + groupMean + ", SD = " + groupSD + ") compared to "
                            + " (M = " + proposedMean +")"
                    elseif groupMean < proposedMean
                        summary = summary + lf + groupName + " had a lower overall mean (M = " + groupMean + ", SD = " + groupSD + ") compared to "
                            + " (M = " + proposedMean +")"
                    else
                        summary = summary + lf + groupName + " had an equal mean (M = " + groupMean + ", SD = " + groupSD + ") compared to "
                            + " (M = " + proposedMean +")"             
                    end
                else
                    summary = summary + lf + " " + groupName + " (M = " + groupMean + ", SD = " + groupSD + ") is not significantly different from (M = " + proposedMean +")."
                end
            else
                number group1Mean = math:Round(result:GetInformation():GetValue(group1Name):GetValue("mean"), digits)
                number group2Mean = math:Round(result:GetInformation():GetValue(group2Name):GetValue("mean"), digits)
                number group1SD = math:Round(math:SquareRoot(result:GetInformation():GetValue(group1Name):GetValue("variance")), digits)
                number group2SD = math:Round(math:SquareRoot(result:GetInformation():GetValue(group2Name):GetValue("variance")), digits)
                if result:IsSignificant()
                    summary = summary + " The difference was indicated to be statistically significant."
                    if group1Mean > group2Mean
                        summary = summary + lf + group1Name + " had a higher overall mean (M = " + group1Mean + ", SD = " + group1SD + ") compared to "
                            + group2Name + " (M = " + group2Mean + ", SD = " + group2SD + ")"
                    elseif group1Mean < group2Mean
                        summary = summary + lf + group1Name + " had a lower overall mean (M = " + group1Mean + ", SD = " + group1SD + ") compared to "
                            + group2Name + " (M = " + group2Mean + ", SD = " + group2SD + ")"
                    else
                        summary = summary + lf + group1Name + " had an equal mean (M = " + group1Mean + ", SD = " + group1SD + ") compared to "
                            + group2Name + " (M = " + group2Mean + ", SD = " + group2SD + ")"           
                    end
                else
                    summary = summary + lf + group1Name + " (M = " + group1Mean + ", SD = " + group1SD + ") is not significantly different from " 
                                            + group2Name + " (M = " + group2Mean + ", SD = " + group2SD + ")"
                end
            end
        end
        summary = summary + ", " + GetFormalNumericalResult() + "."
        return summary
    end

    private action GetFormalSummarySeveral() returns text
        text summary = ""
        text lf = summary:GetLineFeed()

        text factors = result:GetFactorList()
        text columns = result:GetColumnList()
        text dependence = ""
        if result:IsRepeated()
            dependence = "dependent"
        else
            dependence = "independent"
        end

        text start = "A "
        if not result:IsRepeated() and not result:IsRanked() and result:HasEqualVariances() and not multivariate and fatcorial
            start = "An "
        end
        if factors = "None"
            summary = summary + start + result:GetFormalTestName() + " was conducted across " + numberOfSamples + " " + dependence + " samples. "
        else
            summary = summary + start + result:GetFormalTestName() + " was conducted on " + factors + " across " + numberOfSamples + " " + dependence + " samples. "
        end

        if result:IsRepeated()
            if result:GetVarianceResult() not= undefined and result:GetVarianceResult():GetCorrection() not= 1
                summary = summary  + lf + result:GetVarianceResult():GetFormalTestName() + " indicated that the assumption of sphericity had been violated, " 
                + result:GetVarianceResult():GetFormalNumericalResult() 

                text correctionName = result:GetVarianceResult():GetCorrectionName()
                number correction = result:GetVarianceResult():GetCorrection()
                summary = summary  + lf + "The degrees of freedom were corrected using the "+correctionName+ " procedure "
                + "(ε = "+format:FormatWithoutLeadingZero(correction, 2)+"). "

                // Corrected Formal Numerical Result
                text list = ""
                boolean significant = false
                i = 0
                repeat while i < result:GetSources():GetSize()
                    text source = result:GetSources():Get(i)
                    if result:GetTestStatisticsTable():HasKey(source)
                        text statName = result:GetTestStatisticsTable():GetValue(source):GetKeyIterator():Next()
                        text effName = result:GetEffectSizesTable():GetValue(source):GetKeyIterator():Next()
                        number stat = result:GetTestStatisticsTable():GetValue(source):GetValue(statName)
                        number dfb = result:GetDegreesOfFreedomTable():GetValue(source):GetValue(statName)*correction
                        number dfw = result:GetDegreesOfFreedomTable():GetValue("Residual Error"):GetValue("Residual Error")*correction
                        number pval = result:GetInformation():GetValue(source):GetValue("corrected p")
                        number eff = result:GetEffectSizesTable():GetValue(source):GetValue(effName)
    
                        text equation = statName+"("+format:FormatDegreesOfFreedom(dfb)+", "+format:FormatDegreesOfFreedom(dfw)+") = "+format:FormatTestStatistic(stat)
                        if pval < format:PRECISION_LIMIT
                            equation = equation + ", p < " + format:FormatProbabilityValue(pval)
                        else
                            equation = equation + ", p = " + format:FormatProbabilityValue(pval)
                        end
                        equation = equation + ", "+effName+" = " + format:FormatWithoutLeadingZero(eff,3)
    
                        if equation not= ""
                            if result:GetTestStatisticsTable():GetSize() = 1
                                list = equation
                            else
                                list = list + source + ": "+ equation + list:GetLineFeed()
                            end
                        end
                        if pval < result:GetSignificanceLevel()
                            significant = true
                        end
                    end
                    i = i + 1
                end

                if significant
                    summary = summary + lf + "The corrected result indicated that there was a statistically significant difference between the samples"
                else
                    summary = summary + lf + "The corrected result indicated that there was not a statistically significant difference between the samples"
                end

                summary = summary + ", " + list + "."

                return summary
            end
        end
        if result:IsSignificant()
            summary = summary + lf + "The result indicated that there was a statistically significant difference between the samples"
        else
            summary = summary + lf + "The result indicated that there was not a statistically significant difference between the samples"
        end
        summary = summary + ", " + GetFormalNumericalResult() + "."

        return summary
    end

    /*
        This action returns the formal numrical result in APA format.
        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf

        CompareToMean (A One-Sample T-Test)
        Numerical result format: t(degress of freedom) = t-statistic, p = probability-value, d = effect-size
        Example:
            t(1337) = 40.08, p < .001, d = 1.1
   
        CompareToRankedMean (A Wilcoxon Signed-Ranks Test)
        Numerical result format: Z = z-score, p = probability-value, r = effect-size
        Example:
            Z = 31.68, p < .001, r = .87
    */
    private action GetFormalNumericalResultOne returns text
        text summary = ""
        text groupName = result:GetGroupsFrame():GetColumn(0):GetHeader()

        if result:IsRanked()
            text statName = result:GetTestStatisticName()
            number stat = result:GetTestStatistic()
            number pval = result:GetProbabilityValue()

            summary = summary + statName + " = " + format:FormatTestStatistic(stat)
            if pval < format:PRECISION_LIMIT
                summary = summary + ", p < " + format:FormatProbabilityValue(pval)
            else
                summary = summary + ", p = " + format:FormatProbabilityValue(pval)
            end

            if result:GetEffectSizesTable():GetSize() > 0
                text effName = result:GetEffectSizeName()
                number eff = result:GetEffectSize()
                summary = summary + ", "+effName+" = " + format:FormatCorrelation(eff)
            end
        else
            text statName = result:GetTestStatisticName()
            number stat = result:GetTestStatistic()
            number df = result:GetDegreesOfFreedom()
            number pval = result:GetProbabilityValue()

            summary = summary + statName+"("+format:FormatDegreesOfFreedom(df)+") = "+format:FormatTestStatistic(stat)
            if pval < format:PRECISION_LIMIT
                summary = summary + ", p < " + format:FormatProbabilityValue(pval)
            else
                summary = summary + ", p = " + format:FormatProbabilityValue(pval)
            end
            if result:GetEffectSizesTable():GetSize() > 0
                text effName = result:GetEffectSizeName()
                number eff = result:GetEffectSize()
                summary = summary + ", "+effName+" = " + format:FormatTestStatistic(eff)
            end
        end
        return summary
    end

    /*
        This action returns the formal numrical result in APA format.
        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf

        CompareTwoRelatedMeans (A Paired T-Test)
        Numerical result format: t(degress of freedom) = t-statistic, p = probability-value, d = effect-size
        Example:
            t(1337) = 40.08, p < .001, d = 1.1
   
        CompareTwoMeans (A Two-Sample T-Test)
        Numerical result format: t(degress of freedom) = t-statistic, p = probability-value, d = effect-size
        Example:
            t(2674) = -39.99, p < .001, d = -1.55

        CompareTwoRelatedRankedMeans (A Wilcoxon Signed-Ranks Test)
        Numerical result format: Z = z-score, p = probability-value, r = effect-size
        Example:
            Z = 31.68, p < .001, r = .87
   
        CompareTwoRankedMeans (A Mann-Whitney U-Test)
        Numerical result format: U(sample1-size, sample2-size) = u-statistic, p = probability-value, r = effect-size
        Example:
            U(n1 = 1338, n2 = 1338) = 592901, p < .001, r = .29
    */
    private action GetFormalNumericalResultTwo() returns text
        text summary = ""
        if result:IsRanked()
            text group1Name = result:GetGroupsFrame():GetColumn(0):GetHeader()
            text group2Name = result:GetGroupsFrame():GetColumn(1):GetHeader()

            text statName = result:GetTestStatisticName()
            number stat = result:GetTestStatistic()
            number pval = result:GetProbabilityValue()
            integer n1 = cast(integer, result:GetInformation():GetValue(group1Name):GetValue("size"))
            integer n2 = cast(integer, result:GetInformation():GetValue(group2Name):GetValue("size"))

            if result:IsRepeated()
                summary = summary + statName+" = "+format:FormatTestStatistic(stat)
            else
                summary = summary + statName+"(n1 = "+n1+", n2 = "+n2+") = "+format:FormatTestStatistic(stat)
            end
            if pval < format:PRECISION_LIMIT
                summary = summary + ", p < " + format:FormatProbabilityValue(pval)
            else
                summary = summary + ", p = " + format:FormatProbabilityValue(pval)
            end
            if result:GetEffectSizesTable():GetSize() > 0
                text effName = result:GetEffectSizeName()
                number eff = result:GetEffectSize()
                summary = summary + ", "+effName+" = " + format:FormatCorrelation(eff)
            end
        else
            text statName = result:GetTestStatisticName()
            number stat = result:GetTestStatistic()
            number df = result:GetDegreesOfFreedom()
            number pval = result:GetProbabilityValue()

            summary = summary + statName+"("+format:FormatDegreesOfFreedom(df)+") = "+format:FormatTestStatistic(stat)
            if pval < format:PRECISION_LIMIT
                summary = summary + ", p < " + format:FormatProbabilityValue(pval)
            else
                summary = summary + ", p = " + format:FormatProbabilityValue(pval)
            end
            if result:GetEffectSizesTable():GetSize() > 0
                text effName = result:GetEffectSizeName()
                number eff = result:GetEffectSize()
                summary = summary + ", "+effName+" = " + format:FormatTestStatistic(eff)
            end
        end
        return summary
    end

    /*
        This action returns the formal numrical result in APA format.
        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf

        CompareSeveralMeans (ANOVA or MANOVA)
        Numerical result format: F(between-groups df, within-groups df) = f-statistic, p = probability-value, η2 = effect-size
        Example:
            F(3, 1334) = 2.97, p = .031, η2 = .007

        CompareSeveralRelatedMeans (Repeated Measures ANOVA)
        Numerical result format: F(between-groups df, within-subjects df) = f-statistic, p = probability-value, η2 = effect-size
        Example:
            F(3, 1000.5) = 1.35, p = .258, η2 = .003
   
        CompareSeveralRankedMeans (A Kruskal-Wallis Test)
        Numerical result format: H(degrees of freedom, N = total size) = h-statistic, p = probability-value, Ε^2  = effect-size
        Example:
            H(2, N = 4014) = 2777.06, p < .001, Ε^2  = 2777.06

        CompareSeveralRelatedRankedGroups (A Friedman Test)
        Numerical result format: χ2(degrees of freedom, N = sample size) = chi-squared-statistic, p = probability-value, W  = effect-size
        Example:
            χ2(2, N = 1338) = 2095.99, p < .001, W  = .78.
    */
    private action GetFormalNumericalResultSeveral(text source) returns text
        text summary = ""
        if result:GetTestStatisticsTable():HasKey(source)
            if result:IsRanked()    
                text statName = result:GetTestStatisticsTable():GetValue(source):GetKeyIterator():Next()
                text effName = result:GetEffectSizesTable():GetValue(source):GetKeyIterator():Next()
                number stat = result:GetTestStatisticsTable():GetValue(source):GetValue(statName)
                number df = result:GetDegreesOfFreedomTable():GetValue(source):GetValue(statName)
                number pval = result:GetProbabilityValuesTable():GetValue(source):GetValue(statName)
                number eff = result:GetEffectSizesTable():GetValue(source):GetValue(effName)
                integer size = cast(integer, result:GetInformation():GetValue(source):GetValue("size"))
    
                summary = summary + statName+"("+ format:FormatDegreesOfFreedom(df)+", N = "+size+") = "+format:FormatTestStatistic(stat)
                if pval < format:PRECISION_LIMIT
                    summary = summary + ", p < " + format:FormatProbabilityValue(pval)
                else
                    summary = summary + ", p = " + format:FormatProbabilityValue(pval)
                end
                summary = summary + ", "+effName+" = " + format:FormatCorrelation(eff)
            else
                if not result:HasEqualVariances() // Welch ANOVA
                    text statName = result:GetTestStatisticsTable():GetValue(source):GetKeyIterator():Next()
                    text effName = result:GetEffectSizesTable():GetValue(source):GetKeyIterator():Next()
                    number stat = result:GetTestStatisticsTable():GetValue(source):GetValue(statName)
                    number dfn = result:GetDegreesOfFreedomTable():GetValue(source):GetValue("numerator")
                    number dfd = result:GetDegreesOfFreedomTable():GetValue(source):GetValue("denominator")
                    number pval = result:GetProbabilityValuesTable():GetValue(source):GetValue(source)
                    number eff = result:GetEffectSizesTable():GetValue(source):GetValue(effName)
            
                    summary = summary + statName+"("+format:FormatDegreesOfFreedom(dfn)+", "+format:FormatDegreesOfFreedom(dfd)+") = "+format:FormatTestStatistic(stat)
                    if pval < format:PRECISION_LIMIT
                        summary = summary + ", p < " + format:FormatProbabilityValue(pval)
                    else
                        summary = summary + ", p = " + format:FormatProbabilityValue(pval)
                    end
                    summary = summary + ", "+effName+" = " + format:FormatWithoutLeadingZero(eff,3)
                elseif multivariate // MANOVA
                    text statName = ""
                    if result:UseWilksStatistic()
                        statName = "Wilks Lambda"
                    elseif result:UsePillaiStatistic()
                        statName = "Pillai Trace"
                    elseif result:UseHotellingStatistic()
                        statName = "Hotelling Trace"
                    end
                    text statSource = source+statName
                    text effName = result:GetEffectSizesTable():GetValue(statSource):GetKeyIterator():Next()
                    number stat = result:GetTestStatisticsTable():GetValue(source):GetValue(statName)
                    number f = result:GetTestStatisticsTable():GetValue(statSource):GetValue("F")
                    number eff = result:GetEffectSizesTable():GetValue(statSource):GetValue(effName)
                    number df = result:GetDegreesOfFreedomTable():GetValue(source):GetValue(source)
                    number dfn = result:GetDegreesOfFreedomTable():GetValue(statSource):GetValue("numerator")
                    number dfd = result:GetDegreesOfFreedomTable():GetValue(statSource):GetValue("denominator")
                    number pval = result:GetProbabilityValuesTable():GetValue(statSource):GetValue(statSource)
            
                    summary = summary + statName + " = "+format:FormatWithoutLeadingZero(stat,2)
                    summary = summary + ", F("+format:FormatDegreesOfFreedom(dfn)+", "+format:FormatDegreesOfFreedom(dfd)+") = "+format:FormatTestStatistic(f)
                    if pval < format:PRECISION_LIMIT
                        summary = summary + ", p < " + format:FormatProbabilityValue(pval)
                    else
                        summary = summary + ", p = " + format:FormatProbabilityValue(pval)
                    end
                    summary = summary + ", "+effName+" = " + format:FormatWithoutLeadingZero(eff,3)
                else // ANOVA
                    text statName = result:GetTestStatisticsTable():GetValue(source):GetKeyIterator():Next()
                    text effName = result:GetEffectSizesTable():GetValue(source):GetKeyIterator():Next()
                    number stat = result:GetTestStatisticsTable():GetValue(source):GetValue(statName)
//                    number dfn = result:GetDegreesOfFreedomTable():GetValue(source):GetValue(statName)
//                    number dfd = result:GetDegreesOfFreedomTable():GetValue("Residual Error"):GetValue("Residual Error")
                    number dfn = result:GetInformation():GetValue(source):GetValue("df")
                    number dfd = result:GetInformation():GetValue(source):GetValue("error df")
                    number pval = result:GetProbabilityValuesTable():GetValue(source):GetValue(statName)
                    number eff = result:GetEffectSizesTable():GetValue(source):GetValue(effName)
            
                    summary = summary + statName+"("+format:FormatDegreesOfFreedom(dfn)+", "+format:FormatDegreesOfFreedom(dfd)+") = "+format:FormatTestStatistic(stat)
                    if pval < format:PRECISION_LIMIT
                        summary = summary + ", p < " + format:FormatProbabilityValue(pval)
                    else
                        summary = summary + ", p = " + format:FormatProbabilityValue(pval)
                    end
                    summary = summary + ", "+effName+" = " + format:FormatWithoutLeadingZero(eff,3)
                end
            end
        end
        return summary
    end

    private action GetSummaryDataFrameOne() returns DataFrame
        DataFrame resultFrame
        integer digits = format:GetSignificantDigits()

        TextColumn testCol
        testCol:SetHeader(result:GetFormalTestName())
        NumberColumn statisticCol
        statisticCol:SetHeader("Statistic ("+result:GetTestStatisticName()+")")
        NumberColumn pCol
        pCol:SetHeader("Probability Value")
        NumberColumn effectCol
        effectCol:SetHeader("Effect Size ("+result:GetEffectSizeName()+")")
        TextColumn equationCol
        equationCol:SetHeader("APA Report")

        text groupName = result:GetGroupsFrame():GetColumn(0):GetHeader()
        text statName = result:GetTestStatisticName()
        testCol:Add(groupName)
        statisticCol:Add(math:Round(result:GetTestStatistic(), digits))
        pCol:Add(math:Round(result:GetProbabilityValue(), digits))
        effectCol:Add(math:Round(result:GetEffectSize(), digits)) 
        equationCol:Add(GetFormalNumericalResult())    

        if result:IsRanked()
            NumberColumn medianCol
            medianCol:SetHeader("Median")
            medianCol:Add(math:Round(result:GetInformation():GetValue(groupName):GetValue("median"), digits))

            resultFrame:AddColumn(testCol)
            resultFrame:AddColumn(medianCol)
            resultFrame:AddColumn(statisticCol)
            resultFrame:AddColumn(pCol)
            resultFrame:AddColumn(effectCol) 
            resultFrame:AddColumn(equationCol)   
        else
            NumberColumn meanCol
            meanCol:SetHeader("Mean")
            meanCol:Add(math:Round(result:GetInformation():GetValue(groupName):GetValue("mean"), digits))
            NumberColumn sdCol
            sdCol:SetHeader("Standard Deviation")
            sdCol:Add(math:Round(math:SquareRoot(result:GetInformation():GetValue(groupName):GetValue("variance")),digits))
            NumberColumn dfCol
            dfCol:SetHeader("Degrees Of Freedom")
            dfCol:Add(math:Round(result:GetDegreesOfFreedom(), digits))

            resultFrame:AddColumn(testCol)
            resultFrame:AddColumn(meanCol)
            resultFrame:AddColumn(sdCol)
            resultFrame:AddColumn(dfCol)
            resultFrame:AddColumn(statisticCol)
            resultFrame:AddColumn(pCol)
            resultFrame:AddColumn(effectCol)  
            resultFrame:AddColumn(equationCol)  
        end
        return resultFrame
    end

    private action GetSummaryDataFrameTwo() returns DataFrame
        DataFrame resultFrame
        integer digits = format:GetSignificantDigits()

        TextColumn testCol
        testCol:SetHeader(result:GetFormalTestName())
        NumberColumn statisticCol
        statisticCol:SetHeader("Statistic ("+result:GetTestStatisticName()+")")
        NumberColumn pCol
        pCol:SetHeader("Probability Value")
        NumberColumn effectCol
        effectCol:SetHeader("Effect Size ("+result:GetEffectSizeName()+")")
        TextColumn equationCol
        equationCol:SetHeader("APA Report")

        text group1Name = result:GetGroupsFrame():GetColumn(0):GetHeader()
        text group2Name = result:GetGroupsFrame():GetColumn(1):GetHeader()
        text statName = result:GetTestStatisticName()

        testCol:Add(group1Name+"_"+group2Name)
        statisticCol:Add(math:Round(result:GetTestStatistic(), digits))
        pCol:Add(math:Round(result:GetProbabilityValue(), digits))
        effectCol:Add(math:Round(result:GetEffectSize(), digits))     
        equationCol:Add(GetFormalNumericalResult())

        if result:IsRanked()
            NumberColumn median1Col
            median1Col:SetHeader("Median 1")
            median1Col:Add(result:GetInformation():GetValue(group1Name):GetValue("median"))

            NumberColumn median2Col
            median2Col:SetHeader("Median 2")
            median2Col:Add(result:GetInformation():GetValue(group2Name):GetValue("median"))

            resultFrame:AddColumn(testCol)
            resultFrame:AddColumn(median1Col)
            resultFrame:AddColumn(median2Col)
            resultFrame:AddColumn(statisticCol)
            resultFrame:AddColumn(pCol)
            resultFrame:AddColumn(effectCol) 
            resultFrame:AddColumn(equationCol)   
        else
            NumberColumn mean1Col
            mean1Col:SetHeader("Mean 1")
            mean1Col:Add(result:GetInformation():GetValue(group1Name):GetValue("mean"))

            NumberColumn mean2Col
            mean2Col:SetHeader("Mean 2")
            mean2Col:Add(result:GetInformation():GetValue(group2Name):GetValue("mean"))

            NumberColumn sd1Col
            sd1Col:SetHeader("Standard Deviation 1")
            sd1Col:Add(math:SquareRoot(result:GetInformation():GetValue(group1Name):GetValue("variance")))

            NumberColumn sd2Col
            sd2Col:SetHeader("Standard Deviation 2")
            sd2Col:Add(math:SquareRoot(result:GetInformation():GetValue(group2Name):GetValue("variance")))

            NumberColumn dfCol
            dfCol:SetHeader("Degrees Of Freedom")
            dfCol:Add(result:GetDegreesOfFreedom())

            resultFrame:AddColumn(testCol)
            resultFrame:AddColumn(mean1Col)
            resultFrame:AddColumn(mean2Col)
            resultFrame:AddColumn(sd1Col)
            resultFrame:AddColumn(sd2Col)
            resultFrame:AddColumn(dfCol)
            resultFrame:AddColumn(statisticCol)
            resultFrame:AddColumn(pCol)
            resultFrame:AddColumn(effectCol)
            resultFrame:AddColumn(equationCol)  
        end
        return resultFrame
    end

    private action GetSummaryDataFrameSeveral() returns DataFrame
        DataFrame resultFrame
        integer digits = format:GetSignificantDigits()

        TextColumn testCol
        testCol:SetHeader(result:GetFormalTestName())
        NumberColumn statisticCol
        NumberColumn statistic2Col
        NumberColumn pCol
        pCol:SetHeader("Probability Value")
        NumberColumn effectCol
        TextColumn equationCol
        equationCol:SetHeader("APA Report")
        NumberColumn ssCol
        ssCol:SetHeader("Sum Of Squares")
        NumberColumn dfCol
        dfCol:SetHeader("Degrees Of Freedom")
        NumberColumn dfnCol
        dfnCol:SetHeader("Numerator Degrees Of Freedom")
        NumberColumn dfdCol
        dfdCol:SetHeader("Denominator Degrees Of Freedom")

        // For each source
        i = 0
        repeat while i < result:GetSources():GetSize()
            text source = result:GetSources():Get(i)

            if result:IsRanked()
                testCol:Add(source)
                equationCol:Add(GetFormalNumericalResultSeveral(source))
                if result:GetTestStatisticsTable():HasKey(source)
                    text statName = result:GetTestStatisticsTable():GetValue(source):GetKeyIterator():Next()
                    text effectName = result:GetEffectSizesTable():GetValue(source):GetKeyIterator():Next()
                    statisticCol:Add(math:Round(result:GetTestStatisticsTable():GetValue(source):GetValue(statName), digits))
                    dfCol:Add(math:Round(result:GetDegreesOfFreedomTable():GetValue(source):GetValue(statName), digits))
                    pCol:Add(math:Round(result:GetProbabilityValuesTable():GetValue(source):GetValue(statName), digits))
                    effectCol:Add(math:Round(result:GetEffectSizesTable():GetValue(source):GetValue(effectName), digits))
                    if i = 0
                        statisticCol:SetHeader("Statistic ("+statName+")")
                        effectCol:SetHeader("Effect Size ("+effectName+")")   
    
                        resultFrame:AddColumn(testCol)
                        resultFrame:AddColumn(dfCol)
                        resultFrame:AddColumn(statisticCol)
                        resultFrame:AddColumn(pCol)
                        resultFrame:AddColumn(effectCol)
                        resultFrame:AddColumn(equationCol)  
                    end
                end
            else
                if not result:HasEqualVariances()
                    if result:GetTestStatisticsTable():HasKey(source)
                        testCol:Add(source)
                        equationCol:Add(GetFormalNumericalResultSeveral(source))
                        text statName = result:GetTestStatisticsTable():GetValue(source):GetKeyIterator():Next()
                        text effectName = result:GetEffectSizesTable():GetValue(source):GetKeyIterator():Next()
                        statisticCol:Add(math:Round(result:GetTestStatisticsTable():GetValue(source):GetValue(statName), digits))
                        dfnCol:Add(math:Round(result:GetDegreesOfFreedomTable():GetValue(source):GetValue("numerator"), digits))
                        dfdCol:Add(math:Round(result:GetDegreesOfFreedomTable():GetValue(source):GetValue("denominator"), digits))
                        pCol:Add(math:Round(result:GetProbabilityValuesTable():GetValue(source):GetValue(source), digits))
                        effectCol:Add(math:Round(result:GetEffectSizesTable():GetValue(source):GetValue(effectName), digits))
    
                        if i = 0
                            statisticCol:SetHeader("Statistic ("+statName+")")
                            effectCol:SetHeader("Effect Size ("+effectName+")")  
        
                            resultFrame:AddColumn(testCol)
                            resultFrame:AddColumn(dfnCol)
                            resultFrame:AddColumn(dfdCol)
                            resultFrame:AddColumn(statisticCol)
                            resultFrame:AddColumn(pCol)
                            resultFrame:AddColumn(effectCol)
                            resultFrame:AddColumn(equationCol)  
                        end
                    end
                elseif multivariate
                    if result:GetTestStatisticsTable():HasKey(source)
                        testCol:Add(source)
                        equationCol:Add(GetFormalNumericalResultSeveral(source))
                        text statName = result:GetTestStatisticsTable():GetValue(source):GetKeyIterator():Next()
                        text statSource = source+statName
                        text effectName = result:GetEffectSizesTable():GetValue(statSource):GetKeyIterator():Next()
                        statisticCol:Add(math:Round(result:GetTestStatisticsTable():GetValue(source):GetValue(statSource), digits))
                        dfCol:Add(math:Round(result:GetDegreesOfFreedomTable():GetValue(source):GetValue(source), digits))
                        dfnCol:Add(math:Round(result:GetDegreesOfFreedomTable():GetValue(statSource):GetValue("numerator"), digits))
                        dfdCol:Add(math:Round(result:GetDegreesOfFreedomTable():GetValue(statSource):GetValue("denominator"), digits))
                        pCol:Add(math:Round(result:GetProbabilityValuesTable():GetValue(statSource):GetValue(statSource), digits))
                        effectCol:Add(math:Round(result:GetEffectSizesTable():GetValue(statSource):GetValue(effectName), digits))
                        if i = 0
                            statisticCol:SetHeader("Statistic ("+statName+")")
                            statistic2Col:SetHeader("Statistic (F)") 
                            effectCol:SetHeader("Effect Size ("+effectName+")")  
        
                            resultFrame:AddColumn(testCol)
                            resultFrame:AddColumn(dfCol)
                            resultFrame:AddColumn(statisticCol)
                            resultFrame:AddColumn(dfnCol)
                            resultFrame:AddColumn(dfdCol)
                            resultFrame:AddColumn(statistic2Col)
                            resultFrame:AddColumn(pCol)
                            resultFrame:AddColumn(effectCol)
                            resultFrame:AddColumn(equationCol)  
                        end
                    end
                else
                    if result:GetTestStatisticsTable():HasKey(source)
                        testCol:Add(source)
                        equationCol:Add(GetFormalNumericalResultSeveral(source))
                        text statName = result:GetTestStatisticsTable():GetValue(source):GetKeyIterator():Next()
                        text effectName = result:GetEffectSizesTable():GetValue(source):GetKeyIterator():Next()
                        statisticCol:Add(math:Round(result:GetTestStatisticsTable():GetValue(source):GetValue(statName), digits))
                        ssCol:Add(math:Round(result:GetInformation():GetValue(source):GetValue("ss"), digits))
                        dfCol:Add(math:Round(result:GetDegreesOfFreedomTable():GetValue(source):GetValue(statName), digits))
                        pCol:Add(math:Round(result:GetProbabilityValuesTable():GetValue(source):GetValue(statName), digits))
                        effectCol:Add(math:Round(result:GetEffectSizesTable():GetValue(source):GetValue(effectName), digits))
                        if i = 0
                            statisticCol:SetHeader("Statistic ("+statName+")")
                            effectCol:SetHeader("Effect Size ("+effectName+")") 

                            resultFrame:AddColumn(testCol)
                            resultFrame:AddColumn(ssCol)
                            resultFrame:AddColumn(dfCol)
                            resultFrame:AddColumn(statisticCol)
                            resultFrame:AddColumn(pCol)
                            resultFrame:AddColumn(effectCol)
                            resultFrame:AddColumn(equationCol)  
                        end
                    else
                        testCol:Add(source)
                        dfCol:Add(math:Round(result:GetDegreesOfFreedomTable():GetValue(source):GetValue(source), digits))
                        ssCol:Add(math:Round(result:GetInformation():GetValue(source):GetValue("ss"), digits))
                    end
                end
            end

            i = i + 1
        end
        return resultFrame
    end
end