package Libraries.Compute.Statistics.Reporting

use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Matrix
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Compute.Statistics.Tests.CompareCountsPairwise
use Libraries.Compute.Math
use Libraries.System.File
use Libraries.Web.Page.all

/*
    This class represents data that comes back from a CompareCounts calculation (chi-squared test).

    Attribute: Author Hannah Williams
*/
class CompareCountsResult is StatisticalTestResult
    DataFrame observed
    DataFrame expected
    DataFrame residuals         // Pearson standardized residuals (observed - expected) / sqrt(expected)
    DataFrame adjustedResiduals // Adjusted standardized residuals (observed - expected) / sqrt(expected * (1 - rowSum/total) * (1 - colSum/total))
    boolean approximationWarning = false  
    boolean goodnessOfFit = false
    integer sampleSize = 0
    text variable1 = ""
    text variable2 = ""
    text factor = ""

    /* UNIVARIATE: A dataframe that holds each of the samples in a column */
    DataFrame groupsFrame

    /* MULTIIVARIATE: An hashtable of dataframes that holds each of the samples in a dataframe */
    HashTable<text, DataFrame> groupsTable

    /* */
    HashTable<text, HashTable<text, number>> probabilityValues
    HashTable<text, HashTable<text, number>> degreesOfFreedom
    HashTable<text, HashTable<text, number>> testStatistics
    HashTable<text, HashTable<text, number>> effectSizes
    HashTable<text, HashTable<text, number>> information
    HashTable<text, HashTable<text, Matrix>> matrixInformation // Used in multivariate designs

    Array<text> factors     // List of factor headers from original frame
    Array<text> columns     // List of column headers from original frame
    Array<text> sources     // List of factors/effects from test

    boolean repeated = false

    /* The pairwise test which holds more easily accessible results especially with factorial design */ 
    private CompareCountsPairwise pairwiseTest = undefined 

    /* The pairwise results of each sub-sample tests within the post hoc test (if conducted) */
    Array<CompareCountsResult> pairwiseResults 


    action GetSources returns Array<text>
        return sources
    end

    action SetSources(Array<text> sources)
        me:sources = sources
    end

    /* 
        Stores the p-value for each group and test statistic 

        Example: 
            SetInformation("A", "t", 0.05)
    */
    action SetProbabilityValue(text source, text statistic, number probabilityValue)
        if not probabilityValues:HasKey(source)
            HashTable<text, number> p
            p:Add(statistic, probabilityValue)
            probabilityValues:Add(source, p)
        else
            if not probabilityValues:GetValue(source):HasKey(statistic)
                probabilityValues:GetValue(source):Add(statistic, probabilityValue)
            else
                probabilityValues:GetValue(source):Set(statistic, probabilityValue)
            end
        end
    end

    /* The p-value (if only one) calculated for this result. */
    action GetProbabilityValue returns number
        if probabilityValues:GetSize() = 1
            Iterator<text> i = probabilityValues:GetKeyIterator()
            text source = i:Next()
            if probabilityValues:GetValue(source):GetSize() = 1
                Iterator<text> i2 = probabilityValues:GetValue(source):GetKeyIterator()
                return probabilityValues:GetValue(source):GetValue(i2:Next())
            end
            alert("There is more than one probability value calculated for this source. Try using GetProbabilityValuesTable(text source)")
        elseif probabilityValues:GetSize() > 1
            alert("There is more than one source with probability values calculated. Try using GetProbabilityValuesTable()")
        else
            alert("There is no probability value calculated in this result")
        end
    end

    /* The hash table of p-values for this source, could have one or more */ 
    action GetProbabilityValuesTable(text source) returns HashTable<text, number>
        if probabilityValues:HasKey(source)
            return probabilityValues:GetValue(source)
        end
        alert("There is no probability value calculated for this source: "+ source)
    end

    /* The full double hash table of p-values */ 
    action GetProbabilityValuesTable returns HashTable<text, HashTable<text, number>>
        return probabilityValues
    end

    /* 
        Stores the degrees of freedom for each group or test statistic, some may have multiple dfs calculated 

        Examples: 
            SetInformation("A", "between", 4)
            SetInformation("A", "within", 2)
    */
    action SetDegreesOfFreedom(text source, text dfName, number dfValue)
        if not degreesOfFreedom:HasKey(source)
            HashTable<text, number> df
            df:Add(dfName, dfValue)
            degreesOfFreedom:Add(source, df)
        else
            if not degreesOfFreedom:GetValue(source):HasKey(dfName)
                degreesOfFreedom:GetValue(source):Add(dfName, dfValue)
            else
                degreesOfFreedom:GetValue(source):Set(dfName, dfValue)
            end
        end
    end

    /* The degrees of freedom (if only one) calculated for this result. */
    action GetDegreesOfFreedom returns number
        if degreesOfFreedom:GetSize() = 1
            Iterator<text> i = degreesOfFreedom:GetKeyIterator()
            text source = i:Next()
            if degreesOfFreedom:GetValue(source):GetSize() = 1
                Iterator<text> i2 = degreesOfFreedom:GetValue(source):GetKeyIterator()
                return degreesOfFreedom:GetValue(source):GetValue(i2:Next())
            end
            alert("There is more than one degree of freedom calculated for this source. Try using GetDegreesOfFreedomTable(text source)")
        elseif degreesOfFreedom:GetSize() > 1
            alert("There is more than one source with degrees of freedom calculated. Try using GetDegreesOfFreedomTable()")
        else
            alert("There is no degree of freedom calculated in this result")
        end
    end

    /* The hash table of df-values for this source, could have one or more */ 
    action GetDegreesOfFreedomTable(text source) returns HashTable<text, number>
        if degreesOfFreedom:HasKey(source)
            return degreesOfFreedom:GetValue(source)
        end
        alert("There is no degree of freedom calculated for this source: "+ source)
    end

    /* The full double hash table of df-values */ 
    action GetDegreesOfFreedomTable() returns HashTable<text, HashTable<text, number>>
        return degreesOfFreedom
    end

    /* 
        Stores the test statistic for each group, some groups may have multiple test statistics calculated 

        Examples: 
            SetInformation("A", "T", 1.34)
            SetInformation("A", "Wilk's Lambda", 1.39)
    */
    action SetTestStatistic(text source, text statName, number testStatistic)
        if not testStatistics:HasKey(source)
            HashTable<text, number> stat
            stat:Add(statName, testStatistic)
            testStatistics:Add(source, stat)
        else
            if not testStatistics:GetValue(source):HasKey(statName)
                testStatistics:GetValue(source):Add(statName, testStatistic)
            else
                testStatistics:GetValue(source):Set(statName, testStatistic)
            end
        end
    end

    /* The test statistic name (if only one) calculated for this result. */
    action GetTestStatisticName returns text
        if testStatistics:GetSize() = 1
            Iterator<text> i = testStatistics:GetKeyIterator()
            text source = i:Next()
            if testStatistics:GetValue(source):GetSize() = 1
                Iterator<text> i2 = testStatistics:GetValue(source):GetKeyIterator()
                return i2:Next()
            end
            alert("There is more than one test statistic calculated for this source. Try using GetTestStatisticsTable(text source)")
        elseif testStatistics:GetSize() > 1
            alert("There is more than one source with test statistics calculated. Try using GetTestStatisticsTable()")
        else
            alert("There is no test statistic calculated in this result")
        end
    end

    /* The test statistic (if only one) calculated for this result. */
    action GetTestStatistic returns number
        if testStatistics:GetSize() = 1
            Iterator<text> i = testStatistics:GetKeyIterator()
            text source = i:Next()
            if testStatistics:GetValue(source):GetSize() = 1
                Iterator<text> i2 = testStatistics:GetValue(source):GetKeyIterator()
                return testStatistics:GetValue(source):GetValue(i2:Next())
            end
            alert("There is more than one test statistic calculated for this source. Try using GetTestStatisticsTable(text source)")
        elseif testStatistics:GetSize() > 1
            alert("There is more than one source with test statistics calculated. Try using GetTestStatisticsTable()")
        else
            alert("There is no test statistic calculated in this result")
        end
    end

    /* The hash table of test statistics for this source, could have one or more */ 
    action GetTestStatisticsTable(text source) returns HashTable<text, number>
        if testStatistics:HasKey(source)
            return testStatistics:GetValue(source)
        end
        alert("There is no test statistic calculated for this source: "+ source)
    end

    /* The full double hash table of stat-values */ 
    action GetTestStatisticsTable() returns HashTable<text, HashTable<text, number>>
        return testStatistics
    end

    /* 
        Stores the effect size for each group, some groups may have multiple effect sizes calculated 

        Examples: 
            SetInformation("A", "Cohen's D", 1.2)
            SetInformation("A", "Eta-Squared", 0.52)
    */
    action SetEffectSize(text source, text effectName, number effectSize)
        if not effectSizes:HasKey(source)
            HashTable<text, number> effect
            effect:Add(effectName, effectSize)
            effectSizes:Add(source, effect)
        else
            if not effectSizes:GetValue(source):HasKey(effectName)
                effectSizes:GetValue(source):Add(effectName, effectSize)
            else
                effectSizes:GetValue(source):Set(effectName, effectSize)
            end
        end
    end

    /* The effect size name (if only one) calculated for this result. */
    action GetEffectSizeName returns text
        if effectSizes:GetSize() = 1
            Iterator<text> i = effectSizes:GetKeyIterator()
            text source = i:Next()
            if testStatistics:GetValue(source):GetSize() = 1
                Iterator<text> i2 = effectSizes:GetValue(source):GetKeyIterator()
                return i2:Next()
            end
            alert("There is more than one effect size calculated for this source. Try using GetEffectSizesTable(text source)")
        elseif effectSizes:GetSize() > 1
            alert("There is more than one source with effect sizes calculated. Try using GetEffectSizesTable()")
        else
            alert("There is no effect size calculated in this result")
        end
    end

    /* The effect size (if only one) calculated for this result. */
    action GetEffectSize returns number
        if effectSizes:GetSize() = 1
            Iterator<text> i = effectSizes:GetKeyIterator()
            text source = i:Next()
            if effectSizes:GetValue(source):GetSize() = 1
                Iterator<text> i2 = effectSizes:GetValue(source):GetKeyIterator()
                return effectSizes:GetValue(source):GetValue(i2:Next())
            end
            alert("There is more than one effect size calculated for this source. Try using GetEffectSizesTable(text source)")
        elseif effectSizes:GetSize() > 1
            alert("There is more than one source with effect sizes calculated. Try using GetEffectSizesTable()")
        else
            alert("There is no effect size calculated in this result")
        end
    end

    /* The hash table of effect sizes for this source, could have one or more */ 
    action GetEffectSizesTable(text source) returns HashTable<text, number>
        if effectSizes:HasKey(source)
            return effectSizes:GetValue(source)
        end
        alert("There is no effect size calculated for this source: "+ source)
    end

    /* The full double hash table of effect sizes */ 
    action GetEffectSizesTable() returns HashTable<text, HashTable<text, number>>
        return effectSizes
    end

    /* 
        Stores the other information for each group, could include summary values, sum of squares etc 

        Examples: 
            SetInformation("A", "Mean", 10)
            SetInformation("A", "Sum Of Squares", 32.45)
    */
    action SetInformation(text source, text infoName, number infoValue)
        if not information:HasKey(source)
            HashTable<text, number> info
            info:Add(infoName, infoValue)
            information:Add(source, info)
        else
            if not information:GetValue(source):HasKey(infoName)
                information:GetValue(source):Add(infoName, infoValue)
            else
                information:GetValue(source):Set(infoName, infoValue)
            end
        end
    end
    action SetInformation(text source, text infoName, Matrix infoValue)
        if not matrixInformation:HasKey(source)
            HashTable<text, Matrix> info
            info:Add(infoName, infoValue)
            matrixInformation:Add(source, info)
        else
            if not matrixInformation:GetValue(source):HasKey(infoName)
                matrixInformation:GetValue(source):Add(infoName, infoValue)
            else
                matrixInformation:GetValue(source):Set(infoName, infoValue)
            end
        end
    end

    action GetInformation returns HashTable<text, HashTable<text, number>>
        return information
    end

    action GetMatrixInformation returns HashTable<text, HashTable<text, Matrix>>
        return matrixInformation
    end

    action GetGroupsFrame returns DataFrame
        return groupsFrame
    end

    action SetGroupsFrame(DataFrame groupsFrame)
        me:groupsFrame = groupsFrame
    end

    action SetGroupsTable(HashTable<text, DataFrame> groupsTable)
        me:groupsTable = groupsTable
    end

    action GetGroupsTable returns HashTable<text, DataFrame> 
        return groupsTable
    end

    action IsRepeated returns boolean
        return repeated
    end

    action Repeated(boolean repeated)
        me:repeated = repeated
    end

    // Saved test for pairwise post hoc test (if conducted)
    action GetPairwiseTest returns CompareCountsPairwise
        return pairwiseTest
    end

    action SetPairwiseTest(CompareCountsPairwise test)
        me:pairwiseTest = test
    end

    // Saved results for pairwise post hoc test (if conducted)
    action GetPairwiseResults returns Array<CompareCountsResult>
        return pairwiseResults
    end

    action SetPairwiseResults(Array<CompareCountsResult> pairwise)
        me:pairwiseResults = pairwise
    end

    /*
        Obtains the observed dataframe calculated by the test.

        Attribute: Returns the observed values in a dataframe.
    */
    action GetObserved returns DataFrame
        return observed
    end

    /*
        Sets the observed dataframe calculated by the test.

        Attribute: Parameter observed the dataframe of observed values
    */
    action SetObserved(DataFrame observed)
        me:observed = observed
    end

    /*
        Obtains the expected dataframe calculated by the test.

        Attribute: Returns the expected values in a dataframe.
    */
    action GetExpected returns DataFrame
        return expected
    end

    /*
        Sets the expected dataframe calculated by the test.

        Attribute: Parameter expected the dataframe of expected values
    */
    action SetExpected(DataFrame expected)
        me:expected = expected
    end

    /*
        Obtains the pearson residuals dataframe calculated by the test.

        Attribute: Returns the residual values in a dataframe.
    */
    action GetResiduals returns DataFrame
        return residuals
    end

    /*
        Sets the residuals dataframe calculated by the test.

        Attribute: Parameter residuals the dataframe of residual values
    */
    action SetResiduals(DataFrame residuals)
        me:residuals = residuals
    end

    /*
        Sets the adjusted residuals dataframe calculated by the test.

        Attribute: Parameter residuals the dataframe of residual values
    */
    action SetAdjustedResiduals(DataFrame adjustedResiduals)
        me:adjustedResiduals = adjustedResiduals
    end

    /*
        Obtains the adjusted residuals dataframe calculated by the test.

        Attribute: Returns the residual values in a dataframe.
    */
    action GetAdjustedResiduals returns DataFrame
        return adjustedResiduals
    end

    /*
        Obtains the warning flag set by the test.

        Attribute: Returns the warning flag boolean.
    */
    action GetApproximationWarningFlag returns boolean
        return approximationWarning
    end

    /*
        Sets the warning flag for the test.

        Attribute: Parameter warning is true if approximation may be incorrect.
    */
    action SetApproximationWarningFlag(boolean flag)
        me:approximationWarning = flag
    end

    /*
        Sets the goodness of fit flag for the test.

        Attribute: Parameter goodnessOfFit is true if the result comes from a goodness of fit test.
    */
    action SetGoodnessOfFit(boolean goodnessOfFit)
        me:goodnessOfFit = goodnessOfFit
    end

    /*
        Sets the sample size for the test.

        Attribute: Parameter sampleSize is sample size.
    */
    action SetSampleSize(integer sampleSize)
        me:sampleSize = sampleSize
    end

    /*
        Obtains the sample size for the test.

        Attribute: Returns the sample size.
    */
    action GetSampleSize returns integer
        return sampleSize
    end

    /*
        Sets the first column (or only column) used in this calculation.

        Attribute: Parameter variable is column header.
    */
    action SetVariable1(text variable)
        me:variable1 = variable
    end

    /*
        Sets the second column (if used) used in this calculation.

        Attribute: Parameter variable is column header.
    */
    action SetVariable2(text variable)
        me:variable2 = variable
    end

    /*
        Sets the factor (if used) used in this calculation.

        Attribute: Parameter variable is factor header and unique factor.
    */
    action SetFactor(text factor)
        me:factor = factor
    end

    /* Returns the summary of a CompareCountsPairwise test in CompareCounts (if conducted) */
    action GetPairwiseSummary returns text
        Math math
        text summary = ""
        text lf = summary:GetLineFeed()
        integer digits = GetFormat():GetSignificantDigits()
        if GetPairwiseResults() not= undefined
            integer i = 0
            repeat while i < GetPairwiseResults():GetSize()
                CompareCountsResult pair = GetPairwiseResults():Get(i)
                if i = 0
                    summary = summary + pair:GetFormalTestName()
                end
                if pair:GetGroupsFrame():GetSize() > 1
                    text group1 = pair:GetGroupsFrame():GetColumn(0):GetHeader()
                    text group2 = pair:GetGroupsFrame():GetColumn(1):GetHeader()
                    summary = summary + lf + "  " + group1 + " - " + group2 + ": p = " + math:Round(pair:GetProbabilityValue(), digits)
                    if pair:IsSignificant()
                        summary = summary + " ** significant **"
                    end
                end
                i = i + 1
            end
        end
        return summary
    end

    /*
        This action summarizes the result and lists it informally.

        It does not list the observed, expected or residual dataframes as those
        can be very large. If those are wanted, it's best to get them separately.
    */
    action GetSummary returns text
        if GetExperimentalDesign() = undefined
            return ""
        end
        text summary = ""
        text lf = summary:GetLineFeed()
        if GetExperimentalDesign():GetNumberOfIndependentGroups() = 2
            variable1 = GetExperimentalDesign():GetBetweenSubjectsFactors():Get(0)
            variable2 = GetExperimentalDesign():GetDependentVariables():Get(0)
        elseif repeated and GetExperimentalDesign():GetNumberOfMeasurements() >= 2
            variable1 = GetExperimentalDesign():GetWithinSubjectsFactors():Get(0)
            variable2 = GetExperimentalDesign():GetDependentVariables():Get(0)
        end

        summary = summary + "A "+ GetFormalTestName() + " was performed."
        if factor not= ""
            summary = summary + lf + "Factor: " + factor
        end
       
        if goodnessOfFit
            summary = summary + lf + "Column: " + variable1
        else
            summary = summary + lf + "Columns: " + variable1 + " and " + variable2
        end

        summary = summary + lf + "Statistic (χ2): " + GetTestStatistic()

        summary = summary + lf + "Degrees Of Freedom: " + GetDegreesOfFreedom()

        summary = summary + lf + "Probability: " + GetProbabilityValue()
    
        if GetEffectSizesTable():GetSize() > 0
            summary = summary + lf + "Effect Size ("+ GetEffectSizeName() +"): " + GetEffectSize()
        end

        if GetApproximationWarningFlag()
            summary = summary + lf + "** Chi-squared approximation may be incorrect. At least one observed count is less than 5 **"
        end

        return summary
    end

    /*
        This action summarizes the result and places it into formal academic language, in 
        APA format.

        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf
    */
    action GetFormalSummary returns text
        if GetExperimentalDesign() = undefined
            return ""
        end
        text summary = ""
        text lf = summary:GetLineFeed()
        if GetExperimentalDesign():GetNumberOfIndependentGroups() = 2
            variable1 = GetExperimentalDesign():GetBetweenSubjectsFactors():Get(0)
            variable2 = GetExperimentalDesign():GetDependentVariables():Get(0)
        elseif repeated and GetExperimentalDesign():GetNumberOfMeasurements() >= 2
            variable1 = GetExperimentalDesign():GetWithinSubjectsFactors():Get(0)
            variable2 = GetExperimentalDesign():GetDependentVariables():Get(0)
        end

        if goodnessOfFit
            if factor = ""
                summary = summary + "A "+ GetFormalTestName() + " was performed to determine whether the distribution of " 
                                  + variable1 + " was equal between " + GetObserved():GetColumn(0):GetSize() + " categories."
            else
                summary = summary + "A "+ GetFormalTestName() + " was performed on " + factor + " to determine whether the distribution of " 
                                  + variable1 + " was equal between " + GetObserved():GetColumn(0):GetSize() + " categories."
            end
            if GetProbabilityValue() <= GetSignificanceLevel()
                //P-value ≤ α: The variables have a statistically significant association (Reject H0)
                summary = summary + lf + "The distributions did differ by " + variable1
            else
                //P-value > α: Cannot conclude that the variables are associated (Fail to reject H0)
                summary = summary + lf + "The distributions did not differ by " + variable1
            end
        else
            if factor = ""
                summary = summary + "A "+ GetFormalTestName() + " was performed to assess the relationship between " 
                                  + variable1 + " and " + variable2 + "."
            else
                summary = summary + "A "+ GetFormalTestName() + " was performed on " + factor + " to assess the relationship between " 
                                  + variable1 + " and " + variable2 + "."
            end
            if GetProbabilityValue() <= GetSignificanceLevel()
                //P-value ≤ α: The variables have a statistically significant association (Reject H0)
                summary = summary + lf + "There was a significant relationship between the two variables"
            else
                //P-value > α: Cannot conclude that the variables are associated (Fail to reject H0)
                summary = summary + lf + "There was not a significant relationship between the two variables"
            end
        end

        summary = summary + ", " + GetFormalNumericalResult() + "."

        return summary
    end

    action GetFormalNumericalResult() returns text
        if GetExperimentalDesign() = undefined
            return ""
        end
        text summary = ""
        summary = summary + "χ2("
            + GetFormat():FormatDegreesOfFreedom(GetDegreesOfFreedom()) + ", N = " + GetExperimentalDesign():GetNumberOfSubjects() + ") = " 
            + GetFormat():FormatTestStatistic(GetTestStatistic())

        number p = GetProbabilityValue()
        if p < GetFormat():PRECISION_LIMIT
            summary = summary + ", p < " + GetFormat():FormatProbabilityValue(p)
        else
            summary = summary + ", p = " + GetFormat():FormatProbabilityValue(p)
        end
        return summary
    end

     /*
        This creates an HTML page with the results as its contents.  
    */
    action GetReport(File file)
        WebPage page        

        //add language headers
        page:AddAttribute("xml:lang", "en")
        page:SetLanguage("en")

        //add the meta-data character set
        MetaData charset
        charset:SetCharacterSet("UTF-8")
        page:AddMetaData(charset)

        MetaData viewport
        viewport:SetContent("width=device-width, initial-scale=1")
        viewport:SetName("viewport")
        page:AddMetaData(viewport)

        page:AddIcon("http://quorumlanguage.com/media/favicon.ico")
        page:AddScript("http://quorumlanguage.com/script/quorumCharts.js")
        page:AddStylesheet("http://quorumlanguage.com/style/quorumCharts.css")
        page:SetWebPageTitle("Quorum Statistical Report: " + GetFormalTestName())

        page:Add(GetReportDiv())                          

        file:Write(page:Generate()) 
    end
    
    action GetReportDiv() returns Division       
        // BoxPlotWriter chartWriter
        Division divide
       
        // for summary
        divide:SetStyle("font-family: sans-serif")
        divide:AddHeading(GetFormalTestName() + " Report", 2)
        divide:AddHeading("Summary: GetSummary()", 3)
        divide:AddParagraph(GetSummary())
        divide:AddHeading("Formal Summary: GetFormalSummary()", 3)
        divide:AddParagraph(GetFormalSummary())

        // for table
//        divide:AddHeading("Table Summary", 3)
//        WebTable table1
//        WebTable table2
//        table1:SetBorder(true)
//        table2:SetBorder(true)     
//
//        table1:Add(GetSummaryDataFrame())
//        divide:Add(table1)
//        table2:Add(GetDescriptiveStatisticsDataFrame())
//        divide:Add(table2)

//        BoxPlot chart = GetChart()
//        chart:Display(true)
//        divide:AddText(chartWriter:WriteOutChart(chart))       
        return divide             
    end

end