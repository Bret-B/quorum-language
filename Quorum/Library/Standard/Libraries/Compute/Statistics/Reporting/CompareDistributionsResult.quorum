package Libraries.Compute.Statistics.Reporting

use Libraries.Containers.Array
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Math
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.Columns.TextColumn
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.System.File
use Libraries.Interface.Controls.Charts.all
use Libraries.Web.Page.all

/*
    This class represents data that comes back from CompareDistributionToNormal
    in a CompareDistributions calculation (shapiro-wilk test).

    Attribute: Author Hannah Williams
*/
class CompareDistributionsResult is StatisticalTestResult
    /* The factor (if used) for this calculation. */
    text factor = ""
    Math math

    /* The columns that were used in this calculation. */
    Array<DataFrameColumn> groups 

    action SetFactor(text factor)
        me:factor = factor
    end

    action GetFactor returns text
        return factor
    end

    action SetGroups(Array<DataFrameColumn> groups)
        me:groups = groups
    end

    action GetGroups returns Array<DataFrameColumn>
        return groups
    end

    /*
        This action summarizes the result and lists it informally.
    */
    action GetSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        integer digits = GetFormat():GetSignificantDigits()

        if groups:GetSize() = 1
            summary = summary + "A "+ GetFormalTestName() + " was conducted on " + groups:Get(0):GetHeader()
        elseif groups:GetSize() = 2
            text sample1 = groups:Get(0):GetHeader()
            text sample2 = groups:Get(1):GetHeader()
            summary = summary + "A "+ GetFormalTestName() + " was conducted to compare " + sample1 + " and " + sample2 + "."
        end
        if GetFactor() not= ""
            summary = summary + lf + "Factor: " + GetFactor()
        end

        summary = summary + lf + "Statistic (W): " + math:Round(GetTestStatistic(), digits)

        summary = summary + lf + "Probability: " + math:Round(GetProbabilityValue(), digits)

        if GetEffectSizeName() not= ""
            summary = summary + lf + "Effect Size (" + GetEffectSizeName() + "): " + math:Round(GetEffectSize(), digits)
        end

        return summary
    end

    /*
        This action summarizes the result and places it into formal academic language, in 
        APA format.

        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf
    */
    action GetFormalSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()

        if groups:GetSize() = 1
            if GetFactor() = ""
                summary = summary + "A " + GetFormalTestName() + " was conducted on " + groups:Get(0):GetHeader() + "."
            else
                summary = summary + "A " + GetFormalTestName() + " was conducted on " + groups:Get(0):GetHeader() + " in " + GetFactor() + "."
            end
        elseif groups:GetSize() = 2
            text sample1 = groups:Get(0):GetHeader()
            text sample2 = groups:Get(1):GetHeader()
            summary = summary + "A "+ GetFormalTestName() + " was conducted to compare the distributions of " + sample1 + " and " + sample2 + "."
        end

        if GetProbabilityValue() <= GetSignificanceLevel()
            //P-value ≤ α: The differences between some of the means are statistically significant (Reject H0)
            summary = summary + lf + "There was significant evidence of non-normality"
        else
            //P-value > α: The differences between the means are not statistically significant (Fail to reject H0)
            summary = summary + lf + "There was not significant evidence of non-normality"
        end

        summary = summary + ", " + GetFormalNumericalResult() + "."

        return summary
    end

    action GetFormalNumericalResult() returns text
        text summary = ""
        summary = summary + "W = " + GetFormat():FormatTestStatistic(GetTestStatistic())

        number p = GetProbabilityValue()
        if p < GetFormat():PRECISION_LIMIT
            summary = summary + ", p < " + GetFormat():FormatProbabilityValue(p)
        else
            summary = summary + ", p = " + GetFormat():FormatProbabilityValue(p)
        end
        return summary
    end

    action GetSummaryDataFrame returns DataFrame
        integer digits = GetFormat():GetSignificantDigits()
  
        TextColumn name
        NumberColumn w
        NumberColumn p
        NumberColumn ef 
        TextColumn apa

        name:SetHeader(GetFormalTestName()) 
        if IsSignificant()
            name:Add("Failed")
        else
            name:Add("Passed")
        end

        w:SetHeader("Statistic (W)")
        w:Add(math:Round(GetTestStatistic(), digits))

        p:SetHeader("Probability (P)")
        p:Add(math:Round(GetProbabilityValue(), digits))

        ef:SetHeader("Effect Size (" + GetEffectSizeName() + ")")
        if GetEffectSizeName() not= "" 
            ef:Add(math:Round(GetEffectSize(), digits))
        end

        apa:SetHeader("APA report")   
        apa:Add(GetFormalNumericalResult())

        DataFrame table
        table:AddColumn(name)
        table:AddColumn(w)
        table:AddColumn(p)
        if ef:GetSize() > 0
            table:AddColumn(ef)
        end
        table:AddColumn(apa)
        return table
    end
    
    action GetChart() returns ScatterPlot        
        DataFrame frame
        i = 0
        repeat while i < GetGroups():GetSize()
            frame:AddColumn(GetGroups():Get(i))
            i = i + 1
        end   
        frame:SelectAllColumns()    
        ScatterPlot chart = frame:NormalityCheckChart()
        chart:SetTitle("Scatter Plot")     
        // this must be there for the html to generate so it can be used in the report
        chart:Display()
        return chart
    end

    action GetReport(File file)
        WebPage page        

        //add language headers
        page:AddAttribute("xml:lang", "en")
        page:SetLanguage("en")

        //add the meta-data character set
        MetaData charset
        charset:SetCharacterSet("UTF-8")
        page:AddMetaData(charset)

        MetaData viewport
        viewport:SetContent("width=device-width, initial-scale=1")
        viewport:SetName("viewport")
        page:AddMetaData(viewport)

        page:AddIcon("http://quorumlanguage.com/media/favicon.ico")
        page:AddScript("http://quorumlanguage.com/script/quorumCharts.js")
        page:AddStylesheet("http://quorumlanguage.com/style/quorumCharts.css")
        page:SetWebPageTitle("Quorum Statistical Report: " + GetFormalTestName())

        page:Add(GetReportDiv())                          

        file:Write(page:Generate()) 
    end

    action GetReportDiv() returns Division       
        ScatterPlot chartWriter
        Division divide
       
        // for summary
        divide:SetStyle("font-family: sans-serif")
        divide:AddHeading(GetFormalTestName() + " Report", 2)
        divide:AddHeading("Summary: GetSummary()", 3)
        divide:AddParagraph(GetSummary())
        divide:AddParagraph(GetFormalNumericalResult())
//        divide:AddHeading("Formal Summary: GetFormalSummary()", 3)
//        divide:AddParagraph(GetFormalSummary())
//        divide:AddHeading("Summary: GetEasySummary()", 3)
//        divide:AddParagraph(GetEasySummary())
//
        // for table
        divide:AddHeading("Table Summary", 3)
        WebTable table1
        //WebTable table2
        table1:SetBorder(true)
        //table2:SetBorder(true)     

        table1:Add(GetSummaryDataFrame())
        divide:Add(table1)
        //table2:Add(GetDescriptiveStatisticsDataFrame())
        //divide:Add(table2)

        //divide:AddText(chartWriter:WriteOutChart(GetChart()))       
        return divide             
    end

end