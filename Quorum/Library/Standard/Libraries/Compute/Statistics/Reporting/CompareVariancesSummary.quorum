package Libraries.Compute.Statistics.Reporting

use Libraries.Containers.HashTable
use Libraries.Containers.Iterator
use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.Columns.TextColumn
use Libraries.Compute.Statistics.Columns.NumberColumn

class CompareVariancesSummary
    CompareVariancesResult result = undefined
    StatisticsFormatting format = undefined
    integer numberOfSamples = 0
    boolean multivariate = false
    boolean fatcorial = false
    Math math
    
    action SetResult(CompareVariancesResult result)
        if result not= undefined
            me:result = result
            me:format = result:GetFormat()
            numberOfSamples = result:GetGroupsFrame():GetSize()
            if result:GetFactors():GetSize() > 0 and result:GetColumns():GetSize() > 1
                multivariate = true
                numberOfSamples = result:GetGroupsTable():GetSize()
            end
            if result:GetFactors():GetSize() > 1 
                factorial = true
            end
        end
    end

    action GetSummary returns text
        if result not= undefined
            text summary = ""
            text lf = summary:GetLineFeed()
            integer digits = format:GetSignificantDigits()

            text factors = result:GetFactorList()
            text columns = result:GetColumnList()
            text dependence = ""
            if result:IsRepeated()
                dependence = "dependent"
            else
                dependence = "independent"
            end
            summary = summary + "A " + result:GetFormalTestName() + " was conducted across " + numberOfSamples + " " + dependence + " samples. "
            if factors not= "None"
                summary = summary + lf + "Factor: " + columns + " by " + factors
            end
    
            if result:IsRepeated()
                text source = result:GetSources():Get(0)
                text statName = "W"
                text approxStat = result:GetTestStatisticsTable():GetValue(source+statName):GetKeyIterator():Next()
                number statW = result:GetTestStatisticsTable():GetValue(source):GetValue(statName)
                number stat = result:GetTestStatisticsTable():GetValue(source+statName):GetValue(approxStat)
                number df = result:GetDegreesOfFreedomTable():GetValue(source):GetValue(statName)
                number pval = result:GetProbabilityValuesTable():GetValue(source):GetValue(statName)
                number gg = result:GetInformation():GetValue(source):GetValue("gg")
                number hf = result:GetInformation():GetValue(source):GetValue("hf")
                number lb = result:GetInformation():GetValue(source):GetValue("lb")
    
                summary = summary + lf + "Statistic (W): " +  math:Round(statW, digits)
                summary = summary + lf + "Statistic (Approximate χ2): " + math:Round(stat, digits)
                summary = summary + lf + "Degrees Of Freedom: " + math:Round(df, digits)
                summary = summary + lf + "Probability: " + math:Round(pval, digits)
                summary = summary + lf + "Greenhouse-Geisser Correction (ε): " + math:Round(gg, digits)
                summary = summary + lf + "Huynh-Feldt Correction (ε): " + math:Round(hf, digits)
                summary = summary + lf + "Lower-Bound Correction (ε): " + math:Round(lb, digits)
            else
                if multivariate
                    text source = result:GetSources():Get(0)
                    number m = result:GetTestStatisticsTable():GetValue(source):GetValue("M")
                    number x2 = result:GetTestStatisticsTable():GetValue(source):GetValue("χ2")
                    number f = result:GetTestStatisticsTable():GetValue(source):GetValue("F")
                    number dfn = result:GetDegreesOfFreedomTable():GetValue(source+"F"):GetValue("numerator")
                    number dfd = result:GetDegreesOfFreedomTable():GetValue(source+"F"):GetValue("denominator")
                    number fpval = result:GetProbabilityValuesTable():GetValue(source+"F"):GetValue(source+"F")
                    number x2pval = result:GetProbabilityValuesTable():GetValue(source+"χ2"):GetValue(source+"χ2")
                    summary = summary + lf + "Statistic (M): " + math:Round(m, digits)
                    summary = summary + lf + "Statistic (Approximate F): " + math:Round(f, digits)
                    summary = summary + lf + "Degrees Of Freedom Numerator: " + math:Round(dfn, digits)        
                    summary = summary + lf + "Degrees Of Freedom Denominator: " + math:Round(dfd, digits)
                    summary = summary + lf + "Probability (F): " + math:Round(fpval, digits)
                    summary = summary + lf + "Statistic (Approximate χ2): " + math:Round(x2, digits)
                    summary = summary + lf + "Degrees Of Freedom: " + math:Round(dfn, digits)
                    summary = summary + lf + "Probability (χ2): " + math:Round(x2pval, digits)
                else
                    text source = result:GetSources():Get(0)
                    text statName = result:GetTestStatisticsTable():GetValue(source):GetKeyIterator():Next()
                    number stat = result:GetTestStatisticsTable():GetValue(source):GetValue(statName)
                    number dfb = result:GetDegreesOfFreedomTable():GetValue(source):GetValue("numerator")
                    number dfw = result:GetDegreesOfFreedomTable():GetValue(source):GetValue("denominator")
                    number pval = result:GetProbabilityValuesTable():GetValue(source):GetValue(source)
                    summary = summary + lf + "Degrees Of Freedom Numerator: " + math:Round(dfb, digits)        
                    summary = summary + lf + "Degrees Of Freedom Denominator: " + math:Round(dfw, digits)
                    summary = summary + lf + "Statistic (F): " + math:Round(stat, digits)
                    summary = summary + lf + "Probability: " + math:Round(pval, digits)
                end
            end
            return summary
        end
        alert("There is no CompareVariancesResult defined to summarize. Try using SetResult()")
    end

    action GetFormalSummary returns text
        if result not= undefined
            text summary = ""
            text lf = summary:GetLineFeed()

            text factors = result:GetFactorList()
            text columns = result:GetColumnList()
            text dependence = ""
            if result:IsRepeated()
                dependence = "dependent"
            else
                dependence = "independent"
            end
    
            if factors = "None"
                summary = summary + "A " + result:GetFormalTestName() + " was conducted across " + numberOfSamples + " " + dependence + " samples. "
            else
                summary = summary + "A " + result:GetFormalTestName() + " was conducted on " + factors + " across " + numberOfSamples + " " + dependence + " samples. "
            end
    
            if multivariate
                boolean significant = false
                if result:UseFApproximation()
                    text statSource = result:GetSources():Get(0)+"F"
                    significant = result:GetProbabilityValuesTable():GetValue(statSource):GetValue(statSource) < 0.001
                elseif result:UseX2Approximation()
                    text statSource = result:GetSources():Get(0)+"χ2"
                    significant = result:GetProbabilityValuesTable():GetValue(statSource):GetValue(statSource) < 0.001
                end
                if significant
                    //P-value ≤ α: The differences between some of the means are statistically significant (Reject H0)
                    summary = summary + lf + "There was a statistically significant difference in the covariance matrices"
                else
                    //P-value > α: The differences between the means are not statistically significant (Fail to reject H0)
                    summary = summary + lf + "There was not a statistically significant difference in the covariance matrices"
                end
            else
                if result:IsSignificant()
                    //P-value ≤ α: The differences between some of the means are statistically significant (Reject H0)
                    summary = summary + lf + "There was a statistically significant difference in the variances"
                else
                    //P-value > α: The differences between the means are not statistically significant (Fail to reject H0)
                    summary = summary + lf + "There was not a statistically significant difference in the variances"
                end
            end
   
            summary = summary + ", " + GetFormalNumericalResult() + "."

            return summary
        end
        alert("There is no CompareVariancesResult defined to summarize. Try using SetResult()")
    end

    action GetFormalNumericalResult returns text
        if result not= undefined
            text summary = ""
            if result:IsRepeated()
                text source = result:GetSources():Get(0)
                text statName = "W"
                text approxStat = result:GetTestStatisticsTable():GetValue(source+statName):GetKeyIterator():Next()
                number stat = result:GetTestStatisticsTable():GetValue(source+statName):GetValue(approxStat)
                number df = result:GetDegreesOfFreedomTable():GetValue(source):GetValue(statName)
                number pval = result:GetProbabilityValuesTable():GetValue(source):GetValue(statName)

                summary = summary + "Mauchly's W = " + format:FormatTestStatistic(result:GetTestStatisticsTable():GetValue(source):GetValue("W"))
                summary = summary + ", "+approxStat+"("+format:FormatDegreesOfFreedom(df)+") = "+format:FormatTestStatistic(stat)
                if pval < format:PRECISION_LIMIT
                    summary = summary + ", p < " + format:FormatProbabilityValue(pval)
                else
                    summary = summary + ", p = " + format:FormatProbabilityValue(pval)
                end
            else
                if multivariate
                    if result:UseFApproximation()
                        text source = result:GetSources():Get(0)
                        text statName = "F"
                        number stat = result:GetTestStatisticsTable():GetValue(source):GetValue(statName)
                        number dfb = result:GetDegreesOfFreedomTable():GetValue(source+statName):GetValue("numerator")
                        number dfw = result:GetDegreesOfFreedomTable():GetValue(source+statName):GetValue("denominator")
                        number pval = result:GetProbabilityValuesTable():GetValue(source+statName):GetValue(source+statName)
        
                        summary = summary + "Box's M = " + format:FormatTestStatistic(result:GetTestStatisticsTable():GetValue(source):GetValue("M"))
                        summary = summary + ", " + statName + "(" + format:FormatDegreesOfFreedom(dfb) + ", " + format:FormatDegreesOfFreedom(dfw)+") = " + format:FormatTestStatistic(stat)
                        if pval < format:PRECISION_LIMIT
                            summary = summary + ", p < " + format:FormatProbabilityValue(pval)
                        else
                            summary = summary + ", p = " + format:FormatProbabilityValue(pval)
                        end  
                    elseif result:UseX2Approximation()
                        text source = result:GetSources():Get(0)
                        text statName = "χ2"
                        number stat = result:GetTestStatisticsTable():GetValue(source):GetValue(statName)
                        number df = result:GetDegreesOfFreedomTable():GetValue(source+statName):GetValue(source+statName)
                        number pval = result:GetProbabilityValuesTable():GetValue(source+statName):GetValue(source+statName)
        
                        summary = summary + "Box's M = " + format:FormatTestStatistic(result:GetTestStatisticsTable():GetValue(source):GetValue("M"))
                        summary = summary + ", " + statName + "(" + format:FormatDegreesOfFreedom(df) + ") = " + format:FormatTestStatistic(stat)
                        if pval < format:PRECISION_LIMIT
                            summary = summary + ", p < " + format:FormatProbabilityValue(pval)
                        else
                            summary = summary + ", p = " + format:FormatProbabilityValue(pval)
                        end
                    end                
                else
                    text source = result:GetSources():Get(0)
                    text statName = result:GetTestStatisticsTable():GetValue(source):GetKeyIterator():Next()
                    number stat = result:GetTestStatisticsTable():GetValue(source):GetValue(statName)
                    number dfb = result:GetDegreesOfFreedomTable():GetValue(source):GetValue("numerator")
                    number dfw = result:GetDegreesOfFreedomTable():GetValue(source):GetValue("denominator")
                    number pval = result:GetProbabilityValuesTable():GetValue(source):GetValue(source)
    
                    summary = summary + statName+"("+format:FormatDegreesOfFreedom(dfb)+", "+format:FormatDegreesOfFreedom(dfw)+") = "+format:FormatTestStatistic(stat)
                    if pval < format:PRECISION_LIMIT
                        summary = summary + ", p < " + format:FormatProbabilityValue(pval)
                    else
                        summary = summary + ", p = " + format:FormatProbabilityValue(pval)
                    end
                end
            end
            return summary
        end
        alert("There is no CompareVariancesResult defined to summarize. Try using SetResult()")
    end

    action GetSummaryDataFrame returns DataFrame
        if result not= undefined
            if result:IsRepeated()
                return DependentSummaryDataFrame()
            else
                if multivariate
                    return MultivariateSummaryDataFrame()
                else
                    return IndependentSummaryDataFrame()
                end
            end
        end
        alert("There is no CompareVariancesResult defined to summarize. Try using SetResult()")
    end

    private action IndependentSummaryDataFrame returns DataFrame
        number nan = 0
        integer digits = format:GetSignificantDigits()
        text source = result:GetSources():Get(0)
        text statName = result:GetTestStatisticsTable():GetValue(source):GetKeyIterator():Next()
        number stat = result:GetTestStatisticsTable():GetValue(source):GetValue(statName)
        number dfb = result:GetDegreesOfFreedomTable():GetValue(source):GetValue("numerator")
        number dfw = result:GetDegreesOfFreedomTable():GetValue(source):GetValue("denominator")
        number pval = result:GetProbabilityValuesTable():GetValue(source):GetValue(source)

        TextColumn name
        name:SetHeader("Levene's Test Of Homogeneity")
        name:Add(source)

        NumberColumn f
        f:SetHeader("Statistic (F)")
        f:Add(math:Round(stat, digits))

        NumberColumn df1
        df1:SetHeader("Degrees Of Freedom (DF1)")
        df1:Add(math:Round(dfb, digits))

        NumberColumn df2
        df2:SetHeader("Degrees Of Freedom (DF2)")
        df2:Add(math:Round(dfw, digits))

        NumberColumn p
        p:SetHeader("Probability (P)")
        p:Add(math:Round(pval, digits))

        DataFrame table
        table:AddColumn(name)
        table:AddColumn(f)
        table:AddColumn(df1)
        table:AddColumn(df2)
        table:AddColumn(p)
        return table
    end

    private action MultivariateSummaryDataFrame returns DataFrame
        number nan = 0
        integer digits = format:GetSignificantDigits()
        text source = result:GetSources():Get(0)
        text statName = "M"
        number mStat = result:GetTestStatisticsTable():GetValue(source):GetValue("M")
        number x2Stat = result:GetTestStatisticsTable():GetValue(source):GetValue("χ2")
        number fStat = result:GetTestStatisticsTable():GetValue(source):GetValue("F")
        number dfn = result:GetDegreesOfFreedomTable():GetValue(source+"F"):GetValue("numerator")
        number dfd = result:GetDegreesOfFreedomTable():GetValue(source+"F"):GetValue("denominator")
        number x2p = result:GetProbabilityValuesTable():GetValue(source+"χ2"):GetValue(source+"χ2")
        number fp = result:GetProbabilityValuesTable():GetValue(source+"F"):GetValue(source+"F")
        

        TextColumn name
        name:SetHeader("Box's M-Test Of Homogeneity")
        name:Add(source)

        NumberColumn m
        m:SetHeader("Statistic (M)")
        m:Add(math:Round(mStat, digits))

        NumberColumn f
        f:SetHeader("Approximate F")
        f:Add(math:Round(fStat, digits))

        NumberColumn df1
        df1:SetHeader("Degrees Of Freedom (DF1)")
        df1:Add(math:Round(dfn, digits))

        NumberColumn df2
        df2:SetHeader("Degrees Of Freedom (DF2)")
        df2:Add(math:Round(dfd, digits))

        NumberColumn p1
        p1:SetHeader("F Probability (P)")
        p1:Add(math:Round(fp, digits))

        NumberColumn x2
        x2:SetHeader("Approximate χ2")
        x2:Add(math:Round(x2Stat, digits))

        NumberColumn df
        df:SetHeader("Degrees Of Freedom (DF)")
        df:Add(math:Round(dfn, digits))

        NumberColumn p2
        p2:SetHeader("χ2 Probability (P)")
        p2:Add(math:Round(x2p, digits))

        DataFrame table
        table:AddColumn(name)
        table:AddColumn(m)
        table:AddColumn(f)
        table:AddColumn(df1)
        table:AddColumn(df2)
        table:AddColumn(p1)
        table:AddColumn(x2)
        table:AddColumn(df)
        table:AddColumn(p2)
        return table
    end

    private action DependentSummaryDataFrame returns DataFrame
        number nan = 0
        integer digits = format:GetSignificantDigits()

        text source = result:GetSources():Get(0)
        text statName = "W"
        text approxStat = result:GetTestStatisticsTable():GetValue(source+statName):GetKeyIterator():Next()
        number statW = result:GetTestStatisticsTable():GetValue(source):GetValue(statName)
        number stat = result:GetTestStatisticsTable():GetValue(source+statName):GetValue(approxStat)
        number dW = result:GetDegreesOfFreedomTable():GetValue(source):GetValue(statName)
        number pval = result:GetProbabilityValuesTable():GetValue(source):GetValue(statName)
        number ggCorrection = result:GetInformation():GetValue(source):GetValue("gg")
        number hfCorrection = result:GetInformation():GetValue(source):GetValue("hf")
        number lbCorrection = result:GetInformation():GetValue(source):GetValue("lb")

        TextColumn name
        name:SetHeader("Mauchly Test Of Sphericity")
        name:Add(source)

        NumberColumn w
        w:SetHeader("Statistic (W)")
        w:Add(math:Round(statW, digits))

        NumberColumn df
        df:SetHeader("Degrees Of Freedom")
        df:Add(math:Round(dW, digits))

        NumberColumn x2
        x2:SetHeader("Approximate χ2")
        x2:Add(math:Round(stat, digits))

        NumberColumn p
        p:SetHeader("Probability (P)")
        p:Add(math:Round(pval, digits))

        NumberColumn gg
        gg:SetHeader("Greenhouse-Geisser (ε)")
        gg:Add(math:Round(ggCorrection, digits))

        NumberColumn hf
        hf:SetHeader("Huynh-Feldt (ε)")
        hf:Add(math:Round(hfCorrection, digits))

        NumberColumn lb
        lb:SetHeader("Lower-Bound (ε)")
        lb:Add(math:Round(lbCorrection, digits))

        DataFrame table
        table:AddColumn(name)
        table:AddColumn(w)
        table:AddColumn(x2)
        table:AddColumn(df)
        table:AddColumn(p)
        table:AddColumn(gg)
        table:AddColumn(hf)
        table:AddColumn(lb)

        return table
    end
end