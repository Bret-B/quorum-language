package Libraries.Compute.Statistics.Reporting

use Libraries.Containers.Array
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.Columns.TextColumn
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.System.File

/*
    This class represents data that comes back from CompareIndependentVariances 
    or CompareDependentVariances in a CompareVariances calculation (levene's or mauchly's test).

    Attribute: Author Hannah Williams
*/
class CompareVariancesResult is CompareGroupsResult
    number w_statistic = 0      // The Mauchly's W test statistic
    number chi_w_squared = 0    // The approximate chi squared test statistic for W
    number v_statistic = 0      // The John, Nagao and Sugiura (JNS)'s V test statistic
    number chi_v_squared = 0    // The approximate chi squared test statistic for V
    number lbCorrection = 0     // Lower-bound epsilon
    number ggCorrection = 0     // Greenhouse-Geisser epsilon
    number hfCorrection = 0     // Huynh-Feldt epsilon
    number degreesOfFreedomBetweenGroups = 0    
    number degreesOfFreedomWithinGroups = 0
    number degreesOfFreedomError = 0
    boolean repeatedMeasures = false

    action GetDegreesOfFreedomBetweenGroups returns number
        return degreesOfFreedomBetweenGroups
    end

    action SetDegreesOfFreedomBetweenGroups(number degreesOfFreedomBetweenGroups)
        me:degreesOfFreedomBetweenGroups = degreesOfFreedomBetweenGroups
    end

    action GetDegreesOfFreedomWithinGroups returns number
        return degreesOfFreedomWithinGroups
    end

    action SetDegreesOfFreedomWithinGroups(number degreesOfFreedomWithinGroups)
        me:degreesOfFreedomWithinGroups = degreesOfFreedomWithinGroups
    end

    action GetDegreesOfFreedomError returns number
        return degreesOfFreedomError
    end

    action SetDegreesOfFreedomError(number degreesOfFreedomError)
        me:degreesOfFreedomError = degreesOfFreedomError
    end

    action RepeatedMeasures returns boolean
        return repeatedMeasures
    end

    action RepeatedMeasures(boolean repeatedMeasures)
        me:repeatedMeasures = repeatedMeasures
    end

    action GetWTestStatistic returns number
        return w_statistic
    end

    action SetWTestStatistic(number testStatistic)
        w_statistic = testStatistic
        parent:StatisticalTestResult:SetTestStatistic(testStatistic)
    end

    action GetChiWSquaredTestStatistic returns number
        return chi_w_squared
    end

    action SetChiWSquaredTestStatistic(number testStatistic)
        chi_w_squared = testStatistic
    end

    action GetVTestStatistic returns number
        return v_statistic
    end

    action SetVTestStatistic(number testStatistic)
        v_statistic = testStatistic
    end

    action GetChiVSquaredTestStatistic returns number
        return chi_v_squared
    end

    action SetChiVSquaredTestStatistic(number testStatistic)
        chi_v_squared = testStatistic
    end

    action GetLowerBoundCorrection returns number
        return lbCorrection
    end

    action SetLowerBoundCorrection(number correction)
        lbCorrection = correction
    end

    action GetGreenhouseGeisserCorrection returns number
        return ggCorrection
    end

    action SetGreenhouseGeisserCorrection(number correction)
        ggCorrection = correction
    end

    action GetHuynhFeldtCorrection returns number
        return hfCorrection
    end

    action SetHuynhFeldtCorrection(number correction)
        hfCorrection = correction
    end

    action GetCorrection returns number
        if repeatedMeasures
            if GetProbabilityValue() <= GetSignificanceLevel() // significant result
                if ggCorrection > 0.75
                    return hfCorrection
                else
                    return ggCorrection
                end
            else
                return 1.0
            end
        else
            return 0 // Needs to return correction degrees of freedom for levene's test
        end
    end

    /*
        This action summarizes the result and lists it informally.
    */
    action GetSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()

        if repeatedMeasures
            summary = summary + "A "+ GetFormalTestName() + " was conducted across " + GetGroups():GetSize() + " dependent samples."
        else
            summary = summary + "A "+ GetFormalTestName() + " was conducted across " + GetGroups():GetSize() + " independent samples."
        end
        if GetFactor() not= ""
            summary = summary + lf + "Factor: " + GetFactor()
        end

        if repeatedMeasures

            summary = summary + lf + "Statistic (W): " + w_statistic

            summary = summary + lf + "Statistic (Approximate χ2): " + chi_w_squared

            summary = summary + lf + "Degrees Of Freedom: " + GetDegreesOfFreedom()

            summary = summary + lf + "Probability: " + GetProbabilityValue()

            summary = summary + lf + "Greenhouse-Geisser Correction (ε): " + ggCorrection

            summary = summary + lf + "Huynh-Feldt Correction (ε): " + hfCorrection

            summary = summary + lf + "Lower-Bound Correction (ε): " + lbCorrection
        else

            summary = summary + lf + "Degrees Of Freedom Between Groups: " + degreesOfFreedomBetweenGroups
    
            summary = summary + lf + "Degrees Of Freedom Within Groups: " + degreesOfFreedomWithinGroups

            summary = summary + lf + "Statistic (F): " + GetTestStatistic()

            summary = summary + lf + "Probability: " + GetProbabilityValue()
        end

        return summary
    end

    /*
        This action summarizes the result and places it into formal academic language, in 
        APA format.

        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf
    */
    action GetFormalSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()

        if repeatedMeasures
            if GetFactor() = ""
                summary = summary + "A " + GetFormalTestName() + " was conducted across " + GetGroups():GetSize() + " dependent samples."
            else
                summary = summary + "A " + GetFormalTestName() + " was conducted on " + GetFactor() + " across " + GetGroups():GetSize() + " dependent samples."
            end
        else
            if GetFactor() = ""
                summary = summary + "A " + GetFormalTestName() + " was conducted across " + GetGroups():GetSize() + " independent samples."
            else
                summary = summary + "A " + GetFormalTestName() + " was conducted on " + GetFactor() + " across " + GetGroups():GetSize() + " independent samples."
            end
        end

        if GetProbabilityValue() <= GetSignificanceLevel()
            //P-value ≤ α: The differences between some of the means are statistically significant (Reject H0)
            summary = summary + lf + "There was a statistically significant difference in the variances"
        else
            //P-value > α: The differences between the means are not statistically significant (Fail to reject H0)
            summary = summary + lf + "There was not a statistically significant difference in the variances"
        end

        summary = summary + ", " + GetFormalNumericalResult() + "."

        return summary
    end

    action GetFormalNumericalResult() returns text
        text summary = ""
        if repeatedMeasures 
            summary = summary + "χ2("                
                + GetFormat():FormatDegreesOfFreedom(GetDegreesOfFreedom()) + ") = " 
                + GetFormat():FormatTestStatistic(GetChiWSquaredTestStatistic())
        else
            summary = summary + "F(" 
                + GetFormat():FormatDegreesOfFreedom(degreesOfFreedomBetweenGroups) + ", " 
                + GetFormat():FormatDegreesOfFreedom(degreesOfFreedomWithinGroups) + ") = " 
                + GetFormat():FormatTestStatistic(GetTestStatistic())
        end

        number p = GetProbabilityValue()
        if p < GetFormat():PRECISION_LIMIT
            summary = summary + ", p < " + GetFormat():FormatProbabilityValue(p)
        else
            summary = summary + ", p = " + GetFormat():FormatProbabilityValue(p)
        end
        return summary
    end
end