package Libraries.Compute.Statistics.Calculations

use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.DataFrameColumnCalculation
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Math
use Libraries.Compute.Statistics.Transforms.DataPairComparison
use Libraries.Compute.Statistics.Columns.IntegerColumn
use Libraries.Compute.Statistics.Transforms.DataPair
use Libraries.Containers.Array


/*
    This class calculates, for each data point in a column, the overall rank that item
    has in the data set.

    Attribute: Author Andreas Stefik

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Calculations.CalculateRanks

    //Load a comma separated file
    DataFrame frame
    frame:Load("Data.csv") 
    CalculateRanks ranks
    DataFrameColumn column = frame:GetColumn(0)
    column:Calculate(ranks)

    output ranks:GetRanks():ToText()
*/
class CalculateRanks is DataFrameColumnCalculation
    Array<DataPair> values
    integer globalIndex = 0
    integer firstRank = 1
    boolean compareValues = true
    boolean sortSmallToLarge = true
    boolean averageTies = true
    boolean maximumTies = false
    boolean minimumTies = false
    DataFrameColumn ranks = undefined

    action Start(DataFrameColumn column) 
    end

    action End(DataFrameColumn column) 
        DataPairComparison compare
        compare:SetCompareValues(compareValues)
        compare:SetSortSmallToLarge(sortSmallToLarge)
        values:Sort(compare)

        DataFrameColumn rankColumn = undefined
        if IsAverageTies()
            NumberColumn col
            col:SetHeader(column:GetHeader())
            col:SetSize(values:GetSize())
            rankColumn = col
        else
            IntegerColumn col
            col:SetHeader(column:GetHeader())
            col:SetSize(values:GetSize())
            rankColumn = col
        end
        

        integer firstTie = -1
        integer lastTie = -1
        number averageTie = -1
        boolean manageTies = false
        DataPair next = undefined
        i = 0
        repeat while i < values:GetSize()
            DataPair pair = values:Get(i)

            if i + 1 < values:GetSize()
                next = values:Get(i + 1)
            else
                next = undefined
            end
            if next not= undefined
                integer value = compare:Compare(pair, next)
                if value = 0
                    if firstTie = -1    //this is the first tie, otherwise keep going
                        firstTie = i
                    end
                else 
                    //if the first tie is not -1, this is the last tie
                    if firstTie not= -1
                        lastTie = i
                        if firstRank > 1
                            averageTie = firstTie + ((1.0 * (2 + lastTie - firstTie) + firstRank) / 2.0)
                        else
                            averageTie = firstTie + ((1.0 * (2 + lastTie - firstTie)) / 2.0)
                        end
                        manageTies = true
                    end
                end
            else
                if firstTie = -1    //this is the first tie, otherwise keep going
                    firstTie = i
                else
                    lastTie = i
                    averageTie = firstTie + ((1.0 * (2 + lastTie - firstTie) + firstRank) / 2.0)
                    manageTies = true
                end
            end

            Integer o = cast(Integer, pair:key)
            integer index = o:GetValue()

            if manageTies
                //iterate first to last and set to the min, max, or average
                integer j = firstTie
                repeat while j <= lastTie
                    //get the item and its index
                    DataPair tiedPair = values:Get(j)
                    Integer o2 = cast(Integer, tiedPair:key)
                    integer tiedIndex = o2:GetValue()
                    
                    if IsAverageTies()
                        rankColumn:SetAsNumber(tiedIndex, averageTie)
                    elseif IsMinimumTies() 
                        rankColumn:SetAsInteger(tiedIndex, firstTie + firstRank)
                    else
                        rankColumn:SetAsInteger(tiedIndex, lastTie + firstRank)
                    end
                    j = j + 1
                end
                manageTies = false
                firstTie = -1
                lastTie = -1
                averageTie = -1
            else //we aren't in part of the tie processing 
                if IsAverageTies()
                    rankColumn:SetAsNumber(index, (i + firstRank))
                else
                    rankColumn:SetAsInteger(index, (i + firstRank))
                end
            end
            
            i = i + 1
        end
        ranks = rankColumn
    end

    //The type doesn't happen to matter for this kind of operation
    action Add(Number value) 
        AddNextObject(value)
    end

    action Add(Integer value) 
        AddNextObject(value)
    end

    action Add(Boolean value) 
        AddNextObject(value)
    end

    action Add(Text value) 
        AddNextObject(value)
    end
    
    action Add(Object value) 
        if value = undefined
            alert("Undefined value detected in rank conversion. Please remove all undefined values.")
        end
        AddNextObject(value)
    end

    private action AddNextObject(Object value)
        DataPair pair
        Integer i
        i:SetValue(globalIndex)
        pair:key = i
        pair:value = value
        values:Add(pair)
        globalIndex = globalIndex + 1
    end

    /*
        This Calculation can be re-used if the Empty action is called before
        passing it to another column. Otherwise, it retains its data.
    */
    action Empty
        globalIndex = 0
        firstRank = 1
        compareValues = true
        sortSmallToLarge = true
        ranks = undefined
        values:Empty()
    end

    action GetFirstRank returns integer
        return firstRank
    end

    action SetFirstRank(integer firstRank)
        if firstRank < 0
            me:firstRank = 1
        else
            me:firstRank = firstRank
        end
    end

    action GetCompareValues returns boolean
        return compareValues
    end

    action SetCompareValues(boolean compareValues)
        me:compareValues = compareValues
    end

    action GetSortSmallToLarge returns boolean
        return sortSmallToLarge
    end

    action SetSortSmallToLarge(boolean sortSmallToLarge)
        me:sortSmallToLarge = sortSmallToLarge
    end

    /*
        This action returns the final result of the operation.
    */
    action GetRanks returns DataFrameColumn
        return ranks
    end

    action IsAverageTies returns boolean
        return averageTies
    end

    action AverageTies
        me:averageTies = true
        me:minimumTies = false
        me:averageTies = false
    end

    action IsMaximumTies returns boolean
        return maximumTies
    end

    action MaximumTies
        me:maximumTies = true
        me:minimumTies = false
        me:averageTies = false
    end

    action IsMinimumTies returns boolean
        return minimumTies
    end

    action MinimumTies
        me:maximumTies = false
        me:minimumTies = true
        me:averageTies = false
    end
end