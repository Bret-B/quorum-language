package Libraries.Compute.Statistics.Calculations

use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.DataFrameColumnCalculation
use Libraries.Compute.Vector
use Libraries.Containers.HashTable
use Libraries.Containers.Iterator
use Libraries.Containers.Array

/*
    This class calculates the mode of a particular DataFrameColumn. 

    Attribute: Author Andreas Stefik

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Calculations.Median

    //Load a comma separated file
    DataFrame frame
    frame:Load("Data.csv") 
    Mode mode
    DataFrameColumn column = frame:GetColumn(0)
    column:Calculate(mode)
    output mode:GetMode()
*/
class Mode is DataFrameColumnCalculation
    Array<number> modes
    HashTable<Number, integer> values
    integer size = 0
    action Start(DataFrameColumn column)
        size = column:GetSize() - column:GetUndefinedSize()
    end
    
    action Add(Number value) 
        if value not= undefined
            if values:HasKey(value)
                integer result = values:GetValue(value) + 1
                values:Add(value, result)
            else 
                values:Add(value, 1)
            end
        end
    end

    action Add(Integer value) 
        if value not= undefined
            number res = value:GetValue()
            if values:HasKey(res)
                integer result = values:GetValue(res) + 1
                values:Add(res, result)
            else 
                values:Add(res, 1)
            end
        end
    end

    action End(DataFrameColumn column) 
        Iterator<Number> results = values:GetKeyIterator()
        integer max = 0
        repeat while results:HasNext()
            Number key = results:Next()
            //get the count
            integer value = values:GetValue(key)
            if value > max
                modes:Empty()
                modes:Add(key:GetValue())
                max = value
            elseif value = max //bi-modal, tri-modal, etc.
                modes:Add(key:GetValue())
            end
        end
    end

    /*
        This Calculation can be re-used if the Empty action is called before
        passing it to another column. Otherwise, it retains its data.
    */
    action Empty
        modes:Empty()
    end

    /*
        If there are no duplicates in the column, this returns false and GetModes returns all items, 
        since they have equal frequency.

        Attribute: Returns whether or not any duplicates exist in this column
    */
    action HasDuplicates returns boolean
        if GetModes():GetSize() = size
            return false
        end
        return true
    end
    
    /*
        Returns the modes of the column. All of the modes are returned if more than one value
        has the same frequency as another. If there are no duplicates in the data, all values are returned.

        Attribute: Returns the median of the column
    */
    action GetModes returns Array<number>
        return modes
    end
end