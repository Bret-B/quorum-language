package Libraries.Compute.Statistics.Inputs

use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Containers.Support.Pair

/*
    There are many ways in which a statistical test, transform, or calculation could 
    potentially get data from a DataFrame. The Inputs package lists any of these ways. 

    ColumnInput specifically is stating that a particular class expects the data in a 
    data frame to be a set of entire columns. The values are listed as integers and this 
    means the column indices inside the DataFrame. For example, a correlation might expect 
    we are comparing columns 1 and 3 or perhaps 3 or more columns in their entirety. Anything 
    that implements this class must be able to account for the full range of this input when 
    it does its calculations.

    Attribute: Author Andreas Stefik
*/
class CellInput
    Array<Pair<integer>> cells

    /*
        This action adds a value to the end of the input.

        Attribute: Parameter x The x value of the cell.
        Attribute: Parameter y The y value of the cell.
    */
    action AddCell(integer x,  integer y)
        cells:Add(GetPair(x,y))
    end

    /*
        This action adds a value to the end of the input.

        Attribute: Parameter cell The value to be inserted.
    */
    action AddCell(Pair<integer> cell)
        cells:Add(cell)
    end


    private action GetPair(integer x, integer y) returns Pair<integer>
        Pair<integer> pair
        pair:Set(x,y)
        return pair
    end

    /*
        This action gets the item at a given location in an array.

        Attribute: Parameter location The index or location the value is located at. 

        Attribute: Returns The item at the given location.
    */
    action GetCell(integer index) returns Pair<integer>
        return cells:Get(index)
    end

    /*
        This action removes an item from an indexed object and returns that item. 

        Attribute: Parameter location The index or location of the item to remove. 

        Attribute: Returns The item that was removed from the indexed object. 
    */
    action RemoveCellAt(integer index)
        cells:RemoveAt(index)
    end

    /*
        This action removes the first occurrence of an item that is found in the Addable object. 

        Attribute: Parameter value The item to find in the Addable object. 

        Attribute: Returns Returns true if the item was removed and false if it was not removed. 
    */
    action RemoveCell(Pair<integer> index) returns boolean
        return cells:Remove(index)
    end

    /*
        This action empty's the list, clearing out all of the items contained within it. 
    */
    action EmptyCells
        cells:Empty()
    end

    /*
        This action returns a boolean value, true if the container is empty and false if it contains any items. 

        Attribute: Returns Returns true when the container is empty and false when it is not. 
    */
    action IsEmptyCells returns boolean
        return cells:IsEmpty()
    end

    /*
        This action gets an iterator for the object and returns that iterator. 

        Attribute: Returns Returns the iterator for an object. 
    */
    action GetCellIterator returns Iterator<Pair<integer>>
        return cells:GetIterator()
    end

    /*
        This action gets the size of the array.

        Attribute: Return The size of the array. 
    */
    action GetCellSize returns integer
        return cells:GetSize()
    end
end