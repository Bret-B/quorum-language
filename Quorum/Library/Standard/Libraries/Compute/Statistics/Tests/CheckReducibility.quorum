package Libraries.Compute.Statistics.Tests

use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Distributions.ClassificationDistribution
use Libraries.Compute.Statistics.Reporting.CheckReducibilityResult
use Libraries.Compute.Matrix
use Libraries.Compute.Math
use Libraries.Containers.Array

/*
    This class implements a suitibiity check before a Factor Analysis: 
        CheckReducibility is a Bartlett’s Test of Sphericity
        Check that at least some of the groups have significant correlation, a prerequisite for factor analysis.
        For more information: https://www.statology.org/bartletts-test-of-sphericity/

    Attribute: Author Tim Kluthe, Hannah Williams
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Tests.CheckReducibility

    DataFrame frame
    frame:Load("Data/Data.csv")
    frame:SelectAllColumns()

    CheckReducibility test
    test:Calculate(frame)
    output test:GetFormalSummary()
*/
class CheckReducibility is StatisticalTest
    /* The distribution used to calculate the p-value.*/
    ClassificationDistribution x2distribution

    Array<CheckReducibilityResult> results 

    Math math

    action Calculate(DataFrame frame) 
        // If nothing is selected attempt to grab frame's selection.
        if GetColumnSize() = 0 
            if frame:GetSelection() not= undefined
                frame:GetSelection():CopyTo(cast(ColumnInput, me))
            end
        end
        if GetFactorSize() = 0 
            if frame:GetSelection() not= undefined 
                frame:GetSelection():CopyTo(cast(FactorInput, me))
            end
        end

        parent:StatisticalTest:RemoveUndefined(true)
        if GetFactorSize() = 0
            parent:StatisticalTest:Calculate(frame)
        else
            parent:StatisticalTest:CalculateWithFactor(frame)
        end
    end

    private action RunTest(DataFrame frame)
        if GetColumnSize() < 2
            alert("Must include at least two columns.")
        end

        number numberOfObservations = 0
        number numberOfVariables = GetColumnSize()

        Array<DataFrameColumn> groups
        i = 0
        repeat while i < GetColumnSize()
            DataFrameColumn column = frame:GetColumn(GetColumn(i))
            if column = undefined
                alert("Column is undefined.")
            end
        
            if not column:IsNumberColumn() and not column:IsIntegerColumn()
                alert("Columns must be numerical. " + column:GetHeader() + " is not a numerical column.")
            end

            if column:GetSize() < 2
                alert("Columns must have 2 or more entries. Not enough data for test to be calculated.")
            end

            if i = 0
                numberOfObservations = column:GetSize()
            end
            groups:Add(column)
            i = i + 1
        end

        // Collect only the selected data into a frame
        DataFrame newFrame
        newFrame:SetColumns(groups)
        newFrame:SelectAllColumns()

        // Create correlation matrix of pearson correlations
        Matrix correlationMatrix = newFrame:CorrelationMatrix()

        // Compute Test Statistic
        number chi_squared = -math:NaturalLogarithm(correlationMatrix:GetDeterminant()) * ((numberOfObservations - 1) - (2 * numberOfVariables + 5) / 6)

        // Compute Degrees Of Freedom
        number degreesOfFreedom = (numberOfVariables * numberOfVariables - numberOfVariables) / 2.0

        // Compute Probability
        x2distribution:Setup(degreesOfFreedom)
        number p = 1.0 - x2distribution:CumulativeDistribution(chi_squared)

        CheckReducibilityResult result
        result:SetSignificanceLevel(GetSignificanceLevel())
        result:SetFormat(GetStatisticalFormatting())
        result:SetNumberOfVariables(GetColumnSize())
        result:SetTestStatistic(chi_squared)
        result:SetDegreesOfFreedom(degreesOfFreedom)
        result:SetProbabilityValue(p)
        result:SetFormalTestName("Bartlett’s test of sphericity")
        results:Add(result)
    end

    /*
        This returns the probability if only one result exists.

        Attribute: Returns the P-Value. 
    */
    action GetProbabilityValue returns number
        return GetResult():GetProbabilityValue()
    end

    /*
        This returns the degrees of freedom if only one result exists.

        Attribute: Returns the Degrees of Freedom. 
    */
    action GetDegreesOfFreedom returns number
        return GetResult():GetDegreesOfFreedom()
    end

    /*
        This returns the test statistic if only one result exists.

        Attribute: Returns the test statistic. 
    */
    action GetTestStatistic returns number
        return GetResult():GetTestStatistic()
    end

    /*
        This returns a result if only one exists.

        Attribute: Returns the CheckReducibilityResult object
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CheckReducibility
        use Libraries.Compute.Statistics.Reporting.CheckReducibilityResult
    
        DataFrame frame
        frame:Load("Data/Data.csv")
        frame:SelectAllColumns()
    
        CheckReducibility test
        test:Calculate(frame)
        
        CheckReducibilityResult result = test:GetResult()
    */
    action GetResult returns CheckReducibilityResult
        if results:GetSize() = 0
            alert("There are no results calculated")
        elseif results:GetSize() = 1
            return results:Get(0)
        else
            alert("There is more than one test result, use GetResults() for an array of all results")
        end
    end

    /*
        Attribute: Returns an array of CheckReducibilityResult objects
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CheckReducibility
        use Libraries.Compute.Statistics.Reporting.CheckReducibilityResult
    
        DataFrame frame
        frame:Load("Data/Data.csv")
        frame:SelectAllColumns()
    
        CheckReducibility test
        test:Calculate(frame)
        
        Array<CheckReducibilityResult> results = test:GetResults()
    */
    action GetResults returns Array<CheckReducibilityResult>
        return results
    end

    /*
        Attribute: Returns a list of the important statistics of the test
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CheckReducibility
    
        DataFrame frame
        frame:Load("Data/Data.csv")
        frame:SelectAllColumns()
    
        CheckReducibility test
        test:Calculate(frame)
        output test:GetSummary()
    */
    action GetSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        i = 0
        CheckReducibilityResult result 
        repeat while i < results:GetSize()
            result = results:Get(i)

            summary = summary + lf
            summary = summary + result:GetSummary()
            summary = summary + lf
            i = i + 1
        end
        return summary
    end

    /*
        This action summarizes the results and places them into formal academic language, in 
        APA format.
        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf

        Attribute: Returns a condensed formal result of the test
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CheckReducibility
    
        DataFrame frame
        frame:Load("Data/Data.csv")
        frame:SelectAllColumns()
    
        CheckReducibility test
        test:Calculate(frame)
        output test:GetFormalSummary()
    */
    action GetFormalSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        i = 0
        CheckReducibilityResult result 
        repeat while i < results:GetSize()
            result = results:Get(i)

            summary = summary + lf
            summary = summary + result:GetFormalSummary()
            summary = summary + lf
            i = i + 1
        end
        return summary
    end
end