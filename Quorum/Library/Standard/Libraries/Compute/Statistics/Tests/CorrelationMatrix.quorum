use Libraries.Containers.Array
use Libraries.Compute.Math
use Libraries.Compute.Statistics.Columns.NumberColumn


class CorrelationMatrix 
//    Math math
//    
//    Array<text> columnLabels
//    Array<text> rowLabels
//    Array<Array<number>> values
//
//    DataTable table
//    
//    action Compute(DataTable table)
//        me:table = table
//        Array<NumberColumn> columns = table:GetNumberColumns() 
//        integer max = columns:GetSize()
//        integer count = 0
//        Array<Array<number>> valmatrix
//        repeat while count < max
//            columnLabels:Add(columns:Get(count):GetName())
//            rowLabels:Add(columns:Get(count):GetName())
//            integer count2 = 0
//            Array<number> valrow
//            
//            repeat while count2 < max
//                number p = PearsonCorrelation(columns:Get(count), columns:Get(count2))
//                valrow:Add(p)
//                count2 = count2 + 1
//            end
//
//            valmatrix:Add(valrow)
//           
//            count = count + 1 
//        end
//        values = valmatrix
//    end
//
//    action Output()
//        
//        integer maxLabels = columnLabels:GetSize()
//        integer labelsCount = 0
//        text line = "      "
//        repeat while labelsCount < maxLabels
//            line = line +  "    " + columnLabels:Get(labelsCount)
//            
//            labelsCount = labelsCount + 1
//        end
//        output line
//
//        text outputline = ""
//        
//        integer maxX = values:GetSize()
//        integer countX = 0
//        integer maxY = values:Get(0):GetSize()
//        
//        repeat while countX < maxX
//            outputline = rowLabels:Get(countX)
//            integer countY = 0
//            Array<number> value = values:Get(countX)
//            
//            repeat while countY < maxY
//                outputline = outputline +  "    " + value:Get(countY)
//                countY = countY + 1
//            end
//
//            output outputline
//            countX = countX + 1
//        end
//        
//        
//        
//    end
//
//    action PearsonCorrelation (NumberColumn xColumn, NumberColumn yColumn) returns number
//        number xAverage = xColumn:Average()
//        number yAverage = yColumn:Average()
//
//        integer xSize = xColumn:GetSize()
//        integer ySize = yColumn:GetSize()
//
//        if xSize not= ySize
//            alert("This action is primitive and requires same size arrays.")
//        end
//
//        number top = 0
//        number bottomLeft = 0
//        number bottomRight = 0
//        integer i = 0
//        repeat while i < xSize
//            number x = xColumn:Get(i)
//            number y = yColumn:Get(i)
//
//            number xSub = x - xAverage
//            number ySub = y - yAverage
//            top = top + (xSub * ySub)
//
//            bottomLeft = bottomLeft + (math:RaiseToPower(xSub,2))
//            bottomRight = bottomRight + (math:RaiseToPower(ySub,2))
//
//            i = i + 1
//        end
//
//        number bottom = math:SquareRoot(bottomLeft * bottomRight)
//
//        number result = top / bottom
//        output result
//        return result
//    end

end