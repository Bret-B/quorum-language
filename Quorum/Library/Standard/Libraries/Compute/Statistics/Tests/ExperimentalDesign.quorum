package Libraries.Compute.Statistics.Tests

use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.Transforms.TransformLonger
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Containers.Iterator
use Libraries.Compute.Matrix

/*
    ExperimentalDesign is a helper class for several statistical tests including
    CompareMeans, CompareVariances and CompareDistributions.
    This class will take and hold various factor and column selections and transform the dataset into 
    a necessary format for each test calculation.
    Additionally this class can construct a design matrix and a contrast matrix based on selected factors.
    These matrices are used in several calculations throughout the statistical tests.
    The factors used for the contrast matrix will include only the within-subjects factors chosen.

    For more information:
    Types of designs:       https://vault.hanover.edu/~altermattw/courses/220/readings/BetweenWithinMixed.pdf
    Experimental Design:    https://en.wikipedia.org/wiki/Design_of_experiments
    Design Matrix:          https://en.wikipedia.org/wiki/Design_matrix
    Contrast Matrix:        https://en.wikipedia.org/wiki/Contrast_(statistics)

    Attribute: Author Hannah Stabler

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Tests.ExperimentalDesign
    
    DataFrame frame
    frame:Load("Data.csv")
    
    // An example of a mixed design 
    ExperimentalDesign design
    design:AddBetweenSubjectsFactor("factor1")                      // example of a between-subjects factor
    design:AddWithinSubjectsFactor("factor2", "Time1,Time2,Time3")  // example of a within-subjects factor in wide format (repeated measures)
    design:AddSubjectIdentifier("participant")                      // subject id is not needed for within-subjects wide format, but it won't hurt 

    design:Transform(frame)                                         // this will check that selections above are valid and create the design dataframe
    output design:GetDesignFrame():ToText()
*/
class ExperimentalDesign
    boolean transformed = false
    boolean repeatedMeasures = false
    boolean multivariate = false

    // Design information
    integer numberOfSubjects = 0            // How many total subjects are there?
    integer numberOfObservations = 0        // How many total observations are there?
    integer numberOfMeasurements = 0        // How many repeated measures are there?
    integer numberOfIndependentGroups = 1   // How many independent groups are there?

    private DataFrame originalFrame = undefined
    private DataFrame designFrame = undefined 

    // Holds the various selections for the design
    private text subjectIdentifierHeader = ""  
    private Array<text> dependentVariableHeaders
    private Array<text> betweenSubjectsFactorHeaders
    private Array<text> withinSubjectsFactorHeaders
    private HashTable<text, text> dependentVariableHeadersWide
    private HashTable<text, text> betweenSubjectsFactorHeadersWide
    private HashTable<text, text> withinSubjectsFactorHeadersWide

    // Design matrix 
    private Matrix designMatrix = undefined
    private HashTable<integer, text> factorIndex                // Index of the factor encoding used for matrix creation
    private Array<DataFrameColumn> factorLevels                 // Holds the levels for each factor (sorted)
    private HashTable<text, Array<integer>> columnsAssociatedWithFactor // Used to create design matrix
    private HashTable<integer, Matrix> factorsAssociatedWithColumn      // Binary activation encoded, used in design matrix

    // Contrast matrix 
    private Matrix contrastMatrix = undefined
    private HashTable<integer, text> contrastFactorIndex        // Index of the factor encoding used for contrast matrix creation
    private Array<DataFrameColumn> contrastFactorLevels         // Holds the levels for each within-subjects factor (sorted)
    private HashTable<text, Array<integer>> contrastColumnsAssociatedWithFactor // Used to create contrast matrix
    private HashTable<integer, Matrix> contrastFactorsAssociatedWithColumn      // Binary activation encoded, used in contrast matrix


    action Transform(DataFrame frame)
        SetDataFrame(frame)
        designMatrix = undefined
        contrastMatrix = undefined
        if not transformed
            designFrame = VerifySelectionAndLengthenFrame(frame)
            transformed = true
        end
    end

    action Empty
        originalFrame = undefined
        designMatrix = undefined
        contrastMatrix = undefined
        subjectIdentifierHeader = ""  
        dependentVariableHeaders:Empty()
        betweenSubjectsFactorHeaders:Empty()
        withinSubjectsFactorHeaders:Empty()
        dependentVariableHeadersWide:Empty()
        betweenSubjectsFactorHeadersWide:Empty()
        withinSubjectsFactorHeadersWide:Empty()
    end

    action Copy returns ExperimentalDesign
        ExperimentalDesign copy
        copy:RepeatedMeasures(repeatedMeasures)
        copy:Multivariate(multivariate)
        copy:AddSubjectIdentifier(subjectIdentifierHeader)
        i = 0
        repeat while i < dependentVariableHeaders:GetSize()
            copy:AddDependentVariable(dependentVariableHeaders:Get(i))
            i = i + 1
        end
        i = 0
        repeat while i < betweenSubjectsFactorHeaders:GetSize()
            copy:AddBetweenSubjectsFactor(betweenSubjectsFactorHeaders:Get(i))
            i = i + 1
        end
        i = 0
        repeat while i < withinSubjectsFactorHeaders:GetSize()
            copy:AddWithinSubjectsFactor(withinSubjectsFactorHeaders:Get(i))
            i = i + 1
        end
        if originalFrame = undefined
            Array<text> keys = dependentVariableHeadersWide:CopyToKeyArray()
            i = 0
            repeat while i < keys:GetSize()
                copy:AddDependentVariable(keys:Get(i), dependentVariableHeadersWide:GetValue(keys:Get(i)))
                i = i + 1
            end
            keys = betweenSubjectsFactorHeadersWide:CopyToKeyArray()
            i = 0
            repeat while i < keys:GetSize()
                copy:AddBetweenSubjectsFactor(keys:Get(i), betweenSubjectsFactorHeadersWide:GetValue(keys:Get(i)))
                i = i + 1
            end
            keys = withinSubjectsFactorHeadersWide:CopyToKeyArray()
            i = 0
            repeat while i < keys:GetSize()
                copy:AddWithinSubjectsFactor(keys:Get(i), withinSubjectsFactorHeadersWide:GetValue(keys:Get(i)))
                i = i + 1
            end
        else
            if designFrame = undefined
                DataFrame copyFrame = originalFrame:Copy()
                copy:Transform(copyFrame)
            else
                DataFrame copyFrame = designFrame:Copy()
                copy:Transform(copyFrame)
            end
        end
        return copy
    end

    /* Returns the subject identifier header */
    action GetSubjectIdentifier returns text
        return subjectIdentifierHeader
    end

    /* Returns an array of all the between-subjects factor headers */
    action GetBetweenSubjectsFactors returns Array<text>
        return betweenSubjectsFactorHeaders
    end

    action GetNumberOfBetweenSubjectsFactors returns integer
        return betweenSubjectsFactorHeaders:GetSize()
    end

    action HasBetweenSubjectsFactors returns boolean
        return betweenSubjectsFactorHeaders:GetSize() > 0
    end

    /* Returns an array of all the within-subjects factor headers */
    action GetWithinSubjectsFactors returns Array<text>
        return withinSubjectsFactorHeaders
    end

    action GetNumberOfWithinSubjectsFactors returns integer
        return withinSubjectsFactorHeaders:GetSize()
    end

    action HasWithinSubjectsFactors returns boolean
        return withinSubjectsFactorHeaders:GetSize() > 0
    end 

    /* Returns an array of all the dependent variable headers */
    action GetDependentVariables returns Array<text>
        return dependentVariableHeaders
    end
    action GetNumberOfDependentVariables returns integer
        return dependentVariableHeaders:GetSize()
    end

    /* Returns the number of individual subjects */
    action GetNumberOfSubjects returns integer
        return numberOfSubjects
    end

    /* Returns the number of total observations */
    action GetNumberOfObservations returns integer
        return numberOfObservations
    end

    /* Returns the number of repeated measurements */
    action GetNumberOfMeasurements returns integer
        if contrastMatrix = undefined 
            contrastMatrix = CreateContrastMatrix()
        end
        return numberOfMeasurements
    end

    /* Returns the number of independent groups */
    action GetNumberOfIndependentGroups returns integer
        if designMatrix = undefined
            designMatrix = CreateDesignMatrix()
        end
        return numberOfIndependentGroups
    end

    /* Returns true if a within-subjects factor is used */
    action RepeatedMeasures returns boolean
        return repeatedMeasures
    end

    /* Flag to use repeated measures when no factor is selected in frame (useful in wide format) */
    action RepeatedMeasures(boolean repeated)
        repeatedMeasures = repeated
    end   

    /* Flag to assume individual dependent variables (i.e. not same variable repeated) when no factor is selected in frame (useful in wide format) */
    action Multivariate(boolean multivariate)
        me:multivariate = multivariate
    end  

    /* Returns the long format design dataframe */
    action GetDesignFrame returns DataFrame
        return designFrame
    end

    /* Returns the original format dataframe */
    action GetOriginalFrame returns DataFrame
        return originalFrame
    end

    /* Returns an array of sources used for the design matrix (main effects and interactions) */
    action GetDesignSources returns Array<text>
        if designMatrix = undefined
            designMatrix = CreateDesignMatrix()
        end
        return columnsAssociatedWithFactor:CopyToKeyArray()
    end

    /* Returns the design matrix for all sources (main effects and interactions) */
    action GetDesignMatrix returns Matrix
        if designMatrix = undefined
            designMatrix = CreateDesignMatrix()
        end
        return designMatrix
    end

    /* Returns an array of sources used for the contrast matrix (main effects and interactions) */
    action GetContrastSources returns Array<text>
        if contrastMatrix = undefined 
            contrastMatrix = CreateContrastMatrix()
        end
        return contrastColumnsAssociatedWithFactor:CopyToKeyArray()
    end

    /* Returns the contrast matrix for a given source (main effect or interaction) */
    action GetContrastMatrix(text source) returns Matrix
        if contrastMatrix = undefined
            contrastMatrix = CreateContrastMatrix()
        end
        if contrastColumnsAssociatedWithFactor:HasKey(source)
            Array<integer> associatedColumns = contrastColumnsAssociatedWithFactor:GetValue(source)
            Matrix sourceMatrix
            sourceMatrix:SetSize(contrastMatrix:GetRows(), associatedColumns:GetSize())
            i = 0 
            repeat while i < associatedColumns:GetSize()
                sourceMatrix:SetColumn(i, contrastMatrix:GetColumn(associatedColumns:Get(i)))
                i = i + 1
            end
            return sourceMatrix
        else
            alert("No contrast matrix for source "+source)
        end
        return undefined
    end

    // Set the original dataframe: Use Transform()
    private action SetDataFrame(DataFrame frame)
        if originalFrame not= frame
            transformed = false
        end
        originalFrame = frame
    end    

    // For long or wide data.
    action AddSubjectIdentifier(text header)
        subjectIdentifierHeader = header
    end

    // For long or wide data.
    action AddBetweenSubjectsFactor(text header)
        betweenSubjectsFactorHeaders:Add(header)
    end

    // For long data.
    action AddWithinSubjectsFactor(text header)
        withinSubjectsFactorHeaders:Add(header)
    end

    // For long data.
    action AddDependentVariable(text header)
        dependentVariableHeaders:Add(header)
    end

    // For wide data in between design.
    action AddBetweenSubjectsFactor(text factorHeader, text variableHeader, text columnHeaders)
        if not betweenSubjectsFactorHeadersWide:HasKey(factorHeader)
            betweenSubjectsFactorHeadersWide:Add(factorHeader, columnHeaders)
            dependentVariableHeadersWide:Add(variableHeader, columnHeaders)
        else
            if not dependentVariableHeadersWide:HasKey(variableHeader)
                dependentVariableHeadersWide:Add(variableHeader, columnHeaders)
            else
                alert("A between subjects factor called "+factorHeader+" and a dependent variable called "+variableHeader+" have already been specified.")
            end
        end
    end

    // For wide data in between design.
    action AddBetweenSubjectsFactor(text factorHeader, text columnHeaders)
        if not betweenSubjectsFactorHeadersWide:HasKey(factorHeader)
            betweenSubjectsFactorHeadersWide:Add(factorHeader, columnHeaders)
            dependentVariableHeadersWide:Add(factorHeader+"_value", columnHeaders)
        else
            alert("A between subjects factor called "+factorHeader+" has already been specified.")
        end
    end

    // For wide data in within design or mixed design.
    action AddWithinSubjectsFactor(text factorHeader, text variableHeader, text columnHeaders)
        if not withinSubjectsFactorHeadersWide:HasKey(factorHeader)
            withinSubjectsFactorHeadersWide:Add(factorHeader, columnHeaders)
            dependentVariableHeadersWide:Add(variableHeader, columnHeaders)
        else
            if not dependentVariableHeadersWide:HasKey(variableHeader)
                dependentVariableHeadersWide:Add(variableHeader, columnHeaders)
            else
                alert("A within subjects factor called "+factorHeader+" and a dependent variable called "+variableHeader+" have already been specified.")
            end
        end
    end

    // For wide data in within design or mixed design.
    action AddWithinSubjectsFactor(text factorHeader, text columnHeaders)
        if not withinSubjectsFactorHeadersWide:HasKey(factorHeader)
            withinSubjectsFactorHeadersWide:Add(factorHeader, columnHeaders)
            dependentVariableHeadersWide:Add(factorHeader+"_value", columnHeaders)
        else
            alert("A within subjects factor called "+factorHeader+" has already been specified.")
        end
    end

    // For wide data with multiple variables in between design or within design. 
    // This is private because you'd expect a factor to be included in this specification, otherwise just use the above actions.
    // This is really only useful in wide multivariate situations.
    private action AddDependentVariable(text variableHeader, text columnHeaders)
        if not dependentVariableHeadersWide:HasKey(variableHeader)
            dependentVariableHeadersWide:Add(variableHeader, columnHeaders)
        else
            alert("A dependent variable factor called "+variableHeader+" has already been specified.")
        end
    end

    private action VerifySelectionAndLengthenFrame(DataFrame frame) returns DataFrame
        boolean variablesLong = not dependentVariableHeaders:IsEmpty()
        boolean variablesWide = not dependentVariableHeadersWide:IsEmpty() 
        boolean betweenLong = not betweenSubjectsFactorHeaders:IsEmpty()
        boolean betweenWide = not betweenSubjectsFactorHeadersWide:IsEmpty()
        boolean withinLong = not withinSubjectsFactorHeaders:IsEmpty()
        boolean withinWide = not withinSubjectsFactorHeadersWide:IsEmpty()

        boolean noFactorsSelected = frame:GetSelectedFactorSize() = 0
        boolean noFactorsSpecified = not (betweenWide or betweenLong or withinWide or withinLong)

        if withinSubjectsFactorHeadersWide:GetSize() > 1
            alert("Having more than one within factor generated from wide data in this way doesn't make sense. Try getting your data into long format.")
        end
        if betweenSubjectsFactorHeadersWide:GetSize() > 1
            alert("Having more than one between factor generated from wide data in this way doesn't make sense. Try getting your data into long format.")
        end
        if betweenWide and withinWide
            alert("Having both a between factor and a within factor generated from wide data in this way doesn't make sense. Try getting your data into long format.")
        end

        DataFrame longFrame
        if betweenWide
            // There should be no within factors used when using a wide between factor
            if withinLong
                alert("Having a within factor in addition to a wide data between factor in this way doesn't make sense. Try getting your data into long format.")
            end
            // 1. Lengthen the wide between factor
            // 2. Deal with any additional between factors
            // 3. Lengthen any wide dependent variables
            // 4. Deal with any additional variables. Should we allow any??

            DataFrame tempFrame = frame:Copy()

            // Lengthen Between Factor
            TransformLonger lengthen
            text betweenFactor = betweenSubjectsFactorHeadersWide:GetKeyIterator():Next()
            DataFrame factorFrame = tempFrame:Copy()
            factorFrame:AddSelectedColumns(betweenSubjectsFactorHeadersWide:GetValue(betweenFactor))

            longFrame = factorFrame:Transform(lengthen)   
            longFrame:GetColumn("Names"):SetHeader(betweenFactor)   
            j = 0
            repeat while j < betweenSubjectsFactorHeaders:GetSize()
                longFrame:AddSelectedFactors(betweenSubjectsFactorHeaders:Get(j))
                j = j + 1
            end 
            // Subjects for between design
            if not repeatedMeasures
                numberOfSubjects = longFrame:GetColumn(0):GetSize()
                if subjectIdentifierHeader = ""
                    NumberColumn id
                    i = 0
                    repeat while i < numberOfSubjects
                        id:Add(i+1)
                        i = i + 1
                    end
                    subjectIdentifierHeader = "subject_id"
                    id:SetHeader(subjectIdentifierHeader)
                    longFrame:AddColumn(id)
                end
            end
            longFrame:AddSelectedFactors(betweenFactor) 
            betweenSubjectsFactorHeaders:Add(betweenFactor) 

            // Lengthen Dependent Variables
            dependentVariableHeaders:Empty()
            Array<text> variables = dependentVariableHeadersWide:CopyToKeyArray()
            i = 0
            repeat while i < variables:GetSize()
                factorFrame = tempFrame:Copy()
                factorFrame:AddSelectedColumns(dependentVariableHeadersWide:GetValue(variables:Get(i)))

                DataFrame longFactorFrame = factorFrame:Transform(lengthen)   
                longFactorFrame:GetColumn("Values"):SetHeader(variables:Get(i))  
                longFrame:AddColumn(longFactorFrame:GetColumn(variables:Get(i)))
                longFrame:AddSelectedColumns(variables:Get(i))      
                dependentVariableHeaders:Add(variables:Get(i)) 
                i = i + 1
            end

        elseif withinWide
            // There should be no additional within factors used when using a wide within factor
            if withinLong
                alert("Having an additional within factor with a wide data within factor in this way doesn't make sense. Try getting your data into long format.")
            end
            // 1. Lengthen the wide within factor
            // 2. Deal with any additional between factors
            // 3. Lengthen any wide dependent variables
            // 4. Deal with any additional variables. Should we allow any?? 

            DataFrame tempFrame = frame:Copy()
            // Subjects for within design
            if repeatedMeasures 
                numberOfSubjects = tempFrame:GetColumn(0):GetSize()
                if subjectIdentifierHeader = ""
                    NumberColumn id
                    i = 0
                    repeat while i < numberOfSubjects
                        id:Add(i+1)
                        i = i + 1
                    end
                    subjectIdentifierHeader = "subject_id"
                    id:SetHeader(subjectIdentifierHeader)
                    tempFrame:AddColumn(id)
                end
            end

            // Lengthen Within Factor
            withinSubjectsFactorHeaders:Empty()
            TransformLonger lengthen
            text withinFactor = withinSubjectsFactorHeadersWide:GetKeyIterator():Next()
            DataFrame factorFrame = tempFrame:Copy()
            factorFrame:AddSelectedColumns(withinSubjectsFactorHeadersWide:GetValue(withinFactor))

            longFrame = factorFrame:Transform(lengthen)   
            longFrame:GetColumn("Names"):SetHeader(withinFactor)   
            longFrame:AddSelectedFactors(withinFactor) 
            longFrame:AddSelectedFactors(subjectIdentifierHeader)
            j = 0
            repeat while j < betweenSubjectsFactorHeaders:GetSize()
                longFrame:AddSelectedFactors(betweenSubjectsFactorHeaders:Get(j))
                j = j + 1
            end 
            withinSubjectsFactorHeaders:Add(withinFactor) 

            // Lengthen Dependent Variables
            dependentVariableHeaders:Empty()
            Array<text> variables = dependentVariableHeadersWide:CopyToKeyArray()
            i = 0
            repeat while i < variables:GetSize()
                factorFrame = tempFrame:Copy()
                factorFrame:AddSelectedColumns(dependentVariableHeadersWide:GetValue(variables:Get(i)))

                DataFrame longFactorFrame = factorFrame:Transform(lengthen)   
                longFactorFrame:GetColumn("Values"):SetHeader(variables:Get(i))  
                longFrame:AddColumn(longFactorFrame:GetColumn(variables:Get(i)))
                longFrame:AddSelectedColumns(variables:Get(i))      
                dependentVariableHeaders:Add(variables:Get(i)) 
                i = i + 1
            end

        elseif noFactorsSelected and noFactorsSpecified
            // 1. Lengthen the wide variables or columns

            DataFrame tempFrame = frame:Copy()
            // Subjects for within design
            if repeatedMeasures 
                numberOfSubjects = tempFrame:GetColumn(0):GetSize()
                if subjectIdentifierHeader = ""
                    NumberColumn id
                    i = 0
                    repeat while i < numberOfSubjects
                        id:Add(i+1)
                        i = i + 1
                    end
                    subjectIdentifierHeader = "subject_id"
                    id:SetHeader(subjectIdentifierHeader)
                    tempFrame:AddColumn(id)
                end
            end

            // Select the specified variables
            i = 0
            repeat while i < dependentVariableHeaders:GetSize()
                if tempFrame:HasColumn(dependentVariableHeaders:Get(i))
                    tempFrame:AddSelectedColumns(dependentVariableHeaders:Get(i))
                else
                    alert("Could not find key "+dependentVariableHeaders:Get(i)+" in the DataFrame. Are you sure it exists?")
                end
                i = i + 1
            end 
            dependentVariableHeaders:Empty()

            // Select the column selection for additional variables
            i = 0
            repeat while i < frame:GetSelectedColumnSize()
                tempFrame:AddSelectedColumn(frame:GetSelection():GetColumn(i))                    
                i = i + 1
            end 
            
            if tempFrame:GetSelectedColumnSize() > 1 and not multivariate
                TransformLonger lengthen
                longFrame = tempFrame:Transform(lengthen) 
                if repeatedMeasures
                    longFrame:GetColumn("Names"):SetHeader("Measures")
                    withinSubjectsFactorHeaders:Add("Measures")
                else
                    longFrame:GetColumn("Names"):SetHeader("Groups")
                    betweenSubjectsFactorHeaders:Add("Groups")
                end
                dependentVariableHeaders:Add("Values")
            else
                longFrame = tempFrame
            end

            // Subjects for between design
            if not repeatedMeasures
                numberOfSubjects = longFrame:GetColumn(0):GetSize()
                if subjectIdentifierHeader = ""
                    NumberColumn id
                    i = 0
                    repeat while i < numberOfSubjects
                        id:Add(i+1)
                        i = i + 1
                    end
                    subjectIdentifierHeader = "subject_id"
                    id:SetHeader(subjectIdentifierHeader)
                    longFrame:AddColumn(id)
                end
            end
        else
            // Copy frame
            longFrame = frame:Copy()

            // Copy selection
            i = 0
            repeat while i < frame:GetSelectedFactorSize()
                longFrame:AddSelectedFactor(frame:GetSelection():GetFactor(i))
                i = i + 1
            end  
    
            i = 0
            repeat while i < frame:GetSelectedColumnSize()
                longFrame:AddSelectedColumn(frame:GetSelection():GetColumn(i))
                i = i + 1
            end
        end

        DataFrame newFrame
        /*  
            For long data:
            1. Add the subject column to frame (within design only)
            2. Add the specified between factors to frame
            3. Add the specified within factors to frame
            4. Add the specified dependent variables to frame 
            5. Add any additional selected factors as between factors 
            6. Add any additional selected columns as dependent variables 
        */
        if withinSubjectsFactorHeaders:IsEmpty()
            repeatedMeasures = false
        else
            repeatedMeasures = true
        end
                
        // 1. Add the subject column to frame 
        if subjectIdentifierHeader not= "" and repeatedMeasures
            newFrame:AddColumn(longFrame:GetColumn(subjectIdentifierHeader))
            newFrame:AddSelectedFactors(subjectIdentifierHeader)
            numberOfObservations = longFrame:GetColumn(subjectIdentifierHeader):GetSize()
        else
            if repeatedMeasures
                alert("Since your data is in long format for repeated measures, please specify the subject identification column using AddSubjectIdentifier().")
            else
                numberOfSubjects = longFrame:GetColumn(0):GetSize()
                numberOfObservations = longFrame:GetColumn(0):GetSize()
            end
        end


        // 2. Add the between factors to frame
        i = 0
        repeat while i < betweenSubjectsFactorHeaders:GetSize()
            if longFrame:HasColumn(betweenSubjectsFactorHeaders:Get(i))
                newFrame:AddColumn(longFrame:GetColumn(betweenSubjectsFactorHeaders:Get(i)))
                newFrame:AddSelectedFactors(betweenSubjectsFactorHeaders:Get(i))
            else
                alert("Could not find key "+betweenSubjectsFactorHeaders:Get(i)+" in the DataFrame. Are you sure it exists?")
            end
            i = i + 1
        end

        // 3. Add the within factors to frame
        i = 0
        repeat while i < withinSubjectsFactorHeaders:GetSize()
            if longFrame:HasColumn(withinSubjectsFactorHeaders:Get(i))
                newFrame:AddColumn(longFrame:GetColumn(withinSubjectsFactorHeaders:Get(i)))
                newFrame:AddSelectedFactors(withinSubjectsFactorHeaders:Get(i))
            else
                alert("Could not find key "+withinSubjectsFactorHeaders:Get(i)+" in the DataFrame. Are you sure it exists?")
            end
            i = i + 1
        end

        // 4. Add the dependent variables to frame
        i = 0
        repeat while i < dependentVariableHeaders:GetSize()
            if longFrame:HasColumn(dependentVariableHeaders:Get(i))
                newFrame:AddColumn(longFrame:GetColumn(dependentVariableHeaders:Get(i)))
                newFrame:AddSelectedColumns(dependentVariableHeaders:Get(i))
            else
                alert("Could not find key "+dependentVariableHeaders:Get(i)+" in the DataFrame. Are you sure it exists?")
            end
            i = i + 1
        end

        // 5. Add any additional selected factors as between factors
        i = 0
        repeat while i < longFrame:GetSelectedFactorSize()
            DataFrameColumn factor = longFrame:GetColumn(longFrame:GetSelection():GetFactor(i))
            if not newFrame:HasColumn(factor:GetHeader())
                betweenSubjectsFactorHeaders:Add(factor:GetHeader())
                newFrame:AddColumn(factor)
                newFrame:AddSelectedFactors(factor:GetHeader())
            end
            i = i + 1
        end  

        // 6. Add any additional selected columns as dependent variables
        i = 0
        repeat while i < longFrame:GetSelectedColumnSize()
            DataFrameColumn column = longFrame:GetColumn(longFrame:GetSelection():GetColumn(i))
            if not newFrame:HasColumn(column:GetHeader())
                dependentVariableHeaders:Add(column:GetHeader())
                newFrame:AddColumn(column)
                newFrame:AddSelectedColumns(column:GetHeader())
            end
            i = i + 1
        end   

        if subjectIdentifierHeader not= "" and repeatedMeasures
            // Verify subject measurement counts are equal
            integer count = 0
            if newFrame:HasColumn(subjectIdentifierHeader)
                count = VerifyMeasurementCountPerSubject(newFrame:GetColumn(subjectIdentifierHeader))
            else
                alert("Could not find key "+subjectIdentifierHeader+" in the DataFrame. Are you sure it exists?")
            end
            
            /* 
            // Verify each combination of within-subject factors uses all subjects:
            if count not= within factor levels
                alert("Every combination of within-subject must have a measurement for each subject.")
            end
            */
        end
       
        return newFrame
    end

    // For a repeated measures design each subject should have the same number of measurements.
    private action VerifyMeasurementCountPerSubject(DataFrameColumn column) returns integer
        HashTable<text,integer> counts = column:CalculateValueCountAsText()
        Iterator<integer> i = counts:GetValueIterator()
        integer count = i:Next()
        repeat while i:HasNext()
            if count not= i:Next()
                alert("Each subject must have the same number of measurements.")
            end
        end
        numberOfSubjects = counts:GetSize()
        return count
    end

    // Dummy-coded matrix with intercept. Uses only the between-subjects factors selected.
    private action CreateDesignMatrix returns Matrix
        // Get initial matrix dimensions
        integer columns = 1
        integer rows = numberOfObservations
        i = 0
        repeat while i < betweenSubjectsFactorHeaders:GetSize()
            DataFrameColumn unique = designFrame:GetColumn(betweenSubjectsFactorHeaders:Get(i)):Copy(true, true)
            factorIndex:Add(i, betweenSubjectsFactorHeaders:Get(i))
            factorLevels:Add(unique)
            columns = columns * unique:GetSize()
            i = i + 1
        end
        i = 0
        repeat while i < columns
            factorsAssociatedWithColumn:Add(i, GetInitialEncoding(factorLevels:GetSize()))
            i = i + 1
        end
        numberOfIndependentGroups = columns

        Matrix matrix
        matrix:SetSize(rows, columns)
        matrix:SetColumn(0, 1) // intercept

        integer current = AddFactorsToDesignMatrix(matrix)
        integer start = 1
        integer next = start + 1
        integer stop = current - 1
        if betweenSubjectsFactorHeaders:GetSize() > 1
            AddInteractionsToMatrix(start, next, stop, current, matrix, false)
        end
        return matrix
    end

    // Dummy-coded matrix with intercept. Uses only the within-subjects factors selected.
    private action CreateContrastMatrix returns Matrix
        if withinSubjectsFactorHeaders:GetSize() < 1
            alert("Must include at least one within-subjects factor to construct a Contrast Matrix.")
        end

        // Get initial matrix dimensions
        integer columns = 1
        integer rows = 1
        i = 0
        repeat while i < withinSubjectsFactorHeaders:GetSize()
            DataFrameColumn unique = designFrame:GetColumn(withinSubjectsFactorHeaders:Get(i)):Copy(true, true)
            contrastFactorIndex:Add(i, withinSubjectsFactorHeaders:Get(i))
            contrastFactorLevels:Add(unique)
            columns = columns * unique:GetSize()
            rows = rows * unique:GetSize()
            i = i + 1
        end
        i = 0
        repeat while i < columns
            contrastFactorsAssociatedWithColumn:Add(i, GetInitialEncoding(contrastFactorLevels:GetSize()))
            i = i + 1
        end
        numberOfMeasurements = rows

        Matrix matrix
        matrix:SetSize(rows, columns)
        matrix:SetColumn(0, 1) // intercept

        integer current = AddFactorsToContrastMatrix(matrix)
        integer start = 1
        integer next = start + 1
        integer stop = current - 1
        if withinSubjectsFactorHeaders:GetSize() > 1
            AddInteractionsToMatrix(start, next, stop, current, matrix, true)
        end  
        return matrix
    end

    // Adds the main effect dummy-coded factors to the design matrix and returns the next index
    private action AddFactorsToDesignMatrix(Matrix matrix) returns integer
        integer current = 1
        i = 0 
        repeat while i < factorLevels:GetSize()
            DataFrameColumn factor = designFrame:GetColumn(designFrame:GetSelection():GetFactor(i))
            text factorHeader = factorLevels:Get(i):GetHeader()
            integer levels = factorLevels:Get(i):GetSize()
            j = 0 
            repeat while j < levels - 1
                text level = factorLevels:Get(i):GetAsText(j)
                k = 0
                repeat while k < factor:GetSize()
                    if factor:GetAsText(k) = level
                        matrix:Set(k, current, 1)
                    end
                    k = k + 1
                end 
                if not columnsAssociatedWithFactor:HasKey(factorHeader)
                    Array<integer> arr
                    arr:Add(current)
                    columnsAssociatedWithFactor:Add(factorHeader, arr)
                else
                    columnsAssociatedWithFactor:GetValue(factorHeader):Add(current)
                end
                factorsAssociatedWithColumn:GetValue(current):Set(0, factorIndex:GetKey(factorHeader), 1)
                current = current + 1
                j = j + 1
            end
            i = i + 1
        end
        return current
    end

    // Adds the main effect dummy-contrast-coded factors to the contrast matrix and returns the next index
    private action AddFactorsToContrastMatrix(Matrix matrix) returns integer 
        integer current = 1
        integer longTensorRows = numberOfMeasurements

        // For each factor: Get tensor product and repeat sub matrix
        i = 0 
        repeat while i < contrastFactorLevels:GetSize()
            text factor = contrastFactorLevels:Get(i):GetHeader()
            integer levels = contrastFactorLevels:Get(i):GetSize()

            // Create sub contrast matrix for this factor
            Matrix factorMatrix
            factorMatrix:SetSize(levels, levels-1)
            factorMatrix:SetRow(levels-1, -1)
            j = 0
            repeat while j < levels-1
                factorMatrix:Set(j,j,1)
                j = j + 1
            end

            // Lengthen by tensor product
            longTensorRows = longTensorRows / levels  
            Matrix longTensor
            longTensor:Fill(longTensorRows, 1, 1)
            factorMatrix = factorMatrix:TensorProduct(longTensor)

            // Repeat to fill rows
            integer repeatTensorRows = numberOfMeasurements / factorMatrix:GetRows()
            Matrix repeatTensor
            repeatTensor:Fill(repeatTensorRows, 1, 1)
            factorMatrix = repeatTensor:TensorProduct(factorMatrix)

            j = 0
            repeat while j < factorMatrix:GetColumns()
                matrix:SetColumn(current, factorMatrix:GetColumn(j))

                contrastFactorsAssociatedWithColumn:GetValue(current):Set(0, contrastFactorIndex:GetKey(factor), 1)
                if not contrastColumnsAssociatedWithFactor:HasKey(factor)
                    Array<integer> arr
                    arr:Add(current)
                    contrastColumnsAssociatedWithFactor:Add(factor, arr)
                else
                    contrastColumnsAssociatedWithFactor:GetValue(factor):Add(current)
                end
                current = current + 1
                j = j + 1
            end
            i = i + 1
        end
        return current
    end

    private action AddInteractionsToMatrix(integer start, integer next, integer stop, integer current, Matrix matrix, boolean iscontrast)
        if current = matrix:GetColumns() - 1 or next > current
            // See if next is already associated with start
            if AlreadyAssociated(next, start, iscontrast)
                // Move next and try again
                next = next + 1
                AddInteractionsToMatrix(start, next, stop, current, matrix, iscontrast)
            else
                // Associate next and start to current
                AssociateFactorsOfOldColumnToNewColumn(start, next, current, iscontrast)
                matrix:SetColumn(current, matrix:GetColumn(start):MultiplyElements(matrix:GetColumn(next)))
                return now
            end
            return now
        end

        if start = stop
            // Move stop to end and keep going
            stop = current - 1
            AddInteractionsToMatrix(start, next, stop, current, matrix, iscontrast)

        elseif next = stop
            if AlreadyAssociated(next, start, iscontrast)
                // Move next and try again
                next = next + 1
                AddInteractionsToMatrix(start, next, stop, current, matrix, iscontrast)
            else
                // Associate next and start to current
                AssociateFactorsOfOldColumnToNewColumn(start, next, current, iscontrast)
                matrix:SetColumn(current, matrix:GetColumn(start):MultiplyElements(matrix:GetColumn(next)))
                current = current + 1
    
                // Move start, reset next and try again
                start = start + 1
                next = start + 1
    
                // Keep going
                AddInteractionsToMatrix(start, next, stop, current, matrix, iscontrast)
            end
        else
            // See if next is at current
            if next = current
                // Move start, reset next and try again
                start = start + 1
                next = start + 1
    
                // Keep going
                AddInteractionsToMatrix(start, next, stop, current, matrix, iscontrast)
            
            // See if next is already associated with start
            elseif AlreadyAssociated(next, start, iscontrast)
                // Move next and try again
                next = next + 1
                AddInteractionsToMatrix(start, next, stop, current, matrix, iscontrast)
            else
                // Associate next and start to current
                AssociateFactorsOfOldColumnToNewColumn(start, next, current, iscontrast)
                matrix:SetColumn(current, matrix:GetColumn(start):MultiplyElements(matrix:GetColumn(next)))

                // Move next and current
                next = next + 1
                current = current + 1
                AddInteractionsToMatrix(start, next, stop, current, matrix, iscontrast)
            end
        end
    end

    private action AlreadyAssociated(integer nextAssociation, integer currAssociation, boolean iscontrast) returns boolean
        Matrix nextFactors 
        Matrix currFactors 
        if iscontrast
            nextFactors = contrastFactorsAssociatedWithColumn:GetValue(nextAssociation)
            currFactors = contrastFactorsAssociatedWithColumn:GetValue(currAssociation)
        else
            nextFactors = factorsAssociatedWithColumn:GetValue(nextAssociation)
            currFactors = factorsAssociatedWithColumn:GetValue(currAssociation)
        end

        if nextFactors not= undefined and currFactors not= undefined
            i = 0
            repeat while i < currFactors:GetColumns()
                if currFactors:Get(0, i) = 1 and nextFactors:Get(0, i) = 1
                    return true
                end
                i = i + 1
            end
        end
        return false
    end

    private action AssociateFactorsOfOldColumnToNewColumn(integer firstIndex, integer secondIndex, integer newIndex, boolean iscontrast)
        if iscontrast
            Matrix factors1 = contrastFactorsAssociatedWithColumn:GetValue(firstIndex)
            Matrix factors2 = contrastFactorsAssociatedWithColumn:GetValue(secondIndex)  
    
            if factors1 not= undefined and factors2 not= undefined  
                Matrix newFactor = factors1:AddElements(factors2)
                contrastFactorsAssociatedWithColumn:Set(newIndex, newFactor)
    
                text factorHeader = GetTextFromEncoding(newFactor, iscontrast)
                if not contrastColumnsAssociatedWithFactor:HasKey(factorHeader)
                    Array<integer> arr
                    arr:Add(newIndex)
                    contrastColumnsAssociatedWithFactor:Add(factorHeader, arr)
                else
                    contrastColumnsAssociatedWithFactor:GetValue(factorHeader):Add(newIndex)
                end
            end
        else
            Matrix factors1 = factorsAssociatedWithColumn:GetValue(firstIndex)
            Matrix factors2 = factorsAssociatedWithColumn:GetValue(secondIndex)  
    
            if factors1 not= undefined and factors2 not= undefined  
                Matrix newFactor = factors1:AddElements(factors2)
                factorsAssociatedWithColumn:Set(newIndex, newFactor)
    
                text factorHeader = GetTextFromEncoding(newFactor, iscontrast)
                if not columnsAssociatedWithFactor:HasKey(factorHeader)
                    Array<integer> arr
                    arr:Add(newIndex)
                    columnsAssociatedWithFactor:Add(factorHeader, arr)
                else
                    columnsAssociatedWithFactor:GetValue(factorHeader):Add(newIndex)
                end
            end
        end
    end

    private action GetInitialEncoding(integer size) returns Matrix
        Matrix matrix
        matrix:Fill(1,size,0)
        return matrix
    end

    private action GetTextFromEncoding(Matrix factorEncoding, boolean iscontrast) returns text
        text factorText = ""
        j = 0
        repeat while j < factorEncoding:GetColumns()
            integer activation = cast(integer, factorEncoding:Get(0,j))
            if activation = 1
                if factorText = "" 
                    if iscontrast
                        factorText = contrastFactorIndex:GetValue(j)
                    else
                        factorText = factorIndex:GetValue(j)
                    end
                else
                    if iscontrast
                        factorText = factorText + ":" + contrastFactorIndex:GetValue(j) 
                    else
                        factorText = factorText + ":" + factorIndex:GetValue(j) 
                    end
                end
            end
            j = j + 1
        end
        return factorText
    end
end