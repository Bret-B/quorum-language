package Libraries.Compute.Statistics.Tests

use Libraries.Compute.Statistics.DataFrameCalculation
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Calculations.Mean
use Libraries.Compute.Statistics.Calculations.Variance
use Libraries.Compute.Math
use Libraries.Compute.Statistics.Distributions.HeavyTailNormalDistribution

/*
    This class implements a one-sample t-test. For more information, see
    this: https://en.wikipedia.org/wiki/Student%27s_t-test

    Attribute: Author Andreas Stefik
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Tests.CompareColumnToMean

    DataFrame frame
    frame:Load("Data/Data.csv")

    //independent samples t-test
    CompareColumnToMean compare
    compare:SetColumn1("DT")
        
    //calculate the t-test and output a summary
    frame:Calculate(compare)
    output compare:GetFormalSummary()
*/
class CompareGroupToMean is DataFrameCalculation
    integer column = -1
    number probabilityValue = 0
    number columnVariance = 0
    number columnMean = 0
    number mean = 0
    number cohensD = 0
    number tValue = 0
    number degreesOfFreedom = 0

    action Calculate(DataFrame frame) 
        if column = -1
            alert("Cannot conduct calculation on undefined columns.")
        end

        DataFrameColumn left = frame:GetColumn(column)

        if left = undefined
            alert("Could not find a column named " + column)
        end


        Mean meanCalculation
        left:Calculate(meanCalculation)
        number leftMean = meanCalculation:GetMean()
        meanCalculation:Empty()

        columnMean = leftMean

        leftSize = left:GetSize()

        Variance varianceCalculation
        varianceCalculation:SetMean(leftMean)
        left:Calculate(varianceCalculation)
        number leftVariance = varianceCalculation:GetVariance()
        varianceCalculation:Empty()


        columnVariance = leftVariance
        Math math
        cohensD = math:SquareRoot(columnVariance)
        cohensD = (leftMean - mean) / cohensD

        //compute the top part of the equation
        number top = columnMean - mean
        number bottom = math:SquareRoot(columnVariance / cast(number, leftSize))

        t = top / bottom
        tValue = t
        degreesOfFreedom = leftSize - 1
        HeavyTailNormalDistribution distribution
        distribution:Setup(degreesOfFreedom)
        number absoluteValueT = math:AbsoluteValue(t)
        number p = 2.0 * distribution:CumulativeDistribution(-absoluteValueT)
        probabilityValue = p
    end

    /*
        Obtains the degrees of freedom calculated by the test.
    */
    action GetDegreesOfFreedom returns number
        return degreesOfFreedom
    end

    /*
        Returns the name of the column specified.
    */
    action GetGroup returns integer
        return column
    end

    /*
        Sets the name of the column to be analyzed.
    */
    action SetGroup(integer column)
        me:column = column
    end

    /*
        In Statistics, this is often termed a p-value. 
    */
    action GetProbabilityValue returns number
        return me:probabilityValue
    end

    /*
        This action returns the unstandardized effect size. By default, this
        value is Cohen's D: https://en.wikipedia.org/wiki/Effect_size
    */
    action GetUnstandardizedEffectSize returns number
        return cohensD
    end

    /*
        This returns a critical value, or the place on the distribution where are 
        caluclating our probability values from. The critical value, for a test like a t-test,
        would be equivalent to a t-value.
    */
    action GetCriticalValue returns number
        return tValue
    end

    /* Gets the mean value. */
    action GetMean returns number
        return mean
    end

    /* Sets the mean value. */
    action SetMean(number mean)
        me:mean = mean
    end

    /* Gets the column mean value. */
    action GetGroupMean returns number
        return columnMean
    end
    
    /* Gets the column variance value. */
    action GetGroupVariance returns number
        return columnVariance
    end

    /* This action obtains an informal summary of the result. */
    action GetSummary returns text
        Math math
        text result = "We conducted a test comparing a mean " + mean + " with a column mean."
        if columnMean > mean
            result = result + " The column mean was higher overall (M = " + columnMean + ", SD = " + math:SquareRoot(columnVariance) + ")" 
        else
            result = result + " The column had a smaller overall mean (M = " + columnMean + ", SD = " + math:SquareRoot(columnVariance) + ")"
        end

        if probabilityValue < 0.05
            result = result + " The difference between the column mean and the passed mean did not appear to be random chance."
        elseif probabilityValue >= 0.05 and probabilityValue < 0.2
            result = result + " It was unclear whether or not the difference was due to random chance"
        else
            result = result + " Very little difference was observed between the means"
        end

        if cohensD > 1
            result = result + " The size of the difference between the means was greater than a standard deviation."
        else 
            result = result + " The size of the difference between the means was less than a standard deviation."
        end

        return result
    end

    /* This action returns a formal academic summary of the result. */
    action GetFormalSummary returns text
        Math math
        text result = "We conducted a one sample T-test compared to a mean of " + mean + "."
        if columnMean > mean
            result = result + " The column had a higher overall mean (M = " + columnMean + ", SD = " + math:SquareRoot(columnVariance) + ")" 
        else
            result = result + " The column had a smaller overall mean (M = " + columnMean + ", SD = " + math:SquareRoot(columnVariance) + ")"
        end

        result = result + ", t("
            + degreesOfFreedom + ") = " + tValue + ", p = " + probabilityValue + ", Cohen's D = "
            + cohensD
        return result
    end
end