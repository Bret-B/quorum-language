package Libraries.Compute.Statistics.Tests

use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Distributions.HeavyTailNormalDistribution
use Libraries.Compute.Statistics.Distributions.StudentizedRangeDistribution
use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Calculations.Variance
use Libraries.Compute.Statistics.Reporting.CompareMeansResult

/*
    This class implements several post hoc analysis tests:
    ** These tests are intended to be used after a significant CompareMeans N-Sample test **

    Strict:
        Bonferroni Procedure 
            Controls for family-wise error rate by adjusting p-values
            For more information: https://en.wikipedia.org/wiki/Bonferroni_correction

        ** NOT IMPLEMENTED YET **
        Holm-Bonferroni Procedure (Bonferroni Extension)
            After CompareSeveralMeans OR CompareSeveralRelatedMeans
            Controls for family-wise error rate by adjusting p-values
            For more information: https://en.wikipedia.org/wiki/Holm%E2%80%93Bonferroni_method

    Lenient:
        Tukey's HSD Multiple Comparison Test
            After (ANOVA) CompareSeveralMeans > AssumeEqualVariances(true)
            Find which groups differ using 'Honest Significant Difference' to compare each mean with every other mean
            For more information: https://en.wikipedia.org/wiki/Tukey%27s_range_test

        Tukey-Kramer Multiple Comparison Test (Tukey Extension for non-equal sample sizes)
            After (ANOVA) CompareSeveralMeans > AssumeEqualVariances(true)
            Find which groups differ using 'Honest Significant Difference' to compare each mean with every other mean
            For more information: https://en.wikipedia.org/wiki/Tukey%27s_range_test 

        Games-Howell Multiple Comparison Test (Tukey Extension for non-equal variances)
            After (Welch ANOVA) CompareSeveralMeans > AssumeEqualVariances(false)
            Find which groups differ using 'Honest Significant Difference' to compare each mean with every other mean
            For more information: https://en.wikipedia.org/wiki/Post_hoc_analysis      

        ** NOT IMPLEMENTED YET **
        Dunn's Multiple Comparison Test
            After (Kruskal-Wallis) CompareNIndependentRankedGroups
            Find which groups differ between pairs of means when there are many rank ordered groups
            For more information: https://en.wikipedia.org/wiki/Kruskal%E2%80%93Wallis_one-way_analysis_of_variance
            For more information: https://en.wikipedia.org/wiki/Post_hoc_analysis

        ** NOT IMPLEMENTED YET **
        Conover Multiple Comparison Test
            After (Friedman) CompareNDependentRankedGroups
            For more information: https://en.wikipedia.org/wiki/Friedman_test
            For more information: https://en.wikipedia.org/wiki/Post_hoc_analysis

    Attribute: Author Andreas Stefik, Hannah Williams
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Tests.CompareMeansPairwise

    DataFrame frame
    frame:Load("Data/Data.csv")
    CompareMeansPairwise pairwise = frame:CompareMeansPairwise()
    output pairwise:GetSummary()
*/
class CompareMeansPairwise is CompareMeans
    /* The distribution used to calculate the p-value .*/
    HeavyTailNormalDistribution tDistribution

    /* The distribution used to calculate the p-value in tukey tests.*/
    StudentizedRangeDistribution qDistribution 

    Array <CompareMeansResult> results

    /* Set if the test has already been calculated, and we simply want to run a post hoc follow up */
    private CompareMeansResult testResult = undefined
    private boolean defaultVarianceAssumption = true        
    private boolean defaultDistributionAssumption = true   
    private number meanSquaredError = 0
    private number degreesOfFreedom = 0     

    Math math

    action Calculate(DataFrame frame)   
        results:Empty()
 
        CompareMeans compare
        compare:Ranked(Ranked())
        compare:Paired(Paired())
        compare:RepeatedMeasures(RepeatedMeasures())
        if not defaultVarianceAssumption
            compare:AssumeEqualVariances(AssumeEqualVariances())
        end
        if not defaultDistributionAssumption
            compare:AssumeNormalDistribution(AssumeNormalDistribution())
        end
        compare:Calculate(frame)
        Calculate(compare:GetResult())
    end

    private action RunTest(DataFrame frame)
        
    end

    action Calculate(CompareMeansResult result)
        if result = undefined or result:GetGroupsFrame():GetSize() = 0
            alert("Prior test result is undefined.")
        end
        if result:GetGroupsTable():GetSize() > 0
            alert("Multivariate post hoc tests are not available yet.")
        end
        if result:GetGroupsFrame():GetSize() < 3
            alert("Prior test result must be from an N-sample test.")
        end
        testResult = result
        Ranked(testResult:IsRanked())
        RepeatedMeasures(testResult:IsRepeated())
        AssumeNormalDistribution(testResult:HasNormalDistribution())
        AssumeEqualVariances(testResult:HasEqualVariances())
        if not RepeatedMeasures()
            if not Ranked() and AssumeNormalDistribution()
                if AssumeEqualVariances()     
                    meanSquaredError = testResult:GetInformation():GetValue("Residual Error"):GetValue("meanss")
                    degreesOfFreedom = testResult:GetDegreesOfFreedomTable("Residual Error"):GetValue("Residual Error")      
                else
                    degreesOfFreedom = testResult:GetDegreesOfFreedomTable():GetValue(testResult:GetSources():Get(0)):GetValue("denominator")
                end
            else
                degreesOfFreedom = testResult:GetDegreesOfFreedom()
            end
        end

        CalculatePairwise()
    end

    /* Computes the pairwise tests and corrections for N-Sample tests */
    private action CalculatePairwise()
        integer k = testResult:GetGroupsFrame():GetSize()

        number numberOfTestsPerformed = 0
        if UsingStrictCorrection() //bonferroni
            numberOfTestsPerformed = math:Factorial(k) / (2 * math:Factorial(k-2)) // #samples choose 2
        end

        if RepeatedMeasures() or Paired() or Ranked() or not AssumeNormalDistribution()
            i = 0
            repeat while i < k
                j = i + 1
                repeat while j < k
                    DataFrameColumn left = testResult:GetGroupsFrame():GetColumn(i)
                    DataFrameColumn right = testResult:GetGroupsFrame():GetColumn(j)
                    text combo = left:GetHeader()+"_"+right:GetHeader()
    
                    DataFrame pairFrame
                    pairFrame:AddColumn(left)
                    pairFrame:AddColumn(right)
                    pairFrame:SelectAllColumns()
    
                    CompareMeans compare
                    if RepeatedMeasures() or Paired()
                        compare:Paired(true)
                    end
                    if Ranked()
                        compare:Ranked(true)
                    end
                    compare:Calculate(pairFrame)
                   
                    CompareMeansResult pair = compare:GetResult() 
                    if UsingStrictCorrection() //bonferroni
                        p = pair:GetProbabilityValue() 
                        p = p * numberOfTestsPerformed 
                        if p > 1
                            p = 1
                        end
                        pair:SetProbabilityValue(combo, pair:GetTestStatisticName(), p)
                        pair:SetFormalTestName("Pairwise " + pair:GetFormalTestName() + " with Bonferroni Correction")
                    else
                        pair:SetFormalTestName("Pairwise " + pair:GetFormalTestName() + " with no family-wise error correction")
                    end
                    results:Add(pair)
                    j = j + 1
                end
                i = i + 1
            end
        else
            if UsingLenientCorrection()
                qDistribution:Setup(k, degreesOfFreedom)
            else
                tDistribution:Setup(degreesOfFreedom)
            end
            number pooledSD = math:SquareRoot(meanSquaredError)
            i = 0
            repeat while i < k
                j = i + 1
                repeat while j < k
                    DataFrameColumn left = testResult:GetGroupsFrame():GetColumn(i)
                    DataFrameColumn right = testResult:GetGroupsFrame():GetColumn(j)
                    text group1Text = left:GetHeader()
                    text group2Text = right:GetHeader()

                    DataFrame groupFrame
                    groupFrame:AddColumn(left)
                    groupFrame:AddColumn(right)
                    text combo = group1Text+"_"+group2Text
    
                    Variance var
                    left:Calculate(var)
                    number meanL = var:GetMean()
                    number varL = var:GetVariance()
    
                    var:Empty()
                    right:Calculate(var)
                    number meanR = var:GetMean()
                    number varR = var:GetVariance()
    
                    number sizeL = left:GetSize()
                    number sizeR = right:GetSize()
    
                    CompareMeansResult pair
                    pair:SetSignificanceLevel(GetSignificanceLevel())
                    pair:SetFormat(GetStatisticalFormatting())
                    pair:SetGroupsFrame(groupFrame)
                    pair:NormalDistribution(true)
                    pair:EqualVariances(AssumeEqualVariances() or defaultVarianceAssumption)
                    pair:SetDegreesOfFreedom(combo, "t", degreesOfFreedom)
                    pair:SetInformation(group1Text,"mean", meanL)
                    pair:SetInformation(group1Text,"variance", varL)
                    pair:SetInformation(group1Text,"size", sizeL)
                    pair:SetInformation(group2Text,"mean", meanR)
                    pair:SetInformation(group2Text,"variance", varR)
                    pair:SetInformation(group2Text,"size", sizeR)
    
                    number error = 0
                    number t = 0
                    number p = 0
                    if UsingStrictCorrection() //bonferroni
                        if AssumeEqualVariances() or defaultVarianceAssumption
                            // Use pooled SD 
                            error = pooledSD * math:SquareRoot(1.0 / sizeL + 1.0 / sizeR)
                            t = (meanL - meanR) / error
                            pair:SetFormalTestName("Pairwise T-test with pooled SD and Bonferroni Correction")
                        else
                            error = math:SquareRoot(varL / sizeL + varR / sizeR)
                            t = (meanL - meanR) / error
                            pair:SetFormalTestName("Pairwise T-test with non-pooled SD and Bonferroni Correction")
                        end
                        p = 2.0 * tDistribution:CumulativeDistribution(-math:AbsoluteValue(t))
                        p = p * numberOfTestsPerformed 
                        if p > 1
                            p = 1
                        end   
                    elseif UsingLenientCorrection() //tukey
                        if AssumeEqualVariances() or defaultVarianceAssumption
                            if sizeL = sizeR
                                // Tukey HSD - use pooled SD 
                                error = pooledSD * math:SquareRoot(1.0/sizeL)
                            else
                                // Tukey-Kramer - use pooled SD 
                                error = pooledSD * math:SquareRoot((1.0 / sizeL + 1.0 / sizeR) / 2.0)
                            end
                            number q = math:AbsoluteValue(meanL - meanR) / error
                            p = (1 - qDistribution:CumulativeDistribution(q))
                            pair:SetFormalTestName("Tukey HSD Multiple Comparison Analysis")
                            t = q
                        else
                            // Games-Howell - uses Welch's correction as degreesOfFreedom 
                            error = math:SquareRoot((varL / sizeL + varR / sizeR))
                            number q = math:AbsoluteValue(meanL - meanR) / error
                            p = (1 - qDistribution:CumulativeDistribution(q * math:SquareRoot(2)))
                            pair:SetFormalTestName("Games-Howell Multiple Comparisons Analysis")  
                            t = q     
                        end
                        if p > 1
                            p = 1
                        end 
                    else
                        if AssumeEqualVariances() or defaultVarianceAssumption
                            // Use pooled SD 
                            error = pooledSD * math:SquareRoot(1.0 / sizeL + 1.0 / sizeR)
                            t = (meanL - meanR) / error
                            pair:SetFormalTestName("Pairwise T-test with pooled SD and no family-wise error correction")
                        else
                            error = math:SquareRoot(varL / sizeL + varR / sizeR)
                            t = (meanL - meanR) / error
                            pair:SetFormalTestName("Pairwise T-test with non-pooled SD and no family-wise error correction")
                        end
                        p = 2.0 * tDistribution:CumulativeDistribution(-math:AbsoluteValue(t))
                        if p > 1
                            p = 1
                        end 
                    end
                    // Save the result
                    pair:SetTestStatistic(combo, "t", t)
                    pair:SetProbabilityValue(combo, "t", p)
                    results:Add(pair)
                    j = j + 1
                end
                i = i + 1
            end
        end
    end

    action AssumeEqualVariances(boolean assume)
        defaultVarianceAssumption = false
        parent:CompareMeans:AssumeEqualVariances(assume)
    end

    action AssumeNormalDistribution(boolean assume)
        defaultDistributionAssumption = false
        parent:CompareMeans:AssumeNormalDistribution(assume)
    end

    /*
        Attribute: Returns an array of CompareMeansResult objects
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareMeansPairwise
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CompareMeansPairwise compare
        compare:AddColumn(0)
        compare:AddColumn(1)
        compare:AddColumn(2)
        frame:Calculate(compare)

        Array<CompareMeansResult> results = compare:GetResults()
    */
    action GetResults returns Array<CompareMeansResult>
        return results
    end


    /*
        This returns the simple pairwise summary of the results.

        Attribute: Returns the pairwise summary.
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareMeansPairwise
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CompareMeansPairwise compare
        compare:Add(0)
        compare:Add(1)
        compare:Add(2)
        compare:Add(3)

        frame:Calculate(compare)

        output compare:GetPairwiseSummary() 
    */
    action GetPairwiseSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        integer digits = GetStatisticalFormatting():GetSignificantDigits()
        integer i = 0
        repeat while i < GetResults():GetSize()
            CompareMeansResult pair = GetResults():Get(i)
            if i = 0
                summary = summary + pair:GetFormalTestName()
            end
            if pair:GetGroupsFrame():GetSize() > 1
                text group1 = pair:GetGroupsFrame():GetColumn(0):GetHeader()
                text group2 = pair:GetGroupsFrame():GetColumn(1):GetHeader()
                summary = summary + lf + "  " + group1 + " - " + group2 + ": p = " + math:Round(pair:GetProbabilityValue(), digits)
                if pair:IsSignificant()
                    summary = summary + " ** significant **"
                end
            end
            i = i + 1
        end
        return summary
    end
end