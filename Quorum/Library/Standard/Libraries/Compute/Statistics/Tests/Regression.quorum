package Libraries.Compute.Statistics.Tests

use Libraries.Compute.Statistics.DataFrameCalculation
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Matrix
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Transforms.ColumnFilterTransform
use Libraries.Compute.MatrixTransform.OrthonormalTriangularDecomposition
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Vector
use Libraries.Compute.Statistics.Calculations.Variance
use Libraries.Compute.Statistics.Calculations.SumOfSquares
use Libraries.Compute.Statistics.Calculations.Moment
use Libraries.Compute.Statistics.Calculations.Mean
use Libraries.Compute.MatrixTransform.LowerUpperDecomposition
use Libraries.Compute.Math
use Libraries.Compute.Statistics.Distributions.HeavyTailNormalDistribution
use Libraries.Compute.Statistics.Distributions.VarianceRatioDistribution
use Libraries.Compute.Statistics.Inputs.FactorInput
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Reporting.StatisticsFormatting
use Libraries.Compute.Statistics.DataFrameSelection
use Libraries.Compute.Statistics.Predictions.RegressionPrediction
use Libraries.Compute.Statistics.Columns.VectorColumn
use Libraries.Containers.HashTable
use Libraries.Interface.Controls.Charts.Chart

/*
    This class conducts an Ordinary Least Squares regression on a DataFrame. By default, an 
    intercept is calculated and included in the model. More information about this kind of statistical
    test can be found at here: https://en.wikipedia.org/wiki/Ordinary_least_squares. It was partially adapted from the 
    same model in Apache Commons, but was expanded upon to simplify the library and add a variety of helper
    actions that were missing. More information about this class can be found on its documentation page:
    https://commons.apache.org/proper/commons-math/javadocs/api-3.6/org/apache/commons/math3/stat/regression/OLSMultipleLinearRegression.html

    Attribute: Authors Andreas Stefik and Hannah Stabler
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Tests.Regression

    DataFrame frame
    frame:Load("data.csv")
    frame:AddSelectedColumn(0)
    frame:AddSelectedFactorRange(1,3)

    Regression regression = frame:RegressionOnSelected()
    output regression:GetSummary()
*/
class Regression is DataFrameCalculation
    private StatisticsFormatting format
    private number significanceLevel = 0.05
    private integer independentVariables = 0        // Number of factors selected
    private integer dependentVariables = 0          // Number of columns selected
    private integer numberOfInstances = 0           // Number of training instances
    private boolean multivariate = false            // Flag for multiple dependent variables
    private boolean hasIntercept = true             // Flag to use intercept or not
    private Array<text> factorHeaders               // Used factor headers
    private Array<text> columnHeaders               // Used column headers
    private VarianceRatioDistribution fDistribution 
    private HeavyTailNormalDistribution tDistribution  

    Matrix responseMatrix = undefined               // The dependent variables
    Matrix predictorMatrix = undefined              // The independent variables
    Matrix predictedMatrix = undefined              // The predicted variables
    Matrix varianceCovarianceMatrix = undefined     // The variance-covariance matrix
    Matrix residualMatrix = undefined               // The residual matrix column for each dependent variable
    Matrix sscpRegression = undefined               // Regression (Model) sum of squares cross product
    Matrix sscpResidual = undefined                 // Residual (Error) sum of squares cross product
    Matrix sscpTotal = undefined                    // Total sum of squares cross product
    Matrix betaCoefficients = undefined             // Coefficients: row for independent variable, column for each dependent variable
    Matrix betaStandardError = undefined            // Standard Error: row for independent variable, column for each dependent variable
    Matrix betaTStatistics = undefined              // T-Statistic: row for independent variable, column for each dependent variable
    Matrix betaProbabilityValues = undefined        // Probability Value: row for independent variable, column for each dependent variable

    Vector residualStandardError = undefined        // Standard Error: index for each dependent variable
    Vector r_Squared = undefined                    // Effect Size: index for each dependent variable
    Vector adjustedR_Squared = undefined            // Effect Size: index for each dependent variable
    Vector f_Statistic = undefined                  // F-Statistic: index for each dependent variable
    Vector numeratorDegreesOfFreedom = undefined    // DF: index for each dependent variable
    Vector denominatorDegreesOfFreedom = undefined  // DF: index for each dependent variable
    Vector omnibusProbabilityValue = undefined      // P-Value: index for each dependent variable
    Vector regressionSumOfSquares = undefined       // Regression sum of squares: index for each dependent variable
    Vector residualSumOfSquares = undefined         // Residual sum of squares: index for each dependent variable
    Vector totalSumOfSquares = undefined            // Total sum of squares: index for each dependent variable
    Math math   

    action Calculate(DataFrame frame)
        independentVariables = frame:GetSelectedFactorSize()
        dependentVariables = frame:GetSelectedColumnSize()

        if dependentVariables = 0
            alert("No dependent variables selected. Add a selected column.")
        end
        if independentVariables = 0
            alert("No independent predictor variables selected. Add a selected factor.")
        end

        if dependentVariables > 1
            multivariate = true
        else
            multivariate = false
        end

        // Copy the frame keeping only the selected factors/columns and reselect them
        // Anything else will be dropped for this computation.
        DataFrame cleanedFrame = frame:RemoveUndefinedRowsFromSelectedColumns()
        DataFrame copy
        integer index = 0
        i = 0
        repeat while i < independentVariables
            DataFrameColumn factor = cleanedFrame:GetColumn(frame:GetSelection():GetFactor(i))
            copy:AddColumn(factor)
            copy:AddSelectedFactor(index)
            factorHeaders:Add(factor:GetHeader())
            index = index + 1
            i = i + 1
        end

        i = 0
        repeat while i < dependentVariables
            DataFrameColumn column = cleanedFrame:GetColumn(frame:GetSelection():GetColumn(i))
            copy:AddColumn(column)
            copy:AddSelectedColumn(index)
            columnHeaders:Add(column:GetHeader())
            index = index + 1
            i = i + 1
        end

        MultipleLinearRegression(copy)
    end

    private action MultipleLinearRegression(DataFrame frame)
        // Response Matrix (Y)
        DataFrame responseFrame
        i = 0
        repeat while i < dependentVariables
            DataFrameColumn column = frame:GetColumn(frame:GetSelection():GetColumn(i))
            responseFrame:AddColumn(column)
            i = i + 1
        end
        responseMatrix = responseFrame:ConvertToMatrix()

        // Design/Predictor Matrix (X)
        DataFrame designFrame
        i = 0
        repeat while i < independentVariables
            DataFrameColumn factor = frame:GetColumn(frame:GetSelection():GetFactor(i))
            designFrame:AddColumn(factor)
            i = i + 1
        end
        Matrix designMatrixWithoutIntercept = designFrame:ConvertToMatrix()
        numberOfInstances = designMatrixWithoutIntercept:GetRows()

        if hasIntercept
            Matrix designMatrixWithIntercept
            designMatrixWithIntercept:SetSize(numberOfInstances, independentVariables + 1)
            designMatrixWithIntercept:SetColumn(0, 1)
            i = 1
            repeat while i <= independentVariables 
                designMatrixWithIntercept:SetColumn(i, designMatrixWithoutIntercept:GetColumn(i-1))
                i = i + 1
            end
            predictorMatrix = designMatrixWithIntercept:Copy()
        else
            predictorMatrix = designMatrixWithoutIntercept:Copy()
        end
        
        Matrix xT = predictorMatrix:Transpose()
        Matrix xTx_inv = xT:Multiply(predictorMatrix):Inverse() 
        betaCoefficients = xTx_inv:Multiply(xT):Multiply(responseMatrix)
        predictedMatrix = predictorMatrix:Multiply(betaCoefficients)  

        if hasIntercept
            Matrix ceneteredResponseMatrix = responseMatrix:CenterByColumn()
            sscpTotal = ceneteredResponseMatrix:Transpose():Multiply(ceneteredResponseMatrix)
        else
            sscpTotal = responseMatrix:Transpose():Multiply(responseMatrix)
        end

        Matrix ceneteredPredictedMatrix = GetCenteredPredictedMatrix(predictedMatrix, responseMatrix)
        sscpRegression = ceneteredPredictedMatrix:Transpose():Multiply(ceneteredPredictedMatrix)

        residualMatrix = responseMatrix:SubtractElements(predictedMatrix)
        sscpResidual = residualMatrix:Transpose():Multiply(residualMatrix)

        number dfTotal = numberOfInstances - 1
        number dfModel = independentVariables
        number dfError = numberOfInstances - independentVariables
        if hasIntercept
            dfError = dfError - 1
        end

        Matrix mst = sscpTotal:Multiply(1.0 / dfTotal)
        Matrix msm = sscpRegression:Multiply(1.0 / dfModel)
        Matrix mse = sscpResidual:Multiply(1.0 / dfError)
        varianceCovarianceMatrix = mse:TensorProduct(xTx_inv)

        Matrix err_sub = sscpResidual:GetDiagonal()
        residualSumOfSquares = err_sub:GetColumnVector(0)
        Matrix mse_sub = mse:GetDiagonal()

        Matrix mod_sub = sscpRegression:GetDiagonal()
        regressionSumOfSquares = mod_sub:GetColumnVector(0)
        Matrix msm_sub = msm:GetDiagonal()

        Matrix tot_sub = sscpTotal:GetDiagonal()
        totalSumOfSquares = tot_sub:GetColumnVector(0)
        Matrix mst_sub = mst:GetDiagonal()

        Matrix betas
        betas:SetSize(betaCoefficients)
        betaStandardError = betas:Copy()
        betaTStatistics = betas:Copy()
        betaProbabilityValues = betas:Copy()

        Vector dependent
        dependent:SetSize(betaCoefficients:GetColumns())
        residualStandardError = dependent:Copy()
        r_Squared = dependent:Copy()
        adjustedR_Squared = dependent:Copy()
        f_Statistic = dependent:Copy()
        numeratorDegreesOfFreedom = dependent:Copy()
        denominatorDegreesOfFreedom = dependent:Copy()
        omnibusProbabilityValue = dependent:Copy()

        i = 0
        repeat while i < dependentVariables
            number mst_i = mst_sub:Get(i, 0)
            number msm_i = msm_sub:Get(i, 0)
            number mse_i = mse_sub:Get(i, 0)
            number rse = math:SquareRoot(mse_i)
            number r2 = 1 - err_sub:Get(i, 0) / tot_sub:Get(i, 0)
            number adj_r2 = 1 - mse_i / mst_i
            number f = msm_i / mse_i 
            fDistribution:Setup(dfModel, dfError)
            number p = 1.0 - fDistribution:CumulativeDistribution(f)
            Matrix coefficients_i = betaCoefficients:GetColumn(i)
            Matrix stdError_i = xTx_inv:Multiply(mse_i):GetDiagonal():SquareRootElements()
            Matrix tValues_i = coefficients_i:DivideElements(stdError_i)
            Matrix pValues_i = CalculateProbabilityValues(tValues_i, dfError)

            betaStandardError:SetColumn(i, stdError_i)
            betaTStatistics:SetColumn(i, tValues_i)
            betaProbabilityValues:SetColumn(i, pValues_i)
            residualStandardError:Set(i, rse)
            r_Squared:Set(i, r2)
            adjustedR_Squared:Set(i, adj_r2)
            f_Statistic:Set(i, f)
            numeratorDegreesOfFreedom:Set(i, dfModel)
            denominatorDegreesOfFreedom:Set(i, dfError)
            omnibusProbabilityValue:Set(i, p)
            i = i + 1
        end                                    
    end

    action GetStatisticalFormatting returns StatisticsFormatting
        return format
    end

    action SetStatisticalFormatting(StatisticsFormatting formatting)
        me:format = format
    end

    action GetSignificanceLevel returns number
        return significanceLevel
    end

    /*
        Sets the significance level of the test (default is 0.05).

        Attribute: Parameter significanceLevel the significance level between 0 and 1.
    */
    action SetSignificanceLevel(number significanceLevel)
        if significanceLevel >= 0 and significanceLevel <= 1
            me:significanceLevel = significanceLevel
        end
    end

    /*
        This calculates the degrees of freedom of the numerator in the F-ratio. It is equivalent
        to the number of columns in the matrix - 1
        Attribute: Parameter predictors a matrix to calculate on
        Attribute: Returns The number of columns in the matrix - 1
    */
    action GetNumeratorDegreesOfFreedom returns number
        return independentVariables
    end
    action GetRegressionDegreesOfFreedom returns number
        return GetNumeratorDegreesOfFreedom()
    end

    /*
        This calculates the degrees of freedom of the denominator in the F-ratio. It is equivalent
        to the number of rows in the matrix - the number of columns

        Attribute: Parameter predictors a matrix to calculate on
        Attribute: Returns The number of rows in the matrix - the number of columns.
    */
    action GetDenominatorDegreesOfFreedom returns number
        if hasIntercept
            return numberOfInstances - independentVariables - 1
        else
            return numberOfInstances - independentVariables
        end
    end
    action GetResidualDegreesOfFreedom returns number
        return GetDenominatorDegreesOfFreedom()
    end

    /*
        Returns the total effect size, in statistics typically termed R^2 (R-squared). This action 
        returns 0 unless the regression has been calculated.

        Attribute: Returns The R^2 if the regression is calculated
    */
    action GetEffectSize returns number
        if r_Squared not= undefined
            if r_Squared:GetSize() = 1
                return r_Squared:Get(0)
            else
                alert("There is more than one dependent variable, use GetEffectSizeVector() instead.")
            end
        end
        alert("The Regression must be calculated first, use Calculate().")
    end
    action GetEffectSizeVector returns Vector
        return r_Squared
    end
    
    /*
        Returns the total adjusted effect size, in statistics typically termed adjusted R^2 (R-squared). This action 
        returns 0 unless the regression has been calculated.

        Attribute: Returns The adjusted R^2 if the regression is calculated
    */
    action GetAdjustedEffectSize returns number
        if adjustedR_Squared not= undefined
            if adjustedR_Squared:GetSize() = 1
                return adjustedR_Squared:Get(0)
            else
                alert("There is more than one dependent variable, use GetAdjustedEffectSizeVector() instead.")
            end
        end
        alert("The Regression must be calculated first, use Calculate().")
    end
    action GetAdjustedEffectSizeVector returns Vector
        return adjustedR_Squared
    end

    /*
        Returns the total residual sum of squares. This action 
        returns 0 unless the regression has been calculated.

        Attribute: Returns The residual sum of squares
    */
    action GetResidualSumOfSquares returns number
        if residualSumOfSquares not= undefined
            if residualSumOfSquares:GetSize() = 1
                return residualSumOfSquares:Get(0)
            else
                alert("There is more than one dependent variable, use GetResidualSumOfSquaresVector() instead.")
            end
        end
        alert("The Regression must be calculated first, use Calculate().")
    end
    action GetResidualSumOfSquaresVector returns Vector
        return residualSumOfSquares
    end

    /*
        Returns the regression/model sum of squares. This action 
        returns 0 unless the regression has been calculated.

        Attribute: Returns The regression (model) sum of squares
    */
    action GetRegressionSumOfSquares returns number
        if regressionSumOfSquares not= undefined
            if regressionSumOfSquares:GetSize() = 1
                return regressionSumOfSquares:Get(0)
            else
                alert("There is more than one dependent variable, use GetRegressionSumOfSquaresVector() instead.")
            end
        end
        alert("The Regression must be calculated first, use Calculate().")
    end
    action GetRegressionSumOfSquaresVector returns Vector
        return regressionSumOfSquares
    end

    /*
        Returns the standard error for the residuals
    */
    action GetResidualStandardError returns number
        if residualStandardError not= undefined
            if residualStandardError:GetSize() = 1
                return residualStandardError:Get(0)
            else
                alert("There is more than one dependent variable, use GetResidualStandardErrorVector() instead.")
            end
        end
        alert("The Regression must be calculated first, use Calculate().")
    end
    action GetResidualStandardErrorVector returns Vector
        return residualStandardError
    end

    /*
        Returns the total sum of squares. This action 
        returns 0 unless the regression has been calculated.

        Attribute: Returns The total sum of squares
    */
    action GetTotalSumOfSquares returns number
        if totalSumOfSquares not= undefined
            if totalSumOfSquares:GetSize() = 1
                return totalSumOfSquares:Get(0)
            else
                alert("There is more than one dependent variable, use GetTotalSumOfSquaresVector() instead.")
            end
        end
        alert("The Regression must be calculated first, use Calculate().")
    end
    action GetTotalSumOfSquaresVector returns Vector
        return totalSumOfSquares
    end

    /*
        Returns the total beta coefficients. This action 
        returns 0 unless the regression has been calculated.

        Attribute: Returns The beta coefficients
    */
    action GetCoefficients returns Vector
        if betaCoefficients not= undefined
            if betaCoefficients:GetColumns() = 1
                return betaCoefficients:GetColumnVector(0)
            else
                alert("There is more than one dependent variable, use GetCoefficientMatrix() instead.")
            end
        end
        alert("The Regression must be calculated first, use Calculate().")
    end
    action GetCoefficientMatrix returns Matrix
        return betaCoefficients
    end

    /*
        Returns the standard errors for the beta coefficients
    */
    action GetCoefficientStandardErrors returns Vector
        if betaStandardError not= undefined
            if betaStandardError:GetColumns() = 1
                return betaStandardError:GetColumnVector(0)
            else
                alert("There is more than one dependent variable, use GetCoefficientStandardErrorMatrix() instead.")
            end
        end
        alert("The Regression must be calculated first, use Calculate().")
    end
    action GetCoefficientStandardErrorMatrix returns Matrix
        return betaStandardError
    end

    /*
        Returns the test statistics for the beta coefficients
    */
    action GetCoefficientTestStatistics returns Vector
        if betaTStatistics not= undefined
            if betaTStatistics:GetColumns() = 1
                return betaTStatistics:GetColumnVector(0)
            else
                alert("There is more than one dependent variable, use GetCoefficientTestStatisticMatrix() instead.")
            end
        end
        alert("The Regression must be calculated first, use Calculate().")
    end
    action GetCoefficientTestStatisticMatrix returns Matrix
        return betaTStatistics
    end

    /*
        Returns the probability values for the beta coefficients
    */
    action GetCoefficientProbabilityValues returns Vector
        if betaProbabilityValues not= undefined
            if betaProbabilityValues:GetColumns() = 1
                return betaProbabilityValues:GetColumnVector(0)
            else
                alert("There is more than one dependent variable, use GetCoefficientProbabilityValueMatrix() instead.")
            end
        end
        alert("The Regression must be calculated first, use Calculate().")
    end
    action GetCoefficientProbabilityValueMatrix returns Matrix
        return betaProbabilityValues
    end

    /*
        Returns whether or not this regression includes an intercept.
    */
    action HasIntercept returns boolean
        return hasIntercept
    end

    /*
        Sets whether or not this regression includes an intercept.
    */
    action SetHasIntercept(boolean hasIntercept)
        me:hasIntercept = hasIntercept
    end

    /*
        Returns the test statistic
    */
    action GetTestStatistic returns number
        if f_Statistic not= undefined
            if f_Statistic:GetSize() = 1
                return f_Statistic:Get(0)
            else
                alert("There is more than one dependent variable, use GetTestStatisticVector() instead.")
            end
        end
        alert("The Regression must be calculated first, use Calculate().")
    end
    action GetTestStatisticVector returns Vector
        return f_Statistic
    end
    // Outdated, this returns the test statistic not the critical value at alpha.
    action GetCriticalValue returns number
        return GetTestStatistic()
    end

    /*
        Returns the probability value
    */
    action GetProbabilityValue returns number
        if omnibusProbabilityValue not= undefined
            if omnibusProbabilityValue:GetSize() = 1
                return omnibusProbabilityValue:Get(0)
            else
                alert("There is more than one dependent variable, use GetProbabilityValueVector() instead.")
            end
        end
        alert("The Regression must be calculated first, use Calculate().")
    end
    action GetProbabilityValueVector returns Vector
        return omnibusProbabilityValue
    end

    /*
        Returns the residuals. This action 
        returns 0 unless the regression has been calculated.

        Attribute: Returns The residuals
    */
    action GetResiduals returns Vector
        if residualMatrix not= undefined
            if residualMatrix:GetColumns() = 1
                return residualMatrix:GetColumnVector(0)
            else
                alert("There is more than one dependent variable, use GetResidualMatrix() instead.")
            end
        end
        alert("The Regression must be calculated first, use Calculate().")
    end
    action GetResidualMatrix returns Matrix
        return residualMatrix
    end

    /* Returns the histogram chart of the residuals. Each column(series) will show each dependent variable's residuals */
    action GetResidualHistogram returns Chart
        if residualMatrix not= undefined
            DataFrame residualFrame = GetResidualMatrix():ConvertToDataFrame(columnHeaders)
            residualFrame:SelectAllColumns()
            return residualFrame:Histogram()
        end
        return undefined
    end

    /* This action summarizes the result and lists it informally. */
    action GetSummary returns text
        if residualMatrix not= undefined
            text summary = "Multiple Linear Regression"
            text lf = summary:GetLineFeed()
            text tab = summary:GetTab()
            integer digits = format:GetSignificantDigits()
            summary = summary + lf + "Predictors: " + GetFactorList()
            i = 0
            repeat while i < columnHeaders:GetSize()
                summary = summary + lf + "Response: " + columnHeaders:Get(i)
                summary = summary + lf + tab + "Statistic (F): " + math:Round(GetTestStatisticVector():Get(i), digits)
                summary = summary + lf + tab + "Degrees Of Freedom Numerator: " + math:Round(GetRegressionDegreesOfFreedom(), digits)
                summary = summary + lf + tab + "Degrees Of Freedom Denominator: " + math:Round(GetResidualDegreesOfFreedom(), digits)
                summary = summary + lf + tab + "Probability: " + math:Round(GetProbabilityValueVector():Get(i), digits)
                summary = summary + lf + tab + "Effect Size (R-Squared): " + math:Round(GetEffectSizeVector():Get(i), digits)
                summary = summary + lf + tab + "Effect Size (Adjusted R-Squared): " + math:Round(GetAdjustedEffectSizeVector():Get(i), digits)
                summary = summary + lf + tab + "Equation: " + GetEquation(i)  
                i = i + 1
            end

            return summary
        end
        return ""
    end

    /*
        This action summarizes the result and places it into formal academic language, in 
        APA format.
    */
    action GetFormalSummary returns text
        if residualMatrix not= undefined
            text summary = "A multiple linear regression was calculated, "+GetFactorList()
            text lf = summary:GetLineFeed()
            
            i = 0
            repeat while i < columnHeaders:GetSize()
                if GetProbabilityValueVector():Get(i) <= GetSignificanceLevel() 
                    if i = 0 
                        summary = summary +" appeared to significantly predict "+columnHeaders:Get(i) +" "+ GetFormalNumericalResult(i)
                    else
                        summary = summary +", and appeared to significantly predict "+columnHeaders:Get(i) +" "+ GetFormalNumericalResult(i)
                    end
                else
                    if i = 0 
                        summary = summary +" did not appear to predict "+columnHeaders:Get(i) +" "+ GetFormalNumericalResult(i)
                    else
                        summary = summary +", and did not appear to predict "+columnHeaders:Get(i) +" "+ GetFormalNumericalResult(i)
                    end
                end   
                i = i + 1
            end
            return summary + "."
        end
        return ""
    end

    /*
        This action summarizes the result and places it into formal academic language, in APA format.
        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf
    */
    action GetFormalNumericalResult() returns text
        if columnHeaders:GetSize() = 1
            return GetFormalNumericalResult(0)
        end
        return ""
    end
    action GetFormalNumericalResult(integer index) returns text
        if residualMatrix not= undefined and index < columnHeaders:GetSize()
            text summary = "R-squared = " + format:FormatProbabilityValue(GetEffectSizeVector():Get(index)) + ", F("    
            summary = summary + "" + format:FormatDegreesOfFreedom(GetRegressionDegreesOfFreedom()) + ", " 
            summary = summary + format:FormatDegreesOfFreedom(GetResidualDegreesOfFreedom()) + ") = "
            summary = summary + format:FormatTestStatistic(GetTestStatisticVector():Get(index))
            number pval = GetProbabilityValueVector():Get(index)
            if pval < format:PRECISION_LIMIT
                summary = summary + ", p < " + format:FormatProbabilityValue(pval)
            else
                summary = summary + ", p = " + format:FormatProbabilityValue(pval)
            end
            return summary
        end
        return ""
    end

    /*
        This action return the linear equation for the regression model.
    */
    action GetEquation() returns text
        if columnHeaders:GetSize() = 1
            return GetEquation(0)
        end
        return ""
    end
    action GetEquation(integer index) returns text
        text equation = ""
        if betaCoefficients not= undefined and index < columnHeaders:GetSize()
            integer digits = format:GetSignificantDigits()
            equation = equation + columnHeaders:Get(index) + " = "
            j = 0
            repeat while j < independentVariables or (j < independentVariables + 1 and hasIntercept)
                number coeff = math:Round(math:AbsoluteValue(betaCoefficients:Get(j, index)), digits)
                text operator = " + "
                if betaCoefficients:Get(j, index) < 0
                    operator = " - "
                end
                if j = 0 
                    if hasIntercept
                        equation = equation + math:Round(betaCoefficients:Get(j, index), digits)
                    else
                        equation = equation + operator + coeff + "*(" + factorHeaders:Get(j) + ")"
                    end
                else
                    if hasIntercept
                        equation = equation + operator + coeff + "*(" + factorHeaders:Get(j-1) + ")"
                    else
                        equation = equation + operator + coeff + "*(" + factorHeaders:Get(j) + ")"
                    end
                end
                j = j + 1
            end
        end
        return equation
    end

    action Predict(DataFrame frame) returns RegressionPrediction
        // Make sure the number of predictor variables is the same
        if frame:GetSelectedFactorSize() not= independentVariables
            if independentVariables = 1
                alert("This regression model was trained on "+independentVariables+" predictor, but you gave "+frame:GetSelectedFactorSize())
            else
                alert("This regression model was trained on "+independentVariables+" predictors, but you gave "+frame:GetSelectedFactorSize())
            end
        end

        // Remove undefined values and copy only the selected factors
        DataFrame cleanedFrame = frame:RemoveUndefinedRowsFromSelectedColumns()
        DataFrame copy
        i = 0
        repeat while i < independentVariables
            // Should probably check that factor headers are matchy matchy.
            DataFrameColumn factor = cleanedFrame:GetColumn(frame:GetSelection():GetFactor(i))
            if not factor:IsNumberColumn()
                alert("Cannot process prediction from a non-numerical column.")
            end
            copy:AddColumn(factor)
            i = i + 1
        end
        Matrix designMatrixWithoutIntercept = copy:ConvertToMatrix()
        integer numberOfInstances = designMatrixWithoutIntercept:GetRows()

        Matrix predictorMatrix
        if hasIntercept
            Matrix designMatrixWithIntercept
            designMatrixWithIntercept:SetSize(numberOfInstances, independentVariables + 1)
            designMatrixWithIntercept:SetColumn(0, 1)
            i = 1
            repeat while i <= independentVariables 
                designMatrixWithIntercept:SetColumn(i, designMatrixWithoutIntercept:GetColumn(i-1))
                i = i + 1
            end
            predictorMatrix = designMatrixWithIntercept:Copy()
        else
            predictorMatrix = designMatrixWithoutIntercept:Copy()
        end

        Matrix predictedResponseMatrix
        predictedResponseMatrix:SetSize(numberOfInstances, dependentVariables)
        i = 0
        repeat while i < numberOfInstances
            j = 0
            repeat while j < dependentVariables
                Matrix weights = betaCoefficients:GetColumn(j)
                predictedResponseMatrix:Set(i, j, predictorMatrix:GetRow(i):Multiply(weights):GetTotal())
                j = j + 1
            end
            i = i + 1
        end

        RegressionPrediction result

        // See if the user is trying to test prediction, if so, calculate effect size. If not, skip this and just save the predictions only.
        if frame:GetSelectedColumnSize() > 0
            if frame:GetSelectedColumnSize() not= dependentVariables
                if dependentVariables = 1
                    alert("This regression model was trained to predict "+dependentVariables+" dependent variable, but you asked to predict "+frame:GetSelectedColumnSize())
                else
                    alert("This regression model was trained to predict "+dependentVariables+" dependent variables, but you asked to predict "+frame:GetSelectedColumnSize())
                end
            end
            DataFrame dependentFrame
            i = 0
            repeat while i < dependentVariables
                // Should probably check that column headers are matchy matchy.
                DataFrameColumn column = cleanedFrame:GetColumn(frame:GetSelection():GetColumn(i))
                if not column:IsNumberColumn()
                    alert("Cannot check the prediction from a non-numerical column.")
                end
                dependentFrame:AddColumn(column)
                i = i + 1
            end
            Matrix actualResponseMatrix = dependentFrame:ConvertToMatrix()
            Matrix residualMatrix = actualResponseMatrix:SubtractElements(predictedResponseMatrix) 
            Matrix sscpResidual = residualMatrix:Transpose():Multiply(residualMatrix)
            Matrix sscpTotal
            if hasIntercept
                Matrix ceneteredResponseMatrix = actualResponseMatrix:CenterByColumn()
                sscpTotal = ceneteredResponseMatrix:Transpose():Multiply(ceneteredResponseMatrix)
            else
                sscpTotal = actualResponseMatrix:Transpose():Multiply(actualResponseMatrix)
            end

            Matrix err_sub = sscpResidual:GetDiagonal()     // residual sum of squares (diag of sscp)
            Matrix tot_sub = sscpTotal:GetDiagonal()        // total sum of squares (diag of sscp)
    
            Vector rSquared
            rSquared:SetSize(dependentVariables)
    
            i = 0
            repeat while i < dependentVariables
                number r2 = 1 - err_sub:Get(i, 0) / tot_sub:Get(i, 0)
                rSquared:Set(i, r2)
                i = i + 1
            end  

            result:SetEffectSizeVector(rSquared)
        end

        result:SetResultFrame(predictedResponseMatrix:ConvertToDataFrame(columnHeaders))
        result:SetIsComputed(true)
        return result
    end



    private action GetCenteredPredictedMatrix(Matrix predicted, Matrix actual) returns Matrix
        Matrix centered = predicted:Copy()
        i = 0
        repeat while i < actual:GetColumns()
            centered:SetColumn(i, predicted:GetColumn(i):Subtract(actual:GetColumn(i):GetMean()))
            i = i + 1
        end           
        return centered
    end

    private action CalculateProbabilityValues(Matrix tValues, number dfError) returns Matrix
        Matrix newMatrix
        newMatrix:SetSize(tValues)
        tDistribution:Setup(dfError)
        r = 0
        repeat while r < tValues:GetRows()
            newMatrix:Set(r, 0, 2.0 * tDistribution:CumulativeDistribution(-math:AbsoluteValue(tValues:Get(r,0))))
            r = r + 1
        end
        return newMatrix
    end

    private action GetFactorList returns text
        text list = ""
        i = 0
        repeat while i < factorHeaders:GetSize()
            if i = 0
                list = factorHeaders:Get(i)
            else
                list = list + ", "+factorHeaders:Get(i)
            end
            i = i + 1
        end
        return list
    end

    private action GetColumnList returns text
        text list = ""
        i = 0
        repeat while i < columnHeaders:GetSize()
            if i = 0
                list = columnHeaders:Get(i)
            else
                list = list + ", "+columnHeaders:Get(i)
            end
            i = i + 1
        end
        return list
    end
end