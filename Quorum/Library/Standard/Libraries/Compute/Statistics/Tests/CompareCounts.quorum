package Libraries.Compute.Statistics.Tests

use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Inputs.FactorInput
use Libraries.Compute.Statistics.Tests.StatisticalTest
use Libraries.Compute.Statistics.DataFrameCalculation
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.DataFrame
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Calculations.Summarize
use Libraries.Compute.Statistics.Reporting.StatisticsFormatting
use Libraries.Containers.HashTable
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Statistics.Reporting.ChiSquaredResult
use Libraries.Compute.Statistics.Distributions.ChiSquaredDistribution
use Libraries.Containers.Iterator
use Libraries.Compute.Math

/*
    This class conducts a Pearson's chi-squared test on a DataFrame. 
    Pearson's chi-squared test is used to assess three types of comparison:
        Goodness of fit
        Test of independence
        Test of homogeneity
    More information about this kind of statistical test can be found here: 
    https://en.wikipedia.org/wiki/Pearson%27s_chi-squared_test

    It was adapted from the same model in Apache Commons, but was expanded 
    upon to simplify the library and add a variety of helper actions that were missing.
    More information about this class can be found on its documentation page:
    https://commons.apache.org/proper/commons-math/javadocs/api-3.6/org/apache/commons/math3/stat/regression/OLSMultipleLinearRegression.html

    Attribute: Author Hannah Williams
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Tests.ChiSquared

    DataFrame frame
    frame:Load("data.csv")
    frame:AddSelectedColumns(0)
    frame:AddSelectedColumns(1)

    ChiSquared result = frame:CalculateAndCompareSelectedCounts() // Need to calculate counts
    ChiSquared result = frame:CompareSelectedCounts() // Pre-calculated counts
    ChiSquared result = frame:CompareObservedSelectedCounts() // Pre-calculated counts
    output result:GetSummary()      
*/

class CompareCounts is DataFrameCalculation, StatisticalTest, ColumnInput, FactorInput
    Math math
    ChiSquaredDistribution distribution
    boolean approximationWarning = false
    boolean goodnessOfFit = false
    number significanceLevel = 0.05
    constant number LIMIT = 0.000010
    HashTable<text, ChiSquaredResult> results

    action Calculate(DataFrame frame) 
        if GetColumnSize() < 1
            alert("Must include at least one column.")
        end
        if GetFactorSize() > 0
            if GetFactorSize() = 1
                CalculateByFactor(frame) // Separate and run each based on factor
            else
                alert("Only one factor allowed right now.")
            end
        else
            if GetColumnSize() = 1 or goodnessOfFit
                GoodnessOfFit(frame)
                goodnessOfFit = true
            else
                TestOfIndependence(frame)
            end
        end
    end

    private action CalculateByFactor(DataFrame frame)
        DataFrameColumn factor = frame:GetColumn(GetFactor(0)):Copy(true,true)
        integer i = 0
        repeat while i < factor:GetSize()
            text header = factor:GetHeader()
            text dq = header:GetDoubleQuote()
            DataFrame newFrame 
    
            if factor:IsNumberColumn() or factor:IsIntegerColumn()
                newFrame = frame:Copy(header+"="+factor:GetAsNumber(i))
            elseif factor:IsDateTimeColumn()
                alert("Dataframe factor by datetime seems to not work right now.")
                //newFrame = frame:Copy(header+"="+factor:GetAsDateTime(i))
            elseif factor:IsBooleanColumn()
                newFrame = frame:Copy(header+"="+factor:GetAsBoolean(i))
            else
                newFrame = frame:Copy(header+"="+dq+factor:GetAsText(i)+dq)
            end

            if GetColumnSize() = 1 or goodnessOfFit
                GoodnessOfFit(newFrame)
                goodnessOfFit = true
            else
                TestOfIndependence(newFrame)
            end        
            i = i + 1
        end
    end

    /*
        This action represents a goodness of fit chi-squared test on a single column of data.
        It calculates the observed values by counting the frequencies of unique items.
        It then calculates the expected counts and compares the two to get the x2 value.

        H0: The population fits the given distribution.
        Ha: The population does not fit the given distribution.

        This action assumes the expected values to be equal across all items.
    */
    private action GoodnessOfFit(DataFrame frame)
        integer i = 0
        repeat while i < GetColumnSize()
            DataFrame observed = CalculateObserved(frame:GetColumn(GetColumn(i)))
            DataFrame expected = CalculateExpectedFromObserved(observed)
            integer rows = observed:GetColumn(0):GetSize()
            integer cols = observed:GetColumns():GetSize()
            number x2 = ChiSquare(observed:GetColumn(1), expected:GetColumn(1))  
            number df = (rows-1)*(cols-1)
            distribution:Setup(df)
            number p = distribution:CumulativeDistribution(x2)
    
            text resultKey = frame:GetColumn(GetColumn(i)):GetHeader()
            if GetFactorSize() > 0 and frame:GetColumn(GetFactor(0)):GetSize() > 0
                resultKey = frame:GetColumn(GetFactor(0)):GetAsText(0) + ", " + resultKey
            end
            if not results:HasKey(resultKey)
                ChiSquaredResult result
                result:SetObserved(observed)
                result:SetExpected(expected)
                result:SetDegreesOfFreedom(df)
                result:SetCriticalValue(x2)
                result:SetProbabilityValue(p)
                results:Add(resultKey, result)
            end 
            i = i + 1
        end
    end

    /*
        This action represents a goodness of fit chi-squared test on a single column of data.
        It calculates the observed values by counting the frequencies of unique items.
        It then calculates the expected counts and compares the two to get the x2 value.

        H0: The population fits the given distribution.
        Ha: The population does not fit the given distribution.

        This action uses the given expected percent values to generate expected.
    */
    action GoodnessOfFitAgainstExpectedPercents(DataFrame frame, DataFrame percents)
        integer i = 0
        repeat while i < GetColumnSize()
            DataFrame observed = CalculateObserved(frame:GetColumn(GetColumn(i)))
            // Check that the sum of percents is equal to 1.0
            DataFrame expected = CalculateExpectedFromPercentOfTotal(observed, percents)
            integer rows = observed:GetColumn(0):GetSize()
            integer cols = observed:GetColumns():GetSize()
            number x2 = ChiSquare(observed:GetColumn(1), expected:GetColumn(1))  
            number df = (rows-1)*(cols-1)
            distribution:Setup(df)
            number p = distribution:CumulativeDistribution(x2)
    
            text resultKey = frame:GetColumn(GetColumn(i)):GetHeader()
            if GetFactorSize() > 0 and frame:GetColumn(GetFactor(0)):GetSize() > 0
                resultKey = frame:GetColumn(GetFactor(0)):GetAsText(0) + ", " + resultKey
            end
            if not results:HasKey(resultKey)
                ChiSquaredResult result
                result:SetObserved(observed)
                result:SetExpected(expected)
                result:SetDegreesOfFreedom(df)
                result:SetCriticalValue(x2)
                result:SetProbabilityValue(p)
                results:Add(resultKey, result)
            end 
            i = i + 1
        end
    end

    /*
        This action represents a goodness of fit chi-squared test on a single column of data.
        It calculates the observed values by counting the frequencies of unique items.
        This action uses the given expected values and compares the two to get the x2 value.

        H0: The population fits the given distribution.
        Ha: The population does not fit the given distribution.
    */
    action GoodnessOfFitAgainstExpectedCounts(DataFrame frame, DataFrame expected)
        integer i = 0
        repeat while i < GetColumnSize()
            DataFrame observed = CalculateObserved(frame:GetColumn(GetColumn(i)))
            // Check that the sum of observed and the sum of expected are equal.
            integer rows = observed:GetColumn(0):GetSize()
            integer cols = observed:GetColumns():GetSize()
            number x2 = ChiSquare(observed:GetColumn(1), expected:GetColumn(1))  
            number df = (rows-1)*(cols-1)
            distribution:Setup(df)
            number p = distribution:CumulativeDistribution(x2)
    
            text resultKey = frame:GetColumn(GetColumn(i)):GetHeader()
            if GetFactorSize() > 0 and frame:GetColumn(GetFactor(0)):GetSize() > 0
                resultKey = frame:GetColumn(GetFactor(0)):GetAsText(0) + ", " + resultKey
            end
            if not results:HasKey(resultKey)
                ChiSquaredResult result
                result:SetObserved(observed)
                result:SetExpected(expected)
                result:SetDegreesOfFreedom(df)
                result:SetCriticalValue(x2)
                result:SetProbabilityValue(p)
                results:Add(resultKey, result)
            end 
            i = i + 1
        end
    end

    /*
        This action represents a pairwise test of independence chi-squared test on two columns of data.
        It calculates the observed values by counting the frequencies of unique items.
        It then calculates the expected counts and compares the two to get the x2 value.

        H0: The two variables (factors) are independent.
        Ha: The two variables (factors) are dependent.
    */
    private action TestOfIndependence(DataFrame frame)
        integer i = 0
        repeat while i < GetColumnSize()
            integer j = i + 1
            repeat while j < GetColumnSize()
                DataFrameColumn left = frame:GetColumn(GetColumn(i))
                DataFrameColumn right = frame:GetColumn(GetColumn(j))
                DataFrame observed = CalculateObserved(left, right)
                DataFrame expected = CalculateExpectedFromObserved(observed)
                integer rows = observed:GetColumn(0):GetSize()
                integer cols = observed:GetColumns():GetSize()-1
                number x2 = ChiSquare(observed, expected)  
                number df = (rows-1)*(cols-1)
                distribution:Setup(df)
                number p = distribution:CumulativeDistribution(x2)
                
                text resultKey = left:GetHeader()+" & "+right:GetHeader()
                if GetFactorSize() > 0 and frame:GetColumn(GetFactor(0)):GetSize() > 0
                    resultKey = frame:GetColumn(GetFactor(0)):GetAsText(0)+" "+frame:GetColumn(GetFactor(0)):GetHeader() + ", " + resultKey
                end
                if not results:HasKey(resultKey)
                    ChiSquaredResult result
                    result:SetObserved(observed)
                    result:SetExpected(expected)
                    result:SetDegreesOfFreedom(df)
                    result:SetCriticalValue(x2)
                    result:SetProbabilityValue(p)
                    if approximationWarning
                        result:SetApproximationWarningFlag(true)
                        approximationWarning = false //reset
                    end
                    results:Add(resultKey, result)
                end  
                j = j + 1
            end
            i = i + 1
        end
    end

    /*
        This action represents a pairwise test of homogeneity chi-squared test on two distributions.
        It calculates the first by getting the observed counts from one of the other tests.
        It then calculates the second and compares the two to get the x2 value.

        H0: The two populations follow the same distribution.
        Ha: The two populations have different distributions.
    */
    private action TestOfHomogeneity(DataFrame frame)
        if GetColumnSize() = 2
            //GOF
        else
            //TOI pairwise  
        end    
    end

    private action CalculateObserved(DataFrameColumn column) returns DataFrame
        // Count unique items
        DataFrameColumn rowHeaders = column:Copy(true, true)
        HashTable<text,integer> hash = column:CalculateValueCountAsText() 
        integer rows = rowHeaders:GetSize()

        NumberColumn observe
        observe:SetHeader("count")
        integer i = 0
        repeat while i < rowHeaders:GetSize()
            if hash:HasKey(rowHeaders:GetAsText(i))
                observe:Add(hash:GetValue(rowHeaders:GetAsText(i)))
            end
            i = i + 1
        end

        DataFrame observed
        Array<DataFrameColumn> columns
        columns:Add(rowHeaders)
        columns:Add(observe)
        observed:SetColumns(columns)
        return observed  
    end

    private action CalculateObserved(DataFrameColumn column1, DataFrameColumn column2) returns DataFrame
        DataFrame observed
        Array<DataFrameColumn> columns
        columns:Add(column1)
        columns:Add(column2)
        observed:SetColumns(columns)

        observed:AddSelectedColumn(0)
        observed:AddSelectedColumn(1)

        return observed:CrossTab()
    end

    private action CalculateExpectedFromObserved(DataFrame observed) returns DataFrame
        DataFrame expected
        if observed:GetColumns():GetSize() > 0 and observed:GetColumn(0):GetSize() > 0
            Array<DataFrameColumn> columns
            columns:Add(observed:GetColumn(0):Copy()) // First column is just row headers.

            number totalSum = 0
            Array <number> colSums
            integer i = 1
            repeat while i < observed:GetColumns():GetSize()
                DataFrameColumn column = observed:GetColumn(i)
                if column:GetSize() > 0
                    // Get observed total
                    Summarize observedSummary
                    observedSummary:Calculate(column)
                    colSums:Add(observedSummary:GetSum())
                    totalSum = totalSum + observedSummary:GetSum()
                end
                i = i + 1
            end

            Array <number> rowSums
            // FIND A BETTER WAY TO GET THE SUM OF A ROW??
            // First row is just column headers, accounted for in DataFrame class so still start at 0
            i = 0
            repeat while i < observed:GetColumn(0):GetSize() // for each row
                number sum = 0
                j = 1
                repeat while j < observed:GetColumns():GetSize() // for each column  
                    if observed:GetColumn(j):GetSize() > i
                        // Get observed total
                        sum = sum + observed:GetColumn(j):GetAsNumber(i)
                    end
                    j = j + 1
                end
                rowSums:Add(sum)
                i = i + 1
            end
        

            i = 0
            repeat while i < colSums:GetSize()
                NumberColumn expect
                expect:SetHeader(observed:GetColumn(i+1):GetHeader())
                j = 0
                repeat while j < rowSums:GetSize()
                    number expectedValue = colSums:Get(i)*rowSums:Get(j)/totalSum
                    if GetColumnSize() = 1 // goodnessOfFit?
                        expectedValue = totalSum/observed:GetColumn(0):GetSize()
                    end
                    expect:Add(expectedValue)
                    j = j + 1
                end
                columns:Add(expect)
                i = i + 1
            end
            expected:SetColumns(columns)
        end
        return expected
    end

    private action CalculateExpectedFromPercentOfTotal(DataFrame observed, DataFrame percents) returns DataFrame
        DataFrame expected
        if observed:GetColumns():GetSize() > 0 and observed:GetColumn(0):GetSize() > 0
            Array<DataFrameColumn> columns
            columns:Add(observed:GetColumn(0):Copy()) // First column is just row headers.

            number totalSum = 0
            Array <number> colSums
            integer i = 1
            repeat while i < observed:GetColumns():GetSize()
                DataFrameColumn column = observed:GetColumn(i)
                if column:GetSize() > 0
                    // Get observed total
                    Summarize observedSummary
                    observedSummary:Calculate(column)
                    colSums:Add(observedSummary:GetSum())
                    totalSum = totalSum + observedSummary:GetSum()
                end
                i = i + 1
            end

            Array <number> rowSums
            // FIND A BETTER WAY TO GET THE SUM OF A ROW??
            // First row is just column headers, accounted for in DataFrame class so still start at 0
            i = 0
            repeat while i < observed:GetColumn(0):GetSize() // for each row
                number sum = 0
                j = 1
                repeat while j < observed:GetColumns():GetSize() // for each column  
                    if observed:GetColumn(j):GetSize() > i
                        // Get observed total
                        sum = sum + observed:GetColumn(j):GetAsNumber(i)
                    end
                    j = j + 1
                end
                rowSums:Add(sum)
                i = i + 1
            end
        

            i = 0
            repeat while i < colSums:GetSize()
                NumberColumn expect
                expect:SetHeader(observed:GetColumn(i+1):GetHeader())
                j = 0
                repeat while j < rowSums:GetSize()
                    if i + j < percents:GetColumn(i+1):GetSize()
                        number expectedValue = totalSum*percents:GetColumn(i+1):GetAsNumber(i+j)
                        expect:Add(expectedValue)
                    end
                    j = j + 1
                end
                columns:Add(expect)
                i = i + 1
            end
            expected:SetColumns(columns)
        end
        return expected
    end

    private action ChiSquare(DataFrameColumn observed, DataFrameColumn expected) returns number
        if observed = undefined
            alert("Observed column is undefined.")
        end
        if expected = undefined
            alert("Expected column is undefined.")
        end

        if observed:GetSize() not= expected:GetSize()
            output observed:ToText()
            output expected:ToText()
            alert("Observed and Expected must be the same size.")
        end

        // Verify Observed. All values must be 0 or greater
        if not observed:IsNumberColumn() and not observed:IsIntegerColumn()
            alert("Observed must a numerical column.")
        end
        Summarize observedSummary
        observedSummary:Calculate(observed)
        if observedSummary:GetMinimum() < 0
            alert("Observed cannot have negative values.")
        end
        if observedSummary:GetMinimum() < 5
            approximationWarning = true
        end
        number observedSum = observedSummary:GetSum()

        // Verify Expected. All values must be greater than 0. Cannot be 0?
        if not expected:IsNumberColumn() and not expected:IsIntegerColumn()
            alert("Expected must a numerical column.")
        end
        Summarize expectedSummary
        expectedSummary:Calculate(expected)
        if expectedSummary:GetMinimum() <= 0
            alert("Expected must have positive values.")
        end
        number expectedSum = expectedSummary:GetSum()


        number ratio = 1.0        
        boolean rescale = false      
        if (math:AbsoluteValue(expectedSum - observedSum) > LIMIT)
            ratio = observedSum / expectedSum
            rescale = true
        end
        number sumSquared = 0
        integer i = 0
        repeat while i < observed:GetSize()
            if rescale
                number dev = observed:GetAsNumber(i) - ratio * expected:GetAsNumber(i)
                sumSquared = sumSquared + (dev * dev / (ratio * expected:GetAsNumber(i)))
            else
                number dev = observed:GetAsNumber(i) - expected:GetAsNumber(i)
                sumSquared = sumSquared + (dev * dev / expected:GetAsNumber(i))
            end
            i = i + 1
        end
    
        return sumSquared
    end

    private action ChiSquare(DataFrame observed, DataFrame expected) returns number 
        if observed:GetSize() not= expected:GetSize()
            alert("Observed and Expected must be the same size.")
        end

        number sumSquared = 0
        integer i = 1 // First column is row headers
        repeat while i < observed:GetColumns():GetSize() and i < expected:GetColumns():GetSize()
            DataFrameColumn observe = observed:GetColumn(i)
            DataFrameColumn expect = expected:GetColumn(i)
            // Verify Observed.
            if not observe:IsNumberColumn() and not observe:IsIntegerColumn()
                alert("Observed must a numerical column.")
            end
    
            // Verify Expected.
            if not expect:IsNumberColumn() and not expect:IsIntegerColumn()
                alert("Expected must a numerical column.")
            end

            integer j = 0
            repeat while j < observe:GetSize() and j < expect:GetSize()
                if observe:GetAsNumber(j) < 5 and not approximationWarning
                    approximationWarning = true
                end
                number dev = observe:GetAsNumber(j) - expect:GetAsNumber(j)
                sumSquared = sumSquared + (dev * dev / expect:GetAsNumber(j))
                j = j + 1
            end
            i = i + 1
        end
        return sumSquared
    end

    action GetResultIterator returns Iterator<ChiSquaredResult>
        return results:GetValueIterator()
    end

    action GetSignificanceLevel returns number
        return significanceLevel
    end

    action SetSignificanceLevel(number significanceLevel)
        me:significanceLevel = significanceLevel
    end

    /*
        This action summarizes the result with informal format 
    */
    action GetSummary returns text
        text summary = ""
        Iterator<ChiSquaredResult> i = results:GetValueIterator()
        ChiSquaredResult result 
        repeat while i:HasNext()
            result = i:Next()

            text tb = summary:GetTab()
            text lf = summary:GetLineFeed()
            
            if goodnessOfFit
                summary = summary + lf + "A Pearson's chi-squared goodness-of-fit test was calculated."
            else
                summary = summary + lf + "A Pearson's chi-squared test-of-independence was calculated."
            end

            summary = summary + lf + "X-squared: " + result:GetCriticalValue()
    
            summary = summary + lf + "Degrees Of Freedom: " + result:GetDegreesOfFreedom()
    
            summary = summary + lf + "P-Value: " + result:GetProbabilityValue()

            //P-value ≤ α: The variables have a statistically significant association (Reject H0)
            if result:GetProbabilityValue() <= significanceLevel
                if goodnessOfFit 
                    summary = summary + " <= "+ significanceLevel + " significance level, " + results:GetKey(result) + " does not fit."
                else
                    summary = summary + " <= "+ significanceLevel + " significance level, " + results:GetKey(result) + " are not independent."
                end
            else
            //P-value > α: Cannot conclude that the variables are associated (Fail to reject H0)
                if goodnessOfFit 
                    summary = summary + " > "+ significanceLevel + " significance level, " + results:GetKey(result) + " fits."
                else
                    summary = summary + " > "+ significanceLevel + " significance level, " + results:GetKey(result) + " are independent."
                end
            end

            if result:GetApproximationWarningFlag()
                summary = summary + lf + "Chi-squared approximation may be incorrect. At least one observed count is less than 5."
            end
    
            summary = summary + lf + "Observed Count: " + lf + result:GetObserved():ToText()
    
            summary = summary + lf + "Expected Count: " + lf + result:GetExpected():ToText()

//            summary = summary + lf + "Residuals: " + lf + result:GetResiduals():ToText()
        end
        return summary
    end

    /*
        This action summarizes the result and places it into formal academic language, in 
        APA format.
    */
    action GetFormalSummary returns text
        text summary = "A Pearson's chi-squared test was calculated: "

        return summary
    end
end