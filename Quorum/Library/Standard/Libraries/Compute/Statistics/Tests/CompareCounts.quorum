package Libraries.Compute.Statistics.Tests

use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Inputs.FactorInput
use Libraries.Compute.Statistics.Tests.StatisticalTest
use Libraries.Compute.Statistics.DataFrameCalculation
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.DataFrame
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Calculations.Summarize
use Libraries.Compute.Statistics.Reporting.StatisticsFormatting
use Libraries.Containers.HashTable
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Statistics.Reporting.CompareCountsResult
use Libraries.Compute.Statistics.Distributions.ClassificationDistribution
use Libraries.Containers.Iterator
use Libraries.Compute.Math
use Libraries.Compute.Matrix

/*
    This class conducts a Pearson's chi-squared test on a DataFrame. 
    Pearson's chi-squared test is used to assess three types of comparison:
        Goodness of fit
        Test of independence
        Test of homogeneity - not implemented
    More information about this kind of statistical test can be found here: 
    https://en.wikipedia.org/wiki/Pearson%27s_chi-squared_test

    It was adapted from the same model in Apache Commons, but was expanded 
    upon to simplify the library and add a variety of helper actions that were missing.
    More information about this class can be found on its documentation page ChiSquaredTest:
    https://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/index.html

    Attribute: Author Hannah Williams
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Tests.CompareCounts

    DataFrame frame
    frame:Load("data.csv")
    frame:AddSelectedColumns(0)
    frame:AddSelectedColumns(1)

    CompareCounts compare = frame:CompareSelectedCounts()
    output compare:GetSummary()      
*/

class CompareCounts is DataFrameCalculation, StatisticalTest, ColumnInput, FactorInput
    /* The distribution used to calculate the p-value from x2 and df.*/
    ClassificationDistribution distribution

    /* A flag that just stores if this calculates only one result. */
    boolean oneResult = false

    /* A flag to let the user know approximation may be incorrect due to low counts. */
    boolean approximationWarning = false

    /* A flag if using a goodness of fit test */
    boolean goodnessOfFit = false

    /* This stores a hash of all of the results. */
    HashTable<text, CompareCountsResult> results        // Used to find the result by column or pair of columns.        
    HashTable<text, CompareCountsResult> indexResults   // Used to find the result by index or pair of indices.

    Math math

    action Calculate(DataFrame frame) 
        if GetColumnSize() < 1
            alert("Must include at least one column.")
        end
        if GetFactorSize() > 0
            if GetFactorSize() = 1
                CalculateByFactor(frame) // Separate and run each based on factor
            else
                alert("Only one factor allowed right now.")
            end
        else
            if GetColumnSize() = 1
                GoodnessOfFit(frame)
            else
                TestOfIndependence(frame)
            end
        end
    end

    /*
        This action takes a DataFrame and a DataFrameColumn (factor) and separates that frame 
        into smaller DataFrames. One DataFrame for each unique item in the selected factor.
    */
    private action CalculateByFactor(DataFrame frame) 
        DataFrameColumn factor = frame:GetColumn(GetFactor(0)):Copy(true,true)
        integer i = 0
        repeat while i < factor:GetSize()
            text header = factor:GetHeader()
            text dq = header:GetDoubleQuote()
            DataFrame newFrame     

            if factor:IsNumberColumn() or factor:IsIntegerColumn()
                newFrame = frame:Copy(header+"="+factor:GetAsNumber(i))
            elseif factor:IsDateTimeColumn()
                alert("Dataframe factor by datetime seems to not work right now.")
                //newFrame = frame:Copy(header+"="+factor:GetAsDateTime(i))
            elseif factor:IsBooleanColumn()
                newFrame = frame:Copy(header+"="+factor:GetAsBoolean(i))
            else
                newFrame = frame:Copy(header+"="+dq+factor:GetAsText(i)+dq)
            end

            if GetColumnSize() = 1
                GoodnessOfFit(newFrame)
            else
                TestOfIndependence(newFrame)
            end        
            i = i + 1
        end
    end

    /*
        This action represents a goodness of fit chi-squared test on a selected columns of data.
        It calculates the observed values by counting the frequencies of unique items.
        It then calculates the expected counts (expecting an equal distribution) and compares 
        the two to get the x2 value.

        H0: The population fits a uniform distribution.
        Ha: The population does not fit a uniform distribution.

        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareCounts
    
        DataFrame frame
        frame:Load("data.csv")
        frame:AddSelectedColumns(0)
    
        CompareCounts compare = frame:CompareSelectedCounts()
        output compare:GetSummary()
    */
    action GoodnessOfFit(DataFrame frame)
        goodnessOfFit = true
        integer i = 0
        repeat while i < GetColumnSize()
            DataFrame observed = CalculateObserved(frame:GetColumn(GetColumn(i)))
            DataFrame expected = CalculateExpectedFromObserved(observed)
            integer rows = observed:GetColumn(0):GetSize()
            integer cols = observed:GetColumns():GetSize()
            number x2 = ChiSquare(observed:GetColumn(1), expected:GetColumn(1))  
            number df = (rows-1)*(cols-1)
            distribution:Setup(df)
            number p = 1.0 - distribution:CumulativeDistribution(x2)
    
            text factor = ""
            text variable = frame:GetColumn(GetColumn(i)):GetHeader()
            text resultKey = frame:GetColumn(GetColumn(i)):GetHeader()
            if GetFactorSize() > 0 and frame:GetColumn(GetFactor(0)):GetSize() > 0
                factor = frame:GetColumn(GetFactor(0)):GetAsText(0)+" "+frame:GetColumn(GetFactor(0)):GetHeader()
                resultKey = frame:GetColumn(GetFactor(0)):GetAsText(0) + " : " + resultKey
            end
            if not results:HasKey(resultKey)
                CompareCountsResult result
                result:SetObserved(observed)
                result:SetExpected(expected)
                result:SetResiduals(CalculateResiduals(observed, expected))
                result:SetDegreesOfFreedom(df)
                result:SetTestStatistic(x2)
                result:SetProbabilityValue(p)
                result:SetGoodnessOfFit(true)
                result:SetVariable1(variable)
                if factor not= ""
                    result:SetFactor(factor)
                end
                result:SetFormalTestName("Pearson's Chi-Squared Goodness of Fit Test")
                result:SetSampleSize(frame:GetColumn(GetColumn(i)):GetSize())
                result:AddColumn(i)
                results:Add(resultKey, result)
                indexResults:Add(""+GetColumn(i), result)
            end 
            i = i + 1
        end
    end

    /*
        This action represents a goodness of fit chi-squared test on one or more columns of data.
        For each column, it calculates the observed values by counting the frequencies of unique items.
        Then it compares the observed with the user-supplied expected percentages.
        The percentages must add up to 1.0, and there must be a percent for each category.

        H0: The population fits the given distribution.
        Ha: The population does not fit the given distribution.

        Attribute: Returns the CompareCountsResult between a column and a given expected percent. 
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareCounts
    
        DataFrame frame
        frame:Load("Data/Data.csv")
        frame:AddSelectedColumns("smoker")

        NumberColumn percent
        percent:Add(0.4)
        percent:Add(0.6)

        CompareCounts compare
        frame:GetSelection():CopyTo(cast(ColumnInput, compare))
        compare:GoodnessOfFitAgainstExpectedPercents(frame, percent)
        compare:GetSummary()
    */
    action GoodnessOfFitAgainstExpectedPercents(DataFrame frame, DataFrameColumn percents)
        if not percents:IsNumberColumn()
            alert("Expected percents must be a number column. Example: 0.5")
        else
            Summarize checkPercents
            checkPercents:Calculate(percents)
            if checkPercents:GetSum() not= 1.0
                alert("Expected percents must add up to 1.0")
            end
        end
        goodnessOfFit = true
        integer i = 0
        repeat while i < GetColumnSize()
            DataFrame observed = CalculateObserved(frame:GetColumn(GetColumn(i)))
            DataFrame percentFrame
            percentFrame:AddColumn(observed:GetColumn(0):Copy())
            percentFrame:AddColumn(percents)
            DataFrame expected = CalculateExpectedFromPercentOfTotal(observed, percentFrame)
            integer rows = observed:GetColumn(0):GetSize()
            integer cols = observed:GetColumns():GetSize()
            number x2 = ChiSquare(observed:GetColumn(1), expected:GetColumn(1))  
            number df = (rows-1)*(cols-1)
            distribution:Setup(df)
            number p = 1.0 - distribution:CumulativeDistribution(x2)
    
            text resultKey = frame:GetColumn(GetColumn(i)):GetHeader()
            if GetFactorSize() > 0 and frame:GetColumn(GetFactor(0)):GetSize() > 0
                resultKey = frame:GetColumn(GetFactor(0)):GetAsText(0) + ", " + resultKey
            end
            if not results:HasKey(resultKey)
                CompareCountsResult result
                result:SetObserved(observed)
                result:SetExpected(expected)
                result:SetResiduals(CalculateResiduals(observed, expected))
                result:SetDegreesOfFreedom(df)
                result:SetTestStatistic(x2)
                result:SetProbabilityValue(p)
                result:SetFormalTestName("Pearson's Chi-Squared Goodness of Fit Test")
                result:AddColumn(i)
                results:Add(resultKey, result)
                indexResults:Add(""+GetColumn(i), result)
            else
                CompareCountsResult result = results:GetValue(resultKey)
                result:SetObserved(observed)
                result:SetExpected(expected)
                result:SetResiduals(CalculateResiduals(observed, expected))
                result:SetDegreesOfFreedom(df)
                result:SetCriticalValue(x2)
                result:SetProbabilityValue(p)
                indexResults:Set(""+GetColumn(i), result)
            end 
            i = i + 1
        end
    end

    /*
        This action represents a goodness of fit chi-squared test on one or more columns of data.
        For each column, it calculates the observed values by counting the frequencies of unique items.
        Then it compares the observed with the user-supplied expected percentages.
        The percentages must add up to 1.0, and there must be a percent for each category.

        H0: The population fits the given distribution.
        Ha: The population does not fit the given distribution.

        Attribute: Returns the CompareCountsResult between a column and a given expected percent. 
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareCounts
    
        DataFrame frame
        frame:Load("Data/Data.csv")
        frame:AddSelectedColumns("smoker")

        TextColumn category
        category:Add("yes")
        category:Add("no")

        NumberColumn percent
        percent:Add(0.4)
        percent:Add(0.6)

        DataFrame expected
        expected:AddColumn(category)
        expected:AddColumn(percent)

        CompareCounts compare
        frame:GetSelection():CopyTo(cast(ColumnInput, compare))
        compare:GoodnessOfFitAgainstExpectedPercents(frame, expected)
        compare:GetSummary()
    */
    action GoodnessOfFitAgainstExpectedPercents(DataFrame frame, DataFrame percents)
        if percents:GetColumns():GetSize() not= 2
            alert("Expected percents DataFrame must include a text column (for the category) and a number column (for the percent). Example: male, 0.5")
        else
            Summarize checkPercents
            checkPercents:Calculate(percents:GetColumn(1))
            if checkPercents:GetSum() not= 1.0
                alert("Expected percents must add up to 1.0")
            end
        end
        goodnessOfFit = true
        integer i = 0
        repeat while i < GetColumnSize()
            DataFrame observed = CalculateObservedToFollowGivenOrder(frame:GetColumn(GetColumn(i)), percents:GetColumn(0))
            DataFrame expected = CalculateExpectedFromPercentOfTotal(observed, percents)
            if observed:GetColumns():GetSize() > 0
                integer rows = observed:GetColumn(0):GetSize()
                integer cols = observed:GetColumns():GetSize()
                number x2 = ChiSquare(observed:GetColumn(1), expected:GetColumn(1))  
                number df = (rows-1)*(cols-1)
                distribution:Setup(df)
                number p = 1.0 - distribution:CumulativeDistribution(x2)
        
                text resultKey = frame:GetColumn(GetColumn(i)):GetHeader()
                if GetFactorSize() > 0 and frame:GetColumn(GetFactor(0)):GetSize() > 0
                    resultKey = frame:GetColumn(GetFactor(0)):GetAsText(0) + ", " + resultKey
                end
                if not results:HasKey(resultKey)
                    CompareCountsResult result
                    result:SetObserved(observed)
                    result:SetExpected(expected)
                    result:SetResiduals(CalculateResiduals(observed, expected))
                    result:SetDegreesOfFreedom(df)
                    result:SetCriticalValue(x2)
                    result:SetProbabilityValue(p)
                    result:SetFormalTestName("Pearson's Chi-Squared Goodness of Fit Test")
                    result:AddColumn(i)
                    results:Add(resultKey, result)
                    indexResults:Add(""+GetColumn(i), result)
                else
                    CompareCountsResult result = results:GetValue(resultKey)
                    result:SetObserved(observed)
                    result:SetExpected(expected)
                    result:SetResiduals(CalculateResiduals(observed, expected))
                    result:SetDegreesOfFreedom(df)
                    result:SetTestStatistic(x2)
                    result:SetProbabilityValue(p)
                    indexResults:Set(""+GetColumn(i), result)
                end 
            end
            i = i + 1
        end
    end

    /*
        This action represents a goodness of fit chi-squared test on a single column of data.
        It calculates the observed values by counting the frequencies of unique items.
        Then it compares the observed with the user-supplied expected counts.

        H0: The population fits the given distribution.
        Ha: The population does not fit the given distribution.

        Attribute: Returns the CompareCountsResult between a column and a given expected count. 
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareCounts
    
        DataFrame frame
        frame:Load("Data/Data.csv")
        frame:AddSelectedColumns("smoker")

        TextColumn category
        category:Add("yes")
        category:Add("no")

        NumberColumn count
        count:Add(60)
        count:Add(50)

        DataFrame expected
        expected:AddColumn(category)
        expected:AddColumn(count)

        CompareCounts compare
        frame:GetSelection():CopyTo(cast(ColumnInput, compare))
        compare:GoodnessOfFitAgainstExpectedCounts(frame, expected)
        compare:GetSummary()
    */
    action GoodnessOfFitAgainstExpectedCounts(DataFrame frame, DataFrame expected)
        if expected:GetColumns():GetSize() not= 2
            alert("Expected Counts DataFrame must include a text column (for the category) and a number column (for the count). Example: male, 400")
        end
        goodnessOfFit = true
        integer i = 0
        repeat while i < GetColumnSize()
            DataFrame observed = CalculateObservedToFollowGivenOrder(frame:GetColumn(GetColumn(i)), expected:GetColumn(0))
            integer rows = observed:GetColumn(0):GetSize()
            integer cols = observed:GetColumns():GetSize()
            number x2 = ChiSquare(observed:GetColumn(1), expected:GetColumn(1))  
            number df = (rows-1)*(cols-1)
            distribution:Setup(df)
            number p = 1.0 - distribution:CumulativeDistribution(x2)
    
            text resultKey = frame:GetColumn(GetColumn(i)):GetHeader()
            if GetFactorSize() > 0 and frame:GetColumn(GetFactor(0)):GetSize() > 0
                resultKey = frame:GetColumn(GetFactor(0)):GetAsText(0) + ", " + resultKey
            end
            if not results:HasKey(resultKey)
                CompareCountsResult result
                result:SetObserved(observed)
                result:SetExpected(expected)
                result:SetResiduals(CalculateResiduals(observed, expected))
                result:SetDegreesOfFreedom(df)
                result:SetTestStatistic(x2)
                result:SetProbabilityValue(p)
                result:SetFormalTestName("Pearson's Chi-Squared Goodness of Fit Test")
                result:AddColumn(i)
                results:Add(resultKey, result)
                indexResults:Add(""+GetColumn(i), result)
            end 
            i = i + 1
        end
    end

    /*
        This action represents a pairwise test of independence chi-squared test on two columns of data.
        It calculates the observed values by counting the frequencies of unique items.
        It then calculates the expected counts and compares the two to get the x2 value.

        H0: The two variables are independent.
        Ha: The two variables are not independent.

        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareCounts
    
        DataFrame frame
        frame:Load("data.csv")
        frame:AddSelectedColumns(0)
        frame:AddSelectedColumns(1)
    
        CompareCounts compare = frame:CompareSelectedCounts()
        output compare:GetSummary()
    */
    action TestOfIndependence(DataFrame frame)
        integer i = 0
        repeat while i < GetColumnSize()
            integer j = i + 1
            repeat while j < GetColumnSize()
                DataFrameColumn left = frame:GetColumn(GetColumn(i))
                DataFrameColumn right = frame:GetColumn(GetColumn(j))
                DataFrame observed = CalculateObserved(left, right)
                DataFrame expected = CalculateExpectedFromObserved(observed)
                integer rows = observed:GetColumn(0):GetSize()
                integer cols = observed:GetColumns():GetSize()-1
                number x2 = ChiSquare(observed, expected)  
                number df = (rows-1)*(cols-1)
                distribution:Setup(df)
                number p = 1.0 - distribution:CumulativeDistribution(x2)
                
                text factor = ""
                text resultKey = left:GetHeader()+" & "+right:GetHeader()
                if GetFactorSize() > 0 and frame:GetColumn(GetFactor(0)):GetSize() > 0
                    factor = frame:GetColumn(GetFactor(0)):GetAsText(0)+" "+frame:GetColumn(GetFactor(0)):GetHeader()
                    resultKey = frame:GetColumn(GetFactor(0)):GetAsText(0) + " : " + resultKey
                end
                if not results:HasKey(resultKey)
                    CompareCountsResult result
                    result:SetObserved(observed)
                    result:SetExpected(expected)
                    result:SetResiduals(CalculateResiduals(observed, expected))
                    result:SetDegreesOfFreedom(df)
                    result:SetTestStatistic(x2)
                    result:SetProbabilityValue(p)
                    result:SetVariable1(left:GetHeader())
                    result:SetVariable2(right:GetHeader())
                    if factor not= ""
                        result:SetFactor(factor)
                    end
                    result:SetSampleSize(left:GetSize())
                    result:SetFormalTestName("Pearson's Chi-Squared Test of Independence")
                    if approximationWarning
                        result:SetApproximationWarningFlag(true)
                        approximationWarning = false //reset
                    end
                    result:AddColumn(i)
                    result:AddColumn(j)
                    results:Add(resultKey, result)
                    indexResults:Add(""+GetColumn(i)+" & "+GetColumn(j), result)
                end  
                j = j + 1
            end
            i = i + 1
        end
    end

    /*
        This action calculates the observed counts by simply counting the 
        frequency of each unique item in the column.

        Attribute: Returns the Observed Counts DataFrame.
    */
    private action CalculateObserved(DataFrameColumn column) returns DataFrame
        // Count unique items
        DataFrameColumn rowHeaders = column:Copy(true, true)
        HashTable<text,integer> hash = column:CalculateValueCountAsText() 
        integer rows = rowHeaders:GetSize()

        NumberColumn observedCount
        observedCount:SetHeader("count")
        integer i = 0
        repeat while i < rowHeaders:GetSize()
            if hash:HasKey(rowHeaders:GetAsText(i))
                observedCount:Add(hash:GetValue(rowHeaders:GetAsText(i)))
            end
            i = i + 1
        end

        DataFrame observed
        observed:AddColumn(rowHeaders)
        observed:AddColumn(observedCount)
        return observed  
    end

    /*
        This action calculates the observed counts the same way CalculateObserved() does.
        The difference here is the returned DataFrame Observed rowHeaders will be in the same 
        order that the user gave as an expected count or percent.
        This is necessary to ensure the correct observed values will be compared to the correct 
        expected values.

        Attribute: Returns the Observed Counts DataFrame.
    */
    private action CalculateObservedToFollowGivenOrder(DataFrameColumn column, DataFrameColumn expectedRowHeaders) returns DataFrame
        // Count unique items
        DataFrame observed
        DataFrameColumn rowHeaders = expectedRowHeaders:Copy()
        rowHeaders:SetHeader(column:GetHeader())
        HashTable<text,integer> hash = column:CalculateValueCountAsText() 
        integer rows = rowHeaders:GetSize()

        NumberColumn observedCount
        observedCount:SetHeader("count")
        integer i = 0
        repeat while i < rowHeaders:GetSize()
            if hash:HasKey(rowHeaders:GetAsText(i))
                observedCount:Add(hash:GetValue(rowHeaders:GetAsText(i)))
            else
                observedCount:Add(0)
            end
            i = i + 1
        end

        observed:AddColumn(rowHeaders)
        observed:AddColumn(observedCount)
        return observed  
    end

    /*
        This action calculates the observed counts across two variables.
        It does so by implementing the CrossTab calculation.

        Attribute: Returns the Observed Counts DataFrame.
    */
    private action CalculateObserved(DataFrameColumn column1, DataFrameColumn column2) returns DataFrame
        DataFrame observed
        observed:AddColumn(column1)
        observed:AddColumn(column2)

        observed:AddSelectedColumn(0)
        observed:AddSelectedColumn(1)

        return observed:CrossTab()
    end

    /*
        This action calculates the expected counts using the column and 
        row sums of the observed counts DataFrame.

        Attribute: Returns the Expected Counts DataFrame.
    */
    private action CalculateExpectedFromObserved(DataFrame observed) returns DataFrame
        DataFrame expected
        if observed:GetColumns():GetSize() > 0 and observed:GetColumn(0):GetSize() > 0
            expected:AddColumn(observed:GetColumn(0):Copy()) // First column is just row headers.

            DataFrame observedCopy = observed:Copy()
            observedCopy:RemoveColumnAt(0) //remove row headers for now
            Matrix matrix = observedCopy:ConvertToMatrix()

            number totalSum = matrix:GetTotal()
            Array <number> colSums
            integer i = 0
            repeat while i < matrix:GetColumns()
                colSums:Add(matrix:GetColumn(i):GetTotal())
                i = i + 1
            end

            Array <number> rowSums
            i = 0
            repeat while i < matrix:GetRows()
                rowSums:Add(matrix:GetRow(i):GetTotal())
                i = i + 1
            end

            i = 0
            repeat while i < colSums:GetSize()
                NumberColumn expect
                expect:SetHeader(observed:GetColumn(i+1):GetHeader())
                j = 0
                repeat while j < rowSums:GetSize()
                    number expectedValue = colSums:Get(i)*rowSums:Get(j)/totalSum
                    if goodnessOfFit
                        expectedValue = totalSum/rowSums:GetSize()
                    end
                    expect:Add(expectedValue)
                    j = j + 1
                end
                expected:AddColumn(expect)
                i = i + 1
            end
        end
        return expected
    end

    /*
        This action calculates the expected counts using the user-provided 
        percentages of the total.

        Attribute: Returns the Expected Counts DataFrame.
    */
    private action CalculateExpectedFromPercentOfTotal(DataFrame observed, DataFrame percents) returns DataFrame
        DataFrame expected
        if observed:GetColumns():GetSize() > 0 and observed:GetColumn(0):GetSize() > 0
            expected:AddColumn(observed:GetColumn(0):Copy()) // First column is just row headers.
            integer cols = observed:GetColumns():GetSize()
            integer rows = observed:GetColumn(0):GetSize()

            DataFrame observedCopy = observed:Copy()
            observedCopy:RemoveColumnAt(0) //remove row headers for now
            Matrix matrix = observedCopy:ConvertToMatrix()

            number totalSum = matrix:GetTotal()

            i = 1
            repeat while i < cols
                NumberColumn expect
                expect:SetHeader(observed:GetColumn(i):GetHeader())
                j = 0
                repeat while j < rows
                    number expectedValue = 0
                    if j < percents:GetColumn(i):GetSize()
                        expectedValue = totalSum*percents:GetColumn(i):GetAsNumber(j)
                    else
                        alert("You only gave "+ percents:GetColumn(i):GetSize() + " percent values but there are "+ (j+1) +" observed categories.")
                    end
                    expect:Add(expectedValue)
                    j = j + 1
                end
                // Checking for left over % values... meaning the user gave too many
                if j < percents:GetColumn(i):GetSize()
                    alert("You gave "+ percents:GetColumn(i):GetSize() + " percent values but there are only "+ j +" observed categories.")
                end
                expected:AddColumn(expect)
                i = i + 1
            end
        end
        return expected
    end

    // Pearson residuals (observed - expected) / sqrt(expected)
    private action CalculateResiduals(DataFrame observed, DataFrame expected) returns DataFrame
        DataFrame residuals
        if observed:GetColumns():GetSize() > 0 
            residuals:AddColumn(observed:GetColumn(0):Copy()) // First column is just row headers.
        end
        integer i = 1 //skip row headers
        repeat while i < observed:GetColumns():GetSize()
            DataFrameColumn oCol = observed:GetColumn(i)
            DataFrameColumn eCol = expected:GetColumn(i)
            NumberColumn res
            res:SetHeader(oCol:GetHeader())
            integer j = 0 
            repeat while j < oCol:GetSize() and  j < eCol:GetSize()
                if eCol:GetAsNumber(j) > 0
                    res:Add((oCol:GetAsNumber(j) - eCol:GetAsNumber(j)) / math:SquareRoot(eCol:GetAsNumber(j)))
                else
                    alert("The expected values cannot be 0")
                end
                j = j + 1 
            end
            residuals:AddColumn(res)
            i = i + 1 
        end

        return residuals
    end

    /*
        This action compares two number columns (observed and expected)
        and calculates the X-squared critical value / test statistic.

        Attribute: Returns the chi-squared test statistic.
    */

    private action ChiSquare(DataFrameColumn observed, DataFrameColumn expected) returns number
        if observed = undefined
            alert("Observed column is undefined.")
        end
        if expected = undefined
            alert("Expected column is undefined.")
        end

        if observed:GetSize() not= expected:GetSize()
            alert("Observed and Expected must be the same size.")
        end

        // Verify Observed. All values must be 0 or greater
        if not observed:IsNumberColumn() and not observed:IsIntegerColumn()
            alert("Observed must a numerical column.")
        end
        Summarize observedSummary
        observedSummary:Calculate(observed)
        if observedSummary:GetMinimum() < 0
            alert("Observed cannot have negative values.")
        end
        if observedSummary:GetMinimum() < 5
            approximationWarning = true
        end
        number observedSum = observedSummary:GetSum()

        // Verify Expected. All values must be greater than 0. Cannot be 0?
        if not expected:IsNumberColumn() and not expected:IsIntegerColumn()
            alert("Expected must a numerical column.")
        end
        Summarize expectedSummary
        expectedSummary:Calculate(expected)
        if expectedSummary:GetMinimum() <= 0
            alert("Expected must have positive values.")
        end
        number expectedSum = expectedSummary:GetSum()

        if observedSum = 0 or expectedSum = 0
            alert("Counts cannot be all zeros")
        end

        //If sums are different, set a weight
        boolean unequalCounts = false
        number weight = 0.0
        if observedSum not= expectedSum
            unequalCounts = true
            weight = math:SquareRoot(observedSum / expectedSum)
        end

        number ratio = 1.0        
        boolean rescale = false      
        if (math:AbsoluteValue(expectedSum - observedSum) > 10.0e-6)
            ratio = observedSum / expectedSum
            rescale = true
        end
        number sumSquared = 0
        integer i = 0
        repeat while i < observed:GetSize()
            if rescale
                number dev = observed:GetAsNumber(i) - ratio * expected:GetAsNumber(i)
                if unequalCounts
                    dev = (observed:GetAsNumber(i)/weight) - ratio * (expected:GetAsNumber(i)*weight)
                end
                sumSquared = sumSquared + (dev * dev / (ratio * expected:GetAsNumber(i)))
            else
                number dev = observed:GetAsNumber(i) - expected:GetAsNumber(i)
                if unequalCounts
                    dev = (observed:GetAsNumber(i)/weight) - (expected:GetAsNumber(i)*weight)
                end
                sumSquared = sumSquared + (dev * dev / expected:GetAsNumber(i))
            end
            i = i + 1
        end
    
        return sumSquared
    end

    /*
        This action compares two contingency tables (observed and expected) in the 
        form of DataFrames and calculates the X-squared critical value / test statistic.

        Attribute: Returns the chi-squared test statistic.
    */
    private action ChiSquare(DataFrame observed, DataFrame expected) returns number 
        if observed = undefined
            alert("Observed dataframe is undefined.")
        end
        if expected = undefined
            alert("Expected dataframe is undefined.")
        end

        if observed:GetSize() not= expected:GetSize()
            alert("Observed and Expected must be the same size.")
        end

        number sumSquared = 0
        integer i = 1 // First column is row headers
        repeat while i < observed:GetColumns():GetSize() and i < expected:GetColumns():GetSize()
            DataFrameColumn observe = observed:GetColumn(i)
            DataFrameColumn expect = expected:GetColumn(i)
            // Verify Observed.
            if not observe:IsNumberColumn() and not observe:IsIntegerColumn()
                alert("Observed must a numerical column.")
            end
    
            // Verify Expected.
            if not expect:IsNumberColumn() and not expect:IsIntegerColumn()
                alert("Expected must a numerical column.")
            end

            integer j = 0
            repeat while j < observe:GetSize() and j < expect:GetSize()
                if observe:GetAsNumber(j) < 5 and not approximationWarning
                    approximationWarning = true
                end
                number dev = observe:GetAsNumber(j) - expect:GetAsNumber(j)
                sumSquared = sumSquared + (dev * dev / expect:GetAsNumber(j))
                j = j + 1
            end
            i = i + 1
        end
        return sumSquared
    end

    /*
        This returns the probability if only one result exists.

        Attribute: Returns the P-Value. 
    */
    action GetProbabilityValue returns number
        return GetResult():GetProbabilityValue()
    end

    /*
        This returns the degrees of freedom if only one result exists.

        Attribute: Returns the Degrees of Freedom. 
    */
    action GetDegreesOfFreedom returns number
        return GetResult():GetDegreesOfFreedom()
    end

    /*
        This returns the x2 test statistic if only one result exists.

        Attribute: Returns the x2 test statistic. 
    */
    action GetTestStatistic returns number
        return GetResult():GetTestStatistic()
    end


    /*
        This returns the observed frame if only one result exists.

        Attribute: Returns the observed frame. 
    */
    action GetObserved returns DataFrame
        return GetResult():GetObserved()
    end

    /*
        This returns the expected frame if only one result exists.

        Attribute: Returns the expected frame. 
    */
    action GetExpected returns DataFrame
        return GetResult():GetExpected()
    end

    /*
        This returns the residuals frame if only one result exists.

        Attribute: Returns the residuals frame. 
    */
    action GetResiduals returns DataFrame
        return GetResult():GetResiduals()
    end


    /*
        This returns a result if only one exists. If there are more than one, 
        this action returns undefined.

        Attribute: Returns the CompareCountsResult. 
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareCounts
    
        DataFrame frame
        frame:Load("Data/Data.csv")
        frame:AddSelectedColumns("region")
        CompareCounts compare = frame:CompareSelectedCounts()
        
        CompareCountsResult result = compare:GetResult()
    */
    action GetResult returns CompareCountsResult
        if results:GetSize() = 1
            return results:GetValueIterator():Next()
        else
            alert("There is more than one test result, either specify which result or use GetResults() for an array of all results")
        end
    end

    /*
        This returns a result on one particular column. If no such result exists, 
        this action returns undefined.

        Attribute: Returns the CompareCountsResult for one group. 
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareCounts
    
        DataFrame frame
        frame:Load("Data/Data.csv")
        frame:AddSelectedColumns("region")
        CompareCounts compare = frame:CompareSelectedCounts()
        
        CompareCountsResult result = compare:GetResult("region")
    */
    action GetResult(text columnName) returns CompareCountsResult
        if results:HasKey(columnName)
            return results:GetValue(columnName)
        else
            alert("There are no test results with the column " + columnName)
        end
    end

    /*
        This returns a result on one particular column. If no such result exists, 
        this action returns undefined.

        Attribute: Returns the CompareCountsResult for one group. 
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareCounts
    
        DataFrame frame
        frame:Load("Data/Data.csv")
        frame:AddSelectedColumns(0)
        CompareCounts compare = frame:CompareSelectedCounts()
        
        CompareCountsResult result = compare:GetResult(0)
    */
    action GetResult(integer columnIndex) returns CompareCountsResult
        if indexResults:HasKey(""+columnIndex)
            return indexResults:GetValue(""+columnIndex)
        else
            alert("There are no test results with the column index " + columnIndex)
        end
    end

    /*
        This returns a result between two particular columns. If no such result exists, 
        this action returns undefined.

        Attribute: Returns the CompareCountsResult between two groups. 
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareCounts
    
        DataFrame frame
        frame:Load("Data/Data.csv")
        frame:AddSelectedColumns("region")
        frame:AddSelectedColumns("age")
        frame:AddSelectedColumns("bmi")
        CompareCounts compare = frame:CompareSelectedCounts()
        
        CompareCountsResult result = compare:GetResult("age", "region")
    */
    action GetResult(text column1Name, text column2Name) returns CompareCountsResult
        text hash1 = column1Name + " & " + column2Name
        text hash2 = column2Name + " & " + column1Name
        if results:HasKey(hash1)
            return results:GetValue(hash1)
        elseif results:HasKey(hash2)
            return results:GetValue(hash2)
        else
            alert("There are no test results with the columns " + hash1)
        end
    end

    /*
        This returns a result between two particular columns. If no such result exists, 
        this action returns undefined.

        Attribute: Returns the CompareCountsResult between two groups. 
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareCounts
    
        DataFrame frame
        frame:Load("Data/Data.csv")
        frame:AddSelectedColumns(0)
        frame:AddSelectedColumns(1)
        frame:AddSelectedColumns(2)
        CompareCounts compare = frame:CompareSelectedCounts()
        
        CompareCountsResult result = compare:GetResult(0, 1)
    */
    action GetResult(integer column1Index, integer column2Index) returns CompareCountsResult
        text hash1 = "" + column1Index + " & " + column2Index
        text hash2 = "" + column2Index + " & " + column1Index
        if indexResults:HasKey(hash1)
            return indexResults:GetValue(hash1)
        elseif indexResults:HasKey(hash2)
            return indexResults:GetValue(hash2)
        else
            alert("There are no test results with the column indices " + hash1)
        end
    end

    /*
        This returns the results between all computed columns.

        Attribute: Returns the CompareCountsResults. 
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareCounts
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CompareCounts compare
        compare:AddColumn(0)
        compare:AddColumn(1)
        compare:AddColumn(2)
        frame:Calculate(compare)
        
        Array<CompareCountsResult> results = compare:GetResults()
    */
    action GetResults returns Array<CompareCountsResult>
        return results:CopyToValueArray()
    end

    /*
        This action summarizes the results and lists them informally.
    */
    action GetSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        Iterator<CompareCountsResult> i = results:GetValueIterator()
        CompareCountsResult result 
        repeat while i:HasNext()
            result = i:Next()

            summary = summary + lf
            summary = summary + result:GetSummary()
            summary = summary + lf
        end

        return summary
    end

    /*
        This action summarizes the results and places them into formal academic language, in 
        APA format.

        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf
    */
    action GetFormalSummary returns text
        StatisticsFormatting format = GetStatisticalFormatting()
        text summary = ""
        text lf = summary:GetLineFeed()
        Iterator<CompareCountsResult> i = results:GetValueIterator()
        CompareCountsResult result 
        repeat while i:HasNext()
            result = i:Next()
            result:SetFormat(format)

            summary = summary + lf
            summary = summary + result:GetFormalSummary()
            summary = summary + lf
        end

        return summary
    end
end