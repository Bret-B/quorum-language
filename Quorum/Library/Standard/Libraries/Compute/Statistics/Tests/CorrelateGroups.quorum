package Libraries.Compute.Statistics.Tests

use Libraries.Compute.Statistics.DataFrameCalculation
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Calculations.Mean
use Libraries.Compute.Statistics.Calculations.Variance
use Libraries.Compute.Math
use Libraries.Compute.Statistics.Distributions.HeavyTailNormalDistribution
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Reporting.CorrelateGroupsResult
use Libraries.Containers.HashTable
use Libraries.Containers.Iterator
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Reporting.StatisticsFormatting
use Libraries.Compute.Statistics.Inputs.FactorInput

/*
    This class implements a Pearson Correlation Coefficient. For more information, see the 
    wikipedia page: https://en.wikipedia.org/wiki/Pearson_correlation_coefficient


    There are two ways to use this class. First, if we want to correlate two groups, 
    the class will automatically detect this case and we can call actions like 
    GetCorrelation, which will return that case. If we want to compare more than two groups, 
    these actions will throw errors and we will be requested to either iterate through 
    the results or two call the corresponding GetCorrelation(leftIndex, rightIndex) actions.

    Attribute: Author Andreas Stefik
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Tests.CorrelateGroups

    DataFrame frame
    frame:Load("Data/Data.csv")

    CorrelateGroups correlate
    correlate:Add(0)
    correlate:Add(1)
    frame:Calculate(correlate)
    
    output correlate:GetCorrelation()
*/
class CorrelateGroups is DataFrameCalculation, StatisticalTest, ColumnInput, FactorInput
    /* The distribution used to calculate the p-value from the t and df values.*/
    HeavyTailNormalDistribution distribution

    /* This stores a hash of all of the results. */
    HashTable<text, CorrelateGroupsResult> results        // Used to find the result by column or pair of columns.        
    HashTable<text, CorrelateGroupsResult> indexResults   // Used to find the result by index or pair of indices.

    Math math

    action Calculate(DataFrame frame) 
        if GetColumnSize() < 2
            alert("I cannot correlate less than two groups.")
        end

        /* 
            With this test we want to make sure there are no undefined values.
            Since there are several ways to call this action, let's empty and reload 
            the selected columns here to ensure we remove all of the undesired rows.

            This is necessary since the mean and variance of each column is calculated 
            independently and these values impact the results of this test.
        */
        frame:EmptySelectedColumns()
        i = 0
        repeat while i < GetColumnSize()
            frame:AddSelectedColumn(GetColumn(i))
            i = i + 1
        end
        DataFrame cleanFrame = frame:RemoveUndefinedRowsFromSelectedColumns()

        if GetFactorSize() > 0
            if GetFactorSize() = 1
                CalculateByFactor(cleanFrame) // Separate and run each based on factor
            else
                alert("Only one factor allowed right now.")
            end
        else
            CalculateCorrelation(cleanFrame)
        end
    end

    /*
        This action takes a DataFrame and a DataFrameColumn (factor) and separates that frame 
        into smaller DataFrames. One DataFrame for each unique item in the selected factor.
    */
    private action CalculateByFactor(DataFrame frame) 
        DataFrameColumn factor = frame:GetColumn(GetFactor(0)):Copy(true,true)
        integer i = 0
        repeat while i < factor:GetSize()
            text header = factor:GetHeader()
            text dq = header:GetDoubleQuote()
            DataFrame newFrame     

            if factor:IsNumberColumn() or factor:IsIntegerColumn()
                newFrame = frame:Copy(header+"="+factor:GetAsNumber(i))
            elseif factor:IsDateTimeColumn()
                alert("Dataframe factor by datetime doesn't seem to work right now.")
                //newFrame = frame:Copy(header+"="+factor:GetAsDateTime(i))
            elseif factor:IsBooleanColumn()
                newFrame = frame:Copy(header+"="+factor:GetAsBoolean(i))
            else
                newFrame = frame:Copy(header+"="+dq+factor:GetAsText(i)+dq)
            end

            CalculateCorrelation(newFrame)
            i = i + 1
        end
    end

    /* This action calculates the CorrelateGroupsResult for each set of two selected column combinations in the frame. */
    private action CalculateCorrelation(DataFrame frame)
        i = 0
        repeat while i < GetColumnSize() and GetColumn(i) < frame:GetColumns():GetSize()
            j = i + 1
            repeat while j < GetColumnSize() and GetColumn(j) < frame:GetColumns():GetSize()
                DataFrameColumn left = frame:GetColumn(GetColumn(i))
                DataFrameColumn right = frame:GetColumn(GetColumn(j))

                if left = undefined or right = undefined
                    alert("Column is undefined.")
                end
        
                if not left:IsNumberColumn() and not left:IsIntegerColumn()
                    alert("Columns must be numerical. " + left:GetHeader() + " is not a numerical column.")
                end
        
                if not right:IsNumberColumn() and not right:IsIntegerColumn()
                    alert("Columns must be numerical. " + right:GetHeader() + " is not a numerical column.")
                end
        
                if left:GetSize() not= right:GetSize()
                    alert("Columns must be equal sizes. " + left:GetHeader() + " and " + right:GetHeader() + " are not equal.")
                end

                if left:GetSize() < 2 or right:GetSize() < 2
                    alert("Columns must have 2 or more entries. Not enough data for correlation to be calculated.")
                end

                Mean meanLeft
                Variance varianceLeft
                left:Calculate(meanLeft)
                varianceLeft:SetMean(meanLeft:GetMean())
                left:Calculate(varianceLeft)
        
                Mean meanRight
                Variance varianceRight
                right:Calculate(meanRight)
                varianceRight:SetMean(meanRight:GetMean())
                right:Calculate(varianceRight)
        
                number n = left:GetSize()
                number df = n - 2
                number r = CalculateCorrelation(left, meanLeft, varianceLeft, right, meanRight, varianceRight)
                number t = r * math:SquareRoot((n - 2.0) / (1 - r * r))
        
                distribution:Setup(df)
                number absoluteValueT = math:AbsoluteValue(t)
                number p = 2.0 * distribution:CumulativeDistribution(-absoluteValueT)

                text factor = ""
                text resultKey = left:GetHeader()+" & "+right:GetHeader()
                if GetFactorSize() > 0 and frame:GetColumn(GetFactor(0)):GetSize() > 0
                    factor = frame:GetColumn(GetFactor(0)):GetAsText(0)+" "+frame:GetColumn(GetFactor(0)):GetHeader()
                    resultKey = frame:GetColumn(GetFactor(0)):GetAsText(0) + " : " + resultKey
                end
                if not results:HasKey(resultKey)
                    CorrelateGroupsResult result
                    result:SetCorrelation(r)
                    result:SetProbabilityValue(p)
                    result:SetDegreesOfFreedom(df)
                    result:SetTestStatistic(t)
                    result:SetVariable1(left:GetHeader())
                    result:SetVariable2(right:GetHeader())
                    result:SetFormalTestName("Pearson's Correlation")
                    if factor not= ""
                        result:SetFactor(factor)
                    end
                    result:AddColumn(i)
                    result:AddColumn(j)
                    results:Add(resultKey, result)
                    indexResults:Add(""+GetColumn(i)+" & "+GetColumn(j), result)
                end 

                j = j + 1
            end
            i = i + 1
        end
    end

    /* This action calculates the actual correlation (r) value. */
    private action CalculateCorrelation(
        DataFrameColumn left, Mean meanLeft, Variance varianceLeft,
        DataFrameColumn right, Mean meanRight, Variance varianceRight) returns number
        number ml = meanLeft:GetMean()
        number sdl = varianceLeft:GetVariance()
        sdl = math:SquareRoot(sdl)

        number mr = meanRight:GetMean()
        number sdr = varianceRight:GetVariance()
        sdr = math:SquareRoot(sdr)

        //this needs to be checked for undefined values still
        //but it's a start
        number sum = 0
        i = 0
        repeat while i < left:GetSize()
            number valueLeft = left:GetAsNumber(i)
            number middleLeft = valueLeft - ml
            middleLeft = middleLeft / sdl

            number valueRight = right:GetAsNumber(i)
            number middleRight = valueRight - mr
            middleRight = middleRight / sdr

            sum = sum + (middleLeft * middleRight)
            i = i + 1
        end

        number result = 1.0 / (left:GetSize() - 1.0)
        result = result * sum

        return result
    end

    /*
        This returns an Iterator object of all results calculated. If there happened to only be 
        two correlations calculated, this iterator will still contain the one correlation.

        Attribute: Returns the results for the correlation. 

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
        use Libraries.Containers.Iterator
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        frame:Calculate(correlate)
        
        Iterator<CorrelateGroupsResult> iterator = correlate:GetResultIterator()
    */
    action GetResultIterator returns Iterator<CorrelateGroupsResult>
        return results:GetValueIterator()
    end

    /*
        Obtains the raw correlation, typically named "r" in statistics. This calculation only 
        returns a result in the case where the left and right indexes are valid.
        Attribute: Parameter leftIndex the first group
        Attribute: Parameter rightIndex the second group
        Attribute: Returns the correlation between two groups. 

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        frame:Calculate(correlate)
        
        output correlate:GetCorrelation(0, 1)
    */
    action GetCorrelation(integer leftIndex, integer rightIndex) returns number
        return GetResult(leftIndex, rightIndex):GetCorrelation()
    end

    /*
        Obtains the raw degrees of freedom. This calculation only 
        returns a result in the case where the left and right indexes are valid.

        Attribute: Parameter leftIndex the first group
        Attribute: Parameter rightIndex the second group

        Attribute: Returns the degrees of freedom. 

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        frame:Calculate(correlate)
        
        output correlate:GetDegreesOfFreedom(0, 1)
    */
    action GetDegreesOfFreedom(integer leftIndex, integer rightIndex) returns number
        return GetResult(leftIndex, rightIndex):GetDegreesOfFreedom()
    end

    /*
        Obtains the raw probability value (p in statistics). This calculation only 
        returns a result in the case where the left and right indexes are valid.

        Attribute: Parameter leftIndex the first group
        Attribute: Parameter rightIndex the second group

        Attribute: Returns the probability. 

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        frame:Calculate(correlate)
        
        output correlate:GetProbabilityValue(0, 1)
    */
    action GetProbabilityValue(integer leftIndex, integer rightIndex) returns number
        return GetResult(leftIndex, rightIndex):GetProbabilityValue()
    end

    /*
        This returns the probability value if only one result exists.

        Attribute: Returns the probability value. 

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        frame:Calculate(correlate)
        
        output correlate:GetProbabilityValue()
    */
    action GetProbabilityValue returns number
        return GetResult():GetProbabilityValue()
    end

    /*
        This returns the degrees of freedom if only one result exists.

        Attribute: Returns the Degrees of Freedom. 

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        frame:Calculate(correlate)
        
        output correlate:GetDegreesOfFreedom()
    */
    action GetDegreesOfFreedom returns number
        return GetResult():GetDegreesOfFreedom()
    end

    /*
        This returns the t test statistic if only one result exists.

        Attribute: Returns the t test statistic. 

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        frame:Calculate(correlate)
        
        output correlate:GetTestStatistic()
    */
    action GetTestStatistic returns number
        return GetResult():GetTestStatistic()
    end

    /*
        This returns the correlation value (r) if only one result exists.

        Attribute: Returns the correlation value. 

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        frame:Calculate(correlate)
        
        output correlate:GetCorrelation()
    */
    action GetCorrelation returns number
        return GetResult():GetCorrelation()
    end

    /*
        This returns a result if only one exists. If there are more than one, 
        this action returns undefined.

        Attribute: Returns the CorrelateGroupsResult. 
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
        frame:AddSelectedColumns("age")
        frame:AddSelectedColumns("bmi")
        CorrelateGroups compare = frame:CorrelateSelectedColumns()
        
        CorrelateGroupsResult result = compare:GetResult()
    */
    action GetResult returns CorrelateGroupsResult
        if results:GetSize() = 1
            return results:GetValueIterator():Next()
        else
            alert("There is more than one test result, either specify which result or use GetResults() for an array of all results")
        end
    end

    /*
        This returns a result between two particular columns. If no such result exists, 
        this action returns undefined.

        Attribute: Returns the CorrelateGroupsResult between two groups. 
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
        frame:AddSelectedColumns("age")
        frame:AddSelectedColumns("bmi")
        CorrelateGroups compare = frame:CorrelateSelectedColumns()
        
        CorrelateGroupsResult result = compare:GetResult("age", "region")
    */
    action GetResult(text column1Name, text column2Name) returns CorrelateGroupsResult
        text hash1 = column1Name + " & " + column2Name
        text hash2 = column2Name + " & " + column1Name
        if results:HasKey(hash1)
            return results:GetValue(hash1)
        elseif results:HasKey(hash2)
            return results:GetValue(hash2)
        else
            alert("There are no test results with the columns " + hash1)
        end
    end

    /*
        This returns a result between two particular columns. If no such result exists, 
        this action returns undefined.

        Attribute: Returns the CorrelateGroupsResult between two groups. 
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
        frame:AddSelectedColumns(0)
        frame:AddSelectedColumns(1)
        frame:AddSelectedColumns(2)
        CorrelateGroups compare = frame:CorrelateSelectedColumns()
        
        CorrelateGroupsResult result = compare:GetResult(0, 1)
    */
    action GetResult(integer column1Index, integer column2Index) returns CorrelateGroupsResult
        text hash1 = "" + column1Index + " & " + column2Index
        text hash2 = "" + column2Index + " & " + column1Index
        if indexResults:HasKey(hash1)
            return indexResults:GetValue(hash1)
        elseif indexResults:HasKey(hash2)
            return indexResults:GetValue(hash2)
        else
            alert("There are no test results with the column indices " + hash1)
        end
    end

    /*
        This returns the results between all computed columns.

        Attribute: Returns the CorrelateGroupsResults. 
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups compare
        compare:AddColumn(0)
        compare:AddColumn(1)
        compare:AddColumn(2)
        frame:Calculate(compare)
        
        Array<CorrelateGroupsResult> results = compare:GetResults()
    */
    action GetResults returns Array<CorrelateGroupsResult>
        return results:CopyToValueArray()
    end

    /*
        This action summarizes the results and lists them informally.

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        frame:Calculate(correlate)
        
        output correlate:GetSummary()
    */
    action GetSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        Iterator<CorrelateGroupsResult> i = results:GetValueIterator()
        CorrelateGroupsResult result 
        repeat while i:HasNext()
            result = i:Next()

            summary = summary + lf
            summary = summary + result:GetSummary()
            summary = summary + lf
        end

        return summary
    end

    /*
        This action summarizes the results and places them into formal academic language, in 
        APA format.

        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        frame:Calculate(correlate)
        
        output correlate:GetFormalSummary()
    */
    action GetFormalSummary returns text
        StatisticsFormatting format = GetStatisticalFormatting()
        text summary = ""
        text lf = summary:GetLineFeed()
        Iterator<CorrelateGroupsResult> i = results:GetValueIterator()
        CorrelateGroupsResult result 
        repeat while i:HasNext()
            result = i:Next()
            result:SetFormat(format)

            summary = summary + lf
            summary = summary + result:GetFormalSummary()
            summary = summary + lf
        end

        return summary
    end
end