package Libraries.Compute.Statistics.Tests

use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Calculations.Mean
use Libraries.Compute.Statistics.Calculations.Variance
use Libraries.Compute.Statistics.Calculations.Correlation
use Libraries.Compute.Statistics.Distributions.HeavyTailNormalDistribution
use Libraries.Compute.Statistics.Reporting.CorrelateGroupsResult
use Libraries.Compute.Statistics.Transforms.ConvertColumnsToRanksTransform
use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Statistics.Columns.TextColumn

/*
    This class implements two tests:
    Parametric:
        Correlate2Groups is a Pearson Correlation Coefficient
        Measures linear relationship between two variables
        For more information: https://en.wikipedia.org/wiki/Pearson_correlation_coefficient

    Non-Parametric:
        Correlate2RankedGroups is a Spearman Correlation Coefficient
        Measures if two variables move in the same direction, but not at a constant rate
        For more information: https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient

    Attribute: Author Andreas Stefik, Hannah Williams
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Tests.CorrelateGroups

    DataFrame frame
    frame:Load("Data/Data.csv")

    CorrelateGroups correlate
    correlate:Add(0)
    correlate:Add(1)
    frame:Calculate(correlate)
    
    output correlate:GetCorrelation()
*/
class CorrelateGroups is StatisticalTest
    /* The distribution used to calculate the p-value.*/
    private HeavyTailNormalDistribution tdistribution
    private Array<CorrelateGroupsResult> results

    // USER CONTROLS
    boolean ranked = false 

    Math math

    action Calculate(DataFrame frame) 
        // If nothing is selected attempt to grab frame's selection.
        if GetColumnSize() = 0 
            if frame:GetSelection() not= undefined
                frame:GetSelection():CopyTo(cast(ColumnInput, me))
            end
        end
        if GetFactorSize() = 0 
            if frame:GetSelection() not= undefined 
                frame:GetSelection():CopyTo(cast(FactorInput, me))
            end
        end

        parent:StatisticalTest:RemoveUndefined(true)
        if GetFactorSize() = 0
            parent:StatisticalTest:Calculate(frame)
        else
            parent:StatisticalTest:CalculateWithFactor(frame)
        end
    end

    private action RunTest(DataFrame frame)
        if GetColumnSize() < 2
            alert("Must include at least two columns.")
        end

        if ranked
            Correlate2RankedGroups(frame)
        else
            Correlate2Groups(frame)
        end
    end

    /* 
        Pearson Correlation

        Null hypothesis: The groups are not correlated
        Alternative hypothesis: The groups are correlated

        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("data.csv")
    
        CorrelateGroups correlate
        correlate:AddColumn(0)
        correlate:AddColumn(1)
        correlate:Calculate(frame)
        output correlate:GetSummary()
    */
    action Correlate2Groups(DataFrame frame)
        if GetColumnSize() = 0 or GetFactorSize() > 0
            me:Calculate(frame)
        else
            i = 0
            repeat while i < GetColumnSize() and GetColumn(i) < frame:GetColumns():GetSize()
                j = i + 1
                repeat while j < GetColumnSize() and GetColumn(j) < frame:GetColumns():GetSize()
                    DataFrameColumn left = frame:GetColumn(GetColumn(i))
                    DataFrameColumn right = frame:GetColumn(GetColumn(j))
    
                    if left = undefined or right = undefined
                        alert("Column is undefined.")
                    end
            
                    if not left:IsNumberColumn() and not left:IsIntegerColumn()
                        alert("Columns must be numerical. " + left:GetHeader() + " is not a numerical column.")
                    end
            
                    if not right:IsNumberColumn() and not right:IsIntegerColumn()
                        alert("Columns must be numerical. " + right:GetHeader() + " is not a numerical column.")
                    end
            
                    if left:GetSize() not= right:GetSize()
                        alert("Columns must be equal sizes. " + left:GetHeader() + " and " + right:GetHeader() + " are not equal.")
                    end
    
                    if left:GetSize() < 2 or right:GetSize() < 2
                        alert("Columns must have 2 or more entries. Not enough data for correlation to be calculated.")
                    end
    
                    Mean meanLeft
                    Variance varianceLeft
                    left:Calculate(meanLeft)
                    varianceLeft:SetMean(meanLeft:GetMean())
                    left:Calculate(varianceLeft)
            
                    Mean meanRight
                    Variance varianceRight
                    right:Calculate(meanRight)
                    varianceRight:SetMean(meanRight:GetMean())
                    right:Calculate(varianceRight)
            
                    number n = left:GetSize()
                    number df = n - 2
                    number r = CalculateCorrelation(left, meanLeft, varianceLeft, right, meanRight, varianceRight)
                    number t = r * math:SquareRoot((n - 2.0) / (1 - r * r))
            
                    tdistribution:Setup(df)
                    number absoluteValueT = math:AbsoluteValue(t)
                    number p = 2.0 * tdistribution:CumulativeDistribution(-absoluteValueT)
    
                    CorrelateGroupsResult result
                    result:SetSignificanceLevel(GetSignificanceLevel())
                    result:SetFormat(GetStatisticalFormatting())
                    result:SetCorrelation(r)
                    result:SetEffectSize(r)
                    result:SetProbabilityValue(p)
                    result:SetDegreesOfFreedom(df)
                    result:SetTestStatistic(t)
                    result:SetFormalTestName("Pearson's Correlation")
                    result:SetFactor(GetFactorText())
                    result:SetGroups(left, right)
                    results:Add(result)
                    j = j + 1
                end
                i = i + 1
            end
        end
    end

    /* 
        Spearman Rank Correlation

        Null hypothesis: The groups are not correlated
        Alternative hypothesis: The groups are correlated

        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("data.csv")
    
        CorrelateGroups correlate
        correlate:AddColumn(0)
        correlate:AddColumn(1)
        correlate:Ranked(true)
        correlate:Calculate(frame)
        output correlate:GetSummary()
    */
    action Correlate2RankedGroups(DataFrame frame)
        if GetColumnSize() = 0 or GetFactorSize() > 0
            me:Calculate(frame)
        else
            ConvertColumnsToRanksTransform transform
            i = 0
            repeat while i < GetColumnSize()
                integer value = GetColumn(i)
                transform:AddColumn(value)
                i = i + 1
            end
            DataFrame newFrame = frame:Transform(transform)      
    
            i = 0
            repeat while i < GetColumnSize()
                j = i + 1
                repeat while j < GetColumnSize()
                    DataFrameColumn left = newFrame:GetColumn(i)
                    DataFrameColumn right = newFrame:GetColumn(j)
    
                    CorrelateGroups correlate
                    correlate:AddColumn(i)
                    correlate:AddColumn(j)
                    correlate:Calculate(newFrame)
    
                    CorrelateGroupsResult result = correlate:GetResult()
                    result:SetFormalTestName("Spearman's Rank Correlation")
                    result:Ranked(true)
                    results:Add(result)
                    j = j + 1
                end
                i = i + 1
            end
        end
    end

    /* This action calculates the actual correlation (r) value. */
    private action CalculateCorrelation(
        DataFrameColumn left, Mean meanLeft, Variance varianceLeft,
        DataFrameColumn right, Mean meanRight, Variance varianceRight) returns number
    
        Correlation cor
        cor:SetMean1(meanLeft:GetMean())
        cor:SetMean2(meanRight:GetMean())
        cor:SetVariance1(varianceLeft:GetVariance())
        cor:SetVariance2(varianceRight:GetVariance())
        cor:Calculate(left, right)

        return cor:GetCorrelation()
    end

    action Ranked returns boolean
        return ranked
    end

    action Ranked(boolean ranked)
        me:ranked = ranked
    end

    /*
        This returns the probability if only one result exists.

        Attribute: Returns the P-Value. 
    */
    action GetProbabilityValue returns number
        return GetResult():GetProbabilityValue()
    end

    /*
        This returns the probabilities of all results in a dataframe

        Attribute: Returns the probability frame
    */  
    action GetProbabilities returns DataFrame
        return GenerateResultDataFrame(false, true)        
    end

    /*
        This returns the degrees of freedom if only one result exists.

        Attribute: Returns the Degrees of Freedom. 
    */
    action GetDegreesOfFreedom returns number
        return GetResult():GetDegreesOfFreedom()
    end

    /*
        This returns the test statistic if only one result exists.

        Attribute: Returns the test statistic. 
    */
    action GetTestStatistic returns number
        return GetResult():GetTestStatistic()
    end

    /*
        This returns the correlation if only one result exists.

        Attribute: Returns the correlation 
    */
    action GetCorrelation returns number
        return GetResult():GetCorrelation()
    end

    /*
        This returns the correlations of all results in a dataframe

        Attribute: Returns the correlation frame
    */  
    action GetCorrelations returns DataFrame
        return GenerateResultDataFrame(true, false)        
    end

    /*
        This returns a result if only one exists.

        Attribute: Returns the CompareGroupsResult object
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")

        CorrelateGroups correlate
        correlate:AddColumn(0)
        correlate:AddColumn(1)
        correlate:Calculate(frame)
        
        CorrelateGroupsResult result = correlate:GetResult()
    */
    action GetResult returns CorrelateGroupsResult
        if results:GetSize() = 0
            alert("There are no results calculated")
        elseif results:GetSize() = 1
            return results:Get(0)
        else
            alert("There is more than one test result, use GetResults() for an array of all results")
        end
    end

    /*
        This returns the results between all computed columns.

        Attribute: Returns the CorrelateGroupsResults. 
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:AddColumn(0)
        correlate:AddColumn(1)
        correlate:AddColumn(2)
        frame:Calculate(correlate)
        
        Array<CorrelateGroupsResult> results = correlate:GetResults()
    */
    action GetResults returns Array<CorrelateGroupsResult>
        return results
    end

    /*
        This action summarizes the results and lists them informally.

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:AddColumn(0)
        correlate:AddColumn(1)
        frame:Calculate(correlate)
        
        output correlate:GetSummary()
    */
    action GetSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        i = 0
        CorrelateGroupsResult result 
        repeat while i < results:GetSize()
            result = results:Get(i)

            summary = summary + lf
            summary = summary + result:GetSummary()
            summary = summary + lf
            i = i + 1
        end
        return summary
    end

    /*
        Attribute: Returns a DataFrame of the important statistics of the test
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        correlate:Add(2)
        frame:Calculate(correlate)
        
        DataFrame result = correlate:GetSummaryDataFrame()
        result:Save("myresult.csv")
    */
    action GetSummaryDataFrame returns DataFrame
        if GetResults():GetSize() = 1
            return GetResult():GetSummaryDataFrame()
        end
        return GetMultipleTestSummaryDataFrame()
    end

    /*
        This action summarizes the results and places them into formal academic language, in APA format.
        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:AddColumn(0)
        correlate:AddColumn(1)
        frame:Calculate(correlate)
        
        output correlate:GetFormalSummary()
    */
    action GetFormalSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        i = 0
        CorrelateGroupsResult result 
        repeat while i < results:GetSize()
            result = results:Get(i)

            summary = summary + lf
            summary = summary + result:GetFormalSummary()
            summary = summary + lf
            i = i + 1
        end
        return summary
    end

    private action GetMultipleTestSummaryDataFrame returns DataFrame
        integer digits = GetStatisticalFormatting():GetSignificantDigits()

        TextColumn name
        TextColumn c1
        TextColumn c2
        NumberColumn r
        NumberColumn t
        NumberColumn df
        NumberColumn p
        NumberColumn ef  
        TextColumn apa

        t:SetHeader("Statistic (T)")
        c1:SetHeader("Group1")
        c2:SetHeader("Group2")
        df:SetHeader("Degrees Of Freedom (DF)")
        p:SetHeader("Probability (P)")
        apa:SetHeader("APA report")   
        r:SetHeader("Correlation (R)")

        i = 0
        repeat while i < GetResults():GetSize()
            CorrelateGroupsResult result = GetResults():Get(i)
            if i = 0
                name:SetHeader(result:GetFormalTestName()) 
            end
            if result:IsSignificant()
                name:Add("Failed")
            else
                name:Add("Passed")
            end
            t:Add(math:Round(result:GetTestStatistic(), digits))
            df:Add(math:Round(result:GetDegreesOfFreedom(), digits))
            p:Add(math:Round(result:GetProbabilityValue(), digits))
            apa:Add(result:GetFormalNumericalResult())
            r:Add(math:Round(result:GetCorrelation(), digits))
            if result:GetGroups():GetSize() = 2
                c1:Add(result:GetGroups():Get(0):GetHeader())
                c2:Add(result:GetGroups():Get(1):GetHeader())
            end
            if result:GetEffectSizeName() not= "" 
                if i = 0
                    ef:SetHeader("Effect Size (" + result:GetEffectSizeName() + ")")
                end
                ef:Add(math:Round(result:GetEffectSize(), digits))
            end
            i = i + 1
        end

        DataFrame table
        table:AddColumn(name)
        table:AddColumn(c1)
        table:AddColumn(c2)
        table:AddColumn(t)
        table:AddColumn(df)
        table:AddColumn(p)
        table:AddColumn(r)
        if ef:GetSize() > 0
            table:AddColumn(ef)
        end
        table:AddColumn(apa)
        return table
    end

    private action GenerateResultDataFrame(boolean correlation, boolean probability) returns DataFrame
        integer digits = GetStatisticalFormatting():GetSignificantDigits()
        DataFrame frame
        HashTable <text, integer> index
        integer nextIndex = 0
        TextColumn rowHeaders
        frame:AddColumn(rowHeaders)
        i = 0
        CorrelateGroupsResult result 
        repeat while i < results:GetSize()
            result = results:Get(i)
            if result:GetGroups():GetSize() = 2
                text grp1 = result:GetGroups():Get(0):GetHeader()
                text grp2 = result:GetGroups():Get(1):GetHeader()
                if not index:HasKey(grp1)
                    NumberColumn col1
                    col1:SetHeader(grp1)
                    col1:SetSize(results:GetSize())
                    rowHeaders:Add(grp1)
                    frame:AddColumn(col1)  
                    index:Add(grp1, nextIndex)
                    nextIndex = nextIndex + 1
                end
                if not index:HasKey(grp2)
                    NumberColumn col2
                    col2:SetHeader(grp2)
                    col2:SetSize(results:GetSize())
                    rowHeaders:Add(grp2)
                    frame:AddColumn(col2)  
                    index:Add(grp2, nextIndex)
                    nextIndex = nextIndex + 1
                end
                number value = 0
                if correlation
                    value = result:GetCorrelation()
                elseif probability
                    value = result:GetProbabilityValue()
                end
                frame:GetColumn(grp1):SetAsNumber(index:GetValue(grp1), 1.0)
                frame:GetColumn(grp2):SetAsNumber(index:GetValue(grp2), 1.0)

                frame:GetColumn(grp1):SetAsNumber(index:GetValue(grp2), math:Round(value, digits))
                frame:GetColumn(grp2):SetAsNumber(index:GetValue(grp1), math:Round(value, digits))
            end
            i = i + 1
        end
        if correlation
            rowHeaders:SetHeader("Correlation")
        elseif probability
            rowHeaders:SetHeader("Probability")
        end
        return frame:RemoveUndefinedRows()
    end
end