package Libraries.Compute.Statistics.Tests

use Libraries.Compute.Statistics.DataFrameCalculation
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Calculations.Mean
use Libraries.Compute.Statistics.Calculations.Variance
use Libraries.Compute.Math
use Libraries.Compute.Statistics.Distributions.HeavyTailNormalDistribution
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Reporting.CorrelateGroupsResult
use Libraries.Containers.HashTable
use Libraries.Containers.Iterator
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Reporting.StatisticsFormatting

/*
    This class implements a Pearson Correlation Coefficient. For more information, see the 
    wikipedia page: https://en.wikipedia.org/wiki/Pearson_correlation_coefficient


    There are two ways to use this class. First, if we want to correlate two groups, 
    the class will automatically detect this case and we can call actions like 
    GetCorrelation, which will return that case. If we want to compare more than two groups, 
    these actions will throw errors and we will be requested to either iterate through 
    the results or two call the corresponding GetCorrelation(leftIndex, rightIndex) actions.

    Attribute: Author Andreas Stefik
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Tests.CorrelateGroups

    DataFrame frame
    frame:Load("Data/Data.csv")

    CorrelateGroups correlate
    correlate:Add(0)
    correlate:Add(1)
    frame:Calculate(correlate)
    
    output correlate:GetCorrelation()
*/
class CorrelateGroups is DataFrameCalculation, StatisticalTest, ColumnInput
    /* The distribution used to calculate the p-value from the t-value and df values.*/
    HeavyTailNormalDistribution distribution

    /* A flag that just stores if this is only two groups. */
    boolean twoGroups = false

    /* If there are two groups, this stores the result for just that. */
    CorrelateGroupsResult twoGroupResult = undefined

    /* This stores a hash of all of the results. */
    HashTable<text, CorrelateGroupsResult> results

    /* This calculates a hash value for the results table. */
    private action HashCorrelationPosition(integer left, integer right) returns text
        return "" + left + ":" + right
    end

    action Calculate(DataFrame frame) 
        if GetColumnSize() < 2
            alert("I cannot correlate less than two groups.")
        end

        if GetColumnSize() = 2
            twoGroups = true
        end

        //find all combinations of the columns as tuples
        i = 0
        repeat while i < GetColumnSize() - 1
            integer leftIndex = GetColumn(i)
            j = i + 1
            repeat while j < GetColumnSize()
                integer rightIndex = GetColumn(j)
                CalculateCorrelation(leftIndex, rightIndex, frame)

                j = j + 1
            end
            i = i + 1
        end
    end

    /*
        This action calculates the correlation for two columns.

    */
    private action CalculateCorrelation(integer leftIndex, integer rightIndex, DataFrame frame)
        DataFrameColumn left = frame:GetColumn(leftIndex)
        DataFrameColumn right = frame:GetColumn(rightIndex)

        if left = undefined
            alert("Column " + leftIndex + " is undefined.")
        end

        if right = undefined
            alert("Column " + rightIndex + " is undefined.")
        end

        Mean meanLeft
        Variance varianceLeft
        left:Calculate(meanLeft)
        varianceLeft:SetMean(meanLeft:GetMean())
        left:Calculate(varianceLeft)

        Mean meanRight
        Variance varianceRight
        right:Calculate(meanRight)

        varianceRight:SetMean(meanRight:GetMean())
        right:Calculate(varianceRight)


        CorrelateGroupsResult result
        result:SetLeftIndex(leftIndex)
        result:SetRightIndex(rightIndex)

        text hash = HashCorrelationPosition(leftIndex, rightIndex)

        Math math
        number n = left:GetSize()
        number df = n - 2
        number r = CalculateCorrelation(left, meanLeft, varianceLeft, right, meanRight, varianceRight)
        number t = r * math:SquareRoot((n - 2.0) / (1 - r * r))

        
        distribution:Setup(df)
        number absoluteValueT = math:AbsoluteValue(t)
        number p = 2.0 * distribution:CumulativeDistribution(-absoluteValueT)
        result:SetCorrelation(r)
        result:SetProbabilityValue(p)
        result:SetDegreesOfFreedom(df)
        result:SetCriticalValue(t)

        if twoGroups
            twoGroupResult = result
        end

        results:Add(hash, result)
    end

    /* This action calculates the actual correlation. */
    private action CalculateCorrelation(
        DataFrameColumn left, Mean meanLeft, Variance varianceLeft,
        DataFrameColumn right, Mean meanRight, Variance varianceRight) returns number
        number ml = meanLeft:GetMean()
        number sdl = varianceLeft:GetVariance()
        Math math
        sdl = math:SquareRoot(sdl)

        number mr = meanRight:GetMean()
        number sdr = varianceRight:GetVariance()
        sdr = math:SquareRoot(sdr)

        //this needs to be checked for undefined values still
        //but it's a start
        number sum = 0
        i = 0
        repeat while i < left:GetSize()
            number valueLeft = left:GetAsNumber(i)
            number middleLeft = valueLeft - ml
            middleLeft = middleLeft / sdl

            number valueRight = right:GetAsNumber(i)
            number middleRight = valueRight - mr
            middleRight = middleRight / sdr

            sum = sum + (middleLeft * middleRight)
            i = i + 1
        end

        number result = 1.0 / (left:GetSize() - 1.0)
        result = result * sum

        return result
    end

    /*
        Obtains the raw correlation, typically named "r" in statistics. This calculation only 
        returns a result in the case where the number of correlations to calculate is 2 (two columns). 
        If the number of groups is 3 or more, GetCorrelation(integer leftIndex, integer rightIndex)
        should be used instead. This is a convenience action for the two-group case.

        Attribute: Returns the correlation between two groups. 

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        frame:Calculate(correlate)
        
        output correlate:GetCorrelation()
    */
    action GetCorrelation returns number
        if twoGroups
            return twoGroupResult:GetCorrelation()
        else
            alert("This action returns a result only in the case where there are two groups. 
                Instead, call GetCorrelation(integer leftIndex, integer rightIndex)")
        end
    end

    /*
        This returns an Iterator object of all results calculated. If there happened to only be 
        two correlations calculated, this iterator will still contain the one correlation.

        Attribute: Returns the results for the correlation. 

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
        use Libraries.Containers.Iterator
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        frame:Calculate(correlate)
        
        Iterator<CorrelateGroupsResult> iterator = correlate:GetResultIterator()
    */
    action GetResultIterator returns Iterator<CorrelateGroupsResult>
        return results:GetValueIterator()
    end

    /*
        This returns a correlation between two particular columns. If no such correlation exists, 
        this action returns undefined.

        Attribute: Returns the correlation results between two groups. 
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
        use Libraries.Containers.Iterator
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        frame:Calculate(correlate)
        
        CorrelateGroupsResult result = correlate:GetCorrelateGroupsResult(0, 1)
    */
    action GetCorrelateGroupsResult(integer leftIndex, integer rightIndex) returns CorrelateGroupsResult
        text hash = HashCorrelationPosition(leftIndex, rightIndex)
        CorrelateGroupsResult result = results:GetValue(hash)

        return result
    end

    /*
        Obtains the raw correlation, typically named "r" in statistics. This calculation only 
        returns a result in the case where the left and right indexes are valid.
        Attribute: Parameter leftIndex the first group
        Attribute: Parameter rightIndex the second group
        Attribute: Returns the correlation between two groups. 

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        frame:Calculate(correlate)
        
        output correlate:GetCorrelation(0, 1)
    */
    action GetCorrelation(integer leftIndex, integer rightIndex) returns number
        CorrelateGroupsResult result = GetCorrelateGroupsResult(leftIndex, rightIndex)

        return result:GetCorrelation()
    end

    /*
        Obtains the degrees of freedom calculated by the test. This calculation only 
        returns a result in the case where the number of correlations to calculate is 2 (two columns). 
        If the number of groups is 3 or more, GetDegreesOfFreedom(integer leftIndex, integer rightIndex)
        should be used instead. This is a convenience action for the two-group case.

        Attribute: Returns the degrees of freedom. 

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        frame:Calculate(correlate)
        
        output correlate:GetDegreesOfFreedom()
    */
    action GetDegreesOfFreedom returns number
        if twoGroups
            return twoGroupResult:GetDegreesOfFreedom()
        else
            alert("This action returns a result only in the case where there are two groups. 
                Instead, call GetDegreesOfFreedom(integer leftIndex, integer rightIndex)")
        end
    end

    /*
        Obtains the raw degrees of freedom. This calculation only 
        returns a result in the case where the left and right indexes are valid.

        Attribute: Parameter leftIndex the first group
        Attribute: Parameter rightIndex the second group

        Attribute: Returns the degrees of freedom. 

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        frame:Calculate(correlate)
        
        output correlate:GetDegreesOfFreedom(0, 1)
    */
    action GetDegreesOfFreedom(integer leftIndex, integer rightIndex) returns number
        CorrelateGroupsResult result = GetCorrelateGroupsResult(leftIndex, rightIndex)

        return result:GetDegreesOfFreedom()
    end

    /*
        Obtains the probability value (p in statistics) calculated by the test. This calculation only 
        returns a result in the case where the number of correlations to calculate is 2 (two columns). 
        If the number of groups is 3 or more, GetDegreesOfFreedom(integer leftIndex, integer rightIndex)
        should be used instead. This is a convenience action for the two-group case.

        Attribute: Returns the probability. 

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        frame:Calculate(correlate)
        
        output correlate:GetProbabilityValue()
    */
    action GetProbabilityValue returns number
        if twoGroups
            return twoGroupResult:GetProbabilityValue()
        else
            alert("This action returns a result only in the case where there are two groups. 
                Instead, call GetProbabilityValue(integer leftIndex, integer rightIndex)")
        end
    end

    /*
        Obtains the raw probability value (p in statistics). This calculation only 
        returns a result in the case where the left and right indexes are valid.

        Attribute: Parameter leftIndex the first group
        Attribute: Parameter rightIndex the second group

        Attribute: Returns the degrees of freedom. 

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CorrelateGroups
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CorrelateGroups correlate
        correlate:Add(0)
        correlate:Add(1)
        frame:Calculate(correlate)
        
        output correlate:GetProbabilityValue(0, 1)
    */
    action GetProbabilityValue(integer leftIndex, integer rightIndex) returns number
        CorrelateGroupsResult result = GetCorrelateGroupsResult(leftIndex, rightIndex)

        return result:GetProbabilityValue()
    end

    action GetFormalSummary returns text
        Math math
        
        StatisticsFormatting format = GetStatisticalFormatting()

        if twoGroups
            text result = "We conducted a Pearson correlation across " + GetColumnSize() + " groups"
    
            result = result + ", r("
                + format:FormatDegreesOfFreedom(twoGroupResult:GetDegreesOfFreedom()) + ") = " 
                + format:FormatCorrelation(twoGroupResult:GetCorrelation())//
    
            number probabilityValue = twoGroupResult:GetProbabilityValue()
            if probabilityValue < format:PRECISION_LIMIT
                result = result + ", p < " + format:FormatProbabilityValue(probabilityValue)
            else
                result = result + ", p = " + format:FormatProbabilityValue(probabilityValue)
            end
            result = result + "."
    
            return result
        else
            return ""
        end
    end
end