package Libraries.Compute.Statistics.Tests

use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Statistics.Distributions.ClassificationDistribution
use Libraries.Compute.Statistics.Calculations.Median
use Libraries.Compute.Statistics.Calculations.Mean
use Libraries.Compute.Statistics.Transforms.CovarianceMatrixTransform
use Libraries.Compute.Statistics.Reporting.CompareNGroupsResult
use Libraries.Compute.Statistics.Reporting.CompareVariancesResult
use Libraries.Compute.MatrixTransform.EigenDecomposition
use Libraries.Compute.Matrix
use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Compute.Vector

/*
    This class implements several tests:
        CompareIndependentVariances is a Levene's Homogeneity Test 
        Check that several groups vary in the same way using the mean
        For more information: https://en.wikipedia.org/wiki/Levene%27s_test

        CompareIndependentVariances is a Brown–Forsythe Extension of Levene's Homogeneity Test 
        Check that several groups vary in the same way using the median or trimmed mean
        For more information: https://en.wikipedia.org/wiki/Brown%E2%80%93Forsythe_test
    
        CompareDependentVariances is a Mauchly's Sphericity Test
        Check that several groups vary in the same way when there are repeated measures.
        For more information: https://en.wikipedia.org/wiki/Mauchly%27s_sphericity_test

        _________________ is a Bartlett’s Test for Homogeneity of Variances (very sensitive to non-normality)
        Check that several groups vary in the same way if all are normally distributed 
        For more information: https://en.wikipedia.org/wiki/Bartlett%27s_test
        For more information: https://www.statology.org/bartletts-test/

        _________________ is a Conover Equal Variance Test aka Squared Ranks Test
        Check that several groups vary in the same way without assumptions about the distribution
        For more information: https://en.wikipedia.org/wiki/Squared_ranks_test

    Attribute: Author Tim Kluthe, Hannah Williams
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Tests.CompareVariances

    DataFrame frame
    frame:Load("Data/Data.csv")

    CompareVariances compare
    compare:AddColumn(0)
    compare:AddColumn(1)
    compare:AddColumn(2)
    compare:AddColumn(3)
    compare:Calculate(frame)
    output compare:GetFormalSummary()
*/
class CompareVariances is StatisticalTest
    /* The distribution used to calculate the p-value.*/
    ClassificationDistribution x2distribution

    /* Default uses median as center for calculations */
    boolean useMedianAsCenter = true 

    /* Flag to use mean as center for calculations */
    boolean useMeanAsCenter = false 

    /* Flag to use trimmed mean as center for calculations */
    boolean useTrimmedMeanAsCenter = false

    /* Used if trimmed mean calculation is necessary */
    number trimmedMeanPercent = 0

    /* Flag if repeated measures are used in one-way within-subjects anova */
    boolean repeatedMeasures = false

    /* Flag if distribution is found to be normal or not */
    boolean normalDistribution = false

    /* This stores a hash of all of the results. */
    Array<CompareVariancesResult> results

    Math math

    action Calculate(DataFrame frame) 
        // If nothing is selected attempt to grab frame's selection.
        if GetColumnSize() = 0 
            if frame:GetSelection() not= undefined
                frame:GetSelection():CopyTo(cast(ColumnInput, me))
            end
        end
        if GetFactorSize() = 0 
            if frame:GetSelection() not= undefined 
                frame:GetSelection():CopyTo(cast(FactorInput, me))
            end
        end

        if repeatedMeasures
            parent:StatisticalTest:RemoveUndefined(true)
        end
        if GetFactorSize() = 0
            parent:StatisticalTest:Calculate(frame)
        else
            parent:StatisticalTest:CalculateWithFactor(frame)
        end
    end

    private action RunTest(DataFrame frame)
        if GetColumnSize() < 2
            alert("Must include at least two columns.")
        end

        if repeatedMeasures
            CompareDependentVariances(frame)    
        else
            CompareIndependentVariances(frame)  
        end
    end

    /* 
        This action tests for variance equality (homogeneity) for 2 or more independent samples. 
        It is commonly used with a one-way ANOVA in CompareGroups.

        It conducts the following tests: 
            Brown-Forsythe Test > CompareVariances:UseMedianAsCenter() or UseTrimmedMeanAsCenter(0.05)
            Levene's Test       > CompareVariances:UseMeanAsCenter()

        Assumptions:
            1. Samples are independent
                If not independent: Use Mauchly's Sphericity Test   > CompareVariances:CompareDependentVariances 

        Null hypothesis: The variances are equal across all samples
        Alternative hypothesis: At least one variance is not equal to the others.

        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareVariances
    
        DataFrame frame
        frame:Load("data.csv")
    
        CompareVariances compare 
        compare:AddColumn(0)
        compare:AddColumn(1)
        compare:AddColumn(2)
        compare:Calculate(frame)

        output compare:GetFormalSummary()
    */
    action CompareIndependentVariances(DataFrame frame)
        if GetColumnSize() = 0 or GetFactorSize() > 0
            me:Calculate(frame) 
        else
            if GetColumnSize() < 2
                alert("CompareIndependentVariances must have at least 2 groups.")
            end

            text center = ""
            Array<DataFrameColumn> groups
            Array<DataFrameColumn> differencesDataFrameColumns
            i = 0
            repeat while i < GetColumnSize()
                DataFrameColumn column = frame:GetColumn(GetColumn(i))
    
                if column = undefined
                    alert("Column is undefined.")
                end
        
                if not column:IsNumberColumn() and not column:IsIntegerColumn()
                    alert("Columns must be numerical. " + column:GetHeader() + " is not a numerical column.")
                end
        
                if column:GetSize() < 2
                    alert("Columns must have 2 or more entries. Not enough data for test to be calculated.")
                end
    
                NumberColumn differencesColumn 
                number difference = 0 
    
                if useMedianAsCenter
                    if column:CanConvertToVector()
                        Vector v = column:ConvertToVector()
                        v:Sort()
                        size = v:GetSize()
                        if size mod 2 = 1
                            difference = v:Get(size / 2)
                        else
                            difference = 0.5 * (v:Get((size / 2) - 1) + v:Get(size / 2))
                        end
                    end
                    center = " with median as center"
                elseif useMeanAsCenter
                    Mean mean
                    column:Calculate(mean)    
                    difference = mean:GetMean() 
                    center = " with mean as center"
                elseif useTrimmedMeanAsCenter
                    //Mean mean
                    //mean:SetTrim(trimmedMeanPercent)
                    //column:Calculate(mean)    
                    //difference = mean:GetMean()   
                    center = " with trimmed mean as Center"
                    alert("Trimmed mean not yet implemented")             
                end
    
                j = 0
                repeat while j < column:GetSize()
                    differencesColumn:Add(math:AbsoluteValue(column:GetAsNumber(j) - difference))
                    j = j + 1
                end
    
                differencesDataFrameColumns:Add(differencesColumn)
                groups:Add(column)
                i = i + 1 
            end

            // Collect and select the absolute differences data frame
            DataFrame differences
            differences:SetColumns(differencesDataFrameColumns)
            differences:SelectAllColumns()
    
            // Conduct a one-way ANOVA on the absolute differences
            CompareGroups compare       
            compare:CompareNIndependentGroups(differences)
    
            // Get anova result
            CompareNGroupsResult anovaResult = cast(CompareNGroupsResult, compare:GetResult())

            CompareVariancesResult result
            result:SetSignificanceLevel(GetSignificanceLevel())
            result:SetFormat(GetStatisticalFormatting())
            result:SetTestStatistic(anovaResult:GetTestStatistic())
            result:SetDegreesOfFreedomBetweenGroups(anovaResult:GetDegreesOfFreedomBetweenGroups())
            result:SetDegreesOfFreedomWithinGroups(anovaResult:GetDegreesOfFreedomWithinGroups())
            result:SetProbabilityValue(anovaResult:GetProbabilityValue())
            result:SetFormalTestName("Levene's Test of Homogeneity"+center)
            result:SetEffectSize(anovaResult:GetEffectSize())
            result:SetEffectSizeName(anovaResult:GetEffectSizeName())
            result:SetGroups(groups)
            result:SetFactor(GetFactorText())
            results:Add(result)
        end
    end

    /* 
        Mauchly's Sphericity Test for variance of differences equality (sphericity). 

        Assumptions:
            1. Samples are dependent
                If not dependent: Use Levene's Test   > CompareVariances:CompareIndependentVariances 

        Null hypothesis: The variances of the differences are equal across all samples
        Alternative hypothesis: At least one variance of a difference is not equal to the others.

        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareVariances
    
        DataFrame frame
        frame:Load("data.csv")
    
        CompareVariances compare 
        compare:AddColumn(0)
        compare:AddColumn(1)
        compare:AddColumn(2)
        compare:RepeatedMeasures(true)
        compare:Calculate(frame)

        output compare:GetFormalSummary()
    */
    action CompareDependentVariances(DataFrame frame)
        if GetColumnSize() = 0 or GetFactorSize() > 0
            me:Calculate(frame) 
        else
            if GetColumnSize() < 2
                alert("CompareDependentVariances must have at least 2 groups.")
            end
    
            Array<DataFrameColumn> groups
            i = 0
            repeat while i < GetColumnSize()
                DataFrameColumn column = frame:GetColumn(GetColumn(i))
                if column = undefined
                    alert("Column is undefined.")
                end
            
                if not column:IsNumberColumn() and not column:IsIntegerColumn()
                    alert("Columns must be numerical. " + column:GetHeader() + " is not a numerical column.")
                end
    
                if column:GetSize() < 2
                    alert("Columns must have 2 or more entries. Not enough data for test to be calculated.")
                end
    
                groups:Add(column)
                i = i + 1
            end
    
            // Collect only the selected data into a frame
            DataFrame newFrame
            newFrame:SetColumns(groups)
            newFrame:AddSelectedColumnRange(0, newFrame:GetSize()-1)
    
            // Get covariance matrix from frame
            // By default the sample covariance will be calculated.
            CovarianceMatrixTransform cov
            newFrame:GetSelection():CopyTo(cast(ColumnInput, cov))
            DataFrame eaterframe = cov:Transform(newFrame)
            Matrix covarianceMatrix = cov:GetMatrix()
    
            // If a sample covariance matrix is calculated, it must first be estimated 
            // to a population matrix for the later calculations, acheieved by double centering it.
            Matrix populationCovarMatrix
            if cov:UseSample()
                populationCovarMatrix = covarianceMatrix:DoubleCenter()
            else
                populationCovarMatrix = covarianceMatrix
            end
    
            // Get eigenvalues of population covariance matrix
            EigenDecomposition eig
            eig:Symmetric(true) //Force it to be recognized as symmetric for eigen calculations
            eig:Calculate(populationCovarMatrix)
        
            number productOfEvals = 1
            number sumOfEvals = 0
            number sumOfSquaredEvals = 0
            Array<number> evals = eig:GetEigenvalues()
            i = 0
            repeat while i < evals:GetSize()
                eval = evals:Get(i)
                if math:Round(eval, 12) not= 0 // Anything that's not basically zero
                    productOfEvals = productOfEvals * eval
                    sumOfEvals = sumOfEvals + eval
                    sumOfSquaredEvals = sumOfSquaredEvals + eval * eval
                end
                i = i + 1 
            end
    
            // The equations can be found here: 
            // https://pingouin-stats.org/generated/pingouin.sphericity.html#r5b1fac2e46ff-1
            // https://pingouin-stats.org/generated/pingouin.epsilon.html
    
            // Number of measurements
            number k = GetColumnSize() 
    
            // Number of subjects
            number n = frame:GetColumn(0):GetSize()
    
            // Mauchly's W test statistic
            number w = productOfEvals / math:RaiseToPower(sumOfEvals/(k-1), k-1)
    
            // Chi-Squared W Test Statistic
            number f = (2 * (k-1) * (k-1) + k + 1) / (6 * (k-1) * (n-1))
            number chi_w_squared = (f-1) * (n-1) * math:NaturalLogarithm(w)
    
            // JNS's V Test Statistic
            number v = math:RaiseToPower(sumOfEvals, 2) / (sumOfSquaredEvals)
    
            // Chi-Squared V Test Statistic
            number chi_v_squared = 0.5 * n * math:RaiseToPower(k-1, 2) * (v - 1.0/(k-1))
    
            // Degrees of Freedom
            number df = 0.5 * k * (k-1) - 1
    
            // Lower-bound epsilon
            number lbCorrectionEpsilon = 1.0/(k-1)
    
            // Greenhouse-Geisser epsilon
            number covMean = populationCovarMatrix:GetMean()
            number covSumOfSquares = 0
            number covSumOfRowMeanSquares = 0
            number covSumOfDiagonal = 0
            i = 0
            repeat while i < populationCovarMatrix:GetRows()
                j = 0
                repeat while j < populationCovarMatrix:GetColumns()
                    number value = populationCovarMatrix:Get(i,j)
                    covSumOfSquares = covSumOfSquares + value * value
                    j = j + 1
                end
                covSumOfDiagonal = covSumOfDiagonal + populationCovarMatrix:Get(i,i)
                number rowMean = populationCovarMatrix:GetRow(i):GetMean()
                covSumOfSqauredRowMeans = covSumOfRowMeanSquares + rowMean * rowMean
                i = i + 1
            end
            number covDiagonalMean = covSumOfDiagonal/k
    
            number top = k * k * (covDiagonalMean-covMean) * (covDiagonalMean-covMean)
            number bottom = (k-1) * (covSumOfSquares - (2 * k * covSumOfRowMeanSquares + (k * k * covMean * covMean)))
            number ggCorrectionEpsilon = top / bottom
    
            // Huynh-Feldt epsilon
            number hfCorrectionEpsilon = (n * (k-1) * ggCorrectionEpsilon - 2) / ((k-1) * ((n-1) - ggCorrectionEpsilon * (k-1)))
            
            // Probability
            x2distribution:Setup(df)
            number p = 1.0 - x2distribution:CumulativeDistribution(chi_w_squared)
    
            CompareVariancesResult result
            result:SetSignificanceLevel(GetSignificanceLevel())
            result:SetFormat(GetStatisticalFormatting())
            result:RepeatedMeasures(true)
            result:SetWTestStatistic(w)
            result:SetChiWSquaredTestStatistic(chi_w_squared)
            result:SetVTestStatistic(v)
            result:SetChiVSquaredTestStatistic(chi_v_squared)
            result:SetDegreesOfFreedom(df)
            result:SetProbabilityValue(p)
            result:SetLowerBoundCorrection(lbCorrectionEpsilon)
            result:SetGreenhouseGeisserCorrection(ggCorrectionEpsilon)
            result:SetHuynhFeldtCorrection(hfCorrectionEpsilon)
            result:SetFormalTestName("Mauchly's Test of Sphericity")
            result:SetGroups(groups)
            result:SetFactor(GetFactorText())
            results:Add(result)
        end
    end

    /* Used in independent-sample tests */
    action UseMedianAsCenter
        useMedianAsCenter = true
        useMeanAsCenter = false
        useTrimmedMeanAsCenter = false
    end

    /* Used in independent-sample tests */
    action UseMeanAsCenter
        useMedianAsCenter = false
        useMeanAsCenter = true
        useTrimmedMeanAsCenter = false
    end

    /* Used in independent-sample tests */
    action UseTrimmedMeanAsCenter(number percent)
        if percent < 0 or percent >= 0.5
            alert("Trimmed mean percent must be between 0 and 0.5")
        end
        useMedianAsCenter = false
        useMeanAsCenter = false
        useTrimmedMeanAsCenter = true
        trimmedMeanPercent = percent
    end

    /* Used in dependent-sample tests */
    action RepeatedMeasures(boolean repeatedMeasures)
        me:repeatedMeasures = repeatedMeasures
    end

    /* Used in independent-sample tests */
    action AssumeNormalDistribution(boolean assume)
        assumeNormalDistribution = assume
    end

    /*
        This returns the probability if only one result exists.

        Attribute: Returns the P-Value. 
    */
    action GetProbabilityValue returns number
        return GetResult():GetProbabilityValue()
    end

    /*
        This returns the degrees of freedom if only one result exists.

        Attribute: Returns the Degrees of Freedom. 
    */
    action GetDegreesOfFreedom returns number
        return GetResult():GetDegreesOfFreedom()
    end

    /*
        This returns the test statistic if only one result exists.

        Attribute: Returns the test statistic. 
    */
    action GetTestStatistic returns number
        return GetResult():GetTestStatistic()
    end

    /*
        This returns the effect size if only one result exists.

        Attribute: Returns the effect size. 
    */
    action GetEffectSize returns number
        return GetResult():GetEffectSize()
    end

    /*
        This returns a result if only one exists.

        Attribute: Returns the CompareVariancesResult object
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareVariances
    
        DataFrame frame
        frame:Load("Data/Data.csv")

        CompareVariances compare
        compare:AddColumn(0)
        compare:AddColumn(1)
        compare:Calculate(frame)
        
        CompareVariancesResult result = compare:GetResult()
    */
    action GetResult returns CompareVariancesResult
        if results:GetSize() = 0
            alert("There are no results calculated")
        elseif results:GetSize() = 1
            return results:Get(0)
        else
            alert("There is more than one test result, use GetResults() for an array of all results")
        end
    end

    /*
        Attribute: Returns an array of CompareVariancesResult objects
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareVariances
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CompareVariances compare
        compare:AddColumn(0)
        compare:AddColumn(1)
        compare:AddColumn(2)
        frame:Calculate(compare)

        Array<CompareVariancesResult> results = compare:GetResults()
    */
    action GetResults returns Array<CompareVariancesResult>
        return results
    end

    /*
        Attribute: Returns a list of the important statistics of the test
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareVariances
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CompareVariances compare
        compare:Add(0)
        compare:Add(1)
        frame:Calculate(compare)

        output compare:GetSummary()
    */
    action GetSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        i = 0
        CompareVariancesResult result 
        repeat while i < results:GetSize()
            result = results:Get(i)

            summary = summary + lf
            summary = summary + result:GetSummary()
            summary = summary + lf
            i = i + 1
        end
        return summary
    end

    /*
        This action summarizes the results and places them into formal academic language, in 
        APA format.
        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf

        Attribute: Returns a condensed formal result of the test
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareVariances
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CompareVariances compare
        compare:Add(0)
        compare:Add(1)
        frame:Calculate(compare)

        output compare:GetFormalSummary()
    */
    action GetFormalSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        i = 0
        CompareVariancesResult result 
        repeat while i < results:GetSize()
            result = results:Get(i)

            summary = summary + lf
            summary = summary + result:GetFormalSummary()
            summary = summary + lf
            i = i + 1
        end
        return summary
    end

end