package Libraries.Compute.Statistics.Tests

use Libraries.Compute.Statistics.DataFrameCalculation
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Math
use Libraries.Compute.Statistics.Distributions.HeavyTailNormalDistribution
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Reporting.CompareGroupsResult
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Statistics.Distributions.ClassificationDistribution
use Libraries.Compute.Statistics.Calculations.Median
use Libraries.Compute.Statistics.Calculations.Mean
use Libraries.Compute.Statistics.Transforms.CovarianceMatrixTransform
use Libraries.Compute.Matrix
use Libraries.Compute.MatrixTransform.EigenDecomposition
use Libraries.Compute.Statistics.Reporting.CompareNGroupsResult

/*

    This class conducts a comparison between variances for a sample. 
    In the academic literature, it is typically called a Levene's test. 
    More information can be found about this test here:

    https://en.wikipedia.org/wiki/Levene%27s_test

    https://en.wikipedia.org/wiki/Mauchly%27s_sphericity_test

    Attribute: Author Tim Kluthe, Hannah Williams
    Attribute: Example

    DataFrame frame
    frame:Load("Data/Data.csv")

    CompareVariances compare
    compare:AddColumn(0)
    compare:AddColumn(1)
    compare:AddColumn(2)
    compare:AddColumn(3)
    frame:Calculate(compare)
    
    CompareGroupsResult result = compare:GetResult()
    
    output result:GetProbabilityValue()
*/
class CompareVariances is CompareGroups
    /* The distribution used to calculate the p-value from x2 and df.*/
    ClassificationDistribution distribution

    /* Default uses median as center for calculations */
    boolean useMedianAsCenter = true 
    boolean useMeanAsCenter = false 

    /* Boolean for violation flag */
    boolean violatesAssumption = false

    /* Greenhouse-Geisser correction */
    number ggCorrectionEpsilon = 1.0 
    
    /* Huynh-Feldt correction. */
    number hfCorrectionEpsilon = 1.0

    Math math

    private action RunTest(DataFrame frame)
        if GetColumnSize() < 2
            alert("Must include at least two columns.")
        end

        if Paired() or RepeatedMeasures()
            CompareDifferenceVariances(frame)   // Mauchly's Sphericity Test
        else
            CompareVariances(frame)             // Levene's Test
        end
    end

    /* 
        Levene's Test 

        Null hypothesis: The variances are equal
        Alternative hypothesis: The variances are not equal

        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareVariances
    
        DataFrame frame
        frame:Load("data.csv")
    
        CompareVariances compare 
        compare:AddColumn(0)
        compare:AddColumn(1)
        compare:AddColumn(2)
        compare:Calculate(frame)

        output compare:GetSummary()
    */
    private action CompareVariances(DataFrame frame)
        Array<DataFrameColumn> differencesDataFrameColumns
        Array<integer> preservedColumns = parent:ColumnInput:columns
        Array<integer> differencesColumns

        if useMedianAsCenter
            i = 0
            repeat while i < GetColumnSize()
                DataFrameColumn column = frame:GetColumn(GetColumn(i))

                if column = undefined
                    alert("Column is undefined.")
                end
        
                if not column:IsNumberColumn() and not column:IsIntegerColumn()
                    alert("Columns must be numerical. " + column:GetHeader() + " is not a numerical column.")
                end
        
                if column:GetSize() < 2
                    alert("Columns must have 2 or more entries. Not enough data for test to be calculated.")
                end

                Median median
                column:Calculate(median)    
                NumberColumn medianDifferencesColumn    
                
                j = 0
                repeat while j < column:GetSize()
                    medianDifferencesColumn:Add(math:AbsoluteValue(column:GetAsNumber(j) - median:GetMedian()))
    
                    j = j + 1
                end

                differencesDataFrameColumns:Add(medianDifferencesColumn)
                differencesColumns:Add(i)
                i = i + 1
            end
        elseif useMeanAsCenter
            i = 0
            repeat while i < GetColumnSize()
                DataFrameColumn column = frame:GetColumn(GetColumn(i))

                if column = undefined
                    alert("Column is undefined.")
                end
        
                if not column:IsNumberColumn() and not column:IsIntegerColumn()
                    alert("Columns must be numerical. " + column:GetHeader() + " is not a numerical column.")
                end
        
                if column:GetSize() < 2
                    alert("Columns must have 2 or more entries. Not enough data for test to be calculated.")
                end
    
                Mean mean
                column:Calculate(mean)    
                NumberColumn meanDifferencesColumn
                
                j = 0
                repeat while j < column:GetSize()
                    meanDifferencesColumn:Add(math:AbsoluteValue(column:GetAsNumber(j) - mean:GetMean()))
    
                    j = j + 1
                end

                differencesDataFrameColumns:Add(meanDifferencesColumn)
                differencesColumns:Add(i)
                i = i + 1
            end           
        end

        DataFrame differencesDataFrame
        differencesDataFrame:SetColumns(differencesDataFrameColumns)
        
        parent:ColumnInput:columns = differencesColumns
        parent:CompareGroups:CompareNIndependentGroups(differencesDataFrame)
        parent:CompareGroups:GetResult():SetFormalTestName("Levene's Test")
        parent:ColumnInput:columns = preservedColumns

        violatesAssumption = GetProbabilityValue() < GetSignificanceLevel()
    end

    /* 
        Mauchly's Sphericity Test 

        Null hypothesis: The variances of the differences are equal
        Alternative hypothesis: The variances of the differences are not equal

        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareVariances
    
        DataFrame frame
        frame:Load("data.csv")
    
        CompareVariances compare 
        compare:AddColumn(0)
        compare:AddColumn(1)
        compare:AddColumn(2)
        compare:SetRepeatedMeasures(true)
        compare:Calculate(frame)

        output compare:GetSummary()
    */
    action CompareDifferenceVariances(DataFrame frame)
        DataFrame newFrame
        i = 0
        repeat while i < GetColumnSize()
            DataFrameColumn column = frame:GetColumn(GetColumn(i))
            if column = undefined
                alert("Column is undefined.")
            end
        
            if not column:IsNumberColumn() and not column:IsIntegerColumn()
                alert("Columns must be numerical. " + column:GetHeader() + " is not a numerical column.")
            end

            if column:GetSize() < 2
                alert("Columns must have 2 or more entries. Not enough data for test to be calculated.")
            end
            newFrame:AddColumn(column)
            i = i + 1
        end

        if GetColumnSize() > 0
            newFrame:AddSelectedColumnRange(0, newFrame:GetSize()-1)

            // Get covariance matrix
            CovarianceMatrixTransform cov
            newFrame:GetSelection():CopyTo(cast(ColumnInput, cov))
            DataFrame eaterframe = cov:Transform(newFrame)
            Matrix matrix = cov:GetMatrix()

            // If a sample covariance matrix is calculated, it must first be estimated 
            // to a population matrix by double centering it.
            Matrix populationCovarMatrix
            if cov:UseSample()
                populationCovarMatrix = matrix:DoubleCenter()
            else
                populationCovarMatrix = matrix
            end
    
            // Get eigenvalues of covariance matrix
            EigenDecomposition eig
            eig:Calculate(populationCovarMatrix)
    
            number k = GetColumnSize()
            number n = frame:GetColumn(0):GetSize()
            number productOfEvals = 1
            number sumOfEvals = 0
            number sumOfSquaredEvals = 0
            Array<number> evals = eig:GetEigenvalues()
            i = 0
            repeat while i < evals:GetSize()
                eval = evals:Get(i)
                if eval > 0
                    productOfEvals = productOfEvals * eval
                    sumOfEvals = sumOfEvals + eval
                    sumOfSquaredEvals = sumOfSquaredEvals + eval * eval
                end
                i = i + 1 
            end

            // These equations can be found here: 
            // https://pingouin-stats.org/generated/pingouin.sphericity.html#r5b1fac2e46ff-1

            // Mauchly's W test statistic
            number w = productOfEvals / math:RaiseToPower(sumOfEvals/(k-1), k-1)

            // Chi-Squared W Test Statistic
            number f = (2 * math:RaiseToPower(k-1, 2) + k + 1) / (6 * (k-1) * (n-1))
            number chi_w_squared = (f-1) * (n-1) * math:NaturalLogarithm(w)

            // JNS's V Test Statistic
            number v = math:RaiseToPower(sumOfEvals, 2) / (sumOfSquaredEvals)

            // Chi-Squared V Test Statistic
            number chi_v_squared = 0.5 * n * math:RaiseToPower(k-1, 2) * (v - 1.0/(k-1))

            // Degrees of Freedom
            number df = 0.5 * k * (k-1) - 1

            // Box Coefficient
            number e = v/(k-1)
            ggCorrectionEpsilon = e
            hfCorrectionEpsilon = (n * (k-1) * e - 2) / ((k-1) * (n - 1 - ((k-1) * e)))
            
            distribution:Setup(df)
            number p = 1.0 - distribution:CumulativeDistribution(chi_w_squared)

//            output "productOfEvals: "+productOfEvals
//            output "sumOfEvals: "+sumOfEvals
//            output "w: "+w
//            output "x2w: "+chi_w_squared
//            output "df: "+df
//            output "p: "+p
//            output "gg: "+ggCorrectionEpsilon
//            output "hf: "+hfCorrectionEpsilon
//            output "v: "+v
//            output "x2v: "+chi_v_squared

            CompareNGroupsResult result
            result:SetSignificanceLevel(GetSignificanceLevel())
            result:SetFormat(GetStatisticalFormatting())
            result:SetRepeatedMeasures(true)
            result:SetTestStatistic(w)
            result:SetProbabilityValue(p)
    
            violatesAssumption = p < GetSignificanceLevel()

//            if newFrame:GetSize() > 1
//                newFrame:AddSelectedColumnRange(0, newFrame:GetSize()-1)
//                CompareVariances compare = newFrame:CompareSelectedVariances()
//                compare:GetResult():SetFormalTestName("Mauchly's Sphericity Test")
//                parent:CompareGroups:results:Add("NA", compare:GetResult())
//            end
        end
        alert("Mauchly's test is not complete")
    end

    action UseMedianAsCenter
        useMedianAsCenter = true
        useMeanAsCenter = false
    end

    action UseMeanAsCenter
        useMedianAsCenter = false
        useMeanAsCenter = true
    end

    action ViolatesAssumption returns boolean
        return violatesAssumption
    end

    action GetCorrectionEpsilon returns number
        if violatesAssumption
            if ggCorrectionEpsilon < 0.75
                return ggCorrectionEpsilon
            else
                return hfCorrectionEpsilon
            end
        else
            return 1.0
        end
    end

end