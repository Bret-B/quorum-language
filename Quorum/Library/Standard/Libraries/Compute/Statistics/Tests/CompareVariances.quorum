package Libraries.Compute.Statistics.Tests

use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Statistics.Distributions.ClassificationDistribution
use Libraries.Compute.Statistics.Calculations.Median
use Libraries.Compute.Statistics.Calculations.Mean
use Libraries.Compute.Statistics.Transforms.CovarianceMatrixTransform
use Libraries.Compute.Statistics.Reporting.CompareVariancesResult
use Libraries.Compute.MatrixTransform.EigenDecomposition
use Libraries.Compute.Matrix
use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Compute.Vector
use Libraries.Compute.Statistics.Reporting.CompareMeansResult
use Libraries.Containers.HashTable
use Libraries.Compute.Statistics.Transforms.TransformLonger
use Libraries.Compute.Statistics.Distributions.VarianceRatioDistribution

/*
    This class implements several tests:
        CompareSeveralVariances is a Levene's Homogeneity Test 
        Check that several groups vary in the same way using the mean
        For more information: https://en.wikipedia.org/wiki/Levene%27s_test

        CompareSeveralVariances is a Brown–Forsythe Extension of Levene's Homogeneity Test 
        Check that several groups vary in the same way using the median or trimmed mean
        For more information: https://en.wikipedia.org/wiki/Brown%E2%80%93Forsythe_test
    
        CompareSeveralRelatedVariances is a Mauchly's Sphericity Test
        Check that several groups vary in the same way when there are repeated measures.
        For more information: https://en.wikipedia.org/wiki/Mauchly%27s_sphericity_test

        _________________ is a Bartlett’s Test for Homogeneity of Variances (sensitive to non-normality)
        Check that several groups vary in the same way if all are normally distributed 
        For more information: https://en.wikipedia.org/wiki/Bartlett%27s_test
        For more information: https://www.statology.org/bartletts-test/

        CompareSeveralVariances is a Box's M Test for Homogeneity of Covariances Extension of Bartlett’s Homogeneity Test (sensitive to non-normality)
        >> CompareCovarianceMatrices (private)
        Check that several multivariate groups vary in the same way if all are normally distributed 
        For more information: https://en.wikipedia.org/wiki/Box%27s_M_test

        _________________ is a Conover Equal Variance Test aka Squared Ranks Test
        Check that several groups vary in the same way without assumptions about the distribution
        For more information: https://en.wikipedia.org/wiki/Squared_ranks_test

    Attribute: Author Tim Kluthe, Hannah Williams
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Tests.CompareVariances

    DataFrame frame
    frame:Load("Data/Data.csv")
    frame:AddSelectedColumnRange(0,3)

    CompareVariances compare = frame:CompareVariances()
    output compare:GetFormalSummary()
*/
class CompareVariances is StatisticalTest
    private HashTable<text, DataFrame> groups       // Contain the dataframe objects for the most factored of the groups (i.e. the samples)
    private integer numberOfFactors = 0             // Number of factors selected
    private integer numberOfColumns = 0             // Number of columns selected
    private Array<text> factorHeaders               // Used factor headers
    private Array<text> columnHeaders               // Used column headers
    private boolean multivariate = false            // Flag for multiple dependent variables
    private boolean factorial = false               // Flag for multiple independent factors
    private boolean needToSelectTest = true         // Flag to let this class auto-select a test based on given data
    private boolean needToProcessData = true        // Flag to let tell this class to process the selected data

    /* The distribution used to calculate the p-value.*/
    private ClassificationDistribution x2distribution
    private VarianceRatioDistribution fdistribution

    /* Default uses median as center for calculations */
    boolean useMedianAsCenter = true 

    /* Flag to use mean as center for calculations */
    boolean useMeanAsCenter = false 

    /* Flag to use trimmed mean as center for calculations */
    boolean useTrimmedMeanAsCenter = false

    /* Used if trimmed mean calculation is necessary */
    number trimmedMeanPercent = 0

    /* Flag if repeated measures are used in one-way within-subjects anova */
    boolean repeatedMeasures = false

    /* Flag if distribution is found to be normal or not */
    boolean normalDistribution = false

    /* This stores a hash of all of the results. */
    Array<CompareVariancesResult> results

    Math math

    action Calculate(DataFrame frame) 
        results:Empty()
        groups:Empty()
        factorHeaders:Empty()
        columnHeaders:Empty()

        numberOfFactors = frame:GetSelectedFactorSize()
        numberOfColumns = frame:GetSelectedColumnSize()

        if numberOfFactors > 0 and numberOfColumns > 1
            multivariate = true
        else
            multivariate = false
        end

        if numberOfFactors > 1
            factorial = true
        else
            factorial = false
        end

        // Copy the frame keeping only the selected factors/columns and reselect them
        // Anything else will be dropped for this computation.
        DataFrame cleanedFrame = frame:Copy()
        if multivariate
            cleanedFrame = frame:RemoveUndefinedRowsFromSelectedColumns()
        end
        DataFrame copy
        integer index = 0
        i = 0
        repeat while i < numberOfFactors
            DataFrameColumn factor = cleanedFrame:GetColumn(frame:GetSelection():GetFactor(i))
            copy:AddColumn(factor)
            copy:AddSelectedFactor(index)
            factorHeaders:Add(factor:GetHeader())
            index = index + 1
            i = i + 1
        end
        i = 0
        repeat while i < numberOfColumns
            DataFrameColumn column = cleanedFrame:GetColumn(frame:GetSelection():GetColumn(i))
            copy:AddColumn(column)
            copy:AddSelectedColumn(index)
            columnHeaders:Add(column:GetHeader())
            index = index + 1
            i = i + 1
        end

        // Check the data for missing data or incorrect column types
        CheckDataIntegrity(copy)

        groups = GetGroups(copy)

        if needToSelectTest
            RunTest(copy)
        end

        needToProcessData = false
    end

    private action RunTest(DataFrame frame)
        if groups:GetSize() < 2
            alert("A CompareVariances calculation must include at least two samples.")
        end

        if repeatedMeasures
            CompareSeveralRelatedVariances(frame)    
        else
            CompareSeveralVariances(frame)  
        end
    end

    /* 
        This action tests for variance equality (homogeneity) for 2 or more independent samples. 
        It is commonly used with an ANOVA in CompareMeans.

        It conducts the following tests: 
            Brown-Forsythe Test > CompareVariances:UseMedianAsCenter() or UseTrimmedMeanAsCenter(0.05)
            Levene's Test       > CompareVariances:UseMeanAsCenter()

        Assumptions:
            1. Samples are independent
                If not independent: Use Mauchly's Sphericity Test   > CompareVariances:CompareSeveralRelatedVariances 

        Null hypothesis: The variances are equal across all samples
        Alternative hypothesis: At least one variance is not equal to the others.

        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareVariances
    
        DataFrame frame
        frame:Load("data.csv")
        frame:AddSelectedColumnRange(0,2)
    
        CompareVariances compare = frame:CompareVariances()
        output compare:GetFormalSummary()
    */
    action CompareSeveralVariances(DataFrame frame)
        if needToProcessData
            needToSelectTest = false  // This test has been selected (skip RunTest)
            me:Calculate(frame)
        end
        if groups:GetSize() < 2
            alert("CompareSeveralVariances must have at least two samples.")
        end
        if multivariate
            CompareCovarianceMatrices(frame)
        else
            text center = ""
            DataFrame uncenteredGroupFrame
            DataFrame centeredGroupFrame = GetCenteredGroupsFrame(uncenteredGroupFrame)
            centeredGroupFrame:SelectAllColumns()
        
            if useMedianAsCenter
                center = " with median as center"
            elseif useMeanAsCenter
                center = " with mean as center"
            elseif useTrimmedMeanAsCenter
                center = " with trimmed mean as Center"
                alert("Trimmed mean not yet implemented")             
            end
    
            // Conduct a one-way ANOVA on the centered groups
            CompareMeans compare       
            compare:CompareSeveralMeans(centeredGroupFrame)
            CompareMeansResult aov = compare:GetResult()
    
            // Get anova result
            CompareVariancesResult result
            Array<text> sources
            text source = "Groups"
            if numberOfFactors > 0
                i = 0
                repeat while i < numberOfFactors
                    if i = 0
                        source = factorHeaders:Get(i)
                    else
                        source = source + ":"+ factorHeaders:Get(i)
                    end
                    i = i + 1
                end
            end
            sources:Add(source)
            result:SetTestStatistic(source, "F", aov:GetTestStatistic())
            result:SetDegreesOfFreedom(source, "numerator", aov:GetDegreesOfFreedomTable():GetValue("Groups"):GetValueIterator():Next())
            result:SetDegreesOfFreedom(source, "denominator", aov:GetDegreesOfFreedomTable():GetValue("Residual Error"):GetValue("Residual Error"))
            result:SetProbabilityValue(source, source, aov:GetProbabilityValue())
            result:SetSignificanceLevel(GetSignificanceLevel())
            result:SetFormat(GetStatisticalFormatting())
            result:SetFormalTestName("Levene's Test for Homogeneity of Variances"+center)
            result:SetGroupsFrame(uncenteredGroupFrame)
            result:SetFactors(factorHeaders)
            result:SetColumns(columnHeaders)
            result:SetSources(sources)
            results:Add(result)
        end
        needToProcessData = true // Reset processing flag in case user changes selections
    end

    /* 
        Box's M Test for variance-covariace equality (homogeneity)  
        It is commonly used with a MANOVA in CompareMeans.
        This action is not intended to be accessed directly. 
        Simply use CompareSeveralVariances, if the design is multivariate it will be redirected here.
        This expects the data in wide format, meaning each row is a subject or observation and each column is a dependent variable.
        Note: Each sample should have more subjects or observations than there are variables.

        If the multivariate design is balanced (meaning the same sample size for each group) this test is not really necessary.
        This test is typically compared to a significance level of 0.001
        Assumptions:
            1. Samples are independent
                If not independent: Use Mauchly's Sphericity Test   > CompareVariances:CompareSeveralRelatedVariances 
            2. There is more than one dependent variable
                If only one: Use Levene's Homogeneity Test          > CompareVariances:CompareSeveralVariances 

        Null hypothesis: The variance-covariance matrices are equal across all samples
        Alternative hypothesis: At least one variance-covariance matrix is not equal to the others.

        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareVariances
    
        DataFrame frame
        frame:Load("data.csv")
        frame:AddSelectedColumnRange(0,2)
    
        CompareVariances compare = frame:CompareVariances()
        output compare:GetFormalSummary()
    */
    private action CompareCovarianceMatrices(DataFrame frame)   
        number dfTotal = 0
        Matrix pooledCovMatrix
        Array<Matrix> covMatrices
        number numberOfSubjects = 0 
        number numberOfGroups = groups:GetSize()
        number numberOfVariables = 0
        number c1Sum = 0
        number c2Sum = 0
        number mSum = 0

        // For information on the equations: 
        // https://www.ipen.br/biblioteca/slr/cel/0241
        // https://www.sussex.ac.uk/its/pdfs/SPSS_Statistics_Algorithms_22.pdf
        // https://real-statistics.com/multivariate-statistics/boxs-test/boxs-test-basic-concepts/
        Array<text> groupsArray = groups:CopyToKeyArray()
        integer i = 0
        repeat while i < groupsArray:GetSize()
            text groupText = groupsArray:Get(i)
            DataFrame groupFrame = groups:GetValue(groupText)
            groupFrame:SelectAllColumns()
            groupSize = groupFrame:GetColumn(0):GetSize() 
            if groupSize <= groupFrame:GetSize()
                alert("CompareCovarianceMatrices: "+groupText+" has only "+groupSize+" observations. You need at least "+(groupFrame:GetSize()+1)+", to be more than the number of dependent variables")
            end
            Matrix covMatrix = groupFrame:CovarianceMatrix()
            if i = 0
                pooledCovMatrix = covMatrix:Multiply(groupSize - 1)
                numberOfVariables = groupFrame:GetSize()
            else
                pooledCovMatrix = pooledCovMatrix:AddElements(covMatrix:Multiply(groupSize - 1))
            end
            mSum = mSum + math:NaturalLogarithm(covMatrix:GetDeterminant())*(groupSize - 1)
            c1Sum = c1Sum + 1.0 / (groupSize - 1)
            c2Sum = c2Sum + 1.0 / ((groupSize - 1) * (groupSize - 1))

            covMatrices:Add(covMatrix)
            numberOfSubjects = numberOfSubjects + groupSize
            dfTotal = dfTotal + (groupSize - 1)
            i = i + 1     
        end
        pooledCovMatrix = pooledCovMatrix:Multiply(1.0 / dfTotal)
        c1Sum = c1Sum - 1.0 / (numberOfSubjects - numberOfGroups)
        c2Sum = c2Sum - 1.0 / ((numberOfSubjects - numberOfGroups) * (numberOfSubjects - numberOfGroups))
   
        number M = (numberOfSubjects - numberOfGroups) * math:NaturalLogarithm(pooledCovMatrix:GetDeterminant()) - mSum
        number c1 = ((2 * numberOfVariables * numberOfVariables + 3 * numberOfVariables - 1) / (6.0 * (numberOfVariables + 1.0) * (numberOfGroups - 1))) * c1Sum 
        number c2 = ((numberOfVariables - 1.0) * (numberOfVariables + 2.0) / (6.0 * (numberOfGroups - 1.0))) * c2Sum
        number df1 = 0.5 * (numberOfGroups - 1) * numberOfVariables * (numberOfVariables + 1)
        number df2 = (df1 + 2) / math:AbsoluteValue(c2 - c1*c1)
        number x2 = M * (1 - c1)
        number f = 0
        if c2 > c1*c1
            a = df1 / (1.0 - c1 - df1 / df2)
            f = M / a
        else
            a = df2 / (1.0 - c1 + 2.0 / df2)
            f = df2 * M / df1 * (a - M)
        end

        // Chi-Squared Approximation (for large sample sizes)
        x2distribution:Setup(df1)
        number pX2 = 1.0 - x2distribution:CumulativeDistribution(x2)

        // F-Test Approximation (for small sample sizes)
        fdistribution:Setup(df1, df2)
        number pF = 1.0 - fdistribution:CumulativeDistribution(f)

        CompareVariancesResult result
        Array<text> sources
        text source = "Groups"
        if numberOfFactors > 0
            i = 0
            repeat while i < numberOfFactors
                if i = 0
                    source = factorHeaders:Get(i)
                else
                    source = source + ":"+ factorHeaders:Get(i)
                end
                i = i + 1
            end
        end
        sources:Add(source)
        result:SetTestStatistic(source, "M", M)
        result:SetTestStatistic(source, "χ2", x2)
        result:SetTestStatistic(source, "F", f)
        result:SetDegreesOfFreedom(source+"χ2", source+"χ2", df1)
        result:SetProbabilityValue(source+"χ2", source+"χ2", pX2)
        result:SetDegreesOfFreedom(source+"F", "numerator", df1)
        result:SetDegreesOfFreedom(source+"F", "denominator", df2)
        result:SetProbabilityValue(source+"F", source+"F", pF)
        result:SetSignificanceLevel(GetSignificanceLevel())
        result:SetFormat(GetStatisticalFormatting())
        result:SetFormalTestName("Box's M-test for Homogeneity of Covariance Matrices")
        result:SetGroupsTable(groups)
        result:SetFactors(factorHeaders)
        result:SetColumns(columnHeaders)
        result:SetSources(sources)
        results:Add(result)
    end

    /* 
        Mauchly's Sphericity Test for variance of differences equality (sphericity). 

        Assumptions:
            1. Samples are dependent
                If not dependent: Use Levene's Test   > CompareVariances:CompareIndependentVariances 

        Null hypothesis: The variances of the differences are equal across all samples
        Alternative hypothesis: At least one variance of a difference is not equal to the others.

        Attribute: Example
    
        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareVariances
    
        DataFrame frame
        frame:Load("data.csv")
    
        CompareVariances compare = frame:CompareRelatedVariances()
        output compare:GetFormalSummary()
    */
    action CompareSeveralRelatedVariances(DataFrame frame)
        if needToProcessData
            needToSelectTest = false  // This test has been selected (skip RunTest)
            me:Calculate(frame)
        end
        if factorial
            alert("A factorial repeated measures CompareVariances test is not supported yet. Formal Test Name: Mauchly's Sphericity")
        end
        if multivariate
            alert("A multivariate repeated measures CompareVariances test is not supported yet. Formal Test Name: Mauchly's Sphericity")
        end

        if groups:GetSize() < 3
            if groups:GetSize() = 2
                DataFrame groupFrame = GetGroupsFrame()
                Array<text> sources
                text source = "Measures"
                if numberOfFactors > 0
                    i = 0
                    repeat while i < numberOfFactors
                        if i = 0
                            source = factorHeaders:Get(i)
                        else
                            source = source + ":"+ factorHeaders:Get(i)
                        end
                        i = i + 1
                    end
                end
                sources:Add(source)
                CompareVariancesResult result
                result:SetSignificanceLevel(GetSignificanceLevel())
                result:SetFormat(GetStatisticalFormatting())
                result:Repeated(true)
                result:SetTestStatistic(source, "W", 1.0)
                result:SetTestStatistic(source+"W", "χ2", 0)
                result:SetDegreesOfFreedom(source, "W", 0)
                result:SetProbabilityValue(source, "W", 1.0)
                result:SetFormalTestName("Mauchly's Test of Sphericity")
                result:SetGroupsFrame(groupFrame)
                result:SetFactors(factorHeaders)
                result:SetColumns(columnHeaders)
                result:SetSources(sources)
                results:Add(result)

                //alert("Sphericity is always satistified when using only 2 samples or measures.")
            else
                alert("CompareSeveralRelatedVariances must have at least 3 samples.")
            end
        end

        DataFrame groupFrame = GetGroupsFrame()
        groupFrame:SelectAllColumns()

        // Get covariance matrix from frame
        // By default the sample covariance will be calculated.
        Matrix sampleCovarMatrix = groupFrame:CovarianceMatrix()

        // Since a sample covariance matrix was calculated, it must first be estimated 
        // to a population matrix for the later calculations, achieved by double centering it.
        Matrix populationCovarMatrix = sampleCovarMatrix:DoubleCenter()        

        // Get eigenvalues of population covariance matrix
        EigenDecomposition eig
        eig:Symmetric(true) //Force it to be recognized as symmetric for eigen calculations
        eig:Calculate(populationCovarMatrix)
    
        number productOfEvals = 1
        number sumOfEvals = 0
        number sumOfSquaredEvals = 0
        Vector evals = eig:GetEigenvalues()
        i = 0
        repeat while i < evals:GetSize()
            eval = evals:Get(i)
            if eval > 0 // Eigen values cannot be negative
                productOfEvals = productOfEvals * eval
                sumOfEvals = sumOfEvals + eval
                sumOfSquaredEvals = sumOfSquaredEvals + eval * eval
            end
            i = i + 1 
        end

        // The equations can be found here:
        // https://pingouin-stats.org/build/html/generated/pingouin.sphericity.html
        // https://pingouin-stats.org/generated/pingouin.epsilon.html

        // Number of measurements
        number k = groupFrame:GetColumns():GetSize()

        // Number of subjects
        number n = groupFrame:GetColumn(0):GetSize()

        // Mauchly's W test statistic
        number w = productOfEvals / math:RaiseToPower(sumOfEvals/(k-1), k-1)

        // Chi-Squared W Test Statistic
        number f = (2 * (k-1) * (k-1) + k + 1) / (6 * (k-1) * (n-1))
        number chi_w_squared = (f-1) * (n-1) * math:NaturalLogarithm(w)

        // JNS's V Test Statistic
        number v = math:RaiseToPower(sumOfEvals, 2) / (sumOfSquaredEvals)

        // Chi-Squared V Test Statistic
        number chi_v_squared = 0.5 * n * math:RaiseToPower(k-1, 2) * (v - 1.0/(k-1))

        // Degrees of Freedom
        number df = 0.5 * k * (k-1) - 1

        // Lower-bound epsilon
        number lbCorrectionEpsilon = 1.0/(k-1)

        // Greenhouse-Geisser epsilon
        number covMean = populationCovarMatrix:GetMean()
        number covSumOfSquares = 0
        number covSumOfRowMeanSquares = 0
        number covSumOfDiagonal = 0
        i = 0
        repeat while i < populationCovarMatrix:GetRows()
            j = 0
            repeat while j < populationCovarMatrix:GetColumns()
                number value = populationCovarMatrix:Get(i,j)
                covSumOfSquares = covSumOfSquares + value * value
                j = j + 1
            end
            covSumOfDiagonal = covSumOfDiagonal + populationCovarMatrix:Get(i,i)
            number rowMean = populationCovarMatrix:GetRow(i):GetMean()
            covSumOfSqauredRowMeans = covSumOfRowMeanSquares + rowMean * rowMean
            i = i + 1
        end
        number covDiagonalMean = covSumOfDiagonal/k

        number top = k * k * (covDiagonalMean-covMean) * (covDiagonalMean-covMean)
        number bottom = (k-1) * (covSumOfSquares - (2 * k * covSumOfRowMeanSquares + (k * k * covMean * covMean)))
        number ggCorrectionEpsilon = top / bottom

        // Huynh-Feldt epsilon
        number hfCorrectionEpsilon = (n * (k-1) * ggCorrectionEpsilon - 2) / ((k-1) * ((n-1) - ggCorrectionEpsilon * (k-1)))
        
        // Probability
        x2distribution:Setup(df)
        number pW = 1.0 - x2distribution:CumulativeDistribution(chi_w_squared)
        number pV = 1.0 - x2distribution:CumulativeDistribution(chi_v_squared)

        Array<text> sources
        text source = "Measures"
        if numberOfFactors > 0
            i = 0
            repeat while i < numberOfFactors
                if i = 0
                    source = factorHeaders:Get(i)
                else
                    source = source + ":"+ factorHeaders:Get(i)
                end
                i = i + 1
            end
        end
        sources:Add(source)
        CompareVariancesResult result
        result:SetSignificanceLevel(GetSignificanceLevel())
        result:SetFormat(GetStatisticalFormatting())
        result:Repeated(true)
        result:SetTestStatistic(source, "W", w)
        result:SetTestStatistic(source+"W", "χ2", chi_w_squared)
        result:SetDegreesOfFreedom(source, "W", df)
        result:SetProbabilityValue(source, "W", pW)
        //// JNS's V Test Statistic??
        //  result:SetTestStatistic(source, "V", w)
        //  result:SetTestStatistic(source+"V", "χ2", chi_v_squared)
        //  result:SetDegreesOfFreedom(source, "V", df)
        //  result:SetProbabilityValue(source, "V", pV)
        result:SetInformation(source, "lb", lbCorrectionEpsilon)
        result:SetInformation(source, "gg", ggCorrectionEpsilon)
        result:SetInformation(source, "hf", hfCorrectionEpsilon)
        result:SetFormalTestName("Mauchly's Test of Sphericity")
        result:SetGroupsFrame(groupFrame)
        result:SetFactors(factorHeaders)
        result:SetColumns(columnHeaders)
        result:SetSources(sources)
        results:Add(result)
    end

    /* Used in independent-sample tests */
    action UseMedianAsCenter
        useMedianAsCenter = true
        useMeanAsCenter = false
        useTrimmedMeanAsCenter = false
    end

    /* Used in independent-sample tests */
    action UseMeanAsCenter
        useMedianAsCenter = false
        useMeanAsCenter = true
        useTrimmedMeanAsCenter = false
    end

    /* Used in independent-sample tests */
    action UseTrimmedMeanAsCenter(number percent)
        if percent < 0 or percent >= 0.5
            alert("Trimmed mean percent must be between 0 and 0.5")
        end
        useMedianAsCenter = false
        useMeanAsCenter = false
        useTrimmedMeanAsCenter = true
        trimmedMeanPercent = percent
    end

    /* Used in dependent-sample tests */
    action RepeatedMeasures(boolean repeatedMeasures)
        me:repeatedMeasures = repeatedMeasures
    end

    /* Used in independent-sample tests */
    action AssumeNormalDistribution(boolean assume)
        assumeNormalDistribution = assume
    end

    /*
        This returns the probability if only one result exists.

        Attribute: Returns the P-Value. 
    */
    action GetProbabilityValue returns number
        return GetResult():GetProbabilityValue()
    end

    /*
        This returns the degrees of freedom if only one result exists.

        Attribute: Returns the Degrees of Freedom. 
    */
    action GetDegreesOfFreedom returns number
        return GetResult():GetDegreesOfFreedom()
    end

    /*
        This returns the test statistic if only one result exists.

        Attribute: Returns the test statistic. 
    */
    action GetTestStatistic returns number
        return GetResult():GetTestStatistic()
    end

    /*
        This returns the effect size if only one result exists.

        Attribute: Returns the effect size. 
    */
    action GetEffectSize returns number
        return GetResult():GetEffectSize()
    end

    /*
        This returns a result if only one exists.

        Attribute: Returns the CompareVariancesResult object
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareVariances
    
        DataFrame frame
        frame:Load("Data/Data.csv")

        CompareVariances compare
        compare:AddColumn(0)
        compare:AddColumn(1)
        compare:Calculate(frame)
        
        CompareVariancesResult result = compare:GetResult()
    */
    action GetResult returns CompareVariancesResult
        if results:GetSize() = 0
            alert("There are no results calculated")
        elseif results:GetSize() = 1
            return results:Get(0)
        else
            alert("There is more than one test result, use GetResults() for an array of all results")
        end
    end

    /*
        Attribute: Returns an array of CompareVariancesResult objects
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareVariances
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CompareVariances compare
        compare:AddColumn(0)
        compare:AddColumn(1)
        compare:AddColumn(2)
        frame:Calculate(compare)

        Array<CompareVariancesResult> results = compare:GetResults()
    */
    action GetResults returns Array<CompareVariancesResult>
        return results
    end

    /*
        Attribute: Returns a list of the important statistics of the test
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareVariances
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CompareVariances compare
        compare:Add(0)
        compare:Add(1)
        frame:Calculate(compare)

        output compare:GetSummary()
    */
    action GetSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        i = 0
        CompareVariancesResult result 
        repeat while i < results:GetSize()
            result = results:Get(i)

            summary = summary + lf
            summary = summary + result:GetSummary()
            summary = summary + lf
            i = i + 1
        end
        return summary
    end

    /*
        Attribute: Returns a DataFrame of the important statistics of the test
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareVariances
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CompareVariances compare
        compare:Add(0)
        compare:Add(1)
        frame:Calculate(compare)
        
        DataFrame result = compare:GetSummaryDataFrame()
        result:Save("myresult.csv")
    */
    action GetSummaryDataFrame returns DataFrame
        return GetResult():GetSummaryDataFrame()
    end

    /*
        This action summarizes the results and places them into formal academic language, in 
        APA format.
        For more information: https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf

        Attribute: Returns a condensed formal result of the test
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Tests.CompareVariances
    
        DataFrame frame
        frame:Load("Data/Data.csv")
    
        CompareVariances compare
        compare:Add(0)
        compare:Add(1)
        frame:Calculate(compare)

        output compare:GetFormalSummary()
    */
    action GetFormalSummary returns text
        text summary = ""
        text lf = summary:GetLineFeed()
        i = 0
        CompareVariancesResult result 
        repeat while i < results:GetSize()
            result = results:Get(i)

            summary = summary + lf
            summary = summary + result:GetFormalSummary()
            summary = summary + lf
            i = i + 1
        end
        return summary
    end


    // This is used for univariate designs, only checks for variance equality
    private action GetCenteredGroupsFrame(DataFrame groupFrame) returns DataFrame
        DataFrame centeredGroupFrame

        Array<text> groupsArray = groups:CopyToKeyArray()
        integer i = 0
        repeat while i < groupsArray:GetSize()
            text groupText = groupsArray:Get(i)
            DataFrame group = groups:GetValue(groupText)
            group:SelectAllColumns()
        
            NumberColumn centeredgroup
            centeredgroup:SetHeader(groupText)
            centeredGroupFrame:AddColumn(centeredgroup)

            NumberColumn uncenteredgroup
            uncenteredgroup:SetHeader(groupText)
            groupFrame:AddColumn(uncenteredgroup)

            number center = 0
            if useMeanAsCenter
                center = group:Mean()
            elseif useMedianAsCenter 
                // median in dataframe calculation different from levene's requirement, manually calculate
                Vector v = group:GetColumn(0):ConvertToVector()
                v:Sort()
                size = v:GetSize()
                if size mod 2 = 1
                    center = v:Get(size / 2)
                else
                    center = 0.5 * (v:Get((size / 2) - 1) + v:Get(size / 2))
                end
            elseif useTrimmedMeanAsCenter
                alert("Trimmed mean not yet implemented") 
            end

            DataFrameColumn column = group:GetColumn(0)
            j = 0
            repeat while j < column:GetSize()
                uncenteredgroup:Add(column:GetAsNumber(j))
                centeredgroup:Add(math:AbsoluteValue(column:GetAsNumber(j) - center))
                j = j + 1
            end
            i = i + 1     
        end
        return centeredGroupFrame
    end

    // This is only used for univariate designs
    private action GetGroupsFrame() returns DataFrame
        DataFrame groupFrame

        integer size = 0
        Array<text> groupsArray = groups:CopyToKeyArray()
        integer i = 0
        repeat while i < groupsArray:GetSize()
            text groupText = groupsArray:Get(i)
            DataFrame group = groups:GetValue(groupText)
            DataFrameColumn column = group:GetColumn(0)
            if repeatedMeasures
                if i = 0
                    size = column:GetSize()
                else
                    if size not= column:GetSize()
                        alert("Samples must be the same size for a repeated design.")
                    end
                end
            end
            group:GetColumn(0):SetHeader(groupText)
            groupFrame:AddColumn(group:GetColumn(0):Copy())
            i = i + 1     
        end

        return groupFrame
    end

    private action CheckDataIntegrity(DataFrame frame)
        i = 0
        repeat while i < frame:GetSelectedColumnSize()
            DataFrameColumn column = frame:GetColumn(frame:GetSelection():GetColumn(i))
    
            if column:IsUndefined()
                alert("Column is undefined.")
            end
            if not column:IsNumberColumn() and not column:IsIntegerColumn()
                alert("Columns must be numerical. " + column:GetHeader() + " is not a numerical column.")
            end
            if column:GetSize() < 2
                alert("Columns must have 2 or more entries. Not enough data for comparison to be calculated.")
            end
            i = i + 1
        end
    end
end