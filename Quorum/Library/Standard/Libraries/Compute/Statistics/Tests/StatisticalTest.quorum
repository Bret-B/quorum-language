package Libraries.Compute.Statistics.Tests

use Libraries.Compute.Statistics.Reporting.StatisticsFormatting
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Inputs.ColumnInput
use Libraries.Compute.Statistics.Inputs.FactorInput
use Libraries.Compute.Statistics.DataFrameCalculation
use Libraries.Compute.Statistics.Reporting.StatisticalTestResult
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Containers.HashTable

class StatisticalTest is DataFrameCalculation, ColumnInput, FactorInput
    StatisticsFormatting formatting

    number significanceLevel = 0.05
    boolean removeUndefined = false
    boolean useFactor = false
    text factorText = ""

    action Calculate(DataFrame frame) 
        /* 
            With most of these tests we want to make sure there are no undefined values.
            Since there are several ways to call this action, let's empty and reload 
            the selected columns here to ensure we remove all of the undesired rows.

            This is necessary since the mean, variance and other values of each 
            column are calculated independently and these values impact the results of this test.

            Some tests may need to keep all undefined values, for those this action will be overridden
            in those specific tests.
        */
        if removeUndefined
            frame:EmptySelectedColumns()
            i = 0
            repeat while i < GetColumnSize()
                frame:AddSelectedColumn(GetColumn(i))
                i = i + 1
            end
            DataFrame cleanFrame = frame:RemoveUndefinedRowsFromSelectedColumns()   

            RunTest(cleanFrame)
        else
            RunTest(frame)
        end
    end

    /*
        This action takes a DataFrame and a DataFrameColumn (filter) and separates that frame 
        into smaller DataFrames. One DataFrame for each unique item in the selected filter.
    */
    private action CalculateBy(DataFrame frame, integer filterIndex) 
        DataFrameColumn filter = frame:GetColumn(filterIndex):Copy(true,true)
        integer i = 0
        repeat while i < filter:GetSize()
            text header = filter:GetHeader()
            text dq = header:GetDoubleQuote()
            DataFrame newFrame     

            if filter:IsNumberColumn() or filter:IsIntegerColumn()
                newFrame = frame:Copy(header+"="+filter:GetAsNumber(i))
            elseif filter:IsDateTimeColumn()
                alert("Dataframe factor by datetime doesn't seem to work right now.")
                //newFrame = frame:Copy(header+"="+factor:GetAsDateTime(i))
            elseif filter:IsBooleanColumn()
                newFrame = frame:Copy(header+"="+filter:GetAsBoolean(i))
            else
                newFrame = frame:Copy(header+"="+dq+filter:GetAsText(i)+dq)
            end

            RunTest(newFrame)
            i = i + 1
        end
    end

    /*
        This action makes a new frame from a column based on a factor 
        and runs a test on the new frame.
    */
    private action CalculateWithFactor(DataFrame frame)
        if GetFactorSize() > 1
            alert("Only one factor allowed for now.")
        end
        if GetColumnSize() > 1
            alert("A factor can only be used on one column for now.")
        end

        // A list of unique items of the factor
        DataFrameColumn uniqueFactors = frame:GetColumn(GetFactor(0)):Copy(true,true)

        // Create a new frame based on that list
        DataFrame factorFrame
        integer i = 0
        repeat while i < uniqueFactors:GetSize()
            NumberColumn column
            column:SetHeader(uniqueFactors:GetAsText(i))
            factorFrame:AddColumn(column)
            i = i + 1
        end

        // Fill in new frame
        DataFrameColumn factor = frame:GetColumn(GetFactor(0))
        DataFrameColumn column = frame:GetColumn(GetColumn(0))
        i = 0
        repeat while i < column:GetSize()
            if not factor:IsUndefined(i) and not column:IsUndefined(i)
                factorFrame:GetColumn(factor:GetAsText(i)):Add(column:GetAsText(i))
            end
            i = i + 1
        end
        factorFrame:SelectAllColumns()
        EmptyFactors()
        EmptyColumns()
        factorFrame:GetSelection():CopyTo(cast(ColumnInput, me))

        useFactor = true
        factorText = column:GetHeader() + " by " + factor:GetHeader()
        RunTest(factorFrame)  
    end

    action GetStatisticalFormatting returns StatisticsFormatting
        return formatting
    end

    action SetStatisticalFormatting(StatisticsFormatting formatting)
        me:formatting = formatting
    end

    action GetSignificanceLevel returns number
        return significanceLevel
    end

    /*
        Sets the significance level of the test (default is 0.05).

        Attribute: Parameter significanceLevel the significance level between 0 and 1.
    */
    action SetSignificanceLevel(number significanceLevel)
        if significanceLevel >= 0 and significanceLevel <= 1
            me:significanceLevel = significanceLevel
        end
    end

    private action RemoveUndefined(boolean removeUndefined)
        me:removeUndefined = removeUndefined
    end

    action UseFactor returns boolean
        return useFactor
    end

    action GetFactorText returns text
        return factorText
    end

    /*
        Gets the the fully factored samples/groups in an array of dataframes.
        Using an array of dataframes instead of a single dataframe helps with multivariate cases.
    */
    action GetGroups(DataFrame frame) returns HashTable<text, DataFrame>
        integer numberOfFactors = frame:GetSelectedFactorSize()
        integer numberOfColumns = frame:GetSelectedColumnSize()

        HashTable<text, DataFrame> groups
        if numberOfFactors = 0
            i = 0
            repeat while i < numberOfColumns
                DataFrameColumn column = frame:GetColumn(frame:GetSelection():GetColumn(i))
                if column:IsUndefined()
                    alert("Column "+column:GetHeader()+" is undefined.")
                end

                NumberColumn newColumn
                newColumn:SetHeader(column:GetHeader())
                j = 0
                repeat while j < column:GetSize()
                    if not column:IsUndefined(j)
                        newColumn:Add(column:GetAsNumber(j))
                    end
                    j = j + 1
                end
                DataFrame group
                group:AddColumn(newColumn)
                groups:Add(column:GetHeader(), group)
                i = i + 1
            end  
        else
            i = 0
            repeat while i < numberOfColumns
                DataFrameColumn column = frame:GetColumn(frame:GetSelection():GetColumn(i))
                if column:IsUndefined()
                    alert("Column "+column:GetHeader()+" is undefined.")
                end
                text columnHeader = column:GetHeader()
                text groupText = columnHeader

                j = 0
                repeat while j < column:GetSize()
                    if not column:IsUndefined(j)
                        k = 0
                        repeat while k < numberOfFactors
                            DataFrameColumn factor = frame:GetColumn(frame:GetSelection():GetFactor(k))
                            if column:IsUndefined()
                                alert("Factor "+factor:GetHeader()+" is undefined.")
                            end
                            text factorHeader = factor:GetHeader()
                            if not factor:IsUndefined(j)
                                if numberOfFactors = 1
                                    if k = 0
                                        groupText = factor:GetAsText(j)
                                    end
                                else
                                    if k = 0
                                        groupText = factor:GetHeader()+"_"+factor:GetAsText(j)
                                    else
                                        groupText = groupText + ":" +factor:GetHeader()+"_"+factor:GetAsText(j)
                                    end
                                end
                            else
                                alert("Undefined entry for factor "+factorHeader+" at index "+j)
                            end
                            k = k + 1
                        end
                        if not groups:HasKey(groupText)
                            DataFrame group
                            NumberColumn col
                            col:Add(column:GetAsText(j))
                            col:SetHeader(columnHeader)
                            group:AddColumn(col)
                            groups:Add(groupText, group)
                        else
                            if i >= groups:GetValue(groupText):GetSize()
                                NumberColumn col
                                col:Add(column:GetAsText(j))
                                col:SetHeader(columnHeader)
                                groups:GetValue(groupText):AddColumn(col)
                            else
                                groups:GetValue(groupText):GetColumn(columnHeader):Add(column:GetAsText(j))
                            end
                        end
                    end
                    j = j + 1
                end
                i = i + 1 
            end
        end
        return groups
    end

    private blueprint action RunTest(DataFrame frame) 
end