package Libraries.Compute.Statistics.Columns

use Libraries.Containers.Array
use Libraries.Compute.Statistics.DataFrameColumnCalculation
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Vector
use Libraries.Containers.HashTable
use Libraries.Containers.Iterator

/*
    NumberColumn is a DataFrameColumn that contains Number objects. These objects can be undefined
    or not. 

    Attribute: Author Andreas Stefik
*/
class NumberColumn is DataFrameColumn
    /* This is the new system, which is rows. */
    Array<Number> rows

    action Add(text value)
        if value = undefined or value:IsEmpty()
            rows:Add(undefined)
            parent:DataFrameColumn:undefinedSize = GetUndefinedSize() + 1
            return now
        end

        check 
            number num = cast(number, value)
            rows:Add(num)
        detect e
            rows:Add(undefined) //add a missing value
            parent:DataFrameColumn:undefinedSize = GetUndefinedSize() + 1
        end
    end

    
    action Add(number value)
        rows:Add(value)
    end

    action ConvertToVector returns Vector
        Vector vector
        vector:SetSize(GetSize())
        i = 0
        repeat while i < rows:GetSize()
            Number value = rows:Get(i)
            if value = undefined
                vector:Set(i, 0)
            else
                vector:Set(i, value)
            end
            i = i + 1
        end
        return vector
    end

    action CanConvertToVector returns boolean
        return true
    end

    action IsUndefined(integer row) returns boolean
        return rows:Get(row) = undefined
    end

    action Get(integer row) returns Number
        return rows:Get(row)
    end

    

    action GetAsText(integer index) returns text
        Number value = rows:Get(index)
        if value = undefined
            return undefined
        else
            return "" + value:GetValue()
        end
    end

    action SendValueTo(integer index, DataFrameColumnCalculation calculation)
        Number num = rows:Get(index)
        calculation:Add(num)
    end

    action GetAsInteger(integer index) returns integer
        return cast(integer, GetAsNumber(index))
    end

    action GetAsNumber(integer index) returns number
        Number num = rows:Get(index)
        if num = undefined
            alert("Cannot convert value at position " + index + " to number.")
        end
        return num:GetValue()
    end

    action IsNumberColumn returns boolean
        return true
    end

    action SetAsNumber(integer index, number value)
        rows:Set(index, value)
    end

    action SetAsNumber(integer index, Number value)
        if value = undefined
            rows:Set(index,undefined)
        else
            rows:Set(index,value:GetValue())
        end
    end

    action SetAsInteger(integer index, integer value)
        rows:Set(index, value)
    end

    action SetSize(integer size)
        rows:SetSize(size)
    end

    action GetSize returns integer
        return rows:GetSize()
    end

    action Swap(integer left, integer right)
        Number temp = undefined
        temp = rows:Get(left)
        rows:Set(left, rows:Get(right))
        rows:Set(right, temp)
    end

    action Move(integer left, integer right)
        rows:Set(right, rows:Get(left))
    end

    action Copy(integer rowStart, integer rowEnd) returns DataFrameColumn
        NumberColumn column
        column:SetHeader(GetHeader())

        i = rowStart
        repeat while i < rowEnd
            Number value = rows:Get(i)
            if value = undefined
                column:rows:Add(undefined)
            else
                Number value2
                value2:SetValue(value:GetValue())
                column:rows:Add(value2)
            end
            i = i + 1
        end

        return column
    end

    action Copy returns DataFrameColumn
        return Copy(0, rows:GetSize())
    end

    action Copy(integer rowStart, integer rowEnd, boolean sort, boolean unique) returns DataFrameColumn
        NumberColumn column
        column:SetHeader(GetHeader())

        Array<Number> newRows
        i = rowStart
        repeat while i < rowEnd
            Number value = rows:Get(i)
            if value = undefined
                newRows:Add(undefined)
            else
                Number value2
                value2:SetValue(value:GetValue())
                newRows:Add(value2)
            end
            i = i + 1
        end

        //if it's unique or sortable, now do that
        if unique
            newRows = GetUnique(newRows)
        end

        if sort
            newRows:Sort()
        end
        column:rows = newRows

        return column
    end

    action Copy(boolean sort, boolean unique) returns DataFrameColumn
        return Copy(0, rows:GetSize(), sort, unique)
    end

    action CopyToRow(DataFrameColumn column, integer to, integer from)
        me:SetAsNumber(to,column:GetAsNumber(from))
    end

    private action CalculateValueCount(Array<Number> values) returns HashTable<number,integer>
        HashTable<number, integer> hash
        i = 0
        repeat while i < rows:GetSize()
            if rows:Get(i) not= undefined
                if hash:HasKey(rows:Get(i))
                    hash:Add(rows:Get(i), hash:GetValue(rows:Get(i)) + 1)
                else
                    hash:Add(rows:Get(i), 1)
                end
            end
            i = i + 1
        end
        return hash
    end

    private action GetUnique(Array<Number> array) returns Array<Number>
        Array<Number> set
        HashTable<number,integer> hash = CalculateValueCount(array)
        Iterator<number> iterator = hash:GetKeyIterator()
        repeat while iterator:HasNext()
            set:Add(iterator:Next())
        end
        return set
    end



    action CalculateValueCount() returns HashTable<number,integer>
        HashTable<number, integer> hash
        i = 0
        repeat while i < rows:GetSize()
            if hash:HasKey(rows:Get(i))
                hash:Add(rows:Get(i), hash:GetValue(rows:Get(i)) + 1)
            else
                hash:Add(rows:Get(i), 1)
            end
            i = i + 1
        end
        return hash
    end

    action GetUnique() returns Array<Number>
        Array<Number> set
        HashTable<number,integer> hash = CalculateValueCount()
        Iterator<number> iterator = hash:GetKeyIterator()
        repeat while iterator:HasNext()
            set:Add(iterator:Next())
        end
        return set
    end

    action ToText returns text
        text result = ""
        text lf = result:GetLineFeed()
        i = 0
        repeat while i < GetSize()
            Number num = rows:Get(i)
            if num not= undefined
                number value = num:GetValue()
                result = result + value + lf
            else
                result = result + GetUndefinedText() + lf
            end
            i = i + 1
        end
        return result
    end
end