package Libraries.Compute.Statistics.Columns

use Libraries.Containers.Array
use Libraries.Compute.Random
use Libraries.Containers.HashTable
use Libraries.Compute.Statistics.DataFrameColumnCalculation
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Vector
use Libraries.Containers.Iterator
use Libraries.Language.Compile.Interpreter.Result
use Libraries.Language.Compile.Symbol.Type

/*
    IntegerColumn is a DataFrameColumn that contains Number objects. These objects can be undefined
    or not. 

    Attribute: Author Andreas Stefik
*/
class IntegerColumn is DataFrameColumn
    /* This is the new system, which is rows. */
    Array<Integer> rows
    

    action Add(text value)
        if value = undefined
            rows:Add(undefined)
            parent:DataFrameColumn:undefinedSize = GetUndefinedSize() + 1
            return now
        end

        check 
            integer num = cast(integer, value)
            rows:Add(num)
        detect e
            rows:Add(undefined) //add a missing value
            parent:DataFrameColumn:undefinedSize = GetUndefinedSize() + 1
        end
    end

    action AddAsResult(Result value)
        if not IsResultCheckable(value) rows:Add(undefined) return now end
        Type type = value:type
        if type:IsInteger()
            rows:Add(value:integerValue)
        else
            rows:Add(undefined)
        end
    end

    /*
        By default, this replaces all undefined values with the integer value of the text passed in.
        If the text passed in is not an integer, then this call is ignored

        Attribute: Parameter value the value to be converted.        
    */
    action ReplaceUndefined(text value)
        check 
            integer num = cast(integer, value)
            row = 0
            repeat while row < GetSize()
                if IsUndefined(row)
                    SetAsInteger(row, num)
                end
                row = row + 1
            end
        detect e
            return now
        end
    end

    action SetAsResult(integer index, Result value)
        if not IsResultCheckable(value) rows:Set(index, undefined) return now end
        Type type = value:type
        if type:IsInteger()
            rows:Set(index, value:integerValue)
        else
            rows:Set(index, undefined)
        end
    end

    action Add(integer value)
        rows:Add(value)
    end

    action SendValueTo(integer index, DataFrameColumnCalculation calculation)
        Integer int = rows:Get(index)
        calculation:Add(int)
    end

    action GetAsNumber(integer index) returns number
        Integer num = rows:Get(index)
        if num = undefined
            alert("Cannot convert value at position " + index + " to number.")
        end
        return num:GetValue()
    end

    action GetAsInteger(integer index) returns integer
        Integer num = rows:Get(index)
        if num = undefined
            alert("Cannot convert value at position " + index + " to number.")
        end
        return num:GetValue()
    end

    action SetAsInteger(integer index, integer value)
        rows:Set(index, value)
    end

    action SetAsText(integer index, Integer value)
        if value = undefined
            rows:Set(index,undefined)
        else
            rows:Set(index,value:GetValue())
        end
    end

    action SetAsNumber(integer index, number value)
        rows:Set(index, cast(integer, value))
    end

    action IsIntegerColumn returns boolean
        return true
    end

    action IsNumberColumn returns boolean
        return true
    end

    action GetAsText(integer index) returns text
        Integer value = rows:Get(index)
        if value = undefined
            return undefined
        else
            return "" + value:GetValue()
        end
    end

    action ConvertToVector returns Vector
        Vector vector
        vector:SetSize(GetSize())
        i = 0
        repeat while i < rows:GetSize()
            Integer value = rows:Get(i)
            if value = undefined
                vector:Set(i, 0)
            else
                vector:Set(i, value:GetValue())
            end
            i = i + 1
        end
        return vector
    end

    action CanConvertToVector returns boolean
        return true
    end

    action SetSize(integer size)
        rows:SetSize(size)
    end

    action GetSize returns integer
        return rows:GetSize()
    end

    action IsUndefined(integer row) returns boolean
        return rows:Get(row) = undefined
    end

    action Get(integer row) returns Integer
        return rows:Get(row)
    end

    action Swap(integer left, integer right)
        Integer temp = undefined
        temp = rows:Get(left)
        rows:Set(left, rows:Get(right))
        rows:Set(right, temp)
    end

    action Move(integer left, integer right)
        rows:Set(right, rows:Get(left))
    end

    action Copy(integer rowStart, integer rowEnd) returns DataFrameColumn
        IntegerColumn column
        column:SetHeader(GetHeader())

        i = rowStart
        repeat while i < rowEnd
            Integer value = rows:Get(i)
            if value = undefined
                column:rows:Add(undefined)
            else
                Integer value2
                value2:SetValue(value:GetValue())
                column:rows:Add(value2)
            end
            i = i + 1
        end

        return column
    end

    action Copy returns DataFrameColumn
        return Copy(0, rows:GetSize())
    end

    action Copy(integer rowStart, integer rowEnd, boolean sort, boolean unique) returns DataFrameColumn
        IntegerColumn column
        column:SetHeader(GetHeader())

        Array<Integer> newRows
        i = rowStart
        repeat while i < rowEnd
            Integer value = rows:Get(i)
            if value = undefined
                newRows:Add(undefined)
            else
                Integer value2
                value2:SetValue(value:GetValue())
                newRows:Add(value2)
            end
            i = i + 1
        end

        //if it's unique or sortable, now do that
        if unique
            newRows = GetUnique(newRows)
        end

        if sort
            if GetSortComparison() not= undefined
                newRows:Sort(GetSortComparison())
            else
                newRows:Sort(me)
            end
        end
        column:rows = newRows

        return column
    end

    action Copy(boolean sort, boolean unique) returns DataFrameColumn
        return Copy(0, rows:GetSize(), sort, unique)
    end

    action CopyToRow(DataFrameColumn column, integer to, integer from)
        me:SetAsInteger(to,column:GetAsInteger(from))
    end

    private action CalculateValueCount(Array<Integer> values) returns HashTable<integer,integer>
        HashTable<integer, integer> hash
        i = 0
        repeat while i < rows:GetSize()
            if hash:HasKey(rows:Get(i))
                hash:Add(rows:Get(i), hash:GetValue(rows:Get(i)) + 1)
            else
                hash:Add(rows:Get(i), 1)
            end
            i = i + 1
        end
        return hash
    end

    private action GetUnique(Array<Integer> array) returns Array<Integer>
        Array<Integer> set
        HashTable<integer,integer> hash = CalculateValueCount(array)
        Iterator<integer> iterator = hash:GetKeyIterator()
        repeat while iterator:HasNext()
            set:Add(iterator:Next())
        end
        return set
    end

    action ToText returns text
        text result = ""
        text lf = result:GetLineFeed()
        i = 0
        repeat while i < GetSize()
            Integer num = rows:Get(i)
            if num not= undefined
                integer value = num:GetValue()
                result = result + value + lf
            else
                result = result + GetUndefinedText() + lf
            end
            
            i = i + 1
        end
        return result
    end
end