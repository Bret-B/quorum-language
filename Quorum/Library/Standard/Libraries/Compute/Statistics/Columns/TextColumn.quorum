package Libraries.Compute.Statistics.Columns

use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Containers.Iterator
use Libraries.Compute.Statistics.DataFrameColumnCalculation
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Statistics.Columns.IntegerColumn
use Libraries.Compute.Statistics.Columns.BooleanColumn

/*
    TextColumn is a DataFrameColumn that contains Number objects. These objects can be undefined
    or not. 

    Attribute: Author Andreas Stefik
*/
class TextColumn is DataFrameColumn
    /* This is the new system, which is rows. */
    Array<Text> rows

    action Add(text value)
        if value = undefined or value:IsEmpty()
            rows:Add(undefined)
            parent:DataFrameColumn:undefinedSize = GetUndefinedSize() + 1
            return now
        end

        rows:Add(value)
    end

    action SendValueTo(integer index, DataFrameColumnCalculation calculation)
        Text num = rows:Get(index)
        calculation:Add(num)
    end

    action SetSize(integer size)
        rows:SetSize(size)
    end

    action GetSize returns integer
        return rows:GetSize()
    end

    action IsUndefined(integer row) returns boolean
        return rows:Get(row) = undefined
    end

    action Get(integer row) returns Text
        return rows:Get(row)
    end

    action GetAsText(integer index) returns text
        Text value = rows:Get(index)
        if value = undefined
            return undefined
        else
            return value:GetValue()
        end
    end

    action SetAsText(integer index, text value)
        rows:Set(index, value)
    end

    action SetAsText(integer index, Text value)
        if value = undefined
            rows:Set(index,undefined)
        else
            rows:Set(index,value:GetValue())
        end
    end

    action IsTextColumn returns boolean
        return true
    end

    action Swap(integer left, integer right)
        Text temp = undefined
        temp = rows:Get(left)
        rows:Set(left, rows:Get(right))
        rows:Set(right, temp)
    end

    action Move(integer left, integer right)
        rows:Set(right, rows:Get(left))
    end

    action Copy(integer rowStart, integer rowEnd) returns DataFrameColumn
        TextColumn column
        column:SetHeader(GetHeader())

        i = rowStart
        repeat while i < rowEnd
            Text value = rows:Get(i)
            if value = undefined
                column:rows:Add(undefined)
            else
                Text value2
                value2:SetValue(value:GetValue())
                column:rows:Add(value2)
            end
            i = i + 1
        end

        return column
    end

    action Copy returns DataFrameColumn
        return Copy(0, rows:GetSize())
    end

    action Copy(integer rowStart, integer rowEnd, boolean sort, boolean unique) returns DataFrameColumn
        TextColumn column
        column:SetHeader(GetHeader())

        Array<Text> newRows
        i = rowStart
        repeat while i < rowEnd
            Text value = rows:Get(i)
            if value = undefined
                newRows:Add(undefined)
            else
                Text value2
                value2:SetValue(value:GetValue())
                newRows:Add(value2)
            end
            i = i + 1
        end

        //if it's unique or sortable, now do that
        if unique
            newRows = GetUnique(newRows)
        end

        if sort
            if GetSortComparison() not= undefined
                newRows:Sort(GetSortComparison())
            else
                newRows:Sort()
            end
        end
        column:rows = newRows

        return column
    end

    action Copy(boolean sort, boolean unique) returns DataFrameColumn
        return Copy(0, rows:GetSize(), sort, unique)
    end

    action CopyToRow(DataFrameColumn column, integer to, integer from)
        me:SetAsText(to,column:GetAsText(from))
    end

    action CopyToColumns(boolean sort, boolean unique) returns Array<DataFrameColumn>
        Array<DataFrameColumn> columns
        Array<Text> numbers = undefined
        if unique
            numbers = GetUnique(rows)
        else
            Array<Text> numbers2
            numbers = numbers2
            i = 0
            repeat while i < rows:GetSize()
                numbers:Add(rows:Get(i))
                i = i + 1
            end
        end

        if sort
            numbers:Sort()
        end

        i = 0
        repeat while i < numbers:GetSize()
            TextColumn column
            column:SetHeader("" + numbers:Get(i):GetValue())
            columns:Add(column)
            i = i + 1
        end
        return columns
    end

    private action CalculateValueCount(Array<Text> values) returns HashTable<text,integer>
        HashTable<text, integer> hash
        i = 0
        repeat while i < rows:GetSize()
            if rows:Get(i) not= undefined
                if hash:HasKey(rows:Get(i))
                    hash:Add(rows:Get(i), hash:GetValue(rows:Get(i)) + 1)
                else
                    hash:Add(rows:Get(i), 1)
                end
            end
            i = i + 1
        end
        return hash
    end

    private action GetUnique(Array<Text> array) returns Array<Text>
        Array<Text> set
        HashTable<text,integer> hash = CalculateValueCount(array)
        Iterator<text> iterator = hash:GetKeyIterator()
        repeat while iterator:HasNext()
            set:Add(iterator:Next())
        end
        return set
    end

    action CalculateValueCount() returns HashTable<text,integer>
        HashTable<text, integer> hash
        i = 0
        repeat while i < rows:GetSize()
            if hash:HasKey(rows:Get(i))
                hash:Add(rows:Get(i), hash:GetValue(rows:Get(i)) + 1)
            else
                hash:Add(rows:Get(i), 1)
            end
            i = i + 1
        end
        return hash
    end

    action GetUnique() returns Array<Text>
        Array<Text> set
        HashTable<text,integer> hash = CalculateValueCount()
        Iterator<text> iterator = hash:GetKeyIterator()
        repeat while iterator:HasNext()
            set:Add(iterator:Next())
        end
        return set
    end

    action ToText returns text
        text result = ""
        text lf = result:GetLineFeed()
        i = 0
        repeat while i < GetSize()
            Text t = rows:Get(i)
            if t not= undefined
                text value = t:GetValue()
                result = result + value + lf
            else
                result = result + GetUndefinedText() + lf
            end
            
            i = i + 1
        end
        return result
    end
end