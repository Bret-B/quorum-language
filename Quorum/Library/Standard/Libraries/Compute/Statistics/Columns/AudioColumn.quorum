package Libraries.Compute.Statistics.Columns

use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Sound.AudioSamples
use Libraries.Compute.Statistics.DataFrameColumnCalculation
use Libraries.Compute.Vector
use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Containers.Iterator

/*
    AudioColumn is a DataFrameColumn that contains number objects. The AudioColumn
    must have an AudioSamples object manually loaded into it. Because this column 
    contains AudioSamples objects, which must contain samples at each point, no
    row can be possibly be undefined. The same representation can be used for 
    multi-channel audio, by setting the channel per column.

    Attribute: Author Andreas Stefik
*/
class AudioColumn is DataFrameColumn
    AudioSamples samples = undefined
    integer channel = 0

    action SendValueTo(integer index, DataFrameColumnCalculation calculation)
        number value = samples:Get(index)
        calculation:Add(value)
    end

    action ConvertToVector returns Vector
        Vector vector
        vector:SetSize(samples:GetSize())
        i = 0
        repeat while i < samples:GetSize()
            number value = samples:Get(i, channel)
            vector:Set(i, value)
            i = i + 1
        end
        return vector
    end

    action GetAsNumber(integer index) returns number
        return samples:Get(index, channel)
    end

    action CanConvertToVector returns boolean
        return true
    end

    action GetSize returns integer
        return samples:GetSize()
    end

    action GetSamples returns AudioSamples
        return samples
    end

    action SetSamples(AudioSamples samples)
        me:samples = samples
    end

    action Copy returns DataFrameColumn
        AudioSamples copy = samples:Copy()
        AudioColumn col
        col:SetSamples(copy)
        col:SetHeader(GetHeader())
        return col
    end

    action IsNumberColumn returns boolean
        return true
    end

    action SetAsNumber(integer index, number value)
        samples:Set(index, value)
    end

    action Swap(integer left, integer right)
        number temp = 0
        temp = samples:Get(left)
        samples:Set(left, samples:Get(right))
        samples:Set(right, temp)
    end

    
    action SetSize(integer size)
        samples:SetSize(size)
    end

    /*
        An AudioColumn uses an underlying AudioSamples object, which cannot have
        undefined items.
    */
    action IsUndefined(integer row) returns boolean
        return false
    end
    /*
        This action moves the value in row left to the value in row right. 

        Attribute: Parameter left the first index to swap
        Attribute: Parameter right the second index to swap
    */
    action Move(integer left, integer right)
        samples:Set(right, samples:Get(left))
    end

    /* 
        This action does a deep copy of the row between the 0-indexed rowStart and rowEnd. 

        Attribute: Parameter rowStart the first row to copy
        Attribute: Parameter rowEnd the last row to copy
    */
    action Copy(integer rowStart, integer rowEnd) returns DataFrameColumn
        AudioSamples copy = samples:Copy(rowStart, rowEnd)
        AudioColumn col
        col:SetSamples(copy)
        col:SetHeader(GetHeader())
        return col
    end

    action ConvertToVector(integer rowStart, integer rowEnd) returns Vector
        Vector vector
        vector:SetSize(rowEnd - rowStart)
        i = rowStart
        repeat while i < rowEnd
            number value = samples:Get(i, channel)
            vector:Set(i, value)
            i = i + 1
        end
        return vector
    end

    action Copy(integer rowStart, integer rowEnd, boolean sort, boolean unique) returns DataFrameColumn
        Vector vector = ConvertToVector(rowStart, rowEnd)

        if unique
            HashTable<number, integer> hash
            i = 0
            repeat while i < vector:GetSize()
                if hash:HasKey(vector:Get(i))
                    hash:Add(vector:Get(i), hash:GetValue(vector:Get(i)) + 1)
                else
                    hash:Add(vector:Get(i), 1)
                end
                i = i + 1
            end

            Vector vector2
            vector2:SetSize(hash:GetSize())
            i = 0
            Iterator<number> iterator = hash:GetKeyIterator()
            repeat while iterator:HasNext()
                vector:Set(i, iterator:Next())
                i = i + 1
            end

            vector = vector2
        end

        if sort
            vector:Sort()
        end

        AudioSamples copy
        copy:SetChannels(samples:GetChannels())
        copy:SetSamplesPerSecond(samples:GetSamplesPerSecond())
        copy:SetSize(vector:GetSize())
        i = 0
        repeat while i < vector:GetSize()
            copy:Set(i, vector:Get(i), 0)
            i = i + 1
        end
        
        AudioColumn col
        col:SetSamples(copy)
        col:SetHeader(GetHeader())
        return col
    end

    action Copy(boolean sort, boolean unique) returns DataFrameColumn
        return Copy(0, samples:GetSize(), sort, unique)
    end

    action CopyToRow(DataFrameColumn column, integer to, integer from)
        me:SetAsNumber(to,column:GetAsNumber(from))
    end

    action ToText returns text
        text result = ""
        text lf = result:GetLineFeed()
        i = 0
        repeat while i < GetSize()
            number value = GetAsNumber(i)
            result = result + value + lf
            i = i + 1
        end
        return result
    end

    action GetChannel returns integer
        return channel
    end

    action SetChannel(integer channel)
        me:channel = channel
    end
end