package Libraries.Compute.Statistics.Analysis
use Libraries.Compute.Math

/*
    This is inspired by Brent's algorithm in apache commons.
    This class implements the <a href="http://mathworld.wolfram.com/BrentsMethod.html">
    Brent algorithm</a> for finding zeros of real univariate functions.
    The function should be continuous but not necessarily smooth.
    The {@code solve} method returns a zero x of the function code f
    in the given interval [a, b] to within a tolerance
    2 eps abs(x) + t} where  eps is the relative accuracy and
    t is the absolute accuracy.
    <p>The given interval must bracket the root.</p>
*/
class RootFinder
    constant number DEFAULT_ABSOLUTE_ACCURACY = 0.000001
    number absoluteAccuracy = DEFAULT_ABSOLUTE_ACCURACY
    UnivariateAction function = undefined
    integer maxIterations = 500 //make the default the same as in Python
    integer currentIteration = 0
    number minimum = 0
    number maximum = 0
    number initial = 0
    constant number DEFAULT_RELATIVE_ACCURACY = 0.00000000000001
    number relativeAccuracy = DEFAULT_RELATIVE_ACCURACY

    constant number DEFAULT_ACTION_VALUE_ACCURACY = 0.000000000000001
    number actionValueAccuracy = DEFAULT_ACTION_VALUE_ACCURACY
    boolean isError = true

    action GetFunction returns UnivariateAction
        return function
    end

    action SetFunction(UnivariateAction function)
        me:function = function
    end

    action GetCurrentIteration returns integer
        return currentIteration
    end

    action GetMinimum returns number
        return minimum
    end

    action SetMinimum(number minimum)
        me:minimum = minimum
    end

    action GetMaximum returns number
        return maximum
    end

    action SetMaximum(number maximum)
        me:maximum = maximum
    end

    private action GetValueAndIncrement(number value) returns number
        currentIteration = currentIteration + 1
        return function:Calculate(value)
    end

    /*
        Finds the root, if possible, at the given bracket [minimum, maximum].

        Attribute: Returns The root.
    */
    action Find returns number
        if minimum > maximum
            alert("Invalid min and max values passed to solver because maximum is less than the minimum.")
        end
        Math math
        number yInitial = GetValueAndIncrement(me:initial)
        if math:AbsoluteValue(yInitial) <= actionValueAccuracy
            return me:initial
        end

        number yMin = GetValueAndIncrement(me:minimum)
        if math:AbsoluteValue(yMin) <= actionValueAccuracy
            return me:minimum
        end
        
        if yInitial * yMin < 0
            return Brent(minimum, initial, yMin, yInitial)
        end

        number yMax = GetValueAndIncrement(me:maximum)
        if math:AbsoluteValue(yMax) <= actionValueAccuracy
            return me:maximum
        end

        if yInitial * yMax < 0
            return Brent(initial, maximum, yInitial, yMax)
        end

        alert("Could not bracket this action with values (initial, min, max): " + initial + ", " + minimum + ", " + maximum + ".")
    end

    private action Brent(number lo, number hi, number fLo, number fHi) returns number
        number a = lo
        number fa = fLo
        number b = hi
        number fb = fHi
        number c = a
        number fc = fa
        number d = b - a
        number e = d

        number t = absoluteAccuracy
        number eps = relativeAccuracy
        Math math
        boolean done = false
        repeat while not done
            if math:AbsoluteValue(fc) < math:AbsoluteValue(fb)
                a = b
                b = c
                c = a
                fa = fb
                fb = fc
                fc = fa
            end

            constant number tol = 2 * eps * math:AbsoluteValue(b) + t
            constant number m = 0.5 * (c - b)

            if math:AbsoluteValue(m) <= tol
               or math:Equals(fb, 0, relativeAccuracy)
                isError = false
                return b
            end

            if math:AbsoluteValue(e) < tol or 
               math:AbsoluteValue(fa) <= math:AbsoluteValue(fb)
                d = m
                e = d
            else
                number s = fb / fa
                number p = 0
                number q = 0
                if a = c
                    p = 2 * m * s
                    q = 1 - s
                else
                    q = fa / fc
                    constant number r = fb / fc
                    p = s * (2 * m * q * (q - r) - (b - a) * (r - 1))
                    q = (q - 1) * (r - 1) * (s - 1)
                end


                if p > 0
                    q = -q
                else
                    p = -p
                end
                s = e
                e = d

                if p > 1.5 * m * q - math:AbsoluteValue(tol * q) or
                    p >= math:AbsoluteValue(0.5 * s * q)
                    d = m
                    e = d
                else
                    d = p / q
                end

            end
            a = b
            fa = fb

            if math:AbsoluteValue(d) > tol
                b = b + d
            elseif m > 0
                b = b + tol
            else
                b = b - tol
            end

            fb = GetValueAndIncrement(b)
            if currentIteration > maxIterations
                done = true
                isError = true
                return 0
            end
            
            if (fb > 0 and fc > 0) or (fb <= 0 and fc <= 0)
                c = a
                fc = fa
                d = b - a
                e = d
            end
        end
        return 0
    end

    action GetInitial returns number
        return initial
    end

    action SetInitial(number initial)
        me:initial = initial
    end

    action SetDefaultInitial
        me:initial = minimum + 0.5 * (maximum - minimum)
    end

    action IsError returns boolean
        return isError
    end

    action GetMaxIterations returns integer
        return maxIterations
    end

    action SetMaxIterations(integer maxIterations)
        me:maxIterations = maxIterations
    end

    action GetAbsoluteAccuracy returns number
        return absoluteAccuracy
    end

    action SetAbsoluteAccuracy(number absoluteAccuracy)
        me:absoluteAccuracy = absoluteAccuracy
    end
end