package Libraries.Compute.Statistics
use Libraries.Compute.Statistics.DataFrameColumnCalculation
use Libraries.Compute.Vector
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Statistics.Columns.IntegerColumn
use Libraries.Compute.Statistics.Columns.BooleanColumn
use Libraries.Compute.Statistics.Columns.TextColumn
use Libraries.Compute.Statistics.Columns.DateTimeColumn
use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.System.DateTime
use Libraries.Containers.Support.Comparison
use Libraries.Language.Compile.Interpreter.Result

/*
    This class represents a column on the system. Columns do not have a type themselves,
    but all subclasses can be made to have any arbitrary type, even custom ones. Columns
    by default can accept calculations, which send elements to the calculation of the 
    appropriate type and conduct operations. DataFrame objects use the appropriate
    subclass of column automatically when reading in data frames from disk, based
    upon the first item in the spreadsheet.

    Note that in most cases, a user will not interact directly with this class. It is a 
    parent class that encapsulates some common functionality, but typically one would 
    pass a calculation or other operation to this class. The raw data of a column can 
    also be manipulated directly, but type information must be checked through the appropriate
    actions (e.g., IsBooleanColumn). This is to balance the need to sometimes iterate through
    a column with the opposite need to manipulate its data directly. 

    Attribute: Author Andreas Stefik

    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.DataFrameColumn

    //Load a comma separated file
    DataFrame frame
    frame:Load("Data.csv") 
    DataFrameColumn col = frame:GetColumn(0)
    output col:ToText()
*/
class DataFrameColumn is Comparison
    /* This is the name of the column. */
    text header = ""
    integer undefinedSize = 0
    Comparison comparison = undefined
    
    /*
        This gets the header for this column.
    */
    action GetHeader returns text
        return header
    end

    /*
        This sets the header for this column.
    */
    action SetHeader(text header)
        me:header = header
    end

    /*
        Columns may optionally add data from a text representation of that data. 
        This can be in any arbitrary format determined by the column implementor. The 
        Add action does the auto-conversion, while the set values are only accepted
        if that data type is allowed. The broad purpose is to allow this action to read in
        from an arbitrary text source and add it to the column.

        Attribute: Parameter value The value to be converted to the proper type for this kind of column.
    */
    action Add(text value)
    end

    /*
        If the column has undefined values, this action replaces all rows that have undefined with 
        a value selected from text. If the text value is invalid for this column, the call is ignored.

        Attribute: Parameter value The value to be replaced.
    */
    action ReplaceUndefined(text value)
    end

    /*
        Columns may optionally add data from the Runtime system. 
        In this case, columns may optionally choose to accept or reject a particular Libraries.Language.Compile.Interpreter.Result based on type. 
        If the column is rejected, an undefined value is placed at the new position. The Result object
        must have a corresponding Libraries.Language.Compile.Symbol.Type.

        Attribute: Parameter value The Libraries.Language.Compile.Interpreter.Result to be converted to the proper type for this kind of column.
    */
    action AddAsResult(Result value)
    end

    /*
        Returns whether or not the result is checkable inside sub-types.This action generally should not be used.

        Attribute: Parameter value The Libraries.Language.Compile.Interpreter.Result to check
        Attribute: Returns whether or not it is valid
    */
    action IsResultCheckable(Result value) returns boolean
        if value not= undefined and value:type not= undefined
            return true
        else
            return false
        end
    end

    /*
        This action sets the index to Libraries.Language.Compile.Interpreter.Result if and only if the
        column accepts values of this type. If it does not, undefined is placed at this index.

        Attrribute: Parameter index the item to be converted
        Attribute: Parameter value the value to be placed in the column
    */
    action SetAsResult(integer index, Result value)
        alert("Cannot convert value at position " + index + " to text.")
    end

    /*
        This action sends an individual data point to a calculation, typed
        appropriately by its subclass.

        Attribute: Parameter index Which part of the column to send the calculation
        Attribute: Parameter calculation the calculation to run on this part of the column
    */
    action SendValueTo(integer index, DataFrameColumnCalculation calculation)
    end

    /*
        This action detects whether a particular index is an undefined value in the column.

        Attribute: Parameter row The row of the column to check
        Attribute: Returns true if the row is undefined
    */
    blueprint action IsUndefined(integer row) returns boolean


    /*
        This action detects whether this column ultimately stores numbers inside of it. This
        type of information is implementation dependent, as arbitrary columns can store
        these numbers however they see fit.
        
        Attribute: Returns true if this column stores numbers
    */
    action IsNumberColumn returns boolean
        return false
    end

    /*
        This action detects whether this column ultimately stores booleans inside of it. This
        type of information is implementation dependent, as arbitrary columns can store
        these values however they see fit.
        
        Attribute: Returns true if this column stores booleans
    */
    action IsBooleanColumn returns boolean
        return false
    end

    /*
        This action detects whether this column ultimately stores text inside of it. This
        type of information is implementation dependent, as arbitrary columns can store
        these values however they see fit.
        
        Attribute: Returns true if this column stores text
    */
    action IsTextColumn returns boolean
        return false
    end

    /*
        This action detects whether this column ultimately stores integers inside of it. This
        type of information is implementation dependent, as arbitrary columns can store
        these values however they see fit.
        
        Attribute: Returns true if this column stores integers
    */
    action IsIntegerColumn returns boolean
        return false
    end

    /*
        This action detects whether this column ultimately stores dates/times inside of it. This
        type of information is implementation dependent, as arbitrary columns can store
        these values however they see fit.
        
        Attribute: Returns true if this column stores dates/times
    */
    action IsDateTimeColumn returns boolean
        return false
    end

    /*
        Regardless of the type of the column, this action attempts
        to convert the item at the index to a number. 

        Attrribute: Parameter index the item to be converted
    */
    action GetAsNumber(integer index) returns number
        alert("Cannot convert value at position " + index + " to number.")
    end

    /*
        Regardless of the type of the column, this action attempts
        to convert the item at the index to text. 

        Attrribute: Parameter index the item to be converted
    */
    action GetAsText(integer index) returns text
        alert("Cannot convert value at position " + index + " to text.")
    end

    /*
        Regardless of the type of the column, this action attempts
        to convert the item at the index to a boolean. 

        Attrribute: Parameter index the item to be converted
    */
    action GetAsBoolean(integer index) returns boolean
        alert("Cannot convert value at position " + index + " to a boolean.")
    end

    /*
        Regardless of the type of the column, this action attempts
        to convert the item at the index to an integer. 

        Attrribute: Parameter index the item to be converted
    */
    action GetAsInteger(integer index) returns integer
        alert("Cannot convert value at position " + index + " to an integer.")
    end

    /*
        Regardless of the type of the column, this action attempts
        to convert the item at the index to a date time. 

        Attrribute: Parameter index the item to be converted
    */
    action GetAsDateTime(integer index) returns DateTime
        alert("Cannot convert value at position " + index + " to DateTime.")
    end

    /*
        This action sets the index to a number if and only if this is a number
        column.

        Attrribute: Parameter index the item to be converted
        Attribute: Parameter value the value to be placed in the column
    */
    action SetAsNumber(integer index, number value)
        alert("Cannot convert value at position " + index + " to number.")
    end

    /*
        This action sets the index to text if and only if this is a text
        column.

        Attrribute: Parameter index the item to be converted
        Attribute: Parameter value the value to be placed in the column
    */
    action SetAsText(integer index, text value)
        alert("Cannot convert value at position " + index + " to text.")
    end

    /*
        This action sets the index to a boolean if and only if this is a boolean
        column.

        Attrribute: Parameter index the item to be converted
        Attribute: Parameter value the value to be placed in the column
    */
    action SetAsBoolean(integer index, boolean value)
        alert("Cannot convert value at position " + index + " to boolean.")
    end

    /*
        This action sets the index to an integer if and only if this is an integer
        column.

        Attrribute: Parameter index the item to be converted
        Attribute: Parameter value the value to be placed in the column
    */
    action SetAsInteger(integer index, integer value)
        alert("Cannot convert value at position " + index + " to integer.")
    end

    /*
        Regardless of the type of this column, the system will attempt
        to convert it to a NumberColumn. This may cause an error to be thrown
        if the types are not compatible.

        Attrribute: Returns the newly converted column
    */
    action ConvertToNumberColumn returns NumberColumn
        NumberColumn column
        ConvertColumn(column)
        return column
    end

    /*
        Regardless of the type of this column, the system will attempt
        to convert it to an IntegerColumn. This may cause an error to be thrown
        if the types are not compatible.

        Attrribute: Returns the newly converted column
    */
    action ConvertToIntegerColumn returns IntegerColumn
        IntegerColumn column
        ConvertColumn(column)
        return column
    end

    /*
        Regardless of the type of this column, the system will attempt
        to convert it to a BooleanColumn. This may cause an error to be thrown
        if the types are not compatible.

        Attrribute: Returns the newly converted column
    */
    action ConvertToBooleanColumn returns BooleanColumn
        BooleanColumn column
        ConvertColumn(column)
        return column
    end

    /*
        Regardless of the type of this column, the system will attempt
        to convert it to a TextColumn. This may cause an error to be thrown
        if the types are not compatible.

        Attrribute: Returns the newly converted column
    */
    action ConvertToTextColumn returns TextColumn
        TextColumn column
        ConvertColumn(column)
        return column
    end

    private action ConvertColumn(DataFrameColumn column)
        column:SetHeader(GetHeader())

        integer i = 0
        integer size = GetSize()
        repeat while i < size
            text value = GetAsText(i)
            if value = undefined
                column:Add(undefined)
            else
                column:Add(value)
            end
            i = i + 1
        end
    end

    /*
        Some column types can be converted to a raw vector of numbers. All other
        column types throw an error if they cannot convert. This vector conversion
        stores numbers more tightly in primitive form, so no undefined values are allowed,
        but the system can process on the vector more quickly and efficiently.

        Attribute: Returns the vector
    */
    action ConvertToVector returns Vector
        alert("Cannot convert to Vector for this type of Column.")
    end

    /* 

        This action returns whether or not this column type can be converted to a Vector of numbers. 

        Attribute: Returns true if this column type can be converted and false if it would throw an error on conversion.

    */
    action CanConvertToVector returns boolean
        return false
    end

    /*
        This action swaps two values in the column. 

        Attribute: Parameter left the first index to swap
        Attribute: Parameter right the second index to swap
    */
    blueprint action Swap(integer left, integer right)

    /*
        This action moves the value in row left to the value in row right. 

        Attribute: Parameter left the first index to swap
        Attribute: Parameter right the second index to swap
    */
    blueprint action Move(integer left, integer right)

    /*
        This action conducts a calculation on this column. The calculation begins 
        by issuing a Start action. Then if it is an iterable action, sends each
        data point to the class for processing. If not, it is asked to conduct
        the entire operation at once on the full data set. Finally, it issues
        an end action. 

        Attribute: Parameter the calculation to do on this column.
    */
    action Calculate(DataFrameColumnCalculation calculation)
        if calculation = undefined
            return now
        end

        calculation:Start(me)
        boolean iterable = calculation:IsIterable()
        if iterable
            i = 0
            repeat while i < GetSize()
                SendValueTo(i, calculation)
                i = i + 1
            end
        else
            calculation:Calculate(me)
        end
        calculation:End(me)
    end

    /* Copy from a row to copy from. Specifically, this grabs a value from the 'from' parameter inside 
        the passed column value. It then places this row value into the to position inside of this 
        column. This operation is destructive, meaning that the old value of the to position is destroyed.
        An error is thrown if the to value is invalid, below 0 or greater than the size.

        If the columns are not compatible, this throws an error. For example, if we try to set
        a number to a non-number column, this is an error.

        Attribute: Parameter column the column we are grabbing from
        Attribute: Parameter to the row that will be destroyed in the current column
        Attribute: Parameter from the row that we are grabbing the value from

        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.DataFrameColumn
        DataFrame frame
        frame:Load("Data.csv")
        DataFrameColumn col1 = frame:GetColumn(0)
        DataFrameColumn col2 = frame:GetColumn(1)

        //Assuming the types are compatible
        col1:CopyToRow(col1, 1, 2)
        output frame:ToText()
    */
    blueprint action CopyToRow(DataFrameColumn column, integer to, integer from)


    /* This action conducts a deep copy of the column. */
    blueprint action Copy returns DataFrameColumn

    /* This action conducts a deep copy of the column. The two parameters indicate whether to sort
        the column or whether to require that it be unique.

        Attribute: Parameter sort true if we sort the column
        Attribute: Parameter unique true if only those values that are unique are included in the copy
    */
    blueprint action Copy(boolean sort, boolean unique) returns DataFrameColumn

    /* 
        This action does a deep copy of the row between the 0-indexed rowStart and rowEnd. The two extra
        parameters indicate whether to sort the column or whether to require that it be unique.

        Attribute: Parameter rowStart the first row to copy
        Attribute: Parameter rowEnd the last row to copy
        Attribute: Parameter sort true if we sort the column
        Attribute: Parameter unique true if only those values that are unique are included in the copy
    */
    blueprint action Copy(integer rowStart, integer rowEnd, boolean sort, boolean unique) returns DataFrameColumn

    /* 
        This action does a deep copy of the row between the 0-indexed rowStart and rowEnd. 

        Attribute: Parameter rowStart the first row to copy
        Attribute: Parameter rowEnd the last row to copy
    */
    blueprint action Copy(integer rowStart, integer rowEnd) returns DataFrameColumn

    /*
        This action copies the type of the data frame, but does not copy over its
        rows. The header name is retained.

        Attribute: Returns the column of the appropriate type but without the data.
    */
    action CopyEmpty returns DataFrameColumn
        return Copy(0, -1)
    end

    /*
        This action sets the size of the column to the parameter and then fills it with undefined values. 

        Attribute: Parameter size the size of the column.
    */
    blueprint action SetSize(integer size)

    /* 
        This action returns the number of rows. 
        Attribute: Returns The size of the column (number of rows).
    */
    action GetSize returns integer
        return 0
    end

    /*  This action returns the number of items in this column that are undefined.
        Attribute: Returns the number of items that are not defined
    */
    action GetUndefinedSize returns integer
        return undefinedSize
    end

    /*  
        This action returns a boolean on if the column is undefined.
        Attribute: Returns true if the undefined size is equal to the size. Meaning every row is undefined.
    */
    action IsUndefined returns boolean
        return (GetSize() = GetUndefinedSize())
    end

    /*
        This action returns a HashTable with AsText key values and counts of the items in the column.
        Attribute: Returns a HashTable with the count for each item in the column.
    */
    action CalculateValueCountAsText() returns HashTable<text,integer>
        HashTable<text, integer> result
        integer groupCount = 0
        integer size = GetSize()
        integer undefinedCount = 0
        i = 0
        repeat while i < size
            //just keep track of the fact that we have undefined values
            if IsUndefined(i)
                undefinedCount = undefinedCount + 1
            else
                text name = GetAsText(i)
                if not result:HasKey(name)
                    result:Add(name, 1)
                else
                    result:Add(name, result:GetValue(name) + 1)
                end
            end
            
            i = i + 1
        end
        result:Add(undefined, undefinedCount)
        return result
    end

    /*
        This is a convenience action that converts the entire column to a text format. This 
        allows it to be sent to the console or a text editor for viewing.

        Attribute: Returns a text representation of the entire column
    */
    blueprint action ToText returns text

    /*
        This action returns a default text string for undefined values.
    */
    action GetUndefinedText returns text
        return "undefined"
    end

    /*
        We can get the comparison used by the sorting routines. By default, this is undefined.
        When undefined, alphabetical sorting is used.
    */
    action GetSortComparison returns Comparison
        return comparison
    end

    /*
        We can manually set a comparison, which is then passed to the 
        default sorting routines if sorting occurs.
    */
    action SetSortComparison(Comparison comparison)
        me:comparison = comparison
    end

    action Compare(Object a, Object b) returns integer
        //first handle the case where items are undefined
        if a = undefined and b = undefined
            return 0
        elseif a = undefined and b not= undefined
            return -1
        elseif a not= undefined and b = undefined
            return 1
        end

        //both items are defined, so now do the normal sort
        return a:Compare(b)
    end
end