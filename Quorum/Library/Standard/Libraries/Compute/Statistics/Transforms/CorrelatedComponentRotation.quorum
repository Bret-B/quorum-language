package Libraries.Compute.Statistics.Transforms

use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Matrix
use Libraries.Compute.Vector
use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Reporting.PrincipalComponentAnalysisResult

/*
    CorrelatedComponentRotation implements a quartimin oblique rotation:
        Allows possible correlation while minimizing the sum of covariance across pairs of factors. 
        This helps highlight a reduced number of variables to explain the same results.
        This rotation produces factors that can be correlated.

        Quartimin (Oblimin with gamma = 0) 
        For more information:   
            Jennrich, Robert (2005). Gradient Projection Algorithms and Software for Arbitrary Rotation Criteria in Factor Analysis
            https://journals.sagepub.com/doi/epdf/10.1177/0013164404272507

            Jennrich, Robert (2002). A simple general method for oblique rotation
            https://link.springer.com/content/pdf/10.1007/BF02294706.pdf?pdf=button

            Jennrich, Robert (1979). Admissible values of Î³ in direct oblimin rotation
            https://link.springer.com/article/10.1007/BF02293969  

    Attribute: Author Hannah Williams
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Tests.PrincipalComponentAnalysis
    use Libraries.Compute.Statistics.Tests.CorrelatedComponentRotation

    DataFrame frame
    frame:Load("Data/Data.csv")
    frame:SelectAllColumns()

    PrincipalComponentAnalysis pca
    pca:Calculate(frame)
    DataFrame loadings = pca:GetFactorLoadings()

    CorrelatedComponentRotation oblimin
    DataFrame rotated = oblimin:Rotate(loadings)
    
    output rotated:ToText()
*/
class CorrelatedComponentRotation is ComponentRotation
    private Math math
    private boolean converged = false
    private integer iterations = 0
    private DataFrame loadings = undefined
    private DataFrame structure = undefined
    private Matrix rotationMatrix = undefined
    private Matrix correlationMatrix = undefined
    private Vector communality = undefined
    private Matrix criterionGradient = undefined
    private number gamma = 0 // Default gamma = 0 leads to quartimin 

    on create
        Normalize(false)
        SetMaximumIterations(1000)
    end

    action Rotate(PrincipalComponentAnalysisResult result) returns DataFrame
        DataFrame frame = result:GetFactorLoadings() 
        communality = result:GetCommunality()
        return Rotate(frame)
    end

    action Rotate(DataFrame frame) returns DataFrame
        if frame = undefined or frame:GetSize() < 1
            alert("No factor loadings to rotate")
        end 
        integer rows = frame:GetColumn(0):GetSize()
        integer cols = frame:GetSize() 

        // Copy loadings data frame
        loadings = frame:Copy()

        // Compute the communality to use in normalization
        if communality = undefined or communality:GetSize() not= rows
            Vector h2
            h2:SetSize(rows)
            communality = ComputeCommunality(loadings, h2)
        end

        // Compute the square roots of the communalities to use in normalization
        Vector sqrtCommunality 
        sqrtCommunality:SetSize(communality:GetSize())
        i = 0
        repeat while i < communality:GetSize()
            sqrtCommunality:Set(i, math:SquareRoot(communality:Get(i)))
            i = i + 1
        end 

        // Verify the data
        i = 0
        repeat while i < cols
            DataFrameColumn column = loadings:GetColumn(i)
            if not column:IsNumberColumn() and not column:IsIntegerColumn()
                alert("The loadings data frame must consist of only numerical columns.")
            end
            if column:GetSize() not= rows
                alert("All columns in the loadings data frame must be the same size.")
            end
            if column:GetUndefinedSize() not= 0
                alert("The loadings data frame cannot contain any undefined entries.")
            end

            // Rename the headers
            column:SetHeader("TPC" + (i+1))

            // Normalize the factor loadings if requested 
            if Normalize()
                j = 0 
                repeat while j < rows
                    column:SetAsNumber(j, column:GetAsNumber(j) / sqrtCommunality:Get(j))
                    j = j + 1
                end
            end
            i = i + 1
        end

        // Initialize the rotation matrix and correlation matrix
        Matrix init
        init:Fill(cols, cols, 0)
        Matrix identity = init:Identity()
        Matrix previousTransitionMatrix = identity:Copy()
        Matrix inverseTransitionMatrix = identity:Inverse()

        Matrix neg
        neg:Fill(cols, cols, -1.0)
        
        // Compute initial criterion and criterion gradient based on gamma and loadings
        Matrix loadingsMatrix = loadings:ConvertToMatrix()//:Multiply(inverseTransitionMatrix)
        number initialCriterion = ComputeCriterion(loadingsMatrix)

        // Compute starting gradient
        number previousCriterion = initialCriterion
        Matrix previousGradient = loadingsMatrix:Transpose():Multiply(criterionGradient:Multiply(inverseTransitionMatrix)):Transpose():MultiplyElements(neg)

        Matrix currentTransitionMatrix = undefined
        Matrix currentLoadingsMatrix = undefined
        Matrix currentGradient
        number currentCriterion = initialCriterion
        number alpha = 1

        // Tranformation Gradient Algorithm
        iterations = 0   
        repeat while iterations < (GetMaximumIterations() + 1) and not converged
            Matrix TG = previousTransitionMatrix:MultiplyElements(previousGradient)
            Matrix subtract = previousTransitionMatrix:Multiply(ShapeAsDiagonal(ColumnSums(TG)))
            currentGradient = previousGradient:SubtractElements(subtract)

            number s = math:SquareRoot(currentGradient:Transpose():Multiply(currentGradient):GetTrace())
            if s < GetEpsilon()
                converged = true
            else
                alpha = alpha * 2

                // Partial Step Algorithm
                boolean loop = true
                i = 0
                repeat while i < 11 and loop 
                    Matrix X = previousTransitionMatrix:SubtractElements(currentGradient:Multiply(alpha))
                    Matrix X2 = X:MultiplyElements(X)
                    Matrix v = OneOverSquareRoot(ColumnSums(X2))
                    
                    currentTransitionMatrix = X:Multiply(ShapeAsDiagonal(v))
                    inverseTransitionMatrix = currentTransitionMatrix:Inverse()
                    currentLoadingsMatrix = loadingsMatrix:Multiply(inverseTransitionMatrix:Transpose())

                    currentCriterion = ComputeCriterion(currentLoadingsMatrix)
                    if currentCriterion < previousCriterion - 0.5 * s * s * alpha
                        loop = false
                    else
                        alpha = alpha / 2.0
                    end
                    i = i + 1
                end

                previousTransitionMatrix = currentTransitionMatrix
                previousCriterion = currentCriterion
                previousGradient = currentLoadingsMatrix:Transpose():Multiply(criterionGradient:Multiply(inverseTransitionMatrix)):Transpose():MultiplyElements(neg)
            end
            iterations = iterations + 1
        end

        if currentLoadingsMatrix not= undefined 
            loadingsMatrix = currentLoadingsMatrix
        end
        if currentTransitionMatrix not= undefined
            rotationMatrix = inverseTransitionMatrix:Transpose()
            correlationMatrix = currentTransitionMatrix:Transpose():Multiply(currentTransitionMatrix)
        else
            rotationMatrix = identity:Copy()
            correlationMatrix = identity:Copy()
        end

        // Convert the loadings matrix back to data frame
        i = 0
        repeat while i < cols
            DataFrameColumn column = loadings:GetColumn(i)
            j = 0 
            repeat while j < rows
                // Un-normalize the factor loadings if requested 
                if Normalize()
                    column:SetAsNumber(j, loadingsMatrix:Get(j,i) * sqrtCommunality:Get(j))
                else
                    column:SetAsNumber(j, loadingsMatrix:Get(j,i))
                end
                j = j + 1
            end
            i = i + 1
        end  

        // Convert the structure matrix to a data frame
        Matrix structureMatrix = loadingsMatrix:Multiply(correlationMatrix)
        DataFrame structureFrame
        i = 0
        repeat while i < cols
            NumberColumn column
            j = 0 
            repeat while j < rows
                column:Add(structureMatrix:Get(j,i))
                j = j + 1
            end
            structureFrame:AddColumn(column)
            i = i + 1
        end 
        structure = structureFrame

        return loadings
    end

    /* 
        Criterion for the Tranformation Gradient Algorithm:
        Equation found here:
            Jennrich, Robert (2005). Gradient Projection Algorithms and Software for Arbitrary Rotation Criteria in Factor Analysis
            https://journals.sagepub.com/doi/epdf/10.1177/0013164404272507
    */
    private action ComputeCriterion(Matrix loadingsMatrix) returns number
        integer rows = loadingsMatrix:GetRows()
        integer cols = loadingsMatrix:GetColumns()

        Matrix N
        N:Fill(cols, cols, 1)
        i = 0
        repeat while i < cols
            N:Set(i, i, 0)
            i = i + 1
        end     

        Matrix loadingsSquared = loadingsMatrix:MultiplyElements(loadingsMatrix)

        Matrix X
        if gamma = 0 
            // Quartimin 
            X = loadingsSquared:Multiply(N)
        else
            alert("Only quartimin (gamma = 0) works right now for oblique rotations.")
        end

        criterionGradient = loadingsMatrix:MultiplyElements(X)
        return (loadingsSquared:Transpose():Multiply(X):GetTrace() / 4.0)
    end

    /*
        Helper action to grab only the diagonal values of a matrix and 
        return a new matrix with all else being zeros.
    */
    private action GetDiagonal(Matrix matrix) returns Matrix
        Matrix diag
        diag:Fill(matrix:GetColumns(), matrix:GetColumns(), 0)
        i = 0
        repeat while i < matrix:GetColumns()
            diag:Set(i, i, matrix:Get(i, i))
            i = i + 1
        end        
        return diag
    end

    /*
        Helper action to take a single row matrix with N-columns and turn it 
        into an N x N matrix with the values along the diagonal and zeros elsewhere.
    */
    private action ShapeAsDiagonal(Matrix matrix) returns Matrix
        Matrix diag
        diag:Fill(matrix:GetColumns(), matrix:GetColumns(), 0)
        i = 0
        repeat while i < matrix:GetColumns()
            diag:Set(i, i, matrix:Get(0, i))
            i = i + 1
        end        
        return diag
    end

    /*
        Helper action to compute 1 / sqrt(x) from each element 'x' in a matrix
    */
    private action OneOverSquareRoot(Matrix matrix) returns Matrix
        Matrix newMatrix
        newMatrix:SetSize(matrix)
        i = 0
        repeat while i < matrix:GetRows()
            j = 0
            repeat while j < matrix:GetColumns()
                newMatrix:Set(i, j, 1.0 / math:SquareRoot(matrix:Get(i, j)))
                j = j + 1
            end  
            i = i + 1
        end  
        return newMatrix
    end

    /*
        Helper action to compute column sums and store it in a new matrix
    */
    private action ColumnSums(Matrix matrix) returns Matrix
        Matrix newMatrix
        newMatrix:SetSize(1, matrix:GetColumns())
        i = 0
        repeat while i < matrix:GetColumns()
            newMatrix:Set(0, i, matrix:GetColumn(i):GetTotal())
            i = i + 1
        end 
        return newMatrix
    end

    action Converged returns boolean
        return converged
    end

    action GetIterations returns integer
        return iterations
    end

    action GetLoadings returns DataFrame
        return loadings
    end

    action GetStructure returns DataFrame
        return structure
    end

    action GetRotationMatrix returns Matrix
        return rotationMatrix
    end

    action GetCorrelationMatrix returns Matrix
        return correlationMatrix
    end
end