package Libraries.Compute.Statistics.Transforms
use Libraries.Containers.Array
use Libraries.Compute.Statistics.DataFrameTransform
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameSelection
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Containers.Iterator


/*
    The ColumnSplitter class is a DataFrameTransform designed to make splitting individual columns 
    easier by automating part of the process. Specifically, it contains a default implementation for splitting, 
    which calls SplitValue on each cell in each row. Each cell then becomes a set of columns.

    By default, this class assumes and enforces that the number of items in the provided headers matches the 
    number of items split for each cell. If this assumption is invalid, then this class must be sub-classed
    and the SplitValue action changed to provide undefined values in an array where appropriate to make this match.

    By default, if a particular cell is undefined, the row is ignored and undefined values are placed 
    into the corresponding column. This can be changed by telling this class to ignore undefined values.

    Attribute: Author Andreas Stefik

    Attribute: Example

    use Libraries.Compute.Statistics.Transforms.ColumnSplitter

    //This custom splitter class can then be passed to the Transform action in DataFrame
    //and the rest will be handled automatically
    class MySplitter is ColumnSplitter
        action SplitValue(text value) returns Array<text>
            Array<text> theSplit

            //do some special splitting here
            returns theSplit
        end

    end
*/
class ColumnSplitter is DataFrameTransform
    Array<text> headers = undefined
    boolean includeUndefined = true

    action Transform(DataFrame frame) returns DataFrame 
        DataFrame frameCopy
        if headers = undefined or headers:IsEmpty()
            alert("Cannot split into new columns without saying what the new columns should be named. " +
                "Call SetHeaders(Array<text>) before calling this action.")
        end


        DataFrameSelection selection = frame:GetSelection()
        if selection = undefined or selection:IsEmptyColumns()
            alert("There must be a list of selected columns in the DataFrame in order to know what " +
                "columns to split")
        end

        //first get all the columns and put them in an array
        Array<DataFrameColumn> columns
        boolean hasMultiple = false
        if selection:GetColumnSize() > 1
            hasMultiple = true
        end
        Iterator<integer> iterator = selection:GetColumnIterator()
        repeat while iterator:HasNext()
            integer columnIndex = iterator:Next()
            DataFrameColumn column = frame:GetColumn(columnIndex)
            
            text header = column:GetHeader()


            //we need N columns with these headers
            Array<DataFrameColumn> newColumns
            //now iterate through all values in the columns
            if headers not= undefined
                i = 0
                repeat while i < headers:GetSize()
                    DataFrameColumn copy = column:CopyEmpty()
                    text name = headers:Get(i)
                    if hasMultiple
                        name = name + "." + (columnIndex)
                    end
                    copy:SetHeader(name)
                    
                    //add them to a temporary array for processing
                    //and a larger array, which we need in case we have multiple selected columns
                    newColumns:Add(copy)
                    columns:Add(copy)
                    i = i + 1
                end


                //now we need to go through all rows
                //for undefined values, do nothing
                //sizing must match the header list, otherwise bail
                i = 0
                repeat while i < column:GetSize()
                    if not column:IsUndefined()
                        text value = column:GetAsText(i)
                        //if the value is undefined, we decide whether to ignore it

                        //Only process it if isn't undefined or it is, but we allow that.
                        if value = undefined and IsIncludeUndefined()
                            or value not= undefined

                            Array<text> values = SplitValue(value)
                            if values = undefined or values:GetSize() not= headers:GetSize()
    
                                integer num = 0
                                if values not= undefined
                                    num = values:GetSize()
                                end
                                alert("Tried to split column: '" + column:GetHeader() + "' with value '" +
                                value + "', which split into " + num + " values. The number of headers passed " +
                                "was " + headers:GetSize() + ". These must match to be valid." )
                            end
                            j = 0
                            repeat while j < values:GetSize()
                                DataFrameColumn copy = newColumns:Get(j)
                                text newValue = values:Get(j)
                                copy:Add(newValue)
                                j =j + 1
                            end
                        end
                    end
                    i = i + 1
                end
            end
        end
        
        //now add the columns to the new DataFrame to be passed back.
        i = 0
        repeat while i < columns:GetSize()
            frameCopy:AddColumn(columns:Get(i))
            i = i + 1
        end
        return frameCopy
    end

    /*
        This action returns an array of text values that splits the text value. The number of values
        in the array must match for each row, which means undefined values must be used appropriately
        in the array if necessary for a particular kind of split.
    */
    blueprint action SplitValue(text value) returns Array<text>

    /*
        Returns the header values that will be turned into columns.
    */
    action GetHeaders returns Array<text>
        return headers
    end

    /*
        Sets the header values that will be turned into columns
    */
    action SetHeaders(Array<text> headers)
        me:headers = headers
    end

    /* Returns true if undefined values are processed and false if they are removed. */
    action IsIncludeUndefined returns boolean
        return includeUndefined
    end

    /* Set to true if undefined values should be processed and false if they should be removed. */
    action SetIncludeUndefined(boolean includeUndefined)
        me:includeUndefined = includeUndefined
    end
end