package Libraries.Compute.Statistics.Transforms

use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Reporting.PrincipalComponentAnalysisResult
use Libraries.Compute.Vector
use Libraries.Compute.Matrix

/*
    ComponentRotation is a parent class for oblique (correlated) and orthogonal (uncorrelated) component rotations.
    This type of rotation would only be used after a PrincipalComponentAnalysis test.
    It can take either the PCA result or just the component loadings DataFrame as a parameter for the rotation.

    Possible rotations:
        UncorrelatedComponentRotation implements a varimax orthogonal rotation:
            Maintains non-correlation while maximizing the sum of variance across all factors. 
            This helps highlight a reduced number of variables to explain the same results.

        CorrelatedComponentRotation implements a quatimin (oblimin) oblique rotation: 
            Allows possible correlation while minimizing the sum of covariance across pairs of factors. 
            This helps highlight a reduced number of variables to explain the same results.
*/
class ComponentRotation
    constant integer DEFAULT_MAX_ITERATIONS = 100
    constant number DEFAULT_EPSILON = 1.0e-14
    private boolean normalize = true
    private integer maxIterations = DEFAULT_MAX_ITERATIONS
    private number epsilon = DEFAULT_EPSILON

    blueprint action Rotate(PrincipalComponentAnalysisResult result) returns DataFrame

    blueprint action Rotate(DataFrame frame) returns DataFrame

    /* 
        Communality: 
            This action computes and returns a vector of communalities for a given frame of factor loadings.
            If given a PCA result as the parameter for rotation, communality won't need to be calculated.
            If given only a DataFrame of loadings, communality will be calculated.
            Rotations and transformations do not change the communality of the loadings matrix.
    */
    private action ComputeCommunality(DataFrame loadings, Vector communality) returns Vector  
        i = 0
        repeat while i < loadings:GetSize()
            DataFrameColumn column = loadings:GetColumn(i)
            if not column:IsNumberColumn() and not column:IsIntegerColumn()
                alert("The loadings data frame must consist of only numerical columns.")
            end
            j = 0 
            repeat while j < column:GetSize()
                if column:IsUndefined(j)
                    alert("Undefined entry at row index "+j+" in column index "+i)
                end
                number value = column:GetAsNumber(j)
                communality:Set(j, communality:Get(j) + value*value)
                j = j + 1
            end
            i = i + 1
        end       
        return communality
    end

    action Normalize returns boolean
        return normalize
    end

    action Normalize(boolean normalize)
        me:normalize = normalize
    end

    action GetEpsilon returns number
        return epsilon
    end

    action SetEpsilon(number epsilon)
        me:epsilon = epsilon
    end

    action GetMaximumIterations returns integer
        return maxIterations
    end

    action SetMaximumIterations(integer maxIterations)
        if maxIterations < 0
            alert("Cannot use less than 0 iterations.")
        end
        me:maxIterations = maxIterations
    end

    action Converged returns boolean
        return false
    end

    action GetIterations returns integer
        return 0
    end

    action GetLoadings returns DataFrame
        return undefined
    end

    action GetStructure returns DataFrame
        return undefined
    end

    action GetRotationMatrix returns Matrix
        return undefined
    end

    action GetCorrelationMatrix returns Matrix
        return undefined
    end
end