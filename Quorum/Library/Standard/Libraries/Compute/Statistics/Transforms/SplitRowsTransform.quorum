package Libraries.Compute.Statistics.Transforms


use Libraries.Compute.Statistics.DataFrameTransform
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Random
use Libraries.Compute.Statistics.DataFrameSelection
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Containers.List
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Columns.IntegerColumn
use Libraries.Compute.Statistics.Columns.NumberColumn

/*

Attribute: Example

use Libraries.Compute.Statistics.DataFrame
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Transforms.SplitRowsTransform

DataFrame frame
frame:LoadFromCommaSeparatedValue(
"Hello, Hi
0, 17
1, 19
2, 21
3, 23
4, 25"
)

frame:AddSelectedColumn(0)
frame:AddSelectedColumn(1)

SplitRowsTransform transform
transform:Transform(frame)

*/
class SplitRowsTransform is DataFrameTransform
    boolean hasRandomSeed = false
    number seed = 0
    number percent = 0.8

    action Transform(DataFrame frame) returns DataFrame 
        //check if all of the selected columns have the same length. 
        //if they are not even, then throw an exception
        DataFrameSelection selection = frame:GetSelection()
        integer size = frame:GetSelectedColumnSize()

        integer columnSize = -1
        i = 0
        repeat while i < size
            integer index = selection:GetColumn(i)
            DataFrameColumn column = frame:GetColumn(index)
            if columnSize = -1
                columnSize = column:GetSize()
            else
                if columnSize not= column:GetSize()
                    alert("All columns selected for row splitting must have the same size.")
                end
            end

            i = i + 1
        end

        if columnSize = -1
            alert("Cannot randomly select rows from a DataFrame that does not have at least one row.")
        end

        //we can now assume all columns under the selection have the same size
        //Now we an array of indexes up to the size of the columns
        
        Array<integer> selectedColumns
        i = 0
        repeat while i < columnSize
            selectedColumns:Add(i)
            i = i + 1
        end

        //now shuffle the array, with or without a seed
        if hasRandomSeed
            selectedColumns:Shuffle(seed)
        else
            selectedColumns:Shuffle(0)
        end

        //now split it by the percentage listed
    
        Array<integer> first
        integer amount = cast(integer, columnSize * percent) //take the floor of the percent
        i = 0
        repeat while i < columnSize
            if i < amount
                first:Add(selectedColumns:Get(i))
            end
            i = i + 1
        end

        //sort the list so we can do in order comparisons
        first:Sort()

        //now get all of the columns and split them by rows, into separate data frame copies
        //in each case, pass the split array, so we get the same split in each column
        i = 0
        repeat while i < size
            integer index = selection:GetColumn(i)
            NumberColumn column = cast(NumberColumn, frame:GetColumn(index))
            Array<IntegerColumn> columns = SplitByRows(first, column)

            i = i + 1
        end

        return frame
    end

    private action SplitByRows(Array<integer> sortedArray, NumberColumn column) returns Array<IntegerColumn>
        Array<NumberColumn> columns
        NumberColumn in
        NumberColumn out
        i = 0
        row = 0
        repeat while i < sortedArray:GetSize()
            integer index = sortedArray:Get(i)
            if row = index
                in:Add(column:Get(index))
                row = row + 1
                i = i + 1
            else
                //keep putting rows in out until we're done
                out:Add(column:Get(row))
                row = row + 1
                repeat while index not= row and row < column:GetSize()
                    out:Add(column:Get(row))
                    row = row + 1
                end
            end
            
        end

        //for any remaining rows, toss them in out
        repeat while row < column:GetSize()
            out:Add(column:Get(row))
            row = row + 1
        end

        columns:Add(in)
        columns:Add(out)
        return columns
    end

    action GetRemainder returns DataFrame
        return undefined
    end

    action GetSeed returns number
        return seed
    end

    action SetSeed(number seed)
        me:seed = seed
    end

    action GetPercent returns number
        return percent
    end

    action SetPercent(number percent)
        me:percent = percent
    end
end