package Libraries.Compute.Statistics.Transforms


use Libraries.Compute.Statistics.DataFrameTransform
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Random
use Libraries.Compute.Statistics.DataFrameSelection
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Containers.List
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Columns.IntegerColumn
use Libraries.Compute.Statistics.Columns.NumberColumn

/*
The SplitRowsTransform class takes a data frame and transforms it into two DataFrames with copies of all of the
data inside them. Specifically, you can set a percentage of the total data, like 0.8 for 80%, which then 
instructs the transform to select 80% of the rows, randomly, and place it into one DataFrame copy, with the 
remainder going in the other. This operation is synchronized across all columns so that it is the same split everywhere.

Attribute: Example
DataFrame frame
frame:LoadFromCommaSeparatedValue(
"Hello, Hi
0, 17
1, 19
2, 21
3, 23
4, 25
5, 27
6, 29
7, 31
8, 33
9, 35
10, 35"
)

frame:AddSelectedColumn(0)
frame:AddSelectedColumn(1)

SplitRowsTransform transform
DataFrame in = transform:Transform(frame)
DataFrame out = transform:GetRemainderFrame()
output in:ToText()
output out:ToText()
*/
class SplitRowsTransform is DataFrameTransform
    boolean hasRandomSeed = false
    number seed = 0
    number percent = 0.8
    DataFrame selectedFrame = undefined
    DataFrame remainderFrame = undefined
    Array<DataFrame> resultFrames = undefined

    action Transform(DataFrame frame) returns DataFrame 
        DataFrame selectedFrame2
        DataFrame remainderFrame2
        Array<DataFrame> resultFrames2
        selectedFrame = selectedFrame2
        remainderFrame = remainderFrame2
        resultFrames = resultFrames2

        //check if all of the selected columns have the same length. 
        //if they are not even, then throw an exception
        DataFrameSelection selection = frame:GetSelection()
        integer size = frame:GetSelectedColumnSize()

        integer columnSize = -1
        i = 0
        repeat while i < size
            integer index = selection:GetColumn(i)
            DataFrameColumn column = frame:GetColumn(index)
            if columnSize = -1
                columnSize = column:GetSize()
            else
                if columnSize not= column:GetSize()
                    alert("All columns selected for row splitting must have the same size.")
                end
            end

            i = i + 1
        end

        if columnSize = -1
            alert("Cannot randomly select rows from a DataFrame that does not have at least one row.")
        end

        //we can now assume all columns under the selection have the same size
        //Now we an array of indexes up to the size of the columns
        
        Array<integer> selectedColumns
        i = 0
        repeat while i < columnSize
            selectedColumns:Add(i)
            i = i + 1
        end

        //now shuffle the array, with or without a seed
        if hasRandomSeed
            selectedColumns:Shuffle(seed)
        else
            selectedColumns:Shuffle()
        end

        //now split it by the percentage listed
    
        Array<integer> first
        integer amount = cast(integer, columnSize * percent) //take the floor of the percent
        i = 0
        repeat while i < columnSize
            if i < amount
                first:Add(selectedColumns:Get(i))
            end
            i = i + 1
        end

        //sort the list so we can do in order comparisons
        first:Sort()

        
        //now get all of the columns and split them by rows, into separate data frame copies
        //in each case, pass the split array, so we get the same split in each column
        i = 0
        repeat while i < size
            integer index = selection:GetColumn(i)
            NumberColumn column = cast(NumberColumn, frame:GetColumn(index))
            //Array<IntegerColumn> columns = SplitByRows(first, column)
            Array<DataFrameColumn> columns = column:SplitByRows(first)
            selectedFrame:AddColumn(columns:Get(0))
            remainderFrame:AddColumn(columns:Get(1))
            i = i + 1
        end

        resultFrames:Add(selectedFrame)
        resultFrames:Add(remainderFrame)
        return selectedFrame
    end

    /* This action provides the DataFrame for the content selected. */
    action GetSelectedFrame returns DataFrame
        return selectedFrame
    end

    /* This action provides the DataFrame for the remainder of the data set. */
    action GetRemainderFrame returns DataFrame
        return remainderFrame
    end

    /* Returns the seed for the random number generator. This seed is only used if GetHasRandomSeed() = true. */
    action GetSeed returns number
        return seed
    end

    /*
        Sets the random seed for the random number generator. As a convenience, this action 
        also tells the class to use the random number generator seed. If this is not the desired behavior, 
        call SetHasRandomSeed(false) on the transform. Calling this action is not necessary if no seed
        is desired.
    */
    action SetSeed(number seed)
        me:seed = seed
        hasRandomSeed = true
    end

    /* Gets the total percentage of the DataFrame to randomly select. */
    action GetPercent returns number
        return percent
    end

    /* Sets the total percentage of the DataFrame to randomly select. */
    action SetPercent(number percent)
        me:percent = percent
    end

    /*
        This action returns the resulting operations two frames. The first index of the array is the 
        frame with the percentage indicated in the system. The second index of the array is the remainder
        frame. This action should only be called after Transform is called, otherwise it will return an 
        empty array.
    */
    action GetResultFrames returns Array<DataFrame>
        return resultFrames
    end

    /*
        Determines whether or not this class takes a seed for the random number generator into account.
    */
    action GetHasRandomSeed returns boolean
        return hasRandomSeed
    end

    /*
        Sets whether or not this class takes a seed for the random number generator into account. If true, then it
        does.
    */
    action SetHasRandomSeed(boolean hasRandomSeed)
        me:hasRandomSeed = hasRandomSeed
    end
end