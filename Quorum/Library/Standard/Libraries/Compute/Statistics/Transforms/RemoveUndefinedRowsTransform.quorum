package Libraries.Compute.Statistics.Transforms

use Libraries.Compute.Statistics.DataFrameTransform
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Containers.Array
use Libraries.Compute.Statistics.DataFrameSelection
use Libraries.Containers.HashTable

/*
    This action takes the data from the current DataFrame and then removes all undefined
    values from each row. In doing so, any row that contains at least one undefined value
    is removed and all other rows are pushed up. Maximum sizes are computed and the total
    set is truncated to the new column sizes.

    Attribute: Author Andreas Stefik 
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Transforms.RemoveUndefinedRowsTransform

    //Load a comma separated file
    DataFrame frame
    frame:Load("Data.csv")

    //Get a copy of the data frame's first two columns, up to row 5.
    RemoveUndefinedRowsTransform transform
    frame:Transform(transform) 
    output frame:ToText()
*/
class RemoveUndefinedRowsTransform is DataFrameTransform
    boolean ignoreFirst = true
    boolean accountForSelectedColumns = false
    HashTable<integer, Object> selectionHash = undefined

    action HashSelection(DataFrameSelection selection)
        HashTable<integer, Object> s
        selectionHash = s

        //this essentially makes a unique hash
        i = 0
        repeat while i < selection:GetColumnSize()
            integer col = selection:GetColumn(i)
            selectionHash:Add(col, undefined)
            i = i + 1
        end
    end

    action Transform(DataFrame frame) returns DataFrame 
        DataFrame newFrame = frame:Copy(0, frame:GetSize(), -1, -1)
        DataFrameSelection selection = frame:GetSelection()
        if accountForSelectedColumns
            HashSelection(selection)
        end

        //traverse every row and check each spot for an undefined value
        integer row = 0

        Array<integer> sizes
        integer change = 0
        repeat while change < newFrame:GetSize()
            sizes:Add(row)
            change = change + 1
        end

        integer skip = 0
        Array<integer> rowsToRemove
        boolean done = false
        repeat while not done
            boolean markForRemoval = false
            if HasUndefined(frame, row)
                skip = skip + 1
                markForRemoval = true
            else 
                MoveRow(frame, newFrame, row, markForRemoval)
            end

            if not HasAnotherRow(frame, row + 1)
                done = true
            end
            row = row + 1
        end
        
        return newFrame
    end

    private action HasAnotherRow(DataFrame frame, integer row) returns boolean
        integer column = 0
        //get the row for each column
        repeat while column < frame:GetSize()
            DataFrameColumn dc = frame:GetColumn(column)
            if row < dc:GetSize()
                return true
            end
            column = column + 1
        end
        return false
    end

    private action MoveRow(DataFrame frame, DataFrame newFrame, integer row, boolean markForRemoval)
        integer column = 0
        integer i = row
        repeat while column < frame:GetSize()
            DataFrameColumn col = frame:GetColumn(column)

            //make sure there are actually rows here
            if i < col:GetSize()
                DataFrameColumn newCol = newFrame:GetColumn(column)
                newCol:Add(col:GetAsText(row))
            end
            column = column + 1
        end
    end

    private action HasUndefined(DataFrame frame, integer row) returns boolean
        integer column = 0
        //get the row for each column
        repeat while column < frame:GetSize()
            DataFrameColumn dc = frame:GetColumn(column)

            //Either we are allowing for all columns or we are taking into account a selection and thus
            //need to check if the columns are in the list.
            if not accountForSelectedColumns or (accountForSelectedColumns and selectionHash:HasKey(column))
                if row < dc:GetSize()
                    if dc:IsUndefined(row)
                        column = frame:GetSize()
                        return true
                    end
                end
            end
            
            column = column + 1
        end
        return false
    end

    /* Determines whether the first row should be ignored. */
    action IsIgnoreFirst returns boolean
        return ignoreFirst
    end

    /* Sets whether the first row should be ignored. */
    action SetIgnoreFirst(boolean ignoreFirst)
        me:ignoreFirst = ignoreFirst
    end

    action IsAccountForSelectedColumns returns boolean
        return accountForSelectedColumns
    end

    action SetAccountForSelectedColumns(boolean accountForSelectedColumns)
        me:accountForSelectedColumns = accountForSelectedColumns
    end
end