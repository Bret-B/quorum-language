package Libraries.Compute.Statistics.Transforms

use Libraries.Compute.Statistics.DataFrameTransform
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Columns.IntegerColumn
use Libraries.Compute.Statistics.Calculations.CalculateRanks
use Libraries.Compute.Statistics.Inputs.ColumnInput

/*
    This action takes the data from the current DataFrame then reverses it so that the top row is now 
    at the bottom and vice versa.

    Attribute: Author Andreas Stefik 
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Transforms.ReverseTransform
    use Libraries.System.File

    //Load a comma separated file
    DataFrame frame
    frame:Load("Data.csv")

    //reverse the data frame
    ReverseTransform reverse
    frame:Transform(reverse) 
*/
class ConvertColumnsToRanksTransform is DataFrameTransform, ColumnInput
    boolean compareValues = true
    boolean sortSmallToLarge = true
    integer firstRank = 1
    
    /*
        This action takes the data from the current DataFrame then reverses it so that the top row is now 
        at the bottom and vice versa.

        Attribute: Parameter frame The DataFrame to copy and adjust
        Attribute: Returns Typically a copy of the DataFrame, transformed by the transformer.
        Attribute: Example

        use Libraries.Compute.Statistics.DataFrame
        use Libraries.Compute.Statistics.Transforms.ReverseTransform
        use Libraries.System.File

        //Load a comma separated file
        DataFrame frame
        frame:Load("Data.csv")

        //reverse the data frame
        ReverseTransform reverse
        frame:Transform(reverse) 
    */
    action Transform(DataFrame frame) returns DataFrame 
        DataFrame newFrame
        Array<DataFrameColumn> newColumns
        if IsEmptyColumns()
            return newFrame
        end

        integer i = 0
        repeat while i < GetColumnSize()
            DataFrameColumn column = frame:GetColumn(GetColumn(i))
            CalculateRanks ranks
            ranks:SetFirstRank(firstRank)
            ranks:SetCompareValues(compareValues)
            ranks:SetSortSmallToLarge(sortSmallToLarge)

            column:Calculate(ranks)
            DataFrameColumn newCol = ranks:GetRanks()
            newColumns:Add(newCol)
            i = i + 1
        end

        newFrame:SetColumns(newColumns)

        return newFrame
    end
    
    action GetCompareValues returns boolean
        return compareValues
    end

    action SetCompareValues(boolean compareValues)
        me:compareValues = compareValues
    end

    action GetSortSmallToLarge returns boolean
        return sortSmallToLarge
    end

    action SetSortSmallToLarge(boolean sortSmallToLarge)
        me:sortSmallToLarge = sortSmallToLarge
    end

    action GetFirstRank returns integer
        return firstRank
    end

    action SetFirstRank(integer firstRank)
        me:firstRank = firstRank
    end
end