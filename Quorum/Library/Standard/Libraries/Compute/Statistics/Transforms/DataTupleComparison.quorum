package Libraries.Compute.Statistics.Transforms
use Libraries.Containers.Support.Comparison

class DataTupleComparison is Comparison
    boolean sortSmallToLarge = true

    action Compare(Object a, Object b) returns integer
        DataTuple tupleA = cast(DataTuple, a)
        DataTuple tupleB = cast(DataTuple, b)

        integer comparison = 0
        if tupleA:values:GetSize() = tupleB:values:GetSize()
            integer i = 0
            repeat while i < tupleA:values:GetSize() and comparison = 0
                if sortSmallToLarge
                    if tupleA:values:Get(i) = undefined or tupleB:values:Get(i) = undefined
                        comparison = CompareUndefined(tupleA:values:Get(i), tupleB:values:Get(i))
                    else
                        comparison = tupleA:values:Get(i):Compare(tupleB:values:Get(i))
                    end
                else
                    if tupleA:values:Get(i) = undefined or tupleB:values:Get(i) = undefined
                        comparison = -1 * CompareUndefined(tupleA:values:Get(i), tupleB:values:Get(i))
                    else
                        comparison = -1 * tupleA:values:Get(i):Compare(tupleB:values:Get(i))
                    end
                end
                i = i + 1
            end
        end

        return comparison
    end

    private action CompareUndefined(Object a, Object b) returns integer
        
        if a = undefined and b = undefined
            return 0
        elseif a = undefined
            return -1
        else
            return 1
        end
    end

    action GetSortSmallToLarge returns boolean
        return sortSmallToLarge
    end

    action SetSortSmallToLarge(boolean sortSmallToLarge)
        me:sortSmallToLarge = sortSmallToLarge
    end
end