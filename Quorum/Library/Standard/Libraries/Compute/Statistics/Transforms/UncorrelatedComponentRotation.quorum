package Libraries.Compute.Statistics.Transforms

use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Matrix
use Libraries.Compute.Vector
use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Reporting.PrincipalComponentAnalysisResult

/*
    UncorrelatedComponentRotation implements a varimax orthogonal rotation:
        Maintains non-correlation while maximizing the sum of variance across all factors. 
        This helps highlight a reduced number of variables to explain the same results.
        This rotation produces factors that are uncorrelated.

        Varimax 
        For more information:   
            Kaiser, H. F. (1958). The varimax criterion for analytic rotation in factor analysis.
            http://cda.psych.uiuc.edu/psychometrika_highly_cited_articles/kaiser_1958.pdf

            Jennrich, Robert (1970). Orthogonal rotation algorithms
            https://link.springer.com/content/pdf/10.1007/BF02291264.pdf?pdf=button   

            Jennrich, Robert (2001). A simple general method for orthogonal rotation
            https://link.springer.com/content/pdf/10.1007/BF02294840.pdf?pdf=button 

    Attribute: Author Hannah Williams
    Attribute: Example

    use Libraries.Compute.Statistics.DataFrame
    use Libraries.Compute.Statistics.Tests.PrincipalComponentAnalysis
    use Libraries.Compute.Statistics.Tests.UncorrelatedComponentRotation

    DataFrame frame
    frame:Load("Data/Data.csv")
    frame:SelectAllColumns()

    PrincipalComponentAnalysis pca
    pca:Calculate(frame)
    DataFrame loadings = pca:GetFactorLoadings()

    UncorrelatedComponentRotation varimax
    DataFrame rotated = varimax:Rotate(loadings)
    
    output rotated:ToText()
*/
class UncorrelatedComponentRotation is ComponentRotation
    private Math math
    private boolean converged = false
    private integer iterations = 0
    private DataFrame loadings = undefined
    private Matrix rotationMatrix = undefined
    private Vector communality = undefined

    on create
        Normalize(true)
        SetMaximumIterations(100)
    end

    action Rotate(PrincipalComponentAnalysisResult result) returns DataFrame
        DataFrame frame = result:GetFactorLoadings() 
        communality = result:GetCommunality()
        return Rotate(frame)
    end

    action Rotate(DataFrame frame) returns DataFrame
        if frame = undefined or frame:GetSize() < 1
            alert("No factor loadings to rotate")
        end 
        integer rows = frame:GetColumn(0):GetSize()
        integer cols = frame:GetSize() 

        // Copy loadings data frame
        loadings = frame:Copy()

        // Compute the communality to use in normalization
        if communality = undefined or communality:GetSize() not= rows
            Vector h2
            h2:SetSize(rows)
            communality = ComputeCommunality(loadings, h2)
        end

        // Compute the square roots of the communalities to use in normalization
        Vector sqrtCommunality 
        sqrtCommunality:SetSize(communality:GetSize())
        i = 0
        repeat while i < communality:GetSize()
            sqrtCommunality:Set(i, math:SquareRoot(communality:Get(i)))
            i = i + 1
        end 

        i = 0
        repeat while i < cols
            // Verify the data
            DataFrameColumn column = loadings:GetColumn(i)
            if not column:IsNumberColumn() and not column:IsIntegerColumn()
                alert("The loadings data frame must consist of only numerical columns.")
            end
            if column:GetSize() not= rows
                alert("All columns in the loadings data frame must be the same size.")
            end
            if column:GetUndefinedSize() not= 0
                alert("The loadings data frame cannot contain any undefined entries.")
            end

            // Rename the headers
            column:SetHeader("RPC" + (i+1))

            // Normalize the factor loadings if requested 
            if Normalize()
                j = 0 
                repeat while j < rows
                    column:SetAsNumber(j, column:GetAsNumber(j) / sqrtCommunality:Get(j))
                    j = j + 1
                end
            end
            i = i + 1
        end 

        // Initialize the rotation matrix
        Matrix init
        init:Fill(cols, cols, 0)
        rotationMatrix = init:Identity()
  
        // Rotation Algorithm
        // Pairwise rotation on every two columns
        number previousCriterion = ComputeCriterion(loadings)
        number criterion = 0
        iterations = 0   
        repeat while iterations < GetMaximumIterations() and not converged
            i = 0
            repeat while i < cols
                DataFrameColumn iColumn = loadings:GetColumn(i)
                j = i + 1 
                repeat while j < cols
                    DataFrameColumn jColumn = loadings:GetColumn(j)
                    PairwiseRotation(iColumn, jColumn, i, j)
                    j = j + 1
                end
                i = i + 1
            end 

            criterion = ComputeCriterion(loadings)
            if math:AbsoluteValue(criterion - previousCriterion) < GetEpsilon()
                converged = true
            end
            previousCriterion = criterion 
            iterations = iterations + 1
        end

        if Normalize()
            // Un-normalize the data
            i = 0
            repeat while i < cols
                DataFrameColumn column = loadings:GetColumn(i)
                j = 0 
                repeat while j < rows
                    column:SetAsNumber(j, column:GetAsNumber(j) * sqrtCommunality:Get(j))
                    j = j + 1
                end
                i = i + 1
            end 
        end

        return loadings
    end

    /* 
        Pairwise Rotation 
        Equation found here: 
            Kaiser, H. F. (1958). The varimax criterion for analytic rotation in factor analysis.
            http://cda.psych.uiuc.edu/psychometrika_highly_cited_articles/kaiser_1958.pdf
    */            
    private action PairwiseRotation(DataFrameColumn column1, DataFrameColumn column2, integer index1, integer index2)
        number rows = column1:GetSize()
        number U = 0
        number V = 0
        number UV = 0
        number U2minusV2 = 0
        i = 0
        repeat while i < rows
            number value1 = column1:GetAsNumber(i)
            number value2 = column2:GetAsNumber(i)
            number u = value1*value1 - value2*value2
            number v = 2*value1*value2
            U = U + u
            V = V + v
            UV = UV + u*v
            U2minusV2 = U2minusV2 + (u*u - v*v)
            i = i + 1
        end   
        number X = 2 * (rows * UV - U * V)
        number Y = rows * U2minusV2 - (U*U - V*V)
        number phi = 0.25 * math:InverseTangent2(X,Y)
        number cos = math:Cosine(phi)
        number sin = math:Sine(phi)

        DataFrame frame
        frame:AddColumn(column1) 
        frame:AddColumn(column2)
        Matrix original = frame:ConvertToMatrix()
        Matrix m
        m:SetSize(2,2)
        m:Set(0, 0, cos)
        m:Set(0, 1, -sin)
        m:Set(1, 0, sin)
        m:Set(1, 1, cos)
        Matrix rotated = original:Multiply(m)

        if not (math:AbsoluteValue(phi) < GetEpsilon())
            i = 0
            repeat while i < rows
                number newValue1 = rotated:Get(i, 0)
                number newValue2 = rotated:Get(i, 1)
                column1:SetAsNumber(i, newValue1)
                column2:SetAsNumber(i, newValue2)
                i = i + 1
            end

            Matrix subRot
            subRot:SetSize(rotationMatrix:GetRows(), 2)
            subRot:SetColumn(0, rotationMatrix:GetColumn(index1))
            subRot:SetColumn(1, rotationMatrix:GetColumn(index2))            
            subRot = subRot:Multiply(m)
            rotationMatrix:SetColumn(index1, subRot:GetColumn(0))
            rotationMatrix:SetColumn(index2, subRot:GetColumn(1))
        end
    end

    /* 
        Criterion for the Rotation Algorithm:
        Equation found here:
            Kaiser, H. F. (1958). The varimax criterion for analytic rotation in factor analysis.
            http://cda.psych.uiuc.edu/psychometrika_highly_cited_articles/kaiser_1958.pdf
    */
    private action ComputeCriterion(DataFrame frame) returns number
        number cols = frame:GetSize()
        number rows = 0
        Array<number> rowSQ
        Array<number> rowSS
        i = 0
        repeat while i < cols
            DataFrameColumn column = frame:GetColumn(i)
            if i = 0
                rows = column:GetSize()
            end
            j = 0 
            repeat while j < rows
                number value = column:GetAsNumber(j)
                number ss = value*value
                if i = 0
                    rowSQ:Add(ss*ss)
                    rowSS:Add(ss)
                else
                    rowSQ:Set(j, rowSQ:Get(j) + ss*ss)
                    rowSS:Set(j, rowSS:Get(j) + ss)
                end
                j = j + 1
            end
            i = i + 1
        end
        
        number sum = 0
        i = 0
        repeat while i < rowSQ:GetSize()
            sum = sum + (cols * rowSQ:Get(i) - rowSS:Get(i) * rowSS:Get(i)) / (cols * cols)
            i = i + 1
        end
        return sum
    end

    action Converged returns boolean
        return converged
    end

    action GetIterations returns integer
        return iterations
    end

    action GetLoadings returns DataFrame
        return loadings
    end

    action GetRotationMatrix returns Matrix
        return rotationMatrix
    end
end