package Libraries.Compute

/*
    The ComplexNumber class is used to represent an extension of real numbers that can 
    store and express negative numbers' roots. Additionally, it contains actions to perform
    basic operations on these ComplexNumbers, such as addition, division, multiplication and so on.
    
    This was ported and adapted from the same model in Apache Commons, but was expanded 
    upon to simplify the library and add a variety of helper actions that were missing.
    More information about this class can be found on its documentation page Complex:
    https://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/index.html

    For more information: https://en.wikipedia.org/wiki/Complex_number
    
    Attribute: Author Hannah Stabler
    Attribute: Example

    use Libraries.Compute.ComplexNumber

    class Main
        action Main
            number realPart = 3
            number imaginaryPart = 9

            ComplexNumber complex
            complex:SetValue(realPart, imaginaryPart)
            complex = complex:RaiseToPower(2)
            output complex:ToText()
        end
    end
*/

class ComplexNumber
    /* The square root of -1. */
    /* A complex number representing "0.0 + 1.0i" */
    ComplexNumber I = undefined
    /* A complex number representing "NaN + NaNi" */
    ComplexNumber NAN = undefined
    /* A complex number representing "+INF + INFi" */
    ComplexNumber INF = undefined
    /* A complex number representing "1.0 + 0.0i" */
    ComplexNumber ONE = undefined
    /* A complex number representing "0.0 + 0.0i" */
    ComplexNumber ZERO = undefined

    /* The imaginary part */
    private number imaginary = 0
    /* The real part */
    private number real = 0

    /* Record whether this complex number is equal to NaN */
    private boolean isNotANumber = false
    /* Record whether this complex number is infinite */
    private boolean isInfinite = false

    Math math

    /*
      Create a complex number given the real part.
     
      Attribute: Parameter real Real part.

      Attribute: Example
        use Libraries.Compute.ComplexNumber

        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart)
                complex = complex:RaiseToPower(2)
                output complex:ToText()
            end
        end
    */
    action SetValue(number real)
        me:SetValue(real, 0.0)
    end

    /*
        Create a complex number given the real and imaginary parts.
         
        Attribute: Parameter real Real part.
        Attribute: Parameter imaginary Imaginary part.

        Attribute: Example
    
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
                output complex:ToText()
            end
        end
    */
    action SetValue(number real, number imaginary)
        me:real = real
        me:imaginary = imaginary

        isNotANumber = real:IsNotANumber() or imaginary:IsNotANumber()
        isInfinite = not isNotANumber and (real:IsInfinite() or imaginary:IsInfinite())
    end

    /*
        Return the absolute value of this complex number.
        Returns NaN if either real or imaginary part is NaN
        and Double.POSITIVE_INFINITY if neither part is NaN,
        but at least one part is infinite.
         
        Attribute: Returns the absolute value.

        Attribute: Example

        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = -3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
                output complex:AbsoluteValue()
            end
        end
     */
    action AbsoluteValue() returns number
        if isNotANumber
            return real:GetNotANumberValue()
        end
        if isInfinite
            return real:GetPositiveInfinityValue()
        end
        if (math:AbsoluteValue(real) < math:AbsoluteValue(imaginary))
            if (imaginary = 0.0) 
                return math:AbsoluteValue(real)
            end
            number q = real / imaginary
            return math:AbsoluteValue(imaginary) * math:SquareRoot(1 + q * q)
        else
            if (real = 0.0)
                return math:AbsoluteValue(imaginary)
            end
            number q = imaginary / real
            return math:AbsoluteValue(real) * math:SquareRoot(1 + q * q)
        end
    end

    /*
      Returns a Complex Number.
      Uses the definitional formula (a + bi) + (c + di) = (a+c) + (b+d)i
     
      If either the complex number or the addend has an not a number value in
      either part, not a number is returned; otherwise Infinite
      and not a number values are returned in the parts of the result
      according to the rules for java.lang.Double arithmetic.
      throws an exception if the addend is undefined.
     
      Attribute: Parameter addend Value to be added to this Complex.
      Attribute: Returns this + addend.
      
      Attribute: Example
      
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                ComplexNumber complex2
                complex2:SetValue(imaginaryPart, realPart)
                ComplexNumber value = complex:Add(complex2)
                output value:ToText()
            end
        end
     */
    action Add(ComplexNumber value) returns ComplexNumber
        if value = undefined
            alert("Cannot add undefined complex numbers")
        end
        if isNotANumber or value:IsNotANumber()
            return GetNotANumberValue()
        end

        ComplexNumber complex
        complex:SetValue(real + value:GetReal(), imaginary + value:GetImaginary())
        return complex
    end

    /*
      Returns a Complex Number whose value is this + addend,
      with addend interpreted as a real number.
     
      Attribute: Parameter addend Value to be added to this Complex Number.
      Attribute: Returns this + addend.

      Attribute: Example
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                ComplexNumber value = complex:Add(2)
                output value:ToText()
            end
        end
    */
    action Add(number value) returns ComplexNumber
        if isNotANumber or value:IsNotANumber()
            return GetNotANumberValue()
        end

        ComplexNumber complex
        complex:SetValue(real + value, imaginary)
        return complex
    end

     /*
      Returns the conjugate of this complex number.
      The conjugate of a + bi is a - bi.
      
      #NaN is returned if either the real or imaginary
      part of this Complex number equals Double.NaN.
      
      If the imaginary part is infinite, and the real part is not
      NaN, the returned value has infinite imaginary part
      of the opposite sign, e.g. the conjugate of
      1 + POSITIVE_INFINITY i is 1 - NEGATIVE_INFINITY i.

      Attribute: Returns the conjugate of this Complex object.

        Attribute: Example
        use Libraries.Compute.ComplexNumber

        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                ComplexNumber value = complex:Conjugate()
                output value:ToText()
            end
        end
     */
    action Conjugate() returns ComplexNumber
        if isNotANumber
            return GetNotANumberValue()
        end

        ComplexNumber complex
        complex:SetValue(real, -imaginary)
        return complex
    end

    /*
      Returns a Complex whose value is (me / divisor).
      Implements the definitional formula

         (a + bi)/(c + di) = (ac + bd + (bc - ad)i)/(c^2 + d^2)

      but uses "http://doi.acm.org/10.1145/1039813.1039814"
      prescaling of operands to limit the effects of overflows and
      underflows in the computation. Infinite and NaN values are handled according to the
      following rules, applied in the order presented:

       If either me or divisor has a NaN valuein either part, #NaN is returned.
       
       If divisor equals #ZERO, #NaN is returned.
       
       If this and divisor are both infinite, #NaN is returned.
       
       If this is finite (i.e., has no Infinite or NaN parts) and divisor is infinite (one or both parts
        infinite), #ZERO is returned.
       
       If me is infinite and divisor is finite, Na values are returned in the parts of the result if the
        Double rules applied to the definitional formula force NaN results.
       
      Throws NullArgumentException if divisor is undefined.
     
      Attribute: Parameter divisor Value by which this Complex is to be divided.
      Attribute: Returns me / divisor.

        Attribute: Example
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                ComplexNumber complex2
                complex2:SetValue(3, 3)
                ComplexNumber value = complex:Divide(complex2)
                output value:ToText()
            end
        end
      
     */
    action Divide(ComplexNumber divisor) returns ComplexNumber
        if divisor = undefined
            alert("Cannot divide undefined complex numbers")
        end
        if isNotANumber or divisor:IsNotANumber()
            return GetNotANumberValue()
        end

        number c = divisor:GetReal()
        number d = divisor:GetImaginary()
        if (c = 0.0 and d = 0.0)
            return GetNotANumberValue()
        end

        if (divisor:IsInfinite() and not isInfinite)
            return GetZeroValue()
        end

        if (math:AbsoluteValue(c) < math:AbsoluteValue(d))
            number q = c / d
            number denominator = c * q + d

            ComplexNumber complex
            complex:SetValue((real * q + imaginary) / denominator, (imaginary * q - real) / denominator)
            return complex
        else
            number q = d / c
            number denominator = d * q + c
            ComplexNumber complex
            complex:SetValue((imaginary * q + real) / denominator, (imaginary - real * q) / denominator)
            return complex
        end
    end

    /*
      Returns a Complex whose value is me / divisor),
      with divisor interpreted as a real number.
     
      Attribute: Parameter divisor Value by which this Complex is to be divided.
      Attribute: Returns me / divisor.
        
      Attribute: Example
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                ComplexNumber value = complex:Divide(3)
                output value:ToText()
            end
        end
        
     */
    action Divide(number divisor) returns ComplexNumber
        if isNotANumber or divisor:IsNotANumber()
            return GetNotANumberValue()
        end
        if (divisor = 0.0)
            return GetNotANumberValue()
        end
        if divisor:IsInfinite()
            if not isInfinite
                return GetZeroValue()
            else
                return GetNotANumberValue()
            end
        end
        ComplexNumber complex
        complex:SetValue(real / divisor, imaginary  / divisor)
        return complex
    end

    /** {@inheritDoc} */
    action Reciprocal() returns ComplexNumber
        if isNotANumber
            return GetNotANumberValue()
        end

        if real = 0.0 and imaginary = 0.0
            return GetPositiveInfinityValue()
        end

        if isInfinite
            return GetZeroValue()
        end

        if (math:AbsoluteValue(real) < math:AbsoluteValue(imaginary))
            number q = real / imaginary
            number scale = 1.0 / (real * q + imaginary)
            ComplexNumber complex
            complex:SetValue(scale * q, -scale)
            return complex
        else
            number q = imaginary / real
            number scale = 1.0 / (imaginary * q + real)
            ComplexNumber complex
            complex:SetValue(scale, -scale * q)
            return complex
        end
    end

    /*
      Test for equality with another object.
      If both the real and imaginary parts of two complex numbers
      are exactly the same, and neither is Double.NaN, the two
      Complex objects are considered to be equal.
      The behavior is the same as for JDK's Double#equals(Object)
      Double:
      
        All NaN values are considered to be equal,
        i.e, if either (or both) real and imaginary parts of the complex
        number are equal to Double.NaN, the complex number is equal
        to NaN.

        Instances constructed with different representations of zero (i.e.
        either "0" or "-0") are not considered to be equal.

     
      Attribute: Parameter other Object to test for equality with this instance.
      Attribute: Returns true if the objects are equal, false if object is undefined, not an instance of Complex, or not equal to this instance.
        Attribut: Example
        use Libraries.Compute.ComplexNumber

        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                ComplexNumber complex2
                complex2:SetValue(3, 17)
                output complex:Equals(complex2)
            end
        end
     */
    action Equals(ComplexNumber other) returns boolean
        if other:IsNotANumber()
            return isNotANumber
        else
            return (real = other:GetReal() and imaginary = other:GetImaginary())
        end
        return false
    end

    /*
      Returns a {@code Complex} whose value is me * factor.
      Implements preliminary checks for NaN and infinity followed by
      the definitional formula:
       (a + bi)(c + di) = (ac - bd) + (ad + bc)i
      Returns #NaN if either me or factor has one or
      more NaN parts.

      Returns #INF if neither me nor factor has one
      or more NaN parts and if either me or factor
      has one or more infinite parts (same result is returned regardless of
      the sign of the components).
      
      Returns finite values in components of the result per the definitional
      formula in all remaining cases.Throws NullArgumentException if factor is undefined.
     
      Attribute: Parameter  multiplier factor value to be multiplied by this Complex.
      Attribute: Returns me * factor. 

        Attribute: Example
        use Libraries.Compute.ComplexNumber

        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                ComplexNumber complex2
                complex2:SetValue(1, 1)
                output complex:Multiply(complex2):ToText()
            end
        end
     */
    action Multiply(ComplexNumber multiplier) returns ComplexNumber
        if multiplier = undefined
            alert("Cannot multiply undefined complex numbers")
        end
        if isNotANumber or multiplier:IsNotANumber()
            return GetNotANumberValue()
        end
        if real:IsInfinite() or imaginary:IsInfinite() or multiplier:GetReal():IsInfinite() or multiplier:GetImaginary():IsInfinite()
            // we don't use isInfinite() to avoid testing for NaN again
            return GetPositiveInfinityValue()
        end
        ComplexNumber complex
        complex:SetValue(real * multiplier:GetReal() - imaginary * multiplier:GetImaginary(), real * multiplier:GetImaginary() + imaginary * multiplier:GetReal())
        return complex
    end

    /*
      Returns a Complex whose value is me * factor, with factor
      interpreted as a real number.
     
      Attribute: Parameter multiplier factor value to be multiplied by this Complex.
      Attribute: Returns me * factor.

        Attribute: Example
        use Libraries.Compute.ComplexNumber

        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                output complex:Multiply(2):ToText()
            end
        end
    */
    action Multiply(number multiplier) returns ComplexNumber
        if isNotANumber or multiplier:IsNotANumber()
            return GetNotANumberValue()
        end
        if real:IsInfinite() or imaginary:IsInfinite() or multiplier:IsInfinite()
            // we don't use isInfinite() to avoid testing for NaN again
            return GetPositiveInfinityValue()
        end
        ComplexNumber complex
        complex:SetValue(real * multiplier, imaginary * multiplier)
        return complex
    end

    /*
      Returns a Complex whose value is (-me).
      Returns NaN if either real or imaginary
      part of this Complex number is Double.NaN.
     
      Attribute: Returns -me.

        Attribute: Example
        use Libraries.Compute.ComplexNumber

        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                output complex:Negate():ToText()
            end
        end
     */
    action Negate() returns ComplexNumber
        if isNotANumber
            return GetNotANumberValue()
        end
        ComplexNumber complex
        complex:SetValue(-real, -imaginary)
        return complex
    end

    /*
      Returns a Complex whose value is (me - subtrahend).
      Uses the definitional formula
       (a + bi) - (c + di) = (a-c) + (b-d)i
      If either me or subtrahend has a NaN value in either part,
      #NaN is returned; otherwise infinite and NaN values are
      returned in the parts of the result according to the rules for
      java.lang.Double arithmetic. Throws NullArgumentException if subtrahend is undefined.
     
      Attribute: Parameter value subtrahend value to be subtracted from this Complex.
      Attribute: Returns me - subtrahend.
      
        Attribute: Example
        use Libraries.Compute.ComplexNumber

        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                ComplexNumber complex2
                complex2:SetValue(1, 1)
                output complex:Subtract(complex2):ToText()
            end
        end
    */
    action Subtract(ComplexNumber value) returns ComplexNumber
        if value = undefined
            alert("Cannot subtract undefined complex numbers")
        end
        if isNotANumber or value:IsNotANumber()
            return GetNotANumberValue()
        end

        ComplexNumber complex
        complex:SetValue(real - value:GetReal(), imaginary - value:GetImaginary())
        return complex
    end

    /*
      Returns a Complex whose value is (me - subtrahend).
     
      Attribute: Parameter value subtrahend value to be subtracted from this Complex.
      Attribute: Returns me - subtrahend.

        Attribute: Example
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                output complex:Subtract(1):ToText()
            end
        end

    */
    action Subtract(number value) returns ComplexNumber
        if isNotANumber or value:IsNotANumber()
            return GetNotANumberValue()
        end
        ComplexNumber complex
        complex:SetValue(real - value, imaginary)
        return complex
    end

    /*
      Compute the "http://mathworld.wolfram.com/SquareRoot.html"
      square root of 1 - this^2 for this complex
      number.
      Computes the result directly as sqrt(ONE:Subtract(z:Multiply(z))).

      Returns Complex#NaN if either real or imaginary part of the
      input argument is NaN.

      Infinite values in real or imaginary parts of the input may result in
      infinite or NaN values returned in parts of the result.
     
      Attribute: Returns the square root of 1 - me^2.
    */
    private action SquareRoot1Z() returns ComplexNumber
        ComplexNumber complex
        complex:SetValue(1.0, 0.0)
        return complex:Subtract(me:Multiply(me)):SquareRoot()
    end

    /*
      Compute the "http://mathworld.wolfram.com/SquareRoot.html"
      square root of this complex number. Implements the following algorithm to compute sqrt(a + bi):
      Let t = sqrt((|a| + |a + bi|) / 2)
      if  a &#8805; 0 return  t + (b/2t)i
       else return |b|/2t + sign(b)t i 
      where 
      |a| = FastMath#abs(a)
      |a + bi| = Complex#abs(a + bi)
      sign(b) = FastMath#copySign(double,double) copySign(1d, b)

      Returns Complex#NaN if either real or imaginary part of the
      input argument is NaN.

      Infinite values in real or imaginary parts of the input may result in
      infinite or NaN values returned in parts of the result.
      
       Examples:
        sqrt(1 &plusmn; INFINITY i) = INFINITY + NaN i
        sqrt(INFINITY + i) = INFINITY + 0i
        sqrt(-INFINITY + i) = 0 + INFINITY i
        sqrt(INFINITY &plusmn; INFINITY i) = INFINITY + NaN i
        sqrt(-INFINITY &plusmn; INFINITY i) = NaN &plusmn; INFINITY i
     
      Attribute: Returns the square root of me.

        Attribute: Example
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 4
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                output complex:SquareRoot():ToText()
            end
        end
    */
    action SquareRoot() returns ComplexNumber
        if isNotANumber
            return GetNotANumberValue()
        end

        if (real = 0.0 and imaginary = 0.0)
            return GetZeroValue()
        end

        number t = math:SquareRoot((math:AbsoluteValue(real) + me:AbsoluteValue()) / 2.0)
        if real >= 0.0 
            ComplexNumber complex
            complex:SetValue(t, imaginary / (2.0 * t))
            return complex
        else 
            number copysign = 1.0
            if imaginary < 0
                copysign = -1.0
            end 
            ComplexNumber complex
            complex:SetValue(math:AbsoluteValue(imaginary) / (2.0 * t), copysign * t)
            return complex
        end
    end

    /*
      Compute the "http://mathworld.wolfram.com/NaturalLogarithm.html"
      natural logarithm of this complex number.
      Implements the formula:

        log(a + bi) = ln(|a + bi|) + arg(a + bi)i

      where ln on the right hand side isFastMath#log,
      |a + bi|} is the modulus, Complex#abs,  and
      arg(a + bi) = FastMath#atan2(b, a).

      Returns {@link Complex#NaN} if either real or imaginary part of the
      input argument is NaN.
      Infinite (or critical) values in real or imaginary parts of the input may
      result in infinite or NaN values returned in parts of the result.

       Examples:
        log(1 &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/2)i
        log(INFINITY + i) = INFINITY + 0i
        log(-INFINITY + i) = INFINITY + &pi;i
        log(INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/4)i
        log(-INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (3&pi;/4)i
        log(0 + 0i) = -INFINITY + 0i

     
      Attribute: Returns the value <code>ln &nbsp; this</code>, the natural logarithm of me.

        Attribute: Example
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                output complex:NaturalLogarithm():ToText()
            end
        end
    */
    action NaturalLogarithm() returns ComplexNumber
        if isNotANumber
            return GetNotANumberValue()
        end

        ComplexNumber complex
        complex:SetValue(math:NaturalLogarithm(me:AbsoluteValue()), math:InverseTangent2(imaginary, real))
        return complex
    end


    /*
      Compute the "http://mathworld.wolfram.com/InverseCosine.html"
      inverse cosine of this complex number.
      Implements the formula:

       acos(z) = -i (log(z + i (sqrt(1 - z^2))))

      Returns Complex#NaN if either real or imaginary part of the
      input argument is NaN or infinite.
     
      Attribute: Returns the inverse cosine of this complex number.

        Attribute: Example
        use Libraries.Compute.ComplexNumber

        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                output complex:InverseCosine():ToText()
            end
        end
     */
    action InverseCosine() returns ComplexNumber
        if isNotANumber
            return GetNotANumberValue()
        end

        return me:Add(me:SquareRoot1Z():Multiply(GetImaginaryOneValue())):NaturalLogarithm():Multiply(GetImaginaryOneValue():Negate())
    end

    /*
      Compute the "http://mathworld.wolfram.com/InverseSine.html"
      inverse sine of this complex number.
      Implements the formula:
      
       asin(z) = -i (log(sqrt(1 - z^2) + iz))
      
      Returns Complex#NaN if either real or imaginary part of the
      input argument is NaN or infinite.
     
      Attribute: Returns the inverse sine of this complex number.

        Attribute: Example
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                output complex:InverseSine():ToText()
            end
        end
    */
    action InverseSine() returns ComplexNumber
        if isNotANumber
            return GetNotANumberValue()
        end
    
        return me:SquareRoot1Z():Add(me:Multiply(GetImaginaryOneValue())):NaturalLogarithm():Multiply(GetImaginaryOneValue():Negate())
    end

    /*
      Compute the "http://mathworld.wolfram.com/InverseTangent.html"
      inverse tangent of this complex number.
      Implements the formula:
      
      atan(z) = (i/2) log((i + z)/(i - z))
      
      Returns Complex#NaN if either real or imaginary part of the
      input argument is NaN or infinite.
     
      Attribute: Returns the inverse tangent of this complex number
      
        Attribute: Example
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                output complex:InverseTangent():ToText()
            end
        end
    */
    action InverseTangent() returns ComplexNumber
        if isNotANumber
            return GetNotANumberValue()
        end

        ComplexNumber complex
        complex:SetValue(2.0, 0.0)
        return me:Add(GetImaginaryOneValue()):Divide(GetImaginaryOneValue():Subtract(me)):NaturalLogarithm():Multiply(GetImaginaryOneValue():Divide(complex))
    end

    /*
      Compute the "http://mathworld.wolfram.com/Cosine.html"
      cosine of this complex number.
      Implements the formula:
      
       cos(a + bi) = cos(a)cosh(b) - sin(a)sinh(b)i
     
      where the (real) functions on the right-hand side are
      FastMath#sin, FastMath#cos, FastMath#cosh and FastMath#sinh.
      
      Returns Complex#NaN if either real or imaginary part of the
      input argument is NaN.
      
      Infinite values in real or imaginary parts of the input may result in
      infinite or NaN values returned in parts of the result.
      
       Examples:

        cos(1 &plusmn; INFINITY i) = 1 \u2213 INFINITY i
        cos(&plusmn;INFINITY + i) = NaN + NaN i
        cos(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
       
     
      Attribute: Returns the cosine of this complex number.

        Attribute: Example
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                output complex:Cosine():ToText()
            end
        end
    */
    action Cosine() returns ComplexNumber
        if isNotANumber
            return GetNotANumberValue()
        end

        ComplexNumber complex
        complex:SetValue(math:Cosine(real) * math:HyperbolicCosine(imaginary), -math:Sine(real) * math:HyperbolicSine(imaginary))
        return complex
    end

    /*
      Compute the "http://mathworld.wolfram.com/HyperbolicCosine.html"
      hyperbolic cosine of this complex number.
      Implements the formula:
      
        cosh(a + bi) = cosh(a)cos(b) + sinh(a)sin(b)i
      
      where the (real) functions on the right-hand side are
      FastMath#sin, FastMath#cos, FastMath#cosh, and FastMath#sinh.
      
      Returns Complex#NaN if either real or imaginary part of the
      input argument is NaN.
      
      Infinite values in real or imaginary parts of the input may result in
      infinite or NaN values returned in parts of the result.
      
      Examples:
       
        cosh(1 &plusmn; INFINITY i) = NaN + NaN i
        cosh(&plusmn;INFINITY + i) = INFINITY &plusmn; INFINITY i
        cosh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
       
     
      Attribute: Returns the hyperbolic cosine of this complex number.

        Attribute: Example
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                output complex:HyperbolicCosine():ToText()
            end
        end
    */
    action HyperbolicCosine() returns ComplexNumber
        if isNotANumber
            return GetNotANumberValue()
        end

        ComplexNumber complex
        complex:SetValue(math:HyperbolicCosine(real) * math:Cosine(imaginary), math:HyperbolicSine(real) * math:Sine(imaginary))
        return complex
    end

    /*
      Compute the "http://mathworld.wolfram.com/Sine.html"
      sine of this complex number.
      Implements the formula:
      
        sin(a + bi) = sin(a)cosh(b) - cos(a)sinh(b)i
      
      where the (real) functions on the right-hand side are
      FastMath#sin, FastMath#cos, FastMath#cosh and FastMath#sinh.
      
      Returns Complex#NaN if either real or imaginary part of the
      input argument is NaN.
      
      Infinite values in real or imaginary parts of the input may result in
      infinite or NaN values returned in parts of the result.
      
       Examples:
      
        sin(1 &plusmn; INFINITY i) = 1 &plusmn; INFINITY i
        sin(&plusmn;INFINITY + i) = NaN + NaN i
        sin(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
       
     
      Attribute: Returns the sine of this complex number.

        Attribute: Example
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                output complex:Sine():ToText()
            end
        end
    */
    action Sine() returns ComplexNumber
        if isNotANumber
            return GetNotANumberValue()
        end

        ComplexNumber complex
        complex:SetValue(math:Sine(real) * math:HyperbolicCosine(imaginary), math:Cosine(real) * math:HyperbolicSine(imaginary))
        return complex
    end

    /*
      Compute the "http://mathworld.wolfram.com/HyperbolicSine.html"
      hyperbolic sine of this complex number.
      Implements the formula:
     
        sinh(a + bi) = sinh(a)cos(b)) + cosh(a)sin(b)i
     
      where the (real) functions on the right-hand side are
      FastMath#sin, FastMath#cos,
      FastMath#cosh and FastMath#sinh.
     
      Returns Complex#NaN if either real or imaginary part of the
      input argument is NaN.
     
      Infinite values in real or imaginary parts of the input may result in
      infinite or NaN values returned in parts of the result.
     
       Examples:
     
        sinh(1 &plusmn; INFINITY i) = NaN + NaN i
        sinh(&plusmn;INFINITY + i) = &plusmn; INFINITY + INFINITY i
        sinh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
     
     
      Attribute: Returns the hyperbolic sine of this.

        Attribute: Example
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                output complex:HyperbolicSine():ToText()
            end
        end
     */
    action HyperbolicSine() returns ComplexNumber
        if isNotANumber
            return GetNotANumberValue()
        end

        ComplexNumber complex
        complex:SetValue(math:HyperbolicSine(real) * math:Cosine(imaginary), math:HyperbolicCosine(real) * math:Sine(imaginary))
        return complex
    end

    /*
      Compute the "http://mathworld.wolfram.com/Tangent.html"
      tangent of this complex number.
      Implements the formula:
     
        tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i
     
      where the (real) functions on the right-hand side are
      FastMath#sin, FastMath#cos, FastMath#cosh and
      FastMath#sinh.
      
      Returns Complex#NaN if either real or imaginary part of the
      input argument is NaN.
     
      Infinite (or critical) values in real or imaginary parts of the input may
      result in infinite or NaN values returned in parts of the result.
      
       Examples:
    
        tan(a &plusmn; INFINITY i) = 0 &plusmn; i
        tan(&plusmn;INFINITY + bi) = NaN + NaN i
        tan(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
        tan(&plusmn;&pi;/2 + 0 i) = &plusmn;INFINITY + NaN i

     
      Attribute: Returns the tangent of me.

        Attribute: Example
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                output complex:Tangent():ToText()
            end
        end
     */
    action Tangent() returns ComplexNumber
        if isNotANumber or real:IsInfinite()
            return GetNotANumberValue()
        end
        if imaginary > 20.0
            ComplexNumber complex
            complex:SetValue(0.0, 1.0)
            return complex
        end
        if imaginary < -20.0
            ComplexNumber complex
            complex:SetValue(0.0, -1.0)
            return complex
        end
        number real2 = 2.0 * real
        number imaginary2 = 2.0 * imaginary
        number d = math:Cosine(real2) + math:HyperbolicCosine(imaginary2)
        ComplexNumber complex
        complex:SetValue(math:Sine(real2) / d, math:HyperbolicSine(imaginary2) / d)
        return complex
    end

    /*
      Compute the "http://mathworld.wolfram.com/HyperbolicTangent.html"
      hyperbolic tangent of this complex number.
      Implements the formula:
      
        tan(a + bi) = sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i
       
      where the (real) functions on the right-hand side are
      FastMath#sin, FastMath#cos, FastMath#cosh and FastMath#sinh.
          
      Returns Complex#NaN if either real or imaginary part of the
      input argument is NaN.
      
      Infinite values in real or imaginary parts of the input may result in
      infinite or NaN values returned in parts of the result.
      
       Examples:
       
        tanh(a &plusmn; INFINITY i) = NaN + NaN i
        tanh(&plusmn;INFINITY + bi) = &plusmn;1 + 0 i
        tanh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
        tanh(0 + (&pi;/2)i) = NaN + INFINITY i
     
       Attribute: Returns the hyperbolic tangent of me.

        Attribute: Example
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                output complex:HyperbolicTangent():ToText()
            end
        end
     */
    action HyperbolicTangent() returns ComplexNumber
        if isNotANumber or imaginary:IsInfinite()
            return GetNotANumberValue()
        end
        if real > 20.0
            ComplexNumber complex
            complex:SetValue(1.0, 0.0)
            return complex
        end
        if real < -20.0
            ComplexNumber complex
            complex:SetValue(-1.0, 0.0)
            return complex
        end
        number real2 = 2.0 * real
        number imaginary2 = 2.0 * imaginary
        number d = math:HyperbolicCosine(real2) + math:Cosine(imaginary2)
        ComplexNumber complex
        complex:SetValue(math:HyperbolicSine(real2) / d, math:Sine(imaginary2) / d)
        return complex
    end

    /*
        Compute the exponential function of this complex number.
        Implements the formula:
        exp(a + bi) = exp(a)cos(b) + exp(a)sin(b)i
        
        Returns Complex Not a Number if either real or imaginary part of the
        input argument is Not a Number.
        
        Infinite values in real or imaginary parts of the input may result in
        infinite or NaN values returned in parts of the result.

        Attribute: Returns e^me.

        Attribute: Example
 
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                output complex:NaturalExponent():ToText()
            end
        end  
     */
    action NaturalExponent() returns ComplexNumber
        if isNotANumber
            return GetNotANumberValue()
        end

        number expReal = math:RaiseNaturalNumberToPower(real)
        ComplexNumber complex
        complex:SetValue(expReal * math:Cosine(imaginary), expReal * math:Sine(imaginary))
        return complex
    end

    /*
        Returns of value of this complex number raised to the power of x.
        Implements the formula:
        
        y^x = exp(x*log(y))
        
        where exp and log are NaturalExplonent and NaturalLogorithm, respectively.
        
        Returns Complex Not a number if either real or imaginary part of the
        input argument is not a number or infinite, or if y
        equals Complex#ZERO.

        Attribute: Parameter  x exponent to which this ComplexNumber is to be raised.
        Attribute: Returns me^x.

        Attribute: Example
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                ComplexNumber complex2
                complex2:SetValue(2,2)
                output complex:RaiseToPower(complex2):ToText()
            end
        end
     */
    action RaiseToPower(ComplexNumber x) returns ComplexNumber
        if x = undefined
            alert("Cannot compute power of undefined complex numbers")
        end
        return me:NaturalLogarithm():Multiply(x):NaturalExponent()
    end

    /*
      Returns of value of this complex number raised to the power of x.
     
      Attribute: Parameter  x exponent to which this Complex Number is to be raised.
      Attribute: Returns me^x.

        Attribute: Example
        use Libraries.Compute.ComplexNumber
    
        class Main
            action Main
                number realPart = 3
                number imaginaryPart = 9
    
                ComplexNumber complex
                complex:SetValue(realPart, imaginaryPart)
    
                output complex:RaiseToPower(2):ToText()
            end
        end
    */
    action RaiseToPower(number x) returns ComplexNumber
        return me:NaturalLogarithm():Multiply(x):NaturalExponent()
    end
  
    action IsNotANumber returns boolean
        return isNotANumber
    end

    action IsInfinite returns boolean
        return isInfinite
    end

    action GetImaginary returns number
        return imaginary
    end

    action GetReal returns number
        return real
    end

    action GetNotANumberValue returns ComplexNumber
        if NAN = undefined
            ComplexNumber c
            c:SetValue(real:GetNotANumberValue(),imaginary:GetNotANumberValue())
            NAN = c
        end
        return NAN
    end

    action GetPositiveInfinityValue returns ComplexNumber
        if INF = undefined
            ComplexNumber c
            c:SetValue(real:GetPositiveInfinityValue(),imaginary:GetPositiveInfinityValue())
            INF = c
        end
        return INF
    end

    action GetImaginaryOneValue returns ComplexNumber
        if I = undefined
            ComplexNumber c
            c:SetValue(0.0,1.0)
            I = c
        end
        return I
    end

    action GetOneValue returns ComplexNumber
        if ONE = undefined
            ComplexNumber c
            c:SetValue(1.0,0.0)
            ONE = c
        end
        return ONE
    end

    action GetZeroValue returns ComplexNumber
        if ZERO = undefined
            ComplexNumber c
            c:SetValue(0.0,0.0)
            ZERO = c
        end
        return ZERO
    end

    /*
        Outputs the complex number string.
        
        Attribute: Returns the complex number sentence.
    */
    action ToText returns text
        text result = ""
        result = GetReal() + " + " + GetImaginary() + "i"
        return result
    end
end