package Libraries.Compute

/*
    The ComplexNumber class is used to represent an extension of real numbers that can 
    store and express negative numbers' roots. Additionally, it contains actions to perform
    basic operations on these ComplexNumbers, such as addition, division, multiplication and so on.
    
    This was ported and adapted from the same model in Apache Commons, but was expanded 
    upon to simplify the library and add a variety of helper actions that were missing.
    More information about this class can be found on its documentation page Complex:
    https://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/index.html

    For more information: https://en.wikipedia.org/wiki/Complex_number
    
    Attribute: Author Hannah Stabler
    Attribute: Example

    use Libraries.Compute.ComplexNumber

    class Main
        action main
            number realpart = 3
            number imaginarypart = 9

            ComplexNumber complex
            complex:SetValue(realPart, imaginarypart)
            complex = complex:RaiseToPower(2)
            output complex:ToText()
        end
    end
*/

class ComplexNumber
    /** The square root of -1. */
    /** A complex number representing "0.0 + 1.0i" */
    ComplexNumber I
    /** A complex number representing "NaN + NaNi" */
    ComplexNumber NAN
    /** A complex number representing "+INF + INFi" */
    ComplexNumber INF
    /** A complex number representing "1.0 + 0.0i" */
    ComplexNumber ONE
    /** A complex number representing "0.0 + 0.0i" */
    ComplexNumber ZERO

    /* The imaginary part */
    private number imaginary = 0
    /* The real part */
    private number real = 0

    /* Record whether this complex number is equal to NaN */
    private boolean isNotANumber = false
    /* Record whether this complex number is infinite */
    private boolean isInfinite = false

    Math math

    on create
        I:SetValue(0.0,1.0)
        NAN:SetValue(real:GetNotANumberValue(),real:GetNotANumberValue())
        INF:SetValue(real:GetPositiveInfinityValue(),real:GetPositiveInfinityValue())
        ONE:SetValue(1.0,0.0)
        ZERO:SetValue(0.0,0.0)
    end

    /**
     * Create a complex number given the real and imaginary parts.
     *
     * @param real Real part.
     * @param imaginary Imaginary part.
    */
    action SetValue(number real)
        me:SetValue(real, 0.0)
    end

    /**
     * Create a complex number given the real and imaginary parts.
     *
     * @param real Real part.
     * @param imaginary Imaginary part.
    */
    action SetValue(number real, number imaginary)
        me:real = real
        me:imaginary = imaginary

        isNotANumber = real:IsNotANumber() or imaginary:IsNotANumber()
        isInfinite = not isNotANumber and (real:IsInfinite() or imaginary:IsInfinite())
    end

    /**
     * Return the absolute value of this complex number.
     * Returns {@code NaN} if either real or imaginary part is {@code NaN}
     * and {@code Double.POSITIVE_INFINITY} if neither part is {@code NaN},
     * but at least one part is infinite.
     *
     * @return the absolute value.
     */
    action AbsoluteValue() returns number
        if isNotANumber
            return real:GetNotANumberValue()
        end
        if isInfinite
            return real:GetPositiveInfinityValue()
        end
        if (math:AbsoluteValue(real) < math:AbsoluteValue(imaginary))
            if (imaginary = 0.0) 
                return math:AbsoluteValue(real)
            end
            number q = real / imaginary
            return math:AbsoluteValue(imaginary) * math:SquareRoot(1 + q * q)
        else
            if (real = 0.0)
                return math:AbsoluteValue(imaginary)
            end
            number q = imaginary / real
            return math:AbsoluteValue(real) * math:SquareRoot(1 + q * q)
        end
    end

    /**
     * Returns a {@code Complex} whose value is
     * {@code (this + addend)}.
     * Uses the definitional formula
     * <p>
     *   {@code (a + bi) + (c + di) = (a+c) + (b+d)i}
     * </p>
     * If either {@code this} or {@code addend} has a {@code NaN} value in
     * either part, {@link #NaN} is returned; otherwise {@code Infinite}
     * and {@code NaN} values are returned in the parts of the result
     * according to the rules for {@link java.lang.Double} arithmetic.
     *
     * @param  addend Value to be added to this {@code Complex}.
     * @return {@code this + addend}.
     * @throws NullArgumentException if {@code addend} is {@code null}.
     */
    action Add(ComplexNumber value) returns ComplexNumber
        if value = undefined
            alert("Cannot add undefined complex numbers")
        end
        if isNotANumber or value:IsNotANumber()
            return NAN
        end

        ComplexNumber complex
        complex:SetValue(real + value:GetReal(), imaginary + value:GetImaginary())
        return complex
    end

    /**
     * Returns a {@code Complex} whose value is {@code (this + addend)},
     * with {@code addend} interpreted as a real number.
     *
     * @param addend Value to be added to this {@code Complex}.
     * @return {@code this + addend}.
     * @see #add(Complex)
    */
    action Add(number value) returns ComplexNumber
        if isNotANumber or value:IsNotANumber()
            return NAN
        end

        ComplexNumber complex
        complex:SetValue(real + value, imaginary)
        return complex
    end

     /**
     * Returns the conjugate of this complex number.
     * The conjugate of {@code a + bi} is {@code a - bi}.
     * <p>
     * {@link #NaN} is returned if either the real or imaginary
     * part of this Complex number equals {@code Double.NaN}.
     * </p><p>
     * If the imaginary part is infinite, and the real part is not
     * {@code NaN}, the returned value has infinite imaginary part
     * of the opposite sign, e.g. the conjugate of
     * {@code 1 + POSITIVE_INFINITY i} is {@code 1 - NEGATIVE_INFINITY i}.
     * </p>
     * @return the conjugate of this Complex object.
     */
    action Conjugate() returns ComplexNumber
        if isNotANumber
            return NAN
        end

        ComplexNumber complex
        complex:SetValue(real, -imaginary)
        return complex
    end

    /**
     * Returns a {@code Complex} whose value is
     * {@code (this / divisor)}.
     * Implements the definitional formula
     * <pre>
     *  <code>
     *    a + bi          ac + bd + (bc - ad)i
     *    ----------- = -------------------------
     *    c + di         c<sup>2</sup> + d<sup>2</sup>
     *  </code>
     * </pre>
     * but uses
     * <a href="http://doi.acm.org/10.1145/1039813.1039814">
     * prescaling of operands</a> to limit the effects of overflows and
     * underflows in the computation.
     * <p>
     * {@code Infinite} and {@code NaN} values are handled according to the
     * following rules, applied in the order presented:
     * <ul>
     *  <li>If either {@code this} or {@code divisor} has a {@code NaN} value
     *   in either part, {@link #NaN} is returned.
     *  </li>
     *  <li>If {@code divisor} equals {@link #ZERO}, {@link #NaN} is returned.
     *  </li>
     *  <li>If {@code this} and {@code divisor} are both infinite,
     *   {@link #NaN} is returned.
     *  </li>
     *  <li>If {@code this} is finite (i.e., has no {@code Infinite} or
     *   {@code NaN} parts) and {@code divisor} is infinite (one or both parts
     *   infinite), {@link #ZERO} is returned.
     *  </li>
     *  <li>If {@code this} is infinite and {@code divisor} is finite,
     *   {@code NaN} values are returned in the parts of the result if the
     *   {@link java.lang.Double} rules applied to the definitional formula
     *   force {@code NaN} results.
     *  </li>
     * </ul>
     *
     * @param divisor Value by which this {@code Complex} is to be divided.
     * @return {@code this / divisor}.
     * @throws NullArgumentException if {@code divisor} is {@code null}.
     */
    action Divide(ComplexNumber divisor) returns ComplexNumber
        if divisor = undefined
            alert("Cannot divide undefined complex numbers")
        end
        if isNotANumber or divisor:IsNotANumber()
            return NAN
        end

        number c = divisor:GetReal()
        number d = divisor:GetImaginary()
        if (c = 0.0 and d = 0.0)
            return NAN
        end

        if (divisor:IsInfinite() and not isInfinite)
            return ZERO
        end

        if (math:AbsoluteValue(c) < math:AbsoluteValue(d))
            number q = c / d
            number denominator = c * q + d

            ComplexNumber complex
            complex:SetValue((real * q + imaginary) / denominator, (imaginary * q - real) / denominator)
            return complex
        else
            number q = d / c
            number denominator = d * q + c
            ComplexNumber complex
            complex:SetValue((imaginary * q + real) / denominator, (imaginary - real * q) / denominator)
            return complex
        end
    end

    /**
     * Returns a {@code Complex} whose value is {@code (this / divisor)},
     * with {@code divisor} interpreted as a real number.
     *
     * @param  divisor Value by which this {@code Complex} is to be divided.
     * @return {@code this / divisor}.
     * @see #divide(Complex)
     */
    action Divide(number divisor) returns ComplexNumber
        if isNotANumber or divisor:IsNotANumber()
            return NAN
        end
        if (divisor = 0.0)
            return NAN
        end
        if divisor:IsInfinite()
            if not isInfinite
                return ZERO
            else
                return NAN
            end
        end
        ComplexNumber complex
        complex:SetValue(real / divisor, imaginary  / divisor)
        return complex
    end

    /** {@inheritDoc} */
    action Reciprocal() returns ComplexNumber
        if isNotANumber
            return NAN
        end

        if real = 0.0 and imaginary = 0.0
            return INF
        end

        if isInfinite
            return ZERO
        end

        if (math:AbsoluteValue(real) < math:AbsoluteValue(imaginary))
            number q = real / imaginary
            number scale = 1.0 / (real * q + imaginary)
            ComplexNumber complex
            complex:SetValue(scale * q, -scale)
            return complex
        else
            number q = imaginary / real
            number scale = 1.0 / (imaginary * q + real)
            ComplexNumber complex
            complex:SetValue(scale, -scale * q)
            return complex
        end
    end

    /**
     * Test for equality with another object.
     * If both the real and imaginary parts of two complex numbers
     * are exactly the same, and neither is {@code Double.NaN}, the two
     * Complex objects are considered to be equal.
     * The behavior is the same as for JDK's {@link Double#equals(Object)
     * Double}:
     * <ul>
     *  <li>All {@code NaN} values are considered to be equal,
     *   i.e, if either (or both) real and imaginary parts of the complex
     *   number are equal to {@code Double.NaN}, the complex number is equal
     *   to {@code NaN}.
     *  </li>
     *  <li>
     *   Instances constructed with different representations of zero (i.e.
     *   either "0" or "-0") are <em>not</em> considered to be equal.
     *  </li>
     * </ul>
     *
     * @param other Object to test for equality with this instance.
     * @return {@code true} if the objects are equal, {@code false} if object
     * is {@code null}, not an instance of {@code Complex}, or not equal to
     * this instance.
     */
    action Equals(ComplexNumber other) returns boolean
        if other:IsNotANumber()
            return isNotANumber
        else
            return (real = other:GetReal() and imaginary = other:GetImaginary())
        end
        return false
    end

    /**
     * Returns a {@code Complex} whose value is {@code this * factor}.
     * Implements preliminary checks for {@code NaN} and infinity followed by
     * the definitional formula:
     * <p>
     *   {@code (a + bi)(c + di) = (ac - bd) + (ad + bc)i}
     * </p>
     * Returns {@link #NaN} if either {@code this} or {@code factor} has one or
     * more {@code NaN} parts.
     * <p>
     * Returns {@link #INF} if neither {@code this} nor {@code factor} has one
     * or more {@code NaN} parts and if either {@code this} or {@code factor}
     * has one or more infinite parts (same result is returned regardless of
     * the sign of the components).
     * </p><p>
     * Returns finite values in components of the result per the definitional
     * formula in all remaining cases.</p>
     *
     * @param  factor value to be multiplied by this {@code Complex}.
     * @return {@code this * factor}.
     * @throws NullArgumentException if {@code factor} is {@code null}.
     */
    action Multiply(ComplexNumber multiplier) returns ComplexNumber
        if multiplier = undefined
            alert("Cannot multiply undefined complex numbers")
        end
        if isNotANumber or multiplier:IsNotANumber()
            return NAN
        end
        if real:IsInfinite() or imaginary:IsInfinite() or multiplier:GetReal():IsInfinite() or multiplier:GetImaginary():IsInfinite()
            // we don't use isInfinite() to avoid testing for NaN again
            return INF
        end
        ComplexNumber complex
        complex:SetValue(real * multiplier:GetReal() - imaginary * multiplier:GetImaginary(), real * multiplier:GetImaginary() + imaginary * multiplier:GetReal())
        return complex
    end

    /**
     * Returns a {@code Complex} whose value is {@code this * factor}, with {@code factor}
     * interpreted as a real number.
     *
     * @param  factor value to be multiplied by this {@code Complex}.
     * @return {@code this * factor}.
     * @see #multiply(Complex)
     */
    action Multiply(number multiplier) returns ComplexNumber
        if isNotANumber or multiplier:IsNotANumber()
            return NAN
        end
        if real:IsInfinite() or imaginary:IsInfinite() or multiplier:IsInfinite()
            // we don't use isInfinite() to avoid testing for NaN again
            return INF
        end
        ComplexNumber complex
        complex:SetValue(real * multiplier, imaginary * multiplier)
        return complex
    end

    /**
     * Returns a {@code Complex} whose value is {@code (-this)}.
     * Returns {@code NaN} if either real or imaginary
     * part of this Complex number is {@code Double.NaN}.
     *
     * @return {@code -this}.
     */
    action Negate() returns ComplexNumber
        if isNotANumber
            return NAN
        end
        ComplexNumber complex
        complex:SetValue(-real, -imaginary)
        return complex
    end

    /**
     * Returns a {@code Complex} whose value is
     * {@code (this - subtrahend)}.
     * Uses the definitional formula
     * <p>
     *  {@code (a + bi) - (c + di) = (a-c) + (b-d)i}
     * </p>
     * If either {@code this} or {@code subtrahend} has a {@code NaN]} value in either part,
     * {@link #NaN} is returned; otherwise infinite and {@code NaN} values are
     * returned in the parts of the result according to the rules for
     * {@link java.lang.Double} arithmetic.
     *
     * @param  subtrahend value to be subtracted from this {@code Complex}.
     * @return {@code this - subtrahend}.
     * @throws NullArgumentException if {@code subtrahend} is {@code null}.
     */
    action Subtract(ComplexNumber value) returns ComplexNumber
        if value = undefined
            alert("Cannot subtract undefined complex numbers")
        end
        if isNotANumber or value:IsNotANumber()
            return NAN
        end

        ComplexNumber complex
        complex:SetValue(real - value:GetReal(), imaginary - value:GetImaginary())
        return complex
    end

    /**
     * Returns a {@code Complex} whose value is
     * {@code (this - subtrahend)}.
     *
     * @param  subtrahend value to be subtracted from this {@code Complex}.
     * @return {@code this - subtrahend}.
     * @see #subtract(Complex)
     */
    action Subtract(number value) returns ComplexNumber
        if isNotANumber or value:IsNotANumber()
            return NAN
        end
        ComplexNumber complex
        complex:SetValue(real - value, imaginary)
        return complex
    end

    /**
     * Compute the
     * <a href="http://mathworld.wolfram.com/SquareRoot.html" TARGET="_top">
     * square root</a> of <code>1 - this<sup>2</sup></code> for this complex
     * number.
     * Computes the result directly as
     * {@code sqrt(ONE.subtract(z.multiply(z)))}.
     * <p>
     * Returns {@link Complex#NaN} if either real or imaginary part of the
     * input argument is {@code NaN}.
     * </p>
     * Infinite values in real or imaginary parts of the input may result in
     * infinite or NaN values returned in parts of the result.
     *
     * @return the square root of <code>1 - this<sup>2</sup></code>.
     * @since 1.2
     */
    private action SquareRoot1Z() returns ComplexNumber
        ComplexNumber complex
        complex:SetValue(1.0, 0.0)
        return complex:Subtract(me:Multiply(me)):SquareRoot()
    end

    /**
     * Compute the
     * <a href="http://mathworld.wolfram.com/SquareRoot.html" TARGET="_top">
     * square root</a> of this complex number.
     * Implements the following algorithm to compute {@code sqrt(a + bi)}:
     * <ol><li>Let {@code t = sqrt((|a| + |a + bi|) / 2)}</li>
     * <li><pre>if {@code  a &#8805; 0} return {@code t + (b/2t)i}
     *  else return {@code |b|/2t + sign(b)t i }</pre></li>
     * </ol>
     * where <ul>
     * <li>{@code |a| = }{@link FastMath#abs}(a)</li>
     * <li>{@code |a + bi| = }{@link Complex#abs}(a + bi)</li>
     * <li>{@code sign(b) =  }{@link FastMath#copySign(double,double) copySign(1d, b)}
     * </ul>
     * <p>
     * Returns {@link Complex#NaN} if either real or imaginary part of the
     * input argument is {@code NaN}.
     * </p>
     * Infinite values in real or imaginary parts of the input may result in
     * infinite or NaN values returned in parts of the result.
     * <pre>
     *  Examples:
     *  <code>
     *   sqrt(1 &plusmn; INFINITY i) = INFINITY + NaN i
     *   sqrt(INFINITY + i) = INFINITY + 0i
     *   sqrt(-INFINITY + i) = 0 + INFINITY i
     *   sqrt(INFINITY &plusmn; INFINITY i) = INFINITY + NaN i
     *   sqrt(-INFINITY &plusmn; INFINITY i) = NaN &plusmn; INFINITY i
     *  </code>
     * </pre>
     *
     * @return the square root of {@code this}.
     * @since 1.2
     */
    action SquareRoot() returns ComplexNumber
        if isNotANumber
            return NAN
        end

        if (real = 0.0 and imaginary = 0.0)
            return ZERO
        end

        number t = math:SquareRoot((math:AbsoluteValue(real) + me:AbsoluteValue()) / 2.0)
        if real >= 0.0 
            ComplexNumber complex
            complex:SetValue(t, imaginary / (2.0 * t))
            return complex
        else 
            number copysign = 1.0
            if imaginary < 0
                copysign = -1.0
            end 
            ComplexNumber complex
            complex:SetValue(math:AbsoluteValue(imaginary) / (2.0 * t), copysign * t)
            return complex
        end
    end

    /**
     * Compute the
     * <a href="http://mathworld.wolfram.com/NaturalLogarithm.html" TARGET="_top">
     * natural logarithm</a> of this complex number.
     * Implements the formula:
     * <pre>
     *  <code>
     *   log(a + bi) = ln(|a + bi|) + arg(a + bi)i
     *  </code>
     * </pre>
     * where ln on the right hand side is {@link FastMath#log},
     * {@code |a + bi|} is the modulus, {@link Complex#abs},  and
     * {@code arg(a + bi) = }{@link FastMath#atan2}(b, a).
     * <p>
     * Returns {@link Complex#NaN} if either real or imaginary part of the
     * input argument is {@code NaN}.
     * </p>
     * Infinite (or critical) values in real or imaginary parts of the input may
     * result in infinite or NaN values returned in parts of the result.
     * <pre>
     *  Examples:
     *  <code>
     *   log(1 &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/2)i
     *   log(INFINITY + i) = INFINITY + 0i
     *   log(-INFINITY + i) = INFINITY + &pi;i
     *   log(INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/4)i
     *   log(-INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (3&pi;/4)i
     *   log(0 + 0i) = -INFINITY + 0i
     *  </code>
     * </pre>
     *
     * @return the value <code>ln &nbsp; this</code>, the natural logarithm
     * of {@code this}.
     * @since 1.2
     */
    action NaturalLogarithm() returns ComplexNumber
        if isNotANumber
            return NAN
        end

        ComplexNumber complex
        complex:SetValue(math:NaturalLogarithm(me:AbsoluteValue()), math:InverseTangent2(imaginary, real))
        return complex
    end


    /**
     * Compute the
     * <a href="http://mathworld.wolfram.com/InverseCosine.html" TARGET="_top">
     * inverse cosine</a> of this complex number.
     * Implements the formula:
     * <p>
     *  {@code acos(z) = -i (log(z + i (sqrt(1 - z<sup>2</sup>))))}
     * </p>
     * Returns {@link Complex#NaN} if either real or imaginary part of the
     * input argument is {@code NaN} or infinite.
     *
     * @return the inverse cosine of this complex number.
     * @since 1.2
     */
    action InverseCosine() returns ComplexNumber
        if isNotANumber
            return NAN
        end

        return me:Add(me:SquareRoot1Z():Multiply(I)):NaturalLogarithm():Multiply(I:Negate())
    end

    /**
     * Compute the
     * <a href="http://mathworld.wolfram.com/InverseSine.html" TARGET="_top">
     * inverse sine</a> of this complex number.
     * Implements the formula:
     * <p>
     *  {@code asin(z) = -i (log(sqrt(1 - z<sup>2</sup>) + iz))}
     * </p><p>
     * Returns {@link Complex#NaN} if either real or imaginary part of the
     * input argument is {@code NaN} or infinite.</p>
     *
     * @return the inverse sine of this complex number.
     * @since 1.2
     */
    action InverseSine() returns ComplexNumber
        if isNotANumber
            return NAN
        end
    
        return me:SquareRoot1Z():Add(me:Multiply(I)):NaturalLogarithm():Multiply(I:Negate())
    end

    /**
     * Compute the
     * <a href="http://mathworld.wolfram.com/InverseTangent.html" TARGET="_top">
     * inverse tangent</a> of this complex number.
     * Implements the formula:
     * <p>
     * {@code atan(z) = (i/2) log((i + z)/(i - z))}
     * </p><p>
     * Returns {@link Complex#NaN} if either real or imaginary part of the
     * input argument is {@code NaN} or infinite.</p>
     *
     * @return the inverse tangent of this complex number
     * @since 1.2
     */
    action InverseTangent() returns ComplexNumber
        if isNotANumber
            return NAN
        end

        ComplexNumber complex
        complex:SetValue(2.0, 0.0)
        return me:Add(I):Divide(I:Subtract(me)):NaturalLogarithm():Multiply(I:Divide(complex))
    end

    /**
     * Compute the
     * <a href="http://mathworld.wolfram.com/Cosine.html" TARGET="_top">
     * cosine</a> of this complex number.
     * Implements the formula:
     * <p>
     *  {@code cos(a + bi) = cos(a)cosh(b) - sin(a)sinh(b)i}
     * </p><p>
     * where the (real) functions on the right-hand side are
     * {@link FastMath#sin}, {@link FastMath#cos},
     * {@link FastMath#cosh} and {@link FastMath#sinh}.
     * </p><p>
     * Returns {@link Complex#NaN} if either real or imaginary part of the
     * input argument is {@code NaN}.
     * </p><p>
     * Infinite values in real or imaginary parts of the input may result in
     * infinite or NaN values returned in parts of the result.</p>
     * <pre>
     *  Examples:
     *  <code>
     *   cos(1 &plusmn; INFINITY i) = 1 \u2213 INFINITY i
     *   cos(&plusmn;INFINITY + i) = NaN + NaN i
     *   cos(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
     *  </code>
     * </pre>
     *
     * @return the cosine of this complex number.
     * @since 1.2
     */
    action Cosine() returns ComplexNumber
        if isNotANumber
            return NAN
        end

        ComplexNumber complex
        complex:SetValue(math:Cosine(real) * math:HyperbolicCosine(imaginary), -math:Sine(real) * math:HyperbolicSine(imaginary))
        return complex
    end

    /**
     * Compute the
     * <a href="http://mathworld.wolfram.com/HyperbolicCosine.html" TARGET="_top">
     * hyperbolic cosine</a> of this complex number.
     * Implements the formula:
     * <pre>
     *  <code>
     *   cosh(a + bi) = cosh(a)cos(b) + sinh(a)sin(b)i
     *  </code>
     * </pre>
     * where the (real) functions on the right-hand side are
     * {@link FastMath#sin}, {@link FastMath#cos},
     * {@link FastMath#cosh} and {@link FastMath#sinh}.
     * <p>
     * Returns {@link Complex#NaN} if either real or imaginary part of the
     * input argument is {@code NaN}.
     * </p>
     * Infinite values in real or imaginary parts of the input may result in
     * infinite or NaN values returned in parts of the result.
     * <pre>
     *  Examples:
     *  <code>
     *   cosh(1 &plusmn; INFINITY i) = NaN + NaN i
     *   cosh(&plusmn;INFINITY + i) = INFINITY &plusmn; INFINITY i
     *   cosh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
     *  </code>
     * </pre>
     *
     * @return the hyperbolic cosine of this complex number.
     * @since 1.2
     */
    action HyperbolicCosine() returns ComplexNumber
        if isNotANumber
            return NAN
        end

        ComplexNumber complex
        complex:SetValue(math:HyperbolicCosine(real) * math:Cosine(imaginary), math:HyperbolicSine(real) * math:Sine(imaginary))
        return complex
    end

    /**
     * Compute the
     * <a href="http://mathworld.wolfram.com/Sine.html" TARGET="_top">
     * sine</a>
     * of this complex number.
     * Implements the formula:
     * <pre>
     *  <code>
     *   sin(a + bi) = sin(a)cosh(b) - cos(a)sinh(b)i
     *  </code>
     * </pre>
     * where the (real) functions on the right-hand side are
     * {@link FastMath#sin}, {@link FastMath#cos},
     * {@link FastMath#cosh} and {@link FastMath#sinh}.
     * <p>
     * Returns {@link Complex#NaN} if either real or imaginary part of the
     * input argument is {@code NaN}.
     * </p><p>
     * Infinite values in real or imaginary parts of the input may result in
     * infinite or {@code NaN} values returned in parts of the result.
     * <pre>
     *  Examples:
     *  <code>
     *   sin(1 &plusmn; INFINITY i) = 1 &plusmn; INFINITY i
     *   sin(&plusmn;INFINITY + i) = NaN + NaN i
     *   sin(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
     *  </code>
     * </pre>
     *
     * @return the sine of this complex number.
     * @since 1.2
     */
    action Sine() returns ComplexNumber
        if isNotANumber
            return NAN
        end

        ComplexNumber complex
        complex:SetValue(math:Sine(real) * math:HyperbolicCosine(imaginary), math:Cosine(real) * math:HyperbolicSine(imaginary))
        return complex
    end

    /**
     * Compute the
     * <a href="http://mathworld.wolfram.com/HyperbolicSine.html" TARGET="_top">
     * hyperbolic sine</a> of this complex number.
     * Implements the formula:
     * <pre>
     *  <code>
     *   sinh(a + bi) = sinh(a)cos(b)) + cosh(a)sin(b)i
     *  </code>
     * </pre>
     * where the (real) functions on the right-hand side are
     * {@link FastMath#sin}, {@link FastMath#cos},
     * {@link FastMath#cosh} and {@link FastMath#sinh}.
     * <p>
     * Returns {@link Complex#NaN} if either real or imaginary part of the
     * input argument is {@code NaN}.
     * </p><p>
     * Infinite values in real or imaginary parts of the input may result in
     * infinite or NaN values returned in parts of the result.
     * <pre>
     *  Examples:
     *  <code>
     *   sinh(1 &plusmn; INFINITY i) = NaN + NaN i
     *   sinh(&plusmn;INFINITY + i) = &plusmn; INFINITY + INFINITY i
     *   sinh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
     *  </code>
     * </pre>
     *
     * @return the hyperbolic sine of {@code this}.
     * @since 1.2
     */
    action HyperbolicSine() returns ComplexNumber
        if isNotANumber
            return NAN
        end

        ComplexNumber complex
        complex:SetValue(math:HyperbolicSine(real) * math:Cosine(imaginary), math:HyperbolicCosine(real) * math:Sine(imaginary))
        return complex
    end

    /**
     * Compute the
     * <a href="http://mathworld.wolfram.com/Tangent.html" TARGET="_top">
     * tangent</a> of this complex number.
     * Implements the formula:
     * <pre>
     *  <code>
     *   tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i
     *  </code>
     * </pre>
     * where the (real) functions on the right-hand side are
     * {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and
     * {@link FastMath#sinh}.
     * <p>
     * Returns {@link Complex#NaN} if either real or imaginary part of the
     * input argument is {@code NaN}.
     * </p>
     * Infinite (or critical) values in real or imaginary parts of the input may
     * result in infinite or NaN values returned in parts of the result.
     * <pre>
     *  Examples:
     *  <code>
     *   tan(a &plusmn; INFINITY i) = 0 &plusmn; i
     *   tan(&plusmn;INFINITY + bi) = NaN + NaN i
     *   tan(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
     *   tan(&plusmn;&pi;/2 + 0 i) = &plusmn;INFINITY + NaN i
     *  </code>
     * </pre>
     *
     * @return the tangent of {@code this}.
     * @since 1.2
     */
    action Tangent() returns ComplexNumber
        if isNotANumber or real:IsInfinite()
            return NAN
        end
        if imaginary > 20.0
            ComplexNumber complex
            complex:SetValue(0.0, 1.0)
            return complex
        end
        if imaginary < -20.0
            ComplexNumber complex
            complex:SetValue(0.0, -1.0)
            return complex
        end
        number real2 = 2.0 * real
        number imaginary2 = 2.0 * imaginary
        number d = math:Cosine(real2) + math:HyperbolicCosine(imaginary2)
        ComplexNumber complex
        complex:SetValue(math:Sine(real2) / d, math:HyperbolicSine(imaginary2) / d)
        return complex
    end

    /**
     * Compute the
     * <a href="http://mathworld.wolfram.com/HyperbolicTangent.html" TARGET="_top">
     * hyperbolic tangent</a> of this complex number.
     * Implements the formula:
     * <pre>
     *  <code>
     *   tan(a + bi) = sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i
     *  </code>
     * </pre>
     * where the (real) functions on the right-hand side are
     * {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and
     * {@link FastMath#sinh}.
     * <p>
     * Returns {@link Complex#NaN} if either real or imaginary part of the
     * input argument is {@code NaN}.
     * </p>
     * Infinite values in real or imaginary parts of the input may result in
     * infinite or NaN values returned in parts of the result.
     * <pre>
     *  Examples:
     *  <code>
     *   tanh(a &plusmn; INFINITY i) = NaN + NaN i
     *   tanh(&plusmn;INFINITY + bi) = &plusmn;1 + 0 i
     *   tanh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
     *   tanh(0 + (&pi;/2)i) = NaN + INFINITY i
     *  </code>
     * </pre>
     *
     * @return the hyperbolic tangent of {@code this}.
     * @since 1.2
     */
    action HyperbolicTangent() returns ComplexNumber
        if isNotANumber or imaginary:IsInfinite()
            return NAN
        end
        if real > 20.0
            ComplexNumber complex
            complex:SetValue(1.0, 0.0)
            return complex
        end
        if real < -20.0
            ComplexNumber complex
            complex:SetValue(-1.0, 0.0)
            return complex
        end
        number real2 = 2.0 * real
        number imaginary2 = 2.0 * imaginary
        number d = math:HyperbolicCosine(real2) + math:Cosine(imaginary2)
        ComplexNumber complex
        complex:SetValue(math:HyperbolicSine(real2) / d, math:Sine(imaginary2) / d)
        return complex
    end

    /**
     * Compute the
     * <a href="http://mathworld.wolfram.com/ExponentialFunction.html" TARGET="_top">
     * exponential function</a> of this complex number.
     * Implements the formula:
     * <pre>
     *  <code>
     *   exp(a + bi) = exp(a)cos(b) + exp(a)sin(b)i
     *  </code>
     * </pre>
     * where the (real) functions on the right-hand side are
     * {@link FastMath#exp}, {@link FastMath#cos}, and
     * {@link FastMath#sin}.
     * <p>
     * Returns {@link Complex#NaN} if either real or imaginary part of the
     * input argument is {@code NaN}.
     * </p>
     * Infinite values in real or imaginary parts of the input may result in
     * infinite or NaN values returned in parts of the result.
     * <pre>
     *  Examples:
     *  <code>
     *   exp(1 &plusmn; INFINITY i) = NaN + NaN i
     *   exp(INFINITY + i) = INFINITY + INFINITY i
     *   exp(-INFINITY + i) = 0 + 0i
     *   exp(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
     *  </code>
     * </pre>
     *
     * @return <code><i>e</i><sup>this</sup></code>.
     * @since 1.2
     */
    action NaturalExponent() returns ComplexNumber
        if isNotANumber
            return NAN
        end

        number expReal = math:RaiseNaturalNumberToPower(real)
        ComplexNumber complex
        complex:SetValue(expReal * math:Cosine(imaginary), expReal * math:Sine(imaginary))
        return complex
    end

    /**
     * Returns of value of this complex number raised to the power of {@code x}.
     * Implements the formula:
     * <pre>
     *  <code>
     *   y<sup>x</sup> = exp(x&middot;log(y))
     *  </code>
     * </pre>
     * where {@code exp} and {@code log} are {@link #exp} and
     * {@link #log}, respectively.
     * <p>
     * Returns {@link Complex#NaN} if either real or imaginary part of the
     * input argument is {@code NaN} or infinite, or if {@code y}
     * equals {@link Complex#ZERO}.</p>
     *
     * @param  x exponent to which this {@code Complex} is to be raised.
     * @return <code> this<sup>x</sup></code>.
     * @throws NullArgumentException if x is {@code null}.
     * @since 1.2
     */
    action RaiseToPower(ComplexNumber x) returns ComplexNumber
        if x = undefined
            alert("Cannot compute power of undefined complex numbers")
        end
        return me:NaturalLogarithm():Multiply(x):NaturalExponent()
    end

    /**
     * Returns of value of this complex number raised to the power of {@code x}.
     *
     * @param  x exponent to which this {@code Complex} is to be raised.
     * @return <code>this<sup>x</sup></code>.
     * @see #pow(Complex)
     */
    action RaiseToPower(number x) returns ComplexNumber
        return me:NaturalLogarithm():Multiply(x):NaturalExponent()
    end
  
    action IsNotANumber returns boolean
        return isNotANumber
    end

    action IsInfinite returns boolean
        return isInfinite
    end

    action GetImaginary returns number
        return imaginary
    end

    action GetReal returns number
        return real
    end

end