package Libraries.Compute.MatrixTransform

use Libraries.Compute.Matrix
use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Containers.Integer32BitArray
use Libraries.Compute.Vector

/*
    This class calculates a matrix into two matrices. The first, lower, is a lower triangular matrix, which means 
    all elements above the diagonal are zero. In the lower matrix, the diagonals are all 1s. The second matrix, 
    Upper, has all of its lower elements as 0 and the diagonal is not guaranteed to have 1s. This type of 
    decomposition is sometimes called, "LUDecomposition." Ultimately, this type of class is a numerical 
    support class, where the decomposition can be used to conduct other kinds of mathematical computations. 
    This class was adapted from the LUDecomposition class in Apache Commons.

    More information can be found about this kind of decomposition on wikipedia or other 
    sources: <a href="https://en.wikipedia.org/wiki/LU_decomposition">Lower Upper Decomposition</a>.

    Attribute: Author Andreas Stefik
    Attribute: Example: 

    use Libraries.Compute.Matrix
    use Libraries.Compute.MatrixTransform.LowerUpperDecomposition

    Matrix matrix
    matrix:SetSize(3,3)
    matrix:Set(0,0,12.0)
    matrix:Set(1,0,6)
    matrix:Set(2,0,-4)

    matrix:Set(0,1,-51)
    matrix:Set(1,1,167)
    matrix:Set(2,1,24)

    matrix:Set(0,2,4)
    matrix:Set(1,2,-68)
    matrix:Set(2,2,-41)

    LowerUpperDecomposition decomp
    decomp:Calculate(matrix)

    Matrix value = decomp:GetResult()
    output value:ToText()
 */
class LowerUpperDecomposition 

    Integer32BitArray pivot = undefined

    /* Parity of the permutation associated with the LU decomposition. */
    boolean even = false  
    boolean singular = false

    constant number DEFAULT_TOO_SMALL = 0.00000000001
    Matrix decomposition = undefined

    /*
        This action does the decomposition and stores the matrices as state inside of this class. Thus, the matrices can
        then be copied, stored, or used as desired. To obtain the results, we call GetLowerTriangular or GetUpperTriangular. In order
        to obtain a solution to a problem for a particular matrix once we have decomposition, we must call Solve.
        
        Attribute: Example: 
    
        use Libraries.Compute.Matrix
        use Libraries.Compute.MatrixTransform. LowerUpperDecomposition
    
        Matrix matrix
        matrix:SetSize(3,3)
        matrix:Set(0,0,12.0)
        matrix:Set(1,0,6)
        matrix:Set(2,0,-4)
    
        matrix:Set(0,1,-51)
        matrix:Set(1,1,167)
        matrix:Set(2,1,24)
    
        matrix:Set(0,2,4)
        matrix:Set(1,2,-68)
        matrix:Set(2,2,-41)
    
        LowerUpperDecompositiondecomp
        decomp:Calculate(matrix)
    
        Matrix value = decomp: GetLowerTriangular ()
        output value:ToText()
    */
    action Calculate(Matrix matrix)
        Integer32BitArray newPivot
        integer m = matrix:GetColumns()
        newPivot:SetSize(m)
        pivot = newPivot
        Math math

        Matrix lu = matrix:Copy()
        integer row = 0
        repeat while row < m
            pivot:Set(row, row)
            row = row + 1
        end

        //Now we go over all of the columns and grab each cell to do the decomposition
        integer column = 0
        repeat while column < m
            //first tackle the upper triangular
            row = 0
            repeat while row < column
                number sum = lu:Get(row, column)
                i = 0
                repeat while i < row
                    sum = sum - lu:Get(row, i) * lu:Get(i, column)
                    i = i + 1
                end
                lu:Set(row, column, sum)
                row = row + 1
            end            

            integer max = column
            number largest = 0
            largest = largest:GetNegativeInfinityValue()

            //Now do the lower triangular
            row = column
            repeat while row < m
                number sum = lu:Get(row, column)
                i = 0 
                repeat while i < column
                    sum = sum - lu:Get(row, i) * lu:Get(i, column)
                    i = i + 1
                end

                lu:Set(row, column, sum)

                if math:AbsoluteValue(sum) > largest
                    largest = math:AbsoluteValue(sum)
                    max = row
                end

                row = row + 1
            end

            //Apache Commons is clear as mud as to what this is, but I am 
            //guessing it is a threshold value that tells us whether a solution can be found.
            if math:AbsoluteValue(lu:Get(max, column)) < DEFAULT_TOO_SMALL
                singular = true
            end

            if max not= column
                number temp = 0
                i = 0
                repeat while i < m
                    temp = lu:Get(max, i)
                    lu:Set(max, i, lu:Get(column, i))
                    lu:Set(column, i, temp)
                    i = i + 1
                end

                integer intTemp = pivot:Get(max)
                pivot:Set(max, pivot:Get(column))
                pivot:Set(column, intTemp)
                even = not even
            end

            number luDiag = lu:Get(column, column)
            row = column + 1
            repeat while row < m
                number value = lu:Get(row, column)
                lu:Set(row, column, value / luDiag)
                row = row + 1
            end
            column = column + 1
        end
        decomposition = lu
    end

    /*
        This action solves the decomposition for a particular Matrix named matrix.

        Attribute: Parameter matrix the matrix to solve for, assuming Calculate has already been called.
        Attribute: Example: 
    
        use Libraries.Compute.Matrix
        use Libraries.Compute.MatrixTransform. LowerUpperDecomposition
    
        Matrix matrix
        matrix:SetSize(3,3)
        matrix:Set(0,0,12.0)
        matrix:Set(1,0,6)
        matrix:Set(2,0,-4)
    
        matrix:Set(0,1,-51)
        matrix:Set(1,1,167)
        matrix:Set(2,1,24)
    
        matrix:Set(0,2,4)
        matrix:Set(1,2,-68)
        matrix:Set(2,2,-41)
    
        LowerUpperDecompositiondecomp
        decomp:Calculate(matrix)
    
        //Calls Solve for the pivot generated by the decomposition
        Matrix value = decomp:GetInverse()
        output value:ToText()
        
    */
    action Solve(Matrix matrix) returns Matrix
        Matrix result
        integer m = pivot:GetSize()

        if matrix:GetRows() not= m
            alert("Matrix dimensions of " + matrix:GetRows() + " rows and " + m + "rows does not match.")
        end

        if singular
            alert("This is a Singular Matrix, which means this decomposition cannot be solved")
        end

        //apply permutations to b
        integer nColB = matrix:GetColumns()
        result:SetSize(m, nColB)
        integer row = 0
        repeat while row < m
            integer pRow = pivot:Get(row)
            integer column = 0
            repeat while column < nColB
                number value = matrix:Get(pRow, column)
                result:Set(row, column, value)
                column = column + 1
            end
            row = row + 1
        end

        //solve LY = b
        integer column = 0
        repeat while column < m
            integer i = column + 1
            repeat while i < m
                integer j = 0
                number luiCol = decomposition:Get(i, column)
                repeat while j < nColB
                    number temp = result:Get(i, j) - (result:Get(column, j) * luiCol)
                    result:Set(i, j, temp)
                    j = j + 1
                end
                i = i + 1
            end
            column = column + 1
        end

        //Solve UX = Y
        column = m - 1
        repeat while column >= 0
            number luDiag = decomposition:Get(column, column)
            integer j = 0
            repeat while j < nColB
                result:Set(column, j, result:Get(column, j) / luDiag)
                j = j + 1
            end

            integer i = 0
            repeat while i < column
                luiCol = decomposition:Get(i, column)
                j = 0
                repeat while j < nColB
                    number temp = result:Get(i, j) - (result:Get(column, j) * luiCol)
                    result:Set(i, j, temp)
                    j = j + 1
                end
                i = i + 1
            end
            column = column - 1
        end
        
        return result
    end

    /*
        This action calculates the determinant using the decomposition 
    */
    action GetDeterminant returns number
        if singular
            return 0
        else
            integer m = pivot:GetSize()
            number determinant = -1
            if even
                determinant = 1
            end
            i = 0
            repeat while i < m
                determinant = determinant * decomposition:Get(i,i)
                i = i + 1
            end
            Math math
            if math:AbsoluteValue(determinant) = 0
                return 0
            end
            return determinant
        end
    end

    /*
        This action calls solve using the identity matrix as a parameter, with the size given by the Pivot. 
    */
    action GetInverse returns Matrix
        Matrix matrix
        matrix:SetSize(pivot:GetSize(),pivot:GetSize())
        matrix = matrix:Identity()
        return Solve(matrix)
    end
end