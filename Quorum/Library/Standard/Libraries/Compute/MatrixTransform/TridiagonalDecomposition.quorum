package Libraries.Compute.MatrixTransform

use Libraries.Compute.Matrix
use Libraries.Containers.Array
use Libraries.Compute.Math
use Libraries.Compute.Vector

/*
    A Tridiagonal decomposition is a matrix decomposition/reduction of a symmetric matrix A into 
    a unitary orthogonal matrix Q and a symmetric tridiagonal matrix T such that:
         A = Q*T*Q^(T)

    This was adapted from the same model in Apache Commons, but was expanded 
    upon to simplify the library and add a variety of helper actions that were missing.
    More information about this class can be found on its documentation page TriDiagonalTransformer:
    https://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/index.html

    For more information: https://en.wikipedia.org/wiki/Tridiagonal_matrix_algorithm

    Attribute: Author Hannah Williams
    Attribute: Example

    use Libraries.Compute.Matrix
    use Libraries.Compute.MatrixTransform.TridiagonalDecomposition

    class Main
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 5.0)
            TridiagonalDecomposition decomp
            decomp:Calculate(matrix)
            output decomp:GetTridiagonalMatrix():ToText()
        end
    end
*/

class TridiagonalDecomposition
    Math math
    /* This matrix represents the original matrix */
    Matrix original = undefined

    /* This matrix represents the house holder matrix */
    Matrix holder = undefined

    /* This matrix represents the symmetrical tridiagonal matrix (T) */
    Matrix tridiagonal = undefined

    /* This matrix represents the orthogonal matrix (Q). */
    Matrix orthogonal = undefined

    /* This matrix represents the orthogonal matrix transposed (QT). */
    Matrix orthogonalTransposed = undefined

    /* This array represents the center diagonal. */
    Array<number> diagonal

    /* This array represents the below center diagonal. */
    Array<number> subdiagonal

    /* This is used if the user explicitly wants to assume symmetry or not */
    boolean symmetric = false
    boolean symmetricOverride = false

    action Calculate(Matrix matrix)
        if not symmetricOverride
            symmetric = matrix:IsSymmetric()
        end
        if not symmetric
            alert("TridiagonalDecomposition is only valid for symmetric matrices.")
        end

        if not matrix:IsSquare()
            alert("TridiagonalDecomposition is only valid for square matrices.")
        end
        original = matrix
        holder = original:Copy()
        tridiagonal = undefined
        orthogonal = undefined
        orthogonalTransposed = undefined
        diagonal:Empty()
        subdiagonal:Empty()

        integer size = original:GetColumns() 
          
        tridiagonal = original:Copy()  

        // For each column before the last two
        integer i = 0
        repeat while i < size - 2
            // Working column's vector (matrix)
            Matrix w
            w:Fill(size,1,0)
            j = size - 1 
            repeat while j > i
                number value = tridiagonal:Get(j, i)
                if j = i + 1
                    if value < 0
                        w:Set(j, 0, value - math:SquareRoot(w:GetSumOfSquares() + value * value))
                    else
                        w:Set(j, 0, value + math:SquareRoot(w:GetSumOfSquares() + value * value))
                    end
                else
                    w:Set(j, 0, value)
                end
                j = j - 1
            end
            number s = 2.0 / w:GetSumOfSquares()

            Matrix change = w:Multiply(s):Multiply(w:Transpose())

            Matrix id = tridiagonal:Identity()
            Matrix p = id:SubtractElements(change)

            if i = 0
                holder = p
            else
                holder = holder:Multiply(p)
            end

            tridiagonal = p:Transpose():Multiply(tridiagonal):Multiply(p):Round(12)
            i = i + 1
        end

        orthogonal = holder
        orthogonalTransposed = orthogonal:Transpose()
        FillDiagonalArrays()
    end

    action GetOriginalMatrix returns Matrix
        return original
    end

    private action FillDiagonalArrays
        diagonal:Empty()
        subdiagonal:Empty()
        integer size = tridiagonal:GetRows()

        integer i = 0
        repeat while i < size
            diagonal:Add(tridiagonal:Get(i, i))
            if i > 0 
                subdiagonal:Add(tridiagonal:Get(i, i-1))
            end
            i = i + 1
        end
    end

    action GetTridiagonalMatrix returns Matrix
        return tridiagonal
    end

    action GetOrthogonalMatrix returns Matrix
        return orthogonal
    end

    action GetOrthogonalTransposedMatrix returns Matrix
        return orthogonalTransposed
    end

    action GetDiagonal returns Array<number>
        return diagonal
    end

    action GetSubDiagonal returns Array<number>
        return subdiagonal
    end

    action Symmetric(boolean symmetric)
        me:symmetric = symmetric
        me:symmetricOverride = true
    end
end