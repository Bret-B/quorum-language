package Libraries.Compute.MatrixTransform

use Libraries.Compute.Matrix
use Libraries.Containers.Array
use Libraries.Compute.Math

/*
    A Hessenberg decomposition is a matrix decomposition of a matrix A into 
    a unitary matrix P and a Hessenberg matrix H such that:
         A = P*H*P^(T)

    This was adapted from the same model in Apache Commons, but was expanded 
    upon to simplify the library and add a variety of helper actions that were missing.
    More information about this class can be found on its documentation page HessenbergTransformer:
    https://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/index.html

    For more information: https://en.wikipedia.org/wiki/Hessenberg_matrix
    For more information: https://mathworld.wolfram.com/HessenbergDecomposition.html

    Attribute: Author Hannah Williams
    Attribute: Example

    use Libraries.Compute.Matrix
    use Libraries.Compute.MatrixTransform.HessenbergDecomposition

    class Main
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 5.0)
            HessenbergDecomposition calc
            calc:Calculate(matrix)
            output calc:GetHessenbergMatrix():ToText()
        end
    end
*/

class HessenbergDecomposition
    /* Maximum allowed iterations for convergence of the transformation. */
    constant integer maxIterations = 100

    /* This matrix represents the original matrix */
    Matrix original = undefined

    /* This matrix represents the house holder matrix */
    Matrix holder = undefined

    /* This matrix represents the hessenberg matrix (H) */
    Matrix hessenberg = undefined

    /* This matrix represents the orthogonal matrix (P). */
    Matrix orthogonal = undefined

    /* This matrix represents the orthogonal matrix transposed (PT). */
    Matrix orthogonalTransposed = undefined

    Array<number> ort

    Math math

    action Calculate(Matrix matrix)
        if not matrix:IsSquare()
            alert("HessenbergDecomposition is only valid for square matrices.")
        end
        original = matrix
        holder = original:Copy()
        hessenberg = undefined
        orthogonal = undefined
        orthogonalTransposed = undefined
        ort:Empty()

        integer size = holder:GetColumns()
        ort:SetSize(size)

        integer m = 1
        repeat while m < size - 1
            number scale = 0
            integer i = m
            repeat while i < size
                scale = scale + math:AbsoluteValue(holder:Get(i, m-1))
                i = i + 1
            end

            if scale not= 0
                // Compute Householder transformation.
                number h = 0
                i = size - 1
                repeat while i >= m
                    ort:Set(i, holder:Get(i, m-1) / scale)
                    h = h + ort:Get(i) * ort:Get(i)
                    i = i - 1
                end
            
                number g = 0
                if ort:Get(m) > 0
                    g = -math:SquareRoot(h)
                else
                    g = math:SquareRoot(h)
                end

                h = h - ort:Get(m) * g
                ort:Set(m, ort:Get(m) - g)

                // Apply Householder similarity transformation
                // H = (I - u*u' / h) * H * (I - u*u' / h)
                integer j = m
                repeat while j < size
                    number f = 0
                    i = size - 1
                    repeat while i >= m
                        f = f + ort:Get(i) * holder:Get(i, j)
                        i = i - 1
                    end
                    f = f / h
                    i = m
                    repeat while i < size
                        holder:Set(i, j, holder:Get(i, j) - f * ort:Get(i))
                        i = i + 1
                    end
                    j = j + 1
                end

                j = 0
                repeat while j < size
                    number f = 0
                    i = size - 1
                    repeat while i >= m
                        f = f + ort:Get(i) * holder:Get(j, i)
                        i = i - 1
                    end
                    f = f / h
                    i = m
                    repeat while i < size
                        holder:Set(j, i, holder:Get(j, i) - f * ort:Get(i))
                        i = i + 1
                    end
                    j = j + 1
                end

                ort:Set(m, ort:Get(m) * scale)
                holder:Set(m, m-1 , scale * g)
            end
            m = m + 1
        end
    end

    action GetOriginalMatrix returns Matrix
        return original
    end

    action GetHessenbergMatrix returns Matrix
        if hessenberg = undefined and holder not= undefined
            integer size = holder:GetColumns()
            Matrix matrix
            matrix:Fill(size,size,0)
            i = 0 
            repeat while i < size
                if i > 0
                    matrix:Set(i, i-1, holder:Get(i, i-1))
                end

                j = i
                repeat while j < size
                    matrix:Set(i, j, holder:Get(i, j))
                    j = j + 1
                end
                i = i + 1
            end
            hessenberg = matrix
        end
        return hessenberg
    end

    action GetOrthogonalMatrix returns Matrix
        if orthogonal = undefined and holder not= undefined
            integer size = holder:GetColumns()
            Matrix matrix
            matrix:Fill(size,size,0)
            i = 0 
            repeat while i < size
                j = 0
                repeat while j < size
                    if i = j
                        matrix:Set(i, j, 1)
                    else
                        matrix:Set(i, j, 0)
                    end
                    j = j + 1
                end
                i = i + 1
            end         
    
            m = size - 2
            repeat while m >= 1
                if holder:Get(m, m-1) not= 0
                    i = m + 1
                    repeat while i < size
                        ort:Set(i, holder:Get(i, m-1))
                        i = i + 1
                    end

                    j = m
                    repeat while j < size
                        number g = 0
                        i = m
                        repeat while i < size
                            g = g + ort:Get(i) * matrix:Get(i, j)
                            i = i + 1
                        end

                        g = (g / ort:Get(m)) / holder:Get(m, m-1)

                        i = m
                        repeat while i < size
                            matrix:Set(i, j, matrix:Get(i, j) + g * ort:Get(i))
                            i = i + 1
                        end
                        j = j + 1
                    end
                end
                m = m - 1
            end            

            orthogonal = matrix
        end
        return orthogonal
    end

    action GetOrthogonalTransposedMatrix returns Matrix
        if orthogonalTransposed = undefined and holder not= undefined
            orthogonalTransposed = GetOrthogonalMatrix():Transpose()
        end
        return orthogonalTransposed
    end

end