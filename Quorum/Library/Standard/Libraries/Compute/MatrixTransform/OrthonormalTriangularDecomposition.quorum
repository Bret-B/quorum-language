package Libraries.Compute.MatrixTransform

use Libraries.Compute.Matrix
use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Compute.Vector

/*
    This class calculates an orthonormal matrix and an upper triangular matrix from a 
    given matrix. Classically, this is called a "QR" decomposition, which is referencing
    the orthonormal (Q) and the upper triangular (R). There are multiple ways to conduct
    this decomposition and this class uses Householder reflectors, which is a numerically
    stable way to conduct the calculation. This class is a port from the Apache Commons 
    Linear algebra library, which itself is adapted from the 
    <a href="http://math.nist.gov/javanumerics/jama/">JAMA</a> library. In our class, 
    we changed the names and way the programmer interacts with the class, but the primary
    calculations are very similar. 

    More information on QR decomposition can be found at 
        <a href="http://mathworld.wolfram.com/QRDecomposition.html">MathWorld</a> or
        <a href="http://en.wikipedia.org/wiki/QR_decomposition">Wikipedia</a>.

    Attribute: Author Andreas Stefik
    Attribute: Example: 

    use Libraries.Compute.Matrix
    use Libraries.Compute.MatrixTransform.OrthonormalTriangularDecomposition

    Matrix matrix
    matrix:SetSize(3,3)
    matrix:Set(0,0,12.0)
    matrix:Set(1,0,6)
    matrix:Set(2,0,-4)

    matrix:Set(0,1,-51)
    matrix:Set(1,1,167)
    matrix:Set(2,1,24)

    matrix:Set(0,2,4)
    matrix:Set(1,2,-68)
    matrix:Set(2,2,-41)

    OrthonormalTriangularDecomposition decomp
    decomp:Calculate(matrix)

    Matrix value = decomp:GetResult()
    output value:ToText()
 */
class OrthonormalTriangularDecomposition 
    Math math
    Array<number> rDiag = undefined

    /*
        A packed transposed representation of the QR decomposition.
        The elements below the diagonal are the elements of the upper triangular
        matrix R, and the rows above the diagonal are the Householder reflector vectors
        from which an explicit form of Q can be recomputed if desired. Q is calculated automatically 
        when decompose is called.
     */
    Matrix transpose = undefined

    /*
        This matrix represents the upper triangular matrix (R).
    */
    Matrix upperTriangular = undefined

    /* This matrix represents the orthonormal matrix (Q). */
    Matrix orthonormal = undefined

    /* This matrix represents the orthonormal matrix transposed (QT). */
    Matrix orthonormalTransposed = undefined
    
    /* The default threshold. */
    number threshold = 0.0

    constant integer BLOCK_SIZE = 52

    /*
        This action does the decomposition and stores the matrices as state inside of this class. Thus, the matrices can
        then be copied, stored, or used as desired. To obtain the orthonormal matrix (Q), we call GetOrthonormalMatrix, and
        to get the upper triangular matrix (R), we call GetUpperTriangularMatrix.
        
        Attribute: Parameter matrix This is the matrix to decompose.
        Attribute: Example: 
    
        use Libraries.Compute.Matrix
        use Libraries.Compute.MatrixTransform.OrthonormalTriangularDecomposition
    
        Matrix matrix
        matrix:SetSize(3,3)
        matrix:Set(0,0,12.0)
        matrix:Set(1,0,6)
        matrix:Set(2,0,-4)
    
        matrix:Set(0,1,-51)
        matrix:Set(1,1,167)
        matrix:Set(2,1,24)
    
        matrix:Set(0,2,4)
        matrix:Set(1,2,-68)
        matrix:Set(2,2,-41)
    
        OrthonormalTriangularDecomposition decomp
        decomp:Calculate(matrix)
    
        Matrix value = decomp:GetResult()
        output value:ToText()
    */
    action Calculate(Matrix matrix)
        Matrix transpose = matrix:Transpose()
        SetupDiagonals(matrix)

        integer minor = 0
        repeat while minor < math:MinimumOf(transpose:GetRows(), transpose:GetColumns())
            PerformHouseholderReflection(minor, transpose)
            minor = minor + 1
        end

        me:transpose = transpose
        CalculateUpperTriangularMatrix()
        CalculateOrthonormalMatrix()
    end

    /*
        This action calculates the values for the orthonormal matrix. It stores both the transposed version and the 
        non-transposed version
    */
    private action CalculateOrthonormalMatrix
        integer n = transpose:GetRows()
        integer m = transpose:GetColumns()

        Matrix qta
        qta:SetSize(m,m)
        qta:Fill(m, m, 0) //fill it with zeroes

        integer minor = m - 1
        integer min = m
        if n < m
            min = n
        end

        repeat while minor >= min
            qta:Set(minor, minor, 1.0)
            minor = minor - 1
        end

        minor = min - 1
        repeat while minor >= 0
            qta:Set(minor, minor, 1.0)
            number value = transpose:Get(minor, minor)
            if value not= 0.0
                integer col = minor
                repeat while col < m
                    number alpha = 0.0

                    integer row = minor
                    repeat while row < m
                        number innerValue = qta:Get(col, row) * transpose:Get(minor, row)
                        alpha = alpha - innerValue
                        row = row + 1
                    end
                    alpha = alpha / (rDiag:Get(minor) * transpose:Get(minor, minor))

                    row = minor
                    repeat while row < m
                        number innerValue = qta:Get(col, row) + -alpha * transpose:Get(minor, row)
                        qta:Set(col, row, innerValue)
                        row = row + 1
                    end
                    col = col + 1
                end
            end
            minor = minor - 1
        end

        orthonormalTransposed = qta
        orthonormal = orthonormalTransposed:Transpose()
    end

    /*
        This action calculates the values for the upper triangular matrix.
    */
    private action CalculateUpperTriangularMatrix
        integer n = transpose:GetRows()
        integer m = transpose:GetColumns()

        Matrix ra
        ra:SetSize(m,n)
        ra:Fill(m, n, 0) //fill it with zeroes
        

        integer row = n
        if m < n
            row = m
        end
        row = row - 1
        repeat while row >= 0
            ra:Set(row, row, rDiag:Get(row))
            integer col = row + 1
            repeat while col < n
                number value = transpose:Get(col, row)
                ra:Set(row, col, value)
                col = col + 1
            end
            row = row - 1
        end
        upperTriangular = ra
    end

    /*
        This action gets the orthonormal matrix.
    */
    action GetOrthonormalMatrix returns Matrix
        return orthonormal
    end

    /*
        This action gets the orthonormal matrix.
    */
    action GetOrthonormalTransposedMatrix returns Matrix
        return orthonormalTransposed
    end

    /*
        This action returns the upper triangular matrix.
    */
    action GetUpperTriangularMatrix returns Matrix
        return upperTriangular
    end

    private action SetupDiagonals(Matrix matrix)
        Array<number> rDiag2
        integer size = matrix:GetRows()
        if matrix:GetColumns() < size
            size = matrix:GetColumns()
        end

        rDiag2:SetSize(size)
        rDiag = rDiag2
    end

    private action PerformHouseholderReflection(integer minor, Matrix matrix)
        number xNormSqr = 0
        integer row = minor

        //We call GetColumns here because the matrix is transposed, so 
        //these values are reversed. 
        repeat while row < matrix:GetColumns()
            number c = matrix:Get(minor, row)
            xNormSqr = xNormSqr + (c * c)
            row = row + 1
        end
        
        number a = 0
        if matrix:Get(minor, minor) > 0
            a = -math:SquareRoot(xNormSqr)
        else
            a = math:SquareRoot(xNormSqr)
        end

        rDiag:Set(minor, a)

        if a not= 0.0
            number temp = matrix:Get(minor, minor) - a
            matrix:Set(minor, minor, temp)
        
            integer col = minor + 1
            repeat while col < matrix:GetRows()
                number alpha = 0            
                row = minor
                repeat while row < matrix:GetColumns()
                    alpha = alpha - (matrix:Get(col, row) * matrix:Get(minor, row))
                    row = row + 1
                end
                alpha = alpha / (a * matrix:Get(minor, minor))
                row = minor
                repeat while row < matrix:GetColumns()
                    number value = matrix:Get(col, row) - alpha * matrix:Get(minor, row)
                    matrix:Set(col, row, value)
                    row = row + 1
                end

                col = col + 1
            end
        end
    end

    action GetResult returns Matrix
        return transpose
    end

    action Solve(Vector vector) returns Vector
        integer n = transpose:GetRows()
        integer m = transpose:GetColumns()

        if vector:GetSize() not= m
            alert("Vector dimensions of size " + vector:GetSize() + " do not match matrix dimension of " + m)
        end

        Vector x
        x:SetSize(n)

        Vector y = vector:Copy()

        // apply Householder transforms to solve Q.y = b
        integer minor = 0
        integer min = m
        if n < m
            min = n
        end
        repeat while minor < min
            number dotProduct = 0
            integer row = minor
            repeat while row < m
                number value = y:Get(row) * transpose:Get(minor, row)
                dotProduct = dotProduct + value
                row = row + 1
            end
            dotProduct = dotProduct / (rDiag:Get(minor) * transpose:Get(minor, minor))

            row = minor
            repeat while row < m
                number value = y:Get(row) + (dotProduct * transpose:Get(minor, row))
                y:Set(row, value)
                row = row + 1
            end
            minor = minor + 1
        end

        integer row = rDiag:GetSize() - 1
        repeat while row >= 0
            y:Set(row, y:Get(row) / rDiag:Get(row))
            number yRow = y:Get(row)
            x:Set(row, yRow)
            integer i = 0
            repeat while i < row
                number value = y:Get(i) - (yRow * transpose:Get(row, i))
                y:Set(i, value)
                i = i + 1
            end
            row = row - 1
        end

        return x
    end

    action Solve(Matrix matrix) returns Matrix
        integer n = transpose:GetColumns()
        integer m = transpose:GetRows()

        if matrix:GetRows() not= m
            alert("Matrix row dimension of size " + matrix:GetRows() + " do not match matrix dimension of " + m)
        end

        integer columns = matrix:GetColumns()
        integer blockSize = BLOCK_SIZE
        integer cBlocks = (columns + blockSize - 1) / blockSize

        Array<Array<number>> xBlocks
        integer maxSize = columns
        integer blockRows = (n + BLOCK_SIZE - 1) / BLOCK_SIZE
        integer blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE
        integer blockIndex = 0
        integer iBlock = 0
        repeat while iBlock < blockRows
            integer pStart = iBlock * BLOCK_SIZE
            integer pEnd = cast(integer, math:MinimumOf(pStart + BLOCK_SIZE, n))
            integer iHeight = pEnd - pStart
            integer jBlock = 0
            repeat while jBlock < blockColumns
                integer qStart = jBlock * BLOCK_SIZE
                integer qEnd = cast(integer, math:MinimumOf(qStart + BLOCK_SIZE, columns))
                integer jWidth = qEnd - qStart

                Array<number> col
                i = 0
                repeat while i < iHeight * jWidth
                    col:Add(0)
                    i = i + 1
                end
                xBlocks:Add(col)

                blockIndex = blockIndex + 1
                jBlock = jBlock + 1
            end
            iBlock = iBlock + 1
        end

        Matrix y
        y:Fill(matrix:GetRows(), blockSize, 0)

        Matrix alpha
        alpha:Fill(blockSize,1,0)

        integer kBlock = 0
        repeat while kBlock < cBlocks
            integer kStart = kBlock * blockSize
            integer kEnd   = cast(integer, math:MinimumOf(kStart + blockSize, columns))
            integer kWidth = kEnd - kStart

            Matrix sub = matrix:GetSubMatrix(0, kStart, m, kEnd)
            i = 0
            repeat while i < y:GetRows() and i < sub:GetRows()
                j = 0
                repeat while j < y:GetColumns() and j < sub:GetColumns()
                    y:Set(i, j, sub:Get(i,j))
                    j = j + 1
                end
                i = i + 1
            end

            // apply Householder transforms to solve Q.y = b
            integer minor = 0
            integer min = m
            if n < m
                min = n
            end
            repeat while minor < min
                number factor = 1.0 / (rDiag:Get(minor) * transpose:Get(minor, minor))
    
                //Arrays.fill(alpha, 0, kWidth, 0.0);
                i = 0   
                repeat while i < kWidth
                    alpha:Set(i, 0, 0.0)
                    i = i + 1
                end

                integer row = minor
                repeat while row < m
                    number d = transpose:Get(minor, row)
                    k = 0
                    repeat while k < kWidth
                        alpha:Set(k,0, alpha:Get(k,0) + d * y:Get(row,k))
                        k = k + 1
                    end
                    row = row + 1
                end

                k = 0
                repeat while k < kWidth
                    alpha:Set(k,0, alpha:Get(k,0) * factor)
                    k = k + 1
                end

                row = minor
                repeat while row < m
                    number d = transpose:Get(minor, row)
                    k = 0
                    repeat while k < kWidth
                        y:Set(row,k, y:Get(row,k) + d * alpha:Get(k,0))
                        k = k + 1
                    end
                    row = row + 1
                end
                minor = minor + 1
            end
    
            // solve triangular system R.x = y
            integer j = rDiag:GetSize() - 1
            repeat while j >= 0
                integer jBlock = j / blockSize
                integer jStart = jBlock * blockSize
                number factor = 1.0 / rDiag:Get(j)

                integer index = (j - jStart) * kWidth
                k = 0
                repeat while k < kWidth
                    y:Set(j,k, y:Get(j,k) * factor)
                    xBlocks:Get(jBlock * cBlocks + kBlock):Set(index, y:Get(j,k))
                    index = index + 1
                    k = k + 1
                end

                i = 0
                repeat while i < j
                    number rji = transpose:Get(j, i)
                    k = 0
                    repeat while k < kWidth
                        y:Set(i,k, y:Get(i,k) - y:Get(j,k) * rji)
                        k = k + 1
                    end
                    i = i + 1
                end
                j = j - 1
            end

            kBlock = kBlock + 1
        end

        Matrix x
        x:Fill(matrix:GetRows(), matrix:GetColumns(), 0)
        matrixIndex = 0
        arrayIndex = 0
        i = 0
        repeat while i < xBlocks:GetSize()
            Array<number> row
            j = 0
            repeat while arrayIndex < xBlocks:Get(i):GetSize() 
                if j mod n = 0 and j not= 0
                    x:SetRow(matrixIndex, row)
                    row:Empty()
                    matrixIndex = matrixIndex + 1
                end
                row:Add(xBlocks:Get(i):Get(arrayIndex))
                arrayIndex = arrayIndex + 1 
                j = j + 1
            end
            x:SetRow(matrixIndex, row)
            i = i + 1
        end
        return x
    end

    /*
        This action calls solve using the identity matrix as a parameter, with the size given by the transpose. 
    */
    action GetInverse returns Matrix
        Matrix matrix
        matrix:SetSize(transpose:GetRows(),transpose:GetRows())
        matrix = matrix:Identity()
        return Solve(matrix)
    end
end