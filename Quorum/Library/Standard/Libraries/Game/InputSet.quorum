package Libraries.Game

use Libraries.Compute.BitwiseOperations
use Libraries.Containers.Array
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.GestureEvent

class InputSet 

    /*
    Bit positional constants. These can be modified to adjust the positioning of
    all the bits used to store information.
    */
    constant integer VALUE_SIZE = 8
    constant integer TYPE_SIZE = 5
    constant integer TRIGGER_SIZE = 2
    constant integer EVENT_COUNT_SIZE = 2
    public constant integer SHIFT = VALUE_SIZE + TYPE_SIZE + TRIGGER_SIZE + EVENT_COUNT_SIZE
    public constant integer CONTROL = SHIFT + 1
    public constant integer ALT = CONTROL + 1
    public constant integer META = ALT + 1

    /*
    KEYBOARD_INPUT:
        BEGIN: When the key is first pressed down.
        CONTINUE: Each frame that the key is held down.
        FINISH: When the key is released.
        FINISH_UNCAUGHT: When the key is released, if it wasn't used as part of a keypress combination.

    MOUSE_INPUT:
        BEGIN: When the mouse button is first clicked.
        CONTINUE: Each frame that the button is held down.
        FINISH: When the button is released.
        FINISH_UNCAUGHT: N/A

    MOUSE_WHEEL_INPUT:
        BEGIN: When the mouse wheel moves. (Wheel movement is non-continuous - each movement is registered, but there's typically no "smooth transition" as in begin/finish)
        CONTINUE: N/A
        FINISH: N/A
        FINISH_UNCAUGHT: N/A

    MOUSE_MOVEMENT_INPUT:
        BEGIN: When the mouse first moves onto an Item.
        CONTINUE: Each mouse movement, whether on the same Item or not.
        FINISH: When the mouse moves off of an Item.
        FINISH_UNCAUGHT: N/A

    TOUCH_INPUT:
        BEGIN: When a finger first presses down.
        CONTINUE: Each frame a finger is touching the screen.
        FINISH: When the finger is removed from the screen.
        FINISH_UNCAUGHT: N/A

    DRAG_INPUT:
        BEGIN: When the mouse begins to move while holding a button down.
        CONTINUE: Each frame where the mouse moves while still holding the button.
        FINISH: When the mouse button is released.

    DROP_INPUT:
        BEGIN: When the dragged element first moves over the drop target.
        CONTINUE: Each frame (including the first frame, after the BEGIN triggers) the dragged element moves over the target.
        FINISH: When the dragged element is dropped onto the target.
        FINISH_UNCAUGHT: When the dragged element is moved off of the target without dropping it.
    */

    public constant integer KEYBOARD_INPUT = 0
    public constant integer MOUSE_INPUT = 1
    public constant integer MOUSE_WHEEL_INPUT = 2
    public constant integer MOUSE_MOVEMENT_INPUT = 3
    public constant integer TOUCH_INPUT = 4
    public constant integer TEXT_INPUT = 5
    public constant integer TOUCH_MOVEMENT_INPUT = 6
    public constant integer DRAG_ITEM_INPUT = 7
    public constant integer DROP_ITEM_INPUT = 8
    public constant integer GESTURE_INPUT = 9
    public constant integer BEGIN = 0
    public constant integer FINISH = 1
    public constant integer CONTINUE = 2
    public constant integer FINISH_UNCAUGHT = 3
    constant text SHIFT_TEXT = "Shift"
    constant text CONTROL_TEXT = "Control"
    constant text ALT_TEXT = "Alt"
    constant text META_TEXT = "Meta"

    constant BitwiseOperations bits

    /*
    Where the actual information is stored for the InputSet. Storing in this
    format allows for matching InputSets to be used as keys into a HashTable,
    even if the objects themselves have different hashcodes.

    The individual bits represent the following information:
        1st to 8th bits: Integer value of the key or mouse input.
        9th to 13th bits: What kind of input this is. Corresponds to one of the input constants.
        14th to 15th bits: How the input is triggered. Can represent an input event beginning, finishing, or continuing.
        16th to 17th bits: How many previous events should be registered before triggering this one.
        18th bit: Shift key modifier - 1 if required, 0 otherwise.
        19th bit: Control key modifier - 1 if required, 0 otherwise.
        20th bit: Alt key modifier - 1 if required, 0 otherwise.
        21st bit: Meta key modifier - 1 if required, 0 otherwise.
    */
    integer bitmask = 0

    action AddModifier(integer modifier)
        bitmask = bits:Or(bitmask, bits:ShiftLeft(1, modifier))
    end

    action RemoveModifier(integer modifier)
        bitmask = bits:And(bitmask, bits:Negate(bits:ShiftLeft(1, modifier)))
    end

    action HasModifier(integer modifier) returns boolean
        return bits:And(1, bits:ShiftRight(bitmask, modifier)) = 1
    end

    action EmptyModifiers
        bitmask = bits:And(bitmask, bits:Negate(bits:ShiftLeft(-1, SHIFT + 1)))
    end

    action Empty
        bitmask = 0
    end

    action SetKeyboardInput(integer key)
        bitmask = bits:And(bitmask, bits:ShiftLeft(-1, VALUE_SIZE + TYPE_SIZE))
        bitmask = bits:Or(bitmask, key)
        SetInputType(KEYBOARD_INPUT)
    end

    action SetMouseInput(integer mouseButton)
        bitmask = bits:And(bitmask, bits:ShiftLeft(-1, VALUE_SIZE + TYPE_SIZE))
        SetInputType(MOUSE_INPUT)
        bitmask = bits:Or(bitmask, mouseButton)
    end

    action SetMouseMovementInput(integer mouseButton)
        SetInputType(MOUSE_MOVEMENT_INPUT)
        SetBits(mouseButton, VALUE_SIZE, 0)
    end

    action SetDragItemInput
        SetInputType(DRAG_ITEM_INPUT)
        SetBits(0, VALUE_SIZE, 0)
    end

    action SetDropItemInput
        SetInputType(DROP_ITEM_INPUT)
        SetBits(0, VALUE_SIZE, 0)
    end

    action SetGestureInput(integer gestureType)
        SetInputType(GESTURE_INPUT)
        SetBits(gestureType, VALUE_SIZE, 0)
    end

    action SetInputType(integer type)
        integer mask = bits:ShiftLeft(-1, TYPE_SIZE)
        mask = bits:Or(bits:ShiftLeft(mask, VALUE_SIZE), bits:Negate(bits:ShiftLeft(-1, VALUE_SIZE)))
        mask = bits:And(bitmask, mask)
        bitmask = bits:Or(mask, bits:ShiftLeft(type, VALUE_SIZE))
    end

    action SetInputTrigger(integer type)
        SetBits(type, TRIGGER_SIZE, VALUE_SIZE + TYPE_SIZE)
    end

    action SetEventCount(integer count)
        // Reduce the value by 1 (effectively, convert a value where counting
        // begins at 1 into a value where counting starts at 0), and bound it
        // between 0 and 3.
        if count < 1
            count = 0
        elseif count > 4
            count = 3
        else
            count = count - 1
        end

        SetBits(count, EVENT_COUNT_SIZE, VALUE_SIZE + TYPE_SIZE + TRIGGER_SIZE)
    end

    action GetInputTrigger returns integer
        return GetBits(TRIGGER_SIZE, VALUE_SIZE + TYPE_SIZE)
    end

    action GetInputType returns integer
        return GetBits(TYPE_SIZE, VALUE_SIZE)
    end

    action SetInputValue(integer value)
        SetBits(value, VALUE_SIZE, 0)
    end

    action GetInputValue returns integer
        return GetBits(VALUE_SIZE, 0)
    end

    action GetModifiers returns Array<integer>
        Array<integer> modifiers
        if HasModifier(SHIFT)
            modifiers:Add(SHIFT)
        end
        if HasModifier(CONTROL)
            modifiers:Add(CONTROL)
        end
        if HasModifier(ALT)
            modifiers:Add(ALT)
        end
        if HasModifier(META)
            modifiers:Add(META)
        end
        return modifiers
    end

    action Set(InputSet set)
        bitmask = set:GetHashCode()
    end

    /*
        This sets the raw bitmask. It intentionally has a nasty technical to 
        warn the user that this action should not be used unless you really, really,
        know what you are doing.
    */
    action SetBitMask(integer value)
        bitmask = value
    end

    action Copy returns InputSet
        InputSet set
        set:Set(me)
        return set
    end

    action GetHashCode returns integer
        return bitmask
    end

    action Equals(Object o) returns boolean
        if o is InputSet
            return Equals(cast(InputSet, o))
        end
        return false
    end

    action Equals(InputSet set) returns boolean
        return bitmask = set:GetHashCode()
    end

    /*
    Take the first "bitCount" many bits from value, and place them at the 
    "shift" bit. For example, for a value of 3, bitCount of 2, and shift of 8, 
    place the first two bits of 3 (11) beginning at the 8th bit. 
    If the previous bitmask was:
        ...00000000000
    the result would be:
        ...01100000000
    */
    private action SetBits(integer value, integer bitCount, integer shift)
        integer zeroBits = bits:Negate(bits:ShiftLeft(-1, bitCount))
        integer valueBits = bits:And(zeroBits, value)
        zeroBits = bits:Negate(bits:ShiftLeft(zeroBits, shift))
        valueBits = bits:ShiftLeft(valueBits, shift)
        bitmask = bits:Or(bits:And(bitmask, zeroBits), valueBits)
    end

    /*
    This action returns the requested number of bits at the requested position
    (the position is 0 indexed). For example, a bitCount of 3 and a position of 
    4, from the following mask:
        ...00000110000
    Our example would return 3 (011).
    */
    private action GetBits(integer bitCount, integer position) returns integer
        integer mask = bits:ShiftLeft(1, bitCount) - 1
        mask = bits:ShiftLeft(mask, position)
        return bits:And(bitmask, mask)
    end

    action GetDisplayName returns text
        text result = ""
        if HasModifier(CONTROL)
            result = result + "Control + "
        end
        if HasModifier(META)
            result = result + "Command + "
        end
        if HasModifier(ALT)
            result = result + "Alt + "
        end
        if HasModifier(SHIFT)
            result = result + "Shift + "
        end

        integer type = GetInputType()

        if type = KEYBOARD_INPUT
            KeyboardEvent keys
            text toText = keys:ToText(GetInputValue())
            if toText:GetSize() = 1
                toText = toText:ToUpperCase()
            end
            result = result + toText

        elseif type = MOUSE_INPUT
            MouseEvent buttons
            result = result + "Mouse " + buttons:ToText(GetInputValue())

        elseif type = MOUSE_WHEEL_INPUT
            return result + "Mouse Wheel Scroll"

        elseif type = MOUSE_MOVEMENT_INPUT
            integer value = GetInputValue()
            if value = 0
                return result + "Mouse Move"
            else
                MouseEvent buttons
                return result + "Mouse " + buttons:ToText(value) + " Drag"
            end

        elseif type = TOUCH_INPUT
            return result + "Tap"
        elseif type = TEXT_INPUT
            return result + "Text Input"
        elseif type = TOUCH_MOVEMENT_INPUT
            return result + "Drag"
        elseif type = DRAG_ITEM_INPUT
            return result + "Drag Item"
        elseif type = DROP_ITEM_INPUT
            return result + "Drop Item"
        elseif type = GESTURE_INPUT
            GestureEvent gestures
            integer value = GetInputValue()
            return result + "Gesture " + gestures:ToText(value)
        end

        return result
    end
    
    action ToText returns text
        return GetDisplayName()
    end
end