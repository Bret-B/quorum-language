package Libraries.Game.Scenes

use Libraries.Compute.Matrix4
use Libraries.Compute.Vector2
use Libraries.Compute.Vector3
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Containers.Number32BitArray
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Game.Game
use Libraries.Game.GameStateManager
use Libraries.Game.Layer
use Libraries.Game.Layer2D
use Libraries.Game.Layer3D
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Model
use Libraries.Game.Graphics.AmbientLight
use Libraries.Game.Graphics.DirectionalLight
use Libraries.Game.Graphics.PointLight
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.PerspectiveCamera
use Libraries.Game.Graphics.OrthographicCamera
use Libraries.Game.Graphics.Texture
use Libraries.Interface.Item
use Libraries.Interface.Item2D
use Libraries.Interface.Item3D
use Libraries.Game.Graphics.Skybox
use Libraries.System.File

class DefaultSceneManager is SceneManager
    
    GameStateManager gameState

    action Load(Scene scene)
        Game game = gameState:GetGame()
        SceneProperties properties

        // Modify any application-level properties.
        JavaScriptObjectNotation application = scene:GetApplicationProperties()
        if application not= undefined
            LoadApplicationProperties(game, application)
        end

        
        // Get layers to modify -- either from existing or new.
        JavaScriptObjectNotation layerNotation = scene:GetLayers()
        Iterator<JavaScriptObjectNotation> layerIterator = layerNotation:GetIterator()
        repeat while layerIterator:HasNext()
            JavaScriptObjectNotation layerJson = layerIterator:Next()
            Layer current = SelectLayer(layerJson)
            LoadLayer(current, layerJson)
        end

    end

    private action SelectLayer(JavaScriptObjectNotation layerJson) returns Layer
        Game game = gameState:GetGame()
        SceneProperties properties

        text name = layerJson:GetValue(properties:NAME)
        text classValue = layerJson:GetValue(properties:CLASS)
        Iterator<Layer> gameLayers = game:GetLayerIterator()
        boolean found = false
        Layer current = undefined

        // Search if any of the existing layers match the requested one.
        // If the candidate matches, use that. Otherwise, make a new one.
        repeat while found = false and gameLayers:HasNext()
            current = gameLayers:Next()
            if current:GetName() = name
                if classValue = "Layer2D"
                    found = (current is Layer2D)
                elseif classValue = "Layer3D"
                    found = (current is Layer3D)
                end
            end
        end
        gameLayers:Rewind()

        if not found
            if classValue = "Layer2D"
                Layer2D newLayer
                current = newLayer
                game:AddLayer(newLayer)
            elseif classValue = "Layer3D"
                Layer3D newLayer
                current = newLayer
                game:AddLayer(newLayer)
            end
        end

        return current
    end

    private action LoadApplicationProperties(Game game, JavaScriptObjectNotation application)
        SceneProperties properties
        Array<text> applicationKeys = application:GetKeys()

        integer counter = 0
        repeat while counter < applicationKeys:GetSize()
            text key = applicationKeys:Get(counter)

            if key = properties:FULL_SCREEN
                game:SetFullScreen(application:GetBoolean(key))
            elseif key = properties:SIZE
                Number32BitArray size = ConvertToNumber32BitArray(application:GetObject(key))
                game:SetScreenSize(cast(integer, size:Get(0)), cast(integer, size:Get(1)))
            end

            counter = counter + 1
        end
    end

    private action LoadLayer(Layer layer, JavaScriptObjectNotation json)
        SceneProperties properties
        Array<text> keys = json:GetKeys()

        integer counter = 0
        repeat while counter < keys:GetSize()
            text key = keys:Get(counter)

            if key = properties:NAME
                layer:SetName(json:GetValue(properties:NAME))
            elseif key = properties:CAMERA
                LoadCamera(layer, json:GetObject(properties:CAMERA))
            elseif key = properties:ITEMS
                if layer is Layer2D
                    Layer2D layer2D = cast(Layer2D, layer)
                    Array<Item2D> items = LoadItem2Ds(json:GetObject(properties:ITEMS))
                    integer i = 0
                    repeat while i < items:GetSize()
                        layer2D:Add(items:Get(i))
                        i = i + 1
                    end
                elseif layer is Layer3D
                    Layer3D layer3D = cast(Layer3D, layer)
                    Array<Item3D> items = LoadItem3Ds(json:GetObject(properties:ITEMS))
                    integer i = 0
                    repeat while i < items:GetSize()
                        layer3D:Add(items:Get(i))
                        i = i + 1
                    end
                end
            elseif key = properties:VIEWPORT
                Number32BitArray array = ConvertToNumber32BitArray(json:GetObject(properties:VIEWPORT))
                layer:SetViewport(cast(integer, array:Get(0)), cast(integer, array:Get(1)), cast(integer, array:Get(2)), cast(integer, array:Get(3)))
            elseif key = properties:PHYSICS
                if layer is Layer2D
                    Layer2D layer2D = cast(Layer2D, layer)
                    LoadPhysics2D(layer2D, json:GetObject(key))
                elseif layer is Layer3D
                    Layer3D layer3D = cast(Layer3D, layer)
                    LoadPhysics3D(layer3D, json:GetObject(key))
                end
            elseif key = properties:LIGHTS
                LoadLights(cast(Layer3D, layer), json:GetObject(key))
            elseif key = properties:SKYBOX

            end

            counter = counter + 1
        end

    end

    private action LoadCamera(Layer layer, JavaScriptObjectNotation json)
        SceneProperties properties
        Camera camera = layer:GetCamera()
        text classValue = json:GetValue(properties:CLASS)

        if classValue = "PerspectiveCamera"
            if not (camera is PerspectiveCamera)
                PerspectiveCamera newCamera
                camera = newCamera
                layer:SetCamera(camera)
            end
        elseif classValue = "OrthographicCamera"
            if not (camera is OrthographicCamera)
                OrthographicCamera newCamera
                camera = newCamera
                layer:SetCamera(camera)
            end
        end

        Array<text> keys = json:GetKeys()

        integer counter = 0
        repeat while counter < keys:GetSize()
            text key = keys:Get(counter)

            if key = properties:POSITION
                Number32BitArray position = ConvertToNumber32BitArray(json:GetObject(key))
                camera:SetPosition(position:Get(0), position:Get(1), position:Get(2))
            elseif key = properties:DIRECTION
                Number32BitArray direction = ConvertToNumber32BitArray(json:GetObject(key))
                camera:SetDirection(direction:Get(0), direction:Get(1), direction:Get(2))
            elseif key = properties:UP
                Number32BitArray up = ConvertToNumber32BitArray(json:GetObject(key))
                camera:SetUp(up:Get(0), up:Get(1), up:Get(2))
            elseif key = properties:SIZE
                Number32BitArray size = ConvertToNumber32BitArray(json:GetObject(key))
                camera:SetWidth(size:Get(0))
                camera:SetHeight(size:Get(1))
            elseif key = properties:NEAR
                camera:SetNear(json:GetNumber(key))
            elseif key = properties:FAR
                camera:SetFar(json:GetNumber(key))
            elseif key = properties:ZOOM
                OrthographicCamera orthographic = cast(OrthographicCamera, camera)
                orthographic:SetZoom(json:GetNumber(key))
            elseif key = properties:FIELD_OF_VIEW
                PerspectiveCamera perspective = cast(PerspectiveCamera, camera)
                perspective:SetFieldOfView(json:GetNumber(key))
            end

            counter = counter + 1
        end
    end

    private action LoadPhysics2D(Layer2D layer, JavaScriptObjectNotation json)
        SceneProperties properties

        Array<text> keys = json:GetKeys()

        integer counter = 0
        repeat while counter < keys:GetSize()
            text key = keys:Get(counter)

            if key = properties:ENABLED
                layer:EnablePhysics(json:GetBoolean(key))
            elseif key = properties:GRAVITY
                Number32BitArray gravity = ConvertToNumber32BitArray(json:GetObject(key))
                layer:SetGravity(gravity:Get(0), gravity:Get(1))
            end

            counter = counter + 1
        end
    end

    private action LoadPhysics3D(Layer3D layer, JavaScriptObjectNotation json)
        SceneProperties properties

        Array<text> keys = json:GetKeys()

        integer counter = 0
        repeat while counter < keys:GetSize()
            text key = keys:Get(counter)

            if key = properties:ENABLED
                layer:EnablePhysics(json:GetBoolean(key))
            elseif key = properties:GRAVITY
                Number32BitArray gravity = ConvertToNumber32BitArray(json:GetObject(key))
                layer:SetGravity(gravity:Get(0), gravity:Get(1), gravity:Get(2))
            end

            counter = counter + 1
        end
    end

    private action LoadItem2Ds(JavaScriptObjectNotation json) returns Array<Item2D>
        Array<Item2D> items

        Iterator<JavaScriptObjectNotation> iterator = json:GetIterator()
        repeat while iterator:HasNext()
            JavaScriptObjectNotation item = iterator:Next()
            items:Add(LoadItem2D(item))
        end

        return items
    end

    private action LoadItem3Ds(JavaScriptObjectNotation json) returns Array<Item3D>
        Array<Item3D> items

        Iterator<JavaScriptObjectNotation> iterator = json:GetIterator()
        repeat while iterator:HasNext()
            JavaScriptObjectNotation item = iterator:Next()
            items:Add(LoadItem3D(item))
        end

        return items
    end

    private action LoadItem2D(JavaScriptObjectNotation json) returns Item2D
        SceneProperties properties

        // Load Items, Drawables
        text classValue = json:GetValue(properties:CLASS)
        Item2D item = undefined
        Number32BitArray size = undefined
        number rotation = 0
        Number32BitArray scale = undefined
        JavaScriptObjectNotation children = undefined
        integer responsiveness = -1
        number restitution = -1

        // These variables are used if the Item is a Drawable.
        Drawable drawable = undefined
        text file = ""
        integer type = properties:NONE
        Number32BitArray points = undefined
        Color color = undefined

        if classValue = "Drawable"
            Drawable newDrawable
            drawable = newDrawable
            item = drawable
        else
            // Default to Item2D.
            Item2D newItem
            item = newItem
        end

        Array<text> keys = json:GetKeys()

        integer counter = 0
        repeat while counter < keys:GetSize()
            text key = keys:Get(counter)

            if key = properties:NAME
                item:SetName(json:GetValue(key))
            elseif key = properties:POSITION
                Number32BitArray position = ConvertToNumber32BitArray(json:GetObject(key))
                item:SetPosition(position:Get(0), position:Get(1))
            elseif key = properties:SIZE
                size = ConvertToNumber32BitArray(json:GetObject(key))
            elseif key = properties:TYPE
                type = json:GetInteger(key)
            elseif key = properties:FILE
                file = json:GetValue(key)
            elseif key = properties:DESCRIPTION
                item:SetDescription(json:GetValue(key))
            elseif key = properties:ROTATION
                rotation = json:GetNumber(key)
            elseif key = properties:SCALE
                scale = ConvertToNumber32BitArray(json:GetObject(key))
            elseif key = properties:COLOR
                Color drawableColor
                Number32BitArray colorArray = ConvertToNumber32BitArray(json:GetObject(key))
                drawableColor:SetColor(colorArray:Get(0), colorArray:Get(1), colorArray:Get(2), colorArray:Get(3))
                color = drawableColor
            elseif key = properties:POINTS
                points = ConvertToNumber32BitArray(json:GetObject(key))
            elseif key = properties:CHILDREN
                children = json:GetObject(key)
            elseif key = properties:PHYSICS_ENABLED
                item:EnablePhysics(json:GetBoolean(key))
            elseif key = properties:RESPONSIVENESS
                text responsiveValue = json:GetValue(key)
                if responsiveValue = properties:UNMOVABLE
                    responsiveness = 0
                elseif responsiveValue = properties:NONRESPONSIVE
                    responsiveness = 1
                elseif responsiveValue = properties:RESPONSIVE
                    responsiveness = 2
                end
            elseif key = properties:RESTITUTION
                restitution = json:GetNumber(key)
            end

            counter = counter + 1
        end

        if drawable not= undefined
            if type = properties:FILLED_RECTANGLE
                if color not= undefined
                    drawable:LoadFilledRectangle(cast(integer, size:Get(0)), cast(integer, size:Get(1)), color)
                else
                    drawable:LoadFilledRectangle(cast(integer, size:Get(0)), cast(integer, size:Get(1)))
                end
            elseif type = properties:RECTANGLE
                if color not= undefined
                    drawable:LoadRectangle(cast(integer, size:Get(0)), cast(integer, size:Get(1)), color)
                else
                    drawable:LoadRectangle(cast(integer, size:Get(0)), cast(integer, size:Get(1)))
                end
            elseif type = properties:FILLED_CIRCLE
                if color not= undefined
                    drawable:LoadFilledCircle(cast(integer, size:Get(0)) / 2, color)
                else
                    drawable:LoadFilledCircle(cast(integer, size:Get(0)) / 2)
                end
            elseif type = properties:CIRCLE
                if color not= undefined
                    drawable:LoadCircle(cast(integer, size:Get(0)) / 2, color)
                else
                    drawable:LoadCircle(cast(integer, size:Get(0)) / 2)
                end
            elseif type = properties:FILLED_TRIANGLE
                if color not= undefined
                    drawable:LoadFilledTriangle(cast(integer, points:Get(0)), cast(integer, points:Get(1)), cast(integer, points:Get(2)),
                        cast(integer, points:Get(3)), cast(integer, points:Get(4)), cast(integer, points:Get(5)), color)
                else
                    drawable:LoadFilledTriangle(cast(integer, points:Get(0)), cast(integer, points:Get(1)), cast(integer, points:Get(2)),
                        cast(integer, points:Get(3)), cast(integer, points:Get(4)), cast(integer, points:Get(5)))
                end
            elseif type = properties:CUSTOM
                drawable:Load(file)
            end
        end

        item:SetSize(size:Get(0), size:Get(1))
        item:SetScale(scale:Get(0), scale:Get(1))
        item:SetRotation(rotation)

        if responsiveness >= 0
            item:SetResponsiveness(responsiveness)
        end

        if restitution >= 0
            item:SetRestitution(restitution)
        end

        if children not= undefined
            Array<Item2D> childItems = LoadItem2Ds(children)
            integer i = 0
            repeat while i < childItems:GetSize()
                item:Add(childItems:Get(i))
                i = i + 1
            end
        end

        return item
    end

    private action LoadItem3D(JavaScriptObjectNotation json) returns Item3D
        SceneProperties properties

        // Load Items, Models
        text classValue = json:GetValue(properties:CLASS)
        Item3D item = undefined
        Number32BitArray size = undefined
        Number32BitArray transform = undefined
        JavaScriptObjectNotation children = undefined

        // These variables are used if the Item is a Model.
        Model model = undefined
        text file = ""
        integer type = properties:NONE

        // Variables used if the Item is a PointLight.
        PointLight light = undefined
        number intensity = 0

        // Color is used for both Models and PointLights.
        Color color = undefined

        if classValue = "Model"
            Model newModel
            model = newModel
            item = model
        elseif classValue = "PointLight"
            PointLight pointLight
            light = pointLight
            item = light
        else
            // Default to Item3D.
            Item3D newItem
            item = newItem
        end

        Array<text> keys = json:GetKeys()

        integer counter = 0
        repeat while counter < keys:GetSize()
            text key = keys:Get(counter)

            if CustomLoadProperty3D(item, key, json)
                // If we custom loaded this property, we don't do the normal processing for that key.
            elseif key = properties:NAME
                item:SetName(json:GetValue(key))
            elseif key = properties:POSITION
                Number32BitArray position = ConvertToNumber32BitArray(json:GetObject(key))
                item:SetPosition(position:Get(0), position:Get(1), position:Get(2))
            elseif key = properties:SIZE
                size = ConvertToNumber32BitArray(json:GetObject(key))
            elseif key = properties:TRANSFORM
                transform = ConvertToNumber32BitArray(json:GetObject(key))
            elseif key = properties:TYPE
                type = json:GetInteger(key)
            elseif key = properties:FILE
                file = json:GetValue(key)
            elseif key = properties:DESCRIPTION
                item:SetDescription(json:GetValue(key))
            elseif key = properties:ROTATION
                item:SetProperty(key, json:GetObject(key))
            elseif key = properties:SCALE
                item:SetProperty(key, json:GetObject(key))
            elseif key = properties:COLOR
                Color modelColor
                Number32BitArray colorArray = ConvertToNumber32BitArray(json:GetObject(key))
                modelColor:SetColor(colorArray:Get(0), colorArray:Get(1), colorArray:Get(2), colorArray:Get(3))
                color = modelColor
            elseif key = properties:CHILDREN
                children = json:GetObject(key)
            elseif key = properties:PHYSICS_ENABLED
                item:EnablePhysics(json:GetBoolean(key))
            elseif key = properties:RESPONSIVENESS
                text responsiveness = json:GetValue(key)
                if responsiveness = "UNMOVABLE"
                    item:SetResponsiveness(0)
                elseif responsiveness = "NON_RESPONSIVE"
                    item:SetResponsiveness(1)
                elseif responsiveness = "RESPONSIVE"
                    item:SetResponsiveness(2)
                end
            elseif key = properties:INTENSITY
                intensity = json:GetNumber(key)
            end

            counter = counter + 1
        end

        if model not= undefined
            if type = properties:BOX
                if color not= undefined
                    model:LoadBox(size:Get(0), size:Get(1), size:Get(2), color)
                elseif file not= ""
                    model:LoadBox(size:Get(0), size:Get(1), size:Get(2), file)
                end
            elseif type = properties:SPHERE
                if color not= undefined
                    model:LoadSphere(size:Get(0), size:Get(1), size:Get(2), color)
                elseif file not= ""
                    model:LoadSphere(size:Get(0), size:Get(1), size:Get(2), file)
                end
            elseif type = properties:CYLINDER
                if color not= undefined
                    model:LoadCylinder(size:Get(0), size:Get(1), size:Get(2), color)
                elseif file not= ""
                    model:LoadCylinder(size:Get(0), size:Get(1), size:Get(2), file)
                end
            elseif type = properties:PLANE
                if color not= undefined
                    model:LoadPlane(size:Get(0), size:Get(2), color)
                elseif file not= ""
                    model:LoadPlane(size:Get(0), size:Get(2), file)
                end
            elseif type = properties:CUSTOM
                model:Load(file)
                model:SetDimensions(size:Get(0), size:Get(1), size:Get(2))
            end
        else
            // Set the size, which would've been handled by model loading.
            item:SetDimensions(size:Get(0), size:Get(1), size:Get(2))

            if light not= undefined
                light:SetColor(color)
                light:SetIntensity(intensity)
            end
        end

        Matrix4 matrix = item:GetTransform()
        matrix:row0column0 = transform:Get(0)
        matrix:row0column1 = transform:Get(1)
        matrix:row0column2 = transform:Get(2)
        matrix:row0column3 = transform:Get(3)
        matrix:row1column0 = transform:Get(4)
        matrix:row1column1 = transform:Get(5)
        matrix:row1column2 = transform:Get(6)
        matrix:row1column3 = transform:Get(7)
        matrix:row2column0 = transform:Get(8)
        matrix:row2column1 = transform:Get(9)
        matrix:row2column2 = transform:Get(10)
        matrix:row2column3 = transform:Get(11)
        matrix:row3column0 = transform:Get(12)
        matrix:row3column1 = transform:Get(13)
        matrix:row3column2 = transform:Get(14)
        matrix:row3column3 = transform:Get(15)

        if children not= undefined
            Array<Item3D> childItems = LoadItem3Ds(children)
            integer i = 0
            repeat while i < childItems:GetSize()
                item:Add(childItems:Get(i))
                i = i + 1
            end
        end

        return item
    end

    /*
    This action can be used to override a portion of the default Item3D loading.
    */
    action CustomLoadProperty3D(Item3D item, text key, JavaScriptObjectNotation json) returns boolean
        return false
    end

    private action LoadLights(Layer3D layer, JavaScriptObjectNotation json)
        SceneProperties properties

        Iterator<JavaScriptObjectNotation> iterator = json:GetIterator()
        repeat while iterator:HasNext()
            JavaScriptObjectNotation current = iterator:Next()
            
            text className = current:GetValue(properties:CLASS)
            Number32BitArray color = ConvertToNumber32BitArray(current:GetObject(properties:COLOR))
            
            if className = "AmbientLight"
                AmbientLight ambience
                ambience:SetColor(color:Get(0), color:Get(1), color:Get(2), color:Get(3))
                layer:SetAmbientLight(ambience)
            elseif className = "DirectionalLight"
                Number32BitArray direction = ConvertToNumber32BitArray(current:GetObject(properties:DIRECTION))
                DirectionalLight light
                light:SetColor(color:Get(0), color:Get(1), color:Get(2), color:Get(3))
                light:SetDirection(direction:Get(0), direction:Get(1), direction:Get(2))
                layer:Add(light)
            end
        end
    end

    private action LoadSkybox(Layer3D layer, JavaScriptObjectNotation json)
        Skybox skybox
        File left
        File right
        File down
        File up
        File back
        File front
        JavaScriptObjectNotation current = json:Get(0)
        right:SetPath(current:GetValue())
        current = json:Get(1)
        left:SetPath(current:GetValue())
        current = json:Get(2)
        up:SetPath(current:GetValue())
        current = json:Get(3)
        down:SetPath(current:GetValue())
        current = json:Get(4)
        front:SetPath(current:GetValue())
        current = json:Get(5)
        back:SetPath(current:GetValue())

        skybox:Load(right, left, up, down, front, back)
        layer:SetSkybox(skybox)
    end

    action Save(Game game) returns Scene
        Array<Layer> layers
        Iterator<Layer> iterator = game:GetLayerIterator()

        repeat while iterator:HasNext()
            layers:Add(iterator:Next())
        end

        return Save(layers)
    end

    action Save(Array<Layer> layers) returns Scene
        SceneProperties properties
        JavaScriptObjectNotation json
        json:Add(properties:LAYERS, SaveLayers(layers))
        Scene scene
        scene:SetData(json)
        return scene
    end

    private action SaveLayers(Array<Layer> layers) returns JavaScriptObjectNotation
        JavaScriptObjectNotation json

        integer counter = 0
        repeat while counter < layers:GetSize()
            Layer layer = layers:Get(counter)
            json:Add("" + counter, SaveLayer(layer))
            counter = counter + 1
        end

        return json
    end

    private action SaveLayer(Layer layer) returns JavaScriptObjectNotation
        SceneProperties properties
        Game game = gameState:GetGame()
        JavaScriptObjectNotation json

        json:Add(properties:NAME, layer:GetName())

        Layer2D layer2D = undefined
        Layer3D layer3D = undefined

        if layer is Layer2D
            json:Add(properties:CLASS, "Layer2D")
            layer2D = cast(Layer2D, layer)
        elseif layer is Layer3D
            json:Add(properties:CLASS, "Layer3D")
            layer3D = cast(Layer3D, layer)
        end

        JavaScriptObjectNotation cameraJson
        Camera camera = layer:GetCamera()
        if camera is OrthographicCamera
            cameraJson:Add(properties:CLASS, "OrthographicCamera")

            Camera orthographic = cast(OrthographicCamera, camera)
            cameraJson:Add(properties:ZOOM, orthographic:GetZoom())
        elseif camera is PerspectiveCamera
            cameraJson:Add(properties:CLASS, "PerspectiveCamera")

            PerspectiveCamera perspective = cast(PerspectiveCamera, camera)
            cameraJson:Add(properties:FIELD_OF_VIEW, perspective:GetFieldOfView())
        end

        Vector3 vector = camera:GetPosition()
        cameraJson:Add(properties:POSITION, NewJsonArray(vector:GetX(), vector:GetY(), vector:GetZ()))
        vector = camera:GetDirection()
        cameraJson:Add(properties:DIRECTION, NewJsonArray(vector:GetX(), vector:GetY(), vector:GetZ()))
        vector = camera:GetUp()
        cameraJson:Add(properties:UP, NewJsonArray(vector:GetX(), vector:GetY(), vector:GetZ()))

        /*
        Record the size only if it isn't the default. We don't want the scene to
        fix the camera to a size if it was mirroring the dimensions of the window.
        */
        if camera:GetWidth() not= game:GetScreenWidth() or camera:GetHeight() not= game:GetScreenHeight()
            cameraJson:Add(properties:SIZE, NewJsonArray(camera:GetWidth(), camera:GetHeight()))
        end

        cameraJson:Add(properties:FAR, camera:GetFar())
        cameraJson:Add(properties:NEAR, camera:GetNear())

        json:Add(properties:CAMERA, cameraJson)

        JavaScriptObjectNotation physicsJson

        physicsJson:Add(properties:ENABLED, layer:PhysicsEnabled())

        if layer2D not= undefined
            if layer:PhysicsEnabled()
                Vector2 gravity = layer2D:GetGravity()
                physicsJson:Add(properties:GRAVITY, NewJsonArray(gravity:GetX(), gravity:GetY()))
            end

            json:Add(properties:PHYSICS, physicsJson)

            if layer2D:IsEmpty() = false
                json:Add(properties:ITEMS, SaveItem2Ds(layer2D))
            end
        elseif layer3D not= undefined
            if layer:PhysicsEnabled()
                Vector3 gravity = layer3D:GetGravity()
                physicsJson:Add(properties:GRAVITY, NewJsonArray(gravity:GetX(), gravity:GetY(), gravity:GetZ()))
            end

            json:Add(properties:PHYSICS, physicsJson)

            if layer3D:IsEmpty() = false
                json:Add(properties:ITEMS, SaveItem3Ds(layer3D))
            end

            if layer3D:GetAmbientLight() not= undefined or layer3D:GetDirectionalLights():HasNext()
                json:Add(properties:LIGHTS, SaveLights(layer3D))
            end
        end

        return json
    end

    private action SaveItem2Ds(Layer2D layer) returns JavaScriptObjectNotation
        JavaScriptObjectNotation json

        Iterator<Item2D> iterator = layer:GetIterator()
        integer i = 0
        repeat while iterator:HasNext()
            Item2D item = iterator:Next()
            JavaScriptObjectNotation itemJson = SaveItem2D(item)

            if itemJson not= undefined
                json:Add("" + i, itemJson)
            end

            i = i + 1
        end

        return json
    end

    private action SaveItem2D(Item2D item) returns JavaScriptObjectNotation
        SceneProperties properties
        JavaScriptObjectNotation json
        Drawable drawable = undefined

        if item is Drawable
            json:Add(properties:CLASS, "Drawable")

            drawable = cast(Drawable, item)
        else
            json:Add(properties:CLASS, "Item2D")
        end

        json:Add(properties:NAME, item:GetName())
        json:Add(properties:DESCRIPTION, item:GetDescription())
        json:Add(properties:POSITION, NewJsonArray(item:GetX(), item:GetY()))
        json:Add(properties:SIZE, NewJsonArray(item:GetWidth(), item:GetHeight()))
        json:Add(properties:SCALE, NewJsonArray(item:GetScaleX(), item:GetScaleY()))
        json:Add(properties:ROTATION, item:GetRotation())
        
        if drawable not= undefined
            integer type = drawable:GetDrawableType()
            json:Add(properties:TYPE, type)

            if type = properties:CUSTOM
                Texture texture = drawable:GetTexture()
                if texture not= undefined and texture:GetSource() not= ""
                    json:Add(properties:FILE, texture:GetSource())
                end
            elseif type = properties:FILLED_TRIANGLE
                json:Add(properties:POINTS, item:GetProperty(properties:POINTS))
            end

            Color color = drawable:GetColor()
            json:Add(properties:COLOR, NewJsonArray(color:GetRed(), color:GetGreen(), color:GetBlue(), color:GetAlpha()))
        end

        boolean physicsEnabled = item:IsPhysicsEnabled()
        json:Add(properties:PHYSICS_ENABLED, physicsEnabled)
        if physicsEnabled
            json:Add(properties:RESPONSIVENESS, item:GetResponsiveness())
        end

        return json
    end

    private action SaveItem3Ds(Layer3D layer) returns JavaScriptObjectNotation
        JavaScriptObjectNotation json

        Iterator<Item3D> iterator = layer:GetIterator()
        integer i = 0
        repeat while iterator:HasNext()
            Item3D item = iterator:Next()
            JavaScriptObjectNotation itemJson = SaveItem3D(item)

            if itemJson not= undefined
                json:Add("" + i, itemJson)
            end

            i = i + 1
        end

        return json
    end

    private action SaveItem3D(Item3D item) returns JavaScriptObjectNotation
        SceneProperties properties
        JavaScriptObjectNotation json
        Model model = undefined
        PointLight light = undefined

        if item is Model
            json:Add(properties:CLASS, "Model")

            model = cast(Model, item)
        elseif item is PointLight
            json:Add(properties:CLASS, "PointLight")
            
            light = cast(PointLight, item)
        else
            json:Add(properties:CLASS, "Item3D")
        end

        if not CustomSaveProperty3D(item, properties:NAME, json)
            json:Add(properties:NAME, item:GetName())
        end
        if not CustomSaveProperty3D(item, properties:DESCRIPTION, json)
            json:Add(properties:DESCRIPTION, item:GetDescription())
        end
        if not CustomSaveProperty3D(item, properties:POSITION, json)
            json:Add(properties:POSITION, NewJsonArray(item:GetX(), item:GetY(), item:GetZ()))
        end
        if not CustomSaveProperty3D(item, properties:SIZE, json)
            json:Add(properties:SIZE, NewJsonArray(item:GetWidth(), item:GetHeight(), item:GetDepth()))
        end
        if (not CustomSaveProperty3D(item, properties:SCALE, json)) and item:HasProperty(properties:SCALE)
            JavaScriptObjectNotation scaleJson = item:GetProperty(properties:SCALE)
            json:Add(properties:SCALE, NewJsonArray(scaleJson:Get(0):GetNumber(), scaleJson:Get(1):GetNumber(), scaleJson:Get(2):GetNumber()))
        end
        if (not CustomSaveProperty3D(item, properties:ROTATION, json)) and item:HasProperty(properties:ROTATION)
            JavaScriptObjectNotation rotationJson = item:GetProperty(properties:ROTATION)
            json:Add(properties:ROTATION, NewJsonArray(rotationJson:Get(0):GetNumber(), rotationJson:Get(1):GetNumber(), rotationJson:Get(2):GetNumber()))
        end
        if not CustomSaveProperty3D(item, properties:TRANSFORM, json)
            Matrix4 matrix = item:GetTransform()
            JavaScriptObjectNotation transform
            transform:SetArray()
            transform:Add(matrix:row0column0)
            transform:Add(matrix:row0column1)
            transform:Add(matrix:row0column2)
            transform:Add(matrix:row0column3)
            transform:Add(matrix:row1column0)
            transform:Add(matrix:row1column1)
            transform:Add(matrix:row1column2)
            transform:Add(matrix:row1column3)
            transform:Add(matrix:row2column0)
            transform:Add(matrix:row2column1)
            transform:Add(matrix:row2column2)
            transform:Add(matrix:row2column3)
            transform:Add(matrix:row3column0)
            transform:Add(matrix:row3column1)
            transform:Add(matrix:row3column2)
            transform:Add(matrix:row3column3)
    
            json:Add(properties:TRANSFORM, transform)
        end

        if model not= undefined
            if not CustomSaveProperty3D(item, properties:TYPE, json)    
                integer type = model:GetModelType()
                json:Add(properties:TYPE, type)
            end
            if not CustomSaveProperty3D(item, properties:COLOR, json)    
                Color color = model:GetColor()
                if color not= undefined
                    json:Add(properties:COLOR, NewJsonArray(color:GetRed(), color:GetGreen(), color:GetBlue(), color:GetAlpha()))
                end
            end
        elseif light not= undefined
            if not CustomSaveProperty3D(item, properties:COLOR, json)
                Color color = light:GetColor()
                json:Add(properties:COLOR, NewJsonArray(color:GetRed(), color:GetGreen(), color:GetBlue(), color:GetAlpha()))
            end
            if not CustomSaveProperty3D(item, properties:INTENSITY, json)
                json:Add(properties:INTENSITY, light:GetIntensity())
            end
        end

        boolean physicsEnabled = item:IsPhysicsEnabled()
        if not CustomSaveProperty3D(item, properties:PHYSICS_ENABLED, json)
            json:Add(properties:PHYSICS_ENABLED, physicsEnabled)
        end
        if (not CustomSaveProperty3D(item, properties:RESPONSIVENESS, json)) and physicsEnabled
            json:Add(properties:RESPONSIVENESS, item:GetResponsiveness())
        end

        return json
    end

    /*
    This function can be overridden to make custom modifications to the JSON for a particular
    property type. This should return true if a custom modification was made, or false otherwise.
    */
    private action CustomSaveProperty3D(Item3D item, text key, JavaScriptObjectNotation json) returns boolean
        return false
    end

    private action SaveLights(Layer3D layer) returns JavaScriptObjectNotation
        SceneProperties properties
        JavaScriptObjectNotation json

        integer i = 0

        AmbientLight ambience = layer:GetAmbientLight()
        if ambience not= undefined
            JavaScriptObjectNotation ambientJson
            ambientJson:Add(properties:CLASS, "AmbientLight")

            Color color = ambience:GetColor()
            ambientJson:Add(properties:COLOR, NewJsonArray(color:GetRed(), color:GetGreen(), color:GetBlue(), color:GetAlpha()))

            json:Add("" + i, ambientJson)
            i = i + 1
        end

        Iterator<DirectionalLight> lights = layer:GetDirectionalLights()
        repeat while lights:HasNext()
            DirectionalLight light = lights:Next()
            JavaScriptObjectNotation currentJson
            currentJson:Add(properties:CLASS, "DirectionalLight")

            Color color = light:GetColor()
            currentJson:Add(properties:COLOR, NewJsonArray(color:GetRed(), color:GetGreen(), color:GetBlue(), color:GetAlpha()))

            Vector3 direction = light:GetDirection()
            currentJson:Add(properties:DIRECTION, NewJsonArray(direction:GetX(), direction:GetY(), direction:GetZ()))

            json:Add("" + i, currentJson)

            i = i + 1
        end

        return json
    end

    action SaveSkybox(Skybox skybox) returns JavaScriptObjectNotation
        JavaScriptObjectNotation json
        json:SetArray()
        json:Add(skybox:GetRightFile():GetPath())
        json:Add(skybox:GetLeftFile():GetPath())
        json:Add(skybox:GetTopFile():GetPath())
        json:Add(skybox:GetBottomFile():GetPath())
        json:Add(skybox:GetFrontFile():GetPath())
        json:Add(skybox:GetBackFile():GetPath())

        return json
    end

    private action NewJsonArray(number x, number y) returns JavaScriptObjectNotation
        JavaScriptObjectNotation json
        json:SetArray()
        json:Add(x)
        json:Add(y)
        return json
    end

    private action NewJsonArray(number x, number y, number z) returns JavaScriptObjectNotation
        JavaScriptObjectNotation json
        json:SetArray()
        json:Add(x)
        json:Add(y)
        json:Add(z)
        return json
    end

    private action NewJsonArray(number w, number x, number y, number z) returns JavaScriptObjectNotation
        JavaScriptObjectNotation json
        json:SetArray()
        json:Add(w)
        json:Add(x)
        json:Add(y)
        json:Add(z)
        return json
    end
end