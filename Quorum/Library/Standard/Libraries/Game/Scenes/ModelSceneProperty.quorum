package Libraries.Game.Scenes

use Libraries.Compute.Vector3
use Libraries.Compute.Matrix4
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Containers.Number32BitArray
use Libraries.Containers.Array
use Libraries.Game.Graphics.Model
use Libraries.Containers.Iterator
use Libraries.Game.Graphics.Color
use Libraries.Interface.Item3D

class ModelSceneProperty is SceneProperty
    
    Array<Model> models
    Model currentModel = undefined
    text currentType = undefined
    Number32BitArray currentSizeArray = undefined
    Number32BitArray currentScaleArray = undefined
    Number32BitArray currentPositionArray = undefined
    Number32BitArray currentColorArray = undefined
    Number32BitArray currentTransformArray = undefined

    SceneProperties properties

    boolean currentEnablePhysics = false
    text currentResponsiveness = properties:RESPONSIVE

    action GetModels returns Array<Model>
        return models
    end

    private action ProcessModelKey(text key, JavaScriptObjectNotation notation)
        if key = properties:TYPE
            currentType = notation:GetValue(properties:TYPE)
            JavaScriptObjectNotation jsonType
            jsonType:SetKey(properties:TYPE)
            jsonType:SetText(currentType)
            currentModel:SetProperty(properties:TYPE, jsonType)
        elseif key = properties:NAME
            text name = notation:GetValue(properties:NAME)
            currentModel:SetName(name)
        elseif key = properties:DESCRIPTION
            text description = notation:GetValue(properties:DESCRIPTION)
            currentModel:SetDescription(description)
        elseif key = properties:SIZE
            JavaScriptObjectNotation size = notation:GetObject(properties:SIZE)
            currentSizeArray = ConvertToNumber32BitArray(size)
        elseif key = properties:SCALE
            JavaScriptObjectNotation scale = notation:GetObject(properties:SCALE)
            currentScaleArray = ConvertToNumber32BitArray(scale)
        elseif key = properties:POSITION
            JavaScriptObjectNotation location = notation:GetObject(properties:POSITION)
            currentPositionArray = ConvertToNumber32BitArray(location)
        elseif key = properties:COLOR
            JavaScriptObjectNotation color = notation:GetObject(properties:COLOR)
            currentColorArray = ConvertToNumber32BitArray(color)
            currentModel:SetProperty(properties:COLOR, color)
        elseif key = properties:PHYSICS_ENABLED
            currentEnablePhysics = notation:GetBoolean(properties:PHYSICS_ENABLED)
        elseif key = properties:RESPONSIVENESS
            currentResponsiveness = notation:GetValue(properties:RESPONSIVENESS)
        elseif key = properties:TRANSFORM
            JavaScriptObjectNotation transform = notation:GetObject(properties:TRANSFORM)
            currentTransformArray = ConvertToNumber32BitArray(transform)
        end
    end

    action LoadModel(JavaScriptObjectNotation notation)
        Array<text> keys = notation:GetKeys()
        Model model
        me:currentModel = model
        i = 0
        repeat while i < keys:GetSize()
            text key = keys:Get(i)
            ProcessModelKey(key, notation)
            i = i + 1
        end
        models:Add(me:currentModel)
        LoadCurrentModelIntoMemory()

        me:currentModel = undefined
        currentType = undefined
        currentSizeArray = undefined
        currentScaleArray = undefined
        currentPositionArray = undefined
        currentColorArray = undefined
        currentTransformArray = undefined
        currentEnablePhysics = false
        currentResponsiveness = properties:RESPONSIVE
    end

    private action LoadCurrentModelIntoMemory
        Color loadedColor
        loadedColor:SetColor(currentColorArray:Get(0), currentColorArray:Get(1), currentColorArray:Get(2), currentColorArray:Get(3))
        
        if currentType = properties:TYPE
            currentModel:LoadBox(currentSizeArray:Get(0), currentSizeArray:Get(1), currentSizeArray:Get(2), loadedColor)
        elseif currentType = properties:SPHERE
            currentModel:LoadSphere(currentSizeArray:Get(0), currentSizeArray:Get(1), currentSizeArray:Get(2), loadedColor)
        elseif currentType = properties:CYLINDER
            currentModel:LoadCylinder(currentSizeArray:Get(0), currentSizeArray:Get(1), currentSizeArray:Get(2), loadedColor)
        elseif currentType = properties:PLANE
            currentModel:LoadPlane(currentSizeArray:Get(0), currentSizeArray:Get(2), loadedColor)
        end

        currentModel:SetPosition(currentPositionArray:Get(0), currentPositionArray:Get(1), currentPositionArray:Get(2))

        boolean useTransform = false

        if currentTransformArray not= undefined
            useTransform = true
            Matrix4 transform = currentModel:GetTransform()
            transform:row0column0 = currentTransformArray:Get(0)
            transform:row0column1 = currentTransformArray:Get(1)
            transform:row0column2 = currentTransformArray:Get(2)
            transform:row0column3 = currentTransformArray:Get(3)
            transform:row1column0 = currentTransformArray:Get(4)
            transform:row1column1 = currentTransformArray:Get(5)
            transform:row1column2 = currentTransformArray:Get(6)
            transform:row1column3 = currentTransformArray:Get(7)
            transform:row2column0 = currentTransformArray:Get(8)
            transform:row2column1 = currentTransformArray:Get(9)
            transform:row2column2 = currentTransformArray:Get(10)
            transform:row2column3 = currentTransformArray:Get(11)
            transform:row3column0 = currentTransformArray:Get(12)
            transform:row3column1 = currentTransformArray:Get(13)
            transform:row3column2 = currentTransformArray:Get(14)
            transform:row3column3 = currentTransformArray:Get(15)
        end

        if currentScaleArray not= undefined
            if useTransform = false
                currentModel:Scale(currentScaleArray:Get(0), currentScaleArray:Get(1), currentScaleArray:Get(2))
            end

            JavaScriptObjectNotation json
            json:SetArray()
            json:Add(currentScaleArray:Get(0))
            json:Add(currentScaleArray:Get(1))
            json:Add(currentScaleArray:Get(2))
            currentModel:SetProperty(properties:SCALE, json)
        end

        if currentEnablePhysics
            currentModel:EnablePhysics(currentEnablePhysics)
            if currentResponsiveness = properties:RESPONSIVE
                currentModel:SetResponsive()
            elseif currentResponsiveness = properties:NONRESPONSIVE
                currentModel:SetNonResponsive()
            else
                currentModel:SetUnmovable()
            end
        end
    end

    action LoadModels(JavaScriptObjectNotation notation)
        Iterator<JavaScriptObjectNotation> iterator = notation:GetIterator()
        repeat while iterator:HasNext()
            JavaScriptObjectNotation model = iterator:Next()
            LoadModel(model)
        end
    end

    action ConvertItem3D(Item3D item) returns JavaScriptObjectNotation
        JavaScriptObjectNotation notation
        
        notation:Add(properties:NAME, item:GetName())
        notation:Add(properties:DESCRIPTION, item:GetDescription())

        JavaScriptObjectNotation location
        Vector3 position = item:GetPosition()
        location:SetArray()
        location:Add(position:GetX())
        location:Add(position:GetY())
        location:Add(position:GetZ())
        notation:Add(properties:POSITION, location)

        JavaScriptObjectNotation size
        size:SetArray()
        size:Add(item:GetWidth())
        size:Add(item:GetHeight())
        size:Add(item:GetDepth())
        notation:Add(properties:SIZE, size)

        JavaScriptObjectNotation transform
        Matrix4 matrix = item:GetTransform()
        transform:SetArray()
        transform:Add(matrix:row0column0)
        transform:Add(matrix:row0column1)
        transform:Add(matrix:row0column2)
        transform:Add(matrix:row0column3)
        transform:Add(matrix:row1column0)
        transform:Add(matrix:row1column1)
        transform:Add(matrix:row1column2)
        transform:Add(matrix:row1column3)
        transform:Add(matrix:row2column0)
        transform:Add(matrix:row2column1)
        transform:Add(matrix:row2column2)
        transform:Add(matrix:row2column3)
        transform:Add(matrix:row3column0)
        transform:Add(matrix:row3column1)
        transform:Add(matrix:row3column2)
        transform:Add(matrix:row3column3)
        notation:Add(properties:TRANSFORM, transform)

        //temporary hack
        if item:HasProperties()
            Iterator<text> iterator = item:GetPropertyKeyIterator()
            repeat while iterator:HasNext()
                text key = iterator:Next()
                JavaScriptObjectNotation value = item:GetProperty(key)
                notation:Add(value)
            end
        end

        return notation
    end
end