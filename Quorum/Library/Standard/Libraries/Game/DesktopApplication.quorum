package Libraries.Game

use Libraries.Containers.Array
use Libraries.System.DateTime
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Game.Graphics.Painter2D
use Libraries.Interface.Accessibility
use Libraries.Interface.AccessibilityManager
use Libraries.Interface.Accessibility.MacAccessibility
use Libraries.System.Properties

/*
This is an internal class used by the Game class to manage several resources
that must be unique. It is responsible for initial set up, execution of the
main loop, and exiting a game. Most users will never use this class directly.

This particular implementation of Application is meant for use on Desktops.
*/
class DesktopApplication is Application
    DesktopConfiguration configuration
    /*
    The Setup action is used for initial set up of the Game's resources, and
    will begin the game's main loop. This is automatically used by the Game
    class via the Game:StartGame() action.
    */
    action Setup(Game game)
        
        parent:Application:Setup(game)

        game:InitializeLayers()
        Properties properties
        GameStateManager manager
        if properties:IsWindows() and game:GetDesktopConfiguration():enableAccessibility
            AccessibilityManager accessibility
            game:SetAccessibility(accessibility)
        elseif properties:IsMac() and game:GetDesktopConfiguration():enableAccessibility
            //turned off for 9.0, as it is blank. Should be enabled again
            //once the implementation is complete.
            MacAccessibility mac
            game:SetAccessibility(mac)
        end

        MainLoop()
        
    end 
     
    private action MainLoop

        DesktopDisplay display = cast(DesktopDisplay, parent:Application:display)

        parent:Application:glmanager:SetClearScreenColor(0.85, 0.85, 0.85, 1.0)

        output "A1"
        parent:Application:game:CreateGame()
        output "A2"

        GameStateManager manager
        if manager:GetOperatingSystem():Contains("Windows 10")
            display:FirstTimeShowWindow()
        end
        
        display:SetResize(true)

        integer lastWidth = display:GetWidth()
        integer lastHeight = display:GetHeight()
        
        display:SetLastTime()

        
        boolean wasActive = true

        //The actual workhorse loop.
        repeat until parent:Application:running = false

            boolean isActive = display:IsActive()

            if wasActive and not isActive
                wasActive = false
            end

            if not wasActive and isActive
                wasActive = true
            end

            boolean shouldRender = false

            configuration = cast(DesktopConfiguration, display:GetConfiguration())

            configuration:x = display:GetDisplayX()
            configuration:y = display:GetDisplayY()

            boolean shouldrender = false
            if display:GetResize() or display:WasResized() or (display:GetWidth() not= configuration:width) or (display:GetHeight() not= configuration:height)
                display:SetResize(false)

                if configuration:autoResizeTextures
                    number scale = display:GetPixelScaleFactor()
//                    parent:Application:glmanager:SetDrawingRegion(0, 0, display:GetWidth(), display:GetHeight())
                end

                display:RequestRendering()

                configuration:width = display:GetWidth()
                configuration:height = display:GetHeight()

                display:SetConfiguration(configuration)

                shouldrender = false
            else
                shouldrender = true
            end

            if(shouldrender)
               display:UpdateTime()
               parent:Application:game:ContinueGame()
               display:Update()
            end

            display:SetConfiguration(configuration)

            if display:IsCloseRequested() or parent:Application:game:exitRequested
                Exit()
            end

        end 
       
        display:Destroy()
       
        Accessibility accessibility = manager:GetAccessibility()
        if accessibility not= undefined
            accessibility:Shutdown()
        end
    end

    /*
    This action tells the game to close at the end of the next iteration of
    the MainLoop. It is called automatically by the Game class's Exit action.
    Exit can be aborted if the Game's OnExit() action returns false.
    */
    action Exit()
        parent:Application:running = (not parent:Application:game:OnExit())
    end

end