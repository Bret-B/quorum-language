package Libraries.Game.Graphics

use Libraries.Compute.BitwiseOperations
use Libraries.Game.NumberUtilities

/*
    The Color class stores information about a color used by the game engine.
    Colors are stored as a combination of red, green, blue, and alpha (or
    opacity). All four values may be set from 0 to 1, where 0 represents the
    total lack of a color or full transparency, and 1 represents full presence
    of that color or total opacity.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle1
            Drawable rectangle2
            Drawable rectangle3

            Color blue
            Color yellow
            Color glassy

            action Main
                StartGame()
            end

            action CreateGame
                blue:SetColor(0, 0, 1, 1)
                rectangle1:LoadFilledRectangle(100, 50, blue)

                yellow:SetColor(1, 1, 0, 1)
                rectangle2:LoadFilledRectangle(100, 50, yellow)

                glassy:SetColor(1, 1, 1, 0.25)
                rectangle3:LoadFilledRectangle(100, 50, glassy)

                rectangle1:SetPosition(50, 50)
                rectangle2:SetPosition(200, 50)
                rectangle3:SetPosition(125, 65)
               
                Add(rectangle1)
                Add(rectangle2)
                Add(rectangle3)
            end
        end
*/
class Color is ColorGroup
  
    /* The RGBA components of the Color class */
    private number red = 0
    private number green = 0
    private number blue = 0 
    private number alpha = 0

    BitwiseOperations ops
    NumberUtilities utility

    /*
    This action sets a color by setting its red, green, blue, and alpha values,
    where 0 represents a total absence of that component and 1 represents a full
    presence of it. Alpha is the opacity of a color, where 0 represents total
    transparency and 1 represents total opacity.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color orange

            action Main
                StartGame()
            end

            action CreateGame
                orange:SetColor(1, 0.7, 0, 1)
                rectangle:LoadFilledRectangle(100, 50, orange)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    action SetColor(number redValue, number greenValue, number blueValue, number alphaValue)

        red = redValue
        green = greenValue
        blue = blueValue
        alpha = alphaValue

        Clamp()

    end

    /*
    This action is used internally by the game engine to set a color using an
    integer value representing a color. Most users will never need to use this
    action directly.
    */
    action SetColorFromCode(integer code)
        /*
        The constants used in this action have these binary values:
        255:        00000000000000000000000011111111
        65280:      00000000000000001111111100000000
        16711680:   00000000111111110000000000000000
        -16777216:  11111111000000000000000000000000
        */
        alpha = ops:And(code, 255) / 255.0
        blue = ops:And(code, 65280) / 255.0
        green = ops:And(code, 16711680) / 255.0
        red = ops:And(code, -16777216) / 255.0
    end

    /*
    This action sets the red component of this color. The value passed should be
    between 0 and 1, where 0 represents a total lack of red, and 1 represents
    a full presence of red.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color red

            action Main
                StartGame()
            end

            action CreateGame
                red:SetRed(1)
                red:SetAlpha(1)
                rectangle:LoadFilledRectangle(100, 50, red)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action SetRed(number rVal)
      red = rVal
    end

    /*
    This action sets the green component of this color. The value passed should 
    be between 0 and 1, where 0 represents a total lack of green, and 1 
    represents a full presence of green.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color green

            action Main
                StartGame()
            end

            action CreateGame
                green:SetGreen(1)
                green:SetAlpha(1)
                rectangle:LoadFilledRectangle(100, 50, green)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action SetGreen(number gVal)
      green = gVal
    end

    /*
    This action sets the blue component of this color. The value passed should 
    be between 0 and 1, where 0 represents a total lack of blue, and 1 
    represents a full presence of blue.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color blue

            action Main
                StartGame()
            end

            action CreateGame
                blue:SetBlue(1)
                blue:SetAlpha(1)
                rectangle:LoadFilledRectangle(100, 50, blue)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action SetBlue(number bVal)
      blue = bVal
    end

    /*
    This action sets the alpha component of this color. The value passed should 
    be between 0 and 1, where 0 represents total transparency, and 1 represents
    total opacity.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color black

            action Main
                StartGame()
            end

            action CreateGame
                black:SetAlpha(1)
                rectangle:LoadFilledRectangle(100, 50, black)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action SetAlpha(number aVal)
      alpha = aVal
    end

    /*
    This action returns the red component of this color.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color:SetColor(0.5, 0.7, 0.9, 1)
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
                output "The red value is " + color:GetRed()
            end
        end
    */
    public action GetRed() returns number
      return red
    end

    /*
    This action returns the green component of this color.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color:SetColor(0.5, 0.7, 0.9, 1)
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
                output "The green value is " + color:GetGreen()
            end
        end
    */
    public action GetGreen() returns number
      return green
    end

    /*
    This action returns the blue component of this color.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color:SetColor(0.5, 0.7, 0.9, 1)
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
                output "The blue value is " + color:GetBlue()
            end
        end
    */
    public action GetBlue() returns number
      return blue
    end

    /*
    This action returns the alpha component of this color.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color:SetColor(0.5, 0.7, 0.9, 1)
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
                output "The alpha value is " + color:GetAlpha()
            end
        end
    */
    public action GetAlpha() returns number
      return alpha
    end

    /*
    This action sets all color component values to be between 0 and 1.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color:SetRed(50)
                color:SetBlue(-10)
                color:SetGreen(0.5)
                color:SetAlpha(1)
                color:Clamp()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action Clamp() returns Color

      if GetRed() < 0
        SetRed(0)
      elseif GetRed() > 1
        SetRed(1)
      end

      if GetGreen() < 0
        SetGreen(0)
      elseif GetGreen() > 1
        SetGreen(1)
      end

      if GetBlue() < 0
        SetBlue(0)
      elseif GetBlue() > 1
        SetBlue(1)
      end

      if GetAlpha() < 0
        SetAlpha(0)
      elseif GetAlpha() > 1
        SetAlpha(1)
      end

      return me

    end

    /*
    This action returns a new Color object that is clear.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:Clear()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action Clear returns Color
      Color c
      c:SetRed(0)
      c:SetGreen(0)
      c:SetBlue(0)
      c:SetAlpha(0)

      return c
    end

    /*
    This action returns a new Color object that is white.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:White()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action White returns Color
      Color c
      c:SetRed(1)
      c:SetGreen(1)
      c:SetBlue(1)
      c:SetAlpha(1)

      return c
     end

     /*
    This action returns a new Color object that is black.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:Black()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action Black returns Color
      Color c
      c:SetRed(0)
      c:SetGreen(0)
      c:SetBlue(0)
      c:SetAlpha(1)

      return c
    end

    /*
    This action returns a new Color object that is red.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:Red()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action Red returns Color
      Color c
      c:SetRed(1)
      c:SetGreen(0)
      c:SetBlue(0)
      c:SetAlpha(1)

      return c
    end

    /*
    This action returns a new Color object that is green.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:Green()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action Green returns Color
      Color c
      c:SetRed(0)
      c:SetGreen(1)
      c:SetBlue(0)
      c:SetAlpha(1)

      return c
    end

    /*
    This action returns a new Color object that is blue.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:Blue()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action Blue returns Color
      Color c
      c:SetRed(0)
      c:SetGreen(0)
      c:SetBlue(1)
      c:SetAlpha(1)

      return c
    end

    /*
    This action returns a new Color object that is light gray.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:LightGray()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action LightGray returns Color
      Color c
      c:SetRed(0.75)
      c:SetGreen(0.75)
      c:SetBlue(0.75)
      c:SetAlpha(1)

      return c
    end

    /*
    This action returns a new Color object that is gray.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:Gray()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action Gray returns Color
      Color c
      c:SetRed(0.5)
      c:SetGreen(0.5)
      c:SetBlue(0.5)
      c:SetAlpha(1)

      return c
    end

    /*
    This action returns a new Color object that is dark gray.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:DarkGray()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action DarkGray returns Color
      Color c
      c:SetRed(0.25)
      c:SetGreen(0.25)
      c:SetBlue(0.25)
      c:SetAlpha(1)

      return c
    end

    /*
    This action returns a new Color object that is pink.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:Pink()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action Pink returns Color
      Color c
      c:SetRed(1)
      c:SetGreen(0.68)
      c:SetBlue(0.68)
      c:SetAlpha(1)

      return c
    end

    /*
    This action returns a new Color object that is orange.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:Orange()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action Orange returns Color
      Color c
      c:SetRed(1)
      c:SetGreen(0.78)
      c:SetBlue(0)
      c:SetAlpha(1)

      return c
    end

    /*
    This action returns a new Color object that is yellow.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:Yellow()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action Yellow returns Color
      Color c
      c:SetRed(1)
      c:SetGreen(1)
      c:SetBlue(0)
      c:SetAlpha(1)

      return c
    end

    /*
    This action returns a new Color object that is magenta.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:Magenta()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action Magenta returns Color
      Color c
      c:SetRed(1)
      c:SetGreen(0)
      c:SetBlue(1)
      c:SetAlpha(1)

      return c
    end

    /*
    This action returns a new Color object that is cyan.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:Cyan()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action Cyan returns Color
      Color c
      c:SetRed(0)
      c:SetGreen(1)
      c:SetBlue(1)
      c:SetAlpha(1)

      return c
    end

    /*
    This action returns a new Color object that is olive.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:Olive()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action Olive returns Color
      Color c
      c:SetRed(0.5)
      c:SetGreen(0.5)
      c:SetBlue(0)
      c:SetAlpha(1)

      return c
    end

    /*
    This action returns a new Color object that is purple.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:Purple()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action Purple returns Color
      Color c
      c:SetRed(0.5)
      c:SetGreen(0)
      c:SetBlue(0.5)
      c:SetAlpha(1)

      return c
    end

    /*
    This action returns a new Color object that is maroon.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:Maroon()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action Maroon returns Color
      Color c
      c:SetRed(0.5)
      c:SetGreen(0)
      c:SetBlue(0)
      c:SetAlpha(1)

      return c
    end

    /*
    This action returns a new Color object that is teal.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:Teal()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action Teal returns Color
      Color c
      c:SetRed(0)
      c:SetGreen(0.5)
      c:SetBlue(0.5)
      c:SetAlpha(1)

      return c
    end

    /*
    This action returns a new Color object that is navy.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                color = color:Navy()
                rectangle:LoadFilledRectangle(100, 50, color)
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    public action Navy returns Color
      Color c
      c:SetRed(0)
      c:SetGreen(0)
      c:SetBlue(0.5)
      c:SetAlpha(1)

      return c
    end

    /*
        This action returns a new color that is a copy of this color.

        Attribute: Example

            use Libraries.Game.Graphics.Color
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                Color original
                Color copy

                action Main is Game
                    StartGame()
                end

                action CreateGame
                    original = original:Navy()
                    copy = original:Copy()
                end
            end
    */
    public action Copy returns Color
        // The way this copy action works is inconsistent with the other copy actions.
        // Consider removing it. Alternative implementation is just below.
        // Example:
        // Color a
        // a = a:Navy()
        // Color b
        // b = a:Copy()
          Color c
          c:SetRed(me:GetRed())
          c:SetBlue(me:GetBlue())
          c:SetGreen(me:GetGreen())
          c:SetAlpha(me:GetAlpha())
          return c
    end

    /*
        This action sets this color to be identical to the given color parameter.

        Attribute: Example

            use Libraries.Game.Graphics.Color
            use Libraries.Game.Graphics.Drawable
            use Libraries.Game.Game

            class Main is Game
                
                Color original
                Color copy

                action Main is Game
                    StartGame()
                end

                action CreateGame
                    original = original:Navy()
                    copy:CopyColor(original)
                end
            end
    */
    action CopyColor(Color copyColor)
        // Example:
        // Color a
        // a = a:Navy()
        // Color b
        // b:Copy(a)
        SetRed(copyColor:GetRed())
        SetBlue(copyColor:GetBlue())
        SetGreen(copyColor:GetGreen())
        SetAlpha(copyColor:GetAlpha())
    end

    /* This action will return the color as an integer in the RGBA8888 format, or
    in other words, in the 32 bit integer, the highest 8 bits represent the red,
    the next 8 represent the green, the next 8 represent the blue, and the final
    8 represent the alpha (which is usually transparency). This is used primarily
    for internal use, and most users will never need to use this action directly. */
    action GetColorCode returns integer

      integer redValue = cast(integer, GetRed() * 255)
      integer greenValue = cast(integer, GetGreen() * 255)
      integer blueValue = cast(integer, GetBlue() * 255)
      integer alphaValue = cast(integer, GetAlpha() * 255)

      redValue = ops:ShiftLeft(redValue, 24)
      greenValue = ops:ShiftLeft(greenValue, 16)
      blueValue = ops:ShiftLeft(blueValue, 8)

      return ops:Or(ops:Or(redValue, greenValue), ops:Or(blueValue, alphaValue))

    end

    /*
    This action encodes this color as a number. This is used primarily for
    internal use, and most users will never need to use this action directly.
    */
    action EncodeColorAsNumber returns number
        
        integer a = ops:ShiftLeft(cast(integer, alpha * 255), 24)
        integer b = ops:ShiftLeft(cast(integer, blue * 255), 16)
        integer g = ops:ShiftLeft(cast(integer, green * 255), 8)
        integer r = cast(integer, red * 255)

        integer result = ops:Or(ops:Or(a, b), ops:Or(g, r))

        return utility:EncodeColorIntegerAsNumber(result)

    end

    /*
    This action returns a new color with the given red, green, blue, and alpha
    values, where 0 represents a total absence of that component and 1 
    represents a full presence of it. Alpha is the opacity of a color, where 0 
    represents total transparency and 1 represents total opacity.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                rectangle:LoadFilledRectangle(100, 50, color:CustomColor(1, 0.7, 0, 1))
                rectangle:SetPosition(50, 50)
                Add(rectangle)
            end
        end
    */
    action CustomColor(number red, number green, number blue, number alpha) returns Color
        Color color
        color:SetColor(red, green, blue, alpha)
        return color
    end

    /*
    This action will perform linear interpolation between this Color and the
    provided target Color using the given interpolation coefficient, which can
    be between 0 and 1 (inclusive). The Color that called this action will
    be changed to reflect the results of the linear interpolation.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color
            Color targetColor

            action Main
                StartGame()
            end

            action CreateGame
                rectangle:LoadFilledRectangle(100, 50, color:White())
                rectangle:SetPosition(50, 50)
                Add(rectangle)

                color:SetColor(1, 1, 1, 1)
                targetColor:SetColor(1, 0, 0, 1)
            end

            action Update(number seconds)
                color:LinearInterpolation(targetColor, 0.5 * seconds)
                rectangle:SetColor(color)
            end
        end
    */
    action LinearInterpolation(Color targetColor, number coefficient)
        red = red + coefficient * (targetColor:GetRed() - red)
        green = green + coefficient * (targetColor:GetGreen() - green)
        blue = blue + coefficient * (targetColor:GetBlue() - blue)
        alpha = alpha + coefficient * (targetColor:GetAlpha() - alpha)
        Clamp()
    end

    /*
    This action will perform linear interpolation between this Color and the
    provided red, green, blue, and alpha color values using the given 
    interpolation coefficient, which can be between 0 and 1 (inclusive). The 
    Color that called this action will be changed to reflect the results of the 
    linear interpolation.

    Attribute: Example

        use Libraries.Game.Graphics.Drawable
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            Drawable rectangle

            Color color

            action Main
                StartGame()
            end

            action CreateGame
                rectangle:LoadFilledRectangle(100, 50, color:White())
                rectangle:SetPosition(50, 50)
                Add(rectangle)

                color:SetColor(1, 1, 1, 1)
            end

            action Update(number seconds)
                color:LinearInterpolation(1, 0, 0, 1, 0.5 * seconds)
                rectangle:SetColor(color)
            end
        end
    */
    action LinearInterpolation(number r, number g, number b, number a, number coefficient)
        red = red + coefficient * (r - red)
        green = green + coefficient * (g - green)
        blue = blue + coefficient * (b - blue)
        alpha = alpha + coefficient * (a - alpha)
        Clamp()
    end

    /*
    This action returns what color is applied to the top left corner of an 
    object which is using this Color. Note that for a Color object, the returned
    value is the same Color object from which the action was called, and all
    four corner actions (GetTopLeft(), GetTopRight(), GetBottomLeft(), and
    GetBottomRight()) return the same value.

    Attribute: Returns The Color object that the action was called from.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Gradient

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            color = color:Orange()
            
            Color corner = gradient:GetTopLeft()
            output "The color's values are: " + corner:GetRed() + ", " + corner:GetBlue() + ", " + corner:GetGreen() + ", " + corner:GetAlpha()
        end

    end
    */
    action GetTopLeft returns Color
        return me
    end

    /*
    This action returns what color is applied to the bottom left corner of an 
    object which is using this Color. Note that for a Color object, the returned
    value is the same Color object from which the action was called, and all
    four corner actions (GetTopLeft(), GetTopRight(), GetBottomLeft(), and
    GetBottomRight()) return the same value.

    Attribute: Returns The Color object that the action was called from.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Gradient

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            color = color:Orange()
            
            Color corner = gradient:GetBottomLeft()
            output "The color's values are: " + corner:GetRed() + ", " + corner:GetBlue() + ", " + corner:GetGreen() + ", " + corner:GetAlpha()
        end

    end
    */
    action GetBottomLeft returns Color
        return me
    end

    /*
    This action returns what color is applied to the top right corner of an 
    object which is using this Color. Note that for a Color object, the returned
    value is the same Color object from which the action was called, and all
    four corner actions (GetTopLeft(), GetTopRight(), GetBottomLeft(), and
    GetBottomRight()) return the same value.

    Attribute: Returns The Color object that the action was called from.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Gradient

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            color = color:Orange()
            
            Color corner = gradient:GetTopRight()
            output "The color's values are: " + corner:GetRed() + ", " + corner:GetBlue() + ", " + corner:GetGreen() + ", " + corner:GetAlpha()
        end

    end
    */
    action GetTopRight returns Color
        return me
    end

    /*
    This action returns what color is applied to the bottom right corner of an 
    object which is using this Color. Note that for a Color object, the returned
    value is the same Color object from which the action was called, and all
    four corner actions (GetTopLeft(), GetTopRight(), GetBottomLeft(), and
    GetBottomRight()) return the same value.

    Attribute: Returns The Color object that the action was called from.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Gradient

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            color = color:Orange()
            
            Color corner = gradient:GetTopLeft()
            output "The color's values are: " + corner:GetRed() + ", " + corner:GetBlue() + ", " + corner:GetGreen() + ", " + corner:GetAlpha()
        end

    end
    */
    action GetBottomRight returns Color
        return me
    end

    /*
    This action sets the color using a hexadecimal string. The hexadecimal string must be 6 or 8 hex characters long,
    and can optionally be preceded by a pound symbol ("#"). From left to right, the color will use each set of 2 hex
    characters to set the red, green, blue, and alpha components, in that order. If there are only 6 characters, the
    alpha will be set to 1.0 (fully opaque).

    Attribute: Parameter hexValue 6 or 8 hexadecimal characters, which can optionally have a "#" at the front
    Attribute: Example
    
    use Libraries.Game.Game
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Color
    
    class Main is Game
    
        action CreateGame
            // This hex value represents full red, no green, and full blue.
            text hexValue1 = "FF00FF"
    
            // This hex value represents no red, full green, and some blue. The alpha value is set to roughly half-transparency.
            // Note that the text isn't case sensitive, so lowercase "f" and uppercase "F" are the same thing.
            text hexValue2 = "#00ff4588"
    
            // Loading our hex values into a pair of colors.
            Color color1
            color1:SetHexColor(hexValue1)
            Color color2
            color2:SetHexColor(hexValue2)
    
            // Loading drawables using our new colors, as an example of what the loaded colors look like.
            Drawable box1
            box1:LoadFilledRectangle(100, 100, color1)
            Add(box1)
        
            Drawable box2
            box2:LoadFilledRectangle(100, 100, color2)
            box2:SetPosition(50, 50)
            Add(box2)
        end
    
        action Main
            StartGame()
        end
    
    end
    */
    action SetHexColor(text hexValue)
        integer index = 0
        // Skip the pound symbol (or "octothorpe" if you're feeling really fancy), if it's present.
        if hexValue:GetCharacter(0) = "#"
            index = index + 1
        end

        /*
        If there's 6 hex characters, set the RGB components, and assume the alpha is 1.0 (fully opaque).
        If there's 8 hex characters, set all of the RGBA components.
        If there's any other amount of characters, it's an error.
        */
        if (hexValue:GetSize() - index) = 6
            SetColor(HexToNumber(hexValue:GetSubtext(index, index + 2)), HexToNumber(hexValue:GetSubtext(index + 2, index + 4)), HexToNumber(hexValue:GetSubtext(index + 4, index + 6)), 1.0)
        elseif (hexValue:GetSize() - index) = 8
            SetColor(HexToNumber(hexValue:GetSubtext(index, index + 2)), HexToNumber(hexValue:GetSubtext(index + 2, index + 4)), HexToNumber(hexValue:GetSubtext(index + 4, index + 6)), HexToNumber(hexValue:GetSubtext(index + 6, index + 8)))
        else
            alert("I couldn't set the color from the hex value '" + hexValue + "' because it's the wrong length. There must be exactly 6 or 8 hex characters.")
        end
    end

    // Converts hex characters into a decimal integer.
    private action HexToInteger(text hex) returns integer
        integer i = 0
        integer result = 0

        text sample = "09AFaf"

        repeat until i >= hex:GetSize()
            result = ops:ShiftLeft(result, 4)

            integer value = 0
            integer unicode = hex:GetUnicodeInteger(i)
            if unicode >= sample:GetUnicodeInteger(0) and unicode <= sample:GetUnicodeInteger(1)
                value = unicode - sample:GetUnicodeInteger(0)
            elseif unicode >= sample:GetUnicodeInteger(2) and unicode <= sample:GetUnicodeInteger(3)
                value = 10 + (unicode - sample:GetUnicodeInteger(2))
            elseif unicode >= sample:GetUnicodeInteger(4) and unicode <= sample:GetUnicodeInteger(5)
                value = 10 + (unicode - sample:GetUnicodeInteger(4))
            else
                alert("I could not convert the text '" + hex + "' because '" + hex:GetCharacter(i) + "' isn't a valid hexadecimal character.")
            end

            result = ops:Or(result, value)
            i = i + 1
        end

        return result
    end

    // Converts exactly two hex characters into a number between 0 and 1.
    private action HexToNumber(text hex) returns number
        return HexToInteger(hex) / 255.0
    end

    /*
    This action returns a 6-character hexadecimal string representing this color.
    The color is made of red, green, and blue components, each of which is represented
    by two hex characters (in that order). This does not include any information on the
    alpha component.

    This is useful for formats that do not uniformly support alpha values for hex color codes,
    such as SVGs. If you need a hex string that does include alpha information, use
    "GetHexColorWithAlpha()" instead.

    Attribute: Returns A 6-character hex string representing the RGB components of this color.
    Attribute: Example
    use Libraries.Game.Graphics.Color

    Color color
    Color red = color:Red()
    
    // This will output "FF0000", representing full red and no green or blue
    output red:GetHexColorWithoutAlpha()
    */
    action GetHexColorWithoutAlpha returns text
        integer red = cast(integer, me:red * 255)
        integer green = cast(integer, me:green * 255)
        integer blue = cast(integer, me:blue * 255)

        return IntegerToHex(red) + IntegerToHex(green) + IntegerToHex(blue)
    end

    /*
    This action returns a 8-character hexadecimal string representing this color.
    The color is made of red, green, blue, and alpha components, each of which is represented
    by two hex characters (in that order). 

    Some formats  do not uniformly support alpha values for hex color codes, such as SVGs. 
    If you need a hex string that does not include alpha information, use "GetHexColorWithoutAlpha()" instead.

    Attribute: Returns A 8-character hex string representing the RGBA components of this color.
    Attribute: Example
    use Libraries.Game.Graphics.Color
    
    Color color
    color:SetColor(0.0, 1.0, 1.0, 0.70)
    
    // This will output "00FFFFB2", representing no red, full green and blue, and 70% opacity
    output color:GetHexColorWithAlpha()
    */
    action GetHexColorWithAlpha returns text
        integer red = cast(integer, me:red * 255)
        integer green = cast(integer, me:green * 255)
        integer blue = cast(integer, me:blue * 255)
        integer alpha = cast(integer, me:alpha * 255)

        return IntegerToHex(red) + IntegerToHex(green) + IntegerToHex(blue) + IntegerToHex(alpha)
    end

    // Converts an integer between 0 and 255 into exactly two hex characters.
    private action IntegerToHex(integer value) returns text
        text result = ""
        text sample = "A"
        integer digit = value / 16
        if digit >= 10
            result = result + result:GetUnicodeValue(sample:GetUnicodeInteger(0) + (digit - 10))
        else
            result = result + digit
        end

        digit = value mod 16
        if digit >= 10
            result = result + result:GetUnicodeValue(sample:GetUnicodeInteger(0) + (digit - 10))
        else
            result = result + digit
        end

        return result
    end

end