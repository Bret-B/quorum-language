package Libraries.Game.Graphics

use Libraries.Game.Graphics.ModelBlueprint
use Libraries.Game.Graphics.Material
use Libraries.Game.Graphics.Mesh
use Libraries.Game.Graphics.MeshBuilder
use Libraries.Game.Graphics.ModelData.Node
use Libraries.Game.Graphics.ModelData.NodePart
use Libraries.Game.Graphics.ModelData.MeshPart
use Libraries.Containers.Array
use Libraries.Compute.Matrix4
use Libraries.Compute.BitwiseOperations

/*
The ModelBuilder class constructs new ModelBlueprints in code. It is primarily
responsible for creating primitive shapes for use by the Model class. Most users
will likely want to use the actions in Model to load primitives, rather than
using this class directly.
*/
class ModelBuilder 
    
    /*
    The POINTS value is one of the possible primitive type values. It is used to
    indicate that each vertex of the Mesh should be considered an individual
    point, separate from the other vertices.
    */
    public constant integer POINTS = 0

    /*
    The LINES value is one of the possible primitive type values. The Mesh will
    form lines using pairs of vertices.
    */
    public constant integer LINES = 1

    /*
    The TRIANGLES value is one of the possible primitive type values. The Mesh
    will form triangles from triplets of vertices.
    */
    public constant integer TRIANGLES = 4

    // The ModelBlueprint that is currently being built.
    ModelBlueprint model = undefined

    // The Node that is currently being built.
    Node node = undefined

    // The MeshBuilder objects made during the creation of a ModelBlueprint.
    Array<MeshBuilder> builders

    // A temporary Matrix4 used for calculations.
    Matrix4 calcMatrix

    // An instance of BitwiseOperations used in actions.
    BitwiseOperations bits

    private action GetBuilder(VertexAttributes attributes) returns MeshBuilder
        integer counter = 0
        repeat builders:GetSize() times
            MeshBuilder builder = builders:Get(counter)
            if builder:GetAttributes():Equals(attributes) and builder:GetLastIndex() < counter:GetMaximumValue() / 2
                return builder
            end
            counter = counter + 1
        end

        MeshBuilder newBuilder
        newBuilder:Begin(attributes)
        builders:Add(newBuilder)
        return newBuilder
    end

    /*
    This action will convert an integer mask of attributes into a
    VertexAttributes object.
    */
    action CreateAttributes(integer mask) returns VertexAttributes
        VertexAttribute attribute
        Array<VertexAttribute> array
        if bits:And(mask, attribute:POSITION) = attribute:POSITION
            array:Add(attribute:Position())
        end

        if bits:And(mask, attribute:COLOR_UNPACKED) = attribute:COLOR_UNPACKED
            array:Add(attribute:ColorUnpacked())
        end

        if bits:And(mask, attribute:COLOR_PACKED) = attribute:COLOR_PACKED
            array:Add(attribute:ColorPacked())
        end

        if bits:And(mask, attribute:NORMAL) = attribute:NORMAL
            array:Add(attribute:Normal())
        end

        if bits:And(mask, attribute:TEXTURE_COORDINATES) = attribute:TEXTURE_COORDINATES
            array:Add(attribute:TextureCoordinates(0))
        end

        VertexAttributes attributes
        attributes:SetAttributes(array)
        return attributes
    end

    /*
    The Begin action prepares the ModelBuilder to build a new ModelBlueprint. If
    the ModelBlueprint was still in the process of building a ModelBlueprint,
    this will throw an error.
    */
    action Begin
        if model not= undefined
            alert("The ModelBuilder was told to begin building a new ModelBlueprint, but it wasn't done with the previous one!")
        end

        node = undefined
        ModelBlueprint new
        model = new
        builders:Empty()
    end

    /*
    The End action stops building the current ModelBlueprint, returning the
    ModelBlueprint.
    */
    action End returns ModelBlueprint
        if model = undefined
            alert("The ModelBuilder was told to finish building a ModelBlueprint and return it, but it wasn't building one!")
        end

        ModelBlueprint result = model
        node = undefined
        model = undefined

        integer counter = 0
        repeat builders:GetSize() times
            builders:Get(counter):End()
            counter = counter + 1
        end

        //RebuildReferences(result)
        return result
    end

    /*
    Adds the Node to the ModelBlueprint and sets it to be active for building. 
    Use any of the AddPart(...) methods to add a NodePart.
    */
    private action AddNode(Node newNode) returns Node
        if model = undefined
            alert("The ModelBuilder was instructed to add a Node to the ModelBlueprint being built, but it wasn't building a ModelBlueprint!")
        end

        model:nodes:Add(newNode)
        node = newNode

        return node
    end

    /*
    This action will add a new Node to the ModelBlueprint. Use any of the 
    AddPart(...) methods to add a NodePart.
    */
    action AddNode returns Node
        Node newNode
        AddNode(newNode)
        newNode:id = "node" + model:nodes:GetSize()
        return newNode
    end

    /*
    The AddPart action will add the given MeshPart to the current Node that is
    being added to the ModelBlueprint under construction. 
    */
    action AddPart(MeshPart meshPart, Material material)
        if node = undefined
            AddNode()
        end

        NodePart nodePart
        nodePart:meshPart = meshPart
        nodePart:material = material

        node:parts:Add(nodePart)
    end

    /*
    This action will add a MeshPart to the current Node that is being added to
    the ModelBlueprint under construction.
    */
    action AddPart(text id, Mesh mesh, integer primitiveType, integer offset, integer size, Material material) returns MeshPart
        MeshPart meshPart
        meshPart:id = id
        meshPart:primitiveType = primitiveType
        meshPart:mesh = mesh
        meshPart:indexOffset = offset
        meshPart:verticesCount = size
        AddPart(meshPart, material)
        return meshPart
    end

    /*
    This action will add a MeshPart to the current Node that is being added to
    the ModelBlueprint under construction.
    */
    action AddPart(text id, Mesh mesh, integer primitiveType, Material material) returns MeshPart
        return AddPart(id, mesh, primitiveType, 0, mesh:GetIndicesCount(), material)
    end

    /*
    This action will create a new MeshPart within the current Node that is being
    added to the ModelBlueprint under construction, and will return a
    MeshBuilder which can be used to build the shape of the part. Because
    MeshBuilders are reused during the construction process, only one part
    can be built at a time.
    */
    action AddPart(text id, integer primitiveType, VertexAttributes attributes, Material material) returns MeshBuilder
        MeshBuilder builder = GetBuilder(attributes)
        AddPart(builder:NewPart(id, primitiveType), material)
        return builder
    end

    /*
    This action will create a new MeshPart within the current Node that is being
    added to the ModelBlueprint under construction, and will return a
    MeshBuilder which can be used to build the shape of the part. Because
    MeshBuilders are reused during the construction process, only one part
    can be built at a time.
    */
    action AddPart(text id, integer primitiveType, integer attributes, Material material) returns MeshBuilder
        return AddPart(id, primitiveType, CreateAttributes(attributes), material)
    end

    /*
    This action will create a new ModelBlueprint with a single node containing a
    box shape. The box will be formed using the given width, height, and depth,
    and will use the given Material. The attributes mask should be the result of
    using the BitwiseOperations:Or(...) action on each of the VertexAttributes
    constant values that are to be used. The supported values are POSITION,
    COLOR, NORMAL, and TEXTURE_COORDINATES.
    */
    action CreateBox(number width, number height, number depth, Material material, integer attributesMask) returns ModelBlueprint
        return CreateBox(width, height, depth, TRIANGLES, material, attributesMask)
    end

    /*
    This action will create a new ModelBlueprint with a single node containing a
    box shape. The box will be formed using the given width, height, and depth.
    The geometry will be formed using the given primitive type, which must be
    POINTS, LINES, or TRIANGLES. The resulting ModelBlueprint will use the given
    Material. The attributes mask should be the result of using the
    BitwiseOperations:Or(...) action on each of the VertexAttributes constant
    values that are to be used. The supported values are POSITION, COLOR, 
    NORMAL, and TEXTURE_COORDINATES.
    */
    action CreateBox(number width, number height, number depth, integer primitiveType, Material material, integer attributes) returns ModelBlueprint
        Begin()
        AddPart("box", primitiveType, attributes, material):BuildBox(width, height, depth)
        return End()
    end

    /*
    This action will create a box with the given width, height, depth, and
    color. 
    */
    action CreateBox(number width, number height, number depth, Color color) returns ModelBlueprint
        Material material
        ColorAttribute colorAttribute
        colorAttribute:SetAttribute(colorAttribute:GetDiffuseValue(), color)
        material:Add(colorAttribute)

        if color:GetAlpha() < 1.0
            BlendingAttribute blend
            blend:opacity = color:GetAlpha()
            material:Add(blend)
        end

        VertexAttributes attributes
        integer mask = bits:Or(attributes:POSITION, attributes:NORMAL)
        return CreateBox(width, height, depth, TRIANGLES, material, mask)
    end

    /*
    This action will create a box with the given width, height, and depth, and
    applies the given Texture to it.
    */
    action CreateBox(number width, number height, number depth, Texture texture) returns ModelBlueprint
        Material material
        TextureAttribute textureAttribute
        TextureDescriptor descriptor

        TextureFilter minFilter
        TextureFilter magFilter
        minFilter:ConstructTextureFilter(minFilter:LINEAR)
        magFilter:ConstructTextureFilter(magFilter:LINEAR)
        TextureWrap uWrap
        TextureWrap vWrap
        uWrap:ConstructTextureWrap(uWrap:REPEAT)
        vWrap:ConstructTextureWrap(vWrap:REPEAT)
        descriptor:SetDescriptor(texture, minFilter, magFilter, uWrap, vWrap)

        textureAttribute = textureAttribute:CreateDiffuse(descriptor)
        material:Add(textureAttribute)

        VertexAttributes attributes
        integer mask = bits:Or(bits:Or(attributes:POSITION, attributes:NORMAL), attributes:TEXTURE_COORDINATES)

        return CreateBox(width, height, depth, TRIANGLES, material, mask)
    end

    /*
    This action will create a new ModelBlueprint with a single node containing a
    flat plane. The plane will be formed using the given width and depth,
    and will use the given Material. The attributes mask should be the result of
    using the BitwiseOperations:Or(...) action on each of the VertexAttributes
    constant values that are to be used. The supported values are POSITION,
    COLOR, NORMAL, and TEXTURE_COORDINATES.
    */
    action CreatePlane(number width, number depth, Material material, integer attributesMask) returns ModelBlueprint
        return CreatePlane(width, depth, TRIANGLES, material, attributesMask)
    end

    /*
    This action will create a new ModelBlueprint with a single node containing a
    flat plane. The plane will be formed using the given width and depth,
    and will use the given Material. The attributes mask should be the result of
    using the BitwiseOperations:Or(...) action on each of the VertexAttributes
    constant values that are to be used. The supported values are POSITION,
    COLOR, NORMAL, and TEXTURE_COORDINATES.
    */
    action CreatePlane(number width, number depth, Material material, integer attributesMask, boolean doubleSided) returns ModelBlueprint
        return CreatePlane(width, depth, TRIANGLES, material, attributesMask, doubleSided)
    end

    /*
    This action will create a new ModelBlueprint with a single node containing a
    plane shape. The plane will be formed using the given width and depth.
    The geometry will be formed using the given primitive type, which must be
    POINTS, LINES, or TRIANGLES. The resulting ModelBlueprint will use the given
    Material. The attributes mask should be the result of using the
    BitwiseOperations:Or(...) action on each of the VertexAttributes constant
    values that are to be used. The supported values are POSITION, COLOR, 
    NORMAL, and TEXTURE_COORDINATES.
    */
    action CreatePlane(number width, number depth, integer primitiveType, Material material, integer attributes) returns ModelBlueprint
        Begin()
        AddPart("plane", primitiveType, attributes, material):BuildPlane(width, depth, false)
        return End()
    end

    /*
    This action will create a new ModelBlueprint with a single node containing a
    plane shape. The plane will be formed using the given width and depth.
    The geometry will be formed using the given primitive type, which must be
    POINTS, LINES, or TRIANGLES. The resulting ModelBlueprint will use the given
    Material. The attributes mask should be the result of using the
    BitwiseOperations:Or(...) action on each of the VertexAttributes constant
    values that are to be used. The supported values are POSITION, COLOR, 
    NORMAL, and TEXTURE_COORDINATES.
    */
    action CreatePlane(number width, number depth, integer primitiveType, Material material, integer attributes, boolean doubleSided) returns ModelBlueprint
        Begin()
        AddPart("plane", primitiveType, attributes, material):BuildPlane(width, depth, doubleSided)
        return End()
    end

    /*
    This action will create a plane with the given width, depth, and
    color. 
    */
    action CreatePlane(number width, number depth, Color color) returns ModelBlueprint
        Material material
        ColorAttribute colorAttribute
        colorAttribute:SetAttribute(colorAttribute:GetDiffuseValue(), color)
        material:Add(colorAttribute)

        if color:GetAlpha() < 1.0
            BlendingAttribute blend
            blend:opacity = color:GetAlpha()
            material:Add(blend)
        end

        VertexAttributes attributes
        integer mask = bits:Or(attributes:POSITION, attributes:NORMAL)
        return CreatePlane(width, depth, TRIANGLES, material, mask)
    end

    /*
    This action will create a plane with the given width, depth, and
    color. 
    */
    action CreatePlane(number width, number depth, Color color, boolean doubleSided) returns ModelBlueprint
        Material material
        ColorAttribute colorAttribute
        colorAttribute:SetAttribute(colorAttribute:GetDiffuseValue(), color)
        material:Add(colorAttribute)

        if color:GetAlpha() < 1.0
            BlendingAttribute blend
            blend:opacity = color:GetAlpha()
            material:Add(blend)
        end

        VertexAttributes attributes
        integer mask = bits:Or(attributes:POSITION, attributes:NORMAL)
        return CreatePlane(width, depth, TRIANGLES, material, mask, doubleSided)
    end

    /*
    This action will create a plane with the given width and depth, and
    applies the given Texture to it.
    */
    action CreatePlane(number width, number depth, Texture texture) returns ModelBlueprint
        Material material
        TextureAttribute textureAttribute
        TextureDescriptor descriptor

        TextureFilter minFilter
        TextureFilter magFilter
        minFilter:ConstructTextureFilter(minFilter:LINEAR)
        magFilter:ConstructTextureFilter(magFilter:LINEAR)
        TextureWrap uWrap
        TextureWrap vWrap
        uWrap:ConstructTextureWrap(uWrap:REPEAT)
        vWrap:ConstructTextureWrap(vWrap:REPEAT)
        descriptor:SetDescriptor(texture, minFilter, magFilter, uWrap, vWrap)

        textureAttribute = textureAttribute:CreateDiffuse(descriptor)
        material:Add(textureAttribute)

        VertexAttributes attributes
        integer mask = bits:Or(bits:Or(attributes:POSITION, attributes:NORMAL), attributes:TEXTURE_COORDINATES)

        return CreatePlane(width, depth, TRIANGLES, material, mask)
    end

    /*
    This action will create a plane with the given width and depth, and
    applies the given Texture to it.
    */
    action CreatePlane(number width, number depth, Texture texture, boolean doubleSided) returns ModelBlueprint
        Material material
        TextureAttribute textureAttribute
        TextureDescriptor descriptor

        TextureFilter minFilter
        TextureFilter magFilter
        minFilter:ConstructTextureFilter(minFilter:LINEAR)
        magFilter:ConstructTextureFilter(magFilter:LINEAR)
        TextureWrap uWrap
        TextureWrap vWrap
        uWrap:ConstructTextureWrap(uWrap:REPEAT)
        vWrap:ConstructTextureWrap(vWrap:REPEAT)
        descriptor:SetDescriptor(texture, minFilter, magFilter, uWrap, vWrap)

        textureAttribute = textureAttribute:CreateDiffuse(descriptor)
        material:Add(textureAttribute)

        VertexAttributes attributes
        integer mask = bits:Or(bits:Or(attributes:POSITION, attributes:NORMAL), attributes:TEXTURE_COORDINATES)

        return CreatePlane(width, depth, TRIANGLES, material, mask, doubleSided)
    end

    /*
    This action will create a new ModelBlueprint with a single node containing a
    cylinder shape. The cylinder will be made using the given width, height, and
    depth. The primitive type used to form the cylinder will be TRIANGLES.
    */
    action CreateCylinder(number width, number height, number depth, integer divisions, Material material, integer attributesMask) returns ModelBlueprint
        return CreateCylinder(width, height, depth, divisions, TRIANGLES, material, attributesMask)
    end

    /*
    This action will create a new ModelBlueprint with a single node containing a
    cylinder shape. The cylinder will be made using the given width, height, and
    depth, and using the provided primitive type, Material, and attributes.
    */
    action CreateCylinder(number width, number height, number depth, integer divisions, integer primitiveType, Material material, integer attributesMask) returns ModelBlueprint
        return CreateCylinder(width, height, depth, divisions, primitiveType, material, attributesMask, 0, 360)
    end

    /*
    This action will create a new ModelBlueprint with a single node containing a
    cylinder shape. The cylinder will be made using the given width, height, and
    depth, and using the provided Material and attributes. The cylinder will go
    from the starting angle provided to the ending angle provided, in degrees.
    */
    action CreateCylinder(number width, number height, number depth, integer divisions, Material material, integer attributesMask, number angleFrom, number angleTo) returns ModelBlueprint
        return CreateCylinder(width, height, depth, divisions, TRIANGLES, material, attributesMask, angleFrom, angleTo)
    end

    /*
    This action will create a new ModelBlueprint with a single node containing a
    cylinder shape. The cylinder will be constructed with the given width,
    height, and depth, and using the provided Material and other parameters to
    build the model.
    */
    action CreateCylinder(number width, number height, number depth, integer divisions, integer primitiveType, Material material, integer attributesMask, number angleFrom, number angleTo) returns ModelBlueprint
        Begin()
        AddPart("cylinder", primitiveType, attributesMask, material):BuildCylinder(width, height, depth, divisions, angleFrom, angleTo)
        return End()
    end

    /*
    This action will create a new ModelBlueprint with a single node containing a
    cylinder shape. The cylinder will be constructed with the given width,
    height, and depth. The curve of the cylinder will be approximated with
    straight edges, using the provided number of divisions. A larger count of
    divisions will use more edges to create a smoother curve. The created
    cylinder will be a single diffuse color, matching the provided Color object.
    */
    action CreateCylinder(number width, number height, number depth, integer divisions, Color color) returns ModelBlueprint
        Material material
        ColorAttribute attribute
        attribute:SetAttribute(attribute:GetDiffuseValue(), color)
        material:Add(attribute)

        if color:GetAlpha() < 1.0
            BlendingAttribute blend
            blend:opacity = color:GetAlpha()
            material:Add(blend)
        end

        VertexAttributes attributes
        integer mask = bits:Or(attributes:POSITION, attributes:NORMAL)
        return CreateCylinder(width, height, depth, divisions, TRIANGLES, material, mask, 0, 360)
    end

    /*
    This action will create a new ModelBlueprint with a single node containing a
    cylinder shape. The cylinder will be constructed with the given width,
    height, and depth. The curve of the cylinder will be approximated with
    straight edges, using the provided number of divisions. A larger count of
    divisions will use more edges to create a smoother curve. The created
    cylinder will then be wrapped with the provided Texture.
    */
    action CreateCylinder(number width, number height, number depth, integer divisions, Texture texture) returns ModelBlueprint
        Material material
        TextureAttribute textureAttribute
        TextureDescriptor descriptor

        TextureFilter minFilter
        TextureFilter magFilter
        minFilter:ConstructTextureFilter(minFilter:LINEAR)
        magFilter:ConstructTextureFilter(magFilter:LINEAR)
        TextureWrap uWrap
        TextureWrap vWrap
        uWrap:ConstructTextureWrap(uWrap:REPEAT)
        vWrap:ConstructTextureWrap(vWrap:REPEAT)
        descriptor:SetDescriptor(texture, minFilter, magFilter, uWrap, vWrap)

        textureAttribute = textureAttribute:CreateDiffuse(descriptor)
        material:Add(textureAttribute)

        VertexAttributes attributes
        integer mask = bits:Or(bits:Or(attributes:POSITION, attributes:NORMAL), attributes:TEXTURE_COORDINATES)

        return CreateCylinder(width, height, depth, divisions, TRIANGLES, material, mask)
    end

    /*
    This action will create a new ModelBlueprint with a single node containing a
    sphere shape. The cylinder will be made using the given width, height, and
    depth. The primitive type used to form the cylinder will be TRIANGLES.
    */
    action CreateSphere(number width, number height, number depth, integer divisionsU, integer divisionsV, Material material, integer attributesMask) returns ModelBlueprint
        return CreateSphere(width, height, depth, divisionsU, divisionsV, TRIANGLES, material, attributesMask)
    end

    /*
    This action will create a new ModelBlueprint with a single node containing a
    sphere shape. The sphere will be made using the given width, height, and
    depth, and using the provided primitive type, Material, and attributes.
    */
    action CreateSphere(number width, number height, number depth, integer divisionsU, integer divisionsV, integer primitiveType, Material material, integer attributesMask) returns ModelBlueprint
        return CreateSphere(width, height, depth, divisionsU, divisionsV, primitiveType, material, attributesMask, 0, 360, 0, 180)
    end

    /*
    This action will create a new ModelBlueprint with a single node containing a
    sphere shape. The sphere will be made using the given width, height, and
    depth, and using the provided Material and attributes. The sphere will go
    from the starting angle provided to the ending angle provided, in degrees.
    */
    action CreateSphere(number width, number height, number depth, integer divisionsU, integer divisionsV, Material material, integer attributesMask, number angleUFrom, number angleUTo, number angleVFrom, number angleVTo) returns ModelBlueprint
        return CreateSphere(width, height, depth, divisionsU, divisionsV, TRIANGLES, material, attributesMask, angleUFrom, angleUTo, angleVFrom, angleVTo)
    end

    /*
    This action will create a new ModelBlueprint with a single node containing a
    sphere shape. The sphere will be constructed with the given width,
    height, and depth, and using the provided Material and other parameters to
    build the model.
    */
    action CreateSphere(number width, number height, number depth, integer divisionsU, integer divisionsV, integer primitiveType, Material material, integer attributesMask, number angleUFrom, number angleUTo, number angleVFrom, number angleVTo) returns ModelBlueprint
        Begin()
        AddPart("sphere", primitiveType, attributesMask, material):BuildSphere(width, height, depth, divisionsU, divisionsV, angleUFrom, angleUTo, angleVFrom, angleVTo)
        return End()
    end

    /*
    This action will create a new ModelBlueprint with a single node containing a
    sphere shape. The sphere will be constructed with the given width,
    height, and depth. The curve of the sphere will be approximated with
    straight edges, using the provided number of divisions. A larger count of
    divisions will use more edges to create a smoother curve. The created
    sphere will be a single diffuse color, matching the provided Color object.
    */
    action CreateSphere(number width, number height, number depth, integer divisionsU, integer divisionsV, Color color) returns ModelBlueprint
        Material material
        ColorAttribute attribute
        attribute:SetAttribute(attribute:GetDiffuseValue(), color)
        material:Add(attribute)

        if color:GetAlpha() < 1.0
            BlendingAttribute blend
            blend:opacity = color:GetAlpha()
            material:Add(blend)
        end

        VertexAttributes attributes
        integer mask = bits:Or(attributes:POSITION, attributes:NORMAL)
        return CreateSphere(width, height, depth, divisionsU, divisionsV, TRIANGLES, material, mask, 0, 360, 0, 180)
    end

    /*
    This action will create a new ModelBlueprint with a single node containing a
    sphere shape. The sphere will be constructed with the given width,
    height, and depth. The curve of the cylinder will be approximated with
    straight edges, using the provided number of divisions. A larger count of
    divisions will use more edges to create a smoother curve. The created
    sphere will then be wrapped with the provided Texture.
    */
    action CreateSphere(number width, number height, number depth, integer divisionsU, integer divisionsV, Texture texture) returns ModelBlueprint
        Material material
        TextureAttribute textureAttribute
        TextureDescriptor descriptor

        TextureFilter minFilter
        TextureFilter magFilter
        minFilter:ConstructTextureFilter(minFilter:LINEAR)
        magFilter:ConstructTextureFilter(magFilter:LINEAR)
        TextureWrap uWrap
        TextureWrap vWrap
        uWrap:ConstructTextureWrap(uWrap:REPEAT)
        vWrap:ConstructTextureWrap(vWrap:REPEAT)
        descriptor:SetDescriptor(texture, minFilter, magFilter, uWrap, vWrap)

        textureAttribute = textureAttribute:CreateDiffuse(descriptor)
        material:Add(textureAttribute)

        VertexAttributes attributes
        integer mask = bits:Or(bits:Or(attributes:POSITION, attributes:NORMAL), attributes:TEXTURE_COORDINATES)

        return CreateSphere(width, height, depth, divisionsU, divisionsV, TRIANGLES, material, mask)
    end
    
end
