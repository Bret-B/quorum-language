package Libraries.Game.Graphics

use Libraries.Language.Object
use Libraries.Compute.BitwiseOperations
use Libraries.Game.Graphics.OpenGL.OpenGLConstants

class VertexAttribute 
    
    public constant integer POSITION = 1
    public constant integer COLOR_UNPACKED = 2
    public constant integer COLOR_PACKED = 4
    public constant integer NORMAL = 8
    public constant integer TEXTURE_COORDINATES = 16
    public constant integer GENERIC = 32
    public constant integer BONE_WEIGHT = 64
    public constant integer TANGENT = 128
    public constant integer BINORMAL = 256

    public constant text POSITION_ALIAS = "a_position"
    public constant text COLOR_ALIAS = "a_color"
    public constant text NORMAL_ALIAS = "a_normal"
    public constant text TEXTURE_COORDINATES_ALIAS = "a_texCoord"
    public constant text BONE_WEIGHT_ALIAS = "a_boneWeight"
    public constant text TANGENT_ALIAS = "a_tangent"
    public constant text BINORMAL_ALIAS = "a_binormal"

    OpenGLConstants constants

    /* An integer formed from the bits of the above constants, representing its usage. */
    public integer usage = 0

    /* How many components this attribute has. */
    public integer componentCount = 0

    /* Whether the values are normalized to either -1.0 and 1.0 (signed) or 0 and 1.0 (unsigned) */
    public boolean normalized = false

    /* The OpenGL type of each component, e.g. GL_FLOAT, GL_UNSIGNED_BYTE, etc. */
    public integer type = 0

    /* The offset of this attribute in bytes. Shouldn't be changed by the user. */
    public integer offset = 0

    /* The alias used for this attribute in a ShaderProgram. */
    public text alias = ""
    
    /* An optional unit/index specifier used for texture coordinates and bone weights. */
    public integer unit = 0

    private integer usageIndex = 0

    /*
    This action will set the Attribute using the given usage value, component
    count, and alias. Users are encouraged to use one of the provided helper
    actions to produce attributes with the proper values, e.g. Position or
    Normal.
    */
    action SetAttribute(integer usage, integer componentCount, text alias)
        SetAttribute(usage, componentCount, alias, 0)
    end

    /*
    This action will set the Attribute using the given usage value, component
    count, alias, and index. Users are encouraged to use one of the provided 
    helper actions to produce attributes with the proper values, e.g. Position 
    or Normal.
    */
    action SetAttribute(integer usage, integer componentCount, text alias, integer index)
        if usage = COLOR_PACKED
            SetAttribute(usage, componentCount, constants:GL_UNSIGNED_BYTE, true, alias, index)
        else
            SetAttribute(usage, componentCount, constants:GL_FLOAT, false, alias, index)
        end
    end

    action SetAttribute(integer usage, integer componentCount, integer type, boolean normalized, text alias)
        SetAttribute(usage, componentCount, type, normalized, alias, 0)
    end

    action SetAttribute(integer usage, integer componentCount, integer type, boolean normalized, text alias, integer index)
        me:usage = usage
        me:componentCount = componentCount
        me:type = type
        me:normalized = normalized
        me:alias  = alias
        me:unit = index
        me:usageIndex = usage:TrailingZeros()
    end

    /*
    This action will return a new VertexAttribute set with the POSITION usage,
    and with fields set to appropriate values.
    */
    action Position returns VertexAttribute
        VertexAttribute temp
        temp:SetAttribute(POSITION, 3, POSITION_ALIAS)
        return temp
    end

    /*
    This action will return a new VertexAttribute set with the 
    TEXTURE_COORDINATES usage, and with fields set to appropriate values.
    */
    action TextureCoordinates(integer unit) returns VertexAttribute
        VertexAttribute temp
        temp:SetAttribute(TEXTURE_COORDINATES, 2, TEXTURE_COORDINATES_ALIAS + unit, unit)
        return temp
    end

    /*
    This action will return a new VertexAttribute set with the NORMAL usage,
    and with fields set to appropriate values.
    */
    action Normal returns VertexAttribute
        VertexAttribute temp
        temp:SetAttribute(NORMAL, 3, NORMAL_ALIAS)
        return temp
    end

    /*
    This action will return a new VertexAttribute set with the COLOR_PACKED 
    usage, and with fields set to appropriate values.
    */
    action ColorPacked returns VertexAttribute
        VertexAttribute temp
        temp:SetAttribute(COLOR_PACKED, 4, constants:GL_UNSIGNED_BYTE, true, COLOR_ALIAS)
        return temp
    end

    /*
    This action will return a new VertexAttribute set with the COLOR_UNPACKED 
    usage, and with fields set to appropriate values.
    */
    action ColorUnpacked returns VertexAttribute
        VertexAttribute temp
        temp:SetAttribute(COLOR_UNPACKED, 4, constants:GL_FLOAT, false, COLOR_ALIAS)
        return temp
    end

    /*
    This action will return a new VertexAttribute set with the TANGENT usage,
    and with fields set to appropriate values.
    */
    action Tangent returns VertexAttribute
        VertexAttribute temp
        temp:SetAttribute(TANGENT, 3, TANGENT_ALIAS)
        return temp
    end

    /*
    This action will return a new VertexAttribute set with the BINORMAL usage,
    and with fields set to appropriate values.
    */
    action Binormal returns VertexAttribute
        VertexAttribute temp
        temp:SetAttribute(BINORMAL, 3, BINORMAL_ALIAS)
        return temp
    end

    /*
    This action will return a new VertexAttribute set with the BONE_WEIGHT usage,
    and with fields set to appropriate values.
    */
    action BoneWeight(integer unit) returns VertexAttribute
        VertexAttribute temp
        temp:SetAttribute(BONE_WEIGHT, 2, BONE_WEIGHT_ALIAS + unit, unit)
        return temp
    end

    /*
    This helper action produces a new VertexAttribute that describes a custom
    32-bit integer vertex attribute.

    Custom attributes will have a usage value of "-1" until they're added into
    a VertexAttributes object. Once added, they are assigned a unique usage value.
    */
    action CustomIntegerAttribute(text alias) returns VertexAttribute
        VertexAttribute temp
        temp:SetAttribute(-1, 1, constants:GL_INT, false, alias)
        return temp
    end

    /*
    This helper action produces a new VertexAttribute that describes a custom
    32-bit floating point vertex attribute.

    Custom attributes will have a usage value of "-1" until they're added into
    a VertexAttributes object. Once added, they are assigned a unique usage value.
    */
    action CustomNumberAttribute(text alias) returns VertexAttribute
        VertexAttribute temp
        temp:SetAttribute(-1, 1, constants:GL_FLOAT, false, alias)
        return temp
    end

    /*
    This helper action produces a new VertexAttribute that describes a custom
    vector of 32-bit floating point values as a vertex attribute. The vector size
    should be between 2 to 4.

    Custom attributes will have a usage value of "-1" until they're added into
    a VertexAttributes object. Once added, they are assigned a unique usage value.
    */
    action CustomVectorAttribute(text alias, integer vectorSize) returns VertexAttribute
        VertexAttribute temp
        temp:SetAttribute(-1, vectorSize, constants:GL_FLOAT, false, alias)
        return temp
    end

    /*
    This helper action produces a new VertexAttribute that describes a custom
    color vertex attribute. In a shader, this vertex will be a vector4 containing
    RGBA values between 0 and 1. To set a color value in an input Number32BitArray,
    use the Color's "EncodeColorAsNumber" action to turn the color into a valid
    number in the array.

    Custom attributes will have a usage value of "-1" until they're added into
    a VertexAttributes object. Once added, they are assigned a unique usage value.
    */
    action CustomColorAttribute(text alias) returns VertexAttribute
        VertexAttribute temp
        temp:SetAttribute(-1, 4, constants:GL_UNSIGNED_BYTE, true, alias)
        return temp
    end

    /*
    This helper action produces a new VertexAttribute that describes a "packed"
    Vector4 vertex attribute. This vertex value can be described as a single
    number produced by the NumberUtilities' "PackNormalizedVector4" action.
    In a shader, this represents a Vector4 whose values are all between 0 and 1.
    This is functionally the same as an attribute produced by the
    CustomColorAttribute action.

    Custom attributes will have a usage value of "-1" until they're added into
    a VertexAttributes object. Once added, they are assigned a unique usage value.
    */
    action CustomNormalizedVector4Attribute(text alias) returns VertexAttribute
        VertexAttribute temp
        temp:SetAttribute(-1, 4, constants:GL_UNSIGNED_BYTE, true, alias)
        return temp
    end

    /*
    This action determines if the given object is a VertexAttribute with the
    same usage, component count, alias, and unit values as this VertexAttribute.
    */
    action Equals(Object object) returns boolean
        if object is VertexAttribute
            return Equals(cast(VertexAttribute, object))
        else
            return false
        end
    end

    /*
    This action determines if the given VertexAttribute has the same usage, 
    component count, alias, and unit values as this VertexAttribute.
    */
    action Equals(VertexAttribute attribute) returns boolean
        return attribute not= undefined and attribute:usage = usage and attribute:componentCount = componentCount
            and attribute:alias = alias and attribute:unit = unit
    end

    /*
    This action will return a unique integer value specifying the usage index
    and unit of this VertexAttribute.
    */
    action GetKey returns integer
        BitwiseOperations ops
        integer result = ops:ShiftLeft(usageIndex, 8)
        return result + ops:And(unit, 255)
    end
end