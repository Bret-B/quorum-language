package Libraries.Game.Graphics

use Libraries.Containers.Array
use Libraries.Game.GameStateManager

/*
The TextureBinder class manages the automatic binding and unbinding of texture resources for the rendering system.
This is a shared class which is used automatically by the engine as needed, and most users will not need to interact
with it manually.
*/
class TextureBinder

    /* 
    The index of the first exclusive texture unit.
    (Textures are "exclusive" in the sense that they are expected to be used by the TextureBinder and not by 
    other resources, but theoretically nothing prevents outside users from manually overwriting those textures
    in OpenGL or another rendering system.)
    */
    integer offset = 1

    // The amount of exclusive textures that may be used.
    integer count = 0

    // The weight added to a texture when its reused
    integer reuseWeight = 10

    // The textures currently exclusively bound.
    Array<Texture> textures

    // The weight of each texture. Used to determine which Textures to discard if needed.
    Array<integer> weights

    // Flag to indicate that the current texture is reused.
    boolean reused = false

    // A texture descriptor used as a passthrough argument if no descriptor is provided alongside a texture.
    TextureDescriptor tempDescriptor

    // The last texture index that was assigned when given a new texture.
    integer currentTexture = 0

    GameStateManager manager

    on create
        GraphicsManager graphics = manager:GetGameGraphics()
        integer max = graphics:GetMaxTextureUnits()
        count = max - 1 - offset

        textures:SetSize(count)
        weights:SetSize(count)
    end
    

    action Begin
        integer i = 0
        repeat while i <  count
            textures:Set(i, undefined)
            weights:Set(i, 0)
            i = i + 1
        end
    end

    action End
        //We do not unbind any textures -- we simply make sure none of the
        //textures are active to prevent accidental manipulation of them.

        GraphicsManager graphics = manager:GetGameGraphics()
        graphics:SetActiveTextureID(graphics:GL_TEXTURE0)
    end    

    action Bind(TextureDescriptor descriptor) returns integer
        return Bind(descriptor, false)
    end

    action Bind(Texture texture) returns integer
        tempDescriptor:SetDescriptor(texture, undefined, undefined, undefined, undefined)
        return Bind(tempDescriptor, false)
    end

    action Bind(TextureDescriptor descriptor, boolean rebind) returns integer
        Texture texture = descriptor:texture
        reused = false

        integer index = BindTextureWeighted(texture)
        integer result = offset + index

        if reused
            texture:Bind(result)
        else
            GraphicsManager graphics = manager:GetGameGraphics()
            graphics:SetActiveTextureID(graphics:GL_TEXTURE0 + result)
        end

        texture:UnsafeSetWrap(descriptor:uWrap, descriptor:vWrap)
        texture:UnsafeSetFilter(descriptor:minFilter, descriptor:magFilter)
        return result
    end

    private action BindTextureWeighted(Texture texture) returns integer
        integer result = -1
        integer weight = weights:Get(0)
        integer weightIndex = 0

        integer i = 0
        repeat while i < count
            if textures:Get(i) = texture
                result = i
                weights:Set(i, weights:Get(i) + reuseWeight)
            else
                integer newWeight = weights:Get(i) - 1
                weights:Set(i, newWeight)
                if newWeight < 0 or newWeight < weight
                    weight = newWeight
                    weightIndex = i
                end
            end

            i = i + 1
        end

        if result < 0
            textures:Set(weightIndex, texture)
            weights:Set(weightIndex, 100)
            result = weightIndex
            texture:Bind(offset + result)
        else
            reused = true
        end

        return result
    end

end