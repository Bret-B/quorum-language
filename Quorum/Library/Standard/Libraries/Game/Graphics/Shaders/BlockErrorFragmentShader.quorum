package Libraries.Game.Graphics.Shaders

class BlockErrorFragmentShader is Shader

    constant text SHADER_NAME = "Block Error Fragment Shader"

    on create
        SetName(SHADER_NAME)
        SetType(parent:Shader:FRAGMENT_SHADER)
        SetCode(GetOpenGLVersion() +
"
" +
"#ifdef GL_ES
    #define LOWP lowp
    precision mediump float;
#else
    #define LOWP 
#endif

in LOWP vec4 v_color;
in LOWP vec4 v_borderColor;
in vec2 v_texCoords;
in vec4 v_rounding;
in vec4 v_borderThickness;
in float v_aspectRatio;
in float v_antiAlias;
in vec3 v_notchSize;
in vec2 v_notchPositions;

uniform sampler2D u_texture;
uniform float u_notchHeight;
uniform float iTime;

layout (location = 0) out vec4 outputColor;

// Calculate how far a point is from the outer shell of a rounded rectangle.
// The rounding vector contains edge roundness values for:
// x: top-right
// y: bottom-right
// z: top-left
// w: bottom-left
float signedDistanceRectangle(in vec2 point, in vec2 dimensions, in vec4 rounding)
{
    // We calculate as though the point is in the top-right quadrant.
    // If this isn't true, we need adjust which of the edge rounding values we use.
    rounding.xy = (point.x > 0.0) ? rounding.xy : rounding.zw;
    rounding.x = (point.y > 0.0) ? rounding.x : rounding.y;
    
    // We take the absolute value of the point to ensure we're calculating from the top-right quadrant
    vec2 calc = abs(point) - dimensions + rounding.x;
    return min(max(calc.x, calc.y), 0.0) + length(max(calc, 0.0)) - rounding.x;
}

// Signed distance function for trapezoids is adapted from work by Inigo Quilez on Shadertoy under the MIT License.
// https://www.shadertoy.com/view/MlycD3
// The MIT License
// Copyright © 2018 Inigo Quilez
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Get the length squared of the given vector via dot product.
float dot2(in vec2 v ) { return dot(v,v); }

// Calculate how far a point is from the outer shell of a trapezoid, aligned with the y-axis.
float signedDistanceTrapezoid(in vec2 p, in float r1, float r2, float he )
{
    vec2 k1 = vec2(r2,he);
    vec2 k2 = vec2(r2-r1,2.0*he);

    p.x = abs(p.x);
    vec2 ca = vec2(max(0.0,p.x-((p.y<0.0)?r1:r2)), abs(p.y)-he);
    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );
    
    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;
    
    return s*sqrt( min(dot2(ca),dot2(cb)) );
}

float rand(vec2 n) {
    return fract(sin(cos(dot(n, vec2(12.9898,12.1414)))) * 83758.5453);
}

float noise(vec2 n) {
    const vec2 d = vec2(0.0, 1.0);
    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));
    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);
}

float fbm(vec2 n) {
    float total = 0.0, amplitude = 1.0;
    for (int i = 0; i <5; i++) {
        total += noise(n) * amplitude;
        n += n*1.7;
        amplitude *= 0.47;
    }
    return total;
}

vec4 postProcess(in vec2 fragCoord) 
{

//    const vec3 c1 = vec3(0.5, 0.0, 0.1);
//    const vec3 c2 = vec3(0.9, 0.1, 0.0);
//    const vec3 c3 = vec3(0.2, 0.1, 0.7);
//    const vec3 c4 = vec3(1.0, 0.9, 0.1);
//    const vec3 c5 = vec3(0.1);
//    const vec3 c6 = vec3(0.9);
//
//    vec2 speed = vec2(0.1, 0.9);
//    float shift = 1.327+sin(iTime*2.0)/2.4;
//    float alpha = 1.0;
//    
//    float dist = 3.5-sin(iTime*0.4)/1.89;
//    
//    vec2 uv = fragCoord.xy;
//    vec2 p = uv * dist;
//    p += sin(p.yx*4.0+vec2(.2,-.3)*iTime)*0.04;
//    p += sin(p.yx*8.0+vec2(.6,+.1)*iTime)*0.01;
//    
//    p.x -= iTime/1.1;
//    float q = fbm(p - iTime * 0.3+1.0*sin(iTime+0.5)/2.0);
//    float qb = fbm(p - iTime * 0.4+0.1*cos(iTime)/2.0);
//    float q2 = fbm(p - iTime * 0.44 - 5.0*cos(iTime)/2.0) - 6.0;
//    float q3 = fbm(p - iTime * 0.9 - 10.0*cos(iTime)/15.0)-4.0;
//    float q4 = fbm(p - iTime * 1.4 - 20.0*sin(iTime)/14.0)+2.0;
//    q = (q + qb - .4 * q2 -2.0*q3  + .6*q4)/3.8;
//    vec2 r = vec2(fbm(p + q /2.0 + iTime * speed.x - p.x - p.y), fbm(p + q - iTime * speed.y));
//    vec3 c = mix(c1, c2, fbm(p + r)) + mix(c3, c4, r.x) - mix(c5, c6, r.y);
//    vec3 color = vec3(1.0/(pow(c+1.61,vec3(4.0))) * cos(shift * fragCoord.y));
//    
//    color=vec3(1.0,.2,.05)/(pow((r.y+r.y)* max(.0,p.y)+0.1, 4.0));;
//    color = color/(1.0+max(vec3(0),color));
//    return vec4(color.x, color.y, color.z, alpha);

    return vec4(0.5 + 0.5 * abs(sin(fragCoord.x + fragCoord.y - iTime)), 0.25, 0.25, 1.0);
//    return vec4(0.5 + 0.5 * abs(sin(fragCoord.x - iTime)), 0.25, 0.25, 1.0);
}

void main()
{
    vec4 rounding = v_rounding;
    vec4 borderThickness = v_borderThickness;
    float aspectRatio = v_aspectRatio;
    float antiAliasDistance = v_antiAlias;

    float notchBottomWidth = v_notchSize.x;
    float notchTopWidth = v_notchSize.z;
    float notchHeight = v_notchSize.y;

    vec4 borderColor = v_borderColor;
    bool renderBorders = (borderThickness.x + borderThickness.y + borderThickness.z + borderThickness.w) > 0.0;

    vec2 point = (v_texCoords.xy - 0.5) * 2.0;
    point.x *= aspectRatio;
    point.y += notchHeight;
    vec2 dimensions = vec2(aspectRatio, 1.0 - notchHeight);

    float distance = signedDistanceRectangle(point, dimensions, rounding);
    vec4 resultColor;

    if (renderBorders)
    {
        // The enabled borders vector stores values for the sides in the following order:
        // x: right
        // y: top (y-positive: technically the bottom due to how GLSL handles texture coordinates)
        // z: left
        // w: bottom (y-negative)
        vec2 fillPoint = point - vec2(borderThickness.x - borderThickness.z, borderThickness.y - borderThickness.w);
        vec2 fillDimensions = vec2(dimensions.x - borderThickness.x - borderThickness.z, dimensions.y - borderThickness.y - borderThickness.w);
        float fillDistance = signedDistanceRectangle(fillPoint, fillDimensions, rounding);

        float trapDistance = signedDistanceTrapezoid(vec2((v_notchPositions.x - 0.5) * 2.0 * aspectRatio - point.x, 1.0 - notchHeight - point.y), notchBottomWidth, notchTopWidth, 2.0 * notchHeight);
        float finalDistance = min(distance, trapDistance);
        float carveDistance = signedDistanceTrapezoid(vec2((v_notchPositions.y - 0.5) * 2.0 * aspectRatio - point.x, -1.0 + notchHeight - point.y), notchBottomWidth, notchTopWidth, 2.0 * notchHeight);
        finalDistance = max(finalDistance, -carveDistance);

        vec4 fillColor = postProcess(point);
        borderColor.rgb = vec3(0.2);

        resultColor = mix(borderColor * texture(u_texture, v_texCoords), vec4(borderColor.rgb, 0.0), smoothstep(0.0, antiAliasDistance, finalDistance));
        resultColor = mix(fillColor * texture(u_texture, v_texCoords), resultColor, smoothstep(0.0, antiAliasDistance, finalDistance + 2 * borderThickness.y));
    }
    else
    {
        resultColor = postProcess(point) * texture(u_texture, v_texCoords);
        resultColor = mix(resultColor, vec4(resultColor.rgb, 0.0), smoothstep(0.0, antiAliasDistance, distance));
    }

    outputColor = resultColor;
}

")
    end

end