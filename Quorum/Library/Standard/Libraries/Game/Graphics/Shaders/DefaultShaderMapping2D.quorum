package Libraries.Game.Graphics.Shaders

use Libraries.Compute.Matrix4
use Libraries.Containers.Array
use Libraries.Containers.Integer32BitArray
use Libraries.Game.GameDisplay
use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.VertexAttribute
use Libraries.Game.Graphics.VertexAttributes
use Libraries.Game.Graphics.Mesh
use Libraries.Game.Graphics.Drawable
use Libraries.Game.GameStateManager
use Libraries.Containers.Number32BitArray
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Compute.Vector3
use Libraries.Game.Graphics.OpenGLConstants
use Libraries.Game.Graphics.DefaultVertexAttributes2D
use Libraries.Game.Graphics.VertexData
use Libraries.Game.Graphics.DrawableShape

class DefaultShaderMapping2D is BatchingShaderMapping2D
    
    ShaderProgram program = undefined
    GameStateManager manager

    /*
    This action is called when the mapping is created. It must be used to set
    the initial values of the Mesh using the Mesh's Load action.
    */
    private action InitializeMesh(Mesh mesh)
        DefaultVertexAttributes2D attributes
        mesh:Load(false, 4800, 6000, attributes)

        integer length = 6000
        Integer32BitArray indices
        indices:SetSize(length)

        integer indexCounter = 0
        integer vertexCounter = 0

        // Setup the indices to make pairs of triangles to render quads of vertices.
        repeat while indexCounter < length
            indices:Set(indexCounter, vertexCounter)
            indices:Set(indexCounter + 1, vertexCounter + 1)
            indices:Set(indexCounter + 2, vertexCounter + 2)
            indices:Set(indexCounter + 3, vertexCounter + 2)
            indices:Set(indexCounter + 4, vertexCounter + 3)
            indices:Set(indexCounter + 5, vertexCounter)

            indexCounter = indexCounter + 6
            vertexCounter = vertexCounter + 4
        end

        mesh:SetIndices(indices)
    end

    action Begin(ShaderProgram program, Camera camera)
        me:program = program

        GraphicsManager graphics = manager:GetGameGraphics()
        OpenGLConstants constants
        graphics:SetDepthMask(true)
        graphics:EnableProperty(constants:GL_DEPTH_TEST)
        graphics:SetDepthFunction(constants:GL_LEQUAL)
        graphics:DisableProperty(constants:GL_CULL_FACE)

        // TO-DO: Replace hard-coded values with references to constants
        program:SetShaderInputMatrix("u_projTrans", camera:GetCombinedMatrix())
        program:SetShaderInput("u_texture", 0)
    end

    action End(ShaderProgram program)
        me:program = undefined
    end

end