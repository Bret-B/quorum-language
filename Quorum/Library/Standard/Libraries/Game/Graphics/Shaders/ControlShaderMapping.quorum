package Libraries.Game.Graphics.Shaders

use Libraries.Game.Graphics.Shaders.ShaderMapping
use Libraries.Game.Graphics.Shaders.ShaderProgram
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Game.Graphics.OpenGLConstants
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Controls.Control
use Libraries.Interface.Views.View2D
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Interface.Item2D
use Libraries.Interface.Controls.Checkbox
use Libraries.Interface.Views.ToggleView
use Libraries.Interface.Controls.Tab
use Libraries.Game.Graphics.DrawableShape
use Libraries.Game.Graphics.Mesh
use Libraries.Game.Graphics.DefaultVertexAttributes2D
use Libraries.Containers.Integer32BitArray

class ControlShaderMapping is BatchingShaderMapping2D

    ShaderProgram program = undefined
    GameStateManager manager

    /*
    This action is called when the mapping is created. It must be used to set
    the initial values of the Mesh using the Mesh's Load action.
    */
    private action InitializeMesh(Mesh mesh)
        DefaultVertexAttributes2D attributes
        mesh:Load(false, 4800, 6000, attributes)

        integer length = 6000
        Integer32BitArray indices
        indices:SetSize(length)

        integer indexCounter = 0
        integer vertexCounter = 0

        // Setup the indices to make pairs of triangles to render quads of vertices.
        repeat while indexCounter < length
            indices:Set(indexCounter, vertexCounter)
            indices:Set(indexCounter + 1, vertexCounter + 1)
            indices:Set(indexCounter + 2, vertexCounter + 2)
            indices:Set(indexCounter + 3, vertexCounter + 2)
            indices:Set(indexCounter + 4, vertexCounter + 3)
            indices:Set(indexCounter + 5, vertexCounter)

            indexCounter = indexCounter + 6
            vertexCounter = vertexCounter + 4
        end

        mesh:SetIndices(indices)
    end

    action SetVertexData(ShaderProgram program, Drawable drawable, DrawableShape shape)
        number leftBorder = 0
        number topBorder = 0
        number rightBorder = 0
        number bottomBorder = 0

        number bottomLeftRounding = 0
        number bottomRightRounding = 0
        number topRightRounding = 0
        number topLeftRounding = 0

        number borderThickness = 0
        ColorGroup borderColor = undefined
        ColorGroup backgroundColor = undefined

        number width = drawable:GetWidth() * drawable:GetScaleX()
        number height = drawable:GetHeight() * drawable:GetScaleY()
        number aspectRatio = width / height

        boolean selected = false
        boolean renderBorders = false

        /*
        We want to get the control or layout properties used to define the element. We'll check these places, in order of priority:
        1. The drawable's shader data
        2. If the drawable itself is a Control
        3. If the drawable is a view, see if the view is attached to a Control
        */
        if drawable:GetShaderData() is LayoutProperties
            LayoutProperties properties = cast(LayoutProperties, drawable:GetShaderData())
            
            if properties:GetBorderThickness() > 0
                if properties:HasLeftBorder()
                    renderBorders = true
                    leftBorder = 1.0
                end
                if properties:HasTopBorder()
                    renderBorders = true
                    topBorder = 1.0
                end
                if properties:HasRightBorder()
                    renderBorders = true
                    rightBorder = 1.0
                end
                if properties:HasBottomBorder()
                    renderBorders = true
                    bottomBorder = 1.0
                end
            end

            bottomLeftRounding = properties:GetBottomLeftRounding()
            bottomRightRounding = properties:GetBottomRightRounding()
            topRightRounding = properties:GetTopRightRounding()
            topLeftRounding = properties:GetTopLeftRounding()

            borderThickness = (1.0 / height) * (properties:GetBorderThickness() * properties:GetInterfaceScale())
            if properties:GetBorderColor() not= undefined
                borderColor = properties:GetBorderColor():GetBottomLeft()
            end
            backgroundColor = properties:GetBackgroundColor()
        else
            Control control = undefined

            if drawable:GetShaderData() is Control
                control = cast(Control, drawable:GetShaderData())
            elseif drawable is Control
                control = cast(Control, cast(Object, drawable))
            elseif drawable is View2D
                View2D view = cast(View2D, cast(Object, drawable))
                Item2D item = view:GetItem()
                if item is Control
                    control = cast(Control, item)
                end
                if view is ToggleView
                    ToggleView toggle = cast(ToggleView, view)
                    selected = toggle:GetToggleState()
                end
            end

            if control not= undefined
                if control:GetBorderThickness() > 0
                    if control:HasLeftBorder()
                        renderBorders = true
                        leftBorder = 1.0
                    end
                    if control:HasTopBorder()
                        renderBorders = true
                        topBorder = 1.0
                    end
                    if control:HasRightBorder()
                        renderBorders = true
                        rightBorder = 1.0
                    end
                    if control:HasBottomBorder()
                        renderBorders = true
                        bottomBorder = 1.0
                    end
                end
    
                bottomLeftRounding = control:GetBottomLeftRounding()
                bottomRightRounding = control:GetBottomRightRounding()
                topRightRounding = control:GetTopRightRounding()
                topLeftRounding = control:GetTopLeftRounding()

                borderThickness = (1.0 / height) * (control:GetBorderThickness() * control:GetInterfaceScale())

                /*
                Determine what color the control should be, based on how the user is interacting with it.
                We check a hierarchy of potential events, falling through to the next case if the event
                wasn't fulfilled or if there was no color assigned to that event.
                */
                if control:IsRenderingMouseDown()
                    backgroundColor = control:GetMouseDownColor()
                end

                if control:IsRenderingSelection() or selected
                    if control:IsRenderingFocus() = false
                        if backgroundColor = undefined
                            backgroundColor = control:GetUnfocusedSelectionColor()
                        end
                        if borderColor = undefined
                            borderColor = control:GetUnfocusedSelectionBorderColor()
                        end
                    end

                    if backgroundColor = undefined
                        backgroundColor = control:GetSelectionColor()
                    end
                    if borderColor = undefined
                        borderColor = control:GetSelectionBorderColor()
                    end
                end

                if backgroundColor = undefined and control:IsRenderingMouseOver()
                    backgroundColor = control:GetMouseOverColor()
                end

                if control:IsFocused()
                    if backgroundColor = undefined
                        backgroundColor = control:GetFocusColor()
                    end

                    if borderColor = undefined
                        borderColor = control:GetFocusBorderColor()
                    end
                end

                if backgroundColor = undefined
                    backgroundColor = control:GetBackgroundColor()
                end

                // Get the border color, as well.
                if borderColor = undefined
                    borderColor = control:GetBorderColor()
                end
            end
        end

        if backgroundColor not= undefined
            drawable:GetDrawableShape():SetColor(backgroundColor)
        end

        program:SetShaderInput("u_aspectRatio", aspectRatio)
        program:SetShaderInput("u_enabledBorders", leftBorder, topBorder, rightBorder, bottomBorder)
        program:SetShaderInput("u_rounding", bottomRightRounding, topRightRounding, bottomLeftRounding, topLeftRounding)
        program:SetShaderInput("u_borderThickness", borderThickness)
        program:SetShaderInput("u_antiAliasDistance", 1.0 / height)
        program:SetShaderInput("u_renderBorders", renderBorders)

        if borderColor not= undefined
            Color border = borderColor:GetBottomLeft()
            program:SetShaderInput("u_borderColor", border:GetRed(), border:GetGreen(), border:GetBlue(), border:GetAlpha())
        else
            program:SetShaderInput("u_borderColor", 0.0, 0.0, 0.0, 1.0)
        end
    end

end