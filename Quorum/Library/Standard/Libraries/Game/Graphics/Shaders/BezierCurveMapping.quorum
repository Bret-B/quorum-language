package Libraries.Game.Graphics.Shaders

use Libraries.Game.Graphics.Shaders.ShaderMapping
use Libraries.Game.Graphics.Shaders.ShaderProgram
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.OpenGLConstants
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Game.Graphics.Camera
use Libraries.Game.GameStateManager
use Libraries.Game.GameDisplay
use Libraries.Game.Graphics.BezierCurve

class BezierCurveMapping is ShaderMapping

    ShaderProgram program = undefined
    GameStateManager manager

    action Begin(ShaderProgram program, Camera camera)
        me:program = program

        GraphicsManager graphics = manager:GetGameGraphics()
        OpenGLConstants constants
        graphics:SetDepthMask(true)
        graphics:EnableProperty(constants:GL_DEPTH_TEST)
        graphics:SetDepthFunction(constants:GL_LEQUAL)
        graphics:DisableProperty(constants:GL_CULL_FACE)

        // TO-DO: Replace hard-coded values with references to constants
        program:SetShaderInputMatrix("u_projTrans", camera:GetCombinedMatrix())
    end

    action MapInputs(ShaderProgram program, Drawable drawable)
        BezierCurve curve = cast(BezierCurve, drawable)

        GameDisplay display = manager:GetGameDisplay()
        number width = drawable:GetWidth() * drawable:GetScaleX()
        number height = drawable:GetHeight() * drawable:GetScaleY()

        number aspectRatio = width / height
        number pixelDistance = 1.0 / height
        number antiAliasDistance = 2 * pixelDistance
        number lineThickness = 1.0 * pixelDistance - pixelDistance
        number dotThickness = 14 * pixelDistance - pixelDistance

        // Translate the points to the [-1, 1] space, adjusting the width by the aspect ratio.
        number x1 = ((curve:GetPoint1():GetX() / width) - 0.5) * 2 * aspectRatio
        number y1 = ((curve:GetPoint1():GetY() / height) - 0.5) * 2
        number cx1 = ((curve:GetControlPoint1():GetX() / width) - 0.5) * 2 * aspectRatio
        number cy1 = ((curve:GetControlPoint1():GetY() / height) - 0.5) * 2
        number cx2 = ((curve:GetControlPoint2():GetX() / width) - 0.5) * 2 * aspectRatio
        number cy2 = ((curve:GetControlPoint2():GetY() / height) - 0.5) * 2
        number x2 = ((curve:GetPoint2():GetX() / width) - 0.5) * 2 * aspectRatio
        number y2 = ((curve:GetPoint2():GetY() / height) - 0.5) * 2

        program:SetShaderInput("u_aspectRatio", aspectRatio)
        program:SetShaderInput("u_lineThickness", lineThickness)
        program:SetShaderInput("u_dotThickness", dotThickness)
        program:SetShaderInput("u_antiAliasDistance", antiAliasDistance)
        program:SetShaderInput("u_lineColor", 0.0, 0.0, 1.0, 1.0)
        program:SetShaderInput("u_dotColor", 1.0, 0.0, 0.0, 1.0)
        program:SetShaderInput("u_point1", x1, y1)
        program:SetShaderInput("u_control1", cx1, cy1)
        program:SetShaderInput("u_control2", cx2, cy2)
        program:SetShaderInput("u_point2", x2, y2)
        program:SetShaderInput("u_dotEnabled", true)
    end

    action End(ShaderProgram program)
        me:program = undefined
    end

end