package Libraries.Game.Graphics.OpenGL

use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Game.Graphics.Shaders.Shader
use Libraries.Game.Graphics.Shaders.ShaderProgram
use Libraries.Containers.Number32BitArray
use Libraries.Game.Graphics.Number32BitBuffer
use Libraries.Game.Graphics.Integer32BitBuffer
use Libraries.Game.Graphics.GraphicsManager

/*
The OpenGLManager class represents a Quorum interface with OpenGL in order to
draw on the screen. This is used internally by the Game class, and most users
will not need to interact with this class directly.
*/
class OpenGLManager is GraphicsManager
 
    /*
    The last coordinates that were used to set the drawing region via the
    SetViewport action.
    */
    integer viewportX = 0
    integer viewportY = 0
    integer viewportWidth = 0
    integer viewportHeight = 0

    // The default vertex array object. -1 indicates it hasn't been initialized yet.
    integer defaultVertexArray = -1

    action SetViewport(integer x, integer y, integer width, integer height)
        viewportX = x
        viewportY = y
        viewportWidth = width
        viewportHeight = height
        SetDrawingRegion(x, y, width, height)
    end

    action GetViewportX returns integer
        return viewportX
    end

    action GetViewportY returns integer
        return viewportY
    end

    action GetViewportWidth returns integer
        return viewportWidth
    end

    action GetViewportHeight returns integer
        return viewportHeight
    end

    action UseDefaultVertexArray
        if defaultVertexArray = -1
            defaultVertexArray = CreateVertexArray()
        end

        BindVertexArray(defaultVertexArray)
    end

    /*
    This action sets the color to clear the screen with in OpenGL.
    */
    blueprint action SetClearScreenColor(number red, number green, number blue, number alpha)

    /*
    This action clears the screen with the currently stored color in OpenGL.
    */
    blueprint action ClearScreen(integer mask)

    /*
    This action sets how OpenGL interprets virtual coordinates into screen
    coordinates, by setting the screen as though it were at the given virtual
    coordinates with the given width and height.
    */
    private blueprint action SetDrawingRegion(integer x, integer y, integer width, integer height)
  
    /*
    Sets how OpenGL stores and loads pixels as a number of bytes.
    */
    blueprint action PixelStorageMode(integer type, integer parameter)

    /*
    Sets an option identified by the parameterType code inside the texture
    identified by the given targetTexture ID using the given parameterValue. 
    */
    blueprint action SetTextureParameter(integer targetTexture, integer parameterType, integer parameterValue)

    /*
    This action returns the maximum number of textures that can be supported on the system. This number depends
    on the local hardware being used.
    */
    blueprint action GetMaximumTextureCount returns integer

    /*
    This action sets the "active texture" within the rendering system. When using other texture-modifying graphics
    commands that don't explicitly use a specific texture, the modifications will apply to the active texture.
    */
    blueprint action SetActiveTextureID(integer id)

    /*
    This action returns log information for the given shader, or the empty string if no log information is available.
    Typically this is used to get error information from a shader.
    */
    blueprint action GetShaderLog(integer shaderID) returns text

    /*
    This action returns log information for a shader program, or the empty string if no log information is available.
    Typically this is used to get error information from a shader program.
    */
    blueprint action GetShaderProgramLog(integer programID) returns text

    /*
    This action takes an ordered array of compiled shaders (at minimum 1 vertex shader and 1 fragment shader). These
    shaders are combined together into a shader program, and an ID for that program is returned. If this process fails
    due to an error, this action will alert an error.
    */
//    blueprint action CreateShaderProgram(Array<Shader> shaders) returns integer

    /*
    This action enables a rendering property in the native rendering system. For example, enabling GL_BLEND will make
    OpenGL blend together pixel fragments (necessary for proper transparency).
    */
    blueprint action EnableProperty(integer property)

    /*
    This action disables a rendering property in the native rendering system. Any property which can be enabled by EnableProperty
    can also be disabled using this action.
    */
    blueprint action DisableProperty(integer property)

    /*
    This action enables or disables writing to the depth buffer.
    */
    blueprint action SetDepthMask(boolean mask)

    /*
    This action sets the function used to determine if a new value should overwrite an old value in the depth buffer. For example,
    a value of GL_LESS ensures that new values will overwrite old values in the depth buffer if they have a lower relative Z value
    than the previous value.
    */
    blueprint action SetDepthFunction(integer function)

    /*
    This action sets the blending function used by the rendering system. This is most commonly used for transparency calculations.
    */
    blueprint action SetBlendFunction(integer sourceFunction, integer destinationFunction)

    /*
    This action determines which faces of objects should be culled by the rendering system. Most commonly, this is set to 
    GL_BACK, which instructs the rendering system not to render back faces of objects (which would face away from the camera).
    */
    blueprint action SetCullFace(integer face)

    /*
    This action takes a range of values between 0 and 1 to indicate how much of the depth buffer should be used. Most commonly,
    this is set to 0 and 1 for the near and far values, respectively, which indicate that the entire range of the depth buffer should be used.
    */
    blueprint action SetDepthRange(number near, number far)

    blueprint action CreateVertexArray returns integer

    blueprint action DeleteVertexArray(integer arrayID)

    blueprint action BindVertexArray(integer arrayID)

    /*
    This action returns an ID for a new buffer in the rendering system. Buffers are used to relay information from the program
    to the graphics card. For example, they are used by VertexBufferObjects to communicate polygons and their associated info
    so they can be rendered. Before a buffer created by this action can be used, it has to be activated first with BindBuffer.

    Attribute: Returns An ID associated with a new buffer.
    */
    blueprint action CreateBuffer returns integer

    /*
    This action activates a buffer and indicates what it should be used for. The first parameter is a code, such as GL_ARRAY_BUFFER,
    that indicates the purpose of the buffer, and the second is an ID generated by "CreateBuffer".

    Attribute: Parameter purpose A code representing what this buffer will be used for.
    Attribute: Parameter bufferID An ID representing the buffer that should be activated.
    */
    blueprint action BindBuffer(integer purpose, integer bufferID)

    /*
    This action deletes a buffer in the rendering system. The ID provided should be an ID that was generated using CreateBuffer.
   
    Attribute: Parameter bufferID An ID representing the buffer to be deleted.
    */
    blueprint action DeleteBuffer(integer bufferID)

    /*
    This action sets the data that is stored in the currently activated buffer (using the BindBuffer action).
    
    Attribute: Parameter purpose A code representing the purpose of the buffer, such as GL_ARRAY_BUFFER.
    Attribute: Parameter buffer The data to be stored in the buffer.
    Attribute: Parameter option A code representing a context-specific option, such as GL_STATIC_DRAW for GL_ARRAY_BUFFER data.
    */
    blueprint action SetBuffer(integer purpose, Number32BitBuffer buffer, integer option)

    /*
    This action sets the data that is stored in the currently activated buffer (using the BindBuffer action).
    
    Attribute: Parameter purpose A code representing the purpose of the buffer, such as GL_ARRAY_BUFFER.
    Attribute: Parameter buffer The data to be stored in the buffer.
    Attribute: Parameter option A code representing a context-specific option, such as GL_STATIC_DRAW for GL_ARRAY_BUFFER data.
    */
    blueprint action SetBuffer(integer purpose, Integer32BitBuffer buffer, integer option)

    /*
    This action sends information stored in the active GL_ARRAY_BUFFER to be drawn by the rendering system. 
    */
    blueprint action DrawBuffer(integer primitiveType, integer offset, integer count)

    /*
    This action renders the vertices stored in the active GL_ARRAY_BUFFER, using the indices stored in the GL_ELEMENTS_ARRAY_BUFFER to determine
    the order of rendering.
    */
    blueprint action DrawIndexedBuffer(integer primitiveType, integer count, integer indexType, integer indicesOffset)

    /*
    This action takes the ID of a compiled shader program and 3 empty HashTables. All three HashTables will be given the names of the uniforms as keys, and
    the HashTables will store a corresponding integer value representing the uniform's location ID, byte size, or type ID (as an OpenGL constant), respectively.
    This action also returns an array containing all of the names of the uniforms in this program.
    */
    blueprint action GetShaderInputTables(integer programID, HashTable<text, integer> locations, HashTable<text, integer> sizes, HashTable<text, integer> types) returns Array<text>

    /*
    This action takes the ID of a compiled shader program and 3 empty HashTables. All three HashTables will be given the names of the inputs as keys, and
    the HashTables will store a corresponding integer value representing the input's location ID, byte size, or type ID (as an OpenGL constant), respectively.
    This action also returns an array containing all of the names of the inputs in this program.
    */
    blueprint action GetVertexInputTables(integer programID, HashTable<text, integer> locations, HashTable<text, integer> sizes, HashTable<text, integer> types) returns Array<text>

    /*

    */
    blueprint action SetDefaultVertexValue(integer location, number x)

    /*

    */
    blueprint action SetDefaultVertexValue(integer location, number x, number y)

    /*

    */
    blueprint action SetDefaultVertexValue(integer location, number x, number y, number z)

    /*

    */
    blueprint action SetDefaultVertexValue(integer location, number x, number y, number z, number w)

    /*

    */
    blueprint action SetVertexInputID(integer programID, integer inputID, text name)

    

    /*
    This action will enable a vertex input within the shader system. Whenever a polygon is sent to the rendering system,
    each vertex must provide input data for each enabled vertex input.

    Attribute: Parameter inputID An ID that identifies a particular vertex input.
    */
    blueprint action EnableVertexInput(integer inputID)

    /*
    This action will disable a vertex input within the shader system. Whenever a polygon is sent to the rendering system,
    each vertex must provide input data for each enabled vertex input.

    Attribute: Parameter inputID An ID that identifies a particular vertex input.
    */
    blueprint action DisableVertexInput(integer inputID)

    blueprint action SetPixelClipping(integer x, integer y, integer width, integer height)

    blueprint action GetGraphicsErrorCode returns integer

    blueprint action GetGraphicsText(integer code) returns text

    blueprint action GetGraphicsInteger(integer code) returns integer

    action GetGraphicsErrorMessages returns text
        OpenGLConstants constants
        integer code = GetGraphicsErrorCode()

        // If no errors have occurred, we return undefined
        if code = constants:GL_NO_ERROR
            return undefined
        else
            text result = ""

            // The text associated with each error directly mirrors the Khronos documentation at: https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glGetError.xhtml
            repeat until code = constants:GL_NO_ERROR
                if result not= ""
                    result = result + "
"
                end

                if code = constants:GL_INVALID_ENUM
                    result = result + "GL_INVALID_ENUM: An unacceptable value is specified for an enumerated argument."
                elseif code = constants:GL_INVALID_VALUE
                    result = result + "GL_INVALID_VALUE: A numeric argument is out of range."
                elseif code = constants:GL_INVALID_OPERATION
                    result = result + "GL_INVALID_OPERATION: The specified operation is not allowed in the current state."
                elseif code = constants:GL_INVALID_FRAMEBUFFER_OPERATION
                    result = result + "GL_INVALID_OPERATION: The framebuffer object is not complete."
                elseif code = constants:GL_OUT_OF_MEMORY
                    result = result + "GL_OUT_OF_MEMORY: There is not enough memory left to execute the command."
                elseif code = constants:GL_STACK_UNDERFLOW
                    result = result + "GL_STACK_UNDERFLOW: An attempt has been made to perform an operation that would cause an internal stack to underflow. "
                elseif code = constants:GL_STACK_OVERFLOW
                    result = result + "GL_STACK_OVERFLOW: An attempt has been made to perform an operation that would cause an internal stack to overflow."
                else
                    result = result + "Unknown Error: An unknown OpenGL error has occurred."
                end              

                code = GetGraphicsErrorCode()
            end

            return result
        end
    end

end