package Libraries.Game.Graphics

use Libraries.Containers.Array
use Libraries.Compute.Matrix4
use Libraries.Compute.Vector3
use Libraries.Language.Object
use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.ModelData.MeshPart
use Libraries.Game.Graphics.Environment
use Libraries.Game.Graphics.Shaders.ShaderProgram
use Libraries.Game.Graphics.Shaders.ShaderMapping

class Renderable
    
    integer blendingValue = 0

    on create
        // Temporary BLendingATtribute.
        BlendingAttribute blat
        blendingValue = blat:GetBlendedValue()
    end

    public Matrix4 worldTransform
    
    public MeshPart meshPart

    public Material material = undefined

    public Environment environment = undefined

    public Array<Matrix4> bones = undefined

    public Camera camera = undefined

    public ShaderProgram shaderProgram = undefined

    public ShaderMapping shaderMapping = undefined

    /*
    An optional field with an arbitrary object containing additional data for use by a shader.
    This is undefined by default. If it isn't undefined, it's up to the ShaderMapping to determine
    how this data should be used. The default shaders/mappings will typically ignore this value.
    */
    public Object shaderData = undefined

    /*
    Sets this renderable to have all of the same data as the provided renderable.
    */
    action Set(Renderable renderable) returns Renderable
        worldTransform:Set(renderable:worldTransform)
        material = renderable:material
        meshPart:Set(renderable:meshPart)
        bones = renderable:bones
        environment = renderable:environment
        shaderProgram = renderable:shaderProgram
        shaderMapping = renderable:shaderMapping
        shaderData = renderable:shaderData

        return me
    end

    action UsesBlending returns boolean
        return material:HasAttribute(blendingValue)
    end

    action Compare(Object object) returns integer

        Camera cam = GetCamera()

        if not (object is Renderable) or (cam = undefined)
            return parent:Object:Compare(object)
        end

        integer result = 0
        Renderable other = cast(Renderable, object)

        if material = undefined or other:material = undefined
            return parent:Object:Compare(object)
        end

        
        boolean blend1 = UsesBlending()
        if blend1
            BlendingAttribute attribute = cast(BlendingAttribute, material:GetAttribute(blendingValue))
            blend1 = blend1 and attribute:blended
        end
    
        boolean blend2 = other:UsesBlending()
        if blend2
            BlendingAttribute attribute = cast(BlendingAttribute, other:material:GetAttribute(blendingValue))
            blend2 = blend2 and attribute:blended
        end

        if not blend1 = blend2
            if blend1
                result = 1
                return result
            else
                result = -1
                return result
            end
        end

        Vector3 tempV1 = worldTransform:GetTranslation()
        Vector3 tempV2 = other:worldTransform:GetTranslation()

        integer distance = cast(integer, (1000.0 * cam:GetPosition():DistanceSquared(tempV1))) - cast(integer, (1000.0 * cam:GetPosition():DistanceSquared(tempV2)))
        if distance = 0
            result = 0
            return result
        end

        boolean smaller = distance < 0
        if blend1
            smaller = not smaller
        end

        if smaller
            result = -1
        else
            result = 1
        end

        return result
    end

    /*
    Gets the camera from the plugin. Used for sorting purposes.
    */
    private action GetCamera returns Camera
        return camera
    end
end