package Libraries.Game.Graphics

use Libraries.Game.Graphics.DesktopGraphics
use Libraries.Game.Graphics.IOSGraphics
use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Game.Graphics.Shaders.Shader
use Libraries.Game.Graphics.Shaders.ShaderProgram
use Libraries.Containers.Number32BitArray
use Libraries.Game.Graphics.Number32BitBuffer
use Libraries.Game.Graphics.Integer32BitBuffer

/*
The GraphicsManager class represents a Quorum interface with OpenGL in order to
draw on the screen. This is used internally by the Game class, and most users
will not need to interact with this class directly.
*/
class GraphicsManager
 
  /* Note: Currently adding constants as they are needed. Hex values
           need to be translated to integers */

    public constant integer GL_NONE = 0
    public constant integer GL_ZERO = 0
    public constant integer GL_ONE = 1
    public constant integer GL_POINTS = 0
    public constant integer GL_LINES = 1
    public constant integer GL_LINE_LOOP = 2
    public constant integer GL_LINE_STRIP = 3
    public constant integer GL_TRIANGLES = 4
    public constant integer GL_TRIANGLE_STRIP = 5
    public constant integer GL_TRIANGLE_FAN = 6
    public constant integer GL_NEVER = 512
    public constant integer GL_LESS = 513
    public constant integer GL_EQUAL = 514
    public constant integer GL_LEQUAL = 515
    public constant integer GL_GREATER = 516
    public constant integer GL_NOTEQUAL = 517
    public constant integer GL_GEQUAL = 518
    public constant integer GL_ALWAYS = 519
    public constant integer GL_SRC_ALPHA = 770
    public constant integer GL_ONE_MINUS_SRC_ALPHA = 771
    public constant integer GL_FRONT = 1028
    public constant integer GL_BACK = 1029
    public constant integer GL_FRONT_AND_BACK = 1032
    public constant integer GL_BLEND = 3042
    public constant integer GL_SCISSOR_TEST = 3089
    public constant integer GL_UNSIGNED_INT = 5125
    public constant integer GL_FLOAT = 5126
    public constant integer GL_RED = 6403
    public constant integer GL_GREEN = 6404
    public constant integer GL_BLUE = 6405
    public constant integer GL_NEAREST = 9728
    public constant integer GL_LINEAR = 9729
    public constant integer GL_LINEAR_MIPMAP_LINEAR = 9987
    public constant integer GL_NEAREST_MIPMAP_NEAREST = 9984
    public constant integer GL_LINEAR_MIPMAP_NEAREST = 9985
    public constant integer GL_NEAREST_MIPMAP_LINEAR = 9986
    public constant integer GL_MIRRORED_REPEAT = 33648
    public constant integer GL_CLAMP_TO_EDGE = 33071
    public constant integer GL_REPEAT = 10497
    public constant integer GL_TEXTURE_2D = 3553
    public constant integer GL_UNPACK_ALIGNMENT = 3317
    public constant integer GL_TEXTURE_MAG_FILTER = 10240
    public constant integer GL_TEXTURE_MIN_FILTER = 10241
    public constant integer GL_TEXTURE_WRAP_S = 10242
    public constant integer GL_TEXTURE_WRAP_T = 10243
    public constant integer GL_TEXTURE0 = 33984
    public constant integer GL_ARRAY_BUFFER = 34962
    public constant integer GL_ELEMENT_ARRAY_BUFFER = 34963
    public constant integer GL_STATIC_DRAW = 35044
    public constant integer GL_DYNAMIC_DRAW = 35048
    public constant integer GL_FRAGMENT_SHADER = 35632
    public constant integer GL_VERTEX_SHADER = 35633
    public constant integer GL_CULL_FACE = 2884
    public constant integer GL_DEPTH_TEST = 2929
    
    
  
    /*
    The last coordinates that were used to set the drawing region via the
    SetViewport action.
    */
    integer viewportX = 0
    integer viewportY = 0
    integer viewportWidth = 0
    integer viewportHeight = 0

    action SetViewport(integer x, integer y, integer width, integer height)
        viewportX = x
        viewportY = y
        viewportWidth = width
        viewportHeight = height
        SetDrawingRegion(x, y, width, height)
    end

    action GetViewportX returns integer
        return viewportX
    end

    action GetViewportY returns integer
        return viewportY
    end

    action GetViewportWidth returns integer
        return viewportWidth
    end

    action GetViewportHeight returns integer
        return viewportHeight
    end

    /*
    This action sets the color to clear the screen with in OpenGL.
    */
    blueprint action ClearScreenColor(number red, number green, number blue, number alpha)

    /*
    This action clears the screen with the currently stored color in OpenGL.
    */
    blueprint action ClearScreen(integer mask)

    /*
    This action sets how OpenGL interprets virtual coordinates into screen
    coordinates, by setting the screen as though it were at the given virtual
    coordinates with the given width and height.
    */
    private blueprint action SetDrawingRegion(integer x, integer y, integer width, integer height)
  
    /*
    Sets how OpenGL stores and loads pixels as a number of bytes.
    */
    blueprint action PixelStorageMode(integer type, integer parameter)

    /*
    Sets an option identified by the parameterType code inside the texture
    identified by the given targetTexture ID using the given parameterValue. 
    */
    blueprint action SetTextureParameter(integer targetTexture, integer parameterType, integer parameterValue)

    /*
    This action returns the maximum number of textures that can be supported on the system. This number depends
    on the local hardware being used.
    */
    blueprint action GetMaxTextureUnits returns integer

    /*
    This action sets the "active texture" within the rendering system. When using other texture-modifying graphics
    commands that don't explicitly use a specific texture, the modifications will apply to the active texture.
    */
    blueprint action SetActiveTextureID(integer id)

    /*
    This action returns log information for the given shader, or the empty string if no log information is available.
    Typically this is used to get error information from a shader.
    */
    blueprint action GetShaderLog(integer shaderID) returns text

    /*
    This action makes a new shader of the requested type (e.g., FRAGMENT_SHADER or VERTEX_SHADER from the Shader class)
    using the given source code. If the shader code successfully compiles, this action will return an integer ID
    representing that shader. If the shader can't be created or it does not successfully compile, this will alert an error.
    */
    blueprint action CreateShader(integer shaderType, text sourceCode) returns integer

    /*
    This action returns log information for a shader program, or the empty string if no log information is available.
    Typically this is used to get error information from a shader program.
    */
    blueprint action GetShaderProgramLog(integer programID) returns text

    /*
    This action takes an ordered array of compiled shaders (at minimum 1 vertex shader and 1 fragment shader). These
    shaders are combined together into a shader program, and an ID for that program is returned. If this process fails
    due to an error, this action will alert an error.
    */
//    blueprint action CreateShaderProgram(Array<Shader> shaders) returns integer

    /*

    */
    action CreateShaderProgram(ShaderProgram program) returns integer
        // TO-DO: Make this a proper blueprint, add implementation everywhere
        alert("NYI")
    end

    /*
    This action tells the graphics system to render content using the shader program indicated by the provided ID.
    */
    blueprint action UseShaderProgram(integer programID)

    /*
    This action instructs the rendering system to delete the native resources allocated to a shader. After deleting
    a shader, it can't be used by the rendering system unless it's recompiled.
    */
    blueprint action DeleteShader(integer shaderID)

    /*
    This action instructs the rendering system to delete the native resources allocated to a shader program. After deleting
    a shader program, it can't be used by the rendering system unless it's reloaded. Deleting a program doesn't automatically
    delete the shaders attached to it -- those must also be deleted manually.
    */
    blueprint action DeleteShaderProgram(integer programID)

    /*
    This action enables a rendering property in the native rendering system. For example, enabling GL_BLEND will make
    OpenGL blend together pixel fragments (necessary for proper transparency).
    */
    blueprint action EnableProperty(integer property)

    /*
    This action disables a rendering property in the native rendering system. Any property which can be enabled by EnableProperty
    can also be disabled using this action.
    */
    blueprint action DisableProperty(integer property)

    /*
    This action enables or disables writing to the depth buffer.
    */
    blueprint action SetDepthMask(boolean mask)

    /*
    This action sets the function used to determine if a new value should overwrite an old value in the depth buffer. For example,
    a value of GL_LESS ensures that new values will overwrite old values in the depth buffer if they have a lower relative Z value
    than the previous value.
    */
    blueprint action SetDepthFunction(integer function)

    /*
    This action sets the blending function used by the rendering system. This is most commonly used for transparency calculations.
    */
    blueprint action SetBlendFunction(integer sourceFunction, integer destinationFunction)

    /*
    This action determines which faces of objects should be culled by the rendering system. Most commonly, this is set to 
    GL_BACK, which instructs the rendering system not to render back faces of objects (which would face away from the camera).
    */
    blueprint action SetCullFace(integer face)

    /*
    This action takes a range of values between 0 and 1 to indicate how much of the depth buffer should be used. Most commonly,
    this is set to 0 and 1 for the near and far values, respectively, which indicate that the entire range of the depth buffer should be used.
    */
    blueprint action SetDepthRange(number near, number far)

    /*
    This action returns an ID for a new buffer in the rendering system. Buffers are used to relay information from the program
    to the graphics card. For example, they are used by VertexBufferObjects to communicate polygons and their associated info
    so they can be rendered. Before a buffer created by this action can be used, it has to be activated first with BindBuffer.

    Attribute: Returns An ID associated with a new buffer.
    */
    blueprint action CreateBuffer returns integer

    /*
    This action activates a buffer and indicates what it should be used for. The first parameter is a code, such as GL_ARRAY_BUFFER,
    that indicates the purpose of the buffer, and the second is an ID generated by "CreateBuffer".

    Attribute: Parameter purpose A code representing what this buffer will be used for.
    Attribute: Parameter bufferID An ID representing the buffer that should be activated.
    */
    blueprint action BindBuffer(integer purpose, integer bufferID)

    /*
    This action deletes a buffer in the rendering system. The ID provided should be an ID that was generated using CreateBuffer.
   
    Attribute: Parameter bufferID An ID representing the buffer to be deleted.
    */
    blueprint action DeleteBuffer(integer bufferID)

    /*
    This action sets the data that is stored in the currently activated buffer (using the BindBuffer action).
    
    Attribute: Parameter purpose A code representing the purpose of the buffer, such as GL_ARRAY_BUFFER.
    Attribute: Parameter buffer The data to be stored in the buffer.
    Attribute: Parameter option A code representing a context-specific option, such as GL_STATIC_DRAW for GL_ARRAY_BUFFER data.
    */
    blueprint action SetBuffer(integer purpose, Number32BitBuffer buffer, integer option)

    /*
    This action sets the data that is stored in the currently activated buffer (using the BindBuffer action).
    
    Attribute: Parameter purpose A code representing the purpose of the buffer, such as GL_ARRAY_BUFFER.
    Attribute: Parameter buffer The data to be stored in the buffer.
    Attribute: Parameter option A code representing a context-specific option, such as GL_STATIC_DRAW for GL_ARRAY_BUFFER data.
    */
    blueprint action SetBuffer(integer purpose, Integer32BitBuffer buffer, integer option)

    /*
    This action sends information stored in the active GL_ARRAY_BUFFER to be drawn by the rendering system. 
    */
    blueprint action DrawBuffer(integer primitiveType, integer offset, integer count)

    /*
    This action renders the vertices stored in the active GL_ARRAY_BUFFER, using the indices stored in the GL_ELEMENTS_ARRAY_BUFFER to determine
    the order of rendering.
    */
    blueprint action DrawIndexedBuffer(integer primitiveType, integer count, integer indexType, integer indicesOffset)

    /*
    This action takes the ID of a compiled shader program and 3 empty HashTables. All three HashTables will be given the names of the uniforms as keys, and
    the HashTables will store a corresponding integer value representing the uniform's location ID, byte size, or type ID (as an OpenGL constant), respectively.
    This action also returns an array containing all of the names of the uniforms in this program.
    */
    blueprint action GetShaderInputTables(integer programID, HashTable<text, integer> locations, HashTable<text, integer> sizes, HashTable<text, integer> types) returns Array<text>

    /*
    This action takes the ID of a compiled shader program and 3 empty HashTables. All three HashTables will be given the names of the inputs as keys, and
    the HashTables will store a corresponding integer value representing the input's location ID, byte size, or type ID (as an OpenGL constant), respectively.
    This action also returns an array containing all of the names of the inputs in this program.
    */
    blueprint action GetVertexInputTables(integer programID, HashTable<text, integer> locations, HashTable<text, integer> sizes, HashTable<text, integer> types) returns Array<text>

    // TO-DO: Properly make this a blueprint and implement it everywhere.
    action SetDefaultVertexValue(integer location, number x, number y, number z, number w)
        alert("NYI")
    end

    // TO-DO: Properly make this a blueprint and implement it everywhere.
    action SetVertexInputID(integer programID, integer inputID, text name)
        alert("NYI")
    end

    /*
    This action sets the value of a shader "uniform" variable to the given input values.
    The uniform is identified by a unique ID that is generated when a shader program using
    that uniform is compiled and linked.
    */
    blueprint action SetShaderInput(integer uniformID, integer value)
    
    /*
    This action sets the value of a shader "uniform" variable to the given input values.
    The uniform is identified by a unique ID that is generated when a shader program using
    that uniform is compiled and linked.
    */
    blueprint action SetShaderInput(integer uniformID, integer value1, integer value2)

    /*
    This action sets the value of a shader "uniform" variable to the given input values.
    The uniform is identified by a unique ID that is generated when a shader program using
    that uniform is compiled and linked.
    */
    blueprint action SetShaderInput(integer uniformID, integer value1, integer value2, integer value3)

    /*
    This action sets the value of a shader "uniform" variable to the given input values.
    The uniform is identified by a unique ID that is generated when a shader program using
    that uniform is compiled and linked.
    */
    blueprint action SetShaderInput(integer uniformID, integer value1, integer value2, integer value3, integer value4)

    /*
    This action sets the value of a shader "uniform" variable to the given input values.
    The uniform is identified by a unique ID that is generated when a shader program using
    that uniform is compiled and linked.
    */
    blueprint action SetShaderInput(integer uniformID, number value)

    /*
    This action sets the value of a shader "uniform" variable to the given input values.
    The uniform is identified by a unique ID that is generated when a shader program using
    that uniform is compiled and linked.
    */
    blueprint action SetShaderInput(integer uniformID, number value1, number value2)

    /*
    This action sets the value of a shader "uniform" variable to the given input values.
    The uniform is identified by a unique ID that is generated when a shader program using
    that uniform is compiled and linked.
    */
    blueprint action SetShaderInput(integer uniformID, number value1, number value2, number value3)

    /*
    This action sets the value of a shader "uniform" variable to the given input values.
    The uniform is identified by a unique ID that is generated when a shader program using
    that uniform is compiled and linked.
    */
    blueprint action SetShaderInput(integer uniformID, number value1, number value2, number value3, number value4)
    
    /*
    This action sets the values of a shader "uniform" array variable. The uniform is identified by a unique ID
    that is generated when a shader program using the uniform is compiled and linked. 

    Attribute: Parameter uniformID An integer ID that represents a uniform in a linked shader program.
    Attribute: Parameter array A typed array containing the values to copy to the uniform.
    Attribute: Parameter startIndex The first index of the array to begin copying.
    Attribute: Parameter length How many elements should be copied from the input array to the uniform array.
    */
    blueprint action SetShaderInputArray(integer uniformID, Number32BitArray array, integer startIndex, integer length)

    /*
    This action sets the values of an array of Vector2's in a shader "uniform" array variable. The uniform is identified by a unique ID
    that is generated when a shader program using the uniform is compiled and linked. 

    Attribute: Parameter uniformID An integer ID that represents a uniform in a linked shader program.
    Attribute: Parameter array A typed array containing the values to copy to the uniform.
    Attribute: Parameter startIndex The first index of the array to begin copying.
    Attribute: Parameter length How many elements should be copied from the input array to the uniform array.
    */
    blueprint action SetShaderInputVector2Array(integer uniformID, Number32BitArray array, integer startIndex, integer length)

    /*
    This action sets the values of an array of Vector3's in a shader "uniform" array variable. The uniform is identified by a unique ID
    that is generated when a shader program using the uniform is compiled and linked. 

    Attribute: Parameter uniformID An integer ID that represents a uniform in a linked shader program.
    Attribute: Parameter array A typed array containing the values to copy to the uniform.
    Attribute: Parameter startIndex The first index of the array to begin copying.
    Attribute: Parameter length How many elements should be copied from the input array to the uniform array.
    */
    blueprint action SetShaderInputVector3Array(integer uniformID, Number32BitArray array, integer startIndex, integer length)

    /*
    This action sets the values of an array of Vector4's in a shader "uniform" array variable. The uniform is identified by a unique ID
    that is generated when a shader program using the uniform is compiled and linked. 

    Attribute: Parameter uniformID An integer ID that represents a uniform in a linked shader program.
    Attribute: Parameter array A typed array containing the values to copy to the uniform.
    Attribute: Parameter startIndex The first index of the array to begin copying.
    Attribute: Parameter length How many elements should be copied from the input array to the uniform array.
    */
    blueprint action SetShaderInputVector4Array(integer uniformID, Number32BitArray array, integer startIndex, integer length)

    /*
    This action sets the value of a Matrix4 shader "uniform" variable. The uniform is identified by a unique ID
    that is generated when a shader program using the uniform is compiled and linked. The array is assumed to provide
    the matrix in column-major order, unless the transpose flag is set to true, in which case it will be assumed to be
    row-major instead. 

    Attribute: Parameter uniformID An integer ID that represents a uniform in a linked shader program.
    Attribute: Parameter array A typed array containing the values to copy to the uniform.
    Attribute: Parameter transpose If set to true, the uniform will be set to the transpose of the Matrix.
    */
    action SetShaderInputMatrix4(integer uniformID, Number32BitArray array, boolean transpose)
        SetShaderInputMatrix4Array(uniformID, 1, array, 0, transpose)
    end

    /*
    This action sets the value of an array of Matrix4's in a shader "uniform" variable. The uniform is identified by a unique ID
    that is generated when a shader program using the uniform is compiled and linked. The array is assumed to provide
    the matrix in column-major order, unless the transpose flag is set to true, in which case it will be assumed to be
    row-major instead.

    Attribute: Parameter uniformID An integer ID that represents a uniform in a linked shader program.
    Attribute: Parameter matrixCount How many matrices should be set in the uniform. Each matrix requires 16 sequential values from the source array.
    Attribute: Parameter array A typed array containing the values to copy to the uniform.
    Attribute: Parameter startIndex The first index of the array to begin copying.
    Attribute: Parameter transpose If set to true, the uniform will be set to the transpose of the Matrix.
    */
    blueprint action SetShaderInputMatrix4Array(integer uniformID, integer matrixCount, Number32BitArray array, integer startIndex, boolean transpose)

    /*
    This action sets the value of a Matrix3 shader "uniform" variable. The uniform is identified by a unique ID
    that is generated when a shader program using the uniform is compiled and linked. The array is assumed to provide
    the matrix in column-major order, unless the transpose flag is set to true, in which case it will be assumed to be
    row-major instead. 

    Attribute: Parameter uniformID An integer ID that represents a uniform in a linked shader program.
    Attribute: Parameter array A typed array containing the values to copy to the uniform.
    Attribute: Parameter transpose If set to true, the uniform will be set to the transpose of the Matrix.
    */
    action SetShaderInputMatrix3(integer uniformID, Number32BitArray array, boolean transpose)
        SetShaderInputMatrix3Array(uniformID, 1, array, 0, transpose)
    end

    /*
    This action sets the value of an array of Matrix3's in a shader "uniform" variable. The uniform is identified by a unique ID
    that is generated when a shader program using the uniform is compiled and linked. The array is assumed to provide
    the matrix in column-major order, unless the transpose flag is set to true, in which case it will be assumed to be
    row-major instead.

    Attribute: Parameter uniformID An integer ID that represents a uniform in a linked shader program.
    Attribute: Parameter matrixCount How many matrices should be set in the uniform. Each matrix requires 9 sequential values from the source array.
    Attribute: Parameter array A typed array containing the values to copy to the uniform.
    Attribute: Parameter startIndex The first index of the array to begin copying.
    Attribute: Parameter transpose If set to true, the uniform will be set to the transpose of the Matrix.
    */
    blueprint action SetShaderInputMatrix3Array(integer uniformID, integer matrixCount, Number32BitArray array, integer startIndex, boolean transpose)

    /*
    This action informs the rendering system of how to interpret elements of vertex input data for a particular input.

    Attribute: Parameter inputID An ID that describes a vertex input.
    Attribute: Parameter size How many bytes from the array are needed to set a single instance of the input value in the shader. Must be between 1 and 4.
    Attribute: Parameter type A constant value representing the type of data, such as GL_INT.
    Attribute: Parameter normalize If set to true, fixed-point data values will be normalized when passed down to the system. If set to false, the values will be passed down without modification.
    Attribute: Parameter stride How many bytes of data separate each instance of data meant to be used for this input. If this value is 0, it's assumed that there is no additional data interleaved between data used for this input.
    Attribute: Parameter offset The index of the first element of this input's data in the input buffer, or in other words, how many bytes of data appear before the first instance of input data for this input.
    */
    blueprint action SetVertexInputInformation(integer inputID, integer size, integer type, boolean normalize, integer stride, integer offset)

    /*
    This action informs the rendering system of how to interpret elements of vertex input data for a particular input.

    Attribute: Parameter inputID An ID that describes a vertex input.
    Attribute: Parameter size How many bytes from the array are needed to set a single instance of the input value in the shader. Must be between 1 and 4.
    Attribute: Parameter type A constant value representing the type of data, such as GL_INT.
    Attribute: Parameter normalize If set to true, fixed-point data values will be normalized when passed down to the system. If set to false, the values will be passed down without modification.
    Attribute: Parameter stride How many bytes of data separate each instance of data meant to be used for this input. If this value is 0, it's assumed that there is no additional data interleaved between data used for this input.
    Attribute: Parameter buffer A buffer containing vertex input data.
    */
//    blueprint action SetVertexInputInformation(integer inputID, integer size, integer type, boolean normalize, integer stride, Number32BitBuffer buffer)

    /*
    This action will enable a vertex input within the shader system. Whenever a polygon is sent to the rendering system,
    each vertex must provide input data for each enabled vertex input.

    Attribute: Parameter inputID An ID that identifies a particular vertex input.
    */
    blueprint action EnableVertexInput(integer inputID)

    /*
    This action will disable a vertex input within the shader system. Whenever a polygon is sent to the rendering system,
    each vertex must provide input data for each enabled vertex input.

    Attribute: Parameter inputID An ID that identifies a particular vertex input.
    */
    blueprint action DisableVertexInput(integer inputID)

    blueprint action SetPixelClipping(integer x, integer y, integer width, integer height)

end