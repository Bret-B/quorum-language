package Libraries.Game.Graphics.Fonts

use Libraries.System.File
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Game.Graphics.Glyph
use Libraries.Game.Graphics.Color
use Libraries.System.Properties
use Libraries.Containers.Iterator
use Libraries.Game.Graphics.Fonts.all

/*
The FontKitStrategy class is used to handle font loading and usage on web 
browsers. Most users will not need to use this class directly, as the action 
calls are done within the Font class.

Attribute: Example

    use Libraries.Game.Graphics.Font
    use Libraries.Game.Graphics.Label
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            Font font
            Label label
            if not font:IsFontAvailable("Veranda")
                output "The font could not be found!"
                return now
            end
            font:LoadFont("Veranda")
            font:SetSize(18)
            label:SetFont(font)
            label:SetText("Hello world!")
            Add(label)
        end
    end
*/
class FontKitStrategy is FontStrategy
    
    integer size = 14

    boolean initialized = false

    action SetStyle(text style)

    end

    action ChangeSubFont(text style)

    end

    /*
    This action loads a font from a given font file. 

    Attribute: Parameter fontFile The font file to load.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.System.File
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                File file
                file:SetPath("CustomFont.ttf")
                font:LoadFont(file)
            end
        end
    */
    action LoadFont(File fontFile)
        LoadFontNative(fontFile)
        initialized = true
    end

    private system action LoadFontNative(File fontFile)

    /*
    This action will load a font by name from the system. On Windows, this will
    search for fonts in "C:\Windows\Fonts". On Mac, this will search for fonts
    in "/Library/Fonts".

    Attribute: Parameter fontName The name of the font to load.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
            end
        end
    */
    action LoadFont(text fontName)
        LoadFontNative(fontName)
        initialized = true
    end

    private system action LoadFontNative(text fontName)

    /*
    This action will look in the default system font folder and look for a font
    of the given name. If a font is found with the same name, the action will
    return true. Otherwise, it returns false.

    Attribute: Parameter fontName The name of the font to load.

    Attribute: Returns Returns true if the font is on the system, and false if it is not.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                boolean hasFont = font:IsFontAvailable("Times New Roman")
            end
        end
    */
    system action IsFontAvailable(text fontName) returns boolean

    /*
    This action will set the size of the font. The default font size is 14.

    Attribute: Parameter newSize The size to change the font to.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:SetSize(16)
            end
        end
    */
    action SetSize (integer newSize)
        size = newSize
        if initialized
            SetSizeNative(newSize)
        end
    end

    private system action SetSizeNative(integer size)

    /*
    This action will return the current size of the font. The default font size
    is 14.

    Attribute: Returns Returns the current size of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                output "The default font size is " + font:GetSize()
            end
        end
    */
    action GetSize returns integer
        return size
    end

    /*
    This action will rotate the characters produced by this font by the given
    number of degrees. This functionality is not currently supported for FontKit
    (web browser) fonts.

    Attribute: Parameter rotation The number of degrees to rotate the font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:Rotate(45)
            end
        end
    */
    action Rotate(number rotation)
        // Do nothing. Not currently supported for this font type.
    end

    /*
    This action will set the angle in degrees of the characters produced by this
    font. This functionality is not currently supported for FontKit (web
    browser) fonts.

    Attribute: Parameter newAngle The number of degrees to angle the font by.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:SetAngle(90)
            end
        end
    */
    action SetAngle(number newAngle)
        // Do nothing. Not currently supported for this font type.
    end

    /*
    This action will set the color of the characters produced by this font.

    Attribute: Parameter newColor The color to use for this font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                Color color
                font:SetColor(color:Orange())
            end
        end
    */
    system action SetColor(Color newColor)

    /*
    This action will return the color of the characters produced by this font.

    Attribute: Returns The color being used by this font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                Color color = font:GetColor()
            end
        end
    */
    system action GetColor returns Color

    /*
    This action will return the current angle of the font. For FontKit fonts,
    rotation isn't supported, so this always returns 0.

    Attribute: Returns Returns 0.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                output "The font has an angle of " + font:GetAngle() + " degrees."
            end
        end
    */
    action GetAngle returns number
        return 0
    end

    /*
    This action will release the resources used by a loaded font. The Font 
    object will no longer be usable until another font is loaded.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                font:Dispose()
            end
        end
    */
    system action Dispose

    /*
    This action will return a Glyph object for this font's representation of the
    given character. 

    Attribute: Parameter character The character to create a glyph of.

    Attribute: Returns Returns a glyph representation of the character.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Graphics.Glyph
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                Glyph a = font:GetGlyph("a")
            end
        end
    */
    system action GetGlyph(text character) returns Glyph

    /*
    This action will return the kerning value of two consecutive characters.

    Attribute: Parameter currentCharacter The first character in the pair.

    Attribute: Parameter nextCharacter The second character in the pair.

    Attribute: Returns Returns the kerning value between two characters.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                integer kerning = font:GetKerning("Y", "a")
            end
        end
    */
    system action GetKerning(text currentCharacter, text nextCharacter) returns integer

    /*
    This action will check if the font has been loaded yet. If the font has
    been loaded, this will return true. Otherwise, it will return false.
    
    Attribute: Returns Returns true if the font is loaded, and false if it is not.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                boolean loaded = font:IsLoaded()
            end
        end
    */
    action IsLoaded returns boolean
        return initialized and FinishedLoading()
    end

    /*
    FontKits loads asynchronously. Due to this, it's not enough to know that
    we've sent the request to load -- it also must have finished the request.
    */
    private system action FinishedLoading returns boolean

    /*
    This action will return the height of each line of text produced by this font.

    Attribute: Returns Returns the height of a line of text for this font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                integer height = font:GetLineHeight()
            end
        end
    */
    system action GetLineHeight returns integer

    /*
    This action will return an array of all files found in the system's default
    font folder.

    Attribute: Returns Returns an array with all the font files on the system.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.System.File
        use Libraries.Containers.Array
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                Array<File> fontFiles = font:GetAvailableFonts()
                integer index = 0
                output "The following fonts are available on the system: "
                repeat fontFiles:GetSize() times
                    File temp = fontFiles:Get(index)
                    output temp:GetPath()
                    index = index + 1
                end
            end
        end
    */
    system action GetAvailableFonts returns Array<File>

    system action GetMaximumAscent returns integer

    system action GetMaximumDescent returns integer

    system action GetLineGap returns integer

end
