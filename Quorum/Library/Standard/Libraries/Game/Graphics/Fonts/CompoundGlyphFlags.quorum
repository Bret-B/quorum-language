package Libraries.Game.Graphics.Fonts

use Libraries.Game.Graphics.Fonts.all
use Libraries.Compute.BitwiseOperations

/*
The CompoundGlyphFlags class is used to store and process the flags of components
of compound glyphs, as well as maintain information about the components such as
its location in the glyph table, any scale values, and any reposition/anchor point
values. For more details on these flags and anything else, see the Microsoft
documentation for the "glyf" table.

Attribute: Example

    use Libraries.Game.Graphics.Fonts.all
    use Libraries.Game.Game
    
    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            CompoundGlyphFlags flags
            flags:SetFlags(65536)   // maximum 16-bit number, this sets all flags to true
        end 
    end
*/
class CompoundGlyphFlags
    /*16 bit unsigned integer with each bit representing a flag value.*/
    integer flags = -1
    /*The location of the glyph within the glyph table.*/
    integer glyphIndex = -1
    /*True if the arguments are 16 bits, otherwise they are 8 bits and this is false.*/
    boolean arg1And2AreWords = false
    /*True if the arguments are x/y offset values, otherwise they are anchor points and this is false.*/
    boolean argsAreXYValues = false
    /*True if the x/y argument values should be rounded to the nearest gridline, false if not.*/
    boolean roundXYToGrid = false
    /*True if there is a simple scale for the glyph, false if there is not.*/
    boolean weHaveAScale = false
    /*True if there are more components for this glyph, false if this is the last component.*/
    boolean moreComponents = false
    /*True if there is a scale for the x-coordinates and a scale for the y-coordinates,
    false if there is not.*/
    boolean weHaveAnXAndYScale = false
    /*True if there is a 2x2 matrix to use to transform the glyph, false if there is not.*/
    boolean weHaveATwoByTwo = false
    /*True only if the last component of the compound glyph has instructions for hinting.*/
    boolean weHaveInstructions = false
    /*True if this component should use its own metrics rather than the global font file
    metrics, false if not.*/
    boolean useMyMetrics = false
    /*True if this component overlaps with another component of the glyph, false if not.*/
    boolean overlapCompound = false
    /*True if the x/y offset values should be scaled before being applied, false if not.*/
    boolean scaledComponentOffset = false
    /*True if the x/y offset values should not be scaled before being applied, false if not.*/
    boolean unscaledComponentOffset = false
    /*The first argument for the component. This value varies based on the first two
    flags (Arg1And2AreWords and ArgsAreXYValues). If the first flag is set, this is
    a 16 bit number, otherwise it is an 8 bit number. If the second flag is set, this
    is an x-coordinate offset value, otherwise it is an anchor point.*/
    integer argument1 = -1
    /*The second argument for the component. This value varies based on the first two
    flags (Arg1And2AreWords and ArgsAreXYValues). If the first flag is set, this is
    a 16 bit number, otherwise it is an 8 bit number. If the second flag is set, this
    is an x-coordinate offset value, otherwise it is an anchor point.*/
    integer argument2 = -1
    /*A single scale value that is applied to both the x and y coordinates.*/
    number scale = -1
    /*A scale value that is applied only to the x coordinates.*/
    number xScale = -1
    /*A scale value that is applied only to the y coordinates.*/
    number yScale = -1
    /*The first entry in a 2x2 transformation matrix for scaling a glyph.*/
    number xScaleTransform = -1
    /*The second entry in a 2x2 transformation matrix for scaling a glyph.*/
    number zeroOneScaleTransform = -1
    /*The third entry in a 2x2 transformation matrix for scaling a glyph.*/
    number oneZeroScaleTransform = -1
    /*The fourth entry in a 2x2 transformation matrix for scaling a glyph.*/
    number yScaleTransform = -1

    /*
    This action sets the glyph index of the compound glyph component.

    Attribute: Parameter index The glyph index of the glyph.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                flags:SetGlyphIndex(10)
            end
        end
    */
    action SetGlyphIndex(integer index)
        glyphIndex = index
    end

    /*
    This action returns the glyph index of the compound glyph component.

    Attribute: Returns Returns the glyph index of the compound glyph component.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetGlyphIndex()
            end
        end
    */
    action GetGlyphIndex() returns integer
        return glyphIndex
    end

    /*
    This action sets the second entry of the transformation matrix.

    Attribute: Parameter value The second entry of the transformation matrix.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                flags:SetZeroOneScaleTransform(2.0)
            end
        end
    */
    action SetZeroOneScaleTransform(number value)
        zeroOneScaleTransform = value
    end

    /*
    This action returns the second entry of the transformation matrix.

    Attribute: Returns Returns the second entry of the transformation matrix.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetZeroOneScaleTransform()
            end
        end
    */
    action GetZeroOneScaleTransform() returns number
        return zeroOneScaleTransform
    end

    /*
    This action sets the third entry of the transformation matrix.

    Attribute: Parameter value The third entry of the transformation matrix.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                flags:SetOneZeroScaleTransform(2.0)
            end
        end
    */
    action SetOneZeroScaleTransform(number value)
        oneZeroScaleTransform = value
    end

    /*
    This action returns the third entry of the transformation matrix.

    Attribute: Returns Returns the third entry of the transformation matrix.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetOneZeroScaleTransform()
            end
        end
    */
    action GetOneZeroScaleTransform() returns number
        return oneZeroScaleTransform
    end

    /*
    This action sets the fourth entry of the transformation matrix.

    Attribute: Parameter value The fourth entry of the transformation matrix.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                flags:SetYScaleTransform(2.0)
            end
        end
    */
    action SetYScaleTransform(number value)
        yScaleTransform = value
    end

    /*
    This action returns the fourth entry of the transformation matrix.

    Attribute: Returns Returns the fourth entry of the transformation matrix.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetYScaleTransform()
            end
        end
    */
    action GetYScaleTransform() returns number
        return yScaleTransform
    end

    /*
    This action sets the first entry of the transformation matrix.

    Attribute: Parameter value The first entry of the transformation matrix.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                flags:SetXScaleTransform(2.0)
            end
        end
    */
    action SetXScaleTransform(number value)
        xScaleTransform = value
    end

    /*
    This action returns the first entry of the transformation matrix.

    Attribute: Returns Returns the first entry of the transformation matrix.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetXScaleTransform()
            end
        end
    */
    action GetXScaleTransform() returns number
        return xScaleTransform
    end

    /*
    This action sets the x/y scale for the glyph.

    Attribute: Parameter value The scale to apply to all x/y coordinate positions.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                flags:SetScale(1.5)
            end
        end
    */
    action SetScale(number value)
        scale = value
    end

    /*
    This action returns the x/y scale for the glyph.

    Attribute: Returns Returns the x/y scale for the glyph.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetScale()
            end
        end
    */
    action GetScale() returns number
        return scale
    end
    
    /*
    This action sets the scale to be applied only to x-coordinates of this glyph.

    Attribute: Parameter value The scale to apply to x-coordinates of this glyph.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                flags:SetXScale(1.5)
            end
        end
    */
    action SetXScale(number value)
        xScale = value
    end

    /*
    This action returns the scale to be applied only to x-coordinates of this glyph.

    Attribute: Returns Returns the scale to apply only to x-coordinates of this glyph.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetXScale()
            end
        end
    */
    action GetXScale() returns number
        return xScale
    end

    /*
    This action sets the scale to be applied only to y-coordinates of this glyph.
    
    Attribute: Parameter value The scale to apply to x-coordinates of this glyph.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                flags:SetYScale(1.5)
            end
        end
    */
    action SetYScale(number value)
        yScale = value
    end

    /*
    This action returns the scale to be applied only to y-coordinates of this glyph.

    Attribute: Returns Returns the scale to apply only to y-coordinates of this glyph.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetYScale()
            end
        end
    */
    action GetYScale() returns number
        return yScale
    end
    
    /*  
    This action sets the first argument for this component. This value can represent
    either an x-coordinate offset, or an anchor point, depending on the flags set for
    this component.

    Attribute: Parameter value The first argument for this component.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                flags:SetArgument1(34)
            end
        end
    */
    action SetArgument1(integer value)
        argument1 = value
    end

    /*
    This action returns the first argument for this component. This value can represent
    either an x-coordinate offset, or an anchor point, depending on the flags set for
    this component.

    Attribute: Returns Returns the first argument for this component.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetArgument1()
            end
        end
    */
    action GetArgument1() returns integer
        return argument1
    end

    /*
    This action sets the second argument for this component. This value can represent
    either a y-coordinate offset, or an anchor point, depending on the flags set for
    this component.

    Attribute: Parameter value The second argument for this component.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                flags:SetArgument2(34)
            end
        end
    */
    action SetArgument2(integer value)
        argument2 = value
    end

    /*
    This action returns the second argument for this component. This value can represent
    either a y-coordinate offset, or an anchor point, depending on the flags set for
    this component.

    Attribute: Returns Returns the second argument for this component.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetArgument2()
            end
        end
    */
    action GetArgument2() returns integer
        return argument2
    end

    /*
    This action sets the flags of the compound glyph component. The flags themselves
    are stored if needed for use later, but setting the flags here also breaks them
    up and sets each boolean flag value appropriately.

    Attribute: Parameter newFlags The flags of this compound glyph component.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                flags:SetFlags(65536)
            end
        end
    */
    action SetFlags(integer newFlags)
        BitwiseOperations ops
        flags = newFlags

        arg1And2AreWords = ops:And(flags, 1) > 0
        argsAreXYValues = ops:And(flags, 2) > 0
        roundXYToGrid = ops:And(flags, 4) > 0
        weHaveAScale = ops:And(flags, 8) > 0
        moreComponents = ops:And(flags, 32) > 0
        weHaveAnXAndYScale = ops:And(flags, 64) > 0
        weHaveATwoByTwo = ops:And(flags, 128) > 0
        weHaveInstructions = ops:And(flags, 256) > 0
        useMyMetrics = ops:And(flags, 512) > 0
        overlapCompound = ops:And(flags, 1024) > 0
        scaledComponentOffset = ops:And(flags, 2048) > 0
        unscaledComponentOffset = ops:And(flags, 4096) > 0
    end

    /*
    This action returns the 16 bit integer representing the flags for a compound
    glyph component.

    Attribute: Returns Returns the flags for a compound glyph component.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetFlags()
            end
        end
    */
    action GetFlags() returns integer
        return flags
    end

    /*
    This action returns the flag determining if the arguments are 16 bit values
    or 8 bit values. If this returns true they are 16 bit values, and they are
    8 bit values otherwise.

    Attribute: Returns Returns the flag determining the size of the arguments.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetArg1And2AreWords()
            end
        end
    */
    action GetArg1And2AreWords() returns boolean
        return arg1And2AreWords
    end

    /*
    This action returns the flag determining if the arguments are x/y offset values
    or if they are anchor points. If this returns true then they are x/y offset values,
    and they are anchor points otherwise.

    Attribute: Returns Returns the flag determining the argument type.
    
    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetArgsAreXYValues()
            end
        end
    */
    action GetArgsAreXYValues() returns boolean
        return argsAreXYValues
    end

    /*
    This action returns the flag determining whether or not the x/y values should
    be rounded to the nearest grid-line. If this returns true, they should be rounded,
    otherwise they should remain as they are.

    Attribute: Returns Returns the flag determining argument rounding.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetRoundXYToGrid()
            end
        end
    */
    action GetRoundXYToGrid() returns boolean
        return roundXYToGrid
    end 

    /*
    This action returns the flag determining if the compound glyph component has
    a simple scale. If this returns true, there is a scale that should be applied
    to all x/y coordinates of this glyph, otherwise there is no simple scale.

    Attribute: Returns Returns the flag determining if there is a simple scale.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetWeHaveAScale()
            end
        end
    */
    action GetWeHaveAScale() returns boolean
        return weHaveAScale
    end

    /*
    This action returns the flag determining if there are more components in the
    compound glyph after this component. If this returns true, there are more components,
    and if this returns false this is the last component.

    Attribute: Returns Returns the flag determining if there are more components.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetMoreComponents()
            end
        end
    */
    action GetMoreComponents() returns boolean
        return moreComponents
    end

    /*
    This action returns the flag determining if there is an x and a y scale for
    this compound glyph component. If this returns true, there is an x and a y scale
    that should be applied to all x and y coordinates of this component, respectively.
    If this returns false then there is no x and y scale.

    Attribute: Returns Returns the flag determining if there is a separate x and y scale.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetWeHaveAnXAndYScale()
            end
        end
    */
    action GetWeHaveAnXAndYScale() returns boolean
        return weHaveAnXAndYScale
    end

    /*
    This action returns the flag determining if there is a 2x2 transformation
    matrix for this compound glyph component. If this returns true, there is a
    2x2 transformation matrix that should be used to perform a linear transformation
    on the coordinates. If this returns false, there is no 2x2 transformation matrix.

    Attribute: Returns Returns the flag determining if there is a 2x2 transformation matrix.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetWeHaveATwoByTwo()
            end
        end
    */
    action GetWeHaveATwoByTwo() returns boolean
        return weHaveATwoByTwo
    end

    /*
    This action returns the flag determining if there are instructions on how to
    hint the compound glyph. This flag will only ever be set for the last component
    of a compound glyph. If this returns true then there are instructions, and if
    it returns false then there are no instructions.

    Attribute: Returns Returns the flag determining if there are instructions for
    hinting the compound glyph.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetWeHaveInstructions()
            end
        end
    */
    action GetWeHaveInstructions() returns boolean
        return weHaveInstructions
    end

    /*
    This action returns the flag determining if the component should use its own
    metrics instead of those defined in the global font information "head" table.
    If this returns true then it should use its own metrics, otherwise it should
    use the global metrics.

    Attribute: Returns Returns the flag determining if the component should use its own metrics.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetUseMyMetrics()
            end
        end
    */
    action GetUseMyMetrics() returns boolean
        return useMyMetrics
    end

    /*
    This action returns the flag determning if components of the compound glyph
    overlap. This flag will only ever be true for the first component of a compound
    glyph. If this returns true then components overlap, and if it returns false
    then the components do not overlap.

    Attribute: Returns Returns the flag determining if the components overlap.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetOverlapCompound()
            end
        end
    */
    action GetOverlapCompound() returns boolean
        return overlapCompound
    end

    /*
    This action returns the flag determining whether or not the x/y offset values
    should be applied before scaling the component or after. If this returns true
    then they should be applied before scaling, and if this returns false they
    should be applied after scaling the component.

    Attribute: Returns Returns the flag determining if the x/y offsets should be scaled.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetScaledComponentOffset()
            end
        end
    */
    action GetScaledComponentOffset() returns boolean
        return scaledComponentOffset
    end

    /*
    This action returns the flag determining whether or not the x/y offset values
    should be applied before scaling the component or after. If this returns true
    then they should be applied after scaling, and if this returns false they should
    be applied before scaling the component.

    Attribute: Returns Returns the flag determining if the x/y offsets should be scaled.
    
    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CompoundGlyphFlags flags
                output flags:GetUnscaledComponentOffset()
            end
        end
    */
    action GetUnscaledComponentOffset() returns boolean
        return unscaledComponentOffset
    end
end