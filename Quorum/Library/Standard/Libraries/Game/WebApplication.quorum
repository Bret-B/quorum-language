package Libraries.Game

use Libraries.Game.Application
use Libraries.Game.Game
use Libraries.Game.WebConfiguration
use Libraries.Interface.Accessibility.WebAccessibility
use Libraries.Game.GameStateManager

class WebApplication is Application
    
    /*
    Sets up the application and starts the main application loop.
    */
    action Setup(Game game)
        GameStateManager manager
        // The code below initializes accessibility for the web.
        // As it's not yet finished, it's commented out for now.
        
        if manager:GetOperatingSystem():Contains("Web Browser")
            WebAccessibility accessibility
            game:SetAccessibility(accessibility)
        end
        
        parent:Application:Setup(game)
        SetGame(game)

        SetupNative()
    end

    private system action SetGame(Game game)

    /*
    Sets the WebConfiguration to be used by the application during the main
    loop.
    */
    system action SetConfiguration(WebConfiguration config)

    /*
    Returns the WebConfiguration in use by the application.
    */
    system action GetConfiguration returns WebConfiguration

    /*
    Sets the fpsInterval, lastTime, and currentTime values, then starts the main
    loop (in JavaScript).
    */
    private system action SetupNative

    /*
    This action tells the game to close at the end of the next iteration of
    the main loop. It is called automatically by the Game class's Exit action.
    */
    system action Exit

    /*
    This action outputs a message to the developer console in the web browser.
    
    Attribute: Parameter message The message to print to the developer console.
    Attribute: Example
    use Libraries.Game.Game
    use Libraries.Game.GameStateManager
    use Libraries.Game.WebApplication

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            // Get the WebApplication class from the GameStateManager.
            // Note that this code will crash if the application isn't running on the web,
            // because we aren't double-checking to make sure the application is a WebApplication first.
            GameStateManager manager
            WebApplication app = cast(WebApplication, manager:GetApplication())
            app:Log("Hello world!")
        end
    end
    */
    system action Log(text message)

end