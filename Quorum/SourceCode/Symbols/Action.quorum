package Libraries.Language.Compile.Symbol

use Libraries.Containers.List
use Libraries.Containers.Iterator
use Libraries.Containers.HashTable
use Libraries.Language.Compile.CodeCompletionItem
use Libraries.Language.Support.CompareResult
use Libraries.System.File

class Action is Symbol
    List<Variable> parameters
    HashTable<text, Variable> parameterHash
    boolean isBlueprint = false
    boolean isSystem = false
    Type returnType = undefined
    Block block = undefined
    Class parentClass = undefined
    integer bytecodeLocation = 1 //always start skipping "this"
    boolean isPrivate = false
    boolean isPublic = true
    Location headerLocation = undefined
    Location nameLocation = undefined
    Location returnLocation = undefined
    List<Location> callLocations
    HashTable<text, List<Location>> callLocationHash
    List<ActionCallResolution> actionCalls

    action AddCallLocation(Location location) 
        File file = location:GetFile()
        if file = undefined
           return now //ignore if this isn't supported
        end
        index = location:GetIndex()
        theEnd = location:GetIndexEnd()
        par = GetParentClass():GetName()
        act = GetName()
        text path = file:GetAbsolutePath()
        
        List<Location> list = undefined
        if callLocationHash:HasKey(path)
            list = callLocationHash:GetValue(path)
        end

        if list = undefined
            List<Location> list2
            list = list2
            callLocationHash:Add(path, list)
        end

        list:Add(location)
    end

    action RemoveCallLocations(File file)
        text path = file:GetAbsolutePath()
        if callLocationHash:HasKey(path)
            callLocationHash:RemoveKey(path)
        end
    end

    action GetCallLocationIterator(File file) returns Iterator<Location>
        text path = file:GetAbsolutePath()
        if callLocationHash:HasKey(path)
            List<Location> loc = callLocationHash:GetValue(path)
            return loc:GetIterator()
        end

        return undefined
    end

    /*
        This action receives any action calls that exist inside of this action.
    */
    action AddActionCalls(ActionCallResolution call)
        actionCalls:Add(call)
    end

    action GetActionCalls returns Iterator<ActionCallResolution>
        return actionCalls:GetIterator()
    end

    action GetReturnLocation returns Location
        return returnLocation
    end

    action SetReturnLocation(Location location) 
        returnLocation = location
    end

    action GetNameLocation returns Location
        return nameLocation
    end

    action SetNameLocation(Location location)
        nameLocation = location
    end

    action GetHeaderLocation returns Location
        return headerLocation
    end

    action SetHeaderLocation(Location location)
        headerLocation = location
    end

    action IsPublic returns boolean
        return isPublic
    end

    action GetAllLocalVariables returns Iterator<Variable>
        List<Variable> list
        //get all variables from all blocks/sub-blocks and toss them in the list.
        //this includes parameters.
        if parameters not= undefined
            Iterator<Variable> params = parameters:GetIterator()
            repeat while params:HasNext()
                Variable var = params:Next()
                list:Add(var)
            end
        end

        if block not= undefined
            AddVariablesFromBlock(list, block)
        end

        return list:GetIterator()
    end

    private action AddVariablesFromBlock(List<Variable> variables, Block b)
        i = 0
        repeat while i < b:GetSubBlockSize()
            Block b2 = b:GetBlock(i)
            AddVariablesFromBlock(variables, b2)
            i = i + 1
        end

        Iterator<Variable> params = b:GetVariables()
        repeat while params:HasNext()
            Variable var = params:Next()
            variables:Add(var)
        end
    end

    action SetPublic
        isPublic = true
        isPrivate = false
    end

    action IsPrivate returns boolean
        return isPrivate
    end

    action SetPrivate
        isPublic = false
        isPrivate = true
    end
    action GetBlock returns Block
        return block
    end

    action SetBlock(Block block)
        block:SetParentAction(me)
        block:SetParentClass(GetParentClass())
        if me:block = undefined
            me:block = block
        end
    end

    action AddParameter(Variable parameter)
        Type type = parameter:GetType()
        integer size = type:GetBytecodeSize()
        parameter:SetBytecodeLocation(bytecodeLocation)
        bytecodeLocation = bytecodeLocation + size

        parameters:Add(parameter)
        parameterHash:Add(parameter:GetStaticKey(), parameter)
    end

    action GetBytecodeLocation returns integer
        return bytecodeLocation
    end

    action GetParameter(text key) returns Variable
        return parameterHash:GetValue(key)
    end

    action GetParametersSize returns integer
        return parameters:GetSize()
    end

    action GetParentClass returns Class
        return parentClass
    end

    action SetParentClass(Class clazz)
        parentClass = clazz
    end

    action GetCodeCompletionItem(Variable variable) returns CodeCompletionItem
        CodeCompletionItem item
        if GetParametersSize() = 0
            item:isActionWithoutParameters = true
        end

        if IsPublic()
            if IsBlueprint()
                item:SetType(item:PUBLIC_BLUEPRINT_ACTION)
            elseif IsSystem()
                item:SetType(item:PUBLIC_SYSTEM_ACTION)
            else
                item:SetType(item:PUBLIC_ACTION)
            end
        else 
            if IsBlueprint()
                item:SetType(item:PRIVATE_BLUEPRINT_ACTION)
            elseif IsSystem()
                item:SetType(item:PRIVATE_SYSTEM_ACTION)
            else
                item:SetType(item:PRIVATE_ACTION)
            end
        end

        text signature = GetStaticKey()
        
        Iterator<Variable> variables = GetParameterIterator()
        text result = "("
        integer i = 0
        repeat while variables:HasNext()
            Variable param = variables:Next()
            Type type = param:GetType()
            text typeKey = ""
            text key = param:GetStaticKey()
            text name = param:GetName()
            typeKey = GetTypeName(type, variable)

            text value = typeKey + " " + name
            result = result + value
            if variables:HasNext()
                result = result + ", "
            end
            i = i + 1
        end
        result = result + ")"

        Type returnType = GetReturnType()
        //if the return type is void, ignore it. Otherwise, include it
        if not returnType:IsVoid()
            item:rightDisplayText = GetTypeName(returnType, variable)
        end

        text name = GetName()
        text display = name + result

        item:displayText = display
        item:completionText = name

        Documentation doc = GetDocumentation()
        if doc not= undefined
            text value = "<h1>" + display + "</h1>"

            value = value + "<p>" + doc:GetDescription() + "</p>"
            value = value + "<p><strong>Parameters</strong></p>"
            variables = GetParameterIterator()
            integer i2 = 0
            value = value + "<ul>"
            repeat while variables:HasNext()
                Variable param = variables:Next()
                Type type = param:GetType()
                text paramTypeName = GetTypeName(type, variable)
                value = value + "<li>" + paramTypeName + " " + param:GetName()
                text paramDescription = doc:GetParameterDescription(param:GetName())
                if paramDescription not= undefined
                    value = value + ": " + doc:GetParameterDescription(param:GetName()) + "</li>"
                else
                    value = value + "</li>"
                end
                
                i2 = i2 + 1
            end
            value = value + "</ul>"

            if not returnType:IsVoid()
                value = value + "<p><strong>Returns</strong></p>"
                value = value + item:rightDisplayText + ": " + doc:GetReturns()
            end

            text example = doc:GetExample()
            if not example:IsEmpty()
                value = value + "<p><strong>Example</strong></p>"
                value = value + example
            end
            
            item:documentationText = value 
        end
        
        return item
    end

    private action GetTypeName(Type type, Variable variable) returns text
        text result = ""
        boolean mapped = type:IsMappedToGeneric()
        if mapped
            Class clazz = GetParentClass()
            integer i = clazz:GetIndexOfGeneric(type:GetMappedGeneric())
            Type varType = variable:GetType()
            Type t = varType:GetGeneric(i)
            result = t:GetName()
        else
            result = type:GetName()
        end

        if type:GetNumberGenerics() > 0
            Iterator<Type> generics = type:GetGenerics()
            result = result + "<"
            repeat while generics:HasNext()
                Type t = generics:Next()
                result = result + GetTypeName(t, variable)
            end

            result = result + ">"
        end

        return result
    end

    /*
        This action returns true if this is a Main action and false otherwise.
        The rules for determinining this are that 1) it may not be a blueprint
        action, 2) it may not be a system action, 3) it must be named either
        main or Main. 

        Attribute: Returns whether or not the action is a main action.

        Attribute: Example
        use Libraries.Language.Compile.Symbol.Action

        Action act
        boolean test = act:IsMain() //would be false by default
    */
    action IsMain returns boolean
        if isBlueprint
            return false
        end

        if isSystem
            return false
        end

        if not parameters:IsEmpty()
            return false
        end

        if me:GetName() = "Main"
            return true
        end

        return false
    end
    /*
        This Iterator returns the parameters in the action in the order
        in which they are declared.
    */
    action GetParameterIterator returns Iterator<Variable>
        return parameters:GetIterator()
    end

    action IsBlueprint returns boolean
        return isBlueprint
    end

    action SetIsBluePrint(boolean isBlueprint)
        me:isBlueprint = isBlueprint
    end

    action IsSystem returns boolean
        return isSystem
    end

    action SetIsSystem(boolean isSystem)
        me:isSystem = isSystem
    end

    action GetStaticKey returns text
        text key = me:GetName()
        if parameters not= undefined
            Iterator<Variable> params = parameters:GetIterator()
            repeat while params:HasNext()
                Variable variable = params:Next()
                Type varType = variable:GetType()
                key = key + ":" + varType:GetStaticKey()
            end
        end
        return key
    end

    action GetDisplayName returns text
        text key = me:GetName() + "("
        if parameters not= undefined
            Iterator<Variable> params = parameters:GetIterator()
            repeat while params:HasNext()
                Variable variable = params:Next()
                Type varType = variable:GetType()
                key = key + variable:GetDisplayNameWithGenerics()
                if params:HasNext() 
                    key = key + ", "
                end
            end
        end
        
        key = key + ")"

       if not returnType:IsVoid()
            key = key + " returns " + returnType:GetDisplayName()
        end
        return key
    end

    action GetDisplayNameNoReturn returns text
        text key = me:GetName() + "("
        if parameters not= undefined
            Iterator<Variable> params = parameters:GetIterator()
            repeat while params:HasNext()
                Variable variable = params:Next()
                Type varType = variable:GetType()
                key = key + variable:GetDisplayNameWithGenerics()
                if params:HasNext() 
                    key = key + ", "
                end
            end
        end
        
        key = key + ")"
        return key
    end

    action GetDisplayNameNoReturnAsWeb returns text
        text key = ""

        key = key + "" + me:GetName() + "("
        if parameters not= undefined
            Iterator<Variable> params = parameters:GetIterator()
            repeat while params:HasNext()
                Variable variable = params:Next()
                Type varType = variable:GetType()
                key = key + variable:GetDisplayNameWithGenericsAsWeb()
                if params:HasNext() 
                    key = key + ", "
                end
            end
        end
        
        key = key + ")"
        return key
    end

    action GetReturnType returns Type
        return returnType
    end

    action SetReturnType(Type type)
        returnType = type
    end

    action ConvertActionToBytecodeParameterSignature returns text
        text parameters = "("
        Iterator<Variable> it = GetParameterIterator()
        repeat while it:HasNext()
            Variable param = it:Next()
            Type type = param:GetType()
            parameters = parameters + type:ConvertTypeToBytecodeSignature()
        end
        parameters = parameters + ")"

        Type returnType = GetReturnType()
        text returnText = returnType:ConvertTypeToBytecodeSignature()

        return parameters + returnText
    end

    action ConvertActionToBytecodeParameterInterfaceSignature returns text
        text parameters = "("
        Iterator<Variable> it = GetParameterIterator()
        repeat while it:HasNext()
            Variable param = it:Next()
            Type type = param:GetType()
            parameters = parameters + type:ConvertTypeToBytecodeSignatureInterface()
        end
        parameters = parameters + ")"

        Type returnType = GetReturnType()
        text returnText = returnType:ConvertTypeToBytecodeSignatureInterface()

        return parameters + returnText
    end

    action ConvertPrimitiveActionToBytecodeParameterInterfaceSignature returns text
        text parameters = "("

        //check the action name. If it is not GetMaximumValue or GetMinimumValue
        //add on a value corresponding to the parent of this action (e.g., integer, number)
        Class clazz = me:GetParentClass()

        text name = me:GetName()
        boolean addParam = true

        if addParam
            if clazz:GetStaticKey() = "Libraries.Language.Types.Integer"
                parameters = parameters + "I"
            elseif clazz:GetStaticKey() = "Libraries.Language.Types.Number"
                parameters = parameters + "D"
            elseif clazz:GetStaticKey() = "Libraries.Language.Types.Boolean"
                parameters = parameters + "Z"
            elseif clazz:GetStaticKey() = "Libraries.Language.Types.Text"
                parameters = parameters + "Ljava/lang/String;"
            end
        end

        Iterator<Variable> it = GetParameterIterator()
        repeat while it:HasNext()
            Variable param = it:Next()
            Type type = param:GetType()
            parameters = parameters + type:ConvertTypeToBytecodeSignatureInterface()
        end
        parameters = parameters + ")"

        Type returnType = GetReturnType()
        text returnText = returnType:ConvertTypeToBytecodeSignatureInterface()

        return parameters + returnText
    end

    action ConvertActionToJavaScriptName returns text
        //this is a special case where we have a constructor. Return a 
        //different name
        if GetName() = "on create"
            return "constructor_"
        end
        text result = ""
        result = result + GetName()
        Iterator<Variable> params = GetParameterIterator()
        repeat while params:HasNext()
            Variable par = params:Next()
            Type type = par:GetType()
            text t = type:ConvertStaticKeyToJavaScriptName()
            result = result + "$" + t
        end

        return result
    end

    action Compare(Object object) returns integer
        Action right = cast(Action, object)
        text l = GetName()
        text r = right:GetName()

        if l < r
            return -1
        elseif l = r
            return 0
        else
            return 1
        end
    end
//
//    action Compare(Object object) returns CompareResult
//        CompareResult result
//        Action right = cast(Action, object)
//        text l = GetName()
//        text r = right:GetName()
//
//        if l < r
//            result:result = result:SMALLER
//        elseif l = r
//            result:result = result:EQUAL
//        else
//            result:result = result:LARGER
//        end
//        return result
//    end
end