package Libraries.Language.Compile.Context

use Libraries.Containers.List
use Libraries.Language.Compile.Symbol.Variable
use Libraries.Language.Compile.Symbol.Type
use Libraries.Containers.Iterator
use Libraries.Language.Compile.Location
use Libraries.Language.Compile.QuorumSourceListener
use Libraries.Containers.Array

class ActionContext is ParseContext
    public List<Variable> parameters
    public Location actionNameLocation
    public Location returnLocation = undefined
    public text actionName = ""
    public Type returnType = undefined
    public boolean isPublic = true
    public boolean isPrivate = false

    public boolean isBlueprint = false
    public boolean isSystem = false

    public Array<FormalParameterContext> parameterContexts = undefined
    public AssignmentDeclaractionContext returnsStatement = undefined
    public BlockContext block = undefined

    action GetStaticKey returns text
        text key = ""
        key = key + actionName
        Iterator<Variable> it = parameters:GetIterator()
        repeat while it:HasNext()
            Variable var = it:Next()
            Type type = var:GetType()
            key = key + ":" + type:GetStaticKey()
        end

        return key
    end

    action GetParameters returns Iterator<Variable>
        return parameters:GetIterator()
    end

    private action TraverseHeader(QuorumSourceListener listener)
        if parameterContexts not= undefined
            i = 0
            repeat while i < parameterContexts:GetSize()
                FormalParameterContext context = parameterContexts:Get(i)
                context:Traverse(listener)
                i = i + 1
            end
        end
        if returnsStatement not= undefined returnsStatement:Traverse(listener) end
    end

    action Traverse(QuorumSourceListener listener)
        if isBlueprint
            EnterDocumentation(listener)
            listener:EnterBlueprintAction(me)
            listener:EnterActionHeader(me)
            TraverseHeader(listener)
            listener:ExitActionHeader(me)
            ExitDocumentation(listener)
            listener:ExitBlueprintAction(me)
        elseif isSystem
            EnterDocumentation(listener)
            listener:EnterSystemAction(me)
            listener:EnterActionHeader(me)
            TraverseHeader(listener)
            listener:ExitActionHeader(me)
            ExitDocumentation(listener)
            listener:ExitSystemAction(me)
        else
            EnterDocumentation(listener)
            listener:EnterAction(me)
            listener:EnterActionHeader(me)
            TraverseHeader(listener)
            listener:ExitActionHeader(me)
            block:Traverse(listener)
            ExitDocumentation(listener)
            listener:ExitAction(me)
        end
    end
end