package Libraries.Language.Compile

use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.System.DateTime
use Libraries.Containers.Iterator
use Libraries.Language.Compile.Translate.JarGenerator
use Libraries.Web.WebResponder
use Libraries.Web.WebResponse
use Libraries.Web.WebRequest
use Libraries.Containers.Array
use Libraries.System.Console
use Libraries.Compute.Math
use Libraries.Containers.HashTable
use Libraries.Language.Errors.OutOfBoundsError
use Libraries.Language.Compile.Test.CompilerTestSuite
use Libraries.System.SystemHelper
use Libraries.Language.Compile.Symbol.SymbolTable
use Libraries.Language.Compile.Symbol.Class
use Libraries.Language.Compile.Symbol.Action
use Libraries.Language.Compile.Documentation.DocumentationGenerator
use Libraries.Language.Compile.Translate.QuorumOpcode
use Libraries.Language.Compile.Translate.ClassOpcode
use Libraries.Language.Compile.CompilerRequest
use Libraries.Network.NetworkExchangeListener
use Libraries.Network.NetworkExchange
use Libraries.Network.WebServer
use Libraries.Compute.Statistics.DataFrame

class Main is NetworkExchangeListener
    public constant text NAME_FLAG = "-name"
    public constant text COMPILE_FLAG = "-compile"
    public constant text DOCUMENT_FLAG = "-document"
    public constant text DOCUMENT_LIBRARY = "-documentLibrary"
    public constant text ERRORS_FLAG = "-errors"
    public constant text SERVER_FLAG = "-server"
    public constant text WEB_FLAG = "-web"
    public constant text JAVASCRIPT_FLAG = "-javascript"
    public constant text PYTHON_FLAG = "-python"
    public constant text LIBRARY_FLAG = "-library"
    public constant text REGENERATE_STANDARD_LIBRARY = "-setup"
    public constant text TEST_FLAG = "-test"
    public constant text HELP_FLAG = "-help"
    public constant integer DEFAULT_PORT = 1269
    private boolean isWebSetup = false
    HashTable<text, Array<text>> flagValues
    Library sharedLibrary = undefined
    DateTime time

    action Main
        //ProcessConsoleFlags()
        CompileTest()
        //GenerateDocumentation()
        //StartServer(DEFAULT_PORT)
    end

    action GenerateDocumentation(Array<text> fileNames)
        Compiler compiler
        File root
        root:SetPath("")
        compiler:SetOutputFolder(root)

        DateTime time
        File standardLibraryFolder = undefined //compiler:GetStandardLibraryFolder()
        output compiler:GetVersion() + " Compile Test"
        Library library

        if flagValues:HasKey(LIBRARY_FLAG)
            Array<text> names = flagValues:GetValue(LIBRARY_FLAG)
            if names:GetSize() not= 1
                output "I noticed the library flag was used, but it does not have exactly 1 value."
                return now
            else
                path = names:Get(0)
                File libraryPath
                libraryPath:SetWorkingDirectory(path)
                libraryPath:SetPath("Standard")
                compiler:SetStandardLibraryFolder(libraryPath)
                library:SetLocation(libraryPath)
            end
        else 
            standardLibraryFolder = compiler:GetStandardLibraryFolder()
            compiler:SetStandardLibraryFolder(standardLibraryFolder)
            library:SetLocation(standardLibraryFolder)
        end

        File outputLocation
        outputLocation:SetPath("Library/Compiled")
        output "Scanning"
        number start = time:GetEpochTime()
        
        library:SetCachingLibraryOpcodes(true)
        library:SetLocation(standardLibraryFolder)
        library:SetOutputFolder(outputLocation)
        library:Scan()

        Array<File> files
        i = 0
        repeat fileNames:GetSize() times
            text fileName = fileNames:Get(i)
            File file
            file:SetPath(fileName)
            files:Add(file)
            i = i + 1
        end
        
        File main = files:Get(0)

        output "Compiling Project"
        CompilerRequest request
        request:files = files
        request:library = library
        request:main = main
        CompilerResult result = compiler:Compile(request)
        CompilerErrorManager manager = result:compilerErrorManager
        
        if manager:IsCompilationErrorFree()
            output "Build Successful"
        else
            output manager:GetCompilerErrorsAsText()
            return now
        end

        output "Writing Standard Library to HTML"
        HashTable<text, ClassOpcode> opcodes = result:opcodes
        DocumentationGenerator generator
        generator:SetRunFolder(compiler:GetRunFolder())
        generator:Write(library, opcodes, false)

        number finish = time:GetEpochTime()
        output "Time: " + ((finish - start) / 1000.0) + " seconds"
    end

    action GenerateDocumentation
        Compiler compiler
        File root
        root:SetPath("")
        compiler:SetOutputFolder(root)

        DateTime time
        File standardLibraryFolder = undefined //compiler:GetStandardLibraryFolder()
        output compiler:GetVersion() + " Standard Library Documentation Generator"
        Library library

        if flagValues:HasKey(LIBRARY_FLAG)
            Array<text> names = flagValues:GetValue(LIBRARY_FLAG)
            if names:GetSize() not= 1
                output "I noticed the library flag was used, but it does not have exactly 1 value."
                return now
            else
                path = names:Get(0)
                File libraryPath
                libraryPath:SetWorkingDirectory(path)
                libraryPath:SetPath("Standard")
                compiler:SetStandardLibraryFolder(libraryPath)
                library:SetLocation(libraryPath)
            end
        else 
            standardLibraryFolder = compiler:GetStandardLibraryFolder()
            compiler:SetStandardLibraryFolder(standardLibraryFolder)
            library:SetLocation(standardLibraryFolder)
        end

        File outputLocation
        outputLocation:SetPath("Library/Compiled")
        output "Scanning"
        number start = time:GetEpochTime()
        
        library:SetCachingLibraryOpcodes(true)
        library:SetLocation(standardLibraryFolder)
        library:SetOutputFolder(outputLocation)
        library:Scan()
        output "Writing Standard Library to HTML"
        DocumentationGenerator generator
        generator:SetRunFolder(compiler:GetRunFolder())
        generator:Write(library)

        number finish = time:GetEpochTime()
        output "Time: " + ((finish - start) / 1000.0) + " seconds"
    end

    private action CompileTest
        Compiler compiler

        DateTime time
        File standardLibraryFolder = compiler:GetStandardLibraryFolder()
        compiler:SetStandardLibraryFolder(standardLibraryFolder)
        output compiler:GetVersion() + " Compile Test"

        File outputLocation
        outputLocation:SetPath("Library/Compiled")
        output "Scanning"
        number start = time:GetEpochTime()
        Library library
        library:SetCachingLibraryOpcodes(true)
        library:SetLocation(standardLibraryFolder)
        library:SetOutputFolder(outputLocation)
        library:Scan()
        output ""
        number finish = time:GetEpochTime()
        output "Time: " + ((finish - start) / 1000.0) + " seconds"

        output "Writing Standard Library"
        start = time:GetEpochTime()
        library:Write()
        finish = time:GetEpochTime()
        output "Time: " + ((finish - start) / 1000.0) + " seconds"

        compiler:SetStandardLibrary(library)
        

        output "Compiling"
        start = time:GetEpochTime()
        File root
        root:SetPath("Output")
        compiler:SetOutputFolder(root)
        File compilerRootFolder
        compilerRootFolder:SetWorkingDirectory("/Users/andreasstefik/Repositories/demogames/Bug Buster")
        compilerRootFolder:SetPath("SourceCode")

        File main
        File main2
        File main3
        File main4
        main:SetAbsolutePath(
    "/Users/stefik/Repositories/quorum-language/Quorum/Library/Tests/Expressions/Pass/BoolParens.quorum")
        //main:SetWorkingDirectory("Library/Tests/Game/Pass")
        //main:SetPath("WebTest.quorum")
        main2:SetAbsolutePath(
            "/Users/stefik/Repositories/quorum-language/Quorum/Library/Tests/TypeChecker/Pass/AutoboxTempClass.quorum")

        main3:SetAbsolutePath(
            "/Users/stefik/Repositories/quorum-language/Quorum/Library/Tests/Inheritance/Pass/B5.quorum")

        main4:SetAbsolutePath(
            "/Users/stefik/Repositories/quorum-language/Quorum/Library/Tests/Inheritance/Pass/CIsAB.quorum")

        Array<File> files
//        Array<File> compilerFiles = compilerRootFolder:GetDirectoryListing()
//        i = 0
//        repeat while i < compilerFiles:GetSize()
//            File f = compilerFiles:Get(i)
//            if f:IsDirectory()
//                Array<File> value = f:GetDirectoryListing()
//                j = 0
//                repeat while j < value:GetSize()
//                    File value1 = value:Get(j)
//                     if value1:GetFileName() = "Level.quorum"
//                        a = 5
//                     end
//                    files:Add(value1)
//                    j = j + 1
//                end
//            else
//                files:Add(f)
//            end
//            i = i + 1
//        end
        files:Add(main)
        //compiler:SetMain(main)

        //files = main:GetParentDirectory():GetDirectoryListing()
        //files:Add(compilerRootFolder)
//        files:Add(main2)
//        files:Add(main3)
//        files:Add(main4)

        CompilerRequest request
        request:files = files
        request:library = compiler:GetStandardLibrary()
        request:main = main
        request:SetOutputType(request:PYTHON)
        //request:mainOnlyJavaScript = true
        //request:isWebRequest = true

        start = time:GetEpochTime()
        CompilerResult result = compiler:Compile(request)
        output "    Error Free: " + result:compilerErrorManager:IsCompilationErrorFree()
        finish = time:GetEpochTime()
        output "    Time: " + ((finish - start) / 1000.0) + " seconds"

//        request:symbolTable = result:symbolTable
//        request:opcodes = result:opcodes
//        output "Compile again, but notice nothing needs to be built:"
//        start = time:GetEpochTime()
//        result = compiler:Compile(request)
//        output "    Error Free: " + result:compilerErrorManager:IsCompilationErrorFree()
//        finish = time:GetEpochTime()
//        output "    Time: " + ((finish - start) / 1000.0) + " seconds"

//        request:symbolTable = result:symbolTable
//        request:opcodes = result:opcodes
//        request:recompile = main
//        request:recompileValue = main:Read()
//        output "Compile again, but notice one file needs to be rebuilt, so flush to disk:"
//        start = time:GetEpochTime()
//        result = compiler:Compile(request)
//        output "    Error Free: " + result:compilerErrorManager:IsCompilationErrorFree()
//        finish = time:GetEpochTime()
//        output "    Time: " + ((finish - start) / 1000.0) + " seconds"
//
//        //Compile just one file after reading it in
//        request:symbolTable = result:symbolTable
//        output "Compile just one file and do not write to disk:"
//        request:recompile = main
//        request:recompileValue = main:Read()
//        request:isFastCompileRequest = true
//
//        start = time:GetEpochTime()
//        result = compiler:Compile(request)
//        output "    Error Free: " + result:compilerErrorManager:IsCompilationErrorFree()
//        finish = time:GetEpochTime()
//        output "    Time: " + ((finish - start) / 1000.0) + " seconds"

        CompilerErrorManager errors = result:compilerErrorManager
        if errors:IsCompilationErrorFree()
            output "Build Successful"
            if request:GetOutputType() = request:JAVASCRIPT
                File myOutput
                myOutput:SetWorkingDirectory("Output/Run")
                myOutput:SetPath("TestQuorum.js")
                myOutput:Write(result:convertedJavaScript)
                output "File written."
            elseif request:GetOutputType() = request:PYTHON
                File myOutput
                myOutput:SetWorkingDirectory("Output/Run")
                myOutput:SetPath("Result.py")
                if not myOutput:Exists()
                    myOutput:GetParentDirectory():CreateDirectories()
                end
                output "Outputting python with the result:"
                //output "'" + result:convertedPython + "'"
                myOutput:Write(result:convertedPython)
                output "File written."
            end
        else
            //output errors:GetCompilerErrorsAsDataFrame():ToText()
            output errors:GetCompilerErrorsAsText()
        end
    end

    private action ProcessConsoleFlags
        Console console
        Array<text> flags = console:GetConsoleArguments()

        if flags:IsEmpty()
            output GetHelpText()
            return now
        end

        Array<text> values = undefined
        i = 0
        valueCounter = 0
        repeat while i < flags:GetSize()
            text flag = flags:Get(i)
            if flag:GetCharacter(0) = "-" //it's a flag, process commands until next flag.
                valueCounter = 0
                Array<text> v
                values = v
                //put this new array in the hash. It's empty, but we can still
                //add to it.

                //duplicate?
                if flagValues:HasKey(flag)
                    output "The flag " + flag + " has two or more values, which I do not understand. Each flag can be used only once."
                    return now
                end
                flagValues:Add(flag, values)
            else 

                //is this the first one? If it is, they may be trying to compile
                if i = 0
                    Array<text> newValues
                    flagValues:Add(COMPILE_FLAG, newValues)
                    values = newValues
                end

                //in this case, the user has set a library and is passing files to the compiler to be compiled.
                //Let's not make them type -compile
                if valueCounter = 0 and (flagValues:HasKey(LIBRARY_FLAG) and flagValues:GetSize() = 1)
                    //get the flag values for the library and make sure they are populated.
                    //if they aren't, the user is still putting in the library flag location
                    Array<text> libraryValues = flagValues:GetValue(LIBRARY_FLAG)
                    if not (libraryValues not= undefined and libraryValues:IsEmpty())
                        Array<text> newValues
                        flagValues:Add(COMPILE_FLAG, newValues)
                        values = newValues
                    end
                end
                //is this the first one
                values:Add(flag)
            end
            i = i + 1
        end
        DoFlagActions()
        //DisplayFlagValues()
    end

    action StartServer(integer port)
        Compiler compiler
        compiler:SetOutputType(compiler:JAVASCRIPT)

        CompilerRequest request
        request:SetOutputType(compiler:JAVASCRIPT)

        request:isFastCompileRequest = true
        request:noWritingFiles = true
        request:mainOnlyJavaScript = true

        output "Starting " + compiler:GetVersion() + " Server"
        File root
        root:SetPath("")
        compiler:SetOutputFolder(root)

        //create a standard library for Quorum. It needs 
        File outputLocation
        outputLocation:SetPath("Library/Compiled")
        Library library
        //by default, don't keep track of the extra build information
        //that is required
        library:SetCachingLibraryOpcodes(false)
        library:SetOutputFolder(outputLocation)
        library:SetRegeneratePlugins(false) //don't regenerate on the server.

        if flagValues:HasKey(LIBRARY_FLAG)
            Array<text> names = flagValues:GetValue(LIBRARY_FLAG)
            if names:GetSize() not= 1
                output "I noticed the library flag was used, but it does not have exactly 1 value."
                return now
            else
                path = names:Get(0)
                File libraryPath
                libraryPath:SetWorkingDirectory(path)
                libraryPath:SetPath("Standard")
                compiler:SetStandardLibraryFolder(libraryPath)
                library:SetLocation(libraryPath)
            end
        else 
            File standardLibraryFolder = compiler:GetStandardLibraryFolder()
            compiler:SetStandardLibraryFolder(standardLibraryFolder)
            library:SetLocation(standardLibraryFolder)
        end
        sharedLibrary = library
        isWebSetup = true

        output "Scanning Standard Library."
        library:Scan()

        output "Booting Web Server on port " + port
        WebServer server

        server:Create(port)
        server:Add("/", me)
        output "Listening ..."
        server:Start()
    end

    action ResponseReceived(NetworkExchange exchange)
        text response = "No Quorum Code Sent to Server."
        text query = ""
        check
            HashTable<text, text> params = exchange:GetParameters()
            if params = undefined
                exchange:SendResponseHeaders(200, response)
                exchange:SendResponse(response)
                return now
            end

            constant text MAIN_FILE = "code"
    
            //by default the server sends a parmater called code, with the code in it.
            if not params:HasKey(MAIN_FILE)
                exchange:SendResponseHeaders(200, response)
                exchange:SendResponse(response)
                return now
            end
            query = params:GetValue(MAIN_FILE)
            number start = time:GetEpochTime()
    
            Compiler compiler
            File main
            main:SetPath("Main.quorum")
            compiler:SetOutputType(compiler:JAVASCRIPT)
            
            CompilerRequest compilerRequest
            
            Array<text> filesCode
            Array<File> files
            files:Add(main)
            filesCode:Add(query)

            //now add any other files here
            Iterator<text> keys = params:GetKeyIterator()
            repeat while keys:HasNext() 
                text key = keys:Next()
                
                if key not= MAIN_FILE and key not= "Main" //ignore main and code
                    //the name is the File name
                    File file
                    file:SetPath(key + ".quorum")
                    files:Add(file)

                    text theCode = params:GetValue(key)
                    filesCode:Add(theCode)
                end
            end
    
            compilerRequest:recompile = main
            compilerRequest:recompileValue = query
            compilerRequest:SetOutputType(compilerRequest:JAVASCRIPT)
            compilerRequest:main = main
            compilerRequest:library = sharedLibrary
            compilerRequest:files = files
            compilerRequest:filesValues = filesCode
            
            CompilerResult compilerResult = compiler:Compile(compilerRequest)
            CompilerErrorManager manager = compilerResult:compilerErrorManager
    
            response = ""
            if manager:IsCompilationErrorFree()
                response = compilerResult:convertedJavaScript
            else
                response = manager:GetCompilerErrorsAsHTML()
            end
            
            exchange:SendResponseHeaders(200, response)
            exchange:SendResponse(response)
            number stop = time:GetEpochTime()
            output exchange:GetHost() + ": " + time:GetYear() + "-" + time:GetMonth() + "-" + time:GetDayOfMonth() + " " +
                time:GetHour() + ":" + time:GetMinute() + ":" + time:GetSecond() + ", " + (stop - start)
        detect e
            output "------------ ERROR ------------"
            output "Stack Trace"
            output e:GetStackTraceMessage()
            output ""
            output "Status"
            output exchange:GetHost() + ": " + time:GetYear() + "-" + time:GetMonth() + "-" + time:GetDayOfMonth() + " " +
                time:GetHour() + ":" + time:GetMinute() + ":" + time:GetSecond()
            output ""
            output "Code"
            output query
            output "------------ ERROR ------------"
            response = "The compiler server encountered a fatal error and could not fulfill the request"
            exchange:SendResponseHeaders(500, response)
            exchange:SendResponse(response)
        end        
    end

    /*
        Flags are processed by Quorum in a particular order and within certain
        constraints. The -help flag overrides everything, so it is requested, 
        other flags are ignored. If -compile is requested, then -web cannot be. 
        The converse is also true. If the -test flag is issued, there can be no other flags. 
        The name flag can be used in combination with either -web or -compile, 
        but not both.
    */
    private action DoFlagActions
        //first check if the help flag is in there
        if flagValues:HasKey(HELP_FLAG) or
           (flagValues:HasKey(LIBRARY_FLAG) and flagValues:GetSize() = 1)
            output GetHelpText()
            return now
        end
        

        if flagValues:HasKey(TEST_FLAG)
            if flagValues:GetSize() = 1
                RunTestSuite()
                return now
            else
                output "I noticed a -test flag was issued, but this flag can only be requested on its own, not with other flags."
                return now
            end
        end

        if flagValues:HasKey(SERVER_FLAG)
            if flagValues:GetSize() = 1
                StartServer(DEFAULT_PORT)
                return now
            else
                Array<text> values = flagValues:GetValue(SERVER_FLAG)
                if values:GetSize() not= 1
                    output "I noticed the server flag was used, but the port number has more than one value."
                    return now
                else
                    integer port = DEFAULT_PORT
                    check
                        port = cast(integer, values:Get(0))
                        StartServer(port)
                    detect e
                        output "Invalid port number " + values:Get(0)
                    end
                end
                return now
            end
        end

        if flagValues:HasKey(REGENERATE_STANDARD_LIBRARY)
            Array<text> names = flagValues:GetValue(REGENERATE_STANDARD_LIBRARY)
            if names:GetSize() not= 1
                output "I noticed a -setup flag was issued, but this flag requires a path to where to rebuild the standard library."
                return now
            else
                text compilePath = names:Get(0)
                File libraryPath
                libraryPath:SetWorkingDirectory(compilePath)
                CompileStandardLibrary(libraryPath)
            end
        end

        text name = "Default"
        if flagValues:HasKey(NAME_FLAG)
            Array<text> names = flagValues:GetValue(NAME_FLAG)
            if names:GetSize() not= 1
                output "I noticed the name flag was used, but it does not have exactly 1 value."
                return now
            else
                name = names:Get(0)
            end
        end

        if flagValues:HasKey(ERRORS_FLAG)
            if flagValues:GetSize() = 1
                Array<text> names = flagValues:GetValue(ERRORS_FLAG)

                if names:IsEmpty()
                    output "I noticed you asked for a program to be compiled to the web, but that no files were passed."
                    output GetHelpText()
                    return now
                end

                Compile(name, names, false, true)
                return now
            else
                output "I noticed a -errors flag was issued, but this flag can only be requested on its own, not with other flags."
                return now
            end
        end

        if flagValues:HasKey(DOCUMENT_LIBRARY)
            if flagValues:HasKey(WEB_FLAG)
                output "I noticed the compile flag and the web flag were both used. Only one can be passed, otherwise I cannot determine how to package the program."
                return now
            end

            GenerateDocumentation()
            return now
        end

        //
        if flagValues:HasKey(DOCUMENT_LIBRARY)
            if flagValues:HasKey(WEB_FLAG)
                output "I noticed the compile flag and the web flag were both used. Only one can be passed, otherwise I cannot determine how to package the program."
                return now
            end
            Array<text> names = flagValues:GetValue(COMPILE_FLAG)
            if names:IsEmpty()
                output "I noticed you asked for a program to be compiled, but that no files were passed."
                output GetHelpText()
                return now
            end

            GenerateDocumentation(names)
            return now
        end

        if flagValues:HasKey(COMPILE_FLAG)
            if flagValues:HasKey(WEB_FLAG)
                output "I noticed the compile flag and the web flag were both used. Only one can be passed, otherwise I cannot determine how to package the program."
                return now
            end

            Array<text> names = flagValues:GetValue(COMPILE_FLAG)

            if names:IsEmpty()
                output "I noticed you asked for a program to be compiled, but that no files were passed."
                output GetHelpText()
                return now
            end

            Compile(name, names, false, false)
            return now
        end

        if flagValues:HasKey(JAVASCRIPT_FLAG)
            Array<text> names = flagValues:GetValue(JAVASCRIPT_FLAG)

            if flagValues:HasKey(WEB_FLAG) or flagValues:HasKey(COMPILE_FLAG)
                output "I noticed the javascript flag was used with the compile flag or the web flag. Only one can be passed, otherwise I cannot determine how to package the program."
                return now
            end

            if names:IsEmpty()
                output "I noticed you asked for a program to be compiled to JavaScript, but that no files were passed."
                output GetHelpText()
                return now
            end

            Compile(name, names, false, false)
            return now
        end

        if flagValues:HasKey(PYTHON_FLAG)
            Array<text> names = flagValues:GetValue(PYTHON_FLAG)

            if flagValues:HasKey(WEB_FLAG) or flagValues:HasKey(COMPILE_FLAG)
                output "I noticed the python flag was used with the compile flag or the web flag. Only one can be passed, otherwise I cannot determine how to package the program."
                return now
            end

            if names:IsEmpty()
                output "I noticed you asked for a program to be compiled to Python, but that no files were passed."
                output GetHelpText()
                return now
            end

            Compile(name, names, false, false)
            return now
        end

        if flagValues:HasKey(WEB_FLAG)
            if flagValues:HasKey(COMPILE_FLAG)
                output "I noticed the compile flag and the web flag were both used. Only one can be passed, otherwise I cannot determine how to package the program."
                return now
            end

            Array<text> names = flagValues:GetValue(WEB_FLAG)

            if names:IsEmpty()
                output "I noticed you asked for a program to be compiled to the web, but that no files were passed."
                output GetHelpText()
                return now
            end

            Compile(name, names, true, false)
            return now
        end
    end

    private action CompileStandardLibrary(File compilePath)
        Compiler compiler
        text version = compiler:GetVersion()
        Library library
        library:SetOutputFolder(compilePath)

        if flagValues:HasKey(LIBRARY_FLAG)
            Array<text> names = flagValues:GetValue(LIBRARY_FLAG)
            if names:GetSize() not= 1
                output "I noticed the library flag was used, but it does not have exactly 1 value."
                return now
            else
                path = names:Get(0)
                File libraryPath
                libraryPath:SetWorkingDirectory(path)
                libraryPath:SetPath("Standard")
                library:SetLocation(libraryPath)
            end
        else 
            File standardLibraryFolder = compiler:GetStandardLibraryFolder()
            library:SetLocation(standardLibraryFolder)
        end

        DateTime time
        number start = time:GetEpochTime()
        output version + " Standard Library Setup"
        library:SetCachingLibraryOpcodes(true)

        output "Scanning Standard Library. Please wait..."
        library:Scan()

        output "Writing to disk at: " + compilePath:GetAbsolutePath()
        library:Write()

        number finish = time:GetEpochTime()
        number seconds = (finish - start) / 1000.0
        output "Complete in " + seconds + " seconds." 
    end

    private action Compile(text name, Array<text> fileNames, boolean isWebApplication, boolean errorsOnly)
        Array<File> files
        i = 0
        repeat fileNames:GetSize() times
            text fileName = fileNames:Get(i)
            File file
            file:SetPath(fileName)
            files:Add(file)
            i = i + 1
        end

        Compiler compiler
        compiler:SetName(name)
        File root
        root:SetPath("")
        compiler:SetOutputFolder(root)

        //create a standard library for Quorum. It needs 
        File outputLocation
        outputLocation:SetPath("Library/Compiled")
        Library library
        //by default, don't keep track of the extra build information
        //that is required
        library:SetCachingLibraryOpcodes(false)
        library:SetOutputFolder(outputLocation)


        if flagValues:HasKey(LIBRARY_FLAG)
            Array<text> names = flagValues:GetValue(LIBRARY_FLAG)
            if names:GetSize() not= 1
                output "I noticed the library flag was used, but it does not have exactly 1 value."
                return now
            else
                path = names:Get(0)
                File libraryPath
                libraryPath:SetWorkingDirectory(path)
                libraryPath:SetPath("Standard")
                compiler:SetStandardLibraryFolder(libraryPath)
                library:SetLocation(libraryPath)
            end
        else 
            File standardLibraryFolder = compiler:GetStandardLibraryFolder()
            compiler:SetStandardLibraryFolder(standardLibraryFolder)
            library:SetLocation(standardLibraryFolder)
        end

        CompilerRequest request
        boolean javascript = false
        if flagValues:HasKey(JAVASCRIPT_FLAG)
            compiler:SetOutputType(compiler:JAVASCRIPT)
            compiler:SetWritingJavaScriptToDisk(true)
            request:SetOutputType(request:JAVASCRIPT)
        elseif flagValues:HasKey(PYTHON_FLAG)
            compiler:SetOutputType(compiler:PYTHON)
            compiler:SetWritingJavaScriptToDisk(true)
            request:SetOutputType(request:PYTHON)
        end
        
        if not errorsOnly
            output compiler:GetVersion()
        end

        File main = files:Get(0)

        request:main = main
        request:isWebRequest = isWebApplication
        request:library = library
        request:files = files

        CompilerResult result = compiler:Compile(request)
        CompilerErrorManager manager = result:compilerErrorManager

        if manager:IsCompilationErrorFree()
            output "Build Successful"
        else
            if errorsOnly
                output result:compilerErrorManager:GetCompilerErrorsAsJSON(compiler:GetVersion())
            else
                output result:compilerErrorManager:GetCompilerErrorsAsText()
            end
        end
    end

    private action RunTestSuite
        CompilerTestSuite suite
        suite:Main()
    end

    private action DisplayFlagValues
        Iterator<text> keys = flagValues:GetKeyIterator()
        repeat while keys:HasNext()
            text key = keys:Next()
            Array<text> values = flagValues:GetValue(key)
            text result = key
            i = 0
            repeat values:GetSize() times
                if i = 0
                    result = result + ": " + values:Get(i)
                else
                    result = result + ", " + values:Get(i)
                end
                i = i + 1
            end

            output result
        end
    end

    private action GetHelpText returns text
        Compiler compiler
        text help = compiler:GetVersion() + 
"

Valid Quorum Commands include:
    -name This flag tells Quorum to change the name the file is outputs.
    -compile This flag tells Quorum to compile a set of files. If no flag is passed, this is the default.
    -web This flag tells Quorum to convert to a server-side application
    -javascript This flag converts the source code to JavaScript, so it can be run in a browser.
    -test This flag tells Quorum to run its test suite on itself.
    -library If a file path is passed to this flag, we can tell Quorum we have placed its standard library in a different folder.
    -server This flag tells Quorum to start itself as a web server on a particular port. If no parameter is specified, the port 1269 is used.
    -setup If a file path is passed to this flag, it tells Quorum to recompile its standard library. Generally, unless you have modified the standard library, this flag should not be used.
    -help This flag tells Quorum to output this help screen. 

Examples:
Compile a file named Hello.quorum
        java -jar Quorum.jar Hello.quorum
        java -jar Quorum.jar -compile Hello.quorum

Compile Hello.quorum and give the output the name MyProgram
        java -jar Quorum.jar -name MyProgram -compile Hello.quorum

Compile two files, Hello.quorum and Goodbye.quorum
        java -jar Quorum.jar Hello.quorum Goodbye.quorum

Compile Hello.quorum and output the errors to JavaScriptObjectNotation (JSON) format.
        java -jar Quorum.jar -errors Hello.quorum

Start Quorum as a server, accepting requests to compile to JavaScript on port 1269
        java -jar Quorum.jar -server 1269

Visit www.quorumlanguage.com.
"     
        return help
    end

    action Respond(WebRequest request) returns WebResponse
        text result = ""
        WebResponse response
        constant text CODE_REQUEST = "code"
        Compiler compiler
        File main

        File libraryLocation
        //To deploy to a particular server, change this line to the 
        //parent directory for where the standard library is housed.
        libraryLocation:SetWorkingDirectory("/usr/share/tomcat")
        //libraryLocation:SetWorkingDirectory("/Users/stefika/Repositories/quorum-language/Quorum3")
        libraryLocation:SetPath("Library/Standard")
        //output library:GetAbsolutePath()

        //if this is the first time the compiler is called, scan the standard library
        if not isWebSetup

            Library library
            sharedLibrary = library
            library:SetCachingLibraryOpcodes(true)
            library:SetLocation(libraryLocation)
            library:Scan()
            isWebSetup = true
        end
        
        text directory = libraryLocation:GetWorkingDirectory()
        //if there is no code tag, then just ignore the request
        if not request:HasParameter(CODE_REQUEST)
            
            response:SetPageText("No Quorum code was sent to the server.")
            //response:SetPageText(directory)
            return response
        end

        text source = request:GetParameter("code")
        compiler:SetOutputType(compiler:JAVASCRIPT)
        
        CompilerRequest compilerRequest
        
        output compiler:GetVersion()
        Array<File> files
        files:Add(main)

        compilerRequest:recompile = main
        compilerRequest:recompileValue = source
        compilerRequest:SetOutputType(compilerRequest:JAVASCRIPT)
        compilerRequest:main = main
        compilerRequest:library = sharedLibrary
        compilerRequest:files = files
        
        CompilerResult compilerResult = compiler:Compile(compilerRequest)
        CompilerErrorManager manager = compilerResult:compilerErrorManager

        if manager:IsCompilationErrorFree()
            response:SetPageText(compilerResult:convertedJavaScript)
        else
            response:SetPageText(manager:GetCompilerErrorsAsHTML())
        end
        return response
    end
end
