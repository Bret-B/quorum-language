use Libraries.Language.Compile.Compiler
use Libraries.Language.Compile.Library
use Libraries.Language.Compile.CompilerErrorManager
use Libraries.System.File
use Libraries.Containers.Array
use Libraries.Language.Compile.CompilerRequest
use Libraries.Language.Compile.CompilerResult
use Libraries.Language.Compile.Test.CompilerTestResult
use Libraries.System.Process
use Libraries.System.Properties
use Libraries.System.ProcessListener
use Libraries.System.ProcessEvent

class Run is ProcessListener
    boolean javascript = true
    constant text NODE_MAC = "/usr/local/bin/node"
    constant text NODE_WINDOWS = "C:\Program Files\nodejs\node.exe"
    text nodeLocation = undefined
    constant text JAVASCRIPT_DELIMITER = NODE_MAC:GetCarriageReturn()
    text javascriptStandardLibraryText = ""
    Compiler compiler
    text javascriptOutput = ""
    boolean javascriptError = false
    integer javascriptExitCode = 0
    text javascriptErrorOutput = ""

    on create
        nodeLocation = FindNode()
        if nodeLocation not= undefined
            output "Reading JavaScript Standard Library"
            File jsStandardLibrary
            jsStandardLibrary:SetWorkingDirectory(compiler:GetStandardLibraryFolder():GetParentDirectory():GetAbsolutePath())
            jsStandardLibrary:SetPath("Compiled/Run/QuorumStandardLibrary.js")
            javascriptStandardLibraryText = jsStandardLibrary:Read()
        else
            output "Cannot find Node.js. Turning off JavaScript testing."
            testJavaScript = false
        end
    end

    action Main
        output "Single Run of Compiler"
        

        File standardLibraryFolder = compiler:GetStandardLibraryFolder()
        compiler:SetStandardLibraryFolder(standardLibraryFolder)

        output "Scanning Standard Library"
        Library library
        library:outputJavaScript = true
        library:SetCachingLibraryOpcodes(true)
        library:SetLocation(standardLibraryFolder)
        CompilerErrorManager errors = library:Scan()

        //By Default run yourself
        File main
        //main:SetPath("SourceCode/Run.quorum")
        //main:SetAbsolutePath("/Users/stefik/Quorum Studio/ObjectTest/SourceCode/Main.quorum")
        main:SetPath("Library/Tests/Expressions/Pass/AddBooleanText.quorum")
        Array<File> files
        files:Add(main)

        File run
        run:SetPath("Run")
        compiler:SetOutputFolder(run)
        compiler:SetName("Program")

        output "Compiling"
        //now we've gathered all of the files, so compile Quorum Studio
        CompilerRequest request
        request:files = files
        request:mainOnlyJavaScript = true
        request:writeJavaScriptToDisk = false
        request:library = library
        request:SetOutputType(request:JAVASCRIPT)

        
        request:main = main
        CompilerResult result = compiler:Compile(request)
        CompilerErrorManager manager = result:compilerErrorManager
       
        if manager:IsCompilationErrorFree()
            output ""
            output ""
            //output result:convertedJavaScript

            CompilerTestResult test = RunJavaScript(result:convertedJavaScript)
            output "Run without Error: " + test:ranWithoutError
            output javascriptErrorOutput
        else
            output manager:GetCompilerErrorsAsText()
            return now
        end
    end

    action RunJavaScript(text script) returns CompilerTestResult
        CompilerTestResult result
        result:isJavaScriptTest = true

        //First merge the script with the standard library
        File root
        root:SetPath("Output")

        File outFile
        outFile:SetWorkingDirectory(root:GetAbsolutePath())
        outFile:SetPath("Run/Result.js")

        text resultText = javascriptStandardLibraryText + "
" + script 
+ "
Start();
console.log(OuTpUt_$tRiNg_);
"
        if outFile:Exists()
            outFile:Delete()
        end

        outFile:GetParentDirectory():CreateDirectories()
        outFile:Write(resultText)

        //now run the output file in Node.js
        Process process
        process:SetName(nodeLocation)
        
        File processDirectory
        processDirectory:SetAbsolutePath(outFile:GetParentDirectory():GetAbsolutePath())
        process:SetDirectory(processDirectory)

        Array<text> flags
        flags:Add("Result.js")

        process:SetParameters(flags)
        process:AddListener(me)
        //now Run it
        process:Run()  

        Array<text> lines = javascriptOutput:Split(JAVASCRIPT_DELIMITER)  
        if lines not= undefined
            result:lines = lines
        end
        
        if javascriptError
            result:ranWithoutError = false
        else 
            result:ranWithoutError = true
        end
        result:returnCode = javascriptExitCode
        
        return result
    end

    private action FindNode returns text
        text location = undefined
        
        Properties prop
        if prop:IsWindows()
            File nodeLoc
            nodeLoc:SetAbsolutePath(NODE_WINDOWS)
            if nodeLoc:Exists()
                location = NODE_WINDOWS
            end
        elseif prop:IsMac()
            File nodeLoc
            nodeLoc:SetAbsolutePath(NODE_MAC)
            if nodeLoc:Exists()
                location = NODE_MAC
            end
        end
        return location
    end

    action ProcessStarted(ProcessEvent event)
        javascriptError = false
        javascriptOutput = ""
        javascriptErrorOutput = ""
        javascriptExitCode = -1
    end

    action ProcessStopped(ProcessEvent event)
        javascriptExitCode = event:GetExit()
    end

    action Output(ProcessEvent event)
        javascriptOutput = javascriptOutput + event:GetOutput() + JAVASCRIPT_DELIMITER
    end

    action Error(ProcessEvent event)
        javascriptError = true
        javascriptErrorOutput = javascriptErrorOutput + event:GetOutput() + JAVASCRIPT_DELIMITER
    end
end