package Libraries.Compute.Statistics.Transforms

use Libraries.Language.Compile.QuorumSourceListener
use Libraries.Language.Compile.Context.IntegerContext
use Libraries.Language.Compile.Context.EqualsContext
use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Translate.QuorumConstant
use Libraries.Containers.Stack
use Libraries.Language.Compile.Translate.QuorumOpcode
use Libraries.Language.Compile.Symbol.TypeChecker
use Libraries.Language.Compile.Symbol.Operation
use Libraries.Language.Compile.Symbol.TypeCheckResult
use Libraries.Language.Compile.CompilerError
use Libraries.Language.Compile.CompilerErrorManager
use Libraries.Language.Compile.Translate.ComparisonOpcode
use Libraries.Language.Compile.Context.ActionCallContext
use Libraries.Language.Compile.Translate.ActionCallOpcode
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Language.Compile.Symbol.Variable
use Libraries.Language.Compile.CompilerErrorType
use Libraries.Language.Compile.Context.NumberContext
use Libraries.Language.Compile.Translate.BinaryOpcode
use Libraries.Language.Compile.Context.AdditionContext
use Libraries.Language.Compile.Context.InequalityContext
use Libraries.Language.Compile.Context.AndOrContext
use Libraries.Language.Compile.Translate.BinaryAndOrOpcode
use Libraries.Language.Compile.Context.MultiplicationContext
use Libraries.Language.Compile.Context.UndefinedContext
use Libraries.Language.Compile.Context.ParseContext
use Libraries.Language.Compile.Context.BooleanContext
use Libraries.Language.Compile.Context.MeContext
use Libraries.Language.Compile.Context.InputContext
use Libraries.Language.Compile.Context.CastContext
use Libraries.Language.Compile.Context.ParentVariableFunctionCallContext
use Libraries.Language.Compile.Translate.FlipBooleanOpcode
use Libraries.Language.Compile.Context.NotContext
use Libraries.Language.Compile.Translate.NegateUnaryOpcode
use Libraries.Language.Compile.Context.UnaryMinusContext
use Libraries.Language.Interpreter.UnifiedSourceListener
use Libraries.Language.Compile.Parsing.Token
use Libraries.Language.Compile.Context.VariableFunctionCallContext
use Libraries.Containers.HashTable
use Libraries.Containers.Iterator

class DataFrameExpressionListener is UnifiedSourceListener
    Stack<QuorumOpcode> opcodeStack
    DataFrame dataFrame = undefined
    HashTable<text, Variable> variables

    on create
        TypeChecker checker
        SetTypeChecker(checker)
    end

    action Enter(ParseContext context)
    end

    action Exit(ParseContext context)
        Token token = context:GetFirstToken()
        SendDefaultError(context, "DataFrame expressions are intentionally limited and cannot use values like " +
        token:value + " at index " + token:startIndex + ".")
    end

    action ExitNumber(NumberContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetNumberConstant(context:value)

        QuorumConstant const
        const:SetLocation(context:GetLocation())
        const:SetType(type)
        const:numberValue = context:value
        opcodeStack:Push(const)
    end

    action ExitInteger(IntegerContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetIntegerConstant(context:value)

        QuorumConstant const
        const:SetLocation(context:GetLocation())
        const:SetType(type)
        const:integerValue = context:value
        opcodeStack:Push(const)
    end

    private action GetTypeFromColumn(DataFrameColumn column) returns Type
        Type type
        if column:IsIntegerColumn()
            type:SetToInteger()
        elseif column:IsNumberColumn()
            type:SetToNumber()
        elseif column:IsBooleanColumn()
            type:SetToBoolean()
        elseif column:IsTextColumn()
            type:SetToText()
        end

        return type
    end

    action ExitOr(AndOrContext context)
        DoAndOr(context)
    end

    action ExitAnd(AndOrContext context) 
        DoAndOr(context)
    end

    action DoAndOr(AndOrContext context)
        TypeChecker checker = GetTypeChecker()
        QuorumOpcode right = opcodeStack:Pop()
        QuorumOpcode left = opcodeStack:Pop()
        Operation op
        if context:isAnd
            op:SetOperation(op:AND)
        else 
            op:SetOperation(op:OR)
        end

        if left = undefined or right = undefined
            return now //An error has already been issued.
        end

        TypeCheckResult result = checker:Check(left:GetType(), right:GetType(), op)
        CompilerError error = result:GetCompilerError(context:GetLocation())
        if error not= undefined
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:Add(error)
            return now
        end

        Type value = result:result
        BinaryAndOrOpcode binary
        binary:SetLocation(context:GetLocation())
        binary:isAnd = context:isAnd
        binary:SetType(value)
        binary:SetOperation(op)
        binary:left = left
        binary:right = right

        if left is BinaryAndOrOpcode
            BinaryAndOrOpcode theAnd = cast(BinaryAndOrOpcode, left)
            theAnd:hasParent = true
            theAnd:opcodeParent = binary
            theAnd:isOnLeft = true
        end

        if right is BinaryAndOrOpcode
            BinaryAndOrOpcode theAnd = cast(BinaryAndOrOpcode, right)
            theAnd:hasParent = true
            theAnd:opcodeParent = binary
            theAnd:isOnLeft = false
        end
        opcodeStack:Push(binary)
    end

    action ExitMultiplication(MultiplicationContext context) 
        TypeChecker checker = GetTypeChecker()
        QuorumOpcode right = opcodeStack:Pop()
        QuorumOpcode left = opcodeStack:Pop()
        Operation op
        if context:isDivide
            op:SetOperation(op:DIVIDE)
        elseif context:isMultiply
            op:SetOperation(op:TIMES)
        else
            op:SetOperation(op:MODULUS)
        end

        if left = undefined or right = undefined
            return now //An error has already been issued.
        end

        TypeCheckResult result = checker:Check(left:GetType(), right:GetType(), op)
        CompilerError error = result:GetCompilerError(context:GetLocation())
        if error not= undefined
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:Add(error)
            return now
        end

        Type value = result:result
        BinaryOpcode binary = cast(BinaryOpcode, result:GetQuorumOpcode())
        binary:SetLocation(context:GetLocation())
        binary:SetType(value)
        binary:SetLeftOpcode(left)
        binary:SetRightOpcode(right)
        opcodeStack:Push(binary)
    end

    action ExitBoolean(BooleanContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetBooleanConstant(context:value)

        QuorumConstant const
        const:SetLocation(context:GetLocation())
        const:SetType(type)
        const:booleanValue = context:value
        opcodeStack:Push(const)
    end

    action ExitUndefined(UndefinedContext context) 
        SendDefaultError(context, "Cannot use undefined in a DataFrame expression.")
    end

    action ExitCast(CastContext context) 
        SendDefaultError(context, "Cannot cast in a DataFrame expression.")
    end

    action ExitMe(MeContext context) 
        SendDefaultError(context, "Cannot use me values in a DataFrame expression.")
    end

    action ExitInput(InputContext context) 
        SendDefaultError(context, "Cannot ask for user input in a DataFrame expression.")
    end

    action ExitParentVariableFunctionCall(ParentVariableFunctionCallContext context)
        SendDefaultError(context, "Cannot use parent values in a DataFrame expression.")
    end 

    private action SendDefaultError(ParseContext context, text message)
        CompilerError error = CreateCompilerError(context, message)
        CompilerErrorManager manager = GetCompilerErrorManager()
        manager:Add(error)
    end

    private action CreateCompilerError(ParseContext context, text message) returns CompilerError
        CompilerError error
        error:SetLocation(context:GetLocation())
        error:SetErrorMessage(message)
        CompilerErrorType t
        t:SetCurrentType(t:PARSER_NO_VIABLE_ALTERNATIVE)
        error:SetCompilerErrorType(t)
        return error
    end

    action ExitMinus(UnaryMinusContext context) 
        TypeChecker checker = GetTypeChecker()
        QuorumOpcode left = opcodeStack:Pop()

        Operation notOp
        notOp:SetOperation(notOp:MINUS)

        if left = undefined
            return now //An error has already been issued.
        end

        TypeCheckResult result = checker:Check(left:GetType(), notOp) 
        CompilerError error = result:GetCompilerError(context:GetLocation())
        if error not= undefined
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:Add(error)
            return now
        end

        Type value = result:result
        NegateUnaryOpcode binary = cast(NegateUnaryOpcode, result:GetQuorumOpcode())
        binary:SetLocation(context:GetLocation())
        binary:SetType(value)
        binary:SetOpcode(left)
        opcodeStack:Push(binary)
    end

    action ExitNot(NotContext context) 
        TypeChecker checker = GetTypeChecker()
        QuorumOpcode left = opcodeStack:Pop()

        Operation notOp
        notOp:SetOperation(notOp:NOT)

        if left = undefined
            return now //An error has already been issued.
        end

        TypeCheckResult result = checker:Check(left:GetType(), notOp) 
        CompilerError error = result:GetCompilerError(context:GetLocation())
        if error not= undefined
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:Add(error)
            return now
        end

        Type value = result:result
        FlipBooleanOpcode binary = cast(FlipBooleanOpcode, result:GetQuorumOpcode())
        binary:SetLocation(context:GetLocation())
        binary:SetType(value)
        binary:SetOpcode(left)
        opcodeStack:Push(binary)
    end

    action ExitAddition(AdditionContext addition) 
        TypeChecker checker = GetTypeChecker()
        QuorumOpcode right = opcodeStack:Pop()
        QuorumOpcode left = opcodeStack:Pop()
        Operation add
        if addition:isPlus
            add:SetOperation(add:PLUS)
        else
            add:SetOperation(add:MINUS)
        end

        if left = undefined or right = undefined
            return now //An error has already been issued.
        end

        TypeCheckResult result = checker:Check(left:GetType(), right:GetType(), add)
        CompilerError error = result:GetCompilerError(addition:GetLocation())
        if error not= undefined
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:Add(error)
            return now
        end

        Type value = result:result
        BinaryOpcode binary = cast(BinaryOpcode, result:GetQuorumOpcode())
        binary:SetLocation(addition:GetLocation())
        binary:SetType(value)
        binary:SetLeftOpcode(left)
        binary:SetRightOpcode(right)
        opcodeStack:Push(binary)
    end

    //This should do nothing, but ignores the parent error
    action ExitVariableFunctionCall(VariableFunctionCallContext context) end

    

    action GetVariables returns Iterator<Variable>
        return variables:GetValueIterator()
    end

    action GetVariable(text name) returns Variable
        return variables:GetValue(name)
    end

    action HasVariable(text name) returns boolean
        return variables:HasKey(name)
    end

    action GetVariablesSize returns integer
        return variables:GetSize()
    end

    action ExitActionCall(ActionCallContext context)
        if not context:isActionCall
            ActionCallOpcode actionCall
            actionCall:SetLocation(context:GetLocation())

            //get the name of the variable
            text name = context:name
            
            DataFrameColumn column = dataFrame:GetColumn(name)

            if column = undefined //throw an error
                CompilerError error
                error:SetLocation(context:GetLocation())
                error:SetErrorMessage("Cannot find the column '" + name + "' in the " +
                "DataFrame.")
                CompilerErrorType t
                t:SetCurrentType(t:MISSING_VARIABLE)
                error:SetCompilerErrorType(t)
                CompilerErrorManager manager = GetCompilerErrorManager()
                manager:Add(error)
                return now
            end

            Type type = GetTypeFromColumn(column)
            actionCall:SetType(type)
            actionCall:SetIsActionCall(false)

            Variable variable
            variable:SetType(type)
            variable:SetName(name)
            actionCall:SetField(variable)
            variables:Add(name, variable)
            opcodeStack:Push(actionCall)
        else
            CompilerError error
            error:SetLocation(context:GetLocation())
            error:SetErrorMessage("Cannot call actions from a DataFrame.")
            CompilerErrorType t
            t:SetCurrentType(t:MISSING_METHOD)
            error:SetCompilerErrorType(t)
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:Add(error)
            return now
        end
    end

    action ExitInequality(InequalityContext context) 
        TypeChecker checker = GetTypeChecker()
        QuorumOpcode right = opcodeStack:Pop()
        QuorumOpcode left = opcodeStack:Pop()
        Operation add
        if context:isGreater
            add:SetOperation(add:GREATER)
        elseif context:isGreaterEquals
            add:SetOperation(add:GREATER_EQUALS)
        elseif context:isLess
            add:SetOperation(add:LESS)
        elseif context:isLessEquals
            add:SetOperation(add:LESS_EQUALS)
        end

        if left = undefined or right = undefined
            return now
        end
        
        TypeCheckResult result = checker:Check(left:GetType(), right:GetType(), add)
        CompilerError error = result:GetCompilerError(context:GetLocation())
        if error not= undefined
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:Add(error)
            return now
        end

        Type value = result:result
        ComparisonOpcode compare = cast(ComparisonOpcode, result:GetQuorumOpcode())
        compare:SetLocation(context:GetLocation())
        compare:SetType(value)
        compare:SetLeftOpcode(left)
        compare:SetRightOpcode(right)
        opcodeStack:Push(compare)
    end

    action ExitEquals(EqualsContext context) 
        TypeChecker checker = GetTypeChecker()
        QuorumOpcode right = opcodeStack:Pop()
        QuorumOpcode left = opcodeStack:Pop()
        Operation add
        if context:equalsTo
            add:SetOperation(add:EQUALS)
        else
            add:SetOperation(add:NOT_EQUALS)
        end

        if left = undefined or right = undefined
            return now //An error has already been issued.
        end
        
        TypeCheckResult result = checker:Check(left:GetType(), right:GetType(), add)
        CompilerError error = result:GetCompilerError(context:GetLocation())
        if error not= undefined
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:Add(error)
            return now
        end

        Type value = result:result
        ComparisonOpcode compare = cast(ComparisonOpcode, result:GetQuorumOpcode())
        compare:SetLocation(context:GetLocation())
        compare:SetType(value)
        compare:SetLeftOpcode(left)
        compare:SetRightOpcode(right)
        opcodeStack:Push(compare)
    end

    action GetOpcodeStack returns Stack<QuorumOpcode>
        return opcodeStack
    end
    action GetDataFrame returns DataFrame
        return dataFrame
    end

    action SetDataFrame(DataFrame dataFrame)
        me:dataFrame = dataFrame
    end
end