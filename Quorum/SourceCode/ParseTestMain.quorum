use Libraries.Language.Interpreter.Lexer
use Libraries.Language.Interpreter.QuorumLexer
use Libraries.Language.Interpreter.Token
use Libraries.Language.Interpreter.QuorumParser
use Libraries.Language.Compile.Context.ParseContext
use Libraries.Language.Interpreter.ExpressionListener
use Libraries.System.File
use Libraries.Language.Compile.Parser
use Libraries.Containers.Iterator
use Libraries.Language.Compile.Symbol.Class
use Libraries.Language.Compile.Compiler
use Libraries.System.DateTime
use Libraries.Containers.List
use Libraries.Containers.Array
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Statistics.Calculations.Mean
use Libraries.Compute.Statistics.Tests.CompareGroups
use Libraries.Compute.Statistics.Columns.TextColumn
use Libraries.Language.Compile.CompilerErrorManager
/* 
    This is a default class named Main. It has one action, also named Main,
    that starts the program.

    Attribute: Author Andreas Stefik

    Attribute: Example
    use Libraries.System.File
    use Libraries.Language.Interpreter.QuorumLexer
    use Libraries.Language.Compile.CompilerErrorManager

    QuorumLexer lexer
    File file
    file:SetPath("file.quorum")

    CompilerErrorManager errors
    lexer:SetCompilerErrorManager(errors)
    lexer:Read(file)
*/
class ParseTestMain
    DataFrame frame
    TextColumn namesColumn
    NumberColumn antlrTime
    NumberColumn hammerTime
    boolean isFailCase = false
    boolean compareMessages = true
    boolean outputEachTime = false
    boolean allTestsPass = true
    boolean outputEachError = true
    boolean runWithAntlr = true

    on create
        namesColumn:SetHeader("Names")
        antlrTime:SetHeader("Antlr")
        hammerTime:SetHeader("Ours")

        frame:AddColumn(namesColumn)
        frame:AddColumn(antlrTime)
        frame:AddColumn(hammerTime)
    end

    action Parse(File file)
        if file:IsDirectory()
            ParseFolder(file)
        else
            ParseFile(file)
        end
    end

    action OutputTokens(File file)
        QuorumLexer lexer
        lexer:Read(file)
        i = 0
        repeat while i < lexer:GetSize()
            Token token = lexer:GetToken(i)
            output token:value
            i = i + 1
        end
    end

    action ParseFile(File file) returns boolean
        QuorumLexer lexer

        text a = "\"

        CompilerErrorManager antlrManager
        CompilerErrorManager ourManager
        DateTime time
        number start = time:GetEpochTime()
        LogListener listener
        if runWithAntlr
            
            listener:SetCompilerErrorManager(antlrManager)
    
            Compiler compiler
            compiler:ParseNative(file, listener)
        end
        number endAntlr = time:GetEpochTime()
        lexer:SetCompilerErrorManager(ourManager)
        lexer:Read(file)

        LogListener listener2
        if ourManager:IsCompilationErrorFree()
            QuorumParser parser
            parser:SetCompilerErrorManager(ourManager)
            parser:SetLexer(lexer)
    
            ParseContext context = parser:Start()
            if context not= undefined //if there are no errors
                context:Traverse(listener2)
            else
                
            end
        end
        
        number endOurs = time:GetEpochTime()
        number antlrTime = (endAntlr - start)
        number ourTime = (endOurs - endAntlr)
        namesColumn:Add(file:GetPath())
        me:antlrTime:Add(antlrTime)
        me:hammerTime:Add(ourTime)

        
        List<text> antlrResults = listener:GetResult()
        List<text> ourResults = listener2:GetResult()
        
        i = 0
        Iterator<text> antlrator = antlrResults:GetIterator()
        Iterator<text> ourator = ourResults:GetIterator()
        boolean allMatch = true
        integer matchedRows = 0
        if not runWithAntlr
            return true
        end
        if isFailCase 
            //output file:GetPath()
            text match = ""
            if  antlrManager:GetErrorAmount() > 0 and  ourManager:GetErrorAmount() > 0
                match = ", match (errors)"
            elseif antlrManager:GetErrorAmount() = 0 and  ourManager:GetErrorAmount() = 0
                match = ", match (No error)"
            else 
                match = ", NO MATCH " 
                output "Antlr " + antlrManager:GetErrorAmount()
                output "Us " + ourManager:GetErrorAmount()
                output ourManager:GetCompilerErrorsAsText()
                allTestsPass = false
                output file:GetFileName() + ": " + antlrTime + " ms, Ours: " 
                + ourTime + " ms, " + (antlrTime / ourTime) + " speedup" + match

                if compareMessages
                    if outputEachError 
                        
                        output "Antlr: " + antlrManager:GetErrorAmount() + " Us: " + ourManager:GetErrorAmount()
                        if not antlrManager:IsCompilationErrorFree()
                            output antlrManager:GetCompilerErrorsAsText()
                        end
            
                        if not ourManager:IsCompilationErrorFree()
                            output ourManager:GetCompilerErrorsAsText()
                        end
                    end
                end
            end
            
            
            return true
        else
            if  antlrManager:GetErrorAmount() > 0 and  ourManager:GetErrorAmount() > 0
                
            elseif antlrManager:GetErrorAmount() = 0 and  ourManager:GetErrorAmount() = 0
                
            else
                allTestsPass = false
                if compareMessages
                    if outputEachError 
                        output "Antlr: " + antlrManager:GetErrorAmount() + " Us: " + ourManager:GetErrorAmount()
                        if not antlrManager:IsCompilationErrorFree()
                            output antlrManager:GetCompilerErrorsAsText()
                        end
            
                        if not ourManager:IsCompilationErrorFree()
                            output ourManager:GetCompilerErrorsAsText()
                        end
                    end
                end
            end
            boolean value = CheckMatch(antlrator, ourator, false)
            if value = false
                allTestsPass = false
                output file:GetFileName() + ": " + antlrTime + " ms, Ours: " + ourTime + " ms, " + (antlrTime / ourTime) + " speedup, Fail"
                output ""
                output "Compare Traversal: "
                output "    Antlr size: " + antlrResults:GetSize()
                output "    Our size: " + ourResults:GetSize()
    
                output ""
                output "Comparison:"
                antlrator:Rewind()
                ourator:Rewind()
                CheckMatch(antlrator, ourator, true)
                return false
            else
                if outputEachTime
                    output file:GetFileName() + ": " + antlrTime + " ms, Ours: " 
                        + ourTime + " ms, " + (antlrTime / ourTime) 
                        + " speedup: Winning"
                end
                return true
            end
            return false
        end
    end

    action CheckMatch(Iterator<text> antlrator, Iterator<text> ourator, boolean print) returns boolean
        boolean allMatch = true
        integer matchedRows = 0

        text printed = ""
        i = 0
        repeat while antlrator:HasNext()
            text value = antlrator:Next()
            if ourator:HasNext()
                text value1 = ourator:Next()
                if value = value1
                    matchedRows = matchedRows + 1
                    if print
                        printed = printed + "" + i + ": Antlr '" + value + "', Ours '" + value1  + "'
"
                    end
                else
                    allMatch = false
                    if print
                        printed = printed + i + ": Antlr '" + value + "', Ours '" + value1  + "' --- WRONG ---
"
                    end
                end
                
            else
                if print
                    printed = printed + "Missing " + i + ": Antlr is '" + value + "'
"
                end
            end
            i = i + 1
        end

        if print
            File file 
            file:SetPath("Result.txt")
            output file:GetAbsolutePath()
            file:Write(printed)
        end
        return allMatch
    end

    action ParseFolder(File file) returns boolean
        Array<File> files = file:GetDirectoryListing()
        FileComparison compare
        files:Sort(compare)
        i = 0
        repeat while i < files:GetSize()
            File sub = files:Get(i)
            if sub:IsDirectory()
                if not ParseFolder(sub)
                    return false
                end
            else
                if not ParseFile(sub)
                    return false
                end
            end
            i = i + 1
        end
        return true
    end

    action RunSingle
        isFailCase = false
        File file
        file:SetPath("files/expression.quorum")
        
        QuorumLexer lexer
        CompilerErrorManager manager
        LogListener listener
        lexer:SetCompilerErrorManager(manager)
        lexer:Read(file)

        i = 0
        repeat while i < lexer:GetSize()
            Token token = lexer:GetToken(i)
            output token:ToText()
            i = i + 1
        end

        if manager:IsCompilationErrorFree()
            QuorumParser parser
            parser:SetCompilerErrorManager(manager)
            parser:SetLexer(lexer)
    
            ParseContext context = parser:Start()
            if context not= undefined //if there are no errors
                context:Traverse(listener)
            else
                
            end
        end
    end

    action RunStandardLibrary
        isFailCase = false
        File file
        //parse the standard library.
        //file:SetPath("Library/Standard/Libraries/Compute/MatrixTransform")
        //Parse(file)
        file:SetPath("Library/Standard/Libraries/Compute")
        Parse(file)
        file:SetPath("Library/Standard/Libraries/Containers")
        Parse(file)
        file:SetPath("Library/Standard/Libraries/Curriculum")
        Parse(file)
        file:SetPath("Library/Standard/Libraries/Data")
        Parse(file)
        file:SetPath("Library/Standard/Libraries/Game")
        Parse(file)
        file:SetPath("Library/Standard/Libraries/Interface")
        Parse(file)
        file:SetPath("Library/Standard/Libraries/Language")
        Parse(file)
        file:SetPath("Library/Standard/Libraries/Network")
        Parse(file)
        file:SetPath("Library/Standard/Libraries/Robots")
        Parse(file)
        file:SetPath("Library/Standard/Libraries/Sound")
        Parse(file)
        file:SetPath("Library/Standard/Libraries/System")
        Parse(file)
        file:SetPath("Library/Standard/Libraries/Testing")
        Parse(file)
        file:SetPath("Library/Standard/Libraries/Web")
        Parse(file)
    end

    action RunPassingTests
        isFailCase = false
        File file
        file:SetPath("files/expression.quorum")
        Parse(file)
        //parse the standard library.
        RunStandardLibrary()
        file:SetPath("Library/Tests/Actions/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Array/Pass")
        Parse(file)
        file:SetPath("Library/Tests/BigInteger/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Bitwise/Pass")
        Parse(file)
        file:SetPath("Library/Tests/ByteArray/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Chaining/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Chaining/Yoda.quorum")
        Parse(file)
        file:SetPath("Library/Tests/CodeCompletion/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Decompresser/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Exceptions/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Expressions/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Files/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Game/Pass")
        Parse(file)
        file:SetPath("Library/Tests/HashTable/Pass")
        Parse(file)
        file:SetPath("Library/Tests/IfStatement/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Inheritance/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Json/Pass")
        Parse(file)
        file:SetPath("Library/Tests/List/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Loops/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Math/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Matrix/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Queue/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Random/Pass")
        Parse(file)
        file:SetPath("Library/Tests/SeparatedValue/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Stack/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Table/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Templating/Pass") //WRONG
        Parse(file)
        file:SetPath("Library/Tests/TemplatingGenerated/Pass") //WRONG
        Parse(file)
        file:SetPath("Library/Tests/TypeChecker/Pass")
        Parse(file)
        file:SetPath("Library/Tests/TypeCheckerGenerated/Pass")
        Parse(file)
        file:SetPath("Library/Tests/Use/Pass")
        Parse(file)
    end

    action RunFailingTests
        isFailCase = true
        File file
        //file:SetPath("files/expression.quorum")
        //Parse(file)
        file:SetPath("Library/Tests/Actions/Fail")
        Parse(file)
        file:SetPath("Library/Tests/Array/Fail")
        Parse(file)
        file:SetPath("Library/Tests/CodeCompletion/Fail")
        Parse(file)
        file:SetPath("Library/Tests/Exceptions/Fail")
        Parse(file)
        file:SetPath("Library/Tests/Expressions/Fail")
        Parse(file)
        file:SetPath("Library/Tests/IfStatement/Fail")
        Parse(file)
        file:SetPath("Library/Tests/Inheritance/Fail")
        Parse(file)
        file:SetPath("Library/Tests/List/Fail")
        Parse(file)
        file:SetPath("Library/Tests/Loops/Fail")
        Parse(file)
        file:SetPath("Library/Tests/Math/Fail")
        Parse(file)
        file:SetPath("Library/Tests/Queue/Fail")
        Parse(file)
        file:SetPath("Library/Tests/Random/Fail")
        Parse(file)
        file:SetPath("Library/Tests/Table/Fail")
        Parse(file)
        file:SetPath("Library/Tests/Templating/Fail")
        Parse(file)
        file:SetPath("Library/Tests/TemplatingGenerated/Fail") //WRONG
        Parse(file)
        file:SetPath("Library/Tests/TypeChecker/Fail")
        Parse(file)
        file:SetPath("Library/Tests/TypeCheckerGenerated/Fail")
        Parse(file)
        file:SetPath("Library/Tests/Use/Fail")
        Parse(file)
    end
    /*
        This action, Main, starts our computer program. In Quorum, programs always
        begin from Main.
    */
    action Main
        //output "Run Single"
        //RunSingle()

        output "Conducting Pass Tests"
        RunPassingTests()

        output "Conducting Fail Tests"
        RunFailingTests()

        output "All tests pass? " + allTestsPass
        output ""
        output "Tests Complete."
        output ""
        output "Summary of timing data"

        if not runWithAntlr
            return now
        end
        frame:SetSelectedColumnRange(1,1)
        number antlrAverage = frame:Mean()
        output "Antlr = M(" + antlrAverage + "), SD(" + frame:StandardDeviation() + ")"
        frame:SetSelectedColumnRange(2,2)
        number usAverage = frame:Mean()
        output "Mean (Hand Parser) " + usAverage + "), SD(" + frame:StandardDeviation() + ")"
        output "Average Speedup: " + (antlrAverage / usAverage) + "x"
        output ""
        frame:SetSelectedColumnRange(1,2)
        CompareGroups groups = frame:CompareSelectedColumns()
        text result = frame:ToText()
        File frameFile
        frameFile:SetPath("files/Data.csv")
        frameFile:Write(result)
        output groups:GetFormalSummary()
    end 
end