package Science.Tests
use Libraries.Testing.Test
use Libraries.Compute.Matrix
use Libraries.Containers.Array
use Libraries.Compute.MatrixTransform.OrthonormalTriangularDecomposition
use Libraries.Compute.MatrixTransform.HessenbergDecomposition
use Libraries.Compute.MatrixTransform.SchurDecomposition
use Libraries.Compute.MatrixTransform.EigenDecomposition

/*
    This class tests pearson chi-squared goodness of fit.
*/
class MatrixDecompositionTest is Test

    on create
        SetName("Matrix Decomposition Test")
    end

    action Run
        SymmetricMatrixDecompositionTest()
        AsymmetricMatrixDecompositionTest()
    end

    private action SymmetricMatrixDecompositionTest
        Matrix A
        A:SetSize(3, 3)
        Array<number> col1
        col1:Add(1)
        col1:Add(2)
        col1:Add(3)
        Array<number> col2
        col2:Add(2)
        col2:Add(3)
        col2:Add(4)
        Array<number> col3
        col3:Add(3)
        col3:Add(4)
        col3:Add(5)
        A:SetColumn(0,col1)
        A:SetColumn(1,col2)
        A:SetColumn(2,col3)

        /* Orthonormal (QR) */
        OrthonormalTriangularDecomposition oDecomp
        oDecomp:Calculate(A)
        Matrix oQ = oDecomp:GetOrthonormalMatrix()
        Matrix oT = oDecomp:GetUpperTriangularMatrix()
        Matrix oResult = oQ:Multiply(oT):Round(1) //A = Q*T
        
        /* Hessenberg */
        HessenbergDecomposition hDecomp
        hDecomp:Calculate(A)
        Matrix hQ = hDecomp:GetOrthogonalMatrix()
        Matrix hT = hDecomp:GetHessenbergMatrix()
        Matrix hQT = hDecomp:GetOrthogonalTransposedMatrix()
        Matrix hResult = hQ:Multiply(hT):Multiply(hQT):Round(1) //A = Q*T*Q^T
        
        /* Schur */
        SchurDecomposition sDecomp
        sDecomp:Calculate(A)
        Matrix sQ = sDecomp:GetOrthogonalMatrix()
        Matrix sT = sDecomp:GetTriangularMatrix()
        Matrix sQT = sDecomp:GetOrthogonalTransposedMatrix()
        Matrix sResult = sQ:Multiply(sT):Multiply(sQT):Round(1) //A = Q*T*Q^T

        /* Eigen */
        EigenDecomposition eDecomp
        eDecomp:Calculate(A)
        Matrix eQ = eDecomp:GetEigenvectorMatrix()
        Matrix eT = eDecomp:GetEigenvalueMatrix()
        Matrix eQT = eDecomp:GetEigenvectorTransposedMatrix()
        Matrix eResult1 = sQ:Multiply(sT):Multiply(sQT):Round(1) //A = Q*T*Q^T
        Matrix eResult2 = eT:Round(1)

        integer i = 0
        repeat while i < A:GetRows()
            integer j = 0
            repeat while j < A:GetColumns()
                number correct = A:Get(i,j)
                Check(oResult:Get(i,j), correct)
                Check(hResult:Get(i,j), correct)
                Check(sResult:Get(i,j), correct)
                Check(eResult1:Get(i,j), correct)
                Check(eResult2:Get(0,0), 3)
                Check(eResult2:Get(1,1), 2)
                Check(eResult2:Get(2,2), 1)
                j = j + 1
            end
            i = i + 1
        end
    end

    private action AsymmetricMatrixDecompositionTest
        Matrix A
        A:SetSize(3, 3)
        Array<number> col1
        col1:Add(-149)
        col1:Add(537)
        col1:Add(-27)
        Array<number> col2
        col2:Add(-50)
        col2:Add(180)
        col2:Add(-9)
        Array<number> col3
        col3:Add(-154)
        col3:Add(546)
        col3:Add(-25)
        A:SetColumn(0,col1)
        A:SetColumn(1,col2)
        A:SetColumn(2,col3)

        /* Orthonormal (QR) */
        OrthonormalTriangularDecomposition oDecomp
        oDecomp:Calculate(A)
        Matrix oQ = oDecomp:GetOrthonormalMatrix()
        Matrix oT = oDecomp:GetUpperTriangularMatrix()
        Matrix oResult = oQ:Multiply(oT):Round(1) //A = Q*T
        
        /* Hessenberg */
        HessenbergDecomposition hDecomp
        hDecomp:Calculate(A)
        Matrix hQ = hDecomp:GetOrthogonalMatrix()
        Matrix hT = hDecomp:GetHessenbergMatrix()
        Matrix hQT = hDecomp:GetOrthogonalTransposedMatrix()
        Matrix hResult = hQ:Multiply(hT):Multiply(hQT):Round(1) //A = Q*T*Q^T
        
        /* Schur */
        SchurDecomposition sDecomp
        sDecomp:Calculate(A)
        Matrix sQ = sDecomp:GetOrthogonalMatrix()
        Matrix sT = sDecomp:GetTriangularMatrix()
        Matrix sQT = sDecomp:GetOrthogonalTransposedMatrix()
        Matrix sResult = sQ:Multiply(sT):Multiply(sQT):Round(1) //A = Q*T*Q^T

        /* Eigen */
        EigenDecomposition eDecomp
        eDecomp:Calculate(A)
        Matrix eQ = eDecomp:GetEigenvectorMatrix()
        Matrix eT = eDecomp:GetEigenvalueMatrix()
        Matrix eResult1 = A:Multiply(eQ):Round(1) //A*Q = Q*T
        Matrix eResult2 = eQ:Multiply(eT):Round(1) //A*Q = Q*T
        Matrix eResult3 = eT:Round(1)

        integer i = 0
        repeat while i < A:GetRows()
            integer j = 0
            repeat while j < A:GetColumns()
                number correct = A:Get(i,j)
                Check(oResult:Get(i,j), correct)
                Check(hResult:Get(i,j), correct)
                Check(sResult:Get(i,j), correct)
                Check(eResult1:Get(i,j), eResult2:Get(i,j))
                Check(eResult3:Get(0,0), 3)
                Check(eResult3:Get(1,1), 2)
                Check(eResult3:Get(2,2), 1)
                j = j + 1
            end
            i = i + 1
        end
    end
end