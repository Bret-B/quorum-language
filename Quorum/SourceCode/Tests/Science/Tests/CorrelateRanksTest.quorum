package Science.Tests
use Libraries.Testing.Test
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Calculations.InterQuartileRange
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.Calculations.StandardDeviationsFromMean
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Calculations.Kurtosis
use Libraries.Compute.Statistics.Tests.CorrelateGroups
use Libraries.Containers.Iterator
use Libraries.Compute.Statistics.Reporting.CorrelateGroupsResult
use Libraries.Compute.Statistics.Tests.CorrelateRanks

/*
    This class tests pearson correlations.
*/
class CorrelateRanksTest is Test

    on create
        SetName("Correlate Ranks Test - Spearman Correlations")
    end

    action Run
        ColumnCalculationTest framer
        DataFrame frame = framer:GetDefaultDataFrame()

        CorrelateRanks correlate
        correlate:AddColumn(0)
        correlate:AddColumn(1)
        frame:Calculate(correlate)
        
        CorrelateGroupsResult result = correlate:GetResult(0,1)
        Check(result:GetCorrelation(), 0.985610760609162)
        Check(result:GetDegreesOfFreedom(), 4)
        Check(result:GetProbabilityValue(), 0.00030908566785)
        Check(result:GetTestStatistic(), 11.66190378969)

        CorrelateRanks correlate2
        correlate2:AddColumn(0)
        correlate2:AddColumn(1)
        correlate2:AddColumn(2)
        frame:Calculate(correlate2)

        Iterator<CorrelateGroupsResult> iterator = correlate2:GetResultIterator()
        result = iterator:Next()
        Check(result)

        result = iterator:Next()
        Check(result)

        result = iterator:Next()
        Check(result)
    end

    private action Check(CorrelateGroupsResult result)
        Iterator<integer> iterator = result:GetColumnIterator()
        integer first = iterator:Next()
        integer second = iterator:Next()
        if IsValuesReversed(first, second, 0, 1)
            Check(result:GetCorrelation(), 0.985610760609162)
            Check(result:GetDegreesOfFreedom(), 4)
            Check(result:GetProbabilityValue(), 0.00030908566785)
            Check(result:GetTestStatistic(), 11.66190378969)
        elseif IsValuesReversed(first, second, 0, 2)
            Check(result:GetCorrelation(), 0.0285714285714286)
            Check(result:GetDegreesOfFreedom(), 4)
            Check(result:GetProbabilityValue(), 0.95715451895)
            Check(result:GetTestStatistic(), 0.0571661950475)
        elseif IsValuesReversed(first, second, 1, 2)
            Check(result:GetCorrelation(), 0.0869656553478673)
            Check(result:GetDegreesOfFreedom(), 4)
            Check(result:GetProbabilityValue(), 0.8698803787)
            Check(result:GetTestStatistic(), 0.1745927885938)
        end
    end

    private action IsValuesReversed(integer first, integer second, integer f, integer s) returns boolean
        if (first = f and second = s) or (first = s and second = f)
            return true
        end
        return false
    end
end