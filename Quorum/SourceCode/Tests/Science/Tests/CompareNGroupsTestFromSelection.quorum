package Science.Tests
use Libraries.Testing.Test
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Compute.Statistics.Calculations.InterQuartileRange
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.Calculations.StandardDeviationsFromMean
use Libraries.Containers.Array
use Libraries.Compute.Statistics.Calculations.Kurtosis
use Libraries.Compute.Statistics.Tests.CorrelateGroups
use Libraries.Containers.Iterator
use Libraries.Compute.Statistics.Reporting.CorrelateGroupsResult
use Libraries.Compute.Statistics.Tests.CorrelateRanks
use Libraries.Compute.Statistics.Tests.CompareGroups
use Libraries.Compute.Statistics.Reporting.CompareGroupsResult
use Libraries.Compute.Statistics.DataFrame

/*
    This class tests pearson correlations.
*/
class CompareNGroupsTestFromSelection is Test

    on create
        SetName("Calculate ANOVA test from Selection")
    end

    action Run
        ColumnCalculationTest framer
        DataFrame frame = framer:GetDefaultDataFrame()

        frame:AddSelectedColumnRange(0,3)
        CompareGroups compare = frame:CompareSelectedColumns()
        EvaluateResult(compare)

        frame:EmptySelectedColumns()
        frame:SetSelectedColumnRange(0,3)
        compare = frame:CompareSelectedColumns()
        EvaluateResult(compare)

        frame:EmptySelectedColumns()
        frame:SetSelectedColumnRange(0,3)
        frame:AddSelectedColumn(4)
        frame:RemoveSelectedColumn(4)
        compare = frame:CompareSelectedColumns()
        EvaluateResult(compare)
        
        frame:EmptySelectedColumns()
        frame:AddSelectedColumns("y,x1,x2,x3")
        compare = frame:CompareSelectedColumns()
        EvaluateResult(compare)

        frame:EmptySelectedColumns()
        frame:SetSelectedColumns("y,x1,x2,x3")
        compare = frame:CompareSelectedColumns()
        EvaluateResult(compare)
    end

    private action EvaluateResult(CompareGroups compare) 
        CompareGroupsResult result = compare:GetResult()
        Check(result:GetCriticalValue(), 14.72341148)
        Check(result:GetProbabilityValue(), 0.000027087573816753086)
        Check(result:GetEffectSize(), 0.68832901780750122)

        Array<CompareGroupsResult> results = compare:GetPairwiseResults()
        i = 0
        repeat while i < results:GetSize()
            CompareGroupsResult res = results:Get(i)
            Iterator<integer> iterator = res:GetColumnIterator()
            integer first = iterator:Next()
            integer second = iterator:Next()
            if IsValuesReversed(first, second, 0, 1)
                Check(res:GetProbabilityValue(), 1.000000000000000)
            elseif IsValuesReversed(first, second, 0, 2)
                Check(res:GetProbabilityValue(), 0.000832511549927)
            elseif IsValuesReversed(first, second, 0, 3)
                Check(res:GetProbabilityValue(), 0.983874222396815)
            elseif IsValuesReversed(first, second, 1, 2)
                Check(res:GetProbabilityValue(), 0.000401245771114)
            elseif IsValuesReversed(first, second, 1, 3)
                Check(res:GetProbabilityValue(), 1.000000000000000)
            elseif IsValuesReversed(first, second, 2, 3)
                Check(res:GetProbabilityValue(), 0.0000319523972924)
            end
            
            i = i + 1
        end
    end

    private action IsValuesReversed(integer first, integer second, integer f, integer s) returns boolean
        if (first = f and second = s) or (first = s and second = f)
            return true
        end
        return false
    end
end