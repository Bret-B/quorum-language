package Libraries.Network

use Libraries.Containers.HashTable

class NetworkRequestParameters 
    NetworkRequestType type
    text webAddress = ""
    HashTable<text, text> parameters
    HashTable<text, text> data
    JavaScriptObjectNotation jsonData
    HashTable<text, text> messageHeaders
    HashTable<text, text> savedLocalData
    HashTable<text, text> files
    text authUser  = ""
    text authPassword  = ""
    number secondsToTimeout  = 0
    number secondsToConnectTimeout  = 0
    number secondsToReadTimeout  = 0
    boolean allowRedirects  = false
    HashTable<text, text> proxyMap
    boolean verify  = false
    text verifyPath  = ""
    boolean streamResponse  = false
    text securityCertificatePath  = ""
    text securityCertificate  = ""
    text securityKey  = ""

    on create
        type:SetNetworkRequestTypeToPOST()
    end

    action SetNetworkRequestType(NetworkRequestType type)
        me:type = type
    end

    action SetNetworkRequestTypeToHEAD()
        type:SetNetworkRequestTypeToHEAD()
    end

    action SetNetworkRequestTypeToGET()
        type:SetNetworkRequestTypeToGET()
    end

    action SetNetworkRequestTypeToPOST()
        type:SetNetworkRequestTypeToPOST()
    end

    action SetNetworkRequestTypeToPUT()
        type:SetNetworkRequestTypeToPUT()
    end

    action SetNetworkRequestTypeToPATCH()
        type:SetNetworkRequestTypeToPATCH()
    end

    action SetNetworkRequestTypeToDELETE()
        type:SetNetworkRequestTypeToDELETE()
    end

    action SetWebAddress(text webAddress)
        me:webAddress = webAddress
    end

    action SetParameters(HashTable<text, text> parameters)
        me:parameters = parameters
    end

    action SetParameters(JavaScriptObjectNotation parameters)
        HashTable<text, text> reformattedParameters
        // format to HashTable
        me:parameters = reformattedParameters
    end
    
    action SetParameters(text data)
        HashTable<text, text> reformattedParameters
        // format to HashTable
        me:parameters = reformattedParameters
    end

    action SetData(HashTable<text, text> data)
        me:data = data
    end

    action SetData(JavaScriptObjectNotation data)
        HashTable<text, text> reformattedData
        // format to HashTable
        me:data = reformattedData
    end
    
    action SetData(text data)
        HashTable<text, text> reformattedData
        // format to HashTable
        me:data = reformattedData
    end
    
    action SetAdditionalData(JavaScriptObjectNotation data)
        me:jsonData = data
    end

    action GetNetworkRequestType() returns integer
        return type:GetType()
    end

    action GetWebAddress() returns text
        return webAddress
    end

    action GetParameters() returns HashTable<text, text>
        return parameters
    end
end