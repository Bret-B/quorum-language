package Libraries.Network

use Libraries.Containers.HashTable
use Libraries.Containers.Iterator
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Network.NetworkRequestType

/*
This class is used by the NetworkConnection class to create a request to be made over the internet protocol. More information on the internet protocol, called Hyper Text Transfer Protocol (HTTP) can be found at: https://www.w3.org/Protocols/,

Attribute: Example

use Libraries.Network.NetworkConnection
use Libraries.Network.NetworkRequest
use Libraries.Network.NetworkResponseEvent
use Libraries.Network.NetworkRequestListener

class Main is NetworkRequestListener
    action Main
        NetworkRequest request
        request:SetRequestTypeToGET()
        request:SetWebAddress("https://quorumlanguage.com/GETtest.php")
        NetworkConnection http
        http:AddListener(me)
        http:SendRequest(request)
    end

    action ResponseReceived(NetworkResponseEvent response)
        output response:GetResponseText()
    end
end
*/
class NetworkRequest 
    private NetworkRequestType type
    private text webAddress = ""
    private integer millisecondsToReadTimeout = 0
    private integer millisecondsToConnectTimeout  = 0
    private HashTable<text, text> headers
    private boolean doInput = true
    private boolean doOutput = true
    private text body = ""
    private boolean fixedLengthStreamingMode = true
    private integer chunkLength = 1000

    private Iterator<text> headerIterator = undefined
    private text nextHeader = ""

    /*
    This method is used to set the request type of a NetworkRequest

    Attribute: Example

    Attribute: Parameter type The NetworkRequestType object

    use Libraries.Network.NetworkRequest
    use Libraries.Network.NetworkRequestType

    class Main
        action Main
            NetworkRequestType type
            type:SetToGET()
            NetworkRequest request
            request:SetRequestType(type)
        end
    end
    */
    action SetRequestType(NetworkRequestType type)
        me:type = type
    end

    /*
    This method is used to set the request type of a NetworkRequest to HEAD

    Attribute: Example

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetRequestTypeToHEAD()
        end
    end
    */
    action SetRequestTypeToHEAD
        me:type:SetToHEAD()
    end

    /*
    This method is used to set the request type of a NetworkRequest to GET

    Attribute: Example

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetRequestTypeToGET()
        end
    end
    */
    action SetRequestTypeToGET
        me:type:SetToGET()
    end

    /*
    This method is used to set the request type of a NetworkRequest to POST

    Attribute: Example

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetRequestTypeToPOST()
        end
    end
    */
    action SetRequestTypeToPOST
        me:type:SetToPOST()
    end

    /*
    This method is used to set the request type of a NetworkRequest to PUT

    Attribute: Example

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetRequestTypeToPUT()
        end
    end
    */
    action SetRequestTypeToPUT
        me:type:SetToPUT()
    end

    /*
    This method is used to set the request type of a NetworkRequest to PATCH

    Attribute: Example

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetRequestTypeToPATCH()
        end
    end
    */
    action SetRequestTypeToPATCH
        me:type:SetToPATCH()
    end

    /*
    This method is used to set the request type of a NetworkRequest to DELETE

    Attribute: Example

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetRequestTypeToDELETE()
        end
    end
    */
    action SetRequestTypeToDELETE
        me:type:SetToDELETE()
    end

    /*
    This method is returns the read timeout value of a NetworkRequest.

    Attribute: Example

    Attribute: Returns The read timeout value in milliseconds.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            output request:GetReadTimeout()
        end
    end
    */
    action GetReadTimeout returns integer
        return me:millisecondsToReadTimeout
    end

    /*
    This method is returns the read timeout value of a NetworkRequest.

    Attribute: Example

    Attribute: Returns The read timeout value in milliseconds.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetReadTimeout(1000)
            output request:GetReadTimeout()
        end
    end
    */
    action SetReadTimeout(integer milliseconds)
        me:millisecondsToReadTimeout = milliseconds
    end

    /*
    This method is sets the NetworkRequest to fixed length streaming mode.

    Attribute: Example

    Attribute: Parameter value A boolean value to set the mode on or off.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetFixedLengthSreamingMode(true)
            output request:IsFixedLengthStreamingMode()
        end
    end
    */
    action SetFixedLengthSreamingMode(boolean value)
        me:fixedLengthStreamingMode = value
    end

    /*
    This method is sets the NetworkRequest to chunked streaming mode.

    Attribute: Example

    Attribute: Parameter value A boolean value to set the mode on or off.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetChunkedSreamingMode(true)
            output request:IsChunkedStreamingMode()
        end
    end
    */
    action SetChunkedSreamingMode(boolean value)
        me:fixedLengthStreamingMode = not value
    end

    /*
    This method returns a boolean value to determine if fixed length streaming mode is on in the NetworkRequest object.

    Attribute: Example

    Attribute: Parameter value A boolean value indicating the setting of the mode.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetFixedLengthSreamingMode(false)
            output request:IsFixedLengthStreamingMode()
        end
    end
    */
    action IsFixedLengthStreamingMode returns boolean
        return me:fixedLengthStreamingMode
    end

    /*
    This method returns a boolean value to determine if chunked length streaming mode is on in the NetworkRequest object.

    Attribute: Example

    Attribute: Return value A boolean value indicating the setting of the mode.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetChunkedSreamingMode(true)
            output request:IsChunkedStreamingMode()
        end
    end
    */
    action IsChunkedStreamingMode returns boolean
        return not me:fixedLengthStreamingMode
    end

    /*
    This method sets the size of the chunks if chunked length streaming mode is on in the NetworkRequest object.

    Attribute: Example

    Attribute: Parameter chunkLength The chunk size in bytes.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetChunkedSreamingMode(true)
            request:SetChunkLength(1000
            output request:GetChunkLength()
        end
    end
    */

    action SetChunkLength(integer chunkLength)
        fixedLengthStreamMode = false
        me:chunkLength = chunkLength
    end

    /*
    This method gets the size of the chunks if chunked length streaming mode is on in the NetworkRequest object.

    Attribute: Example

    Attribute: Returns The chunk size in bytes.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetChunkedSreamingMode(true)
            request:SetChunkLength(1000
            output request:GetChunkLength()
        end
    end
    */
    action GetChunkLength returns integer
        return me:chunkLength
    end

    /*
    This method gets the connection timeout value for the NetworkRequest object.

    Attribute: Example

    Attribute: Returns The timeeout value in milliseconds.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetConnectTimeout(1000)
            output request:GetConnectTimeout()
        end
    end
    */
    action GetConnectTimeout returns integer
        return me:millisecondsToConnectTimeout
    end

    /*
    This method sets the connection timeout value for the NetworkRequest object.

    Attribute: Example

    Attribute: Parameter The timeeout value in milliseconds.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetConnectTimeout(1000)
            output request:GetConnectTimeout()
        end
    end
    */
    action SetConnectTimeout(integer milliseconds)
        me:millisecondsToConnectTimeout = milliseconds
    end

    /*
    This method returns a boolean value based on whether or not the NetworkRequest object will provide input to the server.

    Attribute: Example

    Attribute: Returns A boolean value to indicate if the object will send input.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetDoInput(true)
            output request:GetDoInput()
        end
    end
    */
    action GetDoInput returns boolean
        return me:doInput
    end

    /*
    This method sets NetworkRequest object to provide input to the server.

    Attribute: Example

    Attribute: Parameter value The boolean value for the setting.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetDoInput(false)
            output request:GetDoInput()
        end
    end
    */
    action SetDoInput(boolean value)
        me:doInput = value
    end

    /*
    This method returns a boolean value based on whether or not the NetworkRequest object will get output from the server.

    Attribute: Example

    Attribute: Returns A boolean value to indicate if the object will receive output.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetDoOutput(true)
            output request:GetDoOutput()
        end
    end
    */
    action GetDoOutput returns boolean
        return me:doOutput
    end

    /*
    This method sets NetworkRequest object to receive output from the server.

    Attribute: Example

    Attribute: Parameter value The boolean value for the setting.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetDoOutput(false)
            output request:GetDoOutput()
        end
    end
    */
    action SetDoOutput(boolean value)
        me:doOutput = value
    end

    /*
    This method sets the web address for the NetworkRequest object.

    Attribute: Example

    Attribute: Parameter webAddress The web address for the object.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetWebAddress("https://quorumlanguage.com/GETtest.php")
            output request:GetWebAddress()
        end
    end
    */
    action SetWebAddress(text webAddress)
        me:webAddress = webAddress
    end

    /*
    This method gets the web address for the NetworkRequest object.

    Attribute: Example

    Attribute: Returns The web address of the object.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetWebAddress("https://quorumlanguage.com/GETtest.php")
            output request:GetWebAddress()
        end
    end
    */
    action GetWebAddress() returns text
        return webAddress
    end

    /*
    This method sets the body of the NetworkRequest object.

    Attribute: Example

    Attribute: Parameter data The body of the request object.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            text key = "name"
            text value = "John"
            NetworkRequest request
            request:SetBody(key + ":" + value)
            output request:GetBody()
        end
    end
    */
    action SetBody(text data)
        me:body = data
    end

    /*
    This method sets the body of the NetworkRequest object as form encoded data from a HashTable

    Attribute: Example

    Attribute: data The HashTable container with the key value pairs

    use Libraries.Network.NetworkRequest
    use Libraries.Containers.HashTable

    class Main
        action Main
            text key1 = "name"
            text value1 = "John"
            text key2 = "age"
            text value2 = "21"
            HashTable<text, text> data
            data:Add(key1, value1)
            data:Add(key2, value2)
            NetworkRequest request
            request:SetBodyAsFormEncodedData(data)
            output request:GetBody()
        end
    end
    */
    action SetBodyAsFormEncodedData(HashTable<text, text> data)
        AddHeader("Content-type", "application/x-www-form-urlencoded")
        me:body = FormEncodeData(data)
    end

    /*
    This method sets the body of the NetworkRequest object as form encoded data from a JavaScriptObjectNotation object.

    Attribute: Example

    Attribute: data The JavaScriptObjectNotation container with the key value pairs

    use Libraries.Network.NetworkRequest
    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            text key1 = "name"
            text value1 = "John"
            text key2 = "age"
            text value2 = "21"
            JavaScriptObjectNotation data
            data:Add(key1, value1)
            data:Add(key2, value2)
            NetworkRequest request
            request:SetBodyAsFormEncodedData(data)
            output request:GetBody()
        end
    end
    */
    action SetBodyAsFormEncodedData(JavaScriptObjectNotation data)
        AddHeader("Content-type", "application/x-www-form-urlencoded")
        me:body = FormEncodeData(data)
    end

    /*
    This method sets the body of the NetworkRequest object as JavaScriptObjectNotation data from a JavaScriptObjectNotation object.

    Attribute: Example

    Attribute: data The HashTable container with the key value pairs

    use Libraries.Network.NetworkRequest
    use Libraries.Containers.HashTable

    class Main
        action Main
            text key1 = "name"
            text value1 = "John"
            text key2 = "age"
            text value2 = "21"
            HashTable<text, text> data
            data:Add(key1, value1)
            data:Add(key2, value2)
            NetworkRequest request
            request:SetBodyAsJavaScriptObjectNotation(data)
            output request:GetBody()
        end
    end
    */
    action SetBodyAsJavaScriptObjectNotation(HashTable<text, text> data)
        JavaScriptObjectNotation json
        json:Read(data)
        me:body = json:ToText()
    end

    /*
    This method sets the body of the NetworkRequest object as JavaScriptObjectNotation data from a JavaScriptObjectNotation object.

    Attribute: Example

    Attribute: data The JavaScriptObjectNotation container with the key value pairs

    use Libraries.Network.NetworkRequest
    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            text key1 = "name"
            text value1 = "John"
            text key2 = "age"
            text value2 = "21"
            JavaScriptObjectNotation data
            data:Add(key1, value1)
            data:Add(key2, value2)
            NetworkRequest request
            request:SetBodyAsJavaScriptObjectNotation(data)
            output request:GetBody()
        end
    end
    */
    action SetBodyAsJavaScriptObjectNotation(JavaScriptObjectNotation data)
        me:body = data:ToText()
    end
    /*
    This method gets the body of the NetworkRequest object.

    Attribute: Example

    Attribute: Returns The body of the request object.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            text key = "name"
            text value = "John"
            NetworkRequest request
            request:SetBody(key + ":" + value)
            output request:GetBody()
        end
    end
    */
    action GetBody() returns text
        return body
    end

    /*
    This method sets the headers of a NetworkRequest object from a HashTable.

    Attribute: Example

    Attribute: Parameters A HashTable of headers.

    use Libraries.Network.NetworkRequest
    use Libraries.Containers.HashTable

    class Main
        action Main
            HashTable<text, text> headers
            headers:Add("Connection", "keep-alive")
            headers:Add("Accept-Encoding", "gzip, deflate")
            NetworkRequest request
            request:SetHeaders(headers)
            output headers:GetValue("Connection")
        end
    end
    */
    action SetHeaders(HashTable<text, text> headers)
        me:headers = headers
    end

    /*
    This method adds a header to a NetworkRequest object.

    Attribute: Example

    Attribute: Parameters key The name of the header
    Attribute: Parameters value The value of the header

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:AddHeader("Accept-Encoding", "gzip, deflate")
        end
    end
    */
    action AddHeader(text key, text value)
        headers:Add(key, value)
    end

    /*
    This method gets a HashTable of the headers of a NetworkRequest object.

    Attribute: Example

    Attribute: Returns A HashTable of headers.

    use Libraries.Network.NetworkRequest
    use Libraries.Containers.HashTable

    class Main
        action Main
            NetworkRequest request
            request:AddHeader("Accept-Encoding", "gzip, deflate")
            HashTable<text, text> headers = request:GetHeaders()
            output headers:GetValue("Accept-Encoding")
        end
    end
    */
    action GetHeaders() returns HashTable<text, text>
        return headers
    end

    /*
    This method gets the request type of a NetworkRequest object.

    Attribute: Example

    Attribute: Returns The type of request as text.

    use Libraries.Network.NetworkRequest

    class Main
        action Main
            NetworkRequest request
            request:SetRequestTypeToPOST()
            output request:GetRequestType()
        end
    end
    */
    action GetRequestType() returns text
        return type:ToText()
    end

    /* iterator function used by plugin */
    private action ResetHeaderIterator
        headerIterator = headers:GetKeyIterator()
    end

    /* iterator function used by plugin */
    private action GetHeaderSize returns integer
        return headers:GetSize()
    end

    /* iterator function used by plugin */
    private action HasNextHeader() returns boolean
        return headerIterator:HasNext()
    end

    /* iterator function used by plugin */
    private action GetNextHeaderKey() returns text
        return headerIterator:Next()
    end

    /* iterator function used by plugin */
    private action GetHeaderValue(text key) returns text
        return headers:GetValue(key)
    end

    /*
    This method is used to url encode a text value from a HashTable.

    Attribute: Example

    Attribute: Parameter data A HashTable containing key value pairs to encode.
    Attribute: Returns The formatted string.

    use Libraries.Containers.HashTable
    use Libraries.Containers.Iterator

    action SetBodyAsFormEncodedData(JavaScriptObjectNotation data)
        text body = FormEncodeData(data)
    end
    */
    action FormEncodeData(HashTable<text, text> data) returns text
        text result = ""
        Iterator<text> it = data:GetKeyIterator()
        repeat while it:HasNext()
            key = it:Next()
            result = result + key + "=" + data:GetValue(key) + "&"
        end
        result = result:GetSubtext(0, result:GetSize() - 1)
        return ApplyCharacterFormatting(result)
    end

    /*
    This method is used to url encode a text value from a JavaScriptObjectNotation.

    Attribute: Example

    Attribute: Parameter data A JavaScriptObjectNotation object to encode.
    Attribute: Returns The formatted string.

    use Libraries.Data.Formats.JavaScriptObjectNotation
    use Libraries.Containers.Iterator

    action SetBodyAsFormEncodedData(JavaScriptObjectNotation data)
        text body = FormEncodeData(data)
    end
    */
    action FormEncodeData(JavaScriptObjectNotation data) returns text
        text result = ""
        Iterator<JavaScriptObjectNotation> it = data:GetIterator()
        repeat while it:HasNext()
            JavaScriptObjectNotation obj
            obj = it:Next()
            text key = obj:GetKey()
            result = result + key + "=" + obj:GetValue() + "&"
        end
        result = result:GetSubtext(0, result:GetSize() - 1)
        return ApplyCharacterFormatting(result)
    end

    /*
    This method is used to url encode a text value.

    Attribute: Example

    Attribute: Parameter value The unformatted string.
    Attribute: Returns The formatted string.

    use Libraries.Data.Formats.JavaScriptObjectNotation
    use Libraries.Containers.Iterator

    action FormEncodeData(JavaScriptObjectNotation data) returns text
        text result = ""
        Iterator<JavaScriptObjectNotation> it = data:GetIterator()
        repeat while it:HasNext()
            JavaScriptObjectNotation obj
            obj = it:Next()
            text key = obj:GetKey()
            result = result + key + "=" + obj:GetValue() + "&"
        end
        result = result:GetSubtext(0, result:GetSize() - 1)
        return ApplyCharacterFormatting(result)
    end
    */
    action ApplyCharacterFormatting(text value) returns text
        text t = ""
        text dq = t:GetDoubleQuote()
        text cr = t:GetCarriageReturn()
        text lf = t:GetLineFeed()
        text tab = t:GetTab()

        // characters not in this list are dropped
        HashTable<text, text> conversionTable

        // these characters are substituted
        conversionTable:Add(dq,"%22")
        conversionTable:Add(cr,"%0D")
        conversionTable:Add(lf,"%0A")
        conversionTable:Add(tab,"%09")
        conversionTable:Add(" ", "+")
        conversionTable:Add("!","%21")
        conversionTable:Add("#","%23")
        conversionTable:Add("$","%24")
        conversionTable:Add("%","%25")
        conversionTable:Add("'","%27")
        conversionTable:Add("(","%28")
        conversionTable:Add(")","%29")
        conversionTable:Add("+","%2B")
        conversionTable:Add(",","%2C")
        conversionTable:Add("/","%2F")
        conversionTable:Add(":","%3A")
        conversionTable:Add(";","%3B")
        conversionTable:Add("<","%3C")
        conversionTable:Add(">","%3E")
        conversionTable:Add("?","%3F")
        conversionTable:Add("@","%40")
        conversionTable:Add("[","%5B")
        conversionTable:Add("\","%5C")
        conversionTable:Add("]","%5D")
        conversionTable:Add("^","%5E")
        conversionTable:Add("`","%60")
        conversionTable:Add("{","%7B")
        conversionTable:Add("|","%7C")
        conversionTable:Add("}","%7D")
        conversionTable:Add("~","%7E")
        conversionTable:Add("`","%60")

        // these characters are legal
        conversionTable:Add("*","*")
        conversionTable:Add("&","&")
        conversionTable:Add("-","-")
        conversionTable:Add(".",".")
        conversionTable:Add("0","0")
        conversionTable:Add("1","1")
        conversionTable:Add("2","2")
        conversionTable:Add("3","3")
        conversionTable:Add("4","4")
        conversionTable:Add("5","5")
        conversionTable:Add("6","6")
        conversionTable:Add("7","7")
        conversionTable:Add("8","8")
        conversionTable:Add("9","9")
        conversionTable:Add("=","=")
        conversionTable:Add("A","A")
        conversionTable:Add("B","B")
        conversionTable:Add("C","C")
        conversionTable:Add("D","D")
        conversionTable:Add("E","E")
        conversionTable:Add("F","F")
        conversionTable:Add("G","G")
        conversionTable:Add("H","H")
        conversionTable:Add("I","I")
        conversionTable:Add("J","J")
        conversionTable:Add("K","K")
        conversionTable:Add("L","L")
        conversionTable:Add("M","M")
        conversionTable:Add("N","N")
        conversionTable:Add("O","O")
        conversionTable:Add("P","P")
        conversionTable:Add("Q","Q")
        conversionTable:Add("R","R")
        conversionTable:Add("S","S")
        conversionTable:Add("T","T")
        conversionTable:Add("U","U")
        conversionTable:Add("V","V")
        conversionTable:Add("W","W")
        conversionTable:Add("X","X")
        conversionTable:Add("Y","Y")
        conversionTable:Add("Z","Z")
        conversionTable:Add("_","_")
        conversionTable:Add("a","a")
        conversionTable:Add("b","b")
        conversionTable:Add("c","c")
        conversionTable:Add("d","d")
        conversionTable:Add("e","e")
        conversionTable:Add("f","f")
        conversionTable:Add("g","g")
        conversionTable:Add("h","h")
        conversionTable:Add("i","i")
        conversionTable:Add("j","j")
        conversionTable:Add("k","k")
        conversionTable:Add("l","l")
        conversionTable:Add("m","m")
        conversionTable:Add("n","n")
        conversionTable:Add("o","o")
        conversionTable:Add("p","p")
        conversionTable:Add("q","q")
        conversionTable:Add("r","r")
        conversionTable:Add("s","s")
        conversionTable:Add("t","t")
        conversionTable:Add("u","u")
        conversionTable:Add("v","v")
        conversionTable:Add("w","w")
        conversionTable:Add("x","x")
        conversionTable:Add("y","y")
        conversionTable:Add("z","z")

        integer counter = 0
        text result = ""
        repeat value:GetSize() times
            text character = value:GetCharacter(counter)
            if conversionTable:HasKey(character)
                result = result + conversionTable:GetValue(character)
            end
            counter = counter + 1
        end
        return result
    end

end