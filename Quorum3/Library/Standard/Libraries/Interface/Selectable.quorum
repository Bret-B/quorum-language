package Libraries.Interface

use Libraries.Containers.Array
use Libraries.Containers.Support.Pair
use Libraries.Game.GameStateManager
use Libraries.Interface.Selection
use Libraries.Interface.Events.SelectionEvent
use Libraries.Interface.Events.SelectionListener

class Selectable 
    public constant integer SINGLE_SELECTION = 1
    public constant integer RANGE_SELECTION = 2
    public constant integer MULTIPLE_SELECTION = 3

    public constant integer SELECTED = 4
    public constant integer DESELECTED = 5

    integer selectionType = 0

    Array<SelectionListener> listeners

    action GetSelectionType returns integer
        return selectionType
    end

    action SetSelectionType(integer type)
        selectionType = type
    end

    action AddSelectionListener(SelectionListener listener)
        listeners:Add(listener)
    end

    action RemoveSelectionListener(SelectionListener listener)
        listeners:Remove(listener)
    end

    action EmptySelectionListeners
        listeners:Empty()
    end

    action SelectIndices(Array<integer> modifiedIndices)
        FireSelectionEvent(SELECTED, modifiedIndices)
    end

    action SelectIndex(integer selected)
        Array<integer> indices
        indices:Add(selected)
        FireSelectionEvent(SELECTED, indices)
    end

    action DeselectIndices(Array<integer> modifiedIndices)
        FireSelectionEvent(DESELECTED, modifiedIndices)
    end

    action DeselectIndex(integer deselected)
        Array<integer> indices
        indices:Add(deselected)
        FireSelectionEvent(DESELECTED, indices)
    end

    private action FireSelectionEvent(integer eventType, Array<integer> modifiedIndices)
        if modifiedIndices = undefined
            alert("The selection could not be modified because the indices provided were undefined.")
        end

        integer size = modifiedIndices:GetSize()
        if size = 0
            alert("The selection could not be modified because the indices array provided was empty.")
        end

        integer type = GetSelectionType()

        if type = SINGLE_SELECTION
            if size > 1
                alert("The Selectable allows for single selections, but it was asked to select multiple indices.")
            end
        end

        SelectionEvent event
        event:Initialize(type, eventType, me, modifiedIndices)

        integer counter = 0
        
        if eventType = SELECTED
            repeat while counter < listeners:GetSize()
                listeners:Get(counter):Selected(event)
                counter = counter + 1
            end
        elseif eventType = DESELECTED
            repeat while counter < listeners:GetSize()
                listeners:Get(counter):Deselected(event)
                counter = counter + 1
            end
        end

        GameStateManager manager
        manager:GetGame():GetFocusManager():SelectionChanged(event)
    end

    blueprint action GetSingleSelection(integer index) returns Selection

    blueprint action GetRangeSelection(Pair<integer> range) returns Array<Selection>

    action GetRangeSelection(integer index1, integer index2) returns Array<Selection>
        Pair<integer> pair
        pair:Set(index1, index2)
        return GetRangeSelection(pair)
    end

    blueprint action GetMultipleSelection(Array<Pair<integer>> ranges) returns Array<Selection>

    blueprint action GetSelectableSize returns integer

    blueprint action GetCurrentSelection returns Array<Selection>
end