package Libraries.Interface.Layouts

use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Interface.Controls.Control
use Libraries.Interface.Controls.MenuBar
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Label

class FlowLayout is Layout

    boolean ignoreHidden = false

    action Layout(Control container, Array<Item2D> items, number containerWidth, number containerHeight)

        // This is the x position of the next item, unless it flows onto the
        // next line (and resets to 0).
        number x = 0

        // Objects are placed such that their top edge is at the currentY.
        number currentY = containerHeight
        number nextY = containerHeight

        /* 
        Boolean used to ensure we don't perform redundant resizing on items
        that were already fit to their contents while fitting the container
        width to its contents.
        */
        boolean fitContainerContents = false
        LayoutProperties containerProperties = undefined

        if container not= undefined
            containerProperties = container:GetLayoutProperties(containerWidth, containerHeight)
            if containerProperties:NeedsRendering()
                container:LoadGraphics(containerProperties)
            end

            if containerProperties not= undefined
                if containerProperties:GetHorizontalLayoutMode() = containerProperties:FIT_CONTENTS
                    integer i = 0

                    number totalWidthOffset = 0
                    number totalWidthPercentage = 0

                    repeat while i < items:GetSize()
                        Item2D item = items:Get(i)

                        if item is Control
                            Control control = cast(Control, item)
                            LayoutProperties properties = control:GetLayoutProperties(containerWidth, containerHeight)
                            if properties not= undefined
                                if properties:GetHorizontalLayoutMode() = properties:FIT_CONTENTS or properties:GetVerticalLayoutMode() = properties:FIT_CONTENTS
                                    fitContainerContents = true
                                    control:Resize()
                                end

                                if properties:GetHorizontalLayoutMode() = properties:FIT_CONTENTS
                                    totalWidthOffset = totalWidthOffset + control:GetWidth() + properties:GetLeftPadding() + properties:GetRightPadding()
                                else
                                    totalWidthOffset = totalWidthOffset + properties:GetWidthOffset() + properties:GetLeftPadding() + properties:GetRightPadding()
                                    totalWidthPercentage = totalWidthPercentage + properties:GetPercentageWidth()
                                end
                            else
                                // If width can't be determined from its properties, use its width instead.
                                totalWidthOffset = totalWidthOffset + item:GetWidth()
                            end
                        else
                            // If width can't be determined from its properties, use its width instead.
                            totalWidthOffset = totalWidthOffset + item:GetWidth()
                        end

                        i = i + 1
                    end

                    totalWidthPercentage = 1.0 - totalWidthPercentage
                    containerWidth = totalWidthOffset / totalWidthPercentage
                    container:SetWidth(containerWidth)
                end

                if containerProperties:GetVerticalLayoutMode() = containerProperties:FIT_FONT
                    Font font = containerProperties:GetFont()
                    output "Fitting container " + container:GetName() + " to font."
                    if font not= undefined
                        number height = font:GetLineHeight()
                        output "Fit font size is " + height
                        if container:GetHeight() not= height
                            container:SetHeight(height)
                        end
                    else
                        output "Font was undefined."
                    end
                end
            end
        end

        i = 0
        repeat while i < items:GetSize()
            Item2D item = items:Get(i)

            if item is Control
                Control control = cast(Control, item)
                output "Control: " + control:GetName()

                LayoutProperties properties = control:GetLayoutProperties(containerWidth, containerHeight)

                if properties:NeedsRendering()
                    control:LoadGraphics(properties)
                end

                if properties not= undefined and (ignoreHidden = false or control:IsShowing())
                    output "Laying out " + control:GetName() + " using properties."

                    number width = 0
                    number leftPadding = properties:GetLeftPadding()
                    number rightPadding = properties:GetRightPadding()
                    number topPadding = properties:GetTopPadding()
                    number bottomPadding = properties:GetBottomPadding()

                    /*
                    Boolean used to ensure we don't perform redundant resizing
                    on a control.
                    */
                    boolean alreadyFitContents = fitContainerContents

                    if properties:GetHorizontalLayoutMode() = properties:FIT_CONTENTS and alreadyFitContents = false
                        alreadyFitContents = true
                        if properties:GetVerticalLayoutMode() = properties:FIT_CONTENTS
                            // Resize the control and allow it to set its own dimensions.
                            control:Resize()
                        elseif properties:GetVerticalLayoutMode() = properties:FILL
                            // Setting the height will trigger a resize.
                            control:SetHeight(currentY)
                        else
                            // Setting the height will trigger a resize.
                            control:SetHeight(containerHeight * properties:GetPercentageHeight() + properties:GetHeightOffset())
                        end
                    elseif properties:GetHorizontalLayoutMode() = properties:FILL
                        width = containerWidth - x
                    else
                        width = containerWidth * properties:GetPercentageWidth() + properties:GetWidthOffset() + leftPadding + rightPadding
                    end

                    // When we set the size in this step, we also trigger a
                    // resize that will cascade to the entire control's hierarchy.
                    if alreadyFitContents = false
                        if properties:GetVerticalLayoutMode() = properties:FILL
                            control:SetSize(width, currentY)
                        elseif properties:GetVerticalLayoutMode() = properties:FIT_CONTENTS
                            // Set the control's width and allow it to set its own height via its contents.
                            // Setting the width triggers its layout to resize.
                            control:SetWidth(width)
                        elseif properties:GetVerticalLayoutMode() = properties:FIT_FONT
                            Font font = properties:GetFont()
                            output "Fit font in Flow for " + control:GetName()
                            if font not= undefined
                                font:LoadFont("Arial")
                                font:SetSize(properties:GetFontSize())
                                number height = font:GetLineHeight()
                                control:SetSize(width, height)
                                output "Setting control size to " + width + ", " + height
                            end
                        else
                            output "Didn't fit font for " + control:GetName() + ", value was " + properties:GetVerticalLayoutMode() + ", FIT_FONT is " + properties:FIT_FONT
                            control:SetSize(width, containerHeight * properties:GetPercentageHeight() + properties:GetHeightOffset())
                        end
                    end

                    x = x + leftPadding

                    if x + control:GetWidth() > containerWidth
                        currentY = nextY
                        x = leftPadding
                    end

                    number verticalSpace = currentY - control:GetHeight() - topPadding - bottomPadding

                    if verticalSpace < nextY
                        nextY = verticalSpace
                    end

                    output "Positioning " + control:GetName() + " at " + x + ", " + (currentY - control:GetHeight()) + " -- leftPadding = " + leftPadding
                    output "currentY = " + currentY + ", control height = " + control:GetHeight()
                    control:SetPosition(x, currentY - control:GetHeight() - topPadding)
                    x = x + control:GetWidth() + rightPadding
                end
            end

            i = i + 1
        end

        if containerProperties not= undefined and containerProperties:GetVerticalLayoutMode() = containerProperties:FIT_CONTENTS
            container:SetHeight(containerHeight - nextY)

            /*
            We had to place all elements before to determine the height of the
            container, but now that the height is known we need to ensure the
            items are placed at the right y positions.
            */
            integer counter = 0
            x = 0
            containerHeight = container:GetHeight()
            currentY = containerHeight
            nextY = containerHeight
            repeat while counter < items:GetSize()
                Item2D item = items:Get(counter)

                number leftPadding = 0
                number rightPadding = 0
                number topPadding = 0
                number bottomPadding = 0

                if item is Control
                    Control control = cast(Control, item)
                    LayoutProperties properties = control:GetLayoutProperties(containerWidth, containerHeight)
                    if properties not= undefined
                        leftPadding = properties:GetLeftPadding()
                        rightPadding = properties:GetRightPadding()
                        topPadding = properties:GetTopPadding()
                        bottomPadding = properties:GetBottomPadding()
                    end
                end

                x = x + leftPadding

                if x + item:GetWidth() + rightPadding > containerWidth
                    currentY = nextY
                    x = leftPadding
                end

                if currentY - item:GetHeight() - topPadding - bottomPadding < nextY
                    nextY = currentY - item:GetHeight() - topPadding - bottomPadding
                end

                item:SetPosition(x, currentY - item:GetHeight() - topPadding)
                x = x + item:GetWidth() + rightPadding

                counter = counter + 1
            end
        end
    end

    action SetIgnoreHidden(boolean ignore)
        ignoreHidden = ignore
    end

    action IsIgnoringHidden returns boolean
        return ignoreHidden
    end
end