package Libraries.Interface

use Libraries.Interface.Item
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Events.SelectionEvent
use Libraries.Interface.Events.MenuChangeEvent
use Libraries.Interface.Events.TreeChangeEvent
use Libraries.Interface.Selections.Selection
use Libraries.Interface.Selections.TextBoxSelection
use Libraries.Interface.Selections.TabPaneSelection
use Libraries.Interface.Selections.MenuSelection
use Libraries.Interface.Selections.TreeSelection
use Libraries.Containers.Array

class AccessibilityManager 

    // SetFocus: Tells the accessibility manager that focus has changed to the 
    //           given Item. As far as the native code is concerned, focus changes
    //           only raise an event with UI Automation. No focus state is maintained
    //           at the native level.
    private system action SetFocus(Item item) returns boolean

    // NativeAdd: Adds an Item to the accessibility hierarchy so the screen 
    //            readers can access information about it.
    private system action NativeAdd(Item item) returns boolean
    
    // NativeAdd: Adds an Item to the accessibility heirarchy and sets it's parent
    //            to an item already in the heirarchy if that parent is supported.
    private system action NativeAdd(Item item, Item parentItem) returns boolean

    // NativeRemove: Removes an Item from the native accessibility tree so that it is no longer available to screen readers.
    private system action NativeRemove(Item item) returns boolean

    
    private system action NativeRemove(Item item, Item parentItem) returns boolean

    // ===== actions for Buttons
    
    // == Pushbuttons
    system action InvokeButton(Item button) returns boolean

    // == Togglebuttons
    system action UpdateToggleState(Item button, boolean selected) returns boolean

    // ===== actions for Textbox

    // TextSelectionChanged: This action will be called whenever the text selection has changed.
    //                       For example, a word or character has been added to the selection.
    system action TextSelectionChanged(Item Textbox)

    // CaretPositionChanged: This action will be called whenever the caret moves or when text has
    //                       been added or removed.
    system action CaretPositionChanged(Item TextBox, Text adjacentCharacter)

    action SelectionChanged(SelectionEvent event)
        Selection selection = event:GetSelection()
        if selection is TextBoxSelection
            // Do TextBox things
        elseif selection is TabPaneSelection
            // Do TabPane things
        elseif selection is MenuSelection
            // Do Menu things
        elseif selection is TreeSelection
            // Do Tree things
        else
            // Do generic things
        end

        output "Selection changed."
    end

    action FocusChanged(FocusEvent event)
        
        // Handle the focus change.
        Item newFocus = event:GetNewFocus()
        output "Focus changed to: " + newFocus:GetAccessibilityType() + " - " + newFocus:GetName()
        SetFocus(newFocus)

    end

    action Add(Item item)

        // Add item to accessibility hierarchy if its accessibility type is supported.
        if item:GetAccessibilityCode() not= item:ITEM

            // TODO: This section can be removed once everything is supported
            if item:GetAccessibilityCode() = item:BUTTON
//                    or item:GetAccessibilityCode() = item:MENU_BAR
//                    or item:GetAccessibilityCode() = item:MENU_ITEM

                output "Adding " + item:GetAccessibilityType() + ": " + item:GetName()
                NativeAdd(item)
            elseif item:GetAccessibilityCode() not= item:ITEM
                // Until other controls are properly fleshed out create an ITEM
                // accessibility object for unsupported types. That way at the 
                // very least the name of the GUI component will be spoken on focus.
                output "Adding " + item:GetAccessibilityType() + ": " + item:GetName() + " as ITEM."
                item:SetAccessibilityCode(item:ITEM)
                NativeAdd(item)
            end
            
            // TODO: Once all GUI controls have been implemented properly then
            //       remove the above if statment and uncomment this line.
            //NativeAdd(item)
        end        

        if item is Item2D
            Item2D temp = cast(Item2D, item)
            Array<Item2D> children = temp:GetChildren()
            
            integer counter = 0

            repeat while counter < children:GetSize()
                Add(children:Get(counter))
                counter = counter + 1
            end

        elseif item is Item3D
            // TODO: Add support for Item3D
        end

        
    end

    action Remove(Item item)
        output "Removing item: " + item:GetName()
    end

    action MenuChanged(MenuChangeEvent event)
        output "Menu changed: " + event:GetMenuItem():GetName()
    end

    action TreeChanged(TreeChangeEvent event)
        output "Tree changed: " + event:GetTreeItem():GetName()
    end
end