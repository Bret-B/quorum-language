package Libraries.Interface

use Libraries.Interface.Item2D
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Font
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.MouseListener
use Libraries.Interface.Events.MouseMovementListener
use Libraries.Interface.Events.MouseWheelListener
use Libraries.Containers.Array
use Libraries.Containers.MultipleLineText
use Libraries.System.File
use Libraries.Game.Graphics.Glyph
use Libraries.Game.Graphics.Painter2D

class TextBox is Item2D, MouseListener, MouseMovementListener, MouseWheelListener

    /*
    All of the text contained in this object.
    */
    MultipleLineText textValue

    /*
    The font used for the text. For future iterations, this will be replaced by
    an iterable structure, along with information indicating at what line and
    character positions the font changes.
    */
    Font font

    /*
    The color of characters. For future iterations, this will be replaced by an
    iterable structure, along with information indicating at what line and
    character positions the font changes.
    */
    Color characterColor

    /*
    The first line that's visible at the current position of the scroll track.
    */
    integer firstLine = 0

    /*
    How close to the top of the scroll area the top of the vertical view is. A
    value of 1.0 means the top of the vertical view is at the top of the scroll
    area, while a value of 0.0 indicates the top of the vertical view is at the
    very bottom of the scroll area (which is only possible in the unlikely case
    that the height of the viewing region is 0). This is used to calculate the
    firstLine value.
    */
    number verticalViewPercentage = 1.0

    /*
    An array of lines which are visible on the screen, where each line is
    composed of an array of drawables representing each character on the line.
    */
    Array<Array<Drawable>> lineCharacters

    Drawable background
    Drawable horizontalBar
    Drawable horizontalControl
    Drawable verticalBar
    Drawable verticalControl

    number scrollDistance = 3
    integer barThickness = 20

    number vertical = 1.0
    number horizontal = 0

    public constant integer VISIBLE_IF_NEEDED = 1
    public constant integer ALWAYS_VISIBLE = 2
    public constant integer NEVER_VISIBLE = 3

    integer verticalMode = VISIBLE_IF_NEEDED
    integer horizontalMode = VISIBLE_IF_NEEDED

    /*
    Values used for when the control is dragged along the scroll track.
    */
    boolean isClicked = false
    boolean verticalChanging = true
    number clickPointOffset = 0

    on create
        SetName("Text Box")
        SetClipping(true)
        AddMouseWheelListener(me)
        AddMouseListener(me)
        AddMouseMovementListener(me)

        Add(background)

        textValue:DisableTextWrapping()

        if font:FontIsAvailable("Courier New")
            font:LoadFont("Courier New")
        elseif font:FontIsAvailable("Courier")
            font:LoadFont("Courier")
        elseif font:FontIsAvailable("Arial")
            font:LoadFont("Arial")
        else
            Array<File> availableFontFiles = font:GetAvailableFonts()
            if availableFontFiles:GetSize() > 0
                font:LoadFont(availableFontFiles:Get(0))
            end
        end
    end

    action Initialize(number width, number height, Color backgroundColor)
        if backgroundColor not= undefined
            background:LoadFilledRectangle(cast(integer, width), cast(integer, height), backgroundColor)
        end

        SetWidth(width)
        SetHeight(height)

        CreateScrollBars()

        verticalBar:SetName("Vertical Scroll Track")
        verticalControl:SetName("Vertical Scroll Control")
    end

    action Initialize(number width, number height, Color backgroundColor, text value)
        textValue:Initialize(value)
        Initialize(width, height, backgroundColor)
        GetLineDrawables()
    end

    /*
    Makes everything from scratch. For initialization purposes.
    */
    private action GetLineDrawables
        Array<MultipleLineText> lines = textValue:GetLines()
        integer totalLines = lines:GetSize()
        integer lineHeight = font:GetLineHeight()
        number visibleLine = totalLines - (totalLines * verticalViewPercentage)
//        output totalLines + " - " + "(" + totalLines + " * " + verticalViewPercentage + ") = " + visibleLine
        firstLine = cast(integer, visibleLine)
        
        lineCharacters:Empty()
        background:Empty()

        number yPosition = GetHeight() + (visibleLine - firstLine) * lineHeight 
        integer counter = firstLine
        repeat while counter < totalLines and yPosition > 0
            yPosition = yPosition - lineHeight

            text line = lines:Get(counter):GetText()
            integer size = line:GetSize()
            if line:EndsWith(line:GetLineFeed())
                size = size - 1
            end

            Array<Drawable> drawables
            integer characterCounter = 0
            number x = 0
            repeat size times
                Glyph glyph = font:GetGlyph(line:GetCharacter(characterCounter))
                Drawable draw = glyph:drawable
                if draw not= undefined
                    draw:SetPosition(x + glyph:lengthToGlyph, yPosition + glyph:heightFromBaseLine - draw:GetHeight())
                    drawables:Add(draw)
                    background:Add(draw)
                end
                x = x + glyph:horizontalAdvance
                characterCounter = characterCounter + 1
            end

            lineCharacters:Add(drawables)
            counter = counter + 1
        end
    end

    action SetWidth(integer newWidth)
        parent:Libraries.Interface.Item2D:SetWidth(newWidth)
        horizontalBar:SetWidth(newWidth)
    end

    action SetHeight(integer newHeight)
        parent:Libraries.Interface.Item2D:SetHeight(newHeight)
        verticalBar:SetHeight(newHeight)
    end

    private action CreateScrollBars
        Color color
        number height = GetHeight()
        number width = GetWidth()
//        number verticalRatio = height / scrollAnchor:GetHeight()
        number verticalRatio = height / GetScrollRegionHeight()
        number horizontalRatio = width / GetScrollRegionWidth()
        boolean verticalVisible = (verticalMode = ALWAYS_VISIBLE or (verticalMode = VISIBLE_IF_NEEDED and verticalRatio < 1.0))
        boolean horizontalVisible = (horizontalMode = ALWAYS_VISIBLE or (horizontalMode = VISIBLE_IF_NEEDED and horizontalRatio < 1.0))
        number barHeight = height
        number barWidth = width
        if verticalVisible and horizontalVisible
            barHeight = height - barThickness
            barWidth = width - barThickness
            verticalBar:SetY(barThickness)
        end

        if verticalVisible
            verticalBar:LoadFilledRectangle(barThickness, cast(integer, barHeight), color:CustomColor(0.9, 0.9, 0.9, 1))
            verticalBar:SetX(width - barThickness)
            parent:Item2D:Add(verticalBar)

            verticalControl:LoadFilledRectangle(barThickness, cast(integer, verticalRatio * height), color:CustomColor(0.75, 0.75, 0.75, 1))
            verticalControl:SetY(height - verticalRatio * height - (height - barHeight))
            verticalBar:Add(verticalControl)
            verticalBar:Show()
        else
            verticalBar:Hide()
        end

        if horizontalVisible
            horizontalBar:LoadFilledRectangle(cast(integer, barWidth), barThickness, color:CustomColor(0.9, 0.9, 0.9, 1))
            parent:Item2D:Add(horizontalBar)

            horizontalControl:LoadFilledRectangle(cast(integer, horizontalRatio * width), barThickness, color:CustomColor(0.75, 0.75, 0.75, 1))
//            horizontalControl:SetY(height - ratio * height)
            horizontalBar:Add(horizontalControl)
            horizontalBar:Show()
        else
            horizontalBar:Hide()
        end

        UpdatePaneView(0, 1.0)
    end

    action SetScrollDistance(number distance)
        scrollDistance = distance
    end

    action GetScrollDistance returns number
        return scrollDistance
    end

    action ScrolledMouse(MouseEvent event)
        number y = GetVerticalTrackPercentage(verticalControl:GetY() + event:scrollAmount * scrollDistance * 10)
        UpdatePaneView(horizontal, y)
    end

    action DraggedMouse(MouseEvent event)
        if isClicked
            // Determine if we are updating the vertical or horizontal bar.
            if verticalChanging
                number y = GetVerticalTrackPercentage(event:GetY() - verticalBar:GetGlobalY()) - clickPointOffset
                UpdatePaneView(horizontal, y)
            else
                number x = GetHorizontalTrackPercentage(event:GetX() - horizontalBar:GetGlobalX()) - clickPointOffset
                UpdatePaneView(x, vertical)
            end
        end
    end

    action ClickedMouse(MouseEvent event)
        if event:GetSource() not= undefined and event:GetSource() is Item2D
            Item2D source = cast(Item2D, event:GetSource())
            if source:Equals(verticalControl)
                isClicked = true
                verticalChanging = true
                clickPointOffset = GetVerticalTrackPercentage(event:GetY() - verticalBar:GetGlobalY()) - vertical
            elseif source:Equals(horizontalControl)
                isClicked = true
                verticalChanging = false
                clickPointOffset = GetHorizontalTrackPercentage(event:GetX() - horizontalBar:GetGlobalX()) - horizontal
            else
                isClicked = false
            end
        end
    end

    action ReleasedMouse(MouseEvent event)
        isClicked = false
    end

//    action SetRegionSize(number width, number height)
//        scrollAnchor:SetWidth(width)
//        scrollAnchor:SetHeight(height)
//        CreateScrollBars()
//    end
//
//    action FitRegionToContents
//        Number width
//        width:SetValue(0)
//        Number height
//        height:SetValue(0)
//        FindDimensions(scrollAnchor:GetChildren(), width, height)
//        SetRegionSize(width:GetValue() - scrollAnchor:GetGlobalX(), height:GetValue() - scrollAnchor:GetGlobalY())
//    end
//
//    private action FindDimensions(Array<Item2D> items, Number width, Number height)
//        integer counter = 0
//        repeat while counter < items:GetSize()
//            Item2D item = items:Get(counter)
//
//            if item:GetGlobalX() + item:GetWidth() > width:GetValue()
//                width:SetValue(item:GetGlobalX() + item:GetWidth())
//            end
//
//            if item:GetGlobalY() + item:GetHeight() > height:GetValue()
//                height:SetValue(item:GetGlobalY() + item:GetHeight())
//            end
//
//            if not item:IsClipping()
//                FindDimensions(item:GetChildren(), width, height)
//            end
//
//            counter = counter + 1
//        end
//    end

    /*
    Takes values between 0.0 and 1.0 as percentage-style positions for the
    vertical and horizontal scroll bars and view area.
    */
    action UpdatePaneView(number horizontal, number vertical)
        if vertical > 1.0
            vertical = 1.0
        elseif vertical < 0.0
            vertical = 0.0
        end

        if horizontal > 1.0
            horizontal = 1.0
        elseif horizontal < 0.0
            horizontal = 0.0
        end

        number sharedSpaceOffset = 0
        if horizontalBar:IsShowing() and verticalBar:IsShowing()
            sharedSpaceOffset = barThickness
        end

        number adjustedHeight = GetHeight() - verticalControl:GetHeight() - sharedSpaceOffset
        verticalControl:SetY(adjustedHeight * vertical)

        number adjustedWidth = GetWidth() - horizontalControl:GetWidth() - sharedSpaceOffset
        horizontalControl:SetX(adjustedWidth * horizontal)

        number adjustedScrollWidth = GetScrollRegionWidth() - GetWidth()
        number adjustedScrollHeight = GetScrollRegionHeight() - GetHeight()
        
//        scrollAnchor:SetPosition(-adjustedScrollWidth * horizontal, -adjustedScrollHeight * vertical)

        verticalViewPercentage = (verticalControl:GetHeight() + verticalControl:GetY() + sharedSpaceOffset) / GetHeight()

        me:vertical = vertical
        me:horizontal = horizontal

        GetLineDrawables()
    end

    private action GetVerticalTrackPercentage(number y) returns number
        return y / (GetHeight() - verticalControl:GetHeight())
    end

    private action GetHorizontalTrackPercentage(number x) returns number
        return x / (GetWidth() - horizontalControl:GetWidth())
    end

    action GetScrollRegionHeight returns number
        // This approach works so long as the font is universally styled (and
        // thus all lines are the same height).
        number height = textValue:GetLineCount() * font:GetLineHeight()
        if height > GetHeight()
            return height
        else
            return GetHeight()
        end
    end

    action GetScrollRegionWidth returns number
        // Temporary value for testing only. Should be calculated from longest line's width.
        number width = 1000
        if width > GetWidth()
            return width
        else
            return GetWidth()
        end
    end
end