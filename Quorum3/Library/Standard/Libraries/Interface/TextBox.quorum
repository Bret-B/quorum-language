package Libraries.Interface

use Libraries.Interface.Item2D
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Font
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.MouseListener
use Libraries.Interface.Events.MouseMovementListener
use Libraries.Interface.Events.MouseWheelListener
use Libraries.Interface.Events.FocusListener
use Libraries.Interface.Events.FocusEvent
use Libraries.Containers.Array
use Libraries.Containers.MultipleLineText
use Libraries.System.File
use Libraries.Game.Graphics.Glyph
use Libraries.Game.Graphics.Painter2D
use Libraries.Compute.Math
use Libraries.Containers.Support.Pair

class TextBox is Item2D, MouseListener, MouseMovementListener, MouseWheelListener, FocusListener, Selectable

    /*
    All of the text contained in this object.
    */
    MultipleLineText textValue

    /*
    The font used for the text. For future iterations, this will be replaced by
    an iterable structure, along with information indicating at what line and
    character positions the font changes.
    */
    Font font

    /*
    The color of characters. For future iterations, this will be replaced by an
    iterable structure, along with information indicating at what line and
    character positions the font changes.
    */
    Color characterColor

    /*
    The first line that's visible at the current position of the scroll track. A
    non-integer value indicates that the first line is partially off of the top
    of the screen - for example, a value of 2.6 indicates that line 2 is the
    first visible line, where 60% of the line's height is off the top of the 
    pane.
    */
    number firstLine = 0

    /*
    How close to the top of the scroll area the top of the vertical view is. A
    value of 1.0 means the top of the vertical view is at the top of the scroll
    area, while a value of 0.0 indicates the top of the vertical view is at the
    very bottom of the scroll area (which is only possible in the unlikely case
    that the height of the viewing region is 0). This is used to calculate the
    firstLine value.
    */
    number verticalViewPercentage = 1.0

    /*
    The width of the scroll region, as calculated by the longest line of text.
    A value of -1 indicates the width needs to be recalculated.
    */
    number scrollRegionWidth = -1

    /*
    An array of lines which are visible on the screen, where each line is
    composed of an array of drawables representing each character on the line.
    */
    Array<Array<Drawable>> lineCharacters

    Drawable caret
    integer caretThickness = 1
    Color caretColor = characterColor:Black()

    /*
    Whether the caret is active or not. This does not necessarily mean the caret
    is visible at any exact moment - the caret might be non-visible even while
    active, for example if the caret has been idle and is blinking. This boolean
    effectively ensures that the caret is usable, i.e., the text box has focus.
    */
    boolean caretActive = false

    number caretIdleTime = 1.0
    number caretBlinkTime = 0.35
    number caretMoveTime = 0.1
    number caretTimer = 0

    /*
    The caret's position is known using three values:
        caretLine, which line the caret is on.
        caretCharacter, the character index of the caret on its particular line.
        caretX, the actual X position of the caret, which is used for vertical movement.
    */
    integer caretLine = 0
    integer caretCharacter = 0
    number caretX = 0

    Drawable background
    Drawable horizontalBar
    Drawable horizontalControl
    Drawable verticalBar
    Drawable verticalControl
    
    number scrollDistance = 3
    integer barThickness = 20

    number vertical = 1.0
    number horizontal = 0

    public constant integer VISIBLE_IF_NEEDED = 1
    public constant integer ALWAYS_VISIBLE = 2
    public constant integer NEVER_VISIBLE = 3

    integer verticalMode = VISIBLE_IF_NEEDED
    integer horizontalMode = VISIBLE_IF_NEEDED

    /*
    Values used for when the control is dragged along the scroll track.
    */
    boolean isClicked = false
    boolean verticalChanging = true
    number clickPointOffset = 0

    Math math

    on create
        SetName("Text Box")
        SetInputGroup("TextBox")
        SetFocusable(true)
        AddFocusListener(me)
        SetClipping(true)
        AddMouseWheelListener(me)
        AddMouseListener(me)
        AddMouseMovementListener(me)

        SetSelectionType(parent:Selectable:RANGE_SELECTION)

        Add(background)

        textValue:DisableTextWrapping()

        if font:FontIsAvailable("Courier New")
            font:LoadFont("Courier New")
        elseif font:FontIsAvailable("Courier")
            font:LoadFont("Courier")
        elseif font:FontIsAvailable("cour")
            font:LoadFont("cour")
        elseif font:FontIsAvailable("Arial")
            font:LoadFont("Arial")
        else
            Array<File> availableFontFiles = font:GetAvailableFonts()
            if availableFontFiles:GetSize() > 0
                font:LoadFont(availableFontFiles:Get(0))
            end
        end
    end

    action Initialize(number width, number height, Color backgroundColor)
        if backgroundColor not= undefined
            background:LoadFilledRectangle(cast(integer, width), cast(integer, height), backgroundColor)
        end

        SetWidth(width)
        SetHeight(height)

        CreateScrollBars()

        verticalBar:SetName("Vertical Scroll Track")
        verticalControl:SetName("Vertical Scroll Control")

        InitializeCaret()
        caret:Hide()
        caretActive = false
    end

    action Initialize(number width, number height, Color backgroundColor, text value)
        textValue:Initialize(value)
        Initialize(width, height, backgroundColor)
        GetLineDrawables()
    end

    /*
    Makes everything from scratch. For initialization purposes.
    */
    private action GetLineDrawables
        Array<MultipleLineText> lines = textValue:GetLines()
        integer totalLines = lines:GetSize()
        integer lineHeight = font:GetLineHeight()
        firstLine = totalLines - (totalLines * verticalViewPercentage)
        integer firstLineInteger = cast(integer, firstLine)
        
        lineCharacters:Empty()
        background:Empty()

        number yPosition = GetHeight() + (firstLine - firstLineInteger) * lineHeight 
        integer counter = firstLineInteger
        repeat while counter < totalLines and yPosition > 0
            yPosition = yPosition - lineHeight

            text line = lines:Get(counter):GetText()
            integer size = line:GetSize()
            if line:EndsWith(line:GetLineFeed())
                size = size - 1
            end

            Array<Drawable> drawables
            integer characterCounter = 0
            number x = -horizontal * (GetScrollRegionWidth() - (GetWidth() - GetSharedSpaceOffset()))
            repeat size times
                Glyph glyph = font:GetGlyph(line:GetCharacter(characterCounter))
                Drawable draw = glyph:drawable
                if draw not= undefined
                    draw:SetPosition(x + glyph:lengthToGlyph, yPosition + glyph:heightFromBaseLine - draw:GetHeight())
                    drawables:Add(draw)
                    background:Add(draw)
                end
                x = x + glyph:horizontalAdvance
                characterCounter = characterCounter + 1
            end

            lineCharacters:Add(drawables)
            counter = counter + 1
        end

        PositionCaret()
        background:Add(caret)
    end

    private action InitializeCaret
        if caret:IsLoaded()
            if caret:GetWidth() not= caretThickness or caret:GetHeight() not= font:GetLineHeight()
                caret:Dispose()
            else
                return now
            end
        end
        caret:LoadFilledRectangle(caretThickness, font:GetLineHeight(), caretColor)
    end

    /*
    Positions the caret on the screen using the caretLine and caretCharacter
    values. Also calculates the new x position of the caret, which is returned.
    Depending on context, this value can be saved to overwrite the previous
    caretX, or ignored to preserve the old value.
    */
    private action PositionCaret returns number
        number lineOffset = (caretLine - firstLine + 1) * font:GetLineHeight()
        
        number x = 0
        number horizontalOffset = -horizontal * (GetScrollRegionWidth() - (GetWidth() - GetSharedSpaceOffset()))
        MultipleLineText line = textValue:GetLine(caretLine)
        text lineCharacters = line:GetText()

        integer counter = 0
        repeat while counter < caretCharacter
            Glyph glyph = font:GetGlyph(lineCharacters:GetCharacter(counter))
            x = x + glyph:horizontalAdvance
            counter = counter + 1
        end

        caret:SetPosition(x + horizontalOffset, GetHeight() - lineOffset - font:GetLineHeight() / 4)
        return x
    end

    action GoToLine(number line)
        Array<MultipleLineText> lines = textValue:GetLines()
        number paneHeight = GetHeight() - GetSharedSpaceOffset()
        number lineSpace = lines:GetSize() * font:GetLineHeight() - paneHeight
        number viableLines = lines:GetSize() - (paneHeight / font:GetLineHeight())
        number newVertical = 1.0 - (line / viableLines)
        UpdatePaneView(horizontal, newVertical)
    end

    /*
    For testing purposes.
    */
    action SetCaretPosition(integer line, integer index)
        caretLine = line
        caretCharacter = index
        caretX = PositionCaret()
    end

    action MoveCaretLeft
        if not caretActive
            return now
        end

        integer oldIndex = GetCaretIndex()

        if caretCharacter = 0
            if caretLine = 0
                return now
            else
                caretLine = caretLine - 1
                text lineText = textValue:GetLine(caretLine):GetText()
                caretCharacter = lineText:GetSize()
                if lineText:EndsWith(lineText:GetLineFeed())
                    caretCharacter = caretCharacter - 1
                end

                if caretLine < firstLine
                   GoToLine(caretLine)
                end
            end
        else
            caretCharacter = caretCharacter - 1
        end
        FitCharacterOnScreen(caretLine, caretCharacter)
        caretX = PositionCaret()
        ShowCaret()

        DeselectIndex(oldIndex)
        SelectIndex(GetCaretIndex())
    end

    action MoveCaretRight
        if not caretActive
            return now
        end

        integer oldIndex = GetCaretIndex()

        text lineText = textValue:GetLine(caretLine):GetText()
        integer size = lineText:GetSize()
        if lineText:EndsWith(lineText:GetLineFeed())
            size = size - 1
        end
        if caretCharacter >= size
            if caretLine + 1 = textValue:GetLineCount()
                return now
            end
            caretLine = caretLine + 1
            caretCharacter = 0

            number visibleLines = (GetHeight() - GetSharedSpaceOffset()) / font:GetLineHeight()
            if caretLine > (firstLine + visibleLines - 1)
                GoToLine(caretLine - visibleLines + 1)
            end
        else
            caretCharacter = caretCharacter + 1
        end
        FitCharacterOnScreen(caretLine, caretCharacter)
        caretX = PositionCaret()
        ShowCaret()

        DeselectIndex(oldIndex)
        SelectIndex(GetCaretIndex())
    end

    /*
    Fits a character horizontally on the screen. Does not adjust vertical
    positioning of the pane.
    */
    private action FitCharacterOnScreen(integer line, integer character)
        number sharedSpace = GetSharedSpaceOffset()
        number left = horizontal * (GetScrollRegionWidth() - (GetWidth() - sharedSpace))
        number right = left + GetWidth() - sharedSpace

        text lineCharacters = ""

        // This line has been sometimes crashing the program. The check/detect
        // block here is used in case of error to gather additional info.
        check
            lineCharacters = textValue:GetLines():Get(line):GetText()
        detect Error
            output "FitCharacterOnScreen crashed due to invalid location in array."
            output "Line count: " + textValue:GetLineCount() + ", line = " + line + ", character = " + character
            alert("CRASHED.")
        end

        integer counter = 0
        number x = 0
        
        repeat while counter < character
            Glyph glyph = font:GetGlyph(lineCharacters:GetCharacter(counter))
            x = x + glyph:horizontalAdvance
            counter = counter + 1
        end


        if x < left
            number newHorizontal = x / (GetScrollRegionWidth() - (GetWidth() - sharedSpace))
            UpdatePaneView(newHorizontal, vertical)
        else
            if lineCharacters:GetSize() > counter
                x = x + font:GetGlyph(lineCharacters:GetCharacter(counter)):horizontalAdvance
            end
            if x > right
                number newHorizontal = (x - (GetWidth() - sharedSpace)) / (GetScrollRegionWidth() - (GetWidth() - sharedSpace))
                UpdatePaneView(newHorizontal, vertical)
            end
        end
    end

    action MoveCaretDown
        if not caretActive
            return now
        end

        if caretLine + 1 = textValue:GetLineCount()
            return now
        end

        integer oldIndex = GetCaretIndex()

        caretLine = caretLine + 1
        caretCharacter = GetNearestCharacter(caretLine, caretX)

        number visibleLines = (GetHeight() - GetSharedSpaceOffset()) / font:GetLineHeight()
        if caretLine > (firstLine + visibleLines - 1)
            GoToLine(caretLine - visibleLines + 1)
        end

        FitCharacterOnScreen(caretLine, caretCharacter)
        // Don't store the returned value from PositionCaret() - keeping the old
        // value lets it flow more naturally across lines of varying length.
        PositionCaret()
        ShowCaret()

        DeselectIndex(oldIndex)
        SelectIndex(GetCaretIndex())
    end

    action MoveCaretUp
        if not caretActive
            return now
        end

        if caretLine = 0
            return now
        end

        integer oldIndex = GetCaretIndex()

        caretLine = caretLine - 1
        caretCharacter = GetNearestCharacter(caretLine, caretX)

        if caretLine < firstLine
            GoToLine(caretLine)
        end

        FitCharacterOnScreen(caretLine, caretCharacter)
        // Don't store the returned value from PositionCaret() - keeping the old
        // value lets it flow more naturally across lines of varying length.
        PositionCaret()
        ShowCaret()

        DeselectIndex(oldIndex)
        SelectIndex(GetCaretIndex())
    end

    /*
    For the given line, find the character index for the closest possible cursor
    position. Used for vertical caret navigation.
    */
    private action GetNearestCharacter(integer line, number position) returns integer
        text lineText = textValue:GetLine(line):GetText()
        integer size = lineText:GetSize()
        if lineText:EndsWith(lineText:GetLineFeed())
            size = size - 1
        end

        number x1 = 0
        number x2 = 0
        integer counter = 0
        number distance1 = position
        repeat while counter < size
            Glyph glyph = font:GetGlyph(lineText:GetCharacter(counter))
            x2 = x1 + glyph:horizontalAdvance
            number distance2 = math:AbsoluteValue(position - x2)
            if distance1 < distance2
                return counter
            end
            
            distance1 = distance2
            x1 = x2
            counter = counter + 1
        end

        return counter
    end

    action ShowCaret
        caret:Show()
        caretActive = true
        caretTimer = caretIdleTime
    end

    action HideCaret
        caret:Hide()
        caretActive = false
    end

    action DeleteBackward
        integer index = textValue:CharacterIndexFromLineIndex(caretLine) + caretCharacter
        if index = 0
            return now
        end

        boolean shouldResize = false
        number oldLength = GetLineWidth(caretLine)

        if caretCharacter = 0
            caretLine = caretLine - 1
            caretCharacter = textValue:GetLine(caretLine):GetText():GetSize()
            shouldResize = true
        elseif oldLength = GetScrollRegionWidth()
            // Force a recalculation of the width by setting its value to -1.
            scrollRegionWidth = -1
            shouldResize = true
        end

        textValue = textValue:Delete(index - 1, index)
        caretCharacter = caretCharacter - 1

        if caretLine < firstLine
            GoToLine(caretLine)
        end

        if shouldResize
            CreateScrollBars()
        end

        FitCharacterOnScreen(caretLine, caretCharacter)
        GetLineDrawables()
        caretX = PositionCaret()
        ShowCaret()
    end

    action DeleteForward
        if caretLine = textValue:GetLineCount() - 1
            text line = textValue:GetLine(caretLine):GetText()
            if caretCharacter = line:GetSize()
                return now
            end
        end

        integer index = textValue:CharacterIndexFromLineIndex(caretLine) + caretCharacter
        textValue = textValue:Delete(index, index + 1)
        GetLineDrawables()
        PositionCaret()
        ShowCaret()
    end

    action Insert(text value)
        textValue = textValue:Insert(GetCaretIndex(), value)
        
        // Determine how many new lines are produced from the insert so that we
        // know where to position the caret.
        integer counter = value:GetSize()
        integer characters = 0
        integer newLines = 0
        repeat while counter > 0
            counter = counter - 1
            if value:GetCharacter(counter) = value:GetLineFeed()
                newLines = newLines + 1
            elseif newLines = 0
                characters = characters + 1
            end
        end

        if newLines = 0
            caretCharacter = caretCharacter + characters
        else
            caretLine = caretLine + newLines
            caretCharacter = characters

            // Resize the scroll region height and resize bars.
            CreateScrollBars()

            number visibleLines = (GetHeight() - GetSharedSpaceOffset()) / font:GetLineHeight()
            if caretLine > (firstLine + visibleLines - 1)
                GoToLine(caretLine - visibleLines + 1)
            end
        end

        number lineWidth = GetLineWidth(caretLine)
        if lineWidth > GetScrollRegionWidth()
            // Increase scroll region width and resize bars.
            // Setting the scroll region width to -1 forces recalculation.
            scrollRegionWidth = -1
            CreateScrollBars()
        end

        FitCharacterOnScreen(caretLine, caretCharacter)
        GetLineDrawables()
        caretX = PositionCaret()
        ShowCaret()
    end

    action SetWidth(integer newWidth)
        parent:Libraries.Interface.Item2D:SetWidth(newWidth)
        horizontalBar:SetWidth(newWidth)
    end

    action SetHeight(integer newHeight)
        parent:Libraries.Interface.Item2D:SetHeight(newHeight)
        verticalBar:SetHeight(newHeight)
    end

    private action CreateScrollBars
        Color color
        number height = GetHeight()
        number width = GetWidth()
//        number verticalRatio = height / scrollAnchor:GetHeight()
        number verticalRatio = height / GetScrollRegionHeight()
        number horizontalRatio = width / GetScrollRegionWidth()
        boolean verticalVisible = (verticalMode = ALWAYS_VISIBLE or (verticalMode = VISIBLE_IF_NEEDED and verticalRatio < 1.0))
        boolean horizontalVisible = (horizontalMode = ALWAYS_VISIBLE or (horizontalMode = VISIBLE_IF_NEEDED and horizontalRatio < 1.0))
        number barHeight = height
        number barWidth = width

        if verticalBar:IsLoaded()
            verticalBar:Dispose()
        end
        if horizontalBar:IsLoaded()
            horizontalBar:Dispose()
        end
        if verticalControl:IsLoaded()
            verticalControl:Dispose()
        end
        if horizontalControl:IsLoaded()
            horizontalControl:Dispose()
        end

        if verticalVisible and horizontalVisible
            barHeight = height - barThickness
            barWidth = width - barThickness
            verticalRatio = barHeight / GetScrollRegionHeight()
            horizontalRatio = barWidth / GetScrollRegionWidth()
            verticalBar:SetY(barThickness)
        end

        if verticalVisible
            verticalBar:LoadFilledRectangle(barThickness, cast(integer, barHeight), color:CustomColor(0.9, 0.9, 0.9, 1))
            verticalBar:SetX(width - barThickness)
            parent:Item2D:Add(verticalBar)

            verticalControl:LoadFilledRectangle(barThickness, cast(integer, verticalRatio * barHeight), color:CustomColor(0.75, 0.75, 0.75, 1))
            verticalControl:SetY(height - verticalRatio * height - (height - barHeight))
            verticalBar:Add(verticalControl)
            verticalBar:Show()
        else
            verticalBar:Hide()
        end

        if horizontalVisible
            horizontalBar:LoadFilledRectangle(cast(integer, barWidth), barThickness, color:CustomColor(0.9, 0.9, 0.9, 1))
            parent:Item2D:Add(horizontalBar)

            horizontalControl:LoadFilledRectangle(cast(integer, horizontalRatio * width), barThickness, color:CustomColor(0.75, 0.75, 0.75, 1))
//            horizontalControl:SetY(height - ratio * height)
            horizontalBar:Add(horizontalControl)
            horizontalBar:Show()
        else
            horizontalBar:Hide()
        end

        UpdatePaneView(horizontal, vertical)
    end

    action SetScrollDistance(number distance)
        scrollDistance = distance
    end

    action GetScrollDistance returns number
        return scrollDistance
    end

    action ScrolledMouse(MouseEvent event)
        number y = GetVerticalTrackPercentage(verticalControl:GetY() + event:scrollAmount * scrollDistance * 10)
        UpdatePaneView(horizontal, y)
    end

    action DraggedMouse(MouseEvent event)
        if isClicked
            // Determine if we are updating the vertical or horizontal bar.
            if verticalChanging
                number y = GetVerticalTrackPercentage(event:GetY() - verticalBar:GetGlobalY()) - clickPointOffset
                UpdatePaneView(horizontal, y)
            else
                number x = GetHorizontalTrackPercentage(event:GetX() - horizontalBar:GetGlobalX()) - clickPointOffset
                UpdatePaneView(x, vertical)
            end
        end
    end

    action ClickedMouse(MouseEvent event)
        if event:GetSource() not= undefined and event:GetSource() is Item2D
            Item2D source = cast(Item2D, event:GetSource())
            if source:Equals(verticalControl)
                isClicked = true
                verticalChanging = true
                clickPointOffset = GetVerticalTrackPercentage(event:GetY() - verticalBar:GetGlobalY()) - vertical
            elseif source:Equals(horizontalControl)
                isClicked = true
                verticalChanging = false
                clickPointOffset = GetHorizontalTrackPercentage(event:GetX() - horizontalBar:GetGlobalX()) - horizontal
            else
                isClicked = false
            end
        end
    end

    action ReleasedMouse(MouseEvent event)
        isClicked = false
    end

    action GainedFocus(FocusEvent event)
        ShowCaret()
    end

    action LostFocus(FocusEvent event)
        HideCaret()
    end

//    action SetRegionSize(number width, number height)
//        scrollAnchor:SetWidth(width)
//        scrollAnchor:SetHeight(height)
//        CreateScrollBars()
//    end
//
//    action FitRegionToContents
//        Number width
//        width:SetValue(0)
//        Number height
//        height:SetValue(0)
//        FindDimensions(scrollAnchor:GetChildren(), width, height)
//        SetRegionSize(width:GetValue() - scrollAnchor:GetGlobalX(), height:GetValue() - scrollAnchor:GetGlobalY())
//    end
//
//    private action FindDimensions(Array<Item2D> items, Number width, Number height)
//        integer counter = 0
//        repeat while counter < items:GetSize()
//            Item2D item = items:Get(counter)
//
//            if item:GetGlobalX() + item:GetWidth() > width:GetValue()
//                width:SetValue(item:GetGlobalX() + item:GetWidth())
//            end
//
//            if item:GetGlobalY() + item:GetHeight() > height:GetValue()
//                height:SetValue(item:GetGlobalY() + item:GetHeight())
//            end
//
//            if not item:IsClipping()
//                FindDimensions(item:GetChildren(), width, height)
//            end
//
//            counter = counter + 1
//        end
//    end

    /*
    Takes values between 0.0 and 1.0 as percentage-style positions for the
    vertical and horizontal scroll bars and view area.
    */
    action UpdatePaneView(number horizontal, number vertical)
        if vertical > 1.0
            if me:vertical = 1.0
                return now
            else
                vertical = 1.0
            end
        elseif vertical < 0.0
            if me:vertical = 0.0
                return now
            else
                vertical = 0.0
            end
        end

        if horizontal > 1.0
            if me:horizontal = 1.0
                return now
            else
                horizontal = 1.0
            end
        elseif horizontal < 0.0
            if me:horizontal = 0.0
                return now
            else
                horizontal = 0.0
            end
        end

        number sharedSpaceOffset = GetSharedSpaceOffset()

        number adjustedHeight = GetHeight() - verticalControl:GetHeight() - sharedSpaceOffset
        verticalControl:SetY(adjustedHeight * vertical)

        number adjustedWidth = GetWidth() - horizontalControl:GetWidth() - sharedSpaceOffset
        horizontalControl:SetX(adjustedWidth * horizontal)

        number adjustedScrollWidth = GetScrollRegionWidth() - GetWidth()
        number adjustedScrollHeight = GetScrollRegionHeight() - GetHeight()
        
//        scrollAnchor:SetPosition(-adjustedScrollWidth * horizontal, -adjustedScrollHeight * vertical)

        if verticalBar:IsShowing()
            verticalViewPercentage = (verticalControl:GetHeight() + verticalControl:GetY()) / verticalBar:GetHeight()
        else
            verticalViewPercentage = 1.0
        end

        me:vertical = vertical
        me:horizontal = horizontal

        GetLineDrawables()
    end

    private action GetSharedSpaceOffset returns number
        if horizontalBar:IsShowing() and verticalBar:IsShowing()
            return barThickness
        end
        return 0
    end

    private action GetVerticalTrackPercentage(number y) returns number
        return y / (GetHeight() - verticalControl:GetHeight())
    end

    private action GetHorizontalTrackPercentage(number x) returns number
        return x / (GetWidth() - horizontalControl:GetWidth())
    end

    action GetScrollRegionHeight returns number
        // This approach works so long as the font is universally styled (and
        // thus all lines are the same height).
        number height = textValue:GetLineCount() * font:GetLineHeight()// + GetSharedSpaceOffset()
        if height > GetHeight()
            return height
        else
            return GetHeight()
        end
    end

    action GetScrollRegionWidth returns number
        if scrollRegionWidth = -1
            CalculateRegionWidth()
        end
        if scrollRegionWidth > GetWidth()
            return scrollRegionWidth
        else
            return GetWidth()
        end
    end

    /*
    Calculates the width of the region by finding the longest line. Potentially
    expensive depending on how it needs to be calculated.
    */
    private action CalculateRegionWidth
        /*
        The ideal long-term solution is to have each line in the
        MultipleLineText class maintain its width, which is updated during
        changes. Then finding the width is O(n) for n lines. Currently that
        class only maintains text for monospaced fonts, so we calculate from
        that for now.

        This approach only works due to the constrained conditions of the first
        version of this TextBox:
            - All of the text is styled with a single font.
            - The text is monospaced. If it isn't, we attempt to err on the side
              of too much space, rather than not enough.
        */
        Array<MultipleLineText> lines = textValue:GetLines()
        
        /*
        For monospaced fonts, this choice is arbitrary. For non-monospaced
        fonts, W is typically one of the broadest characters, but this is
        imprecise at best. This approach is only meant as a short-term solution
        to quickly calculate the width of lines. MultipleLineText will handle
        this more elegantly in the future.
        */
        number glyphWidth = font:GetGlyph("W"):horizontalAdvance
        number width = -1

        integer counter = 0
        repeat while counter < lines:GetSize()
            number lineWidth = lines:Get(counter):GetWidth() * glyphWidth
            if lineWidth > width
                width = lineWidth
            end
            counter = counter + 1
        end

        scrollRegionWidth = width
    end

    private action GetLineWidth(integer index) returns number
        
        MultipleLineText line = textValue:GetLine(index)
        
        /*
        For monospaced fonts, this choice is arbitrary. For non-monospaced
        fonts, W is typically one of the broadest characters, but this is
        imprecise at best. This approach is only meant as a short-term solution
        to quickly calculate the width of lines. MultipleLineText will handle
        this more elegantly in the future.
        */
        number glyphWidth = font:GetGlyph("W"):horizontalAdvance

        return glyphWidth * line:GetWidth()
    end

    action SetVerticalBarVisibility(integer mode)
        verticalMode = mode
    end

    action SetHorizontalBarVisibility(integer mode)
        horizontalMode = mode
    end

    action Update(number seconds)
        if caretActive
            caretTimer = caretTimer - seconds
            if caretTimer < 0
                caretTimer = caretTimer + caretBlinkTime
                if caret:IsShowing()
                    caret:Hide()
                else
                    caret:Show()
                end
            end
        end
    end

    action GetCaretIdleTime returns number
        return caretIdleTime
    end

    action GetCaretMoveTime returns number
        return caretMoveTime
    end

    action GetCaretLine returns integer
        return caretLine
    end

    action GetCaretIndex returns integer
        return textValue:CharacterIndexFromLineIndex(caretLine) + caretCharacter
    end

    action GetCaretLineIndex returns integer
        return caretCharacter
    end

    action GetLines returns MultipleLineText
        return textValue
    end

    action GetText returns text
        return textValue:GetText()
    end

    action GetSingleSelection(integer index) returns Selection
        Selection selection
        selection:SetDisplayName("")
        return selection
    end

    action GetRangeSelection(Pair<integer> range) returns Array<Selection>
        Array<Selection> array
        Selection selection
        text selectedText = textValue:GetText():GetSubtext(range:GetLeastValue(), range:GetGreatestValue())
        selection:SetDisplayName(selectedText)
        array:Add(selection)
        return array
    end

    action GetMultipleSelection(Array<Pair<integer>> ranges) returns Array<Selection>
        if ranges:GetSize() = 1
            return GetRangeSelection(ranges:Get(0))
        end

        alert("Multiple selection is not supported for TextBox yet. Use GetRangeSelection() instead.")
    end

    action GetSelectableSize returns integer
        // The caret can be placed anywhere between 0 and the length of the
        // text (including after the last character), resulting in length + 1.
        return textValue:GetLength() + 1
    end

    action GetCurrentSelection returns Array<Selection>
        // When selection is fully supported, this will be replaced with the
        // actual start and end indices of the selection.
        integer caretIndex = GetCaretIndex()
        return GetRangeSelection(caretIndex, caretIndex)
    end
end