package Libraries.Interface

use Libraries.Game.Game
use Libraries.Interface.Events.KeyboardListener
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.Label
use Libraries.Game.InputMonitor
use Libraries.Game.Graphics.Color

class TextBox is Panel, KeyboardListener
    private InputMonitor im
    private Label response
    private text responseStr = ""
    private text oldResponse = ""
    private boolean textChanged = true

    private Drawable lineCursor
    private integer cursorIndex = 0
    private boolean cursorMoved = true
    private number blinkTimer = 0
    private number blinkRate = 1

    on create
        Color white
        white = white:White()
        SetBackgroundColor(white)

        Color nearWhite
        nearWhite:SetColor(0.9, 0.9, 0.9, 1)
        SetBorderColor(nearWhite)
    end

    action Initialize(number width, number height)
        parent:Panel:Initialize(width, height)
        
        integer spacing = response:GetLineHeight() / 4

        response:SetPosition(spacing, height - response:GetLineHeight() - spacing)
        response:SetWidth(width - 2 * spacing)
        Add(response)

        Texture lineTexture
        Color nearBlack
        nearBlack:SetColor(0.1, 0.1, 0.1, 1)
        lineTexture:LoadFilledRectangle(2, spacing * 3, nearBlack)
        lineCursor:Load(lineTexture)

        lineCursor:SetPosition(spacing, height - response:GetLineHeight() - spacing)
        Add(lineCursor)
    end

    action GetInput returns text
        return responseStr
    end

    action Update(number delta)
        UpdateText()

        if cursorMoved
            blinkTimer = 0
            lineCursor:Show()

            if cursorIndex = 0
                lineCursor:SetPosition(response:GetX(), response:GetY())
            else
                Item temp = response:GetItem(cursorIndex - 1)
                lineCursor:SetPosition(response:GetX() + temp:GetX() + temp:GetWidth(), response:GetY() + temp:GetY())
            end
        else
            blinkTimer = blinkTimer + delta
            if blinkTimer > blinkRate
                blinkTimer = 0
                if lineCursor:IsShowing()
                    lineCursor:Hide()
                else
                    lineCursor:Show()
                end
            end
        end

        cursorMoved = false

    end

    action PressedKey(KeyboardEvent ke)
        ShiftPressed = false
        if im:IsKeyPressed(ke:SHIFT_LEFT) or im:IsKeyPressed(ke:SHIFT_RIGHT)
            ShiftPressed = true
        end

        if (ke:keyCode >= ke:NUM_0 and ke:keyCode <= ke:NUM_9) or (ke:keyCode >= ke:NUMPAD_0 and ke:keyCode <= ke:NUMPAD_9)
            text preText = ""
            if cursorIndex not= 0
                preText = responseStr:GetSubtext(0, cursorIndex)
            end

            text postText = ""
            if cursorIndex not= responseStr:GetSize()
                postText = responseStr:GetSubtext(cursorIndex)
            end

            responseStr = preText + ke:ToText(ke:keyCode, ShiftPressed) + postText
            textChanged = true
            cursorIndex = cursorIndex + 1
            cursorMoved = true
        elseif (ke:keyCode >= ke:A and ke:keyCode <= ke:Z) or IsPunctuation(ke:keyCode)
            text preText = ""
            if cursorIndex not= 0
                preText = responseStr:GetSubtext(0, cursorIndex)
            end

            text postText = ""
            if cursorIndex not= responseStr:GetSize()
                postText = responseStr:GetSubtext(cursorIndex)
            end

            responseStr = preText + ke:ToText(ke:keyCode, ShiftPressed) + postText
            textChanged = true
            cursorIndex = cursorIndex + 1
            cursorMoved = true
        elseif ke:keyCode = ke:SPACE
            text preText = ""
            if cursorIndex not= 0
                preText = responseStr:GetSubtext(0, cursorIndex)
            end

            text postText = ""
            if cursorIndex not= responseStr:GetSize()
                postText = responseStr:GetSubtext(cursorIndex)
            end

            responseStr = preText + " " + postText
            textChanged = true
            cursorIndex = cursorIndex + 1
            cursorMoved = true
        elseif ke:keyCode = ke:LEFT
            if cursorIndex > 0
                cursorIndex = cursorIndex - 1
                cursorMoved = true
            end
        elseif ke:keyCode = ke:RIGHT
            if cursorIndex < response:GetItemCount()
                cursorIndex = cursorIndex + 1
                cursorMoved = true
            end
        elseif ke:keyCode = ke:BACKSPACE
            if cursorIndex not= 0
                text preText = ""
                if cursorIndex > 1
                    preText = responseStr:GetSubtext(0, cursorIndex - 1)
                end

                text postText = ""
                if cursorIndex not= responseStr:GetSize()
                    postText = responseStr:GetSubtext(cursorIndex)
                end

                responseStr = preText + postText
                cursorIndex = cursorIndex - 1
                textChanged = true
                cursorMoved = true
            end
        elseif ke:keyCode = ke:FORWARD_DEL
            if cursorIndex not= responseStr:GetSize()
                text preText = ""
                if cursorIndex > 0
                    preText = responseStr:GetSubtext(0, cursorIndex - 1)
                end

                text postText = ""
                if cursorIndex < responseStr:GetSize() - 1
                    postText = responseStr:GetSubtext(cursorIndex + 1)
                end
                responseStr = preText + postText
                
                // Note that the cursorIndex does not change, but we want to
                // re-evaluate the cursor's position because the text has moved.
                textChanged = true
                cursorMoved = true
            end
        end
    end

    private action IsPunctuation(integer keyCode) returns boolean
        boolean value = keyCode >= 68 and keyCode <= 76
        value = value or keyCode = 17 or keyCode = 55 or keyCode = 56 or keyCode = 81
        return value
    end

    action UpdateText
        if textChanged
            response:SetText(responseStr)
            if response:GetTextHeight() > GetHeight()
                response:SetText(oldResponse)
            else
                oldResponse = responseStr
            end

            textChanged = false
        end
    end

    action SetBlinkRate(number rate)
        blinkRate = rate
    end

    action GetBlinkRate returns number
        return blinkRate
    end

    action Enable
        AddKeyboardListener(me)
        lineCursor:Show()
    end

    action Disable
        // Update text to set the most recent text, if needed.
        UpdateText()

        lineCursor:Hide()

        RemoveKeyboardListener(me)
    end

end