package Libraries.Interface

use Libraries.Containers.List
use Libraries.Containers.Array
use Libraries.Containers.Blueprints.Iterator
use Libraries.Interface.Events.MouseListener
use Libraries.Interface.Events.MouseMovementListener
use Libraries.Interface.Events.MouseWheelListener
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.TouchListener
use Libraries.Interface.Events.TouchEvent
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Painter
use Libraries.Game.Shapes.Rectangle
use Libraries.Compute.Math


/*
    The Item class represents any object that has a position on the screen.
    They have X and Y coordinates, representing their horizontal and vertical
    position in 2D space, respectively. They also have corresponding width and
    height, which combine with the x, y coordinates to make a rectangle. Note
    that Items on their own can't be seen on the screen. To make an Item that
    can be drawn directly on the screen, use a Libraries.Game.Graphics.Drawable
    instead.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        
        myItem:SetPosition(20, 60)
        myItem:SetWidth(50)
        myItem:SetHeight(15)
*/
class Item 

    private number x = 0
    private number y = 0
    private number z = 0
    private number width = 0
    private number height = 0
    private number depth = 0
    private number offsetX = 0
    private number offsetY = 0
    private number offsetZ = 0
    private boolean flipX = false
    private boolean flipY = false
    private boolean flipZ = false
    private text name = "Unnamed"
    private boolean visible = true
    private boolean enabled = true

    List<MouseListener> mouseListeners
    List<MouseMovementListener> mouseMoveListeners
    List<MouseWheelListener> mouseWheelListeners
    List<TouchListener> touchListeners

    /*
    This action is used internally to allow the Item class to pass actions to
    children.
    */
    private blueprint action GetChildAsItem(integer index) returns Item

    /*
    This action will return the total number of children this Item has.
    */
    blueprint action GetItemCount returns integer

    /*
    This action will remove all Items from this Item's children hierarchy. Note
    that this will not empty the hierarchies of the contained Items.

    Attribute: Example

        use Libraries.Interface.Item

        Item parentItem
        Item child1
        Item child2
        Item grandchild
        parentItem:Add(child1)
        parentItem:Add(child2)
        child1:Add(grandChild)
        parentItem:Empty()
    */
    blueprint action Empty

    /*
    FIX ME: Needs comments
    */
    blueprint action ProcessTouchEvent(TouchEvent event)

    /*  
    This action takes a mouse event and handles it. It will first test to 
    see if the mouse event took place within the bounds of this Item. If so, it
    will notify any MouseListeners of the event. If the event was not contained
    within this Item, or if there are no MouseListeners on this Item, the Item
    will ask its parent Item to process the mouse event, if there is a parent.

    Attribute: Example

        use Libraries.Interface.Item2D
        use Libraries.Interface.Events.MouseEvent
        use Libraries.Interface.Events.MouseListener
        Item2D myItem
        MouseListener listener
        myItem:AddMouseListener(listener)
        MouseEvent event
        event:eventType = event:CLICKED_MOUSE
        myItem:ProcessMouseEvent(event)
    
    */
    blueprint action ProcessMouseEvent(MouseEvent event)
    
    /*
    This action sets the X coordinate of the Item.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        myItem:SetX(35.0)
    */
    action SetX(number setX)
        MoveX(setX - x)
    end

    /*
    This action sets the Y coordinate of the Item.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        myItem:SetY(210.0)
    */
    action SetY(number setY)
        MoveY(setY - y)
    end

    /* An Item can also represent an object in three dimensional space, but 
    currently this functionality is not supported. When it is, this action will
    set the Z coordinate of the Item. */
    action SetZ(number setZ)
        MoveZ(setZ - z)
    end

    /*
    This action returns the currently set X coordinate of the Item.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        number value = myItem:GetX()
    */
    action GetX returns number
        return x
    end

    /*
    This action returns the currently set Y coordinate of the Item.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        number value = myItem:GetY()
    */
    action GetY returns number
        return y
    end

//    action GetZ returns number
//        return z
//    end

    /*
    This action will set both the X coordinate and the Y coordinate of the Item,
    in that order.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        myItem:SetPosition(30, 70)
    */
    action SetPosition(number setX, number setY)
        Move(setX - GetX(), setY - GetY())
    end

//    action SetPosition(number newX, number newY, number newZ)
//        SetPosition(newX, newY)
//        z = newZ
//    end

    /*
    This action will set the width of the Item.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        myItem:SetWidth(50)
    */
    action SetWidth(number newWidth)
        width = newWidth
    end

    /*
    This action will set the height of the Item.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        myItem:SetHeight(70)
    */
    action SetHeight(number newHeight)
        height = newHeight
    end

//    action SetDepth(number newDepth)
//        depth = newDepth
//    end

    /*
    This action will set the X coordinate of the Item so that the center of the
    Item is aligned with the given X coordinate value.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        myItem:SetCenterX(70)
    */
    action SetCenterX(number setX)
        SetX(setX - width / 2.0)
    end

    /*
    This action will set the Y coordinate of the Item so that the center of the
    Item is aligned with the given Y coordinate value.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        myItem:SetCenterY(65)
    */
    action SetCenterY(number setY)
        SetY(setY - height / 2.0)
    end

    /*
    This action will set the X and Y coordinates of the Item so that the center
    of the Item is located at the given X, Y coordinates.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        myItem:SetCenter(70, 40)
    */
    action SetCenter(number setX, number setY)
        SetCenterX(setX)
        SetCenterY(setY)
    end

    /*
    This action returns the x coordinate of the center of this Item.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        myItem:SetWidth(20)
        myItem:SetX(100)
        number x = myItem:GetCenterX()
    */
    action GetCenterX returns number
        return x - GetWidth()/2
    end

    /*
    This action returns the y coordinate of the center of this Item.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        myItem:SetHeight(20)
        myItem:SetY(100)
        number y = myItem:GetCenterY()
    */
    action GetCenterY returns number
        return y - GetHeight()/2
    end
    
    /*
    This action will return the currently set width of the Item.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        number width = myItem:GetWidth()
    */
    action GetWidth returns number
        return width
    end

    /*
    This action will return the currently set height of the Item.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        number height = myItem:GetHeight()
    */
    action GetHeight returns number
        return height
    end

//    action GetDepth returns number
//        return depth
//    end

    /* 
    This action sets the X offset of the Item. The offset tells the Item
    where to relate its X position to. In other words, the X offset is where an
    X coordinate of 0 is for this Item. This is automatically set when using an
    action to add an Item to another Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetOffsetX(100)
    */
    action SetOffsetX(number xAmount)
        offsetX = xAmount

        integer counter = 0
        repeat GetItemCount() times
            GetChildAsItem(counter):SetOffsetX(x + xAmount)
            counter = counter + 1
        end
    end

    /* This action sets the Y offset of the item. The offset tells the Item
    where to relate its Y position to. In other words, the Y offset is where a
    Y coordinate of 0 is for this item. This is automatically set when using an
    action to add an Item to another Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetOffsetY(75)
    */
    action SetOffsetY(number yAmount)
        offsetY = yAmount

        integer counter = 0
        repeat GetItemCount() times
            GetChildAsItem(counter):SetOffsetY(y + yAmount)
            counter = counter + 1
        end
    end

    /* This action sets the Z offset of the item. The offset tells the Item
    where to relate its Z position to. In other words, the Z offset is where a
    Z coordinate of 0 is for this item. This is automatically set when using an
    action to add an Item to another Item.

    Attribute: Example

        use Libraries.Interface.Item3D
        Item3D myItem
        myItem:SetOffsetZ(75)
    */
    action SetOffsetZ(number zAmount)
        offsetY = zAmount

        integer counter = 0
        repeat GetItemCount() times
            GetChildAsItem(counter):SetOffsetZ(z + zAmount)
            counter = counter + 1
        end
    end

    /* 
    This action returns the X offset of the Item. The offset tells the Item
    where to relate its X position to. In other words, the X offset is where an
    X coordinate of 0 is for this Item. This is automatically set when using an
    action to add an Item to another Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetOffsetX(100)
        number offset = myItem:GetOffsetX()
    */
    action GetOffsetX returns number
        return offsetX
    end

    /* This action returns the Y offset of the item. The offset tells the Item
    where to relate its Y position to. In other words, the Y offset is where a
    Y coordinate of 0 is for this item. This is automatically set when using an
    action to add an Item to another Item.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetOffsetY(75)
        number offset = myItem:GetOffsetY()
    */
    action GetOffsetY returns number
        return offsetY
    end

    /* This action returns the Z offset of the item. The offset tells the Item
    where to relate its Z position to. In other words, the Z offset is where a
    Z coordinate of 0 is for this item. This is automatically set when using an
    action to add an Item to another Item.

    Attribute: Example

        use Libraries.Interface.Item3D
        Item3D myItem
        myItem:SetOffsetZ(75)
        number offset = myItem:GetOffsetZ()
    */
    action GetOffsetZ returns number
        return offsetZ
    end

    /* This action will set both the X and Y offsets of the item, respectively.

    Attribute: Example

        use Libraries.Interface.Item2D
        Item2D myItem
        myItem:SetOffset(100, 75)
    */
    action SetOffset(number xAmount, number yAmount)
        offsetX = xAmount
        offsetY = yAmount

        integer counter = 0
        repeat GetItemCount() times
            GetChildAsItem(counter):SetOffset(x + xAmount, y + yAmount)
            counter = counter + 1
        end
    end

    /* This action will set the X, Y, and Z offsets of the item, respectively.

    Attribute: Example

        use Libraries.Interface.Item3D
        Item3D myItem
        myItem:SetOffset(100, 75, 30)
    */
    action SetOffset(number xAmount, number yAmount, number zAmount)
        offsetX = xAmount
        offsetY = yAmount
        offsetZ = zAmount

        integer counter = 0
        repeat GetItemCount() times
            GetChildAsItem(counter):SetOffset(x + xAmount, y + yAmount, z + zAmount)
            counter = counter + 1
        end
    end

    /* This action returns the Item's global x coordinate, or where the Item is
    located at after applying the x offset.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        myItem:SetOffsetX(100)
        myItem:SetX(30)
        number globalX = myItem:GetGlobalX()
    */
    action GetGlobalX returns number
        return GetX() + offsetX
    end

    /* This action returns the Item's global y coordinate, or where the Item is
    located at after applying the y offset.

    Attribute: Example

        use Libraries.Interface.Item
        Item myItem
        myItem:SetOffsetY(60)
        myItem:SetX(90)
        number globalY = myItem:GetGlobalY()
    */
    action GetGlobalY returns number
        return GetY() + offsetY
    end

    /* This action adds a MouseListener to the Item. If the Item ever receives
    a MouseEvent due to a mouse click, the mouse listener will be notified.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.Interface.Events.MouseListener
        Item myItem
        MouseListener listener
        myItem:AddMouseListener(listener)
    */
    action AddMouseListener(MouseListener listener)
        mouseListeners:Add(listener)
    end

    /* This action removes a MouseListener from the Item. The listener will no
    longer receive notification if the Item gets a mouse click event.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.Interface.Events.MouseListener
        Item myItem
        MouseListener listener
        myItem:AddMouseListener(listener)
        myItem:RemoveMouseListener(listener)
    */
    action RemoveMouseListener(MouseListener listener)
        mouseListeners:Remove(listener)
    end

    /*
    FIX ME: Add comments
    */
    action GetMouseListeners returns Iterator<MouseListener>
        return mouseListeners:GetIterator()
    end

    /* This action adds a MouseMovementListener to the Item. If the Item ever 
    receives a MouseEvent due to mouse movement, the listener will be notified.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.Interface.Events.MouseMovementListener
        Item myItem
        MouseMovementListener listener
        myItem:AddMouseMovementListener(listener)
    */
    action AddMouseMovementListener(MouseMovementListener listener)
        mouseMoveListeners:Add(listener)
    end

    /* This action removes a MouseMovementListener from the Item. The listener 
    will no longer receive notification if the Item gets a mouse movement event.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.Interface.Events.MouseMovementListener
        Item myItem
        MouseMovementListener listener
        myItem:AddMouseMovementListener(listener)
        myItem:RemoveMouseMovementListener(listener)
    */
    action RemoveMouseMovementListener(MouseMovementListener listener)
        mouseMoveListeners:Remove(listener)
    end

    /*
    FIX ME: Add comments
    */
    action GetMouseMovementListeners returns Iterator<MouseMovementListener>
        return mouseMoveListeners:GetIterator()
    end

    /* This action adds a MouseWheelListener to the Item. If the Item ever 
    receives a MouseEvent due to the mouse wheel being scrolled, the listener
    will be notified.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.Interface.Events.MouseWheelListener
        Item myItem
        MouseWheelListener listener
        myItem:AddMouseWheelListener(listener)
    */
    action AddMouseWheelListener(MouseWheelListener listener)
        mouseWheelListeners:Add(listener)
    end

    /* This action removes a MouseWheelListener from the Item. The listener 
    will no longer receive notification if the Item gets a mouse wheel event.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.Interface.Events.MouseWheelListener
        Item myItem
        MouseWheelListener listener
        myItem:AddMouseWheelListener(listener)
        myItem:RemoveMouseWheelListener(listener)
    */
    action RemoveMouseWheelListener(MouseWheelListener listener)
        mouseWheelListeners:Remove(listener)
    end

    /*
    FIX ME: Add comments
    */
    action GetMouseWheelListeners returns Iterator<MouseWheelListener>
        return mouseWheelListeners:GetIterator()
    end

    /* This action adds a TouchListener to the Item. If the Item ever receives a
    TouchEvent, the listener will be notified.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.Interface.Events.TouchListener
        Item myItem
        TouchListener listener
        myItem:AddTouchListener(listener)
    */
    action AddTouchListener(TouchListener listener)
        touchListeners:Add(listener)
    end

    /* This action removes a TouchListener from the Item. The listener will no
    longer receive notification if the Item gets a TouchEvent.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.Interface.Events.TouchListener
        Item myItem
        TouchListener listener
        myItem:AddTouchListener(listener)
        myItem:RemoveTouchListener(listener)
    */
    action RemoveTouchListener(TouchListener listener)
        touchListeners:Remove(listener)
    end

    /*
    FIX ME: Add comments
    */
    action GetTouchListeners returns Iterator<TouchListener>
        return touchListeners:GetIterator()
    end

    /*  This action updates the item. It takes a number parameter that should
    indicate how many seconds have passed since the last time this action was
    called. This action does nothing in the Item class, but any class that
    inherits from Item may override it.

    Attribute: Parameter secondsSinceUpdate The number of seconds that have passed since the last time Update was called.

    Attribute: Example

        use Libraries.Interface.Item
        use Libraries.System.DateTime
        
        class Main is Item

            action Main
                // We'll use a DateTime object to count seconds.
                DateTime time
                number currentTime = time:GetEpochTime()
                number newTime = 0

                repeat while GetX() < 300
                    // Check what the time is now.
                    newTime = time:GetEpochTime()

                    // Calculate how many seconds have passed, then call Update.
                    Update( (newTime - currentTime)/1000 )

                    // Store the old time.
                    currentTime = newTime
                end
            end

            // Our update action will move our Item to the right at 200 units a second.
            action Update(number secondsSinceUpdate)
                SetX(GetX() + 200 * secondsSinceUpdate)
            end
        end
    
    */
    action Update(number secondsSinceUpdate)

    end

    /*  This action calls the Update action on this Item and all Items that have
    been added to this item with the Add action.

    Attribute: Parameter secondsSinceUpdate The number of seconds that have passed since the last time Update was called.

    Attribute: Example

        use Libraries.Interface.Item
        
        Item parentItem
        Item child1
        Item child2
        parentItem:Add(child1)
        parentItem:Add(child2)
        parentItem:UpdateAll(0)
    */
    action UpdateAll(number secondsSinceUpdate)
        Update(secondsSinceUpdate)

        integer counter = 0
        repeat GetItemCount() times
            GetChildAsItem(counter):UpdateAll(secondsSinceUpdate)
            counter = counter + 1
        end
    end

    /*  This action is used to indicate that two items have just begun colliding.
    When two Items collide, the BeginCollision action should be called on both
    of them, with the other item passed as a parameter to the action. Note that 
    this action does nothing by default, but classes that inherit from Item may 
    override it.

    Attribute: Parameter item The other Item involved in the collision.

    Attribute: Example

        use Libraries.Interface.Item

        Item collider1
        Item collider2
        collider1:BeginCollision(collider2)
        collider2:BeginCollision(collider1)
    */
    action BeginCollision(Item item)
        
    end

    /*  This action is used to indicate that two items that were previously
    colliding no longer are. The FinishCollision action should be called on both
    Items involved, with the other item passed as a parameter to the action. 
    Note that this action does nothing by default, but classes that inherit from
    Item may override it.

    Attribute: Parameter item The other Item involved in the collision.

    Attribute: Example

        use Libraries.Interface.Item

        Item collider1
        Item collider2
        collider1:FinishCollision(collider2)
        collider2:FinishCollision(collider1)
    */
    action FinishCollision(Item item)

    end

    /*  This action is used to indicate that an Item and all Items that were
    added to it should be visible on the screen. Note that the Item class on its
    own cannot be drawn on the screen, but classes that inherit from it such as
    Libraries.Game.Graphics.Drawable can be. By default, Items are considered
    visible.

    Attribute: Example

        use Libraries.Interface.Item

        Item item
        item:Show()
    */
    action Show
        visible = true
    end

    /*  This action is used to indicate that an Item and all Items that were
    added to it should not be visible on the screen. Note that the Item class on
    its own cannot be drawn on the screen, but classes that inherit from it such
    as Libraries.Game.Graphics.Drawable can be. By default, Items are considered
    visible.

    Attribute: Example

        use Libraries.Interface.Item

        Item item
        item:Hide()
    */
    action Hide
        visible = false
    end

    /*  This action returns whether the Item is currently set to be visible on
    the screen.

    Attribute: Returns A boolean representing whether or not the Item is currently visible.

    Attribute: Example

        use Libraries.Interface.Item

        Item item
        item:Hide()
        boolean visible = item:IsShowing()
    */
    action IsShowing returns boolean
        return visible
    end

    /*  This action indicates that an Item should currently be active. Items are
    set to enabled by default.

    Attribute: Example

        use Libraries.Interface.Item

        Item item
        item:Enable()
    */
    action Enable
        enabled = true
    end

    /*  This action indicates that an Item should currently be inactive. Items
    are set to enabled by default.

    Attribute: Example

        use Libraries.Interface.Item

        Item item
        item:Disable()
    */
    action Disable
        enabled = false
    end

    /*  This action returns whether or not the Item is currently enabled.

    Attribute: Example

        use Libraries.Interface.Item

        Item item
        item:Disable()
        boolean active = item:IsEnabled()
    */
    action IsEnabled returns boolean
        return enabled
    end

    /*  This action sets the internal name of the Item.

    Attribute: Example

        use Libraries.Interface.Item

        Item item
        item:SetName("My Item")
    */
    action SetName(text newName)
        name = newName
    end

    /*  This action returns the current internal name of the Item.

    Attribute: Example

        use Libraries.Interface.Item

        Item item
        item:SetName("My Item")
        output "My item's name is " + item:GetName()
    */
    action GetName returns text
        return name
    end


//    action GetItemAt(number x, number y, number z) returns Item
//        integer counter = children:GetSize()
//        Item temp = undefined
//        boolean found = false
//        repeat while counter > 0 and not found
//            counter = counter - 1
//            temp = children:Get(counter)
//            temp = temp:GetItemAt(x, y, z)
//            if temp not= undefined
//                found = true
//            end
//        end
//
//        if not found and Contains(x, y, z)
//            return me
//        else
//            return temp
//        end
//    end

    /*
    This action is used to free up any additional memory that is being used by
    this Item for purposes such as graphics. Note that the Item class doesn't
    have any extra memory that needs to be released with this action, but some
    classes which inherit from Item, such as Libraries.Game.Graphics.Drawable,
    do.
    */
    action Dispose
        
    end

    /*
    This action is used to call Dispose on the entire children hierarchy of this
    Item. This will not call Dispose on this Item.
    */
    action DisposeChildren
        integer counter = 0
        repeat GetItemCount() times
            GetChildAsItem(counter):DisposeAll()
            counter = counter + 1
        end
    end

    /*
    This action is used to call Dispose on this Item and on the entire children
    hierarchy of this Item.
    */
    action DisposeAll
        DisposeChildren()
        Dispose()
    end

    /*
    This action is used to call Empty on all children contained in this item's
    children hierarchy. This will not empty the children of this item.
    */
    action EmptyChildren
        integer counter = 0
        repeat GetItemCount() times
            GetChildAsItem(counter):EmptyAll()
            counter = counter + 1
        end
    end

    /*
    This action will call Empty on the entire children hierarchy of this item,
    and then empty this item as well.
    */
    action EmptyAll
        EmptyChildren()
        Empty()
    end


    /*
    action SetBoundingBox(number newX, number newY, number newZ, number newWidth, number newHeight, number newDepth)
        // NOT YET IMPLEMENTED
    end*/

    /*
    This action will set the width and height of the Item, respectively.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D myItem
        myItem:SetSize(100, 50)
    */
    action SetSize(integer newWidth, integer newHeight)
        width = newWidth
        height = newHeight
    end

    /*
    This action will increase the x-coordinate of this Item by the given amount.

    Attribute: Example

        use Libraries.Interface.Item

        Item myItem
        myItem:SetX(50)
        myItem:MoveX(25)
    */
    action MoveX(number xAmount)
        x = x + xAmount
        SetOffsetX(offsetX)
    end

    /*
    This action will increase the y-coordinate of this Item by the given amount.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D myItem
        myItem:SetY(50)
        myItem:MoveY(25)
    */
    action MoveY(number yAmount)
        y = y + yAmount
        SetOffsetY(offsetY)
    end

    /*
    This action will increase the z-coordinate of this Item by the given amount.

    Attribute: Example

        use Libraries.Interface.Item3D

        Item3D myItem
        myItem:SetZ(50)
        myItem:MoveZ(25)
    */
    action MoveZ(number zAmount)
        z = z + zAmount
        SetOffsetZ(offsetZ)
    end

    /*
    This action will increase the x and y coordinates of this Item by the given
    amounts.

    Attribute: Example

        use Libraries.Interface.Item2D

        Item2D myItem
        myItem:SetX(50)
        myItem:SetY(80)
        myItem:Move(25, -20)
    */
    action Move(number xAmount, number yAmount)
        x = x + xAmount
        y = y + yAmount
        SetOffset(offsetX, offsetY)
    end

    /*
    This action will set the Item to be flipped across the X-axis according to
    the boolean. If the boolean value is false, the Item will be set to its
    unflipped state. If it is true, the Item will be set to its flipped state.

    Attribute: Example

        use Libraries.Interface.Item
        
        Item myItem
        myItem:SetFlipX(true)
    */
    action SetFlipX(boolean flip)
        if IsFlippedX() not= flip
            FlipX()
        end
    end

    /*
    This action will set the Item to be flipped across the Y-axis according to
    the boolean. If the boolean value is false, the Item will be set to its
    unflipped state. If it is true, the Item will be set to its flipped state.

    Attribute: Example

        use Libraries.Interface.Item
        
        Item myItem
        myItem:SetFlipY(true)
    */
    action SetFlipY(boolean flip)
        if IsFlippedY() not= flip
            FlipY()
        end
    end

    /*
    This action will flip the Item across the X-axis. This flip is represented
    by the internal vertices of the Item. For classes that inherit from Item and
    can draw on the screen, this will flip the drawn image on the screen.
    Attribute: Example

        use Libraries.Interface.Item
        
        Item myItem
        myItem:FlipX()
    */
    action FlipX
        flipX = not flipX

        integer counter = 0
        repeat GetItemCount() times
            GetChildAsItem(counter):FlipX()
            counter = counter + 1
        end
    end

    /*
    This action will flip the Item across the Y-axis. This flip is represented
    by the internal vertices of the Item. For classes that inherit from Item and
    can draw on the screen, this will flip the drawn image on the screen.
    Attribute: Example

        use Libraries.Interface.Item
        
        Item myItem
        myItem:FlipY()
    */
    action FlipY
        flipY = not flipY

        integer counter = 0
        repeat GetItemCount() times
            GetChildAsItem(counter):FlipY()
            counter = counter + 1
        end
    end

    /*
    action FlipZ
        flipZ = not flipZ

        Iterator<Item> childIterator = GetItems()
        repeat while childIterator:HasNext()
            childIterator:Next():FlipZ()
        end
    end*/

    /*
    This action will return if the Item is currently flipped across the x-axis.

        use Libraries.Interface.Item
        
        Item myItem
        myItem:FlipX()
        boolean flip = myItem:IsFlippedX()
    */
    action IsFlippedX returns boolean
        return flipX
    end

    /*
    This action will return if the Item is currently flipped across the y-axis.

        use Libraries.Interface.Item
        
        Item myItem
        myItem:FlipY()
        boolean flip = myItem:IsFlippedY()
    */
    action IsFlippedY returns boolean
        return flipY
    end

    /*
    action IsFlippedZ returns boolean
        return flipZ
    end*/

end