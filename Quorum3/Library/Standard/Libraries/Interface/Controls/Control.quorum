package Libraries.Interface.Controls

use Libraries.Interface.Item2D
use Libraries.Interface.Views.ControlView
use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Events.ControlActivationEvent
use Libraries.Interface.Events.ControlActivationListener
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Containers.Array
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.Font

class Control is Item2D

    Array<ControlActivationListener> listeners

    /*
    LayoutProperties describe how this Item are laid out by Layouts. If the
    Item has multiple LayoutProperties objects, the most appropriate one will
    be chosen based on the container's size.
    */
    Array<LayoutProperties> layoutProperties
    
    /*
    The default LayoutProperties, used by many controls to set their base visual
    information and provide default values.
    */
    LayoutProperties defaultProperties

    /*
    The LayoutProperties that were last used to define the properties of this
    Control. Used to indicate when graphics should be reloaded due to Layout
    changes.
    */
    LayoutProperties currentProperties = undefined

    /*
    A layout which is used to arrange the children of this object.
    */
    Layout layout = undefined

    action ClickedMouse
        if GetView2D() is ControlView
            ControlView content = cast(ControlView, GetView2D())
            content:ClickedMouse()
        end
    end

    action ReleasedMouse
        if GetView2D() is ControlView
            ControlView content = cast(ControlView, GetView2D())
            content:ReleasedMouse()
        end
    end

    action BeginMouseOver
        if GetView2D() is ControlView
            ControlView content = cast(ControlView, GetView2D())
            content:BeginMouseOver()
        end
    end

    action EndMouseOver
        if GetView2D() is ControlView
            ControlView content = cast(ControlView, GetView2D())
            content:EndMouseOver()
        end
    end

    action GainedSelection
        if GetView2D() is ControlView
            ControlView content = cast(ControlView, GetView2D())
            content:GainedSelection()
        end
    end

    action LostSelection
        if GetView2D() is ControlView
            ControlView content = cast(ControlView, GetView2D())
            content:LostSelection()
        end
    end

    /*
        This action returns a default behavior for this paricular control. Some
        controls do nothing by default, like a TextBox that responds to different kinds
        of input. Others, however, have default behaviors, like a Button or a MenuItem. 
        If there is no default behavior, this action returns undefined.
    */
    action GetActivationBehavior returns Behavior
        return undefined
    end

    action Activate
        BehaviorEvent event
        event:SetItem(me)
        Activate(event)
    end

    action Activate(BehaviorEvent event)
        if GetActivationBehavior() not= undefined
            if not event:GetItem():Equals(me)
                event = event:Copy()
                event:SetItem(me)
            end
            GetActivationBehavior():Run(event)

            ControlActivationEvent controlEvent
            controlEvent:Set(me, event)
            NotifyControlActivationListeners(controlEvent)
        end
    end

    action AddControlActivationListener(ControlActivationListener listener)
        listeners:Add(listener)
    end

    action RemoveControlActivationListener(ControlActivationListener listener)
        listeners:Remove(listener)
    end

    action NotifyControlActivationListeners(ControlActivationEvent event)
        integer counter = 0
        repeat while counter < listeners:GetSize()
            listeners:Get(counter):ControlActivated(event)
            counter = counter + 1
        end

        GameStateManager manager
        manager:GetInput():NotifyControlActivationListeners(event)
    end

    action SetLayout(Layout layout)
        me:layout = layout
    end

    action GetLayout returns Layout
        return layout
    end

    action AddLayoutProperties(LayoutProperties properties)
        layoutProperties:Add(properties)
        layoutProperties:Sort()
    end

    action RemoveLayoutProperties(LayoutProperties properties)
        layoutProperties:Remove(properties)
    end

    action GetLayoutProperties returns Array<LayoutProperties>
        return layoutProperties
    end

    /*
    This action returns the best suited LayoutProperties stored by the Control
    for use with the given container width and height. The Control will attempt
    to find the most restricted LayoutProperties that is still valid,
    prioritizing width over height in case of equal values.

    Attribute: Parameter containerWidth The width of the container the LayoutProperties must be legal for.
    Attribute: Parameter containerHeight The height of the container the LayoutProperties must be legal for.
    Attribute: Returns The LayoutProperties contained in the Control that is best suited to the requested container dimensions.
    */
    action GetLayoutProperties(number containerWidth, number containerHeight) returns LayoutProperties
        LayoutProperties properties = undefined
        Array<LayoutProperties> array = GetLayoutProperties()
        integer counter = array:GetSize()

        /*
        Layouts are sorted by minimum width, or minimum height if minimum
        widths are equal. When we find an invalid layout, it's assumed that
        all following layouts will also be invalid.
        */
        repeat while counter > 0
            counter = counter - 1
            LayoutProperties temp = array:Get(counter)
            if (temp:GetMaximumContainerWidth() >= containerWidth and temp:GetMaximumContainerHeight() >= containerHeight)
                properties = temp
            end
        end

        if properties = undefined
            properties = GetDefaultLayoutProperties()
        end

        return properties
    end

    /*
    This action returns the default LayoutProperties used for this Control.

    Attribute: Returns The default LayoutProperties of this Control.
    */
    action GetDefaultLayoutProperties returns LayoutProperties
        return defaultProperties
    end

    /*
    This action returns the LayoutProperties that were last used to define the
    Control, and thus describe its current state. Note that if the Control 
    hasn't been laid out yet, this will return undefined.

    Attribute: Returns The last LayoutProperties used to layout this Control, or undefined if it hasn't been laid out yet.
    */
    action GetCurrentLayoutProperties returns LayoutProperties
        return currentProperties
    end

    /*
    This action is used to load the graphical components of the Control. This is
    handled automatically by the Game engine as needed, and most users shouldn't
    need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        currentProperties = properties
        properties:SetRenderingFlag(false)
    end

    /*
    This action sets the Icon used by this Control. Different Controls use this
    Icon differently, depending on their purpose.

    Attribute: Parameter icon The Icon to use for this Control.
    */
    action SetIcon(Icon icon)
        defaultProperties:SetIcon(icon)
    end

    /*
    This action sets the Font to be used by this Control. How this Font is used
    varies between Controls, and in some cases the Control will ignore it 
    entirely (for example, ScrollPanes), but typically this sets the font that's
    used for the default label on many Controls, such as Buttons. If the Font
    is undefined, many Controls will omit their default label.

    Attribute: Parameter font The Font to use for this Control.
    */
    action SetFont(Font font)
        defaultProperties:SetFont(font)
    end

    /*
    This action sets the base Font size to be used by this Control, if the
    Control uses a Font.
    */
    action SetFontSize(integer size)
        defaultProperties:SetFontSize(size)
    end
    
end