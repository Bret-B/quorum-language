package Libraries.Interface.Controls

use Libraries.Interface.Item2D
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.VisualContent2D
use Libraries.Interface.LabelBoxContent
use Libraries.Game.Graphics.Gradient
use Libraries.Game.Graphics.Color
use Libraries.Containers.Array
use Libraries.Interface.DrawableContent
use Libraries.Interface.GraphicUserInterfaceContent
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Selection
use Libraries.Interface.TextPathSelection
use Libraries.Containers.Support.Pair
use Libraries.Interface.Controls.DefaultMenuItemContent
use Libraries.Interface.Controls.GraphicUserInterfaceSelection

class MenuBar is Item2D
    
    Layout defaultLayout = undefined
    MenuItemContent defaultMenuAppearance = undefined
    MenuItemContent defaultItemAppearance = undefined
    VisualContent2D panelAppearance = undefined
    Array<MenuItem> menus

    boolean isSelecting = false

//    integer menuIndex = 0
    TextPathSelection selection

    on create
        FlowLayout layout
        layout:SetWrapping(true)
        defaultLayout = layout
        defaultLayout:SetPercentageWidth(1)
        defaultLayout:SetWidthOffset(2)
        defaultLayout:SetOffsetX(-1)
        defaultLayout:SetPercentageY(1)
        defaultLayout:SetOffsetY(1)
        defaultLayout:SetOffsetY(-GetHeight() + 1)
        AddLayout(defaultLayout)

        SetInputGroup("MenuBar")

        // Necessary for keyboard input to work correctly.
        SetFocusable(true)

        selection:Initialize(me)
    end

    action Initialize
        LabelBoxContent defaultBar
        defaultBar:SetBorderThickness(1)
        defaultBar:SetText("")
        Color color
        Gradient gradient
        
        Color gray = color:CustomColor(0.85, 0.85, 0.9, 1)
        Color lightGray = color:CustomColor(0.9, 0.9, 0.9, 1)

        gradient:Set(gray, gray, lightGray, lightGray)
        defaultBar:Initialize(gradient, color:Black())

        SetVisualContent(defaultBar)
        Resize()

        DefaultMenuItemContent menuContent
        menuContent:Initialize("Unnamed")
        defaultMenuAppearance = menuContent

        LabelBoxContent panelContent
        panelContent:Initialize(color:CustomColor(0.9, 0.9, 0.9, 1), color:Gray())
        panelContent:SetBorderThickness(1)
        panelAppearance = panelContent

        DefaultMenuItemContent itemContent
        itemContent:Initialize("Unnamed")
        defaultItemAppearance = itemContent
    end

    action Initialize(Array<MenuItem> menuHeaders)
        Initialize()
        
        integer counter = 0
        repeat while counter < menuHeaders:GetSize()
            MenuItem menu = menuHeaders:Get(counter)

            AddMenuItem(menu)

            counter = counter + 1
        end

        Resize()
    end

    action Initialize(VisualContent2D bar, MenuItemContent menus, VisualContent2D panels, MenuItemContent items)
        SetVisualContent(bar)
        defaultMenuAppearance = menus
        defaultItemAppearance = items
        panelAppearance = panels
        Resize()
    end

    action Resize
        if defaultLayout not= undefined
            defaultLayout:SetOffsetY(-GetHeight() + 1)
            defaultLayout:SetHeightOffset(GetHeight())
        end
        parent:Item2D:Resize()
    end

    action AddMenuItem(MenuItem item)
        if item:GetVisualContent() = undefined
            MenuItemContent content = cast(MenuItemContent, defaultMenuAppearance:Copy())
            item:SetAppearance(content)
//                content:SetText(menu:GetName())
//                menu:SetVisualContent(content)
//                menu:SetSize(content:GetContentWidth(), content:GetContentHeight())
        end

        menus:Add(item)
        Add(item)
        item:SetMenuBar(me)

        item:SetMenuAppearance(defaultItemAppearance)
    end

    action Close
        integer counter = 0
        repeat while counter < menus:GetSize()
            menus:Get(counter):Close()
            counter = counter + 1
        end
        SetSelectingState(false)
    end

    action DEBUG_GetPathText(Array<text> path) returns text
        text debug = ""
        integer debugCounter = 0
        repeat while debugCounter < path:GetSize()
            debug = debug + path:Get(debugCounter)
            debugCounter = debugCounter + 1
        end
        return debug
    end

    action Select(Array<text> path)
        
        Array<text> pathCopy = path:CopyToArray()
        text first = path:RemoveFromFront()

        Array<text> selectionPath = selection:GetPath()
        text oldFirst = selectionPath:RemoveFromFront()

        MenuItem item = GetMenuItem(first)
        MenuItem oldItem = GetMenuItem(oldFirst)
        if item not= undefined
            if item = oldItem
                item:UpdateSelection(selectionPath, path)
            else
                if oldItem not= undefined
                    oldItem:RecursiveDeselect(selectionPath)
                end
                item:RecursiveSelect(path)
            end
        end

        // Add the removed portion back to the path to undo our side effects.
        path:AddToFront(first)

        // Set our selection object with the new path, triggering a selection
        // event.
//        selection:Set(path)
        selection:Set(pathCopy)
    end

    action Deselect(Array<text> path)
        text first = path:RemoveFromFront()

        MenuItem item = GetMenuItem(first)

        if item not= undefined
            item:RecursiveDeselect(path)
        end

        // Add the removed portion back to the path to undo our side effects.
        path:AddToFront(first)
    end

    action GetMenuItem(Array<text> path) returns MenuItem
        text first = path:RemoveFromFront()

        MenuItem item = GetMenuItem(first)

        if item not= undefined
            item = item:GetMenuItem(path)
        end

        // Add the removed portion back to the path to undo our side effects.
        path:AddToFront(first)

        return item
    end

    private action GetMenuItem(text path) returns MenuItem
        integer counter = 0
        repeat while counter < menus:GetSize()
            if menus:Get(counter):GetName() = path
                return menus:Get(counter)
            end
            counter = counter + 1
        end

        return undefined
    end

//    action UpdateSelection(MenuItem menuItem)
//        integer counter = 0
//        integer index = 0
//
//        repeat while counter < menus:GetSize()
//            MenuItem item = menus:Get(counter)
//            if item:Equals(menuItem)
//                if menuIndex not= counter
//                    menus:Get(menuIndex):Close()
//                end
//
//                menuIndex = counter
//
//                // Set the counter to the maximum size to end the loop early.
//                counter = menus:GetSize()
//            end
//            counter = counter + 1
//        end
//    end

    action GetDefaultMenuHeaderView returns MenuItemContent
        return defaultMenuAppearance
    end

    action GetDefaultMenuItemView returns MenuItemContent
        return defaultItemAppearance
    end

    action IsSelecting returns boolean
        return isSelecting
    end

    action SetSelectingState(boolean selecting)
        isSelecting = selecting
    end

//    action MoveSelectionLeft
//        MenuItem item = menus:Get(menuIndex)
//        if item:GetSelectionIndex() = 0
//            integer index = menuIndex - 1
//            if index < 0
//                index = menus:GetSize() - 1
//            end
//            MenuItem newSelection = menus:Get(index)
//            newSelection:SelectIndex(0)
//        else
//            Selection selection = item:GetSingleSelection(item:GetSelectionIndex())
//            if selection not= undefined and selection is GraphicUserInterfaceSelection
//                GraphicUserInterfaceSelection gui = cast(GraphicUserInterfaceSelection, selection)
//                MenuItem selectedItem = cast(MenuItem, gui:GetElement())
//                MenuItem selectedParent = selectedItem:GetParentMenu()
//                if selectedParent not= undefined and selectedParent not= item
//                    selectedParent:SelectIndex(0)
//                else
//                    integer index = menuIndex - 1
//                    if index < 0
//                        index = menus:GetSize() - 1
//                    end
//                    MenuItem newSelection = menus:Get(index)
//                    newSelection:SelectIndex(0)
//                end
//            end
//        end
//    end

    action MoveSelectionLeft
        // Do a copy so modifying it here doesn't have side effects on the
        // original selection (we need to preserve it for Select to use).
        Array<text> path = selection:GetPath():CopyToArray()
        if path:GetSize() = 1
            text name = path:Get(0)
            integer counter = 0
            repeat while counter < menus:GetSize()
                Item2D menu = menus:Get(counter)
                if menu:GetName() = name
                    integer index = counter - 1
                    if index < 0
                        index = menus:GetSize() - 1
                    end
                    path:Set(0, menus:Get(index):GetName())
                    Select(path)
                    return now
                end
                counter = counter + 1
            end
        else
            path:RemoveFromEnd()
            Select(path)
        end
    end

    action MoveSelectionRight
        // Do a copy so modifying it here doesn't have side effects on the
        // original selection (we need to preserve it for Select to use).
        Array<text> path = selection:GetPath():CopyToArray()
        if path:GetSize() = 1
            text name = path:Get(0)
            integer counter = 0
            repeat while counter < menus:GetSize()
                Item2D menu = menus:Get(counter)
                if menu:GetName() = name
                    integer index = (counter + 1) mod menus:GetSize()
                    path:Set(0, menus:Get(index):GetName())
                    Select(path)
                    return now
                end
                counter = counter + 1
            end
        else
            MenuItem item = GetMenuItem(path)
            if item:IsMenu()
                item:GetMenuItems():Get(0):Select()
            else
                text name = path:Get(0)
                integer counter = 0
                repeat while counter < menus:GetSize()
                    Item2D menu = menus:Get(counter)
                    if menu:GetName() = name
                        integer index = (counter + 1) mod menus:GetSize()
                        path:Set(0, menus:Get(index):GetName())
                        Select(path)
                        return now
                    end
                    counter = counter + 1
                end
            end
        end
    end

//    action MoveSelectionRight
//        MenuItem item = menus:Get(menuIndex)
//        if item:GetSelectionIndex() = 0
//            integer index = (menuIndex + 1) mod menus:GetSize()
//            MenuItem newSelection = menus:Get(index)
//            newSelection:SelectIndex(0)
//        else
//            Selection selection = item:GetSingleSelection(item:GetSelectionIndex())
//            if selection not= undefined and selection is GraphicUserInterfaceSelection
//                GraphicUserInterfaceSelection gui = cast(GraphicUserInterfaceSelection, selection)
//                MenuItem selectedItem = cast(MenuItem, gui:GetElement())
//                if selectedItem:IsMenu()
//                    item:SelectIndex(item:GetSelectionIndex() + 1)
//                else
//                    integer index = (menuIndex + 1) mod menus:GetSize()
//                    MenuItem newSelection = menus:Get(index)
//                    newSelection:SelectIndex(0)
//                end
//            end
//        end
//    end
    
    action MoveSelectionDown
//        MenuItem item = menus:Get(menuIndex)
//        item:MenuSelectionDown()
        MenuItem item = GetMenuItem(selection:GetPath())
        item:MenuSelectionDown()
    end

    action MoveSelectionUp
//        MenuItem item = menus:Get(menuIndex)
//        item:MenuSelectionUp()
        MenuItem item = GetMenuItem(selection:GetPath())
        item:MenuSelectionUp()
    end

//    action GetSingleSelection(integer index) returns Selection
//        integer i = index
//        integer counter = 0
//
//        repeat while counter < menus:GetSize()
//            MenuItem item = menus:Get(counter)
//            if i < item:GetSelectableSize()
//                return item:GetSingleSelection(i)
//            end
//
//            i = i - item:GetSelectableSize()
//            counter = counter + 1
//        end
//
//        Selection selection
//        selection:SetDisplayName("Menu Bar")
//        return selection
//    end
//
//    action GetRangeSelection(Pair<integer> range) returns Array<Selection>
//        Array<Selection> array
//        integer index = range:GetLeastValue()
//        Selection selection = GetSingleSelection(index)
//        array:Add(selection)
//        return array
//    end
//
//    action GetMultipleSelection(Array<Pair<integer>> ranges) returns Array<Selection>
//        Array<Selection> array
//        
//        if ranges:IsEmpty()
//            Selection selection
//            selection:SetDisplayName(GetName())
//            array:Add(selection)
//            return array
//        end
//
//        integer index = ranges:Get(0):GetLeastValue()
//        Selection selection = GetSingleSelection(index)
//        array:Add(selection)
//        return array
//    end
//
//    action GetSelectableSize returns integer
//        integer counter = 0
//        integer size = 0
//        repeat while counter < menus:GetSize()
//            size = menus:Get(counter):GetSelectableSize()
//            counter = counter + 1
//        end
//
//        return size
//    end
//
//    action GetCurrentSelection returns Array<Selection>
//        if menuIndex < menus:GetSize()
//            return menus:Get(menuIndex):GetCurrentSelection()
//        else
//            // Return empty array (no selection).
//            Array<Selection> array
//            return array
//        end
//    end
//
    action RunSelection
        if IsSelecting()
//            MenuItem menu = menus:Get(menuIndex)
//            Selection selection = menu:GetSingleSelection(menu:GetSelectionIndex())
//            if selection is GraphicUserInterfaceSelection
//                GraphicUserInterfaceSelection gui = cast(GraphicUserInterfaceSelection, selection)
//                MenuItem selectedItem = cast(MenuItem, gui:GetElement())
//                if selectedItem:IsMenu()
//                    selectedItem:Open()
//                else
//                    selectedItem:RunBehavior()
//                    Close()
//                end
//            end
            MenuItem item = GetMenuItem(selection:GetPath())
            if item:IsMenu()
                item:Open()
            else
                item:RunBehavior()
                Close()
            end
        end
    end
end