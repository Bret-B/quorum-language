package Libraries.Interface.Controls

use Libraries.Interface.GraphicUserInterface
use Libraries.Interface.GraphicUserInterfaceContent
use Libraries.Interface.VisualContent2D
use Libraries.Containers.Array
use Libraries.Interface.LabelBoxContent
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Gradient
use Libraries.Game.Behaviors.Behavior
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Events.MouseListener
use Libraries.Interface.Selectable
use Libraries.Interface.Selection
use Libraries.Containers.Support.Pair
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Layouts.VerticalMenuLayout
use Libraries.Interface.Controls.GraphicUserInterfaceSelection

class MenuItem is GraphicUserInterface, Selectable
    
    /*
    A panel which contains all of the submenu options for this MenuItem, if this
    MenuItem is a menu.
    */
    Item2D panel
    Layout panelLayout = undefined

    /*
    An array containing all elements added to the panel. This is redundant to
    the children list of the panel, but keeping it in this form makes it easier
    to retrieve without constant casting.
    */
    Array<MenuItem> menuItems

    MenuItem parentMenu = undefined
    MenuBar menuBar = undefined

    public constant integer LEFT = 0
    public constant integer RIGHT = 1
    public constant integer DOWN = 2
    public constant integer UP = 3

    // The default appearance of MenuItems which are elements of this menu.
    GraphicUserInterfaceContent submenuContent = undefined

    // The default appearance of menu panels for this MenuItem and any submenus.
    VisualContent2D panelContent = undefined

    text shortcut = ""
    boolean open = false

    Behavior activationBehavior = undefined

    on create
        SetInputGroup("MenuItem")
        panel:SetName("Menu Panel")
    end

    action Initialize(text name)
        SetName(name)
        InitializePanel()
    end

    action Initialize(text name, text shortcut)
        SetName(name)
        SetShortcut(shortcut)
        InitializePanel()
    end

    action Initialize(text name, Array<MenuItem> items)
        Initialize(name)
        InitializePanel()

        integer counter = 0
        repeat while counter < items:GetSize()
            AddMenuItem(items:Get(counter))
            counter = counter + 1
        end

        InitializeMenuAppearance()
    end

    private action InitializePanel
        panel:SetName(GetName() + " Menu Panel")

        Color color

        LabelBoxContent content
        content:SetBorderThickness(1)

        content:Initialize(color:CustomColor(0.9, 0.9, 0.9, 1), color:Black())
        panelContent = content

        VerticalMenuLayout layout
        panelLayout = layout
        panel:AddLayout(layout)
        panel:SetVisualContent(panelContent)
    end

    private action InitializeMenuAppearance
        MenuBar bar = GetMenuBar()
        MenuItemContent menuContent = undefined
        if bar not= undefined
            menuContent = bar:GetDefaultMenuItemView()
        end

        SetMenuAppearance(menuContent)
    end

    action AddMenuItem(MenuItem item)

        MenuBar bar = GetMenuBar()
        MenuItemContent menuContent = undefined
        if bar not= undefined
            menuContent = bar:GetDefaultMenuItemView()
        end

        if menuContent not= undefined
            MenuItemContent copy = cast(MenuItemContent, menuContent:Copy())
            item:SetAppearance(copy)
        end

        if menuItems:IsEmpty() and GetMenuBar() not= undefined
            if GetVisualContent() is MenuItemContent
                MenuItemContent content = cast(MenuItemContent, GetVisualContent())
                content:EnableMenuArrow(true)
                SetSize(content:GetContentWidth(), content:GetContentHeight())
                GetMenuBar():Resize()
            end
        end

        item:SetMenuBar(menuBar)
        item:SetParentMenu(me)
        panel:Add(item)
        menuItems:Add(item)
    end

    action RemoveMenuItem(MenuItem item)
        menuItems:Remove(item)
        panel:Remove(item)
    end

    action SetMenuDirection(integer direction)
        if panelLayout = undefined
            VerticalMenuLayout layout
            panelLayout = layout
        end

        if direction = LEFT
            panelLayout:SetPercentageOriginX(1)
            panelLayout:SetPercentageX(0)
            panelLayout:SetPercentageY(1)
        elseif direction = RIGHT
            panelLayout:SetPercentageOriginX(0)
            panelLayout:SetPercentageX(1)
            panelLayout:SetPercentageY(1)
        elseif direction = DOWN
            // TO-DO
        elseif direction = UP
            // TO-DO
        end
    end

    action Open
        if not open and (not menuItems:IsEmpty())
            open = true
            Add(panel)
            panel:Resize()
        end
    end

    action Close
        if open
            integer counter = 0

            repeat while counter < menuItems:GetSize()
                MenuItem item = menuItems:Get(counter)
                item:Close()
                counter = counter +  1
            end

            open = false
            Remove(panel)
        end
        LostSelection()
        selectionIndex = 0
    end

    action SetShortcut(text shortcut)
        me:shortcut = shortcut
    end
    
    action GetShortcut returns text
        return shortcut
    end

    action SetAppearance(MenuItemContent content)
        content:SetText(GetName())
        content:SetShortcut(GetShortcut())
        if not (menuItems:IsEmpty()) and GetMenuBar() not= undefined
            content:EnableMenuArrow(true)
            GetMenuBar():Resize()
        else
            content:EnableMenuArrow(false)
        end

        SetVisualContent(content)
        SetSize(content:GetContentWidth(), content:GetContentHeight())
    end

    action SetMenuAppearance(MenuItemContent menuContent)

        if menuContent = undefined
            return now
        end

        integer counter = 0
        repeat while counter < menuItems:GetSize()
            Item2D i = menuItems:Get(counter)
            
            if i is MenuItem
                MenuItem item = cast(MenuItem, i)
                MenuItemContent copy = cast(MenuItemContent, menuContent:Copy())
                item:SetAppearance(copy)
            end
            counter = counter + 1
        end
    end

    action GetMenuBar returns MenuBar
        return menuBar
    end

    action SetMenuBar(MenuBar bar)
        menuBar = bar

        integer counter = 0
        repeat while counter < menuItems:GetSize()
            MenuItem child = menuItems:Get(counter)
            child:SetMenuBar(bar)
            counter = counter + 1
        end
    end

    action GetParentMenu returns MenuItem
        return parentMenu
    end

    action SetParentMenu(MenuItem menu)
        parentMenu = menu
    end

    action SetBehavior(Behavior behavior)
        activationBehavior = behavior
    end

    action GetBehavior returns Behavior
        return activationBehavior
    end

    action RunBehavior
        BehaviorEvent event
        event:SetItem(me)
        RunBehavior(event)
    end

    action RunBehavior(BehaviorEvent event)
        if activationBehavior not= undefined
            activationBehavior:Run(event)
        end
    end

    action ClickedMouse
        parent:GraphicUserInterface:ClickedMouse()

        MenuBar bar = GetMenuBar()
        if bar not= undefined
            if bar:IsSelecting()
                RunBehavior()
                MenuBar menuBar = GetMenuBar()
                if menuBar not= undefined
                    menuBar:Close()
                end
            else
                Select()
            end
        else
            RunBehavior()
        end
    end

    action BeginMouseOver
        MenuBar bar = GetMenuBar()
        if bar not= undefined and bar:IsSelecting()
            Select()
        end
    end

    action GainedSelection
        parent:GraphicUserInterface:GainedSelection()
        MenuBar menuBar = GetMenuBar()
        if menuBar not= undefined
            menuBar:SetSelectingState(true)
        end
        if not open
            Open()
        end
    end

    action LostSelection
        parent:GraphicUserInterface:LostSelection()
        if open
            Close()
        end
    end

    action Select
        // Don't actually select here! Go to MenuBar and ask it to select us.
        // We do this to allow the MenuBar to fully update its information,
        // deselect the previous selection, and prevent infinite loops.
        if menuBar not= undefined
            menuBar:Select(GetMenuPath())
        end
    end

    action Deselect
        // Don't actually select here! Go to MenuBar and ask it to deselect us.
        // We do this to allow the MenuBar to fully update its information,
        // deselect this, and prevent infinite loops.
        if menuBar not= undefined
            menuBar:Deselect(GetMenuPath())
        end
    end

    action GetMenuItem(text name) returns MenuItem
        integer counter = 0
        repeat while counter < menuItems:GetSize()
            MenuItem item = menuItems:Get(counter)
            if item:GetName() = name
                return item
            end
            counter = counter + 1
        end

        return undefined
    end

    action GetMenuItem(Array<text> path) returns MenuItem
        if path:IsEmpty()
            return me
        end

        text next = path:RemoveFromFront()
        
        // Get the next item in the chain.
        MenuItem item = GetMenuItem(next)

        // Recursively fetch the last item in the chain from the next item.
        item = item:GetMenuItem(path)

        // Add the removed section back onto the array to undo our side effects.
        path:AddToFront(next)

        return item
    end

    action GetMenuItems returns Array<MenuItem>
        return menuItems
    end

    action UpdateSelection(Array<text> oldPath, Array<text> newPath)

        text oldText = ""
        text newText = ""

        if not oldPath:IsEmpty()
            oldText = oldPath:RemoveFromFront()
        end

        if not newPath:IsEmpty()
            newText = newPath:RemoveFromFront()
        end

        if oldText = newText
            if oldText = ""
                return now
            else
                MenuItem item = GetMenuItem(oldText)
                if item not= undefined
                    item:UpdateSelection(oldPath, newPath)
                end
            end
        else
            if oldText not= ""
                MenuItem item = GetMenuItem(oldText)
                if item not= undefined
                    item:RecursiveDeselect(oldPath)
                end
            end
            if newText not= ""
                MenuItem item = GetMenuItem(newText)
                if item not= undefined
                    item:RecursiveSelect(newPath)
                end
            end
        end
    end

    action RecursiveSelect(Array<text> path)
        GainedSelection()
        if not path:IsEmpty()
            text subPath = path:RemoveFromFront()
            MenuItem item = GetMenuItem(subPath)
            if item not= undefined
                item:RecursiveSelect(path)
            end
        end
    end

    action RecursiveDeselect(Array<text> path)
        if not path:IsEmpty()
            text subPath = path:RemoveFromFront()
            MenuItem item = GetMenuItem(subPath)
            if item not= undefined
                item:RecursiveDeselect(path)
            end
        end
        LostSelection()
    end

    action GetIconWidth returns number
        if GetVisualContent() is MenuItemContent
            MenuItemContent content = cast(MenuItemContent, GetVisualContent())
            return content:GetIconWidth()
        else
            return 0
        end
    end

    action GetNameWidth returns number
        if GetVisualContent() is MenuItemContent
            MenuItemContent content = cast(MenuItemContent, GetVisualContent())
            return content:GetNameWidth()
        else
            return 0
        end
    end

    action GetShortcutWidth returns number
        if GetVisualContent() is MenuItemContent
            MenuItemContent content = cast(MenuItemContent, GetVisualContent())
            return content:GetShortcutWidth()
        else
            return 0
        end
    end

    action GetSubmenuIconWidth returns number
        if GetVisualContent() is MenuItemContent
            MenuItemContent content = cast(MenuItemContent, GetVisualContent())
            return content:GetSubmenuIconWidth()
        else
            return 0
        end
    end

    action IsMenu returns boolean
        return not menuItems:IsEmpty()
    end

    action MenuSelectionDown
        if GetParentMenu() not= undefined
            GetParentMenu():MenuSelectionDown(GetName())
        elseif menuItems:GetSize() > 0
            menuItems:Get(0):Select()
        end
    end

    private action MenuSelectionDown(text name)
        integer counter = 0
        repeat while counter < menuItems:GetSize()
            Item2D item = menuItems:Get(counter)
            if item:GetName() = name

                // Select next item in the list, if there is one.
                if counter + 1 < menuItems:GetSize()
                    menuItems:Get(counter + 1):Select()
                end

                return now
            end
            counter = counter + 1
        end
    end

    action MenuSelectionUp
        if GetParentMenu() not= undefined
            GetParentMenu():MenuSelectionUp(GetName())
        elseif menuItems:GetSize() > 0
            menuItems:Get(menuItems:GetSize() - 1):Select()
        end
    end

    private action MenuSelectionUp(text name)
        integer counter = 0
        repeat while counter < menuItems:GetSize()
            Item2D item = menuItems:Get(counter)
            if item:GetName() = name

                // Select the previous element in the menu, if there is one.
                if counter - 1 >= 0
                    menuItems:Get(counter - 1):Select()
                end

                return now
            end
            counter = counter + 1
        end
    end

    action GetMenuPath returns Array<text>
        Array<text> path
        path:Add(GetName())
        if parentMenu not= undefined
            Array<text> a = parentMenu:GetMenuPath(path)
            return a
        end
        return path
    end

    private action GetMenuPath(Array<text> array) returns Array<text>
        array:AddToFront(GetName())
        if parentMenu not= undefined
            return parentMenu:GetMenuPath(array)
        end

        return array
    end

end