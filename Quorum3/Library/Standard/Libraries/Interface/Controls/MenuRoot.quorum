package Libraries.Interface.Controls

use Libraries.Containers.Array
use Libraries.Game.GameStateManager
use Libraries.Interface.Events.MenuChangeEvent
use Libraries.Interface.Events.MenuChangeListener
use Libraries.Interface.Selections.MenuSelection

/*
The MenuRoot class is a blueprint that represents the top-most level of a menu.
It's used for classes like the MenuBar. Most users will never need to use this
class directly.
*/
class MenuRoot is Control

    boolean isSelecting = false
    MenuSelection selection
    Array<MenuChangeListener> listeners

    on create
        selection:Initialize(me)
    end

    blueprint action Add(Array<MenuItem> menuHeaders)

    blueprint action Add(MenuItem item)

    blueprint action Close

    blueprint action MoveSelectionLeft

    blueprint action MoveSelectionRight

    blueprint action MoveSelectionUp

    blueprint action MoveSelectionDown

    action GetSelection returns MenuSelection
        return selection
    end

    action GetMultipleSelection returns Array<MenuSelection>
        return undefined
    end

    action HasMultipleSelection returns boolean
        return false
    end

    action Select(Array<MenuItem> path)
        if path:IsEmpty()//if the user sent an empty path, deselect everything 
            Deselect()
            return now
        end
        Array<MenuItem> pathCopy = path:CopyToArray()
        MenuItem item = undefined

        if not path:IsEmpty()
            item = path:RemoveFromFront()
        end

        Array<MenuItem> selectionPath = selection:GetPath()
        MenuItem oldItem = undefined

        if not selectionPath:IsEmpty()
            oldItem = selectionPath:RemoveFromFront()
        end

        if item not= undefined
            if item = oldItem
                item:UpdateSelection(selectionPath, path)
            else
                if oldItem not= undefined
                    oldItem:RecursiveDeselect(selectionPath)
                end
                item:RecursiveSelect(path)
            end
        end

        // Add the removed portion back to the path to undo our side effects.
        path:AddToFront(item)

        // Set our selection object with the new path, triggering a selection
        // event.
        selection:Set(pathCopy)
    end

    action Deselect
        MenuSelection selection = GetSelection()
        Deselect(selection:GetPath())
    end

    private action Deselect(Array<MenuItem> path)
        MenuItem item = undefined
        if not path:IsEmpty()
            item = path:RemoveFromFront()
        end

        if item not= undefined
            item:RecursiveDeselect(path)
        end

        // Add the removed portion back to the path to undo our side effects.
        path:AddToFront(item)

        Array<MenuItem> newPath
        selection:Set(newPath)
    end

    private action GetMenuItem(Array<MenuItem> path) returns MenuItem
        if not path:IsEmpty()
            return path:GetFromEnd()
        end
        return undefined
    end

    action IsSelecting returns boolean
        return isSelecting
    end

    action SetSelectingState(boolean selecting)
        if selecting = false
            selection:Empty()
        end
        isSelecting = selecting
    end

    action ActivateSelection
        if IsSelecting()
            MenuItem item = GetMenuItem(selection:GetPath())
            if item:IsMenu()
                item:Open()
            else
                item:Activate()
                Close()
            end
        end
    end

    action AddMenuChangeListener(MenuChangeListener listener)
        listeners:Add(listener)
    end

    action RemoveMenuChangeListener(MenuChangeListener listener)
        listeners:Remove(listener)
    end

    action NotifyMenuChangeListeners(MenuChangeEvent event)
        integer counter = 0
        if event:GetEventType() = event:OPENED
            repeat while counter < listeners:GetSize()
                listeners:Get(counter):OpenedMenu(event)
                counter = counter + 1
            end
        elseif event:GetEventType() = event:CLOSED
            repeat while counter < listeners:GetSize()
                listeners:Get(counter):ClosedMenu(event)
                counter = counter + 1
            end
        end

        GameStateManager manager
        manager:GetInput():NotifyMenuChangeListeners(event)
    end
end