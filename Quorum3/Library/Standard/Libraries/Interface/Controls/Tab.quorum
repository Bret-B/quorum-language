package Libraries.Interface.Controls

use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Item2D
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Label
use Libraries.Containers.Array
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Gradient
use Libraries.Game.Graphics.Texture
use Libraries.Interface.Views.DrawableView
use Libraries.Interface.Views.LabelBoxView
use Libraries.Interface.Views.LabelBoxToggleView
use Libraries.Interface.Behaviors.Controls.TabCloseBehavior

class Tab is ToggleButton
    
    Item2D relatedItem = undefined
    Layout layout = undefined
    LayoutProperties defaultProperties
    LayoutProperties iconLayoutProperties
    LayoutProperties labelLayoutProperties
    LayoutProperties buttonLayoutProperties

    Control icon
    Label label
    Button closeButton

    DrawableView iconView

    boolean displayIcon = true
    boolean displayLabel = true
    boolean displayClose = true

    on create
        AllowToggleOff(false)

        FlowLayout flow
        layout = flow
        SetLayout(flow)

        iconLayoutProperties:SetPercentageY(0.5)
        iconLayoutProperties:SetPercentageOriginY(0.5)
        iconLayoutProperties:SetLeftPadding(label:GetLineHeight() / 2)
        icon:AddLayoutProperties(iconLayoutProperties)
        icon:SetView2D(iconView)
        Add(0, icon)
        icon:Hide()

        
        defaultProperties:SetHorizontalLayoutMode(defaultProperties:FIT_CONTENTS)
        defaultProperties:SetVerticalLayoutMode(defaultProperties:STANDARD)
        defaultProperties:SetPercentageHeight(1.0)
        AddLayoutProperties(defaultProperties)

        SetAccessibilityCode(parent:Item:TAB)
        closeButton:SetName("Close")
    end

    action Initialize(text name, Item2D item)
        DisplayName(true)
        DisplayIcon(false)
        DisplayCloseButton(false)

        InitializeDefaults(name, item)
    end

    action Initialize(text name, Item2D item, Drawable icon)
       SetIcon(icon)

        DisplayName(true)
        DisplayIcon(true)
        DisplayCloseButton(false)

        InitializeDefaults(name, item)
    end

    action Initialize(text name, Item2D item, Texture iconTexture)
        SetIcon(iconTexture)

        DisplayName(true)
        DisplayIcon(true)
        DisplayCloseButton(false)

        InitializeDefaults(name, item)
    end

    action Initialize(text name, Item2D item, boolean hasClose)
        DisplayName(true)
        DisplayIcon(false)
        DisplayCloseButton(hasClose)

        InitializeDefaults(name, item)
    end

    action Initialize(text name, Item2D item, Drawable icon, boolean hasClose)
        SetIcon(icon)

        DisplayName(true)
        DisplayIcon(true)
        DisplayCloseButton(hasClose)

        InitializeDefaults(name, item)
    end

    action Initialize(text name, Item2D item, Texture iconTexture, boolean hasClose)
        SetIcon(iconTexture)

        DisplayName(true)
        DisplayIcon(true)
        DisplayCloseButton(hasClose)

        InitializeDefaults(name, item)
    end

    private action InitializeDefaults(text name, Item2D item)
        LabelBoxToggleView content
        Color color
        Gradient gradient
        Gradient selectionGradient
        
        Color gray = color:LightGray()
        Color lightGray = color:CustomColor(0.9, 0.9, 0.9, 1)

        gradient:Set(gray, gray, lightGray, lightGray)
        selectionGradient:Set(lightGray, lightGray, color:White(), color:White())
        content:SetBorderThickness(1)
        content:Initialize(gradient, color:Black(), selectionGradient, color:Black())

        SetView2D(content)

        integer buttonHeight = cast(integer, label:GetLineHeight())
//        closeButton:Initialize(buttonHeight, buttonHeight)
        TabCloseBehavior behavior
        behavior:SetTab(me)
        closeButton:SetBehavior(behavior)

        if icon:GetWidth() not= 0 and icon:GetHeight() not= 0
            number aspectRatio = icon:GetWidth() / icon:GetHeight()
            integer height = label:GetLineHeight()
            icon:SetSize(aspectRatio * height, height)
        else
            icon:SetSize(0, label:GetLineHeight())
        end

        LayoutProperties labelLayout
        labelLayout:SetPercentageY(1)
        labelLayout:SetPercentageOriginY(1)
        labelLayout:SetLeftPadding(label:GetLineHeight() / 2)
        labelLayout:SetRightPadding(label:GetLineHeight() / 2)
        labelLayoutProperties = labelLayout
        label:AddLayoutProperties(labelLayout)

        LayoutProperties buttonLayout
        buttonLayout:SetPercentageY(0.5)
        buttonLayout:SetPercentageOriginY(0.5)
        buttonLayout:SetRightPadding(label:GetLineHeight() / 2)
        buttonLayoutProperties = buttonLayout
        closeButton:AddLayoutProperties(buttonLayout)

        SetName(name)
        SetRelatedItem(item)
//        SetIcon(icon)

        Add(label)
        Add(closeButton)

        Resize()
    end

    action SetRelatedItem(Item2D item)
        relatedItem = item
    end

    action GetRelatedItem returns Item2D
        return relatedItem
    end

    action SetIcon(Texture texture)
        if iconView:IsLoaded()
            iconView:Dispose()
        end

        if texture = undefined
            icon:Hide()
        else
            iconView:Load(texture)
            icon:Show()
        end
    end

    action SetIcon(Drawable drawable)
        SetIcon(drawable:GetTexture())
    end

    action SetName(text name)
        label:SetText(name)
        icon:SetName(name + " Icon")
        parent:Item2D:SetName(name)
        Resize()
    end

    action ReleasedMouse
        boolean state = GetToggleState()
        if state = false
            SetToggleState(true)
        end
        parent:Control:ReleasedMouse()
    end

    action DisplayName(boolean display)
        displayLabel = display
        if display
            label:Show()
        else
            label:Hide()
        end
    end

    action IsDisplayingName returns boolean
        return displayLabel
    end

    action DisplayIcon(boolean display)
        displayIcon = display
        if display
            icon:Show()
        else
            icon:Hide()
        end
    end

    action IsDisplayingIcon returns boolean
        return displayIcon
    end

    action DisplayCloseButton(boolean display)
        displayClose = display
        if display
            closeButton:Show()
        else
            closeButton:Hide()
        end
    end

    action IsDisplayingCloseButton returns boolean
        return displayClose
    end

    action OnToggleOn
        if GetButtonGroup() is TabBar
            TabBar bar = cast(TabBar, GetButtonGroup())
            TabPane pane = bar:GetTabPane()
            if pane not= undefined
                pane:UpdateSelection(me)
            end

            bar:FitTab(me)
        end
    end

    action OnToggleOff
        if GetButtonGroup() is TabBar
            TabBar bar = cast(TabBar, GetButtonGroup())
            TabPane pane = bar:GetTabPane()
            if pane not= undefined
                pane:UpdateSelection(undefined)
            end
        end
    end

    /*
    For internal use only.
    */
    action GetLabel returns Label
        return label
    end
end