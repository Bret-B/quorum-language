package Libraries.Interface.Controls

use Libraries.Interface.Item2D
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Selections.TreeSelection
use Libraries.Containers.Array
use Libraries.Interface.Layouts.TreeLayout

class Tree is Item2D

    Item2D panel
    Layout panelLayout = undefined
    TreeSelection selection
    Array<TreeItem> treeItems

    on create
        SetFocusable(true)
        SetInputGroup("Tree")
        TreeLayout flow
        
        // Hardcoded value sufficient for basic cases. Should be replaced with
        // something more responsive to design in the future.
        flow:SetPadding(2)

        panelLayout = flow
        panel:AddLayout(flow)

        Add(panel)

        selection:Initialize(me)
    end

    action AddTreeItem(TreeItem item)
        panel:Add(item)
        treeItems:Add(item)
        item:SetTree(me)
    end

    action RemoveTreeItem(TreeItem item)
        panel:Remove(item)
        treeItems:Remove(item)
        item:SetTree(undefined)
    end

//    action GetTreeItem(Array<TreeItem> path) returns TreeItem
//        if path = undefined or path:IsEmpty()
//            return undefined
//        end
//
//        text first = path:RemoveFromFront()
//
//        TreeItem item = GetTreeItem(first)
//
//        if item not= undefined
//            item = item:GetTreeItem(path)
//        end
//
//        // Add the removed portion back to the path to undo our side effects.
//        path:AddToFront(first)
//
//        return item
//    end

//    private action GetTreeItem(text path) returns TreeItem
//        integer counter = 0
//        repeat while counter < treeItems:GetSize()
//            if treeItems:Get(counter):GetName() = path
//                return treeItems:Get(counter)
//            end
//            counter = counter + 1
//        end
//
//        return undefined
//    end

    action GetSelection returns TreeSelection
        return selection
    end

    action GetMultipleSelection returns Array<TreeSelection>
        return undefined
    end

    action HasMultipleSelection returns boolean
        return false
    end

    action Select(Array<TreeItem> path)
        Array<TreeItem> pathCopy = path:CopyToArray()
        TreeItem first = pathCopy:RemoveFromFront()

        Array<TreeItem> selectionPath = selection:GetPath()
        TreeItem oldFirst = selectionPath:RemoveFromFront()

        if first not= undefined
            if first = oldFirst
                first:UpdateSelection(selectionPath, pathCopy)
            else
                if oldFirst not= undefined
                    oldFirst:RecursiveDeselect(selectionPath)
                end
                first:RecursiveSelect(pathCopy)
            end
        end

        // Set our selection object with the new path, triggering a selection
        // event.
        selection:Set(path)
    end

    action Deselect(Array<TreeItem> path)
        Array<TreeItem> pathCopy = path:CopyToArray()
        TreeItem first = pathCopy:RemoveFromFront()

        if first not= undefined
            first:RecursiveDeselect(pathCopy)
        end
    end

    action SelectionRight
        if selection:GetPath():IsEmpty()
            if not treeItems:IsEmpty()
                Array<TreeItem> array
                array:Add(treeItems:Get(0))
                Select(array)
            end
        else
            TreeItem item = selection:GetPath():GetFromEnd()
            if item not= undefined and item:IsSubtree() and not item:IsOpen()
                item:Open()
            end
        end
    end

    action SelectionLeft
        Array<TreeItem> path = selection:GetPath()
        if path:IsEmpty()
            if not treeItems:IsEmpty()
                SelectFirst()
            end
        else
            TreeItem = path:GetFromEnd()
            if item not= undefined
                if item:IsSubtree() and item:IsOpen()
                    item:Close()
                elseif path:GetSize() > 1
                    path:RemoveFromEnd()
                    Select(path)
                end
            end
        end
    end

    action SelectionDown
        Array<TreeItem> path = selection:GetPath()
        if path:IsEmpty()
            if not treeItems:IsEmpty()
                SelectFirst()
            end
        else
            item = path:GetFromEnd()
            if item not= undefined
                item:SelectionDown()
            end
        end
    end

    action SelectionUp
        Array<TreeItem> path = selection:GetPath()
        if path:IsEmpty()
            if not treeItems:IsEmpty()
                SelectFirst()
            end
        else
            TreeItem item = path:GetFromEnd()
            if item not= undefined
                item:SelectionUp()
            end
        end
    end

    action SelectionSkipForward
        Array<TreeItem> path = selection:GetPath()
        if path:IsEmpty()
            SelectFirst()
        else
            integer counter = 0
            TreeItem first = path:GetFromFront()
            repeat while counter < treeItems:GetSize()
                if treeItems:Get(counter):Equals(first)
                    integer select = counter + 1

                    if select >= treeItems:GetSize()
                        return now
                    end

                    first = treeItems:Get(select)
                    path:Empty()
                    path:Add(first)
                    Select(path)
                    return now
                end
                counter = counter + 1
            end
        end
    end

    action SelectionSkipBackward
        Array<TreeItem> path = selection:GetPath()
        if path:IsEmpty()
            SelectFirst()
        else
            integer counter = 0
            TreeItem first = path:GetFromFront()
            repeat while counter < treeItems:GetSize()
                if treeItems:Get(counter):Equals(first)
                    integer select = counter - 1

                    if select < 0
                        return now
                    end

                    treeItems:Get(select):SelectLastElement()
                    return now
                end
                counter = counter + 1
            end
        end
    end

    private action SelectFirst
        if not treeItems:IsEmpty()
            Array<TreeItem> array
            array:Add(treeItems:Get(0))
            Select(array)
        end
    end
end