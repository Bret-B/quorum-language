package Libraries.Interface.Controls
use Libraries.Containers.Array
use Libraries.Containers.Support.Pair
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Selections.SpreadsheetSelection
use Libraries.Interface.Behaviors.Behavior

class TreeTable is Control
    Array<TreeTableColumn> columns
    Array<TreeTableItem> items
    SpreadsheetSelection selection
    RowMapping mapping = undefined

    // The cellBehavior is called when a Cell would be activated if it doesn't
    // have an activation behavior of its own defined.
    Behavior cellBehavior = undefined
    
    on create
        FlowLayout layout
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:FIT_CONTENTS)
        properties:SetVerticalLayoutMode(properties:FIT_CONTENTS)

        SetInputGroup("Spreadsheet")

        SetFocusable(true)
        selection:Initialize(me)
        SetAccessibilityCode(parent:Item:TABLE)
        SetName("Table")
    end

    action SetRowMapping(RowMapping rowMapping)
        mapping = rowMapping
        // Update all of the column cell values here.
    end

    action GetRowMapping returns RowMapping
        return mapping
    end

    action Add(TreeTableColumn column)
        columns:Add(column)
        column:SetTreeTable(me)
        parent:Item2D:Add(column)
    end

    action Add(integer position, TreeTableColumn column)
        columns:Add(position, column)

        parent:Item2D:Add(column)
    end

    action Add(TreeTableItem item)
        items:Add(item)

        if mapping not= undefined
            integer counter = 0
            repeat while counter < columns:GetSize()
                TreeTableColumn column = columns:Get(counter)
                integer target = column:GetSize()
                
                Cell cell
                column:Add(cell)
                column:SetCell(target, mapping:GetValue(item, counter))

                counter = counter + 1
            end
        end
    end

    action Add(integer position, TreeTableItem item)
        items:Add(position, item)

        if mapping not= undefined
            integer counter = 0
            repeat while counter < columns:GetSize()
                TreeTableColumn column = columns:Get(counter)
                integer target = GetFlattenedIndex(position)
                
                Cell cell
                column:Add(target, cell)
                column:SetCell(target, mapping:GetValue(item, counter))

                counter = counter + 1
            end
        end
    end

    /*
    This action converts a top-level index (considering only the top level
    TreeTableItems) to a flattened index (considering all visible TreeTableItems
    in the TreeTable, as is relevant to cell positioning in the columns).
    */
    private action GetFlattenedIndex(integer target) returns integer
        integer total = 0
        integer counter = 0
        repeat while counter < target
            TreeTableItem item = items:Get(counter)
            total = total + GetActiveItemCount(item)

            counter = counter + 1
        end

        return total
    end

    private action GetActiveItemCount(TreeTableItem item) returns integer
        integer total = 1
        
        if item:IsExpanded()
            Array<TreeTableItem> children = item:GetChildren()
            integer counter = 0

            repeat while counter < children:GetSize()
                TreeTableItem child = children:Get(counter)
                total = total + GetActiveItemCount(child)
                counter = counter + 1
            end
        end

        return total
    end

    action GetColumn(integer i) returns TreeTableColumn
        return columns:Get(i)
    end

    action RemoveColumn(TreeTableColumn column)
        columns:Remove(column)
        column:SetTreeTable(undefined)
        parent:Item2D:Remove(column)
    end

    action RemoveColumnAt(integer column)
        TreeTableColumn c = columns:RemoveAt(column)
        parent:Item2D:Remove(c)
    end

    action GetColumnsSize returns integer
        return columns:GetSize()
    end

    action GetSelection returns SpreadsheetSelection
        return selection
    end

    action IsColumnsEmpty returns boolean
        return columns:IsEmpty()
    end

    action Empty 
        columns:Empty()
        parent:Item2D:Empty()
    end

    /*
        This action selects a single cell in the spreadsheet. In this case,
        a single cell.
    */
    action Select(Cell cell)
        Cell oldSelection = selection:Get()
        if oldSelection not= undefined
            oldSelection:LostSelection()
        end

        if cell not= undefined
            cell:GainedSelection()
        end

        selection:Set(cell)
    end

    /*
    This action selects a single Cell at the provided x and y coordinates,
    where the x coordinate represents the column and the y coordinate represents
    the row.
    */
    action Select(integer x, integer y)
        Cell oldSelection = selection:Get()
        if oldSelection not= undefined
            oldSelection:LostSelection()
        end

        Cell cell = GetCell(x, y)
        if cell not= undefined
            cell:GainedSelection()
        end

        selection:Set(x, y)
    end

    action Deselect
        Cell oldSelection = selection:Get()
        if oldSelection not= undefined
            oldSelection:LostSelection()
        end

        selection:Empty()
    end

    action MoveSelectionUp
        integer x = selection:GetX()
        integer y = selection:GetY()
        
        if y > 0
            Select(x, y - 1)
        end
    end

    action MoveSelectionDown
        integer x = selection:GetX()
        integer y = selection:GetY()
        
        if x >= 0 and x < columns:GetSize()
            TreeTableColumn column = columns:Get(x)
            if y < column:GetSize() - 1
                Select(x, y + 1)
            end
        end
    end

    action MoveSelectionLeft
        integer x = selection:GetX()
        integer y = selection:GetY()

        if selection:GetX() > 0
            Select(x - 1, y)
        end
    end

    action MoveSelectionRight
        integer x = selection:GetX()
        integer y = selection:GetY()
        
        if selection:GetX() < columns:GetSize() - 1
            Select(x + 1, y)
        end
    end

    /*
    This action returns the coordinates of a cell within the Spreadsheet within
    a Pair object. The first value of the Pair is the x coordinate, representing
    which column contains the cell. The second value of the Pair is the y
    coordinate, representing which row contains the cell.

    This action can potentially iterate over every cell in the Spreadsheet, and
    should be used sparingly if working with lots of cells.
    */
    action GetCellCoordinates(Cell cell) returns Pair<integer>
        integer x = 0
        Pair<integer> pair

        repeat while x < columns:GetSize()
            TreeTableColumn column = columns:Get(x)
            integer y = column:GetCellIndex(cell)
            if y > -1
                pair:Set(x, y)
                return pair
            end
            x = x + 1
        end

        // If the cell couldn't be found, return -1 for each coordinate.
        pair:Set(-1, -1)
        return pair
    end

    /*
    This action returns the index of the column within the Spreadsheet, or
    returns -1 if the column is not a part of this Spreadsheet.
    */
    action GetColumnIndex(TreeTableColumn column) returns integer
        return columns:GetFirstLocation(column)
    end

    /*
    This action gets the cell located at the given coordinates, where the x
    coordinate represents the column and the y coordinate represents the row.
    */
    action GetCell(integer x, integer y) returns Cell
        return columns:Get(x):GetCell(y)
    end

    /*
    This action sets the cell activation Behavior for this Spreadsheet. If a
    cell would ever be activated (such as by a double-click), if it doesn't have
    its own activation Behavior, the Spreadsheet's cell activation Behavior will
    be used instead.
    */
    action SetCellActivationBehavior(Behavior behavior)
        cellBehavior = behavior
    end

    /*
    This action returns the cell activation Behavior for this Spreadsheet. If a
    cell would ever be activated (such as by a double-click), if it doesn't have
    its own activation Behavior, the Spreadsheet's cell activation Behavior will
    be used instead.
    */
    action GetCellActivationBehavior returns Behavior
        return cellBehavior
    end

    action ExpandRow(TreeTableCell cell)
        Array<TreeTableRow> rows = cell:GetRows()

        integer index = columns:Get(0):GetCellIndex(cell)

        if index < 0
            return now
        end

        integer i = 0
        integer columnSize = columns:GetSize()

        repeat while i < rows:GetSize()
            TreeTableRow row = rows:Get(i)
            index = index + 1

            integer j = 0
            repeat while j < columnSize
                TreeTableColumn column = columns:Get(j)
                column:Add(index, row:Get(j))
                j = j + 1
            end

            i = i + 1
        end
    end

    action CloseRow(TreeTableCell cell)
        Array<TreeTableRow> rows = cell:GetRows()

        integer index = columns:Get(0):GetCellIndex(cell)

        if index < 0
            return now
        end

        // We'll remove cells from the index after the parent cell.
        index = index + 1

        integer i = 0
        integer columnSize = columns:GetSize()

        repeat while i < rows:GetSize()
            integer j = 0
            repeat while j < columnSize
                TreeTableColumn column = columns:Get(j)
                column:RemoveCellAt(index)
                j = j + 1
            end

            i = i + 1
        end
    end
end