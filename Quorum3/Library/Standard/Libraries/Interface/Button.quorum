package Libraries.Interface

use Libraries.Game.Behaviors.Behavior
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Gradient
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.TextureRegion
use Libraries.System.File

class Button is GraphicUserInterface

    Behavior activationBehavior = undefined

    on create
        SetInputGroup("Button")
        SetFocusable(true)
    end

    /*
    This action sets the initial width and height of the button using its
    default appearance, a box with a light gray gradient and a black border.

    Attribute: Example

        use Libraries.Interface.Button
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Button button
                button:Initialize(200, 100)
                Add(button)
            end
        end
    */
    action Initialize(number width, number height)
        LabelBoxContent content
        Color color
        Gradient gradient
        
        Color gray = color:LightGray()
        Color lightGray = color:CustomColor(0.9, 0.9, 0.9, 1)

        gradient:Set(gray, gray, lightGray, lightGray)
        content:SetBorderThickness(2)
        content:Initialize(gradient, color:Black())

        SetVisualContent(content)
        SetSize(width, height)
    end

    /*
    This action sets the initial width and height of the button using its
    default appearance, a box with a light gray gradient, a black border, and
    a label with the given text.

    Attribute: Example

        use Libraries.Interface.Button
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Button button
                button:Initialize(200, 100, "Quorum!")
                Add(button)
            end
        end
    */
    action Initialize(number width, number height, text label)
        LabelBoxContent content
        Color color
        Gradient gradient
        
        Color gray = color:LightGray()
        Color lightGray = color:CustomColor(0.9, 0.9, 0.9, 1)

        gradient:Set(gray, gray, lightGray, lightGray)
        content:SetBorderThickness(2)
        content:Initialize(gradient, color:Black())

        SetVisualContent(content)
        SetSize(width, height)

        SetName(label)
    end

    action Initialize(Drawable drawable)
        ImageInterfaceContent content
        content:Initialize(drawable)
        
        SetVisualContent(content)
        SetSize(drawable:GetWidth(), drawable:GetHeight())
    end

    action Initialize(Texture texture)
        ImageInterfaceContent content
        content:Load(texture)
        
        SetVisualContent(content)
        SetSize(texture:GetWidth(), texture:GetHeight())
    end

    action Initialize(TextureRegion region)
        ImageInterfaceContent content
        content:Load(region)

        SetVisualContent(content)
        SetSize(region:GetRegionWidth(), region:GetRegionHeight())
    end

    action Initialize(File file)
        ImageInterfaceContent content
        content:Load(file)

        SetVisualContent(content)
        SetSize(content:GetWidth(), content:GetHeight())
    end

    action Initialize(text filePath)
        ImageInterfaceContent content
        content:Load(filePath)

        SetVisualContent(content)
        SetSize(content:GetWidth(), content:GetHeight())
    end

    action Initialize(number width, number height, GraphicUserInterfaceContent content)
        SetVisualContent(content)
        SetSize(width, height)
    end

    action SetBehavior(Behavior behavior)
        activationBehavior = behavior
    end

    action GetBehavior returns Behavior
        return activationBehavior
    end

    action RunBehavior
        BehaviorEvent event
        event:SetItem(me)
        RunBehavior(event)
    end

    action RunBehavior(BehaviorEvent event)
        if activationBehavior not= undefined
            activationBehavior:Run(event)
        end
    end

    action ReleasedMouse
        parent:GraphicUserInterface:ReleasedMouse()
        RunBehavior()
    end

    action SetName(text name)
        if GetVisualContent() is GraphicUserInterfaceContent
            GraphicUserInterfaceContent content = cast(GraphicUserInterfaceContent, GetVisualContent())
            content:SetText(name)
        end
    end
end