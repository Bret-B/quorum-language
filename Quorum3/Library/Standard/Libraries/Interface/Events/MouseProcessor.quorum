package Libraries.Interface.Events

use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator

class MouseProcessor

    List<MouseEvent> events
    List<MouseListener> listeners

    /*  Deletes any old events that may be in the events list, then gets all
        current events, puts them in the events variable, and returns it. */
    action GetCurrentEvents returns List<MouseEvent>
        events:Empty()
        GetCurrentEventsNative()
        return events
    end
        
    system action GetCurrentEventsNative

    action AddListener(MouseListener listener)
        listeners:Add(listener)
   end

    action RemoveListener(MouseListener listener)
        listeners:Remove(listener)
    end

    action ProcessEvents

        if not events:IsEmpty() and not listeners:IsEmpty()

            Iterator<MouseListener> listenIterator = listeners:GetIterator()
            MouseEvent currentEvent = undefined
            MouseListener currentListener = undefined
            
            repeat while not events:IsEmpty()
                currentEvent = events:RemoveFromFront()

                repeat while listenIterator:HasNext()
                    currentListener = listenIterator:Next()
                    if currentEvent:eventType = currentEvent:CLICKED_MOUSE
                        currentListener:ClickedMouse(currentEvent)
                    elseif currentEvent:eventType = currentEvent:MOVED_MOUSE
                        currentListener:MovedMouse(currentEvent)
                    elseif currentEvent:eventType = currentEvent:DRAGGED_MOUSE
                        currentListener:DraggedMouse(currentEvent)
                    elseif currentEvent:eventType = currentEvent:RELEASED_MOUSE
                        currentListener:ReleasedMouse(currentEvent)
                    elseif currentEvent:eventType = currentEvent:SCROLLED_MOUSE
                        currentListener:ScrolledMouse(currentEvent)
                    end
                end

                listenIterator:Rewind()
            end
        end
    end

end