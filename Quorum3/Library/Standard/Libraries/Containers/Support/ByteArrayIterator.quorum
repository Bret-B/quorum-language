package Libraries.Containers.Support
use Libraries.Containers.Iterator
use Libraries.Containers.ByteArray
use Libraries.Compute.BigInteger

/*
    The ByteArrayIterator class is designed to read through ByteArrays that 
    store low level byte information from files. The purpose is to provide a 
    way to manipulate bytes efficiently in Quorum, which is necessary for 
    some specialized applications. 

    The values in each position in the array are raw bytes, which means 
    any integer returned is 8 bits in length. As such, they are individually 
    between the numbers -128 and 127.

    The ByteArrayIterator can be used to easily retrieve bytes as well as 
    numbers, booleans, and integers.

    Attribute: Example
*/
class ByteArrayIterator
    ByteArray array = undefined
    integer position = 0

    action SetPosition(integer pos) returns boolean
        if pos < array:GetSize()
            position = pos
            return true
        end
        
        return false
    end

    action GetByteArray returns ByteArray
        return array
    end

    action SetByteArray(ByteArray byte)
        array = byte
    end

    action GetPosition returns integer
        return position
    end

    action NextTextUntilCharacter(text character) returns text
        text value = ""
        if character = undefined or character:GetSize() = 0
            return undefined
        end

        text constrained = character:GetCharacter(0)
        boolean done = false
        repeat while position < array:GetSize() and not done
            integer byte = array:Get(position)
            text value1 = array:ConvertByteToCharacter(byte)
            if value1 = constrained
                done = true
            end
            value = value + value1
            position = position + 1
        end
        return value
    end

    action NextTextRead(integer amount) returns text
        text value = ""
        integer remainder = amount
        repeat while position < array:GetSize() and remainder > 0
            integer byte = array:Get(position)
            text value1 = array:ConvertByteToCharacter(byte)
            value = value + value1
            position = position + 1
            remainder = remainder - 1
        end
        return value
    end

    action NextByteAsInteger returns integer
        integer byte = array:Get(position)
        position = position + 1
        return byte
    end

    action NextByteAsUnsignedInteger returns integer
        integer byte = array:Get(position)
        position = position + 1
        integer value = array:ConvertByteToUnsignedInteger(byte)

        return value
    end

    action NextByteAsBoolean returns boolean
        integer byte = array:Get(position)
        position = position + 1
        if byte = 0
            return false
        else
            return true
        end
    end

    action NextTwoByteInteger returns integer
        integer byte1 = 0
        integer byte2 = 0
        if(position >= 0 and position < array:GetSize())
            byte1 = array:Get(position)
        end
        if(position+1 >= 0 and position+1 < array:GetSize())
            byte2 = array:Get(position+1)
        end
        integer value = array:ConvertBytesTo2ByteInteger(byte1, byte2)

        position = position + 2
        return value
    end

    action NextTwoByteUnsignedInteger returns integer
        integer byte1 = array:Get(position)
        integer byte2 = array:Get(position + 1)
        integer value = array:ConvertBytesTo2ByteUnsignedInteger(byte1, byte2)

        position = position + 2
        return value
    end

    action NextLong returns BigInteger
        BigInteger bigint

        integer byte1 = array:Get(position)
        integer byte2 = array:Get(position + 1)
        integer byte3 = array:Get(position + 2)
        integer byte4 = array:Get(position + 3)
        integer byte5 = array:Get(position + 4)
        integer byte6 = array:Get(position + 5)
        integer byte7 = array:Get(position + 6)
        integer byte8 = array:Get(position + 7)
        text value = array:ConvertBytesToNumberString(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8)

        bigint:SetValue(value, 10)

        position = position + 8
        return bigint
    end

    action NextInteger returns integer
        integer byte1 = array:Get(position)
        integer byte2 = array:Get(position + 1)
        integer byte3 = array:Get(position + 2)
        integer byte4 = array:Get(position + 3)

        integer value = array:ConvertBytesToInteger(byte1, byte2, byte3, byte4)
        position = position + 4
        return value
    end

    action NextNumber4Byte returns number
        integer byte1 = array:Get(position)
        integer byte2 = array:Get(position + 1)
        integer byte3 = array:Get(position + 2)
        integer byte4 = array:Get(position + 3)

        number value = array:ConvertBytesToNumber4Byte(byte1, byte2, byte3, byte4)
        position = position + 4
        return value
    end

    action NextNumber returns number
        integer byte1 = array:Get(position)
        integer byte2 = array:Get(position + 1)
        integer byte3 = array:Get(position + 2)
        integer byte4 = array:Get(position + 3)
        integer byte5 = array:Get(position + 4)
        integer byte6 = array:Get(position + 5)
        integer byte7 = array:Get(position + 6)
        integer byte8 = array:Get(position + 7)

        number value = array:ConvertBytesToNumber(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8)
        position = position + 8
        return value
    end

    action NextIntegerConvertFromUnsigned returns integer
        integer byte1 = array:Get(position)
        integer byte2 = array:Get(position + 1)
        integer byte3 = array:Get(position + 2)
        integer byte4 = array:Get(position + 3)

        integer value = array:ConvertBytesFromUnsignedToSignedInteger(byte1, byte2, byte3, byte4)
        position = position + 4
        return value
    end

    action NextSubArray(integer amount) returns ByteArray
        ByteArray value = array:GetSubArray(position, position + amount)
        position = position + amount
        return value
    end

    action SkipBytes(integer amount)
        position = position + amount
    end

    action HasNextInteger returns boolean
        if position + 4 < array:GetSize()
            return true
        end

        return false
    end
    /*
        This action gets the current item and does not move onto the next item
        to be iterated over. 

        Attribute: Returns Returns the object. 
    */
    action GetCurrent returns integer
        return 0
    end

    /*
        This action determines if there is a next item in the iteration. 

        Attribute: Returns true if there is a next item and false if there is not. 
    */
    action HasNext returns boolean
        return false
    end

    /*
        This action gets the next item in the iteration and continues the iteration. 

        Attribute: Returns Returns the object. 
    */
    action Next returns integer
        return 0
    end

    /*
        This action starts the iteration over from the beginning. 
    */
    action Rewind
        position = 0
    end
end