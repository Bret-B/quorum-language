package Libraries.Robots.Lego

/*
This class is an object representation of a LEGO Mindstorms EV3 LCD screen.
It is used to display text and shapes on the screen.
When using coordinates, the origin (0, 0) represents the bottom-left corner of the screen.

Attribute: Author Evan Pierzina

Attribute: Example
class Main
    action Main
        Button button
        Screen screen

        screen:DrawRectangleFull(40, 80, 20, 20)
        screen:DrawRectangleFull(116, 80, 20, 20)
        screen:DrawLine(40, 40, 136, 40)
        screen:DrawLine(40, 40, 40, 50)
        screen:DrawLine(136, 40, 136, 50)
        button:WaitForButtonPress()
    end
end
*/

class Screen
    
    /*
    This action removes everything from the screen.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    
    screen:DrawCircleFull(25, 25, 50)
    screen:Clear()  //removes anything on the screen
    */
    
    system action Clear
    
    /*
    This action removes a single pixel from the screen.
    
    Attribute: Parameter x specifies the x coordinate of the pixel being erased.
    
    Attribute: Parameter y specifies the y coordinate of the pixel being erased.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    
    screen:DrawCircleFull(50, 50, 25)
    screen:ErasePixel(50, 50)   //removes the center pixel of the circle
    */
    
    system action ErasePixel(integer x, integer y)
    
    /*
    This action places a pixel on the screen
    
    Attribute: Parameter x specifies the x coordinate of the pixel being drawn.
    
    Attribute: Parameter y specifies the y coordinate of the pixel being drawn.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    Utility utility
    
    integer y = 0
    repeat while y <= 127 //bottom of the screen
        integer x = 0
        repeat while x <= 177 //right side of the screen
            screen:DrawPixel(x, y)
            utility:DelayMilliseconds(1)
            x = x + 1
        end
        y = y + 1
    end
    */
    
    system action DrawPixel(integer x, integer y)
    
    /*
    This action displays a text message on a specific line of the screen.
    
    Attribute: Parameter message is what should be displayed on the screen.
    
    Attribute: Parameter line specifies which line the text should be displayed on.
    Valid line numbers are 1 through 8. 
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    
    screen:Output("Hello!", 1)
    screen:Output("I", 2)
    screen:Output("Am", 3)
    screen:Output("Your", 4)
    screen:Output("Robot", 5)
    */
    
    system action Output(text message, integer line)
    
    /*
    This action displays a text message on a specific line of the screen with an indentation.
    
    Attribute: Parameter message is what will be displayed on the screen.
    
    Attribute: Parameter line specifies which line number the message will appear on.
    Valid line numbers are 1 through 8.
    
    Attribute: Parameter indent specifies how much of an indent, measured in pixels, the message should have.
    The visible width visible portion of the screen ranges from 0 to 177 pixels, but you can use any integer.
    Negative values are accepted and shift the text message to the left.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    Button button
    
    integer indent = 0
    integer line = 1
    repeat until line = 9
        screen:Output("Indent = " + indent, line, indent) //displays the current indent on screen
        line = line + 1
        indent = indent + 8
    end
    button:WaitForButtonPress()
    */
    
    system action Output(text message, integer line, integer indent)
    
    /*
    This action displays a centered text message on a specified text line of the screen
    
    Attribute: Parameter message is what will be displayed on the screen
    
    Attribute: Parameter specifies what text line the message should appear on.
    Valid text lines are 1 through 8.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    InfraredSensor infraredSensor
    Motor motor
    Utility utility
    
    infraredSensor:SetPort(4)
    motor:SetSpeed(motor:MOTOR_B, 720) //two motors for movement
    motor:SetSpeed(motor:MOTOR_C, 720)
    motor:MoveForward(motor:MOTOR_B)
    motor:MoveForward(motor:MOTOR_C)
    repeat while true
       screen:OutputCenter("Distance: " + infraredSensor:GetDistance(), 1) //displays the distance on the first line
       utility:DelayMilliseconds(100)
    end
    */
    
    system action OutputCenter(text message, integer line)
    
    /*
    This action displays a message using inverted pixel colors.
    The rectangular space reserved for each character becomes solid black and the text displays as a cutout from that.
    
    Attribute: Parameter message specifies the text that should be displayed on screen.
    
    Attribute: Parameter line specifies the line number that the text should appear on.
    Valid line numbers are 1 through 8.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    
    screen:OutputInvertedColor("Hello!", 1)
    screen:OutputInvertedColor("I", 2)
    screen:OutputInvertedColor("Am", 3)
    screen:OutputInvertedColor("Your", 4)
    screen:OutputInvertedColor("Robot", 5)
    */
    
    system action OutputInvertedColor(text message, integer line)
    
    /*
    This action displays a message using inverted pixel colors.
    
    Attribute: Parameter message is what will be displayed on the screen.
    
    Attribute: Parameter line specifies which line number the message will appear on.
    Valid line numbers are 1 through 8.
    
    Attribute: Parameter indent specifies how much of an indent, measured in pixels, the message should have.
    The visible width visible portion of the screen ranges from 0 to 177 pixels, but you can use any integer.
    Negative values are accepted and shift the text message to the left.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    Button button
    
    integer indent = 0
    integer line = 1
    repeat until line = 9
        screen:OutputInvertedColor("Indent = " + indent, line, indent) //displays the current indent on screen
        line = line + 1
        indent = indent + 8
    end
    button:WaitForButtonPress()
    */
    
    system action OutputInvertedColor(text message, integer line, integer indent)
    
    /*
    This action displays a large text message, with each character's height spanning two text lines.
    
    Attribute: Parameter message specifies the message to be displayed on screen.
    
    Attribute: Parameter line specifies which line the message should start on.
    Since the message spans two text lines, the line specified and the one below it will be used to display the message.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    
    screen:OutputLarge("This", 1)
    screen:OutputLarge("is", 3)
    screen:OutputLarge("large", 5)
    screen:OutputLarge("text!", 7)
    */
    
    system action OutputLarge(text message, integer line)
    
    /*
    This action displays a large text message, with each character's height spanning two text lines.
    
    Attribute: Parameter message specifies the message to be displayed on screen.
    
    Attribute: Parameter line specifies which line the message should start on.
    Since the message spans two text lines, the line specified and the one below it will be used to display the message.
    
    Attribute: Parameter indent specifies how much of an indent, measured in pixels, the message should have.
    The visible width visible portion of the screen ranges from 0 to 177 pixels, but you can use any integer.
    Negative values are accepted and shift the text message to the left.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    Button button
    
    integer indent = 0
    integer line = 1
    repeat until line = 9
        screen:OutputLarge("Indent = " + indent, line, indent) //displays the current indent on screen
        line = line + 2
        indent = indent + 16
    end
    button:WaitForButtonPress()
    */
    
    system action OutputLarge(text message, integer line, integer indent)
    
    /*
    This action displays a centered large text message, with each character's height spanning two text lines.
    
    Attribute: Parameter message specifies the message to be displayed on screen.
    
    Attribute: Parameter line specifies which line the message should start on.
    Since the message spans two text lines, the line specified and the one below it will be used to display the message.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    InfraredSensor infraredSensor
    Motor motor
    Utility utility
    
    infraredSensor:SetPort(4)
    motor:SetSpeed(motor:MOTOR_B, 720) //two motors for movement
    motor:SetSpeed(motor:MOTOR_C, 720)
    motor:MoveForward(motor:MOTOR_B)
    motor:MoveForward(motor:MOTOR_C)
    repeat while true
       screen:OutputCenterLarge("Distance: " + infraredSensor:GetDistance(), 1) //displays the distance on the first line
       utility:DelayMilliseconds(100)
    end
    */
    
    system action OutputCenterLarge(text message, integer line)
    
    /*
    This action moves everything on the screen up by one text line.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    Utility utility
    ColorSensor colorSensor
    
    colorSensor:SetPort(colorSensor:PORT_3)
    text color = ""
    repeat while true
        color = colorSensor:GetColor()
        if color not= "none"
            screen:ScrollUp()           //scroll up
            screen:Output(color, 8)     //display color name on the bottom text line
        end
        utility:DelayMilliseconds(200)
    end
    */
    
    system action ScrollUp()
    
    /*
    This action moves everything on the screen up by one text line and then places a message on the bottom line.
    
    Attribute: Parameter message is the message that will be displayed on the bottom text line after scrolling up.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    Utility utility
    ColorSensor colorSensor
    
    colorSensor:SetPort(colorSensor:PORT_3)
    text color = ""
    repeat while true
        color = colorSensor:GetColor()
        if color not= "none"
            screen:ScrollUp(color)      //scroll up and display color name on the bottom text line
        end
        utility:DelayMilliseconds(200)
    end
    */
    
    system action ScrollUp(text message)
    
    /*
    This action scrolls up an amount of text lines based on the passed parameter.
    
    Attribute: Parameter lines represents the amount of text lines to be scrolled up
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    Utility utility
    
    screen:Output("Beep", 8)
    utility:DelayMilliseconds(500)
    screen:ScrollUp(1)              //scroll up one line
    screen:Output("Boop", 8)
    utility:DelayMilliseconds(500)
    screen:ScrollUp(2)              //scroll up two lines
    screen:Output("I am a robot!", 8)
    utility:DelayMilliseconds(3000)
    */
    
    system action ScrollUp(integer lines)
    
    /*
    This action draws a line on the screen.
    
    Attribute: Parameter xStart specifies the x coordinate where the line should start at.
    
    Attribute: Parameter yStart specifies the y coordinate where the line should start at.
    
    Attribute: Parameter xEnd specifies the x coordinate where the line should end at.
    
    Attribute: Parameter yEnd specifies the y coordinate where the line should end at.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    Utility utility
    Button button

    screen:DrawLine(30, 30, 89, 98)
    utility:DelayMilliseconds(500)
    screen:DrawLine(89, 98, 148, 30)
    utility:DelayMilliseconds(500)
    screen:DrawLine(148, 30, 30, 30)
    button:WaitForButtonPress()
    */
    
    system action DrawLine(integer xStart, integer yStart, integer xEnd, integer yEnd)
    
    /*
    This action draws an outline of a rectangle on the screen.
    
    Attribute: Parameter xBottomLeft specifies the x coordinate of the rectangle's bottom left corner where the rectangle starts from.
    
    Attribute: Parameter yBottomLeft specifies the y coordinate of the rectangle's bottom left corner where the rectangle starts from.
    
    Attribute: Parameter width specifies how wide the rectangle should be, in pixels. The visible screen pixels for width range from 0 to 177.
    
    Attribute: Parameter height specifies how tall the rectangle should be, in pixels. The visible screen pixels for height range from 0 to 127.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    Utility utility
    Button button

    screen:DrawRectangleOutline(30, 30, 118, 68) //rectangle's bottom left corner is 30, 30 with a width of 118 and height of 68
    utility:DelayMilliseconds(500)
    screen:DrawRectangleOutline(40, 40, 98, 48)
    utility:DelayMilliseconds(500)
    screen:DrawRectangleOutline(50, 50, 78, 28)
    button:WaitForButtonPress()
    */
    
    system action DrawRectangleOutline(integer xBottomLeft, integer yBottomLeft, integer width, integer height)
    
    /*
    This action erases pixels in the shape of a rectangle outline from the screen.
    
    Attribute: Parameter xBottomLeft specifies the x coordinate of the rectangle's bottom left corner where the rectangle starts from.
    
    Attribute: Parameter yBottomLeft specifies the y coordinate of the rectangle's bottom left corner where the rectangle starts from.
    
    Attribute: Parameter width specifies how wide the rectangle should be, in pixels. The visible screen pixels for width range from 0 to 177.
    
    Attribute: Parameter height specifies how tall the rectangle should be, in pixels. The visible screen pixels for height range from 0 to 127.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    Utility utility
    Button button
    
    screen:DrawRectangleFull(0, 0, 177, 127)     //makes the screen black
    utility:DelayMilliseconds(500)
    screen:EraseRectangleOutline(30, 30, 118, 68) //rectangle's bottom left corner is 30, 30 with a width of 118 and height of 68
    utility:DelayMilliseconds(500)
    screen:EraseRectangleOutline(40, 40, 98, 48)
    utility:DelayMilliseconds(500)
    screen:EraseRectangleOutline(50, 50, 78, 28)
    button:WaitForButtonPress()
    */
    
    system action EraseRectangleOutline(integer xStart, integer yStart, integer width, integer height)
    
    /*
    This action draws a filled in rectangle on screen.
    
    Attribute: Parameter xBottomLeft specifies the x coordinate of the rectangle's bottom left corner where the rectangle starts from.
    
    Attribute: Parameter yBottomLeft specifies the y coordinate of the rectangle's bottom left corner where the rectangle starts from.
    
    Attribute: Parameter width specifies how wide the rectangle should be, in pixels. The visible screen pixels for width range from 0 to 177.
    
    Attribute: Parameter height specifies how tall the rectangle should be, in pixels. The visible screen pixels for height range from 0 to 127.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Button button
    Screen screen
    
    screen:DrawRectangleFull(40, 80, 20, 20)    //draw left eye
    screen:DrawRectangleFull(116, 80, 20, 20)   //draw right eye

    repeat while true
    screen:EraseRectangleFull(40, 120, 20, 10)  //erase previous left eyebrow
    screen:EraseRectangleFull(116, 120, 20, 10) //erase previous right eyebrow
    screen:EraseRectangleFull(40, 30, 96, 30)   //erase previous mouth
    screen:DrawRectangleFull(40, 110, 20, 10)   //draw new left eyebrow
    screen:DrawRectangleFull(116, 110, 20, 10)  //draw new right eyebrow
    screen:DrawRectangleFull(40, 40, 96, 10)    //draw new mouth
    button:WaitForButtonPress()                 //toggle the face

    screen:EraseRectangleFull(40, 110, 20, 10)  //erase previous left eyebrow
    screen:EraseRectangleFull(116, 110, 20, 10) //erase previous right eyebrow
    screen:EraseRectangleFull(40, 40, 96, 10)   //erase previous mouth
    screen:DrawRectangleFull(40, 120, 20, 10)   //draw new left eyebrow
    screen:DrawRectangleFull(116, 120, 20, 10)  //draw new right eyebrow
    screen:DrawRectangleFull(40, 30, 96, 30)    //draw new mouth
    button:WaitForButtonPress()                 //toggle the face
    end
    */
    
    system action DrawRectangleFull(integer xStart, integer yStart, integer width, integer height)
    
    /*
    This action erases pixels in the shape of a full rectangle from the screen.
    
    Attribute: Parameter xBottomLeft specifies the x coordinate of the rectangle's bottom left corner where the rectangle starts from.
    
    Attribute: Parameter yBottomLeft specifies the y coordinate of the rectangle's bottom left corner where the rectangle starts from.
    
    Attribute: Parameter width specifies how wide the rectangle should be, in pixels. The visible screen pixels for width range from 0 to 177.
    
    Attribute: Parameter height specifies how tall the rectangle should be, in pixels. The visible screen pixels for height range from 0 to 127.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Button button
    Screen screen
    
    screen:DrawRectangleFull(0, 0, 177, 127)    //make the screen black
    screen:EraseRectangleFull(40, 80, 20, 20)    //draw left eye
    screen:EraseRectangleFull(116, 80, 20, 20)   //draw right eye

    repeat while true
    screen:DrawRectangleFull(40, 120, 20, 10)  //erase previous left eyebrow
    screen:DrawRectangleFull(116, 120, 20, 10) //erase previous right eyebrow
    screen:DrawRectangleFull(40, 30, 96, 30)   //erase previous mouth
    screen:EraseRectangleFull(40, 110, 20, 10)   //draw new left eyebrow
    screen:EraseRectangleFull(116, 110, 20, 10)  //draw new right eyebrow
    screen:EraseRectangleFull(40, 40, 96, 10)    //draw new mouth
    button:WaitForButtonPress()                 //toggle the face

    screen:DrawRectangleFull(40, 110, 20, 10)  //erase previous left eyebrow
    screen:DrawRectangleFull(116, 110, 20, 10) //erase previous right eyebrow
    screen:DrawRectangleFull(40, 40, 96, 10)   //erase previous mouth
    screen:EraseRectangleFull(40, 120, 20, 10)   //draw new left eyebrow
    screen:EraseRectangleFull(116, 120, 20, 10)  //draw new right eyebrow
    screen:EraseRectangleFull(40, 30, 96, 30)    //draw new mouth
    button:WaitForButtonPress()                 //toggle the face
    end
    */
    
    system action EraseRectangleFull(integer xStart, integer yStart, integer width, integer height)
    
    /*
    This action draws an ellipse outline on the screen.
    
    Attribute: Parameter x specifies the center x coordinate of the ellipse.
    
    Attribute: Parameter y specifies the center y coordinate of the ellipse.
    
    Attribute: Parameter width specifies how wide the rectangle should be, in pixels. The visible screen pixels for width range from 0 to 177.
    
    Attribute: Parameter height specifies how tall the rectangle should be, in pixels. The visible screen pixels for height range from 0 to 127.

    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    Utility utility
    Button button

    screen:DrawEllipseOutline(89, 64, 20, 10) //ellipse's center is at 89, 64 with a width of 20 and height of 10
    utility:DelayMilliseconds(500)
    screen:DrawEllipseOutline(89, 64, 30, 15)
    utility:DelayMilliseconds(500)
    screen:DrawEllipseOutline(89, 64, 40, 20)
    button:WaitForButtonPress()
    */
    
    system action DrawEllipseOutline(integer x, integer y, integer width, integer height)
    
    /*
    This action erases pixels in the shape of an ellipse outline from the screen.
    
    Attribute: Parameter x specifies the center x coordinate of the ellipse.
    
    Attribute: Parameter y specifies the center y coordinate of the ellipse.
    
    Attribute: Parameter width specifies how wide the rectangle should be, in pixels. The visible screen pixels for width range from 0 to 177.
    
    Attribute: Parameter height specifies how tall the rectangle should be, in pixels. The visible screen pixels for height range from 0 to 127.
    
    Attribute: Author Evan Pierzina
    
    Attribute: ExampleScreen screen
    Utility utility
    Button button

    screen:DrawEllipseOutline(89, 64, 40, 20) //center of the ellipse is 89, 64 with a width of 40 and height of 20
    utility:DelayMilliseconds(500)
    screen:DrawEllipseOutline(89, 64, 60, 30)
    utility:DelayMilliseconds(500)
    screen:DrawEllipseOutline(89, 64, 80, 40)
    button:WaitForButtonPress()
    */
    
    system action EraseEllipseOutline(integer x, integer y, integer width, integer height)
    
    /*
    This action draws a filled ellipse on the screen.
    
    Attribute: Parameter x specifies the center x coordinate of the ellipse.
    
    Attribute: Parameter y specifies the center y coordinate of the ellipse.
    
    Attribute: Parameter width specifies how wide the rectangle should be, in pixels. The visible screen pixels for width range from 0 to 177.
    
    Attribute: Parameter height specifies how tall the rectangle should be, in pixels. The visible screen pixels for height range from 0 to 127.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Button button
    Screen screen

    screen:DrawEllipseFull(50, 80, 20, 20)      //draw left eye
    screen:DrawEllipseFull(126, 80, 20, 20)     //draw right eye

    repeat while true
    screen:EraseEllipseFull(50, 115, 20, 10)    //erase previous left eyebrow
    screen:EraseEllipseFull(126, 115, 20, 10)   //erase previous right eyebrow
    screen:EraseEllipseFull(88, 35, 96, 30)     //erase previous mouth
    screen:DrawEllipseFull(50, 105, 20, 10)     //draw new left eyebrow
    screen:DrawEllipseFull(126, 105, 20, 10)    //draw new right eyebrow
    screen:DrawEllipseFull(88, 35, 96, 10)      //draw new mouth
    button:WaitForButtonPress()                 //toggle the face

    screen:EraseEllipseFull(50, 105, 20, 10)    //erase previous left eyebrow
    screen:EraseEllipseFull(126, 105, 20, 10)   //erase previous right eyebrow
    screen:EraseEllipseFull(88, 35, 96, 10)     //erase previous mouth
    screen:DrawEllipseFull(50, 115, 20, 10)     //draw new left eyebrow
    screen:DrawEllipseFull(126, 115, 20, 10)    //draw new right eyebrow
    screen:DrawEllipseFull(88, 35, 96, 30)      //draw new mouth
    button:WaitForButtonPress()                 //toggle the face
    end
    */
    
    system action DrawEllipseFull(integer x, integer y, integer width, integer height)
    
    /*
    This action erases a pixels in the shape of a filled ellipse from the screen.
    
    Attribute: Parameter x specifies the center x coordinate of the ellipse.
    
    Attribute: Parameter y specifies the center y coordinate of the ellipse.
    
    Attribute: Parameter width specifies how wide the rectangle should be, in pixels. The visible screen pixels for width range from 0 to 177.
    
    Attribute: Parameter height specifies how tall the rectangle should be, in pixels. The visible screen pixels for height range from 0 to 127.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Button button
    Screen screen
    
    screen:DrawRectangleFull(0, 0, 177, 127)    //make the screen black
    screen:EraseEllipseFull(50, 80, 20, 20)     //erase a left eye from the screen
    screen:EraseEllipseFull(126, 80, 20, 20)    //erase a right eye from the screen

    repeat while true
    screen:DrawEllipseFull(50, 115, 20, 10)     //fill in previous left eyebrow
    screen:DrawEllipseFull(126, 115, 20, 10)    //fill in previous right eyebrow
    screen:DrawEllipseFull(88, 35, 96, 30)      //fill in previous mouth
    screen:EraseEllipseFull(50, 105, 20, 10)    //erase a new left eyebrow from the screen
    screen:EraseEllipseFull(126, 105, 20, 10)   //erase a new right eyebrow from the screen
    screen:EraseEllipseFull(88, 35, 96, 10)     //erase a new mouth from the screen
    button:WaitForButtonPress()                 //toggle the face

    screen:DrawEllipseFull(50, 105, 20, 10)     //fill in previous left eyebrow
    screen:DrawEllipseFull(126, 105, 20, 10)    //fill in previous right eyebrow
    screen:DrawEllipseFull(88, 35, 96, 10)      //fill in previous mouth
    screen:EraseEllipseFull(50, 115, 20, 10)    //erase a new left eyebrow from the screen
    screen:EraseEllipseFull(126, 115, 20, 10)   //erase a new right eyebrow from the screen
    screen:EraseEllipseFull(88, 35, 96, 30)     //erase a new mouth from the screen
    button:WaitForButtonPress()                 //toggle the face
    end
    */
    
    system action EraseEllipseFull(integer x, integer y, integer width, integer height)
    
    /*
    This action draws a circle outline on the screen.
    
    Attribute: Parameter x specifies the center x coordinate of the circle.
    
    Attribute: Parameter y specifies the center y coordinate of the circle.
    
    Attribute: Parameter radius specifies how many pixels outward from the center the circle should be drawn.
    For example, a radius of 10 will draw the circle outline 10 pixels outward from the center in every direction.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    Utility utility
    Button button

    screen:DrawCircleOutline(89, 64, 20) //circle's center is at 89, 64 with a radius of 20
    utility:DelayMilliseconds(500)
    screen:DrawCircleOutline(89, 64, 30)
    utility:DelayMilliseconds(500)
    screen:DrawCircleOutline(89, 64, 40)
    button:WaitForButtonPress()
    */
    
    system action DrawCircleOutline(integer x, integer y, integer radius)
    
    /*
    This action erases pixels in the shape of a circle outline from the screen.
    
    Attribute: Parameter x specifies the center x coordinate of the circle.
    
    Attribute: Parameter y specifies the center y coordinate of the circle.
    
    Attribute: Parameter radius specifies how many pixels outward from the center of the circle that should be erased.
    For example, a radius of 10 will erase the circle outline 10 pixels outward from the center in every direction.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Screen screen
    Utility utility
    Button button
    
    screen:DrawRectangleFull(0, 0, 177, 127)    //makes the screen black
    screen:EraseCircleOutline(89, 64, 20)       //circle's center is at 89, 64 with a radius of 20
    utility:DelayMilliseconds(500)
    screen:EraseCircleOutline(89, 64, 30)
    utility:DelayMilliseconds(500)
    screen:EraseCircleOutline(89, 64, 40)
    button:WaitForButtonPress()
    
    */
    
    system action EraseCircleOutline(integer x, integer y, integer radius)
    
    /*
    This action draws a full circle on the screen.
    
    Attribute: Parameter x specifies the center x coordinate of the circle.
    
    Attribute: Parameter y specifies the center y coordinate of the circle.
    
    Attribute: Parameter radius specifies how many pixels outward from the center the circle should be drawn.
    For example, a radius of 10 will draw 10 pixels outward from the center in every direction.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Button button
    Screen screen

    screen:DrawCircleFull(50, 80, 20)      //draw left eye
    screen:DrawCircleFull(126, 80, 20)     //draw right eye

    repeat while true
    screen:EraseEllipseFull(50, 120, 20, 10)    //erase previous left eyebrow
    screen:EraseEllipseFull(126, 120, 20, 10)   //erase previous right eyebrow
    screen:EraseCircleFull(86, 40, 25)          //erase previous mouth
    screen:DrawEllipseFull(50, 110, 20, 10)     //draw new left eyebrow
    screen:DrawEllipseFull(126, 110, 20, 10)    //draw new right eyebrow
    screen:DrawCircleFull(86, 40, 15)           //draw new mouth
    button:WaitForButtonPress()                 //toggle the face

    screen:EraseEllipseFull(50, 110, 20, 10)    //erase previous left eyebrow
    screen:EraseEllipseFull(126, 110, 20, 10)   //erase previous right eyebrow
    screen:EraseCircleFull(86, 40, 15)          //erase previous mouth
    screen:DrawEllipseFull(50, 120, 20, 10)     //draw new left eyebrow
    screen:DrawEllipseFull(126, 120, 20, 10)    //draw new right eyebrow
    screen:DrawCircleFull(86, 40, 25)           //draw new mouth
    button:WaitForButtonPress()                 //toggle the face
    end
    */
    
    system action DrawCircleFull(integer x, integer y, integer radius)
    
    /*
    This action erases pixels in the shape of a full circle from the screen.
    
    Attribute: Parameter x specifies the center x coordinate of the circle.
    
    Attribute: Parameter y specifies the center y coordinate of the circle.
    
    Attribute: Parameter radius specifies how many pixels outward from the center the circle should be erased.
    For example, a radius of 10 will erase 10 pixels outward from the center in every direction.
    
    Attribute: Author Evan Pierzina
    
    Attribute: Example
    Button button
    Screen screen
    
    screen:DrawRectangleFull(0, 0, 177, 127)    //make the screen black
    screen:EraseCircleFull(50, 80, 20)          //erase a left eye from screen
    screen:EraseCircleFull(126, 80, 20)         //erase a right eye from screen

    repeat while true
    screen:DrawEllipseFull(50, 120, 20, 10)     //fill in previous left eyebrow
    screen:DrawEllipseFull(126, 120, 20, 10)    //fill in previous right eyebrow
    screen:DrawCircleFull(86, 40, 25)           //fill in previous mouth
    screen:EraseEllipseFull(50, 110, 20, 10)    //erase new left eyebrow from screen
    screen:EraseEllipseFull(126, 110, 20, 10)   //erase new right eyebrow from screen
    screen:EraseCircleFull(86, 40, 15)          //erase new mouth from screen
    button:WaitForButtonPress()                 //toggle the face

    screen:DrawEllipseFull(50, 110, 20, 10)     //fill in previous left eyebrow
    screen:DrawEllipseFull(126, 110, 20, 10)    //fill in previous right eyebrow
    screen:DrawCircleFull(86, 40, 15)           //fill in previous mouth
    screen:EraseEllipseFull(50, 120, 20, 10)    //erase new left eyebrow from screen
    screen:EraseEllipseFull(126, 120, 20, 10)   //erase new right eyebrow from screen
    screen:EraseCircleFull(86, 40, 25)          //erase new mouth from screen
    button:WaitForButtonPress()                 //toggle the face
    end
    */
    
    system action EraseCircleFull(integer x, integer y, integer radius)
end