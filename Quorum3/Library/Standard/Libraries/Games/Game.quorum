/*
    The foundation of any game. Any user created game should inherit from this
    and must implement CreateGame and Update.
*/

package Libraries.Games

use Libraries.Games.Graphics.Painter
use Libraries.Games.Graphics.Font
use Libraries.Games.Graphics.GraphicsManager
use Libraries.Games.Graphics.Color
use Libraries.Games.Graphics.Drawable
use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator
use Libraries.System.File
use Libraries.System.Properties
use Libraries.Games.Interface.Panel
use Libraries.Games.Interface.Events.KeyboardProcessor
use Libraries.Games.Interface.Events.KeyboardListener
use Libraries.Games.Interface.Events.MouseProcessor
use Libraries.Games.Interface.Events.MouseListener
use Libraries.Games.Interface.Events.MouseEvent
use Libraries.Games.Interface.Item
use Libraries.Games.Collision

class Game

    public Painter batch = undefined
    ApplicationConfiguration configuration
    GraphicsManager gl20

    public boolean exitRequested = false

    // Variables used for Panels and the event system.
    private Panel activePanel = undefined
    private KeyboardProcessor keyboardProcessor
    private MouseProcessor mouseProcessor
    private List<Item> collisionList
    private List<Collision> currentCollisions

    on create
        Color color
        color = color:Black()

        configuration:title = "Game"
        configuration:width = 800
        configuration:height = 600

        configuration:initialBackgroundColor = color

        Properties properties
        text os = properties:GetOperatingSystemName()
        
        text path = ""
        File file
        //other operating systems might need other pathing information
        /*if os:Contains("Mac OS X")
            file:SetPath("native/macosx")

        elseif os:Contains("Windows")
            file:SetPath("native/windows")

        else
            alert("System was not Mac or Windows!")
        end*/

        file:SetPath("Run/jni")
        
        path = file:GetAbsolutePath()

        properties:SetProperty("org.lwjgl.librarypath", path)

        // Setting the path to load the native C files, reusing the file and
        // path variables.
        path = ""
        if os:Contains("Mac OS X")
            file:SetPath("Run/jni/libGameEngineCPlugins.so")
        elseif os:Contains("Windows")
            file:SetPath("Run/jni/libGameEngineCPlugins64.dll")
        end

        
        path = file:GetAbsolutePath()
        
        GameStateManager manager
        manager:SetNativePath(path)
        manager:SetOperatingSystem(os)

        Panel panel
        SetActivePanel(panel)
    end

    action StartGame
    
        GameStateManager manager

        GameDisplay display
        manager:SetGameDisplay(display)
        
        display:SetConfig(configuration)
        display:SetupDisplay()

        Application application
        application:Setup(me, configuration, display)

    end

    action Add(Item item)
        activePanel:Add(item)
    end

    action Remove(Item item)
        activePanel:Remove(item)
    end

    action DrawAll

        batch:Begin()

        activePanel:Draw(batch, 0, 0)

        batch:End()

    end

    action ClearScreen
        gl20:ClearScreenColor(0.75,0.75,0.75,0)
        gl20:ClearScreen(16384)
    end

    action ContinueGame
        ProcessInputEvents()
        TestForCollisions()
        UpdateAll()
        Update(GetSecondsBetweenFrames())
        ClearScreen()
        DrawAll()
    end

    action SetConfiguration(ApplicationConfiguration config)
        configuration = config
    end

    action GetConfiguration returns ApplicationConfiguration
        return configuration
    end

    action GetScreenWidth returns integer
        return configuration:width
    end

    action GetScreenHeight returns integer
        return configuration:height
    end

    action SetColorFilter(number r, number g, number b, number a)
        batch:SetColor(r, g, b, a)
    end

    action SetColorFilter(Color newColor)
        batch:SetColor(newColor)
    end

    system action GetSecondsBetweenFrames returns number

    blueprint action Update(number time)

    action Create
        CreateGame()
    end

    blueprint action CreateGame

    action Exit
        exitRequested = true
    end

    action GetActivePanel returns Panel
        return activePanel
    end

    action SetActivePanel(Panel panel)
        if activePanel not= undefined
            activePanel:keyboardProcessor = undefined
            activePanel:mouseProcessor = undefined
        end
        panel:keyboardProcessor = keyboardProcessor
        panel:mouseProcessor = mouseProcessor
        panel:SetPosition(0,0)
        panel:SetWidth(GetScreenWidth())
        panel:SetHeight(GetScreenHeight())
        activePanel = panel
    end

    action UpdateAll
        activePanel:UpdateAll(GetSecondsBetweenFrames())
    end

    action ProcessInputEvents
        List<MouseEvent> mouseEvents = mouseProcessor:GetCurrentEvents()
        MouseEvent mouseEvent = undefined
        repeat mouseEvents:GetSize() times
            mouseEvent = mouseEvents:RemoveFromFront()
            activePanel:ProcessMouseEvent(mouseEvent)
        end

        keyboardProcessor:Update()
        keyboardProcessor:ProcessEvents()
    end

    action AddMouseListener(MouseListener listener)
        activePanel:AddMouseListener(listener)
    end

    action AddKeyboardListener(KeyboardListener listener)
        keyboardProcessor:AddListener(listener)
    end

    action RemoveMouseListener(MouseListener listener)
        activePanel:RemoveMouseListener(listener)
    end

    action RemoveKeyboardListener(KeyboardListener listener)
        keyboardProcessor:RemoveListener(listener)
    end

    action SetScreenSize(integer width, integer height)
        configuration:width = width
        configuration:height = height
    end

    action SetVSync(boolean vSync)
        configuration:vSyncEnabled = vSync
    end

    action EnableResizing(boolean resize)
        configuration:resizable = resize
    end

    action SetGameName(text name)
        configuration:title = name
    end

    action EnableTextureAutoResizing(boolean resize)
        configuration:autoResizeTextures = resize
    end

    action AddCollisionListener(Item item)
        collisionList:Add(item)
    end

    action RemoveCollisionListener(Item item)
        collisionList:Remove(item)
    end

    action TestForCollisions
        integer counter1 = 0
        integer counter2 = 1
        Item item1 = undefined
        Item item2 = undefined

        repeat collisionList:GetSize() times
            item1 = collisionList:Get(counter1)
            number x1 = item1:GetX()
            number x2 = item1:GetX() + item1:GetWidth()
            number y1 = item1:GetY()
            number y2 = item1:GetY() + item1:GetHeight()
            counter2 = counter1 + 1
            repeat while counter2 < collisionList:GetSize()
                item2 = collisionList:Get(counter2)
                if x1 < item2:GetX() + item2:GetWidth() and x2 > item2:GetX() and y1 < item2:GetY() + item2:GetHeight() and y2 > item2:GetY()
                    integer collisionCounter = 0
                    boolean found = false
                    Collision temp = undefined
                    repeat while collisionCounter < currentCollisions:GetSize() and found = false
                        temp = currentCollisions:Get(collisionCounter)
                        if temp:Contains(item1) and temp:Contains(item2)
                            found = true
                        end
                    end

                    if found = false
                        Collision newCollision
                        newCollision:SetCollision(item1, item2)
                        currentCollisions:Add(newCollision)
                        newCollision:BeginCollision()
                    end
                else
                    integer collisionCounter = 0
                    boolean found = false
                    Collision temp = undefined
                    repeat while collisionCounter < currentCollisions:GetSize() and found = false
                        temp = currentCollisions:Get(collisionCounter)
                        if temp:Contains(item1) and temp:Contains(item2)
                            found = true
                        end
                    end

                    if found = true
                        currentCollisions:Remove(temp)
                        temp:FinishCollision()
                    end
                end
                
                counter2 = counter2 + 1
            end

            counter1 = counter1 + 1
        end
    end

end