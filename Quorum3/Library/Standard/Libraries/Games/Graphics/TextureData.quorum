// The TextureData class is primarily composed of blueprints. Classes which
// implement it will store pixel information and its data type, allowing for
// PixelMaps to be consumed.

package Libraries.Games.Graphics

class TextureData 
    
    /*

        public enum TextureDataType {
		Pixmap, Custom
	}

    */

        // This action replaces the "GetDataType" function from libGDX's
        // graphics system, as the only types possible are Pixmap or Custom.
        blueprint action IsCustomData returns boolean

	// Returns whether or not the TextureData has been prepared.
        blueprint action IsPrepared returns boolean

	// Prepares the TextureData for a call to ConsumePixelMap().
        // This method can be called from a non OpenGL thread and should thus
        // not interact with OpenGL.
        blueprint action Prepare

	// Returns the PixelMap for upload by Texture. A call to Prepare must 
        // precede a call to this method. Any internal data structures created
        // in Prepare()} should be disposed of here.
        blueprint action ConsumePixelMap returns PixelMap

	// Returns whether or not the caller of ConsumePixelMap should also
        // dispose of it.
        blueprint action DisposePixelMap returns boolean

	/** Uploads the pixel data to the OpenGL ES texture. The caller must bind an OpenGL ES texture. A call to {@link #prepare()}
	 * must preceed a call to this method. Any internal data structures created in {@link #prepare()} should be disposed of here.
         
        This feature is not needed for initial implementation.

        blueprint action ConsumeCustomeData(integer target)
        */

	/** @return the width of the pixel data */
        blueprint action GetWidth returns integer

	/** @return the height of the pixel data */
        blueprint action GetHeight returns integer

	/** @return the {@link Format} of the pixel data */
        blueprint action GetFormat returns Format

	/** @return whether to generate mipmaps or not. */
        blueprint action UseMipMaps returns boolean

	/** @return whether this implementation can cope with a EGL context loss. */
        blueprint action IsManaged returns boolean

	/** Provides static method to instantiate the right implementation (Pixmap, ETC1, KTX).
	 * @author Vincent Bousquet
         // Because Quorum does not have static functions, and there are few
         // places this would be used, this will instead be implemented in the
         // classes that need to make a TextureData of an appropriate type.
	public static class Factory {

		public static TextureData loadFromFile (FileHandle file, boolean useMipMaps) {
			return loadFromFile(file, null, useMipMaps);
		}

		public static TextureData loadFromFile (FileHandle file, Format format, boolean useMipMaps) {
			if (file == null) return null;
			if (file.name().endsWith(".cim")) return new FileTextureData(file, PixmapIO.readCIM(file), format, useMipMaps);
			if (file.name().endsWith(".etc1")) return new ETC1TextureData(file, useMipMaps);
			if (file.name().endsWith(".ktx") || file.name().endsWith(".zktx")) return new KTXTextureData(file, useMipMaps);
			return new FileTextureData(file, new Pixmap(file), format, useMipMaps);
		}

    */

end