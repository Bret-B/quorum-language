package Libraries.Games.Interface

use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator
use Libraries.Games.Interface.Events.KeyboardEventProcessor
use Libraries.Games.Interface.Events.KeyboardEventListener
use Libraries.Games.Interface.Events.MouseEventProcessor
use Libraries.Games.Interface.Events.MouseEventListener
use Libraries.Games.Interface.Events.MouseEvent
use Libraries.Games.Graphics.SpriteBatch
use Libraries.Games.Graphics.Drawable
use Libraries.Games.Graphics.DrawableGroup
use Libraries.Games.Graphics.Font

class Panel is Item
    
    // A list of every item registered with the panel.
    List<Item> items

    /* A list of items which are Drawable, DrawableGroup, or Panel. Maintaining
    a separate list ensures only items which require drawing are considered
    during screen drawing. */
    List<Item> drawables

    boolean positionAdjusted = true

    KeyboardEventProcessor keyboardProcessor = undefined
    MouseEventProcessor mouseProcessor = undefined

    action Add(Item item)
        items:Add(item)
        if item is Drawable or item is DrawableGroup or item is Panel
            drawables:Add(item)
        end
    end

    action AddKeyboardListener(KeyboardEventListener listener)
        keyboardProcessor:AddListener(listener)
    end

    action Remove(Item item)
        items:Remove(item)
        if item is Drawable or item is DrawableGroup or item is Panel
            drawables:Remove(item)
        end
    end

    action RemoveKeyboardListener(KeyboardEventListener listener)
        keyboardProcessor:RemoveListener(listener)
    end

    /*  This will be called from Game on each active panel. Note that before this
        is called, SpriteBatch:Begin() must be called! After all active panels
        have drawn, the calling class must finish by calling SpriteBatch:End(). */
    action Draw(SpriteBatch batch, number globalOffsetX, number globalOffsetY)
        Iterator<Item> drawIterator = drawables:GetIterator()
        
        number offsetX = GetX() + globalOffsetX
        number offsetY = GetY() + globalOffsetY

        Item temp = undefined
        Drawable tempDraw = undefined
        DrawableGroup tempGroup = undefined
        Iterator<Drawable> tempIterator = undefined

        repeat while drawIterator:HasNext()
            temp = drawIterator:Next()
            if temp is Drawable
                batch:Draw(cast(Drawable, temp), offsetX, offsetY, positionAdjusted)
            end
            if temp is DrawableGroup
                tempGroup = cast(DrawableGroup, temp)
                tempIterator = tempGroup:GetDrawables():GetIterator()
                repeat while tempIterator:HasNext()
                    batch:Draw(tempIterator:Next(), offsetX, offsetY, positionAdjusted)
                end
            end
            if temp is Panel
                Panel tPanel = cast(Panel, temp)
                tPanel:Draw(batch, offsetX, offsetY)
            end
        end

    end

    action UpdateAll(number secondsSinceUpdate)
        Iterator<Item> itemIterator = items:GetIterator()
        Item temp = undefined

        repeat while itemIterator:HasNext()
            temp = itemIterator:Next()
            temp:Update(secondsSinceUpdate)
        end
    end

    action ProcessMouseEvent(MouseEvent event)
        Item temp = ItemAtPoint(event:GetX(), event:GetY())
        if temp not= undefined
            temp:ProcessMouseEvent(event)
        end
        if event:WasEventHandled() = false
            parent:Item:ProcessMouseEvent(event)
        end
    end

    action ItemAtPoint(number x, number y) returns Item
        integer index = items:GetSize() - 1
        Item temp = undefined

        repeat items:GetSize() times
            temp = items:Get(index)
            if temp:GetX() <= x and temp:GetX() + temp:GetWidth() >= x and temp:GetY() <= y and temp:GetY() + temp:GetHeight() >= y
                return temp
            end
            index = index - 1
        end
        return undefined
    end

end