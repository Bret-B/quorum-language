package Libraries.Compute

use Libraries.Containers.Array
use Libraries.Compute.Math
use Libraries.Compute.Matrix3
use Libraries.Compute.Vector2
use Libraries.Compute.Vector3
use Libraries.Compute.Affine2
use Libraries.Compute.Quaternion
use Libraries.Language.Errors.MatrixError

class Matrix4   
    public number row0column0 = 1
    public number row0column1 = 0
    public number row0column2 = 0
    public number row0column3 = 0
    public number row1column0 = 0
    public number row1column1 = 1
    public number row1column2 = 0
    public number row1column3 = 0
    public number row2column0 = 0
    public number row2column1 = 0
    public number row2column2 = 1
    public number row2column3 = 0
    public number row3column0 = 0
    public number row3column1 = 0
    public number row3column2 = 0
    public number row3column3 = 1

    Math math

   action Set(Matrix4 matrix) returns Matrix4
        row0column0 = matrix:row0column0
        row0column1 = matrix:row0column1
        row0column2 = matrix:row0column2
        row0column3 = matrix:row0column3
        row1column0 = matrix:row1column0
        row1column1 = matrix:row1column1
        row1column2 = matrix:row1column2
        row1column2 = matrix:row1column3
        row2column0 = matrix:row2column0
        row2column1 = matrix:row2column1
        row2column2 = matrix:row2column2
        row2column3 = matrix:row2column3
        row3column0 = matrix:row3column0
        row3column1 = matrix:row3column1
        row3column2 = matrix:row3column2
        row3column3 = matrix:row3column3

        return me
    end

    action Set (Array<number> array) returns Matrix4
        if array:GetSize() not= 16
            MatrixError matrix
            matrix:SetErrorMessage("The array must have exactly 16 values to be converted to a Matrix4 object.")
            alert(matrix)
        end

        row0column0 = array:Get(0)
        row0column1 = array:Get(1)
        row0column2 = array:Get(2)
        row0column3 = array:Get(3)
        row1column0 = array:Get(4)
        row1column1 = array:Get(5)
        row1column2 = array:Get(6)
        row1column3 = array:Get(7)
        row2column0 = array:Get(8)
        row2column1 = array:Get(9)
        row2column2 = array:Get(10)
        row2column3 = array:Get(11)
        row3column0 = array:Get(12)
        row3column1 = array:Get(13)
        row3column2 = array:Get(14)
        row3column3 = array:Get(15)
        return me
    end

    action Set(Quaternion quaternion) returns Matrix4
        return Set(quaternion:GetX(), quaternion:GetY(), quaternion:GetZ(), quaternion:GetW())
    end

    action Set(number quaternionX, number quaternionY, number quaternionZ, number quaternionW) returns Matrix4    
        return Set(0.0, 0.0, 0.0, quaternionX, quaternionY, quaternionZ, quaternionW)
    end

    action Set(Vector3 position, Quaternion orientation) returns Matrix4
        return Set(position:GetX(), position:GetY(), position:GetZ(), orientation:GetX(), orientation:GetY(), orientation:GetZ(), orientation:GetW())
    end

    action Set(number translationX, number translationY, number translationZ, number quaternionX, number quaternionY, number quaternionZ, number quaternionW) returns Matrix4        constant number xs = quaternionX * 2.0
        constant number ys = quaternionY * 2.0
        constant number zs = quaternionZ * 2.0
        constant number wx = quaternionW * xs
        constant number wy = quaternionW * ys
        constant number wz = quaternionW * zs
        constant number xx = quaternionX * xs
        constant number xy = quaternionX * ys
        constant number xz = quaternionX * zs
        constant number yy = quaternionY * ys
        constant number yz = quaternionY * zs
        constant number zz = quaternionZ * zs

        row0column0 = (1.0 - (yy + zz))
        row0column1 = (xy - wz)
        row0column2 = (xz + wy)
        row0column3 = translationX

        row1column0 = (xy + wz)
        row1column1 = (1.0 - (xx + zz))
        row1column2 = (yz - wx)
        row1column3 = translationY

        row2column0 = (xz - wy)
        row2column1 = (yz + wx)
        row2column2 = (1.0 - (xx + yy))
        row2column3 = translationZ

        row3column0 = 0.0
        row3column1 = 0.0
        row3column2 = 0.0
        row3column3 = 1.0

        return me
    end

    action Set(Vector3 position, Quaternion orientation, Vector3 scale) returns Matrix4
        return Set(position:GetX(), position:GetY(), position:GetZ(), orientation:GetX(), orientation:GetY(), orientation:GetZ(), orientation:GetW(), scale:GetX(), scale:GetY(), scale:GetZ())
    end

    action Set(number translationX, number translationY, number translationZ, number quaternionX, number quaternionY,
               number quaternionZ, number quaternionW, number scaleX, number scaleY, number scaleZ) returns Matrix4
        constant number xs = quaternionX * 2.0
        constant number ys = quaternionY * 2.0
        constant number zs = quaternionZ * 2.0
        constant number wx = quaternionW * xs 
        constant number wy = quaternionW * ys
        constant number wz = quaternionW * zs
        constant number xx = quaternionX * xs
        constant number xy = quaternionX * ys
        constant number xz = quaternionX * zs
        constant number yy = quaternionY * ys
        constant number yz = quaternionY * zs
        constant number zz = quaternionZ * zs
        
        row0column0 = scaleX * (1.0 - (yy + zz))
        row0column1 = scaleY * (xy - wz)
        row0column2 = scaleZ * (xz + wy)
        row0column3 = translationX

        row1column0 = scaleX * (xy + wz)
        row1column1 = scaleY * (1.0 - (xx + zz))
        row1column2 = scaleZ * (yz - wx)
        row1column3 = translationY

        row2column0 = scaleX * (xz - wy)
        row2column1 = scaleY * (yz + wx)
        row2column2 = scaleZ * (1.0 - (xx + yy))
        row2column3 = translationZ

        row3column0 = 0.0
        row3column1 = 0.0
        row3column2 = 0.0
        row3column3 = 1.00

        return me
    end

    action Set(Vector3 xAxis, Vector3 yAxis, Vector3 zAxis, Vector3 position) returns Matrix4
        row0column0 = xAxis:GetX()
        row0column1 = xAxis:GetY()
        row0column2 = xAxis:GetZ()
        row0column2 = position:GetX()

        row1column0 = yAxis:GetX()
        row1column1 = yAxis:GetY()
        row1column2 = yAxis:GetZ()
        row1column3 = position:GetY()

        row2column0 = zAxis:GetX()
        row2column1 = zAxis:GetY()
        row2column2 = zAxis:GetZ()
        row2column3 = position:GetZ()

        row3column0 = 0
        row3column1 = 0
        row3column2 = 0
        row3column3 = 1

        return me
    end

    action Copy returns Matrix4
        Matrix4 ret
        return ret:Set(me)   
    end

    action Translate(Vector3 vector) returns Matrix4
        row0column3 = row0column3 + vector:GetX()
        row1column3 = row1column3 + vector:GetY()
        row2column3 = row2column3 + vector:GetZ()

        return me
    end

    action Translate(number x, number y, number z) returns Matrix4        
        row0column3 = row0column3 + x
        row1column3 = row1column3 + y
        row2column3 = row2column3 + z

        return me
    end

    action Multiply(Matrix4 matrix) returns Matrix4
        return Multiply(me, matrix)
    end

    action Multiply(Matrix4 matrixA, Matrix4 matrixB) returns Matrix4
        number v00 = matrixA:row0column0 * matrixB:row0column0 + matrixA:row0column1 * matrixB:row1column0 + matrixA:row0column2 * matrixB:row2column0 + matrixA:row0column3 * matrixB:row3column0
        number v01 = matrixA:row0column0 * matrixB:row0column1 + matrixA:row0column1 * matrixB:row1column1 + matrixA:row0column2 * matrixB:row2column1 + matrixA:row0column3 * matrixB:row3column1
        number v02 = matrixA:row0column0 * matrixB:row0column2 + matrixA:row0column1 * matrixB:row1column2 + matrixA:row0column2 * matrixB:row2column2 + matrixA:row0column3 * matrixB:row3column2
        number v03 = matrixA:row0column0 * matrixB:row0column3 + matrixA:row0column1 * matrixB:row1column3 + matrixA:row0column2 * matrixB:row2column3 + matrixA:row0column3 * matrixB:row3column3

        number v10 = matrixA:row1column0 * matrixB:row0column0 + matrixA:row1column1 * matrixB:row1column0 + matrixA:row1column2 * matrixB:row2column0 + matrixA:row1column3 * matrixB:row3column0
        number v11 = matrixA:row1column0 * matrixB:row0column1 + matrixA:row1column1 * matrixB:row1column1 + matrixA:row1column2 * matrixB:row2column1 + matrixA:row1column3 * matrixB:row3column1
        number v12 = matrixA:row1column0 * matrixB:row0column2 + matrixA:row1column1 * matrixB:row1column2 + matrixA:row1column2 * matrixB:row2column2 + matrixA:row1column3 * matrixB:row3column2
        number v13 = matrixA:row1column0 * matrixB:row0column3 + matrixA:row1column1 * matrixB:row1column3 + matrixA:row1column2 * matrixB:row2column3 + matrixA:row1column3 * matrixB:row3column3

        number v20 = matrixA:row2column0 * matrixB:row0column0 + matrixA:row2column1 * matrixB:row1column0 + matrixA:row2column2 * matrixB:row2column0 + matrixA:row2column3 * matrixB:row3column0
        number v21 = matrixA:row2column0 * matrixB:row0column1 + matrixA:row2column1 * matrixB:row1column1 + matrixA:row2column2 * matrixB:row2column1 + matrixA:row2column3 * matrixB:row3column1
        number v22 = matrixA:row2column0 * matrixB:row0column2 + matrixA:row2column1 * matrixB:row1column2 + matrixA:row2column2 * matrixB:row2column2 + matrixA:row2column3 * matrixB:row3column2
        number v23 = matrixA:row2column0 * matrixB:row0column3 + matrixA:row2column1 * matrixB:row1column3 + matrixA:row2column2 * matrixB:row2column3 + matrixA:row2column3 * matrixB:row3column3

        number v30 = matrixA:row3column0 * matrixB:row0column0 + matrixA:row3column1 * matrixB:row1column0 + matrixA:row3column2 * matrixB:row2column0 + matrixA:row3column3 * matrixB:row3column0
        number v31 = matrixA:row3column0 * matrixB:row0column1 + matrixA:row3column1 * matrixB:row1column1 + matrixA:row3column2 * matrixB:row2column1 + matrixA:row3column3 * matrixB:row3column1
        number v32 = matrixA:row3column0 * matrixB:row0column2 + matrixA:row3column1 * matrixB:row1column2 + matrixA:row3column2 * matrixB:row2column3 + matrixA:row3column3 * matrixB:row3column2
        number v33 = matrixA:row3column0 * matrixB:row0column3 + matrixA:row3column2 * matrixB:row1column3 + matrixA:row3column2 * matrixB:row2column3 + matrixA:row3column3 * matrixB:row3column3

        row0column0 = v00
        row0column1 = v01
        row0column2 = v02
        row0column3 = v03
        row1column0 = v10
        row1column1 = v11
        row1column2 = v12
        row1column3 = v13
        row2column0 = v20
        row2column1 = v21
        row2column2 = v22
        row2column3 = v23
        row3column0 = v30
        row3column1 = v31
        row3column2 = v32
        row3column3 = v33

        return me
    end

    action Transpose returns Matrix4

        temporary:Set(M00, values:Get(M00))
        temporary:Set(M01, values:Get(M10))
        temporary:Set(M02, values:Get(M20))
        temporary:Set(M03, values:Get(M30))
        temporary:Set(M10, values:Get(M01))
        temporary:Set(M11, values:Get(M11))
        temporary:Set(M12, values:Get(M21))
        temporary:Set(M13, values:Get(M31))
        temporary:Set(M20, values:Get(M02))
        temporary:Set(M21, values:Get(M12))
        temporary:Set(M22, values:Get(M22))
        temporary:Set(M23, values:Get(M32))
        temporary:Set(M30, values:Get(M03))
        temporary:Set(M31, values:Get(M13))
        temporary:Set(M32, values:Get(M23))
        temporary:Set(M33, values:Get(M33))
        
        return Set(temporary)

    end

    action IdentityMatrix returns Matrix4

        values:Set(M00, 1)
        values:Set(M01, 0)
        values:Set(M02, 0)
        values:Set(M03, 0)
        values:Set(M10, 0)
        values:Set(M11, 1)
        values:Set(M12, 0)
        values:Set(M13, 0)
        values:Set(M20, 0)
        values:Set(M21, 0)
        values:Set(M22, 1)
        values:Set(M23, 0)
        values:Set(M30, 0)
        values:Set(M31, 0)
        values:Set(M32, 0)
        values:Set(M33, 1)

        return me
    end

    action Inverse () returns Matrix4

        number l_det = values:Get(M30) * values:Get(M21) * values:Get(M12) * values:Get(M03) - values:Get(M20) * values:Get(M31) * values:Get(M12) * values:Get(M03) - values:Get(M30) * values:Get(M11)
            * values:Get(M22) * values:Get(M03) + values:Get(M10) * values:Get(M31) * values:Get(M22) * values:Get(M03) + values:Get(M20) * values:Get(M11) * values:Get(M32) * values:Get(M03) - values:Get(M10)
            * values:Get(M21) * values:Get(M32) * values:Get(M03) - values:Get(M30) * values:Get(M21) * values:Get(M02) * values:Get(M13) + values:Get(M20) * values:Get(M31) * values:Get(M02) * values:Get(M13)
            + values:Get(M30) * values:Get(M01) * values:Get(M22) * values:Get(M13) - values:Get(M00) * values:Get(M31) * values:Get(M22) * values:Get(M13) - values:Get(M20) * values:Get(M01) * values:Get(M32)
            * values:Get(M13) + values:Get(M00) * values:Get(M21) * values:Get(M32) * values:Get(M13) + values:Get(M30) * values:Get(M11) * values:Get(M02) * values:Get(M23) - values:Get(M10) * values:Get(M31)
            * values:Get(M02) * values:Get(M23) - values:Get(M30) * values:Get(M01) * values:Get(M12) * values:Get(M23) + values:Get(M00) * values:Get(M31) * values:Get(M12) * values:Get(M23) + values:Get(M10)
            * values:Get(M01) * values:Get(M32) * values:Get(M23) - values:Get(M00) * values:Get(M11) * values:Get(M32) * values:Get(M23) - values:Get(M20) * values:Get(M11) * values:Get(M02) * values:Get(M33)
            + values:Get(M10) * values:Get(M21) * values:Get(M02) * values:Get(M33) + values:Get(M20) * values:Get(M01) * values:Get(M12) * values:Get(M33) - values:Get(M00) * values:Get(M21) * values:Get(M12)
            * values:Get(M33) - values:Get(M10) * values:Get(M01) * values:Get(M22) * values:Get(M33) + values:Get(M00) * values:Get(M11) * values:Get(M22) * values:Get(M33)

        if l_det = 0.0 
	    Error error
	    error:SetErrorMessage("Can't take the inverse of this matrix!")
	    alert(error)
	end
        
        number inv_det = 1.0 / l_det
        temporary:Set(M00, values:Get(M12) * values:Get(M23) * values:Get(M31) - values:Get(M13) * values:Get(M22) * values:Get(M31) + values:Get(M13) * values:Get(M21) * values:Get(M32) - values:Get(M11)
                         * values:Get(M23) * values:Get(M32) - values:Get(M12) * values:Get(M21) * values:Get(M33) + values:Get(M11) * values:Get(M22) * values:Get(M33))
        temporary:Set(M01, values:Get(M03) * values:Get(M22) * values:Get(M31) - values:Get(M02) * values:Get(M23) * values:Get(M31) - values:Get(M03) * values:Get(M21) * values:Get(M32) + values:Get(M01)
                         * values:Get(M23) * values:Get(M32) + values:Get(M02) * values:Get(M21) * values:Get(M33) - values:Get(M01) * values:Get(M22) * values:Get(M33))
        temporary:Set(M02, values:Get(M02) * values:Get(M13) * values:Get(M31) - values:Get(M03) * values:Get(M12) * values:Get(M31) + values:Get(M03) * values:Get(M11) * values:Get(M32) - values:Get(M01)
                         * values:Get(M13) * values:Get(M32) - values:Get(M02) * values:Get(M11) * values:Get(M33) + values:Get(M01) * values:Get(M12) * values:Get(M33))
        temporary:Set(M03, values:Get(M03) * values:Get(M12) * values:Get(M21) - values:Get(M02) * values:Get(M13) * values:Get(M21) - values:Get(M03) * values:Get(M11) * values:Get(M22) + values:Get(M01)
                         * values:Get(M13) * values:Get(M22) + values:Get(M02) * values:Get(M11) * values:Get(M23) - values:Get(M01) * values:Get(M12) * values:Get(M23))
        temporary:Set(M10, values:Get(M13) * values:Get(M22) * values:Get(M30) - values:Get(M12) * values:Get(M23) * values:Get(M30) - values:Get(M13) * values:Get(M20) * values:Get(M32) + values:Get(M10)
                         * values:Get(M23) * values:Get(M32) + values:Get(M12) * values:Get(M20) * values:Get(M33) - values:Get(M10) * values:Get(M22) * values:Get(M33))
        temporary:Set(M11, values:Get(M02) * values:Get(M23) * values:Get(M30) - values:Get(M03) * values:Get(M22) * values:Get(M30) + values:Get(M03) * values:Get(M20) * values:Get(M32) - values:Get(M00)
                         * values:Get(M23) * values:Get(M32) - values:Get(M02) * values:Get(M20) * values:Get(M33) + values:Get(M00) * values:Get(M22) * values:Get(M33))
        temporary:Set(M12, values:Get(M03) * values:Get(M12) * values:Get(M30) - values:Get(M02) * values:Get(M13) * values:Get(M30) - values:Get(M03) * values:Get(M10) * values:Get(M32) + values:Get(M00)
                         * values:Get(M13) * values:Get(M32) + values:Get(M02) * values:Get(M10) * values:Get(M33) - values:Get(M00) * values:Get(M12) * values:Get(M33))
        temporary:Set(M13, values:Get(M02) * values:Get(M13) * values:Get(M20) - values:Get(M03) * values:Get(M12) * values:Get(M20) + values:Get(M03) * values:Get(M10) * values:Get(M22) - values:Get(M00)
                         * values:Get(M13) * values:Get(M22) - values:Get(M02) * values:Get(M10) * values:Get(M23) + values:Get(M00) * values:Get(M12) * values:Get(M23))
        temporary:Set(M20, values:Get(M11) * values:Get(M23) * values:Get(M30) - values:Get(M13) * values:Get(M21) * values:Get(M30) + values:Get(M13) * values:Get(M20) * values:Get(M31) - values:Get(M10)
                         * values:Get(M23) * values:Get(M31) - values:Get(M11) * values:Get(M20) * values:Get(M33) + values:Get(M10) * values:Get(M21) * values:Get(M33))
        temporary:Set(M21, values:Get(M03) * values:Get(M21) * values:Get(M30) - values:Get(M01) * values:Get(M23) * values:Get(M30) - values:Get(M03) * values:Get(M20) * values:Get(M31) + values:Get(M00)
                         * values:Get(M23) * values:Get(M31) + values:Get(M01) * values:Get(M20) * values:Get(M33) - values:Get(M00) * values:Get(M21) * values:Get(M33))
        temporary:Set(M22, values:Get(M01) * values:Get(M13) * values:Get(M30) - values:Get(M03) * values:Get(M11) * values:Get(M30) + values:Get(M03) * values:Get(M10) * values:Get(M31) - values:Get(M00)
                         * values:Get(M13) * values:Get(M31) - values:Get(M01) * values:Get(M10) * values:Get(M33) + values:Get(M00) * values:Get(M11) * values:Get(M33))
        temporary:Set(M23, values:Get(M03) * values:Get(M11) * values:Get(M20) - values:Get(M01) * values:Get(M13) * values:Get(M20) - values:Get(M03) * values:Get(M10) * values:Get(M21) + values:Get(M00)
                         * values:Get(M13) * values:Get(M21) + values:Get(M01) * values:Get(M10) * values:Get(M23) - values:Get(M00) * values:Get(M11) * values:Get(M23))
        temporary:Set(M30, values:Get(M12) * values:Get(M21) * values:Get(M30) - values:Get(M11) * values:Get(M22) * values:Get(M30) - values:Get(M12) * values:Get(M20) * values:Get(M31) + values:Get(M10)
                         * values:Get(M22) * values:Get(M31) + values:Get(M11) * values:Get(M20) * values:Get(M32) - values:Get(M10) * values:Get(M21) * values:Get(M32))
        temporary:Set(M31, values:Get(M01) * values:Get(M22) * values:Get(M30) - values:Get(M02) * values:Get(M21) * values:Get(M30) + values:Get(M02) * values:Get(M20) * values:Get(M31) - values:Get(M00)
                         * values:Get(M22) * values:Get(M31) - values:Get(M01) * values:Get(M20) * values:Get(M32) + values:Get(M00) * values:Get(M21) * values:Get(M32))
        temporary:Set(M32, values:Get(M02) * values:Get(M11) * values:Get(M30) - values:Get(M01) * values:Get(M12) * values:Get(M30) - values:Get(M02) * values:Get(M10) * values:Get(M31) + values:Get(M00)
                         * values:Get(M12) * values:Get(M31) + values:Get(M01) * values:Get(M10) * values:Get(M32) - values:Get(M00) * values:Get(M11) * values:Get(M32))
        temporary:Set(M33, values:Get(M01) * values:Get(M12) * values:Get(M20) - values:Get(M02) * values:Get(M11) * values:Get(M20) + values:Get(M02) * values:Get(M10) * values:Get(M21) - values:Get(M00)
                         * values:Get(M12) * values:Get(M21) - values:Get(M01) * values:Get(M10) * values:Get(M22) + values:Get(M00) * values:Get(M11) * values:Get(M22))

        values:Set(M00, temporary:Get(M00) * inv_det)
        values:Set(M01, temporary:Get(M01) * inv_det)
        values:Set(M02, temporary:Get(M02) * inv_det)
        values:Set(M03, temporary:Get(M03) * inv_det)
        values:Set(M10, temporary:Get(M10) * inv_det)
        values:Set(M11, temporary:Get(M11) * inv_det)
        values:Set(M12, temporary:Get(M12) * inv_det)
        values:Set(M13, temporary:Get(M13) * inv_det)
        values:Set(M20, temporary:Get(M20) * inv_det)
        values:Set(M21, temporary:Get(M21) * inv_det)
        values:Set(M22, temporary:Get(M22) * inv_det)
        values:Set(M23, temporary:Get(M23) * inv_det)
        values:Set(M30, temporary:Get(M30) * inv_det)
        values:Set(M31, temporary:Get(M31) * inv_det)
        values:Set(M32, temporary:Get(M32) * inv_det)
        values:Set(M33, temporary:Get(M33) * inv_det)

        return me
    end

    action Determinant () returns number

        return values:Get(M30) * values:Get(M21) * values:Get(M12) * values:Get(M03) - values:Get(M20) * values:Get(M31) * values:Get(M12) * values:Get(M03) - values:Get(M30) * values:Get(M11)
                    * values:Get(M22) * values:Get(M03) + values:Get(M10) * values:Get(M31) * values:Get(M22) * values:Get(M03) + values:Get(M20) * values:Get(M11) * values:Get(M32) * values:Get(M03) - values:Get(M10)
                    * values:Get(M21) * values:Get(M32) * values:Get(M03) - values:Get(M30) * values:Get(M21) * values:Get(M02) * values:Get(M13) + values:Get(M20) * values:Get(M31) * values:Get(M02) * values:Get(M13)
                    + values:Get(M30) * values:Get(M01) * values:Get(M22) * values:Get(M13) - values:Get(M00) * values:Get(M31) * values:Get(M22) * values:Get(M13) - values:Get(M20) * values:Get(M01) * values:Get(M32)
                    * values:Get(M13) + values:Get(M00) * values:Get(M21) * values:Get(M32) * values:Get(M13) + values:Get(M30) * values:Get(M11) * values:Get(M02) * values:Get(M23) - values:Get(M10) * values:Get(M31)
                    * values:Get(M02) * values:Get(M23) - values:Get(M30) * values:Get(M01) * values:Get(M12) * values:Get(M23) + values:Get(M00) * values:Get(M31) * values:Get(M12) * values:Get(M23) + values:Get(M10)
                    * values:Get(M01) * values:Get(M32) * values:Get(M23) - values:Get(M00) * values:Get(M11) * values:Get(M32) * values:Get(M23) - values:Get(M20) * values:Get(M11) * values:Get(M02) * values:Get(M33)
                    + values:Get(M10) * values:Get(M21) * values:Get(M02) * values:Get(M33) + values:Get(M20) * values:Get(M01) * values:Get(M12) * values:Get(M33) - values:Get(M00) * values:Get(M21) * values:Get(M12)
                    * values:Get(M33) - values:Get(M10) * values:Get(M01) * values:Get(M22) * values:Get(M33) + values:Get(M00) * values:Get(M11) * values:Get(M22) * values:Get(M33)

    end

    action Determinant3x3 () returns number

        return values:Get(M00) * values:Get(M11) * values:Get(M22) + values:Get(M01) * values:Get(M12) * values:Get(M20) + values:Get(M02) * values:Get(M10) * values:Get(M21) - values:Get(M00)
                    * values:Get(M12) * values:Get(M21) - values:Get(M01) * values:Get(M10) * values:Get(M22) - values:Get(M02) * values:Get(M11) * values:Get(M20)

    end

    action SetToProjection (number near, number far, number fovy, number aspectRatio) returns Matrix4

        Identity()
        number l_fd = 1.0 / math:Tangent((fovy * (math:pi / 180)) / 2.0)
        number l_a1 = (far + near) / (near - far)
        number l_a2 = (2 * far * near) / (near - far)
        values:Set(M00, l_fd / aspectRatio)
        values:Set(M10, 0)
        values:Set(M20, 0)
        values:Set(M30, 0)
        values:Set(M01, 0)
        values:Set(M11, l_fd)
        values:Set(M21, 0)
        values:Set(M31, 0)
        values:Set(M02, 0)
        values:Set(M12, 0)
        values:Set(M22, l_a1)
        values:Set(M32, -1)
        values:Set(M03, 0)
        values:Set(M13, 0)
        values:Set(M23, l_a2)
        values:Set(M33, 0)

        return me
    end

    action SetToProjection(number left, number right, number bottom, number top, number near, number far) returns Matrix4
        number x = 2.0 * near / (right - left)
        number y = 2.0 * near / (top - bottom)
        number a = (right + left) / (right - left)
        number b = (top + bottom) / (top - bottom)
        number l_a1 = (far + near) / (near - far)
        number l_a2 = (2 * far * near) / (near - far)
        
        values:Set(M00, x)
        values:Set(M10, 0)
        values:Set(M20, 0)
        values:Set(M30, 0)
        values:Set(M01, 0)
        values:Set(M11, y)
        values:Set(M21, 0)
        values:Set(M31, 0)
        values:Set(M02, a)
        values:Set(M12, b)
        values:Set(M22, l_a1)
        values:Set(M32, -1)
        values:Set(M03, 0)
        values:Set(M13, 0)
        values:Set(M23, l_a2)
        values:Set(M33, 0)

        return me
    end

    action SetToOrthographic2D (number x, number y, number width, number height) returns Matrix4

        SetToOrthographic(x, x + width, y, y + height, 0, 1)
        return me

    end

    action SetToOrthographic2D (number x, number y, number width, number height, number near, number far) returns Matrix4

        SetToOrthographic(x, x + width, y, y + height, near, far)

        return me
    end

    action SetToOrthographic (number left, number right, number bottom, number top, number near, number far) returns Matrix4
    
        Identity()
        number x_orth = 2 / (right - left)
        number y_orth = 2 / (top - bottom)
        number z_orth = -2 / (far - near)

        number tx = -1 * (right + left) / (right - left)
        number ty = -1 * (top + bottom) / (top - bottom)
        number tz = -1 * (far + near) / (far - near)

        values:Set(M00, x_orth)
        values:Set(M10, 0)
        values:Set(M20, 0)
        values:Set(M30, 0)
        values:Set(M01, 0)
        values:Set(M11, y_orth)
        values:Set(M21, 0)
        values:Set(M31, 0)
        values:Set(M02, 0)
        values:Set(M12, 0)
        values:Set(M22, z_orth)
        values:Set(M32, 0)
        values:Set(M03, tx)
        values:Set(M13, ty)
        values:Set(M23, tz)
        values:Set(M33, 1)

        return me
    end

    action SetTranslation (Vector3 vector) returns Matrix4

        values:Set(M03, vector:GetX())
        values:Set(M13, vector:GetY())
        values:Set(M23, vector:GetZ())

        return me
    end

    action SetTranslation (number x, number y, number z) returns Matrix4

        values:Set(M03, x)
        values:Set(M13, y)
        values:Set(M23, z)

        return me
    end

    action SetToTranslation (Vector3 vector) returns Matrix4

        Identity()
        values:Set(M03, vector:GetX())
        values:Set(M13, vector:GetY())
        values:Set(M23, vector:GetZ())

        return me
    end

    action SetToTranslation (number x, number y, number z) returns Matrix4

        Identity()
        values:Set(M03, x)
        values:Set(M13, y)
        values:Set(M23, z)

        return me
    end

    action SetToTranslationAndScaling (Vector3 translation, Vector3 scaling) returns Matrix4

        Identity()
        values:Set(M03, translation:GetX())
        values:Set(M13, translation:GetY())
        values:Set(M23, translation:GetZ())
        values:Set(M00, scaling:GetX())
        values:Set(M11, scaling:GetY())
        values:Set(M22, scaling:GetZ())
        
        return me
    end

    action SetToTranslationAndScaling (number translationX, number translationY, number translationZ, number scalingX, number scalingY, number scalingZ) returns Matrix4
        
        Identity()
        values:Set(M03, translationX)
        values:Set(M13, translationY)
        values:Set(M23, translationZ)
        values:Set(M00, scalingX)
        values:Set(M11, scalingY)
        values:Set(M22, scalingZ)

        return me
    end

    action SetToRotation (Vector3 axis, number degrees) returns Matrix4

        if degrees = 0
            Identity()
            return me
        end
        
        return Set(quaternion:Set(axis, degrees))

    end

    action SetToRotationRadians (Vector3 axis, number radians) returns Matrix4

        if radians = 0
            Identity()
            return me
        end
        
        return Set(quaternion:SetFromAxisRadians(axis, radians))
    end

    action SetToRotation (number axisX, number axisY, number axisZ, number degrees) returns Matrix4

        if degrees = 0
            Identity()
            return me
        end
        
        return Set(quaternion:SetFromAxis(axisX, axisY, axisZ, degrees))

    end

    action SetToRotationRadians (number axisX, number axisY, number axisZ, number radians) returns Matrix4

        if radians = 0
            Identity()
            return me
        end
        
        return Set(quaternion:SetFromAxisRadians(axisX, axisY, axisZ, radians))

    end

    action SetToRotation (Vector3 v1, Vector3 v2) returns Matrix4

        return Set(quaternion:SetFromCross(v1, v2))

    end

    action SetToRotation (number x1, number y1, number z1, number x2, number y2, number z2) returns Matrix4

        return Set(quaternion:SetFromCross(x1, y1, z1, x2, y2, z2))
        
    end

    action SetFromEulerAngles (number yaw, number pitch, number roll) returns Matrix4

        quaternion:SetEulerAngles (yaw, pitch, roll)
        return Set(quaternion)

    end

    action SetFromEulerAnglesRadians(number yaw, number pitch, number roll) returns Matrix4
        quaternion:SetEulerAnglesRadians(yaw, pitch, roll)
        return Set(quaternion)
    end

    action SetToScaling (Vector3 vector) returns Matrix4

        Identity()
        values:Set(M00, vector:GetX())
        values:Set(M11, vector:GetY())
        values:Set(M22, vector:GetZ())

        return me
    end

    action SetToScaling (number x, number y, number z) returns Matrix4

        Identity()
        values:Set(M00, x)
        values:Set(M11, y)
        values:Set(M22, z)

        return me
    end

    action SetToLookAt (Vector3 direction, Vector3 up) returns Matrix4

        l_vez:Set(direction):Normalize()
        l_vex:Set(direction):Normalize()
        l_vex:CrossProduct(up):Normalize()
        l_vey:Set(l_vex):CrossProduct(l_vez):Normalize()

        Identity()

        values:Set(M00, l_vex:GetX())
        values:Set(M01, l_vex:GetY())
        values:Set(M02, l_vex:GetZ())
        values:Set(M10, l_vey:GetX())
        values:Set(M11, l_vey:GetY())
        values:Set(M12, l_vey:GetZ())
        values:Set(M20, -1 * l_vez:GetX())
        values:Set(M21, -1 * l_vez:GetY())
        values:Set(M22, -1 * l_vez:GetZ())

        return me
    end


    action SetToLookAt (Vector3 position, Vector3 target, Vector3 up) returns Matrix4

        tmpVec:Set(target):Subtract(position)
        SetToLookAt(tmpVec, up)
        me:Multiply(tmpMat:SetToTranslation(-1 * position:GetX(), -1 * position:GetY(), -1 * position:GetZ()))

        return me
    end

    action SetToWorld (Vector3 position, Vector3 forward, Vector3 up) returns Matrix4

        tmpForward:Set(forward):Set(forward):Normalize()
        right:Set(tmpForward):CrossProduct(up):Normalize()
        tmpUp:Set(right):CrossProduct(tmpForward):Normalize()

        me:Set(right, tmpUp, tmpForward:Scale(-1), position)

        return me
    end

    action ToText returns text

        return "[" + values:Get(M00) + "|" + values:Get(M01) + "|" + values:Get(M02) + "|" + values:Get(M03) + "]
" + "[" + values:Get(M10) + "|" + values:Get(M11) + "|" + values:Get(M12) + "|" + values:Get(M13) + "]
" + "[" + values:Get(M20) + "|" + values:Get(M21) + "|" + values:Get(M22) + "|" + values:Get(M23) + "]
" + "[" + values:Get(M30) + "|" + values:Get(M31) + "|" + values:Get(M32) + "|" + values:Get(M33) + "]"

    end

    action LinearInterpolation (Matrix4 matrix, number alpha) returns Matrix4

        integer i = 0

        Array<number> matrixValues =  matrix:values

        repeat 16 times
            values:Set(i, values:Get(i) * (1 - alpha) + matrixValues:Get(i) * alpha)
            i = i + 1
        end
        
        return me
    end

    action Average (Matrix4 other, number w) returns Matrix4

        GetScale(tmpVec)
        other:GetScale(tmpForward)

        GetRotation(quaternion)
        other:GetRotation(quaternion2)

        GetTranslation(tmpUp)
        other:GetTranslation(right)

        SetToScaling(tmpVec:Scale(w):Add(tmpForward:Scale(1 - w)))
        Rotate(quaternion:SphericalLinearInterpolation(quaternion2, 1 - w))
        SetTranslation(tmpUp:Scale(w):Add(right:Scale(1 - w)))

        return me
    end

   // action Average (Array<Matrix4>

    action Set (Matrix3 matrix) returns Matrix4        
        values:Set(0, matrix:row0column0)
        values:Set(1, matrix:row1column0)
        values:Set(2, matrix:row2column0)
        values:Set(3, 0)
        values:Set(4, matrix:row0column1)
        values:Set(5, matrix:row1column1)
        values:Set(6, matrix:row2column1)
        values:Set(7, 0)
        values:Set(8, 0)
        values:Set(9, 0)
        values:Set(10, 1)
        values:Set(11, 0)
        values:Set(12, matrix:row0column2)
        values:Set(13, matrix:row1column2)
        values:Set(14, 0)
        values:Set(15, matrix:row2column2)

        return me
    end

    action Set (Affine2 affine) returns Matrix4

        values:Set(M00, affine:M00)
        values:Set(M10, affine:M10)
        values:Set(M20, 0)
        values:Set(M30, 0)
        values:Set(M01, affine:M01)
        values:Set(M11, affine:M11)
        values:Set(M21, 0)
        values:Set(M31, 0)
        values:Set(M02, 0)
        values:Set(M12, 0)
        values:Set(M22, 1)
        values:Set(M32, 0)
        values:Set(M03, affine:M02)
        values:Set(M13, affine:M12)
        values:Set(M23, 0)
        values:Set(M33, 1)

        return me
    end

    action SetAsAffine (Affine2 affine) returns Matrix4

        values:Set(M00, affine:M00)
        values:Set(M10, affine:M10)
        values:Set(M01, affine:M01)
        values:Set(M11, affine:M11)
        values:Set(M03, affine:M02)
        values:Set(M13, affine:M12)

        return me
    end

    action SetAsAffine (Matrix4 matrix) returns Matrix4

        Array<number> matrixValues = matrix:values

        values:Set(M00, matrixValues:Get(M00))
        values:Set(M10, matrixValues:Get(M10))
        values:Set(M01, matrixValues:Get(M01))
        values:Set(M11, matrixValues:Get(M11))
        values:Set(M03, matrixValues:Get(M03))
        values:Set(M13, matrixValues:Get(M13))

        return me
    end

    action Scale (Vector3 scale) returns Matrix4

        values:Set(M00, values:Get(M00) * scale:GetX())
        values:Set(M11, values:Get(M11) * scale:GetY())
        values:Set(M22, values:Get(M22) * scale:GetZ())

        return me
    end

    action Scale (number x, number y, number z) returns Matrix4

        values:Set(M00, values:Get(M00) * x)
        values:Set(M11, values:Get(M11) * y)
        values:Set(M22, values:Get(M22) * z)

        return me
    end

    action Scale (number scale) returns Matrix4

        values:Set(M00, values:Get(M00) * scale)
        values:Set(M11, values:Get(M11) * scale)
        values:Set(M22, values:Get(M22) * scale)

        return me
    end

    action GetTranslation (Vector3 position) returns Vector3
        
        position:SetX(values:Get(M03))
        position:SetY(values:Get(M13))
        position:SetZ(values:Get(M23))
        return position
    end


    action GetRotation (Quaternion rotation, boolean normalizeAxes) returns Quaternion
        return rotation:SetFromMatrix(normalizeAxes, me)
    end

    action GetRotation(Quaternion rotation) returns Quaternion
        return rotation:SetFromMatrix(me)
    end

    action GetScaleXSquared () returns number 
        
        Matrix4 tmp
        return values:Get(tmp:M00) * values:Get(tmp:M00) + values:Get(tmp:M01) * values:Get(tmp:M01) + values:Get(tmp:M02) * values:Get(tmp:M02)

    end

     action GetScaleYSquared () returns number 
        
        Matrix4 tmp
        return values:Get(tmp:M10) * values:Get(tmp:M10) + values:Get(tmp:M11) * values:Get(tmp:M11) + values:Get(tmp:M12) * values:Get(tmp:M12)

    end

     action GetScaleZSquared () returns number 
        
        Matrix4 tmp
        return values:Get(tmp:M20) * values:Get(tmp:M20) + values:Get(tmp:M21) * values:Get(tmp:M21) + values:Get(tmp:M22) * values:Get(tmp:M22)

    end

    action GetScaleX () returns number 

        Matrix4 tmp
        if values:Get(tmp:M01) <= 0.000001
            if values:Get(tmp:M02) <= 0.000001
                
                return math:AbsoluteValue(values:Get(tmp:M00))

            end
        end

        return math:SquareRoot(GetScaleXSquared())

    end

     action GetScaleY () returns number 

        Matrix4 tmp
        if values:Get(tmp:M10) <= 0.000001
            if values:Get(tmp:M12) <= 0.000001
                
                return math:AbsoluteValue(values:Get(tmp:M11))

            end
        end

        return math:SquareRoot(GetScaleYSquared())

    end

     action GetScaleZ () returns number 

        Matrix4 tmp
        if values:Get(tmp:M20) <= 0.000001
            if values:Get(tmp:M21) <= 0.000001
                
                return math:AbsoluteValue(values:Get(tmp:M22))

            end
        end

        return math:SquareRoot(GetScaleZSquared())

    end

    action GetScale (Vector3 scale) returns Vector3
    
        return scale:Set(GetScaleX(), GetScaleY(), GetScaleZ())

    end

    action ToNormalMatrix () returns Matrix4

        values:Set(M03, 0)
        values:Set(M13, 0)
        values:Set(M23, 0)

        return Inverse():Transpose()

    end

    action PostmultiplyByTranslation(Vector3 translation) returns Matrix4
        return Translate(translation:GetX(), translation:GetY(), translation:GetZ())
    end

    action PostmultilyByTranslation(number x, number y, number z) returns Matrix4
        temporary:Set(M00, 1)
        temporary:Set(M01, 0)
        temporary:Set(M12, 0)
        temporary:Set(M03, x)
        temporary:Set(M10, 0)
        temporary:Set(M11, 1)
        temporary:Set(M12, 0)
        temporary:Set(M13, y)
        temporary:Set(M20, 0)
        temporary:Set(M21, 0)
        temporary:Set(M22, 1)
        temporary:Set(M23, z)
        temporary:Set(M30, 0)
        temporary:Set(M31, 0)
        temporary:Set(M32, 0)
        temporary:Set(M33, 1)
        
        Multiply(values, temporary)
        return me
    end

    action Rotate (Vector3 axis, number degrees) returns Matrix4
        
        if degrees = 0
            return me
        end

        quaternion:Set(axis, degrees)
        return Rotate(quaternion)

    end

    action RotateRadians (Vector3 axis, number radians) returns Matrix4

        if radians = 0
            return me
        end

        quaternion:SetFromAxisRadians(axis, radians)
        return Rotate(quaternion)

    end

    action Rotate (number axisX, number axisY, number axisZ, number degrees) returns Matrix4

        if degrees = 0
            return me
        end

        quaternion:SetFromAxis(axisX, axisY, axisZ, degrees)        
        return Rotate(quaternion)
    end

    action RotateRadians (number axisX, number axisY, number axisZ, number radians) returns Matrix4

        if radians = 0
            return me
        end

        quaternion:SetFromAxisRadians(axisX, axisY, axisZ, radians)
        return Rotate(quaternion)        
    end

    action Rotate (Quaternion rotation) returns Matrix4

        rotation:ToMatrix(temporary)
        Multiply(values, temporary)
        return me
    end

    action Rotate (Vector3 v1, Vector3 v2) returns Matrix4
        return Rotate(quaternion:SetFromCross(v1, v2))
    end

    action PostMultiplyByScale(number scaleX, number scaleY, number scaleZ) returns Matrix4
        temporary:Set(M00, scaleX)
        temporary:Set(M01, 0)
        temporary:Set(M02, 0)
        temporary:Set(M03, 0)
        temporary:Set(M10, 0)
        temporary:Set(M11, scaleY)
        temporary:Set(M12, 0)
        temporary:Set(M13, 0)
        temporary:Set(M20, 0)
        temporary:Set(M21, 0)
        temporary:Set(M22, scaleZ)
        temporary:Set(M23, 0)
        temporary:Set(M30, 0)
        temporary:Set(M31, 0)
        temporary:Set(M32, 0)
        temporary:Set(M33, 1)

        Multiply(values, temporary)
        return me
    end

    action Extract4x3Matrix (Array<number> destination)

        destination:Set(0, values:Get(M00))
        destination:Set(1, values:Get(M10))
        destination:Set(2, values:Get(M20))
        destination:Set(3, values:Get(M01))
        destination:Set(4, values:Get(M11))
        destination:Set(5, values:Get(M21))
        destination:Set(6, values:Get(M02))
        destination:Set(7, values:Get(M12))
        destination:Set(8, values:Get(M22))
        destination:Set(9, values:Get(M03))
        destination:Set(10, values:Get(M13))
        destination:Set(11, values:Get(M23))

    end

    action Project(Array<number> matrix, Array<number> vector)
        Project(matrix, vector, 0)
    end
    
    action Project(Array<number> matrix, Array<number> vectors, integer offset, integer numVecs, integer stride)
        integer vectorPointer = offset
        integer i = 0
        repeat numVecs times
            Project(matrix, vectors, vectorPointer)
            i = i + 1
            vectorPointer = vectorPointer + stride
        end
    end

    action Project(Array<number> matrix, Array<number> vectors, integer vectorPointer)
        number inv_w = 1.0 / (vectors:Get(vectorPointer) * matrix:Get(M30) + vectors:Get(vectorPointer + 1) * matrix:Get(M31) + vectors:Get(vectorPointer + 2) * matrix:Get(M32) + matrix:Get(M33))
        number x = (vectors:Get(vectorPointer + 0) * matrix:Get(M00) + vectors:Get(vectorPointer + 1) * matrix:Get(M01) + vectors:Get(vectorPointer + 2) * matrix:Get(M02) + matrix:Get(M03)) * inv_w
        number y = (vectors:Get(vectorPointer + 0) * matrix:Get(M10) + vectors:Get(vectorPointer + 1) * matrix:Get(M11) + vectors:Get(vectorPointer + 2) * matrix:Get(M12) + matrix:Get(M13)) * inv_w
        number z = (vectors:Get(vectorPointer + 0) * matrix:Get(M20) + vectors:Get(vectorPointer + 1) * matrix:Get(M21) + vectors:Get(vectorPointer + 2) * matrix:Get(M22) + matrix:Get(M23)) * inv_w
        vectors:Set(vectorPointer + 0, x)
        vectors:Set(vectorPointer + 1, y)
        vectors:Set(vectorPointer + 2, z)
    end
      
end