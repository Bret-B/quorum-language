package Libraries.Compute

use Libraries.Containers.Array
use Libraries.Compute.Math
use Libraries.Compute.Matrix3
use Libraries.Compute.Vector2
use Libraries.Compute.Vector3
use Libraries.Compute.Affine2
use Libraries.Compute.Quaternion
use Libraries.Language.Errors.MatrixError

class Matrix4   
    public number row0column0 = 1
    public number row0column1 = 0
    public number row0column2 = 0
    public number row0column3 = 0
    public number row1column0 = 0
    public number row1column1 = 1
    public number row1column2 = 0
    public number row1column3 = 0
    public number row2column0 = 0
    public number row2column1 = 0
    public number row2column2 = 1
    public number row2column3 = 0
    public number row3column0 = 0
    public number row3column1 = 0
    public number row3column2 = 0
    public number row3column3 = 1

    Quaternion quaternion
    Quaternion quaternion2

    Vector3 l_vez
    Vector3 l_vex
    Vector3 l_vey

    Vector3 tmpVec
    Matrix4 tmpMat = undefined

    Vector3 right
    Vector3 tmpForward
    Vector3 tmpUp

    Math math

   action Set(Matrix4 matrix) returns Matrix4
        row0column0 = matrix:row0column0
        row0column1 = matrix:row0column1
        row0column2 = matrix:row0column2
        row0column3 = matrix:row0column3
        row1column0 = matrix:row1column0
        row1column1 = matrix:row1column1
        row1column2 = matrix:row1column2
        row1column2 = matrix:row1column3
        row2column0 = matrix:row2column0
        row2column1 = matrix:row2column1
        row2column2 = matrix:row2column2
        row2column3 = matrix:row2column3
        row3column0 = matrix:row3column0
        row3column1 = matrix:row3column1
        row3column2 = matrix:row3column2
        row3column3 = matrix:row3column3

        return me
    end

    action Set (Array<number> array) returns Matrix4
        if array:GetSize() not= 16
            MatrixError matrix
            matrix:SetErrorMessage("The array must have exactly 16 values to be converted to a Matrix4 object.")
            alert(matrix)
        end

        row0column0 = array:Get(0)
        row0column1 = array:Get(1)
        row0column2 = array:Get(2)
        row0column3 = array:Get(3)
        row1column0 = array:Get(4)
        row1column1 = array:Get(5)
        row1column2 = array:Get(6)
        row1column3 = array:Get(7)
        row2column0 = array:Get(8)
        row2column1 = array:Get(9)
        row2column2 = array:Get(10)
        row2column3 = array:Get(11)
        row3column0 = array:Get(12)
        row3column1 = array:Get(13)
        row3column2 = array:Get(14)
        row3column3 = array:Get(15)
        return me
    end

    action Set(Quaternion quaternion) returns Matrix4
        return Set(quaternion:GetX(), quaternion:GetY(), quaternion:GetZ(), quaternion:GetW())
    end

    action Set(number quaternionX, number quaternionY, number quaternionZ, number quaternionW) returns Matrix4    
        return Set(0.0, 0.0, 0.0, quaternionX, quaternionY, quaternionZ, quaternionW)
    end

    action Set(Vector3 position, Quaternion orientation) returns Matrix4
        return Set(position:GetX(), position:GetY(), position:GetZ(), orientation:GetX(), orientation:GetY(), orientation:GetZ(), orientation:GetW())
    end

    action Set(number translationX, number translationY, number translationZ, number quaternionX, number quaternionY, number quaternionZ, number quaternionW) returns Matrix4        constant number xs = quaternionX * 2.0
        constant number ys = quaternionY * 2.0
        constant number zs = quaternionZ * 2.0
        constant number wx = quaternionW * xs
        constant number wy = quaternionW * ys
        constant number wz = quaternionW * zs
        constant number xx = quaternionX * xs
        constant number xy = quaternionX * ys
        constant number xz = quaternionX * zs
        constant number yy = quaternionY * ys
        constant number yz = quaternionY * zs
        constant number zz = quaternionZ * zs

        row0column0 = (1.0 - (yy + zz))
        row0column1 = (xy - wz)
        row0column2 = (xz + wy)
        row0column3 = translationX

        row1column0 = (xy + wz)
        row1column1 = (1.0 - (xx + zz))
        row1column2 = (yz - wx)
        row1column3 = translationY

        row2column0 = (xz - wy)
        row2column1 = (yz + wx)
        row2column2 = (1.0 - (xx + yy))
        row2column3 = translationZ

        row3column0 = 0.0
        row3column1 = 0.0
        row3column2 = 0.0
        row3column3 = 1.0

        return me
    end

    action Set(Vector3 position, Quaternion orientation, Vector3 scale) returns Matrix4
        return Set(position:GetX(), position:GetY(), position:GetZ(), orientation:GetX(), orientation:GetY(), orientation:GetZ(), orientation:GetW(), scale:GetX(), scale:GetY(), scale:GetZ())
    end

    action Set(number translationX, number translationY, number translationZ, number quaternionX, number quaternionY,
               number quaternionZ, number quaternionW, number scaleX, number scaleY, number scaleZ) returns Matrix4
        constant number xs = quaternionX * 2.0
        constant number ys = quaternionY * 2.0
        constant number zs = quaternionZ * 2.0
        constant number wx = quaternionW * xs 
        constant number wy = quaternionW * ys
        constant number wz = quaternionW * zs
        constant number xx = quaternionX * xs
        constant number xy = quaternionX * ys
        constant number xz = quaternionX * zs
        constant number yy = quaternionY * ys
        constant number yz = quaternionY * zs
        constant number zz = quaternionZ * zs
        
        row0column0 = scaleX * (1.0 - (yy + zz))
        row0column1 = scaleY * (xy - wz)
        row0column2 = scaleZ * (xz + wy)
        row0column3 = translationX

        row1column0 = scaleX * (xy + wz)
        row1column1 = scaleY * (1.0 - (xx + zz))
        row1column2 = scaleZ * (yz - wx)
        row1column3 = translationY

        row2column0 = scaleX * (xz - wy)
        row2column1 = scaleY * (yz + wx)
        row2column2 = scaleZ * (1.0 - (xx + yy))
        row2column3 = translationZ

        row3column0 = 0.0
        row3column1 = 0.0
        row3column2 = 0.0
        row3column3 = 1.00

        return me
    end

    action Set(Vector3 xAxis, Vector3 yAxis, Vector3 zAxis, Vector3 position) returns Matrix4
        row0column0 = xAxis:GetX()
        row0column1 = xAxis:GetY()
        row0column2 = xAxis:GetZ()
        row0column2 = position:GetX()

        row1column0 = yAxis:GetX()
        row1column1 = yAxis:GetY()
        row1column2 = yAxis:GetZ()
        row1column3 = position:GetY()

        row2column0 = zAxis:GetX()
        row2column1 = zAxis:GetY()
        row2column2 = zAxis:GetZ()
        row2column3 = position:GetZ()

        row3column0 = 0
        row3column1 = 0
        row3column2 = 0
        row3column3 = 1

        return me
    end

    action Copy returns Matrix4
        Matrix4 ret
        return ret:Set(me)   
    end

    action Translate(Vector3 vector) returns Matrix4
        row0column3 = row0column3 + vector:GetX()
        row1column3 = row1column3 + vector:GetY()
        row2column3 = row2column3 + vector:GetZ()

        return me
    end

    action Translate(number x, number y, number z) returns Matrix4        
        row0column3 = row0column3 + x
        row1column3 = row1column3 + y
        row2column3 = row2column3 + z

        return me
    end

    action Multiply(Matrix4 matrix) returns Matrix4
        return Multiply(me, matrix)
    end

    action Multiply(Matrix4 matrixA, Matrix4 matrixB) returns Matrix4
        number v00 = matrixA:row0column0 * matrixB:row0column0 + matrixA:row0column1 * matrixB:row1column0 + matrixA:row0column2 * matrixB:row2column0 + matrixA:row0column3 * matrixB:row3column0
        number v01 = matrixA:row0column0 * matrixB:row0column1 + matrixA:row0column1 * matrixB:row1column1 + matrixA:row0column2 * matrixB:row2column1 + matrixA:row0column3 * matrixB:row3column1
        number v02 = matrixA:row0column0 * matrixB:row0column2 + matrixA:row0column1 * matrixB:row1column2 + matrixA:row0column2 * matrixB:row2column2 + matrixA:row0column3 * matrixB:row3column2
        number v03 = matrixA:row0column0 * matrixB:row0column3 + matrixA:row0column1 * matrixB:row1column3 + matrixA:row0column2 * matrixB:row2column3 + matrixA:row0column3 * matrixB:row3column3

        number v10 = matrixA:row1column0 * matrixB:row0column0 + matrixA:row1column1 * matrixB:row1column0 + matrixA:row1column2 * matrixB:row2column0 + matrixA:row1column3 * matrixB:row3column0
        number v11 = matrixA:row1column0 * matrixB:row0column1 + matrixA:row1column1 * matrixB:row1column1 + matrixA:row1column2 * matrixB:row2column1 + matrixA:row1column3 * matrixB:row3column1
        number v12 = matrixA:row1column0 * matrixB:row0column2 + matrixA:row1column1 * matrixB:row1column2 + matrixA:row1column2 * matrixB:row2column2 + matrixA:row1column3 * matrixB:row3column2
        number v13 = matrixA:row1column0 * matrixB:row0column3 + matrixA:row1column1 * matrixB:row1column3 + matrixA:row1column2 * matrixB:row2column3 + matrixA:row1column3 * matrixB:row3column3

        number v20 = matrixA:row2column0 * matrixB:row0column0 + matrixA:row2column1 * matrixB:row1column0 + matrixA:row2column2 * matrixB:row2column0 + matrixA:row2column3 * matrixB:row3column0
        number v21 = matrixA:row2column0 * matrixB:row0column1 + matrixA:row2column1 * matrixB:row1column1 + matrixA:row2column2 * matrixB:row2column1 + matrixA:row2column3 * matrixB:row3column1
        number v22 = matrixA:row2column0 * matrixB:row0column2 + matrixA:row2column1 * matrixB:row1column2 + matrixA:row2column2 * matrixB:row2column2 + matrixA:row2column3 * matrixB:row3column2
        number v23 = matrixA:row2column0 * matrixB:row0column3 + matrixA:row2column1 * matrixB:row1column3 + matrixA:row2column2 * matrixB:row2column3 + matrixA:row2column3 * matrixB:row3column3

        number v30 = matrixA:row3column0 * matrixB:row0column0 + matrixA:row3column1 * matrixB:row1column0 + matrixA:row3column2 * matrixB:row2column0 + matrixA:row3column3 * matrixB:row3column0
        number v31 = matrixA:row3column0 * matrixB:row0column1 + matrixA:row3column1 * matrixB:row1column1 + matrixA:row3column2 * matrixB:row2column1 + matrixA:row3column3 * matrixB:row3column1
        number v32 = matrixA:row3column0 * matrixB:row0column2 + matrixA:row3column1 * matrixB:row1column2 + matrixA:row3column2 * matrixB:row2column3 + matrixA:row3column3 * matrixB:row3column2
        number v33 = matrixA:row3column0 * matrixB:row0column3 + matrixA:row3column2 * matrixB:row1column3 + matrixA:row3column2 * matrixB:row2column3 + matrixA:row3column3 * matrixB:row3column3

        row0column0 = v00
        row0column1 = v01
        row0column2 = v02
        row0column3 = v03
        row1column0 = v10
        row1column1 = v11
        row1column2 = v12
        row1column3 = v13
        row2column0 = v20
        row2column1 = v21
        row2column2 = v22
        row2column3 = v23
        row3column0 = v30
        row3column1 = v31
        row3column2 = v32
        row3column3 = v33

        return me
    end

    action Transpose returns Matrix4
        row0column1 = row1column0
        row0column2 = row2column0
        row0column3 = row3column0
        row1column0 = row0column1
        row1column2 = row2column1
        row1column3 = row3column1
        row2column0 = row0column2
        row2column1 = row1column2
        row2column3 = row3column2
        row3column0 = row0column3
        row3column1 = row1column3
        row3column2 = row2column3
        
        return me

    end

    action IdentityMatrix returns Matrix4
        row0column0 = 1
        row0column1 = 0
        row0column2 = 0
        row0column3 = 0
        row1column0 = 0
        row1column1 = 1
        row1column2 = 0
        row1column3 = 0
        row2column0 = 0
        row2column1 = 0
        row2column2 = 1
        row2column3 = 0
        row3column0 = 0
        row3column1 = 0
        row3column2 = 0
        row3column3 = 1

        return me
    end

    action Inverse returns Matrix4

        number determinant = Determinant()

        if determinant = 0.0 
	    MatrixError error
	    error:SetErrorMessage("Matrix is not invertable if the determinant computes to 0.")
	    alert(error)
	end
        
        number inverseDeterminant = 1.0 / determinant
     
        t00 = row1column2 * row2column3 * row3column1 - row1column3 * row2column2 * row3column1 + row1column3 * row2column1 * row3column2 -
              row1column1 * row2column3 * row3column2 - row1column2 * row2column1 * row3column3 + row1column1 * row2column2 * row3column3

        t01 = row0column3 * row2column2 * row3column1 - row0column2 * row2column3 * row3column1 - row0column3 * row2column1 * row3column2 + 
              row0column1 * row2column3 * row3column2 + row0column2 * row2column1 * row3column3 - row0column1 * row2column2 * row3column3

        t02 = row0column2 * row1column3 * row3column1 - row0column3 * row1column2 * row3column1 + row0column3 * row1column1 * row3column2 - 
              row0column1 * row1column3 * row3column2 - row0column2 * row1column1 * row3column3 + row0column1 * row1column2 * row3column3

        t03 = row0column3 * row1column2 * row2column1 - row0column2 * row1column3 * row2column1 - row0column3 * row1column1 * row2column2 + 
              row0column1 * row1column3 * row2column2 + row0column2 * row1column1 * row2column3 - row0column1 * row1column2 * row2column3

        t10 = row1column3 * row2column2 * row3column0 - row1column2 * row2column3 * row3column0 - row1column3 * row2column0 * row3column2 + 
              row1column0 * row2column3 * row3column2 + row1column2 * row2column0 * row3column3 - row1column0 * row2column2 * row3column3

        t11 = row0column2 * row2column3 * row3column0 - row0column3 * row2column2 * row3column0 + row0column3 * row2column0 * row3column2 - 
              row0column0 * row2column3 * row3column2 - row0column2 * row2column0 * row3column3 + row0column0 * row2column2 * row3column3

        t12 = row0column3 * row1column2 * row3column0 - row0column2 * row1column3 * row3column0 - row0column3 * row1column0 * row3column2 + 
              row0column0 * row1column3 * row3column2 + row0column2 * row1column0 * row3column3 - row0column0 * row1column2 * row3column3

        t13 = row0column2 * row1column3 * row2column0 - row0column3 * row1column2 * row2column0 + row0column3 * row1column0 * row2column2 - 
              row0column0 * row1column3 * row2column2 - row0column2 * row1column0 * row2column3 + row0column0 * row1column2 * row2column3

        t20 = row1column1 * row2column3 * row3column0 - row1column3 * row2column1 * row3column0 + row1column3 * row2column0 * row3column1 - 
              row1column0 * row2column3 * row3column1 - row1column1 * row2column0 * row3column3 + row1column0 * row2column1 * row3column3

        t21 = row0column3 * row2column1 * row3column0 - row0column1 * row2column3 * row3column0 - row0column3 * row2column0 * row3column1 + 
              row0column0 * row2column3 * row3column1 + row0column1 * row2column0 * row3column3 - row0column0 * row2column1 * row3column3

        t22 = row0column1 * row1column3 * row3column0 - row0column3 * row1column1 * row3column0 + row0column3 * row1column0 * row3column1 - 
              row0column0 * row1column3 * row3column1 - row0column1 * row1column0 * row3column3 + row0column0 * row1column1 * row3column3

        t23 = row0column3 * row1column1 * row2column0 - row0column1 * row1column3 * row2column0 - row0column3 * row1column0 * row2column1 + 
              row0column0 * row1column3 * row2column1 + row0column1 * row1column0 * row2column3 - row0column0 * row1column1 * row2column3

        t30 = row1column2 * row2column1 * row3column0 - row1column1 * row2column2 * row3column0 - row1column2 * row2column0 * row3column1 + 
              row1column0 * row2column2 * row3column1 + row1column1 * row2column0 * row3column2 - row1column0 * row2column1 * row3column2

        t31 = row0column1 * row2column2 * row3column0 - row0column2 * row2column1 * row3column0 + row0column2 * row2column0 * row3column1 - 
              row0column0 * row2column2 * row3column1 - row0column1 * row2column0 * row3column2 + row0column0 * row2column1 * row3column2

        t32 = row0column2 * row1column1 * row3column0 - row0column1 * row1column2 * row3column0 - row0column2 * row1column0 * row3column1 + 
              row0column0 * row1column2 * row3column1 + row0column1 * row1column0 * row3column2 - row0column0 * row1column1 * row3column2

        t33 = row0column1 * row1column2 * row2column0 - row0column2 * row1column1 * row2column0 + row0column2 * row1column0 * row2column1 - 
              row0column0 * row1column2 * row2column1 - row0column1 * row1column0 * row2column2 + row0column0 * row1column1 * row2column2

        row0column0 = t00 * inverseDeterminant
        row0column1 = t01 * inverseDeterminant
        row0column2 = t02 * inverseDeterminant
        row0column3 = t03 * inverseDeterminant
        row1column0 = t10 * inverseDeterminant
        row1column1 = t11 * inverseDeterminant
        row1column2 = t12 * inverseDeterminant
        row1column3 = t13 * inverseDeterminant
        row2column0 = t20 * inverseDeterminant
        row2column1 = t21 * inverseDeterminant
        row2column2 = t22 * inverseDeterminant
        row2column3 = t23 * inverseDeterminant
        row3column0 = t30 * inverseDeterminant
        row3column1 = t31 * inverseDeterminant
        row3column2 = t32 * inverseDeterminant
        row3column3 = t33 * inverseDeterminant
        return me
    end

    action Determinant returns number
        return row3column0 * row2column1 * row1column2 * row0column3 - row2column0 * row3column1 * row1column2 * row0column3 - row3column0 * row1column1
             * row2column2 * row0column3 + row1column0 * row3column1 * row2column2 * row0column3 + row2column0 * row1column1 * row3column2 * row0column3 - row1column0
             * row2column1 * row3column2 * row0column3 - row3column0 * row2column1 * row0column2 * row1column3 + row2column0 * row3column1 * row0column2 * row1column3
             + row3column0 * row0column1 * row2column2 * row1column3 - row0column0 * row3column1 * row2column2 * row1column3 - row2column0 * row0column1 * row3column2
             * row1column3 + row0column0 * row2column1 * row3column2 * row1column3 + row3column0 * row1column1 * row0column2 * row2column3 - row1column0 * row3column1
             * row0column2 * row2column3 - row3column0 * row0column1 * row1column2 * row2column3 + row0column0 * row3column1 * row1column2 * row2column3 + row1column0
             * row0column1 * row3column2 * row2column3 - row0column0 * row1column1 * row3column2 * row2column3 - row2column0 * row1column1 * row0column2 * row3column3
             + row1column0 * row2column1 * row0column2 * row3column3 + row2column0 * row0column1 * row1column2 * row3column3 - row0column0 * row2column1 * row1column2
             * row3column3 - row1column0 * row0column1 * row2column2 * row3column3 + row0column0 * row1column1 * row2column2 * row3column3

    end

    action Determinant3x3 returns number
        return row0column0 * row1column1 * row2column2 + 
               row0column1 * row1column2 * row2column0 + 
               row0column2 * row1column0 * row2column1 -
               row0column0 * row1column2 * row2column1 -
               row0column1 * row1column0 * row2column2 -
               row0column2 * row1column1 * row2column0
    end

    action SetToProjection(number nearPlane, number farPlane, number fieldOfViewHeight, number aspectRatio) returns Matrix4
        IdentityMatrix()
        number l_fd = 1.0 / math:Tangent((fieldOfViewHeight * (math:pi / 180)) / 2.0)
        number l_a1 = (farPlane + nearPlane) / (nearPlane - farPlane)
        number l_a2 = (2 * farPlane * nearPlane) / (nearPlane - farPlane)

        row0column0 = l_fd / aspectRatio
        row1column0 = 0
        row2column0 = 0
        row3column0 = 0

        row0column1 = 0
        row1column1 = l_fd
        row2column1 = 0
        row3column1 = 0

        row0column2 = 0
        row1column2 = 0
        row2column2 = l_a1
        row3column2 = -1

        row0column3 = 0
        row1column3 = 0
        row2column3 = l_a2
        row3column3 = 0

        return me
    end

    action SetToProjection(number left, number right, number bottom, number top, number near, number far) returns Matrix4
        number x = 2.0 * near / (right - left)
        number y = 2.0 * near / (top - bottom)
        number a = (right + left) / (right - left)
        number b = (top + bottom) / (top - bottom)
        number l_a1 = (far + near) / (near - far)
        number l_a2 = (2 * far * near) / (near - far)
        
        row0column0 = x
        row1column0 = 0
        row2column0 = 0
        row3column0 = 0

        row0column1 = 0
        row1column1 = y
        row2column1 = 0
        row3column1 = 0

        row0column2 = a
        row1column2 = b
        row2column2 = l_a1
        row3column2 = -1

        row0column3 = 0
        row1column3 = 0
        row2column3 = l_a2
        row3column3 = 0

        return me
    end

    action SetToOrthographic2D(number x, number y, number width, number height) returns Matrix4
        return SetToOrthographic(x, x + width, y, y + height, 0, 1)

    end

    action SetToOrthographic2D(number x, number y, number width, number height, number near, number far) returns Matrix4
        return SetToOrthographic(x, x + width, y, y + height, near, far)
    end

    action SetToOrthographic(number left, number right, number bottom, number top, number near, number far) returns Matrix4    
        IdentityMatrix()
        number x_orth = 2 / (right - left)
        number y_orth = 2 / (top - bottom)
        number z_orth = -2 / (far - near)

        number tx = -1 * (right + left) / (right - left)
        number ty = -1 * (top + bottom) / (top - bottom)
        number tz = -1 * (far + near) / (far - near)

        row0column0 = x_orth
        row1column0 = 0
        row2column0 = 0
        row3column0 = 0

        row0column1 = 0
        row1column1 = y_orth
        row2column1 = 0
        row3column1 = 0

        row0column2 = 0
        row1column2 = 0
        row2column2 = z_orth
        row3column2 = 0

        row0column3 = tx
        row1column3 = ty
        row2column3 = tz
        row3column3 = 1

        return me
    end

    action SetTranslation(Vector3 vector) returns Matrix4
        row0column3 = vector:GetX()
        row1column3 = vector:GetY()
        row2column3 = vector:GetZ()

        return me
    end

    action SetTranslation(number x, number y, number z) returns Matrix4
        row0column3 = x
        row1column3 = y
        row2column3 = z

        return me
    end

    action SetToTranslation(Vector3 vector) returns Matrix4
        IdentityMatrix()
        row0column3 = vector:GetX()
        row1column3 = vector:GetY()
        row2column3 = vector:GetZ()

        return me
    end

    action SetToTranslation(number x, number y, number z) returns Matrix4
        IdentityMatrix()
        row0column3 = x
        row1column3 = y
        row2column3 = z

        return me
    end

    action SetToTranslationAndScaling(Vector3 translation, Vector3 scaling) returns Matrix4
        IdentityMatrix()
        row0column3 = translation:GetX()
        row1column3 = translation:GetY()
        row2column3 = translation:GetZ()
        row0column0 = scaling:GetX()
        row1column1 = scaling:GetY()
        row2column2 = scaling:GetZ()
        
        return me
    end

    action SetToTranslationAndScaling(number translationX, number translationY, number translationZ, number scalingX, number scalingY, number scalingZ) returns Matrix4
        IdentityMatrix()
        row0column3 = translationX
        row1column3 = translationY
        row2column3 = translationZ
        row0column0 = scalingX
        row1column1 = scalingY
        row2column2 = scalingZ

        return me
    end

    action SetToRotation(Vector3 axis, number degrees) returns Matrix4
        if degrees = 0
            return IdentityMatrix()
        end

        return Set(quaternion:Set(axis, degrees))
    end

    action SetToRotationRadians(Vector3 axis, number radians) returns Matrix4
        if radians = 0
            return IdentityMatrix()
        end

        return Set(quaternion:SetFromAxisRadians(axis, radians))
    end

    action SetToRotation(number axisX, number axisY, number axisZ, number degrees) returns Matrix4
        if degrees = 0
            return IdentityMatrix()
        end

        return Set(quaternion:SetFromAxis(axisX, axisY, axisZ, degrees))
    end

    action SetToRotationRadians(number axisX, number axisY, number axisZ, number radians) returns Matrix4
        if radians = 0
            return IdentityMatrix()
        end
        return Set(quaternion:SetFromAxisRadians(axisX, axisY, axisZ, radians))
    end

    action SetToRotation(Vector3 vector1, Vector3 vector2) returns Matrix4
        return Set(quaternion:SetFromCross(vector1, vector2))
    end

    action SetToRotation(number x1, number y1, number z1, number x2, number y2, number z2) returns Matrix4
        return Set(quaternion:SetFromCross(x1, y1, z1, x2, y2, z2))        
    end

    action SetFromEulerAngles(number yaw, number pitch, number roll) returns Matrix4
        quaternion:SetEulerAngles(yaw, pitch, roll)
        return Set(quaternion)
    end

    action SetFromEulerAnglesRadians(number yaw, number pitch, number roll) returns Matrix4
        quaternion:SetEulerAnglesRadians(yaw, pitch, roll)
        return Set(quaternion)
    end

    action SetToScaling(Vector3 vector) returns Matrix4
        IdentityMatrix()
        row0column0 = vector:GetX()
        row1column1 = vector:GetY()
        row2column2 = vector:GetZ()
        return me
    end

    action SetToScaling(number x, number y, number z) returns Matrix4
        IdentityMatrix()
        row0column0 = x
        row1column1 = y
        row2column2 = z
        return me
    end

    action SetToLookAt(Vector3 direction, Vector3 up) returns Matrix4
        l_vez:Set(direction):Normalize()
        l_vex:Set(direction):Normalize()
        l_vex:CrossProduct(up):Normalize()
        l_vey:Set(l_vex):CrossProduct(l_vez):Normalize()

        IdentityMatrix()

        row0column0 = l_vex:GetX()
        row0column1 = l_vex:GetY()
        row0column2 = l_vex:GetZ()
        row1column0 = l_vey:GetX()
        row1column1 = l_vey:GetY()
        row1column2 = l_vey:GetZ()
        row2column0 = -1 * l_vez:GetX()
        row2column1 = -1 * l_vez:GetY()
        row2column2 = -1 * l_vez:GetZ()

        return me
    end


    action SetToLookAt(Vector3 position, Vector3 target, Vector3 up) returns Matrix4
        tmpVec:Set(target):Subtract(position)
        SetToLookAt(tmpVec, up)
        me:Multiply(tmpMat:SetToTranslation(-1 * position:GetX(), -1 * position:GetY(), -1 * position:GetZ()))

        return me
    end

    action SetToWorld(Vector3 position, Vector3 forward, Vector3 up) returns Matrix4
        tmpForward:Set(forward):Set(forward):Normalize()
        right:Set(tmpForward):CrossProduct(up):Normalize()
        tmpUp:Set(right):CrossProduct(tmpForward):Normalize()

        me:Set(right, tmpUp, tmpForward:Scale(-1), position)

        return me
    end

    action LinearInterpolation(Matrix4 matrix, number alpha) returns Matrix4
        row0column0 = row0column0 * (1 - alpha) + matrix:row0column0 * alpha
        row0column1 = row0column1 * (1 - alpha) + matrix:row0column1 * alpha
        row0column2 = row0column2 * (1 - alpha) + matrix:row0column2 * alpha
        row0column3 = row0column3 * (1 - alpha) + matrix:row0column3 * alpha

        row1column0 = row1column0 * (1 - alpha) + matrix:row1column0 * alpha
        row1column1 = row1column1 * (1 - alpha) + matrix:row1column1 * alpha
        row1column2 = row1column2 * (1 - alpha) + matrix:row1column2 * alpha
        row1column3 = row1column3 * (1 - alpha) + matrix:row1column3 * alpha

        row2column0 = row2column0 * (1 - alpha) + matrix:row2column0 * alpha
        row2column1 = row2column1 * (1 - alpha) + matrix:row2column1 * alpha
        row2column2 = row2column2 * (1 - alpha) + matrix:row2column2 * alpha
        row2column3 = row2column3 * (1 - alpha) + matrix:row2column3 * alpha

        row3column0 = row3column0 * (1 - alpha) + matrix:row3column0 * alpha
        row3column1 = row3column1 * (1 - alpha) + matrix:row3column1 * alpha
        row3column2 = row3column2 * (1 - alpha) + matrix:row3column2 * alpha
        row3column3 = row3column3 * (1 - alpha) + matrix:row3column3 * alpha
        
        return me
    end

    action Average (Matrix4 other, number w) returns Matrix4
        GetScale(tmpVec)
        other:GetScale(tmpForward)

        GetRotation(quaternion)
        other:GetRotation(quaternion2)

        GetTranslation(tmpUp)
        other:GetTranslation(right)

        SetToScaling(tmpVec:Scale(w):Add(tmpForward:Scale(1 - w)))
        Rotate(quaternion:SphericalLinearInterpolation(quaternion2, 1 - w))
        SetTranslation(tmpUp:Scale(w):Add(right:Scale(1 - w)))

        return me
    end

    action Set(Matrix3 matrix) returns Matrix4        
        row0column0 = matrix:row0column0
        row1column0 = matrix:row1column0
        row2column0 = matrix:row2column0
        row3column0 = 0
        row0column1 = matrix:row0column1
        row1column1 = matrix:row1column1
        row2column1 = matrix:row2column1
        row3column1 = 0
        row0column2 = 0
        row1column2 = 0
        row2column1 = 1
        row3column2 = 0
        row0column3 = matrix:row0column2
        row1column3 = matrix:row1column2
        row2column3 = 0
        row3column3 = matrix:row2column2

        return me
    end

    action Set(Affine2 affine) returns Matrix4
        row0column0 = affine:M00
        row1column0 = affine:M10
        row2column0 = 0
        row3column0 = 0
        row0column1 = affine:M01
        row1column1 = affine:M11
        row2column1 = 0
        row3column1 = 0
        row0column2 = 0
        row1column2 = 0
        row2column2 = 1
        row3column2 = 0
        row0column3 = affine:M02
        row1column3 = affine:M12
        row2column3 = 0
        row3column3 = 1

        return me
    end

    action SetAsAffine(Affine2 affine) returns Matrix4
        row0column0 = affine:M00
        row1column0 = affine:M10
        row0column1 = affine:M01
        row1column1 = affine:M11
        row0column3 = affine:M02
        row1column3 = affine:M12

        return me
    end

    action SetAsAffine(Matrix4 matrix) returns Matrix4
        row0column0 = matrix:row0column0
        row1column0 = matrix:row1column0
        row0column1 = matrix:row0column1
        row1column1 = matrix:row1column1
        row0column3 = matrix:row0column3
        row1column3 = matrix:row1column3

        return me
    end

    action Scale(Vector3 scale) returns Matrix4
        row0column0 = row0column0 * scale:GetX()
        row1column1 = row1column1 * scale:GetY()
        row2column2 = row2column2 * scale:GetZ()

        return me
    end

    action Scale (number x, number y, number z) returns Matrix4
        row0column0 = row0column0 * x
        row1column1 = row1column1 * y
        row2column2 = row2column2 * z

        return me
    end

    action Scale (number scale) returns Matrix4
        row0column0 = row0column0 * scale
        row1column1 = row1column1 * scale
        row2column2 = row2column2 * scale

        return me
    end

    action GetTranslation (Vector3 position) returns Vector3        
        position:SetX(row0column3)
        position:SetY(row1column3)
        position:SetZ(row2column3)
        return position
    end


    action GetRotation(Quaternion rotation, boolean normalizeAxes) returns Quaternion
        return rotation:SetFromMatrix(normalizeAxes, me)
    end

    action GetRotation(Quaternion rotation) returns Quaternion
        return rotation:SetFromMatrix(me)
    end

    action GetScaleXSquared returns number
        return row0column0 * row0column0 + row0column1 * row0column1 + row0column2 * row0column2

    end

     action GetScaleYSquared returns number 
        return row1column0 * row1column0 + row1column1 * row1column1 + row1column2 * row1column2

    end

     action GetScaleZSquared returns number 
        return row2column0 * row2column0 + row2column1 * row2column1 + row2column2 * row2column2
    end

    action GetScaleX returns number
        if row0column1 <= 0.000001 and row0column2 <= 0.000001                
            return math:AbsoluteValue(row0column0)
        end

        return math:SquareRoot(GetScaleXSquared())
    end

     action GetScaleY returns number 
       if row1column0 <= 0.000001 and row1column2 <= 0.000001                
            return math:AbsoluteValue(row1column1)
        end

        return math:SquareRoot(GetScaleYSquared())

    end

     action GetScaleZ () returns number 
       if row2column0 <= 0.000001 and row2column1 <= 0.000001                
            return math:AbsoluteValue(row2column2)
        end

        return math:SquareRoot(GetScaleZSquared())
    end

    action GetScale(Vector3 scale) returns Vector3    
        return scale:Set(GetScaleX(), GetScaleY(), GetScaleZ())

    end

    action ToNormalMatrix returns Matrix4
        row0column3 = 0
        row1column3 = 0
        row2column3 = 0

        return Inverse():Transpose()

    end

    action Rotate(Vector3 axis, number degrees) returns Matrix4        
        if degrees = 0
            return me
        end

        quaternion:Set(axis, degrees)
        return Rotate(quaternion)
    end

    action RotateRadians(Vector3 axis, number radians) returns Matrix4
        if radians = 0
            return me
        end

        quaternion:SetFromAxisRadians(axis, radians)
        return Rotate(quaternion)
    end

    action Rotate(number axisX, number axisY, number axisZ, number degrees) returns Matrix4
        if degrees = 0
            return me
        end

        quaternion:SetFromAxis(axisX, axisY, axisZ, degrees)        
        return Rotate(quaternion)
    end

    action RotateRadians(number axisX, number axisY, number axisZ, number radians) returns Matrix4
        if radians = 0
            return me
        end

        quaternion:SetFromAxisRadians(axisX, axisY, axisZ, radians)
        return Rotate(quaternion)        
    end

    action Rotate (Quaternion rotation) returns Matrix4
//        Matrix4 temporary
//        rotation:ToMatrix(temporary)
//        Multiply(values, temporary)
        return me
    end

    action Rotate(Vector3 v1, Vector3 v2) returns Matrix4
        return Rotate(quaternion:SetFromCross(v1, v2))
    end

    action Project(Array<number> matrix, Array<number> vector)
        Project(matrix, vector, 0)
    end
    
    action Project(Array<number> matrix, Array<number> vectors, integer offset, integer numVecs, integer stride)
        integer vectorPointer = offset
        integer i = 0
        repeat numVecs times
            Project(matrix, vectors, vectorPointer)
            i = i + 1
            vectorPointer = vectorPointer + stride
        end
    end

    action Project(Array<number> matrix, Array<number> vectors, integer vectorPointer)
//        number inv_w = 1.0 / (vectors:Get(vectorPointer) * matrix:Get(M30) + vectors:Get(vectorPointer + 1) * matrix:Get(M31) + vectors:Get(vectorPointer + 2) * matrix:Get(M32) + matrix:Get(M33))
//        number x = (vectors:Get(vectorPointer + 0) * matrix:Get(M00) + vectors:Get(vectorPointer + 1) * matrix:Get(M01) + vectors:Get(vectorPointer + 2) * matrix:Get(M02) + matrix:Get(M03)) * inv_w
//        number y = (vectors:Get(vectorPointer + 0) * matrix:Get(M10) + vectors:Get(vectorPointer + 1) * matrix:Get(M11) + vectors:Get(vectorPointer + 2) * matrix:Get(M12) + matrix:Get(M13)) * inv_w
//        number z = (vectors:Get(vectorPointer + 0) * matrix:Get(M20) + vectors:Get(vectorPointer + 1) * matrix:Get(M21) + vectors:Get(vectorPointer + 2) * matrix:Get(M22) + matrix:Get(M23)) * inv_w
//        vectors:Set(vectorPointer + 0, x)
//        vectors:Set(vectorPointer + 1, y)
//        vectors:Set(vectorPointer + 2, z)
    end
      
end