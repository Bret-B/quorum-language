package Libraries.Compute

use Libraries.Compute.all
use Libraries.Containers.Array

class Matrix3 
    
    public constant integer M00 = 0
    public constant integer M01 = 3
    public constant integer M02 = 6
    public constant integer M10 = 1
    public constant integer M11 = 4
    public constant integer M12 = 7
    public constant integer M20 = 2
    public constant integer M21 = 5
    public constant integer M22 = 8

    public Array<number> values
    private Array<number> temporary
    Math math
    

    on create
        values:SetSize(9)
        temporary:SetSize(9)
        IdentityMatrix()

    end

    action IdentityMatrix() returns Matrix3
        values:Set(M00, 1)
        values:Set(M01, 0)
        values:Set(M02, 0)
        values:Set(M10, 0)
        values:Set(M11, 1)
        values:Set(M12, 0)
        values:Set(M20, 0)
        values:Set(M21, 0)
        values:Set(M22, 1)
        return me
    end

    /* Prints a 3x3 matrix for testings purposes */
    action PrintValues ()
        integer i = 0
        repeat values:GetSize() / 3 times 
            output values:Get(i) + " , " + values:Get(i+1) + " , " + values:Get(i + 2)
            i = i + 3
        end
    end

     action Multiply (Array<number> matrixA, Array<number> matrixB)

        number v00 = matrixA:Get(M00) * matrixB:Get(M00) + matrixA:Get(M01) * matrixB:Get(M10) + matrixA:Get(M02) * matrixB:Get(M20)
        number v01 = matrixA:Get(M00) * matrixB:Get(M01) + matrixA:Get(M01) * matrixB:Get(M11) + matrixA:Get(M02) * matrixB:Get(M21)
        number v02 = matrixA:Get(M00) * matrixB:Get(M02) + matrixA:Get(M01) * matrixB:Get(M12) + matrixA:Get(M02) * matrixB:Get(M22)

        number v10 = matrixA:Get(M10) * matrixB:Get(M00) + matrixA:Get(M11) * matrixB:Get(M10) + matrixA:Get(M12) * matrixB:Get(M20)
        number v11 = matrixA:Get(M10) * matrixB:Get(M01) + matrixA:Get(M11) * matrixB:Get(M11) + matrixA:Get(M12) * matrixB:Get(M21)
        number v12 = matrixA:Get(M10) * matrixB:Get(M02) + matrixA:Get(M11) * matrixB:Get(M12) + matrixA:Get(M12) * matrixB:Get(M22)

        number v20 = matrixA:Get(M20) * matrixB:Get(M00) + matrixA:Get(M21) * matrixB:Get(M10) + matrixA:Get(M22) * matrixB:Get(M20)
        number v21 = matrixA:Get(M20) * matrixB:Get(M01) + matrixA:Get(M21) * matrixB:Get(M11) + matrixA:Get(M22) * matrixB:Get(M21)
        number v22 = matrixA:Get(M20) * matrixB:Get(M02) + matrixA:Get(M21) * matrixB:Get(M12) + matrixA:Get(M22) * matrixB:Get(M22)

        matrixA:Set(M00, v00)
        matrixA:Set(M10, v10)
        matrixA:Set(M20, v20)
        matrixA:Set(M01, v01)
        matrixA:Set(M11, v11)
        matrixA:Set(M21, v21)
        matrixA:Set(M02, v02)
        matrixA:Set(M12, v12)
        matrixA:Set(M22, v22)
    end
 
    /* Multiplys the calling matrix by the passed in matrix */
    action Multiply (Matrix3 matrix) returns Matrix3

        // Insert the array of passed in matrix into new array variable
        Array<number> matrixValue = matrix:values

        number v00 = values:Get(M00) * matrixValue:Get(M00) + values:Get(M01) * matrixValue:Get(M10) + values:Get(M02) * matrixValue:Get(M20)
        number v01 = values:Get(M00) * matrixValue:Get(M01) + values:Get(M01) * matrixValue:Get(M11) + values:Get(M02) * matrixValue:Get(M21)
        number v02 = values:Get(M00) * matrixValue:Get(M02) + values:Get(M01) * matrixValue:Get(M12) + values:Get(M02) * matrixValue:Get(M22)

        number v10 = values:Get(M10) * matrixValue:Get(M00) + values:Get(M11) * matrixValue:Get(M10) + values:Get(M12) * matrixValue:Get(M20)
        number v11 = values:Get(M10) * matrixValue:Get(M01) + values:Get(M11) * matrixValue:Get(M11) + values:Get(M12) * matrixValue:Get(M21)
        number v12 = values:Get(M10) * matrixValue:Get(M02) + values:Get(M11) * matrixValue:Get(M12) + values:Get(M12) * matrixValue:Get(M22)

        number v20 = values:Get(M20) * matrixValue:Get(M00) + values:Get(M21) * matrixValue:Get(M10) + values:Get(M22) * matrixValue:Get(M20)
        number v21 = values:Get(M20) * matrixValue:Get(M01) + values:Get(M21) * matrixValue:Get(M11) + values:Get(M22) * matrixValue:Get(M21)
        number v22 = values:Get(M20) * matrixValue:Get(M02) + values:Get(M21) * matrixValue:Get(M12) + values:Get(M22) * matrixValue:Get(M22)
        
        values:Set(M00, v00)
        values:Set(M10, v10)
        values:Set(M20, v20)
        values:Set(M01, v01)
        values:Set(M11, v11)
        values:Set(M21, v21)
        values:Set(M02, v02)
        values:Set(M12, v12)
        values:Set(M22, v22)

        return me
    end 

    // Multiplys the passed in matrix by the calling matrix and stores result in calling matrix
    action MultiplyLeft (Matrix3 matrix) returns Matrix3

       // Insert the array of passed in matrix into new array variable
        Array<number> matrixValue = matrix:values

        number v00 = matrixValue:Get(M00) * values:Get(M00) + matrixValue:Get(M01) * values:Get(M10) + matrixValue:Get(M02) * values:Get(M20)
        number v01 = matrixValue:Get(M00) * values:Get(M01) + matrixValue:Get(M01) * values:Get(M11) + matrixValue:Get(M02) * values:Get(M21)
        number v02 = matrixValue:Get(M00) * values:Get(M02) + matrixValue:Get(M01) * values:Get(M12) + matrixValue:Get(M02) * values:Get(M22)

        number v10 = matrixValue:Get(M10) * values:Get(M00) + matrixValue:Get(M11) * values:Get(M10) + matrixValue:Get(M12) * values:Get(M20)
        number v11 = matrixValue:Get(M10) * values:Get(M01) + matrixValue:Get(M11) * values:Get(M11) + matrixValue:Get(M12) * values:Get(M21)
        number v12 = matrixValue:Get(M10) * values:Get(M02) + matrixValue:Get(M11) * values:Get(M12) + matrixValue:Get(M12) * values:Get(M22)

        number v20 = matrixValue:Get(M20) * values:Get(M00) + matrixValue:Get(M21) * values:Get(M10) + matrixValue:Get(M22) * values:Get(M20)
        number v21 = matrixValue:Get(M20) * values:Get(M01) + matrixValue:Get(M21) * values:Get(M11) + matrixValue:Get(M22) * values:Get(M21)
        number v22 = matrixValue:Get(M20) * values:Get(M02) + matrixValue:Get(M21) * values:Get(M12) + matrixValue:Get(M22) * values:Get(M22)
        
        values:Set(M00, v00)
        values:Set(M10, v10)
        values:Set(M20, v20)
        values:Set(M01, v01)
        values:Set(M11, v11)
        values:Set(M21, v21)
        values:Set(M02, v02)
        values:Set(M12, v12)
        values:Set(M22, v22)

        return me
    end

    action SetToRotation (number degrees) returns Matrix3
        return SetToRotationInRadians(math:DegreesToRadians(degrees))
    end

    action SetToRotation (Vector3 axis, number degrees) returns Matrix3
        return SetToRotation(axis, math:Cosine(math:DegreesToRadians(degrees)), math:Sine(math:DegreesToRadians(degrees)))
    end

    action SetToRotation (Vector3 axis, number cosine, number sine) returns Matrix3
        
        number oc = 1.0 - cosine
        values:Set(M00, oc * axis:GetX() * axis:GetX() + cosine)
        values:Set(M10, oc * axis:GetX() * axis:GetY() - axis:GetZ() * sine)
        values:Set(M20, oc * axis:GetZ() * axis:GetX() + axis:GetY() * sine)
        values:Set(M01, oc * axis:GetX() * axis:GetY() + axis:GetZ() * sine)
        values:Set(M11, oc * axis:GetY() * axis:GetY() + cosine)
        values:Set(M21, oc * axis:GetY() * axis:GetZ() - axis:GetX() * sine)
        values:Set(M02, oc * axis:GetZ() * axis:GetX() - axis:GetY() * sine)
        values:Set(M12, oc * axis:GetY() * axis:GetZ() + axis:GetX() * sine)
        values:Set(M22, oc * axis:GetZ() * axis:GetZ() + cosine)

        return  me
    end

    action SetToRotationInRadians (number radians) returns Matrix3

        number cosine = math:Cosine(radians)
        number sine = math:Sine(radians)
        
        values:Set(M00, cosine)
        values:Set(M10, sine)
        values:Set(M20, 0)

        values:Set(M01, sine * -1)
        values:Set(M11, cosine)
        values:Set(M21, 0)

        values:Set(M02, 0)
        values:Set(M12, 0)
        values:Set(M22, 1)

        return me
    end
        

    action SetToTranslation (number x, number y) returns Matrix3
        values:Set(M00, 1)
        values:Set(M10, 0)
        values:Set(M20, 0)
        values:Set(M01, 0)
        values:Set(M11, 1)
        values:Set(M21, 0)
        values:Set(M02, x)
        values:Set(M12, y)
        values:Set(M22, 1)
        
        return me
    end

    action SetToTranslation (Vector2 translation) returns Matrix3
        values:Set(M00, 1)
        values:Set(M10, 0)
        values:Set(M20, 0)
        values:Set(M01, 0)
        values:Set(M11, 1)
        values:Set(M21, 0)
        values:Set(M02, translation:GetX())
        values:Set(M12, translation:GetY())
        values:Set(M22, 1)

        return me
    end

    action SetToScaling (number scaleX, number scaleY) returns Matrix3
        values:Set(M00, scaleX)
        values:Set(M10, 0)
        values:Set(M20, 0)
        values:Set(M01, 0)
        values:Set(M11, scaleY)
        values:Set(M21, 0)
        values:Set(M02, 0)
        values:Set(M12, 0)
        values:Set(M22, 1)

        return me
    end

    action SetToScaling (Vector2 scale) returns Matrix3
        values:Set(M00, scale:GetX())
        values:Set(M10, 0)
        values:Set(M20, 0)
        values:Set(M01, 0)
        values:Set(M11, scale:GetY())
        values:Set(M21, 0)
        values:Set(M02, 0)
        values:Set(M12, 0)
        values:Set(M22, 1)

        return me
    end

    action ToString () returns text
        return "[" + values:Get(M00) + "|" + values:Get(M01) + "|" + values:Get(M02) + "]\n" + "[" + values:Get(M10) + "|" + values:Get(M11) + "|" + values:Get(M12) + "]\n" + "[" + values:Get(M20) + "|" + values:Get(M21) + "|" + values:Get(M22) + "]"
    end

    action Determinant () returns number
        return values:Get(M00) * values:Get(M11) * values:Get(M22) + 
               values:Get(M01) * values:Get(M12) * values:Get(M20) + 
               values:Get(M02) * values:Get(M10) * values:Get(M21) -
               values:Get(M00) * values:Get(M12) * values:Get(M21) -
               values:Get(M01) * values:Get(M10) * values:Get(M22) -
               values:Get(M02) * values:Get(M11) * values:Get(M20)
    end

    /* Inverts the matrix given that the determinant does not equal 0 */
    action Inverse () returns Matrix3
        number determinant = Determinant()
        
        number inverseDeterminant = 1.0 / determinant
        
        temporary:Set(M00, values:Get(M11) * values:Get(M22) - values:Get(M21) * values:Get(M12))
        temporary:Set(M10, values:Get(M20) * values:Get(M12) - values:Get(M10) * values:Get(M22))
        temporary:Set(M20, values:Get(M10) * values:Get(M21) - values:Get(M20) * values:Get(M11))
        temporary:Set(M01, values:Get(M21) * values:Get(M02) - values:Get(M01) * values:Get(M22))
        temporary:Set(M11, values:Get(M00) * values:Get(M22) - values:Get(M20) * values:Get(M02))
        temporary:Set(M21, values:Get(M20) * values:Get(M01) - values:Get(M00) * values:Get(M21))
        temporary:Set(M02, values:Get(M01) * values:Get(M12) - values:Get(M11) * values:Get(M02))
        temporary:Set(M12, values:Get(M10) * values:Get(M02) - values:Get(M00) * values:Get(M12))
        temporary:Set(M22, values:Get(M00) * values:Get(M11) - values:Get(M10) * values:Get(M01))
        
        values:Set(M00, inverseDeterminant * temporary:Get(M00))
        values:Set(M10, inverseDeterminant * temporary:Get(M10))
        values:Set(M20, inverseDeterminant * temporary:Get(M20))
        values:Set(M01, inverseDeterminant * temporary:Get(M01))
        values:Set(M11, inverseDeterminant * temporary:Get(M11))
        values:Set(M21, inverseDeterminant * temporary:Get(M21))
        values:Set(M02, inverseDeterminant * temporary:Get(M02))
        values:Set(M12, inverseDeterminant * temporary:Get(M12))
        values:Set(M22, inverseDeterminant * temporary:Get(M22))

        return me
    end


    // Copies the values from the array into the values array of the calling matrix
    action Set (Array<number> array) returns Matrix3
        values:Set(M00, array:Get(0))
        values:Set(M10, array:Get(1))
        values:Set(M20, array:Get(2))
        values:Set(M01, array:Get(3))
        values:Set(M11, array:Get(4))
        values:Set(M21, array:Get(5))
        values:Set(M02, array:Get(6))
        values:Set(M12, array:Get(7))
        values:Set(M22, array:Get(8))
        return me
    end

    // Copies the values array from the passed in matrix
    action Set (Matrix3 matrix) returns Matrix3

        integer index = 0
        repeat 9 times
            values:Set(index, matrix:values:Get(index))
            index = index + 1
        end

        return me
    end

    action Set (Affine2 affine) returns Matrix3
        values:Set(M00, affine:M00)
        values:Set(M10, affine:M10)
        values:Set(M20, 0)
        values:Set(M01, affine:M01)
        values:Set(M11, affine:M11)
        values:Set(M21, 0)
        values:Set(M02, affine:M02)
        values:Set(M12, affine:M12)
        values:Set(M22, 1)

        return me
    end

    action Set (Matrix4 matrix) returns Matrix3
        values:Set(M00, matrix:values:Get(matrix:M00))
        values:Set(M10, matrix:values:Get(matrix:M10))
        values:Set(M20, matrix:values:Get(matrix:M20))
        values:Set(M01, matrix:values:Get(matrix:M01))
        values:Set(M11, matrix:values:Get(matrix:M11))
        values:Set(M21, matrix:values:Get(matrix:M21))
        values:Set(M02, matrix:values:Get(matrix:M02))
        values:Set(M12, matrix:values:Get(matrix:M12))
        values:Set(M22, matrix:values:Get(matrix:M22))
        return me
    end


    /* adds a translational component to the matrix in the 3rd column */
    action AddTranslationalComponent (Vector2 vector) returns Matrix3
        values:Set(M02, values:Get(M02) + vector:GetX())
        values:Set(M12, values:Get(M12) + vector:GetY())
        return me
    end

    action AddTranslationalComponent (number x, number y) returns Matrix3
        values:Set(M02, values:Get(M02) + x)
        values:Set(M12, values:Get(M12) + y)
        return me
    end

    action AddTranslationalComponent (Vector3 vector) returns Matrix3
        values:Set(M02, values:Get(M02) + vector:GetX())
        values:Set(M12, values:Get(M12) + vector:GetY())
        return me
    end

    /* postmultiplies this matrix by a translation matrix */
    action Translate (number x, number y) returns Matrix3

        temporary:Set(M00, 1)
        temporary:Set(M10, 0)
        temporary:Set(M20, 0)
        temporary:Set(M01, 0)
        temporary:Set(M11, 1)
        temporary:Set(M21, 0)
        temporary:Set(M02, x)
        temporary:Set(M12, y)
        temporary:Set(M22, 1)
        
        Multiply(values, temporary)

        return me
    end
    
    action Translate (Vector2 translation) returns Matrix3
        temporary:Set(M00, 1)
        temporary:Set(M10, 0)
        temporary:Set(M20, 0)
        temporary:Set(M01, 0)
        temporary:Set(M11, 1)
        temporary:Set(M21, 0)
        temporary:Set(M02, translation:GetX())
        temporary:Set(M12, translation:GetY())
        temporary:Set(M22, 1)

        Multiply (values, temporary)
        
        return me
    end

    action Rotate (number degrees) returns Matrix3
       return RotateInRadians(math:DegreesToRadians(degrees))
    end

    action RotateInRadians (number radians) returns Matrix3

        if radians = 0
            return me
        end

        number cos = math:Cosine(radians)
        number sin = math:Sine(radians)

        temporary:Set(M00, cos)
        temporary:Set(M10, sin)
        temporary:Set(M20, 0)
        temporary:Set(M01, sin * -1)
        temporary:Set(M11, cos)
        temporary:Set(M21, 0)
        temporary:Set(M02, 0)
        temporary:Set(M12, 0)
        temporary:Set(M22, 1)

        Multiply(values, temporary)

        return me
    end

    action Scale (number scaleX, number scaleY) returns Matrix3
        temporary:Set(M00, scaleX)
        temporary:Set(M10, 0)
        temporary:Set(M20, 0)
        temporary:Set(M01, 0)
        temporary:Set(M11, scaleY)
        temporary:Set(M21, 0)
        temporary:Set(M02, 0)
        temporary:Set(M12, 0)
        temporary:Set(M22, 1)
        
        Multiply (values, temporary)

        return me
    end

    action Scale (Vector2 scale) returns Matrix3
        temporary:Set(M00, scale:GetX())
        temporary:Set(M10, 0)
        temporary:Set(M20, 0)
        temporary:Set(M01, 0)
        temporary:Set(M11, scale:GetY())
        temporary:Set(M21, 0)
        temporary:Set(M02, 0)
        temporary:Set(M12, 0)
        temporary:Set(M22, 1)
        
        Multiply (values, temporary)
        
        return me
    end

    action GetValues returns Array<number>
        return values
    end

    action GetTranslation(Vector2 position) returns Vector2
        position:Set(values:Get(M02), values:Get(M12))
        return position
    end

    action GetScale(Vector2 scale) returns Vector2
        scale:Set(math:SquareRoot(values:Get(M00) * values:Get(M00) + values:Get(M01) * values:Get(M01)),
                  math:SquareRoot(values:Get(M10) * values:Get(M10) + values:Get(M11) * values:Get(M11))) 

        return scale
    end

    action GetRotation returns number
        return math:RadiansToDegrees(math:InverseTangent(values:Get(M10), values:Get(M00)))
    end

    action GetRotationInRadians () returns number
        return math:InverseTangent(values:Get(M10), values:Get(M00))
    end

    action SetScale (number scale) returns Matrix3
        values:Set(M00, values:Get(M00) * scale)
        values:Set(M11, values:Get(M11) * scale)

        return me
    end

    action SetScale (Vector3 scale) returns Matrix3
        values:Set(M00, values:Get(M00) * scale:GetX())
        values:Set(M11, values:Get(M11) * scale:GetY())

        return me
    end

    action SetScale (Vector2 scale) returns Matrix3
        values:Set(M00, values:Get(M00) * scale:GetX())
        values:Set(M11, values:Get(M11) * scale:GetY())

        return me
    end

    action Transpose () returns Matrix3
        number v01 = values:Get(M10)
        number v02 = values:Get(M20)
        number v10 = values:Get(M01)
        number v12 = values:Get(M21)
        number v20 = values:Get(M02)
        number v21 = values:Get(M12)
        values:Set(M01, v01)
        values:Set(M02, v02)
        values:Set(M10, v10)
        values:Set(M12, v12)
        values:Set(M20, v20)
        values:Set(M21, v21)

        return me
    end
    
end