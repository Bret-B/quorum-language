package Libraries.Compute

use Libraries.Compute.all
use Libraries.Compute.Vector2
use Libraries.Containers.Array

/*
Vector3 is a class representing a vector in 3D space.

Attribute: Author Amanda Austin

Attribute: Example

use Libraries.Compute.Vector3

Vector3 vector1
Vector3 vector2

vector1:Set(2, 6, 9)
vector2:Set(1, 7, 2)

vector1:CrossProduct(vector2)

number newX = vector1:GetX()
number newY = vector1:GetY()

output "The cross product of the two vectors is: [" + newX + ", " + newY + "]"
*/
class Vector3 

    number x = 0
    number y = 0
    number z = 0

    Math math
    constant number ROUNDING_MARGIN = 0.000001

    /*
    This action returns the x component of the vector.

    Attribute: Author Amanda Austin

    Attribute: Returns the x component of the vector
    
    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(1, 2, 3)
    
    number x = vector:GetX()
    output "The x component is: " + x

    */
    action GetX returns number
        return x
    end

    /*
    This action returns the y component of the vector.

    Attribute: Author Amanda Austin

    Attribute: Returns the y component of the vector
    
    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(1, 2, 3)
    
    number y = vector:GetY()
    output "The y component is: " + y

    */
    action GetY returns number
        return y
    end

    /*
    This action returns the z component of the vector.

    Attribute: Author Amanda Austin

    Attribute: Returns the z component of the vector
    
    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(1, 2, 3)
    
    number z = vector:GetZ()
    output "The z component is: " + z

    */
    action GetZ returns number
        return z
    end

    /*
    This action sets the x, y, and z components of the vector to the passed x, y,
    and z values.

    Attribute: Author Amanda Austin

    Attribute: Parameter xValue the value to set as the x component
    Attribute: Parameter yValue the value to set as the y component
    Attribute: Parameter zValue the value to set as the z component

    Attribute: Returns the calling vector

    Attribute: Example

    use Libraries.Compute.Vector3
    
    Vector3 vector
    vector:Set(8.8, 4.2, 9.2)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"


    */
    action Set(number xValue, number yValue, number zValue) returns Vector3
        x = xValue
        y = yValue
        z = zValue
        return me
    end

    /*
    This action sets the vector's components to the components of the passed
    vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector the vector to use to set the components

    Attribute: Returns the calling vector

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector2 firstVector
    firstVector:Set(2.4, 4.3, 2.7)
    
    Vector2 secondVector
    secondVector:Set(firstVector)

    number newX = secondVector:GetX()
    number newY = secondVector:GetY()
    number newZ = secondVector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Set(Vector3 vector) returns Vector3
        return Set(vector:GetX(), vector:GetY(), vector:GetZ())
    end

    action Set(Array<number> array) returns Vector3
        return Set(array:Get(0), array:Get(1), array:Get(2))
    end

    action Set(Vector2 vector, number z) returns Vector3
        return Set(vector:GetX(), vector:GetY(), z)
    end

    action SetX(number newX)
        x = newX
    end

    action SetY(number newY)
        y = newY
    end

    action SetZ(number newZ)
        z = newZ
    end

    action Copy returns Vector3
        Vector3 temp
        temp:Set(x, y, z)
        return temp
    end

    action Add(Vector3 vector) returns Vector3
        return Add(vector:GetX(), vector:GetY(), vector:GetZ())
    end

    action Add(number xValue, number yValue, number zValue) returns Vector3
        return Set(x + xValue, y + yValue, z + zValue)
    end

    action Add(number value) returns Vector3
        return Set(x + value, y + value, z + value)
    end

    action Subtract(Vector3 vector) returns Vector3
        return Subtract(vector:GetX(), vector:GetY(), vector:GetZ())
    end

    action Subtract(number xValue, number yValue, number zValue) returns Vector3
        return Set(x - xValue, y - yValue, z - zValue)        
    end

    action Subtract(number value) returns Vector3
        return Set(x - value, y - value, z - value)
    end

    action Scale(number scalar) returns Vector3
        return Set(x * scalar, y * scalar, z * scalar)
    end

    action Scale(Vector3 vector) returns Vector3
        return Set(x * vector:GetX(), y * vector:GetY(), z * vector:GetZ())
    end

    action Scale(number vx, number vy, number vz) returns Vector3
        return Set(x * vx, y * vy, z * vz)
    end

    action MultiplyAndAdd(Vector3 vec, number scalar) returns Vector3
        x = x + vec:GetX() * scalar
        y = y + vec:GetY() * scalar
        z = z + vec:GetZ() * scalar
        return me
    end

    action MultiplyAndAdd(Vector3 vec, Vector3 mulVec) returns Vector3
        x = x + vec:GetX() * mulVec:GetX()
        y = y + vec:GetY() * mulVec:GetY()
        z = z + vec:GetZ() * mulVec:GetZ()
        return me
    end

    action Length returns number
        return math:SquareRoot(x * x + y * y + z * z)
    end

    action Length(number x, number y, number z) returns number
        return math:SquareRoot(x * x + y * y + z * z)
    end

    action LengthSquared(number x, number y, number z) returns number
        return x * x + y * y + z * z
    end

    action LengthSquared returns number
        return x * x + y * y + z * z
    end

    action Equals(Vector3 vector) returns boolean
        return x = vector:GetX() and y = vector:GetY() and z = vector:GetZ()
    end

    action Distance(number x1, number y1, number z1, number x2, number y2, number z2) returns number
        number a = x2 - x1
        number b = y2 - y1
        number c = z2 - z1
        return math:SquareRoot(a * a + b * b + c * c)
    end
    
    action Distance(Vector3 vector) returns number
        number a = vector:GetX() - x
        number b = vector:GetY() - y
        number c = vector:GetZ() - z
        return math:SquareRoot(a * a + b * b + c * c)
    end

    action Distance(number xValue, number yValue, number zValue) returns number
        number a = xValue - x
        number b = yValue - y
        number c = zValue - z
        return math:SquareRoot(a * a + b * b + c * c)
    end

    action DistanceSquared(number x1, number y1, number z1, number x2, number y2, number z2)returns number
        number a = x2 - x1
        number b = y2 - y1
        number c = z2 - z1
        return a * a + b * b + c * c
    end

    action DistanceSquared(Vector3 vector) returns number
        number a = vector:GetX() - x
        number b = vector:GetY() - y
        number c = vector:GetZ() - z
        return a * a + b * b + c * c
    end

    action DistanceSquared(number xValue, number yValue, number zValue) returns number
        number a = xValue - x
        number b = yValue - y
        number c = zValue - z
        return a * a + b * b + c * c
    end

   action Normalize returns Vector3
        number len2 = me:LengthSquared()
        if len2 = 0.0 or len2 = 1.0
            return me
        end

        return me:Scale(1.0 / math:SquareRoot(len2))
    end         

    action DotProduct(Vector3 vector) returns number
        return x * vector:GetX() + y * vector:GetY() + z * vector:GetZ()
    end

    action DotProduct(number xValue, number yValue, number zValue) returns number
        return x * xValue + y * yValue + z * zValue
    end

    action DotProduct(number x1, number y1, number z1, number x2, number y2, number z2) returns number
        return x1 * x2 + y1 * y2 + z1 * z2
    end

    /* Sets Vector3's variables to the cross product of the current variables of Vector3 and the parameters */
    action CrossProduct(Vector3 vector) returns Vector3
        return Set(y * vector:GetZ() - z * vector:GetY(), z * vector:GetX() - x * vector:GetZ(), x * vector:GetY() - y * vector:GetX())
    end

    action CrossProduct(number xVal, number yVal, number zVal) returns Vector3
        return Set(y * zVal - z * yVal, z * xVal - x * zVal, x * yVal - y * xVal)
    end

    action MultiplyBy4x3Matrix(Array<number> matrix) returns Vector3
        return Set(x * matrix:Get(0) + y * matrix:Get(3) + z * matrix:Get(6) + matrix:Get(9),
                   x * matrix:Get(1) + y * matrix:Get(4) + z * matrix:Get(7) + matrix:Get(10),
                   x * matrix:Get(2) + y * matrix:Get(5) + z * matrix:Get(8) + matrix:Get(11))
    end

    action Multiply(Matrix4 matrix) returns Vector3
        
        Array<number> l_mat = matrix:values

        return Set(x * l_mat:Get(matrix:M00) + y * l_mat:Get(matrix:M01) + z * l_mat:Get(matrix:M02) + l_mat:Get(matrix:M03),
                   x * l_mat:Get(matrix:M10) + y * l_mat:Get(matrix:M11) + z * l_mat:Get(matrix:M12) + l_mat:Get(matrix:M13),
                   x * l_mat:Get(matrix:M20) + y * l_mat:Get(matrix:M21) + z * l_mat:Get(matrix:M22) + l_mat:Get(matrix:M23))        
    end
        
    action MultiplyByTranspose(Matrix4 matrix) returns Vector3
        Array<number> l_mat = matrix:values

        return Set(x * l_mat:Get(matrix:M00) + y * l_mat:Get(matrix:M10) + z * l_mat:Get(matrix:M20) + l_mat:Get(matrix:M30),
                   x * l_mat:Get(matrix:M01) + y * l_mat:Get(matrix:M11) + z * l_mat:Get(matrix:M21) + l_mat:Get(matrix:M31),
                   x * l_mat:Get(matrix:M02) + y * l_mat:Get(matrix:M12) + z * l_mat:Get(matrix:M22) + l_mat:Get(matrix:M32))
    end
 
    action Multiply(Matrix3 matrix) returns Vector3
           constant Array<number> leftMatrix = matrix:values

           return Set(x * leftMatrix:Get(matrix:M00) + y * leftMatrix:Get(matrix:M01) + z * leftMatrix:Get(matrix:M02),
                      x * leftMatrix:Get(matrix:M10) + y * leftMatrix:Get(matrix:M11) + z * leftMatrix:Get(matrix:M12),
                      x * leftMatrix:Get(matrix:M20) + y * leftMatrix:Get(matrix:M21) + z * leftMatrix:Get(matrix:M22))

    end

    action MultiplyByTranspose(Matrix3 matrix) returns Vector3
        constant Array<number> leftMatrix = matrix:values
        
        return Set(x * leftMatrix:Get(matrix:M00) + y * leftMatrix:Get(matrix:M10) + z * leftMatrix:Get(matrix:M20),
                   x * leftMatrix:Get(matrix:M01) + y * leftMatrix:Get(matrix:M11) + z * leftMatrix:Get(matrix:M21),
                   x * leftMatrix:Get(matrix:M02) + y * leftMatrix:Get(matrix:M12) + z * leftMatrix:Get(matrix:M22))

    end

    action Multiply(Quaternion quaternion) returns Vector3
        return quaternion:Transform(me)
    end

    action Project(Matrix4 matrix) returns Vector3
        Array<number> l_mat = matrix:values
        number l_w = 1.0 / (x * l_mat:Get(matrix:M30) + y * l_mat:Get(matrix:M31) + z * l_mat:Get(matrix:M32) + l_mat:Get(matrix:M33))
        return me:Set((x * l_mat:Get(matrix:M00) + y * l_mat:Get(matrix:M01) + z * l_mat:Get(matrix:M02) + l_mat:Get(matrix:M03)) * l_w,
                      (x * l_mat:Get(matrix:M10) + y * l_mat:Get(matrix:M11) + z * l_mat:Get(matrix:M12) + l_mat:Get(matrix:M13)) * l_w,
                      (x * l_mat:Get(matrix:M20) + y * l_mat:Get(matrix:M21) + z * l_mat:Get(matrix:M22) + l_mat:Get(matrix:M23)) * l_w)
    end
    
    action Rotate(Matrix4 matrix) returns Vector3
        Array<number> l_mat = matrix:values
        return me:Set(x * l_mat:Get(matrix:M00) + y * l_mat:Get(matrix:M01) + z * l_mat:Get(matrix:M02),
                      x * l_mat:Get(matrix:M10) + y * l_mat:Get(matrix:M11) + z * l_mat:Get(matrix:M12),
                      x * l_mat:Get(matrix:M20) + y * l_mat:Get(matrix:M21) + z * l_mat:Get(matrix:M22))
    end

    action Unrotate(Matrix4 matrix) returns Vector3
        Array<number> l_mat = matrix:values
        return me:Set(x * l_mat:Get(matrix:M00) + y * l_mat:Get(matrix:M10) + z * l_mat:Get(matrix:M20),
                      x * l_mat:Get(matrix:M01) + y * l_mat:Get(matrix:M11) + z * l_mat:Get(matrix:M21),
                      x * l_mat:Get(matrix:M02) + y * l_mat:Get(matrix:M12) + z * l_mat:Get(matrix:M22))
    end

    action Untransform(Matrix4 matrix) returns Vector3
        Array<number> l_mat = matrix:values
        x = x - l_mat:Get(matrix:M03)
        y = y - l_mat:Get(matrix:M03)
        z = z - l_mat:Get(matrix:M03)
        return me:Set(x * l_mat:Get(matrix:M00) + y * l_mat:Get(matrix:M10) + z * l_mat:Get(matrix:M20),
                      x * l_mat:Get(matrix:M01) + y * l_mat:Get(matrix:M11) + z * l_mat:Get(matrix:M21),
                      x * l_mat:Get(matrix:M02) + y * l_mat:Get(matrix:M12) + z * l_mat:Get(matrix:M22))
    end

    action Rotate(number degrees, number axisX, number axisY, number axisZ) returns Vector3
        Matrix4 tempMat
        return me:Multiply(tempMat:SetToRotation(axisX, axisY, axisZ, degrees))
    end

    action RotateRadians(number radians, number axisX, number axisY, number axisZ) returns Vector3
        Matrix4 tempMat
        return me:Multiply(tempMat:SetToRotationRadians(axisX, axisY, axisZ, radians))
    end

    action Rotate(Vector3 axis, number degrees) returns Vector3
        Matrix4 tempMat
        tempMat:SetToRotation(axis, degrees)
        return me:Multiply(tempMat)
    end

    action RotateRadians(Vector3 axis, number radians) returns Vector3
        Matrix4 tempMat
        tempMat:SetToRotationRadians(axis, radians)
        return me:Multiply(tempMat)
    end

    /*
    This action determines whether the vector is a unit vector, meaning it has
    a length of 1.

    Attribute: Author Amanda Austin

    Attribute: Returns true if the vector is a unit vector, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(0.0, 1.0, 0.0)

    boolean isUnit = vector:IsUnit()
    
    if isUnit
        output "The vector is a unit vector."
    else
        output "The vector is not a unit vector."
    end

    */
    action IsUnit returns boolean
        return IsUnit(0.000000001)
    end

    /*
    This action determines whether the vector is a unit vector, meaning it has
    a length of 1 to within the passed precision.

    Attribute: Author Amanda Austin

    Attribute: Parameter precision The desired precision

    Attribute: Returns true if the vector is a unit vector to within the passed precision, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(0.0, 1.0, 0.0)

    boolean isUnit = vector:IsUnit(0.00001)
    
    if isUnit
        output "The vector is a unit vector."
    else
        output "The vector is not a unit vector."
    end

    */
    action IsUnit(number precision) returns boolean
        return math:AbsoluteValue(LengthSquared() - 1.0) < precision
    end

    /*
    This action determines whether the vector is the zero vector, meaning that
    its x, y, and z components are 0.

    Attribute: Author Amanda Austin

    Attribute: Returns true if the vector is the zero vector, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector

    firstVector:Set(5.0, 6.0, 7.0)
    secondVector:Set(5.0, 6.0, 7.0)

    firstVector:Subtract(secondVector)
    
    boolean isZero = firstVector:IsZero()

    if isZero
        output "The vector is the zero vector."
    else
        output "The vector is not the zero vector."
    end

    */
    action IsZero returns boolean
        return x = 0 and y = 0 and z = 0
    end

    /*
    This action determines whether the vector is the zero vector to within the
    passed precision, meaning that its x, y, and z components are 0.

    Attribute: Author Amanda Austin

    Attribute: Parameter precision The desired precision

    Attribute: Returns true if the vector is the zero vector to within the passed precision, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector

    firstVector:Set(5.0, 6.0, 7.0)
    secondVector:Set(5.0, 6.0, 7.0)

    firstVector:Subtract(secondVector)
    
    boolean isZero = firstVector:IsZero(0.00001)

    if isZero
        output "The vector is the zero vector."
    else
        output "The vector is not the zero vector."
    end

    */
    action IsZero(number precision) returns boolean
        return LengthSquared() < precision
    end

    /*
    This action determines whether the passed vector is on the same line as the
    calling vector to within the passed precision, either in the same or
    opposite direction

    Attribute: Author Amanda Austin

    Attribute: Parameter other The other vector
    Attribute: Parameter precision The desired precision

    Attribute: Returns true if the vectors are on the same line, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector
    
    firstVector:Set(1.0, 2.0, 3.0)
    secondVector:Set(-2.0, -4.0, -6.0)

    boolean onLine = firstVector:IsOnLine(secondVector, 0.00001)
    
    if onLine
        output "The two vectors are on the same line."
    else
        output "The two vectors are not on the same line."
    end

    */
    action IsOnLine(Vector3 other, number precision) returns boolean
        return LengthSquared(y * other:GetZ() - z * other:GetY(), z * other:GetX() - x * other:GetZ(),
                             x * other:GetY() - y * other:GetX()) <= precision
    end

    /*
    This action determines whether the passed vector is on the same line as the
    calling vector, either in the same or opposite direction.

    Attribute: Author Amanda Austin

    Attribute: Parameter other The other vector

    Attribute: Returns true if the vectors are on the same line, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector
    
    firstVector:Set(1.0, 2.0, 3.0)
    secondVector:Set(-2.0, -4.0, -6.0)

    boolean onLine = firstVector:IsOnLine(secondVector)
    
    if onLine
        output "The two vectors are on the same line."
    else
        output "The two vectors are not on the same line."
    end

    */
    action IsOnLine(Vector3 other) returns boolean
        return LengthSquared(y * other:GetZ() - z * other:GetY(), z * other:GetX() - x * other:GetZ(), 
                             x * other:GetY() - y * other:GetX()) <= ROUNDING_MARGIN
    end
        
    /*
    This action determines whether the passed vector is collinear in the
    opposite direction with the calling vector, meaning that it lies on the same
    line as the calling vector and has the opposite direction as the calling
    vector to within the passed precision.

    Attribute: Author Amanda Austin

    Attribute: Parameter other The other vector
    Attribute: Parameter precision The desired precision

    Attribute: Returns true if the vectors are collinear in the opposite directions, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector
    
    firstVector:Set(3.0, 4.0, 5.0)
    secondVector:Set(-6.0, -8.0, -10.0)

    boolean collinearOpposite = firstVector:IsCollinearOpposite(secondVector, 0.00001)

    if collinearOpposite
        output "The two vectors are collinear in the opposite direction"
    else
        output "The two vectors are not collinear in the opposite direction"
    end

    */
    action IsCollinearOpposite(Vector3 other, number precision) returns boolean
        return IsOnLine(other, precision) and HasOppositeDirection(other)
    end

    /*
    This action determines whether the passed vector is collinear in the
    opposite direction with the calling vector, meaning that it lies on the same
    line as the calling vector and has the opposite direction as the calling
    vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter other The other vector

    Attribute: Returns true if the vectors are collinear in the opposite directions, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector
    
    firstVector:Set(3.0, 4.0, 5.0)
    secondVector:Set(-6.0, -8.0, -10.0)

    boolean collinearOpposite = firstVector:IsCollinearOpposite(secondVector)

    if collinearOpposite
        output "The two vectors are collinear in the opposite direction"
    else
        output "The two vectors are not collinear in the opposite direction"
    end

    */
    action IsCollinearOpposite(Vector3 other) returns boolean
        return IsOnLine(other) and HasOppositeDirection(other)
    end

    /*
    This action determines whether the passed vector is collinear with the
    calling vector, meaning that it lies on the same line as the calling vector 
    and has the same direction as the calling vector to within the passed 
    precision.

    Attribute: Author Amanda Austin

    Attribute: Parameter other The other vector
    Attribute: Parameter precision The desired precision

    Attribute: Returns true if the vectors are collinear, false otherwise.

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector
    
    firstVector:Set(3.0, 4.0, 5.0)
    secondVector:Set(6.0, 8.0, 10.0)

    boolean collinear = firstVector:IsCollinear(secondVector, 0.00001)

    if collinear
        output "The two vectors are collinear in the same direction"
    else
        output "The two vectors are not collinear in the same direction"
    end

    */
    action IsCollinear(Vector3 other, number precision) returns boolean
        return IsOnLine(other, precision) and HasSameDirection(other)
    end

    /*
    This action determines whether the passed vector is collinear with the
    calling vector, meaning that it lies on the same line as the calling vector 
    and has the same direction as the calling vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter other The other vector

    Attribute: Returns true if the vectors are collinear, false otherwise.

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector
    
    firstVector:Set(3.0, 4.0, 5.0)
    secondVector:Set(6.0, 8.0, 10.0)

    boolean collinear = firstVector:IsCollinear(secondVector)

    if collinear
        output "The two vectors are collinear in the same direction"
    else
        output "The two vectors are not collinear in the same direction"
    end

    */
    action IsCollinear(Vector3 other) returns boolean
        return IsOnLine(other) and HasSameDirection(other)
    end

    /*
    This action determines whether the passed vector is perpendicular to the
    calling vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector The other vector

    Attribute: Returns true if the two vectors are perpendicular, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector

    firstVector:Set(1.0, 0.0, 0.0)
    secondVector:Set(0.0, 1.0, 0.0)
    
    boolean isPerpendicular = firstVector:IsPerpendicular(secondVector)
    
    if isPerpendicular
        output "The two vectors are perpendicular."
    else
        output "The two vectors are not perpendicular."
    end

    */
    action IsPerpendicular(Vector3 vector) returns boolean
        return math:AbsoluteValue(DotProduct(vector)) <= ROUNDING_MARGIN
    end

    /*
    This action determines whether the passed vector is perpendicular to the
    calling vector to within the passed precision.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector The other vector
    Attribute: Parameter precision The desired precision
    
    Attribute: Returns true if the two vectors are perpendicular, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector

    firstVector:Set(1.0, 0.0, 0.0)
    secondVector:Set(0.0, 1.0, 0.0)
    
    boolean isPerpendicular = firstVector:IsPerpendicular(secondVector, 0.00001)
    
    if isPerpendicular
        output "The two vectors are perpendicular."
    else
        output "The two vectors are not perpendicular."
    end

    */
    action IsPerpendicular(Vector3 vector, number precision) returns boolean
        return math:AbsoluteValue(DotProduct(vector)) <= precision
    end

    /*
    This action determines whether the passed vector has the same direction as
    the calling vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector The other vector

    Attribute: Returns true if the two vectors have the same direction, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector
    
    firstVector:Set(3.0, 4.0, 5.0)
    secondVector:Set(6.0, 8.0, 10.0)

    boolean isSame = firstVector:HasSameDirection(secondVector)

    if isSame
        output "The two vectors have the same direction."
    else
        output "The two vectors do not have the same direction."
    end

    */
    action HasSameDirection(Vector3 vector) returns boolean
        return DotProduct(vector) > 0
    end

    /*
    This action determines whether the passed vector has the opposite direction
    as the calling vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector The other vector

    Attribute: Returns true if the two vectors have the opposite direction, false otherwise

    Attribute: Example

    use Libraries.Compute.Vector3
    
    Vector3 firstVector
    Vector3 secondVector

    firstVector:Set(3.0, 4.0, 5.0)
    secondVector:Set(-3.0, -4.0, -5.0)
    
    boolean isOpposite = firstVector:HasOppositeDirection(secondVector)

    if isOpposite
       output "The two vectors have opposite directions." 
    else
       output "The two vectors do not have opposite directions."
    end

    */
    action HasOppositeDirection(Vector3 vector) returns boolean
        return DotProduct(vector) < 0
    end

    /*
    This action performs a linear interpolation between the calling vector and 
    the passed target vector by alpha, which is between 0 and 1, inclusive. 
    This changes the calling vector to the result of the linear interpolation.

    Attribute: Author Amanda Austin

    Attribute: Parameter target The target vector
    Attribute: Parameter alpha The alpha value

    Attribute: Returns The calling vector after linear interpolation

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    Vector3 target

    vector:Set(1.0, 2.0, 1.0)
    target:Set(2.0, 3.0, 1.0)
    number alpha = 0.5

    vector:LinearInterpolation(target, alpha)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"
    */
    action LinearInterpolation(Vector3 target, number alpha) returns Vector3
        x = x + alpha * (target:GetX() - x)
        y = y + alpha * (target:GetY() - y)
        z = z + alpha * (target:GetZ() - z)
        return me
    end

    /*
    This action performs a spherical linear interpolation between the calling
    vector and the passed target vector by alpha, which is between 0 and 1,
    inclusive. This changes the calling vector to the result of the spherical
    linear interpolation.

    Attribute: Author Amanda Austin

    Attribute: Parameter target The target vector
    Attribute: Parameter alpha The alpha value

    Attribute: Returns The calling vector after spherical linear interpolation

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    Vector3 target

    vector:Set(1.0, 2.0, 1.0)
    target:Set(2.0, 3.0, 1.0)
    number alpha = 0.5

    vector:SphericalLinearInterpolation(target, alpha)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"
    */
    action SphericalLinearInterpolation(Vector3 target, number alpha) returns Vector3
        constant number dotProduct = DotProduct(target)

        if dotProduct > 0.9995 or dotProduct < -0.9995
            return LinearInterpolation(target, alpha)
        end

        constant number theta0 = math:InverseCosine(dotProduct)
        constant number theta = theta0 * alpha

        constant number st = math:Sine(theta)
        constant number tx = target:GetX() - x * dotProduct
        constant number ty = target:GetY() - y * dotProduct
        constant number tz = target:GetZ() - z * dotProduct
        constant number l2 = tx * tx + ty * ty + tz * tz
        number dl = 0

        if l2 < 0.0001
            dl = 1.0
        else
            dl = 1.0 / math:SquareRoot(l2)
        end

        return Scale(math:Cosine(theta)):Add(tx * dl, ty * dl, tz * dl):Normalize()
    end

    /*
    This action limits the length of the vector to the passed limit value. This
    changes the calling vector to have a new length if its old length was
    greater than the passed limit.

    Attribute: Author Amanda Austin

    Attribute: Parameter limit The value to limit the length to

    Attribute: Returns The vector with a new length if its old length was larger than the passed limit

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(2.0, 1.0, 2.0)
    
    vector:Limit(1.5)
    
    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()
    
    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Limit(number limit) returns Vector3
        return LimitSquared(limit * limit)
    end

    /*
    This action limits the square of the length of the vector to the passed
    value, which represents the square of the value to limit the length of the
    vector to. This changes the calling vector to have a new length if the
    old length squared was greater than the limit squared.

    Attribute: Author Amanda Austin

    Attribute: Parameter limitSquared the square of the limit

    Attribute: Returns the calling vector with a new length if the old length squared was greater than the limit squared
    
    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(2.0, 1.0, 2.0)
    
    vector:LimitSquared(2.25)
    
    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()
    
    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action LimitSquared(number limitSquared) returns Vector3
        number lengthSquared = LengthSquared()
        if lengthSquared > limitSquared
            Scale(math:SquareRoot(limitSquared / lengthSquared))
        end
        
        return me
    end

    /*
    This action clamps the length of the vector to be between the passed minimum
    and maximum values. This changes the vector if the length of the vector is
    greater than the maximum or less than the minimum.

    Attribute: Author Amanda Austin
    
    Attribute: Parameter min The minimum length
    Attribute: Parameter max The maximum length

    Attribute: Returns The vector with a new length if the old length was below the minimum or above the maximum

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector
    vector:Set(3.0, 4.0, 5.0)
    
    vector:Clamp(0.5, 1.5)

    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()
    
    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action Clamp(number min, number max) returns Vector3
        number len2 = LengthSquared()
        if len2 = 0.0
            return me
        end
        
        number max2 = max * max
        if len2 > max2
            return Scale(math:SquareRoot(max2 / len2))
        end

        number min2 = min * min
        if len2 < min2
            return Scale(math:SquareRoot(min2 / len2))
        end

        return me
    end

    /*
    This action determines whether the passed vector equals the calling vector
    to within the passed precision.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector The other vector
    Attribute: Parameter precision The desired precision

    Attribute: Returns true if the vectors are equal within the passed precision, false otherwise
    
    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 firstVector
    Vector3 secondVector

    firstVector:Set(3.0, 4.0, 5.0)
    secondVector:Set(6.0, 8.0, 10.0)
    secondVector:Scale(0.5)

    boolean areEqual = firstVector:EqualsAtPrecision(secondVector, 0.00001)
    
    if areEqual
        output "The two vectors are equal."
    else
        output "The two vectors are not equal."
    end

    */
    action EqualAtPrecision(Vector3 other, number epsilon) returns boolean
        if other = undefined
            return false
        end
        if math:AbsoluteValue(other:GetX() - x) > epsilon
            return false
        end
        if math:AbsoluteValue(other:GetY() - y) > epsilon
            return false
        end
        if math:AbsoluteValue(other:GetZ() - z) > epsilon
            return false
        end
        return true
    end

    /*
    This action determines whether the vector represented by the passed x, y,
    and z components equals the calling vector to within the passed precision.

    Attribute: Author Amanda Austin

    Attribute: Parameter xValue The x component of the other vector
    Attribute: Parameter yValue The y component of the other vector
    Attribute: Parameter zValue The z component of the other vector
    Attribute: Parameter precision The desired precision

    Attribute: Returns true if the vectors are equal within the passed precision, false otherwise
    
    Attribute: Example

    use Libraries.Compute.Vector3

    Vector3 vector

    vector:Set(3.0, 4.0, 7.5)
    
    boolean areEqual = vector:EqualsAtPrecision(3.0, 4.0000001, 7.5000002 0.00001)
    
    if areEqual
        output "The two vectors are equal."
    else
        output "The two vectors are not equal."
    end

    */
    action EqualAtPrecision(number xVal, number yVal, number zVal, number precision) returns boolean  
        if math:AbsoluteValue(xVal - x) > precision
            return false
        end
        if math:AbsoluteValue(yVal - y) > precision
            return false
        end
        if math:AbsoluteValue(zVal - z) > precision
            return false
        end
        return true
    end

    /*
    This action sets the vector to the zero vector, meaning the x, y, and z
    components will be set to 0.

    Attribute: Author Amanda Austin

    Attribute: Returns The calling vector set to the zero vector

    Attribute: Example

    use Libraries.Compute.Vector3

    Vector2 vector
    vector:SetZero()
    
    number newX = vector:GetX()
    number newY = vector:GetY()
    number newZ = vector:GetZ()

    output "The new vector is: [" + newX + ", " + newY + ", " + newZ + "]"

    */
    action SetZero returns Vector3
        x = 0
        y = 0
        z = 0
        return me
    end

end