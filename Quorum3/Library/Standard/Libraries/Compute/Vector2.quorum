package Libraries.Compute

use Libraries.Compute.all
use Libraries.Containers.Array

/*
Vector2 is a class representing a vector in 2D space.

Attribute: Author Amanda Austin

Attribute: Example

use Libraries.Compute.Vector2

Vector2 firstVector
Vector2 secondVector

firstVector:Set(3.0, 4.0)
secondVector:Set(2.0, 3.0)

number dotProduct = firstVector:DotProduct(secondVector)
output dotProduct
*/
class Vector2

    Math math

    number x = 0
    number y = 0
    constant number radiansToDegrees = 180 / math:pi
    constant number degreesToRadians = math:pi / 180

    /*
    This action returns the current x-coordinate of the vector.

    Attribute: Author Amanda Austin

    Attribute: Returns the x-coordinate of the vector

    Attribute: Example

    use Libraries.Compute.Vector2

    Vector2 vector
    vector:Set(4.0, 3.0)
    number x = vector:GetX()
    output "The x-coordinate is " + x
    */
    action GetX returns number
        return x
    end

    /*
    This action returns the current y-coordinate of the vector.

    Attribute: Author Amanda Austin

    Attribute: Returns the y-coordinate of the vector

    Attribute: Example

    use Libraries.Compute.Vector2

    Vector2 vector
    vector:Set(4.0, 3.0)
    number y = vector:GetY()
    output "The y-coordinate is " + y
    */
    action GetY returns number
        return y
    end

    /*
    This action sets the vector's coordinates to the coordinates of the passed
    vector.

    Attribute: Author Amanda Austin

    Attribute: Parameter vector the vector to use to set the coordinates

    Attribute: Returns the calling vector

    Attribute: Example

    use Libraries.Compute.Vector2

    Vector2 firstVector
    firstVector:Set(2.4, 4.3)
    
    Vector2 secondVector
    secondVector:Set(firstVector)
    */
    action Set(Vector2 vector) returns Vector2
        x = vector:GetX()
        y = vector:GetY()
        return me
    end

    /*
    This action sets the x and y coordinates of the vector to the passed x and
    y values.

    Attribute: Author Amanda Austin

    Attribute: Parameter xValue the value to set as the x-coordinate
    Attribute: Parameter yValue the value to set as the y-coordinate

    Attribute: Returns the calling vector

    Attribute: Example

    use Libraries.Compute.Vector2
    
    Vector2 vector
    vector:Set(8.8, 4.2)
    */
    action Set(number xValue, number yValue) returns Vector2
        x = xValue
        y = yValue
        return me
    end

    /*
    This action returns a copy of the current vector. The new vector's x and
    y coordinates are the same as the calling vector's x and y coordinates.

    Attribute: Author Amanda Austin

    Attribute: Returns a new vector that is a copy of the calling vector

    Attribute: Example
    
    use Libraries.Compute.Vector2

    Vector2 vector
    vector:Set(4.8, 3.2)
    
    Vector2 copyVector
    copyVector = vector:Copy()
    */
    action Copy returns Vector2
        Vector2 vector
        vector:Set(me:x, me:y)
        return vector
    end

    /*
    This action returns the length of the vector with the passed x and y
    coordinates measured from the origin (0, 0).

    Attribute: Author Amanda Austin

    Attribute: Parameter x The x-coordinate of the vector
    Attribute: Parameter y The y-coordinate of the vector

    Attribute: Returns The length of the vector

    Attribute: Example

    use Libraries.Compute.Vector2

    Vector2 vector
    
    number length = vector:Length(3.0, 4.0)
    output "The length of the vector is " + length
    */
    action Length(number x, number y) returns number
        return math:SquareRoot(x * x + y * y)
    end


    /*
    This action returns the length of the vector measured from the origin (0, 0)

    Attribute: Author Amanda Austin

    Attribute: Returns the length of the calling vector

    Attribute: Example

    use Libraries.Compute.Vector2

    Vector2 vector
    vector:Set(3.0, 4.0)
    
    number length = vector:Length()
    output "The length of the vector is " + length
    */
    action Length returns number
        return math:SquareRoot(x * x + y * y)
    end

    /*
    This action returns the square of the length of the vector with the passed x 
    and y coordinates measured from the origin (0, 0).

    Attribute: Author Amanda Austin

    Attribute: Parameter x The x-coordinate of the vector
    Attribute: Parameter y The y-coordinate of the vector

    Attribute: Returns The square of the length of the vector

    Attribute: Example

    use Libraries.Compute.Vector2

    Vector2 vector
    
    number lengthSquared = vector:LengthSquared(3.0, 4.0)
    output "The square of the length of the vector is " + lengthSquared
    */
    action LengthSquared(number x, number y) returns number
        return x * x + y * y
    end

    /*
    This action returns the square of the length of the vector measured from the 
    origin (0, 0).

    Attribute: Author Amanda Austin

    Attribute: Returns The square of the length of the calling vector

    Attribute: Example

    use Libraries.Compute.Vector2

    Vector2 vector
    vector:Set(3.0, 4.0)
    
    number lengthSquared = vector:LengthSquared()
    output "The square of the length of the vector is " + lengthSquared
    */
    action LengthSquared() returns number
        return x * x + y * y
    end

    /*
    This action subtracts the passed vector from the calling vector. For example,
    if A and B are vectors, then this action will compute A - B. This changes
    the calling vector to the result of the subtraction. Using the above 
    example, this results in A = A - B

    Attribute: Author Amanda Austin

    Attribute: Parameter The vector to subtract
    
    Attribute: Returns The calling vector after subtraction

    Attribute: Example
    
    use Libraries.Compute.Vector2
    
    Vector2 firstVector
    Vector2 secondVector

    firstVector:Set(9.0, 8.0)
    secondVector:Set(6.0, 5.0)
    
    firstVector:Subtract(secondVector)
    
    number newX = firstVector:GetX()
    number newY = firstVector:GetY()

    output "The new vector is: [" newX + ", " + newY + "]"
    */
    action Subtract(Vector2 vector) returns Vector2
        x = x - vector:GetX()
        y = y - vector:GetY()
        return me
    end

    /*
    This action subtracts a vector with the passed coordinates from the calling 
    vector. This action changes the calling vector to the result of the
    subtraction.

    Attribute: Author Amanda Austin

    Attribute: Parameter xValue The x coordinate of the vector to subtract
    Attribute: Parameter yValue The y coordinate of the vector to subtract
    
    Attribute: Returns The calling vector after subtraction

    Attribute: Example
    
    use Libraries.Compute.Vector2
    
    Vector2 vector

    vector:Set(9.0, 8.0)
    
    vector:Subtract(7.3, 2.7)
    
    number newX = vector:GetX()
    number newY = vector:GetY()

    output "The new vector is: [" newX + ", " + newY + "]"
    */
    action Subtract(number xValue, number yValue) returns Vector2
        x = x - xValue
        y = y - yValue
        return me
    end

    /*
    This action produces a normalized vector with the same direction as the
    original vector but with a length of 1. This action changes the calling
    vector to the normalized vector.

    Attribute: Author Amanda Austin

    Attribute: Returns the normalized vector with a length of 1

    Attribute: Example

    use Libraries.Compute.Vector2

    Vector2 vector
    vector:Set(23.4, 43.2)
    vector:Normalize()

    number newX = vector:GetX()
    number newY = vector:GetY()

    output "The normalized vector is: [" newX + ", " + newY + "]"
    */
    action Normalize returns Vector2
        number length = Length()
        if length not= 0
            x = x / length
            y = y / length
        end
        return me
    end

    /*
    This action adds the passed vector to the calling vector. This action
    changes the calling vector to the result of the addition.

    Attribute: Author Amanda Austin

    Attribute: Parameter The vector to add
    
    Attribute: Returns The calling vector after addition

    Attribute: Example

    use Libraries.Compute.Vector2

    Vector2 firstVector
    Vector2 secondVector

    firstVector:Set(3.2, 5.5)
    secondVector:Set(8.3, 4.2)
    
    firstVector:Add(secondVector)

    number newX = firstVector:GetX()
    number newY = firstVector:GetY()

    output "The new vector is: [" newX + ", " + newY + "]"    
    */
    action Add(Vector2 vector) returns Vector2
        x = x + vector:GetX()
        y = y + vector:GetY()
        return me
    end


    /*
    This action adds the vector with the passed x and y coordinates to the
    calling vector. This changes the calling vector to the result of the 
    addition.
    
    Attribute: Author Amanda Austin

    Attribute: Parameter xValue The x-coordinate of the vector to add
    Attribute: Parameter yValue The y-coordinate of the vector to add

    Attribute: Returns The calling vector after addition

    Attribute: Example

    use Libraries.Compute.Vector2

    Vector2 vector
    vector:Set(4.3, 8.1)

    vector:Add(3.3, 9.2)
    
    number newX = vector:GetX()
    number newY = vector:GetY()

    output "The new vector is: [" newX + ", " + newY + "]"
    */
    action Add(number xValue, number yValue) returns Vector2
        x = x + xValue
        y = y + yValue
        return me
    end

    action DotProduct(number x1, number y1, number x2, number y2) returns number
        return x1 * x2 + y1 * y2
    end

    action DotProduct(Vector2 vector) returns number
        return x * vector:GetX() + y * vector:GetY()
    end

    action DotProduct(number xValue, number yValue) returns number
        return x * xValue + y * yValue
    end

    action Scale(number scalar) returns Vector2
        x = x * scalar
        y = y * scalar
        return me
    end

    action Scale(number xValue, number yValue) returns Vector2
        x = x * xValue
        y = y * yValue
        return me
    end

    action Scale(Vector2 vector) returns Vector2
        x = x * vector:GetX()
        y = y * vector:GetY()
        return me
    end

    action MultiplyAndAdd (Vector2 vector, number scalar) returns Vector2
        x = x + vector:GetX() * scalar
        y = y + vector:GetY() * scalar
        return me
    end

    action MultiplyAndAdd(Vector2 addVector, Vector2 multiplyVector) returns Vector2
        x = x + addVector:GetX() * multiplyVector:GetX()
        y = y + addVector:GetY() * multiplyVector:GetY()
        return me
    end

    action Distance (number x1, number y1, number x2, number y2) returns number
        constant number x_d = x2 - x1
        constant number y_d = y2 - y1
        return math:SquareRoot(x_d * x_d + y_d * y_d)
    end

    action Distance (Vector2 vector) returns number
        constant number x_d = vector:GetX() - x
        constant number y_d = vector:GetY() - y
        return math:SquareRoot(x_d * x_d + y_d * y_d)
    end

    action Distance (number xValue, number yValue) returns number
        constant number x_d = xValue - x
        constant number y_d = yValue - y
        return math:SquareRoot(x_d * x_d + y_d * y_d)
    end

    action DistanceSquared (number x1, number y1, number x2, number y2) returns number
        constant number x_d = x2 - x1
        constant number y_d = y2 - y1
        return x_d * x_d + y_d * y_d
    end

    action DistanceSquared (Vector2 vector) returns number
        constant number x_d = vector:GetX() - x
        constant number y_d = vector:GetY() - y
        return x_d * x_d + y_d * y_d
    end

    action DistanceSquared (number xValue, number yValue) returns number
        constant number x_d = xValue - x
        constant number y_d = yValue - y
        return x_d * x_d + y_d * y_d
    end

    action Limit (number limit) returns Vector2
        return LimitSquared(limit * limit)
    end

    action LimitSquared(number limit2) returns Vector2
        number length2 = LengthSquared()
        if length2 > limit2
            return Scale(math:SquareRoot(limit2 / length2))
        end
        return me
    end

    action Clamp (number min, number max) returns Vector2
        constant number lengthSquared = LengthSquared()

        if lengthSquared = 0.0
            return me
        end

        number max2 = max * max

        if lengthSquared > max2
            return Scale(math:SquareRoot(max2 /lengthSquared))
        end

        number min2 = min * min

        if lengthSquared < min2
            return Scale(math:SquareRoot(min2 /lengthSquared))
        end

        return me
    end

    action ToText() returns text
        return "[" + x + ":" + y + "]"
    end

    action SetLength(number length) returns Vector2
        return SetLengthSquared(length * length)
    end

    action SetLengthSquared(number lengthSquared) returns Vector2
        number oldLengthSquared = LengthSquared()
        if oldLengthSquared = 0 or oldLengthSquared = lengthSquared
            return me
        else
            return Scale(math:SquareRoot(lengthSquared / oldLengthSquared))
        end
    end

//    action Multiply(Matrix3 matrix) returns Vector2
//        number x = me:x + matrix:values:Get(0) + me:y * matrix:values:Get(3) + matrix:values:Get(6)
//        number y = me:x + matrix:values:Get(1) + me:y * matrix:values:Get(4) + matrix:values:Get(7)
//        me:x = x
//        me:y = y
//        return me
//    end

    action CrossProduct (Vector2 vector) returns number
        return x * vector:GetY() - y * vector:GetX()
    end

    action CrossProduct (number xValue, number yValue) returns number
        return x * yValue - y * xValue
    end

    action Angle returns number
        number angle = math:InverseTangent(y, x) * radiansToDegrees
        if angle < 0
            angle = angle + 360
        end
        return angle
    end

    action Angle (Vector2 vector) returns number
	return math:InverseCosine(me:DotProduct(vector) / (me:Length() * vector:Length())) * radiansToDegrees
    end

    action AngleInRadians () returns number
        return math:InverseTangent(y, x)
    end

    action AngleInRadians(Vector2 vector) returns number
        return math:InverseCosine(me:DotProduct(vector) / (me:Length() * vector:Length()))
    end

    action SetAngle (number degrees) returns Vector2
        return SetAngleInRadians(degrees * degreesToRadians)
    end

    action SetAngleInRadians (number radians) returns Vector2
        Set(Length(), 0.0)
        RotateRadians(radians)
        return me
    end

    action Rotate (number degrees) returns Vector2
        return RotateRadians(degrees * degreesToRadians)
    end
    
   /* check this */
    action RotateRadians (number radians) returns Vector2
        number cos = math:Cosine(radians)
        number sin = math:Sine(radians)
        number newX = x * cos - y * sin
        number newY = x * sin + y * cos
        x = newX
        y = newY
        return me
    end

    action Rotate90Degrees (integer direction) returns Vector2
        number xValue = x
        if direction >= 0
            x = y * -1.0
            y = xValue
        else
            x = y
            y = xValue * -1.0
        end

        return me
    end

    action LinearInterpolation (Vector2 tangent, number alpha) returns Vector2
        constant number invAlpha = 1.0 - alpha
        x = (x * invAlpha) + (tangent:GetX() * alpha)
        y = (y * invAlpha) + (tangent:GetY() * alpha)
        return me
    end

    /* needs Interpolation class
    action interpolate (Vector2 target, number alpha, Interpolation interpolation)
        return LinearInterpolation(target, interpolation:Apply(alpha))
    end */

   /* action hashCode() returns integer
        integer prime = 31
        integer result = 1
        result = prime * result + numberUtils:floatToIntBits(x)
        result = prime * result + numerUtils:floatToIntBits(y)
        return result
    end */

    /* action equals (Object object) returns boolean
        if me = object
            return true
        end
        
        if object = undefined
            return false
        end */

    action EqualsAtPrecision (Vector2 vector, number precision) returns boolean

        if vector = undefined
            return false

        elseif math:AbsoluteValue(vector:GetX() - x) > precision
            return false

        elseif math:AbsoluteValue(vector:GetY() - y) > precision
            return false

        end

        return true

    end

    action EqualsAtPrecision (number xValue, number yValue, number precision) returns boolean
        if math:AbsoluteValue(xValue - x) > precision
            return false
        elseif math:AbsoluteValue(yValue - y) > precision
            return false
        end
        return true
    end

    action IsUnit() returns boolean 
        return IsUnit(0.000000001)
    end

    action IsUnit(number margin) returns boolean
        if math:AbsoluteValue(LengthSquared() - 1.0) < margin
	    return true
        else
	    return false
        end
    end

    action IsZero() returns boolean
        return x = 0 and y = 0
    end

    action IsZero (number margin)  returns boolean
        return LengthSquared() < margin
    end

    action IsOnLine (Vector2 other) returns boolean
        return math:AbsoluteValue(x * other:GetY() - y * other:GetX()) <= 0.000001
    end
    
    action IsOnLine (Vector2 other, number epsilon) returns boolean
        return math:AbsoluteValue(x * other:GetY() - y * other:GetX()) <= epsilon
    end

    action IsCollinear (Vector2 other, number epsilon) returns boolean
        return IsOnLine(other, epsilon) and DotProduct(other) > 0.0
    end

    action IsCollinear (Vector2 other) returns boolean
        return IsOnLine(other) and DotProduct(other) > 0.0
    end

    action IsCollinearOpposite (Vector2 other, number epsilon) returns boolean
        return IsOnLine(other, epsilon) and DotProduct(other) < 0.0
    end

    action IsCollinearOpposite (Vector2 other) returns boolean
        return IsOnLine(other) and DotProduct(other) < 0.0
    end

    action IsPerpendicular (Vector2 vector) returns boolean
        return math:AbsoluteValue(DotProduct(vector)) <= 0.000001
    end

    action IsPerpendicular (Vector2 vector, number epsilon) returns boolean
        //return mathUtils:IsZero(DotProduct(vector), epsilon)
        return math:AbsoluteValue(DotProduct(vector)) <= epsilon
    end

    action HasSameDirection (Vector2 vector) returns boolean
        return DotProduct(vector) > 0
    end

    action HasOppositeDirection (Vector2 vector) returns boolean
        return DotProduct(vector) < 0
    end

    action SetZero returns Vector2
        x = 0
        y = 0
        return me
    end
    
end