package Libraries.Compute

use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Compute.Vector3
use Libraries.Compute.Matrix4
use Libraries.Compute.Matrix3


/*
Quaternion is a class representing a quaternion, which are useful for 3D computer
graphics.

Attribute: Author Amanda Austin

Attribute: Example

use Libraries.Compute.Quaternion

Quaternion quaternion

quaternion:Set(1, 2, 3, 4)

number length = quaternion:Length()

output "The length of the quaternion is " + length

*/
class Quaternion    
    number x = 0
    number y = 0
    number z = 0
    number w = 0

    constant number DECIMAL_ROUNDING_ERROR = 0.000001

    Math math

    /*
    This action sets the quaternion's values to the passed values.

    Attribute: Author Amanda Austin

    Attribute: Parameter x The value to set as the quaternion's x
    Attribute: Parameter y The value to set as the quaternion's y
    Attribute: Parameter z The value to set as the quaternion's z
    Attribute: Parameter w The value to set as the quaternion's w

    Attribute: Returns The quaternion after setting

    Attribute: Example

    use Libraries.Compute.Quaternion

    Quaternion quaternion

    quaternion:Set(1, 2, 3, 4)

    number x = quaternion:GetX()
    number y = quaternion:GetY()
    number z = quaternion:GetZ()
    number w = quaternion:GetW()
    
    output "The quaternion is: [" + x + ", " + y + ", " + z + ", " + w + "]"

    */
    action Set(number x, number y, number z, number w) returns Quaternion
	me:x = x
	me:y = y
	me:z = z
	me:w = w
        return me
    end

    /*
    This action sets the quaternion using the x, y, z, and w values from the
    passed quaternion.

    Attribute: Author Amanda Austin

    Attribute: Parameter quaternion The quaternion to use to set the values of this quaternion
    
    Attribute: Returns The quaternion after setting

    Attribute: Example

    use Libraries.Compute.Quaternion

    Quaternion quaternion
    Quaternion setQuaternion

    setQuaternion:Set(1, 2, 3, 4)

    quaternion:Set(setQuaternion)

    number x = quaternion:GetX()
    number y = quaternion:GetY()
    number z = quaternion:GetZ()
    number w = quaternion:GetW()
    
    output "The quaternion is: [" + x + ", " + y + ", " + z + ", " + w + "]"

    */
    action Set(Quaternion quaternion) returns Quaternion
        return Set(quaternion:GetX(), quaternion:GetY(), quaternion:GetZ(), quaternion:GetW())
    end

    /*
    This action sets the quaternion from the given axis and the angle around the
    axis.

    Attribute: Author Amanda Austin
    
    Attribute: Parameter axis The axis
    Attribute: Parameter angle The angle around the axis in degrees

    Attribute: Returns The quaternion after setting

    Attribute: Example

    use Libraries.Compute.Quaternion
    use Libraries.Compute.Vector3

    Quaternion quaternion

    Vector3 axis
    axis:Set(1, 0, 0)

    quaternion:Set(axis, 45)

    number x = quaternion:GetX()
    number y = quaternion:GetY()
    number z = quaternion:GetZ()
    number w = quaternion:GetW()
    
    output "The quaternion is: [" + x + ", " + y + ", " + z + ", " + w + "]"

    */
    action Set(Vector3 axis, number angle) returns Quaternion
        return SetFromAxis(axis:GetX(), axis:GetY(), axis:GetZ(), angle)
    end

    /*
    This action creates and returns a copy of the quaternion.
    
    Attribute: Author Amanda Austin

    Attribute: Returns a new quaternion that is a copy of this quaternion

    Attribute: Example

    use Libraries.Compute.Quaternion

    Quaternion quaternion
    quaternion:Set(1, 2, 3, 4)

    Quaternion copy
    
    copy = quaternion:Copy()

    number x = copy:GetX()
    number y = copy:GetY()
    number z = copy:GetZ()
    number w = copy:GetW()
    
    output "The quaternion is: [" + x + ", " + y + ", " + z + ", " + w + "]"

    */
    action Copy returns Quaternion
        Quaternion ret
        ret:Set(me)
        return ret
    end

    /*
    This action gets the x value of the quaternion

    Attribute: Author Amanda Austin

    Attribute: Returns The x value of the quaternion

    Attribute: Example

    use Libraries.Compute.Quaternion

    Quaternion quaternion

    quaternion:Set(1, 2, 3, 4)

    number x = quaternion:GetX()

    output "The x value of the quaternion is " + x

    */
    action GetX returns number
	return x
    end

    /*
    This action gets the y value of the quaternion

    Attribute: Author Amanda Austin

    Attribute: Returns The y value of the quaternion

    Attribute: Example

    use Libraries.Compute.Quaternion

    Quaternion quaternion

    quaternion:Set(1, 2, 3, 4)

    number y = quaternion:GetY()

    output "The y value of the quaternion is " + y

    */
    action GetY returns number
	return y
    end

    /*
    This action gets the z value of the quaternion

    Attribute: Author Amanda Austin

    Attribute: Returns The z value of the quaternion

    Attribute: Example

    use Libraries.Compute.Quaternion

    Quaternion quaternion

    quaternion:Set(1, 2, 3, 4)

    number z = quaternion:GetZ()

    output "The z value of the quaternion is " + z

    */
    action GetZ returns number
	return z
    end

    /*
    This action gets the w value of the quaternion

    Attribute: Author Amanda Austin

    Attribute: Returns The w value of the quaternion

    Attribute: Example

    use Libraries.Compute.Quaternion

    Quaternion quaternion

    quaternion:Set(1, 2, 3, 4)

    number w = quaternion:GetW()

    output "The w value of the quaternion is " + w

    */
    action GetW returns number
	return w
    end

    /*
    This action returns the length of the quaternion with the passed x, y, z,
    and w values.

    Attribute: Author Amanda Austin

    Attribute: Parameter x The x value of the quaternion
    Attribute: Parameter y The y value of the quaternion
    Attribute: Parameter z The z value of the quaternion
    Attribute: Parameter w The w value of the quaternion

    Attribute: Returns The length of the quaternion

    Attribute: Example

    use Libraries.Compute.Quaternion

    Quaternion quaternion

    number length = quaternion:Length(1, 2, 3, 4)
    
    output "The length of the quaternion is " + length

    */
    action Length(number x, number y, number z, number w) returns number
        return math:SquareRoot(x * x + y * y + z * z + w * w)
    end


    /*
    This action returns the length of the quaternion.
    
    Attribute: Author Amanda Austin

    Attribute: Returns The length of the quaternion

    Attribute: Example

    use Libraries.Compute.Quaternion

    Quaternion quaternion

    quaternion:Set(1, 2, 3, 4)

    number length = quaternion:Length()
    
    output "The length of the quaternion is " + length

    */
    action Length returns number
        return math:SquareRoot(x * x + y * y + z * z + w * w)
    end

    /*
    This action sets the quaternion to the given euler angles in degrees

    Attribute: Author Amanda Austin

    Attribute: Parameter yaw The rotation around the y-axis in degrees
    Attribute: Parameter pitch The rotation around the x-axis in degrees
    Attribute: Parameter roll The rotation around the z-axis in degrees

    Attribute: Returns The quaternion after setting

    Attribute: Example

    use Libraries.Compute.Quaternion

    Quaternion quaternion

    quaternion:SetEulerAngles(45, 30, 60)

    number x = quaternion:GetX()
    number y = quaternion:GetY()
    number z = quaternion:GetZ()
    number w = quaternion:GetW()
    
    output "The quaternion is: [" + x + ", " + y + ", " + z + ", " + w + "]"
    
    */
    action SetEulerAngles(number yaw, number pitch, number roll) returns Quaternion
        return SetEulerAnglesRadians(yaw * math:pi / 180, pitch * math:pi / 180, roll * math:pi / 180)
    end

    /*
    This action sets the quaternion to the given euler angles in radians

    Attribute: Author Amanda Austin

    Attribute: Parameter yaw The rotation around the y-axis in radians
    Attribute: Parameter pitch The rotation around the x-axis in radians
    Attribute: Parameter roll The rotation around the z-axis in radians

    Attribute: Returns The quaternion after setting

    Attribute: Example

    use Libraries.Compute.Quaternion
    use Libraries.Compute.Math

    Math math

    Quaternion quaternion

    quaternion:SetEulerAnglesRadians(math:pi / 4, math:pi / 6, math:pi / 3)

    number x = quaternion:GetX()
    number y = quaternion:GetY()
    number z = quaternion:GetZ()
    number w = quaternion:GetW()
    
    output "The quaternion is: [" + x + ", " + y + ", " + z + ", " + w + "]"
    
    */
    action SetEulerAnglesRadians(number yaw, number pitch, number roll) returns Quaternion
        number hr = roll * 0.5
        number shr = math:Sine(hr)
        number chr = math:Cosine(hr)
        number hp = pitch * 0.5
        number shp = math:Sine(hp)
        number chp = math:Cosine(hp)
        number hy = yaw * 0.5
        number shy = math:Sine(hy)
        number chy = math:Cosine(hy)
        number chy_shp = chy * shp
        number shy_chp = shy * chp
        number chy_chp = chy * chp
        number shy_shp = shy * shp

        x = (chy_shp * chr) + (shy_chp * shr)
        y = (shy_chp * chr) - (chy_shp * shr)
        z = (chy_chp * shr) - (shy_shp * chr)
        w = (chy_chp * chr) + (shy_shp * shr)
        return me
    end

    /*
    This action gets the pole of the gimbal lock if there is one.

    Attribute: Returns: 1 for the north pole, -1 for the south pole, 0 if there is no gimbal lock

    Attribute: Example

    use Libraries.Compute.Quaternion

    Quaternion quaternion

    quaternion:Set(1, 2, 3, 4)

    number pole = quaternion:GetGimbalPole()

    if pole = 1
        output "The gimbal pole is the north pole."
    elseif pole = -1
        output "The gimbal pole is the south pole."
    else
        output "There is no gimbal pole."
    end

    */
    action GetGimbalPole returns integer
        number t = y * x + z * w
        if t > 0.499
            return 1
        elseif t < -0.499
            return -1
        else
            return 0
        end
    end

    /*
    This action gets the roll euler angle in radians, which is the rotation around
    the z-axis. The quaternion must be normalized before calling this action.

    Attribute: Author Amanda Austin

    Attribute: Returns The rotation around the z-axis in radians

    Attribute: Example

    use Libraries.Compute.Quaternion

    Quaternion quaternion

    quaternion:Set(1, 2, 3, 4)

    quaternion:Normalize()

    number roll = quaternion:GetRollRadians()

    output "The roll in radians is " + roll

    */
    action GetRollRadians returns number
        integer pole = GetGimbalPole()
        if pole = 0
            return math:InverseTangent(2.0 * (w * z + y * x), 1.0 - 2.0 *(x * x + z * z))
        else
            return pole * 2.0 * math:InverseTangent(y, w)
        end
    end

    /*
    This action gets the roll euler angle in degrees, which is the rotation around
    the z-axis. The quaternion must be normalized before calling this action.

    Attribute: Author Amanda Austin

    Attribute: Returns The rotation around the z-axis in degrees

    Attribute: Example

    use Libraries.Compute.Quaternion

    Quaternion quaternion

    quaternion:Set(1, 2, 3, 4)

    quaternion:Normalize()

    number roll = quaternion:GetRoll()

    output "The roll in degrees is " + roll

    */
    action GetRoll returns number
        return GetRollRadians() * 180 / math:pi
    end

    /*
    This action gets the pitch euler angle in radians, which is the rotation around
    the x-axis. The quaternion must be normalized before calling this action.

    Attribute: Author Amanda Austin

    Attribute: Returns The rotation around the x-axis in radians

    Attribute: Example

    use Libraries.Compute.Quaternion

    Quaternion quaternion

    quaternion:Set(1, 2, 3, 4)

    quaternion:Normalize()

    number pitch = quaternion:GetPitchRadians()

    output "The pitch in radians is " + pitch

    */
    action GetPitchRadians returns number
        integer pole = GetGimbalPole()
        if pole = 0
            return math:InverseSine(Clamp(2.0 * (w * x + z * y), -1.0, 1.0))
        else
            return pole * math:pi * 0.5
        end
    end

    /*
    This action gets the pitch euler angle in degrees, which is the rotation around
    the x-axis. The quaternion must be normalized before calling this action.

    Attribute: Author Amanda Austin

    Attribute: Returns The rotation around the x-axis in degrees

    Attribute: Example

    use Libraries.Compute.Quaternion

    Quaternion quaternion

    quaternion:Set(1, 2, 3, 4)

    quaternion:Normalize()

    number pitch = quaternion:GetPitch()

    output "The pitch in degrees is " + pitch

    */
    action GetPitch returns number
        return GetPitchRadians() * 180 / math:pi
    end

    /*
    This action gets the yaw euler angle in radians, which is the rotation around
    the y-axis. The quaternion must be normalized before calling this action.

    Attribute: Author Amanda Austin

    Attribute: Returns The rotation around the y-axis in radians

    Attribute: Example

    use Libraries.Compute.Quaternion

    Quaternion quaternion

    quaternion:Set(1, 2, 3, 4)

    quaternion:Normalize()

    number yaw = quaternion:GetYawRadians()

    output "The yaw in radians is " + yaw

    */
    action GetYawRadians returns number
        if GetGimbalPole() = 0
            return math:InverseTangent(2.0 * (y * w + x * z), 1.0 - 2.0 * (y * y + x * x))
        else
            return 0.0
        end
    end

    /*
    This action gets the yaw euler angle in degrees, which is the rotation around
    the y-axis. The quaternion must be normalized before calling this action.

    Attribute: Author Amanda Austin

    Attribute: Returns The rotation around the y-axis in degrees

    Attribute: Example

    use Libraries.Compute.Quaternion

    Quaternion quaternion

    quaternion:Set(1, 2, 3, 4)

    quaternion:Normalize()

    number yaw = quaternion:GetYaw()

    output "The yaw in degrees is " + yaw

    */
    action GetYaw returns number
        return GetYawRadians() * 180 / math:pi
    end

    action LengthSquared(number x, number y, number z, number w) returns number
        return x * x + y * y + z * z + w * w
    end
    
    action LengthSquared returns number
        return x * x + y * y + z * z + w * w
    end

    action Normalize returns Quaternion
        number length = LengthSquared()
        if length not= 0.0 and not IsEqual(length, 1.0)
            length = math:SquareRoot(length)
            w = w / length
            x = x / length
            y = y / length
            z = z / length
        end
        return me
    end

    action Conjugate returns Quaternion
        x = -1 * x
        y = -1 * y
        z = -1 * z
        return me
    end

    action Transform(Vector3 vector) returns Vector3
        Quaternion temp2
        Quaternion temp1

        temp2:Set(me)
        temp2:Conjugate()

        temp1:Set(vector:GetX(), vector:GetY(), vector:GetZ(), 0)
        temp1:Multiply(temp2)
        me:Multiply(temp1)

//        temp2:MultiplyLeft(temp1:Set(vector:GetX(), vector:GetY(), vector:GetZ(), 0)):MultiplyLeft(me)

        vector:SetX(temp2:GetX())
        vector:SetY(temp2:GetY())
        vector:SetZ(temp2:GetZ())
        return vector
    end

    action Multiply(Quaternion other) returns Quaternion
        number newX = me:GetW() * other:GetX() + me:GetX() * other:GetW() + me:GetY() * other:GetZ() - me:GetZ() * other:GetY()
        number newY = me:GetW() * other:GetY() + me:GetY() * other:GetW() + me:GetZ() * other:GetX() - me:GetX() * other:GetZ()
        number newZ = me:GetW() * other:GetZ() + me:GetZ() * other:GetW() + me:GetX() * other:GetY() - me:GetY() * other:GetX()
        number newW = me:GetW() * other:GetW() - me:GetX() * other:GetX() - me:GetY() * other:GetY() - me:GetZ() * other:GetZ()
        me:Set(newX, newY, newZ, newW)
        return me
    end

    action Multiply(number x, number y, number z, number w) returns Quaternion
        number newX = me:GetW() * x + me:GetX() * w + me:GetY() * z - me:GetZ() * y
        number newY = me:GetW() * y + me:GetY() * w + me:GetZ() * x - me:GetX() * z
        number newZ = me:GetW() * z + me:GetZ() * w + me:GetX() * y - me:GetY() * x
        number newW = me:GetW() * w - me:GetX() * x - me:GetY() * y - me:GetZ() * z
        me:Set(newX, newY, newZ, newW)
        return me
    end

    action Add(Quaternion quaternion) returns Quaternion
        me:x = me:x + quaternion:GetX()
        me:y = me:y + quaternion:GetY()
        me:z = me:z + quaternion:GetZ()
        me:w = me:w + quaternion:GetW()
        return me
    end

    action Add(number x, number y, number z, number w) returns Quaternion
        me:x = me:x + x
        me:y = me:y + y
        me:z = me:z + z
        me:w = me:w + w
        return me
    end

    action ToMatrix returns Matrix4
        number xx = x * x
        number xy = x * y
        number xz = x * z
        number xw = x * w
        number yy = y * y
        number yz = y * z
        number yw = y * w
        number zz = z * z
        number zw = z * w

        Matrix4 matrix
        matrix:row0column0 = 1 - 2 * (yy + zz)
        matrix:row0column1 = 2 * (xy - zw)
        matrix:row0column2 = 2 * (xz + yw)
        matrix:row0column3 = 0
        matrix:row1column0 = 2 * (xy + zw)
        matrix:row1column1 = 1 - 2 * (xx + zz)
        matrix:row1column2 = 2 * (yz - xw)
        matrix:row1column3 = 0
        matrix:row2column0 = 2 * (xz - yw)
        matrix:row2column1 = 2 * (yz + xw)
        matrix:row2column2 = 1 - 2 * (xx + yy)
        matrix:row2column3 = 0
        matrix:row3column0 = 0
        matrix:row3column1 = 0
        matrix:row3column2 = 0
        matrix:row3column3 = 1

        return matrix
    end

    action SetToIdentity returns Quaternion
        return me:Set(0, 0, 0, 1)
    end

    action IsIdentity returns boolean
        return IsZero(x) and IsZero(y) and IsZero(z) and IsEqual(w, 1.0)
    end

    action IsIdentity(number tolerance) returns boolean
        return IsZero(x, tolerance) and IsZero(y, tolerance) and IsZero(z, tolerance) and IsEqual(w, 1.0, tolerance)
    end

    action SetFromAxis(Vector3 axis, number degrees) returns Quaternion
        return SetFromAxis(axis:GetX(), axis:GetY(), axis:GetZ(), degrees)
    end

    action SetFromAxis(number x, number y, number z, number degrees) returns Quaternion
        return SetFromAxisRadians(x, y, z, degrees * math:pi / 180)
    end

    action SetFromAxisRadians(Vector3 axis, number radians) returns Quaternion
        return SetFromAxisRadians(axis:GetX(), axis:GetY(), axis:GetZ(), radians)
    end

    action SetFromAxisRadians(number x, number y, number z, number radians) returns Quaternion
        Vector3 temp
        number d = temp:Length(x, y, z)
        if d = 0.0
            return SetToIdentity()
        end
        d = 1.0 / d

        number l_angle = 0

        if radians < 0
            l_angle = (math:pi * 2) - (-1 * radians mod (math:pi * 2))
        else
            l_angle = radians mod (math:pi * 2)
        end

        number l_sin = math:Sine(l_angle / 2)
        number l_cos = math:Cosine(l_angle / 2)
        return me:Set(d * x * l_sin, d * y * l_sin, d * z * l_sin, l_cos):Normalize()
    end

    action SetFromMatrix(boolean normalizeAxes, Matrix4 matrix) returns Quaternion
        Matrix4 matrix4
        return SetFromAxes(normalizeAxes, matrix:row0column0, matrix:row0column1, matrix:row0column2,
                                          matrix:row1column0, matrix:row1column1, matrix:row1column2, 
                                          matrix:row2column0, matrix:row2column1, matrix:row2column2)
    end

    action SetFromMatrix(Matrix4 matrix) returns Quaternion
        return SetFromMatrix(false, matrix)
    end

    action SetFromMatrix(boolean normalizeAxes, Matrix3 matrix) returns Quaternion
        Matrix3 matrix3
        return SetFromAxes(normalizeAxes, matrix:row0column0, matrix:row0column1, matrix:row0column2,
                                          matrix:row1column0, matrix:row1column1, matrix:row1column2, 
                                          matrix:row2column0, matrix:row2column1, matrix:row2column2)
    end

    action SetFromMatrix(Matrix3 matrix) returns Quaternion
        return SetFromMatrix(false, matrix)
    end

    action SetFromAxes(number xx, number xy, number xz, number yx, number yy, number yz, number zx, number zy, number zz) returns Quaternion
        return SetFromAxes(false, xx, xy, xz, yx, yy, yz, zx, zy, zz)
    end

    action SetFromAxes(boolean normalizeAxes, number xx, number xy, number xz, number yx, number yy, number yz, number zx, number zy, number zz) returns Quaternion
        Vector3 temp

        if normalizeAxes
            number lx = 1.0 / temp:Length(xx, xy, xz)
            number ly = 1.0 / temp:Length(yx, yy, yz)
            number lz = 1.0 / temp:Length(zx, zy, zz)

            xx = xx * lx
            xy = xy * lx
            xz = xz * lx
            yx = yx * ly
            yy = yy * ly
            yz = yz * ly
            zx = zx * lz
            zy = zy * lz
            zz = zz * lz
        end

        number t = xx + yy + zz

        if t >= 0
            number s = math:SquareRoot(t + 1)
            w = 0.5 * s
            s = 0.5 / s
            x = (zy - yz) * s
            y = (xz - zx) * s
            z = (yx - xy) * s
        elseif xx > yy and xx > zz
            number s = math:SquareRoot(1.0 + xx - yy - zz)
            x = s * 0.5
            s = 0.5 / s
            y = (yx + xy) * s
            z = (xz + zx) * s
            w = (zy - yz) * s
        elseif yy > zz
            number s = math:SquareRoot(1.0 + yy - xx - zz)
            y = s * 0.5
            s = 0.5 / s
            x = (yx + xy) * s
            z = (zy + yz) * s
            w = (xz - zx) * s
        else
            number s = math:SquareRoot(1.0 + zz - xx - yy)
            z = s * 0.5
            s = 0.5 / s
            x = (xz + zx) * s
            y = (zy + yz) * s
            w = (yx - xy) * s
        end

        return me
    end

    action SetFromCross(Vector3 v1, Vector3 v2) returns Quaternion
        number dot = Clamp(v1:DotProduct(v2), -1, 1)
        number angle = math:InverseCosine(dot)
        return SetFromAxisRadians(v1:GetY() * v2:GetZ() - v1:GetZ() * v2:GetY(), v1:GetZ() * v2:GetX() - v1:GetX() * v2:GetZ(), v1:GetX() * v2:GetY() - v1:GetY() * v2:GetX(), angle)
    end

    action SetFromCross(number x1, number y1, number z1, number x2, number y2, number z2) returns Quaternion
        Vector3 temp
        number dot = Clamp(temp:DotProduct(x1, y1, z1, x2, y2, z2), -1, 1)
        number angle = math:InverseCosine(dot)
        return SetFromAxisRadians(y1 * z2 - z1 * y2, z1 * x2 - x1 * z2, x1 * y2 - y1 * x2, angle)
    end

    action SphericalLinearInterpolation(Quaternion endQuaternion, number alpha) returns Quaternion
        number d = me:x * endQuaternion:GetX() + me:y * endQuaternion:GetY() + me:z * endQuaternion:GetZ() + me:w * endQuaternion:GetW()
        number absDot = 0
        if d < 0.0
            absDot = -1 * d
        else
            absDot = d
        end

        number scale0 = 1.0 - alpha
        number scale1 = alpha

        if (1 - absDot) > 0.1
            number angle = math:InverseCosine(absDot)
            number invSinTheta = 1.0 / math:Sine(angle)
            
            scale0 = (math:Sine(1.0 - alpha) * angle) * invSinTheta
            scale1 = (math:Sine(alpha * angle)) * invSinTheta
        end

        if d < 0.0
            scale1 = -1 * scale1
        end

        x = (scale0 * x) + (scale1 * endQuaternion:GetX())
        y = (scale0 * y) + (scale1 * endQuaternion:GetY())
        z = (scale0 * z) + (scale1 * endQuaternion:GetZ())
        w = (scale0 * w) + (scale1 * endQuaternion:GetW())
        
        return me
    end

    action SphericalLinearInterpolation(Array<Quaternion> q) returns Quaternion
        Quaternion temp1

        number w = 1.0 / q:GetSize()
        Set(q:Get(0)):Exponent(w)
        
        integer i = 1        
        repeat while i < q:GetSize()
            Multiply(temp1:Set(q:Get(i)):Exponent(w))
            i = i + 1
        end

        Normalize()
        return me
    end

    action SphericalLinearInterpolation(Array<Quaternion> q, Array<number> w) returns Quaternion
        Quaternion temp1

        Set(q:Get(0)):Exponent(w:Get(0))

        integer i = 1
        repeat while i < q:GetSize()
            Multiply(temp1:Set(q:Get(i)):Exponent(w:Get(i)))
            i = i + 1
        end

        Normalize()
        return me
    end

    action Exponent(number alpha) returns Quaternion
        number normal = Length()
        number normalExp = math:RaiseToPower(normal, alpha)

        number theta = math:InverseCosine(w / normal)
        
        number coeff = 0
        if math:AbsoluteValue(theta) < 0.001
            coeff = normalExp * alpha / normal
        else
            coeff = normalExp * math:Sine(alpha * theta) / (normal * math:Sine(theta))
        end

        w = normalExp * math:Cosine(alpha * theta)
        x = x * coeff
        y = y * coeff
        z = z * coeff

        Normalize()
        return me
    end

    action DotProduct(number x1, number y1, number z1, number w1, number x2, number y2, number z2, number w2) returns number
        return x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2
    end

    action DotProduct(Quaternion other) returns number
        return me:x * other:GetX() + me:y * other:GetY() + me:z * other:GetZ() + me:w * other:GetW()
    end
    
    action DotProduct(number x, number y, number z, number w) returns number
        return me:x * x + me:y * y + me:z * z + me:w * w
    end

    action Multiply(number scalar) returns Quaternion
        me:x = me:x * scalar
        me:y = me:y * scalar
        me:z = me:z * scalar
        me:w = me:w * scalar
        return me
    end

    action GetAxisAngle(Vector3 axis) returns number
        return GetAxisAngleRadians(axis) * 180 / math:pi
    end

    action GetAxisAngleRadians(Vector3 axis) returns number
        if me:w > 1
            me:Normalize()
        end
        
        number angle = 2.0 * math:InverseCosine(me:w)
        number s = math:SquareRoot(1 - me:w * me:w)
        if s < DECIMAL_ROUNDING_ERROR
            axis:SetX(me:x)
            axis:SetY(me:y)
            axis:SetZ(me:z)
        else
            axis:SetX(me:x / s)
            axis:SetY(me:y / s)
            axis:SetZ(me:z / s)
        end
        
        return angle
    end

    action GetAngleRadians returns number
        if me:w > 1
            return 2.0 * math:InverseCosine(me:w / Length())
        else
            return 2.0 * math:InverseCosine(me:w)
        end
    end

    action GetAngle returns number
        return GetAngleRadians() * 180 / math:pi
    end

    action GetSwingTwist(number axisX, number axisY, number axisZ, Quaternion swing, Quaternion twist)
        Vector3 temp

        number d = temp:DotProduct(me:x, me:y, me:z, axisX, axisY, axisZ)
        twist:Set(axisX * d, axisY * d, axisZ * d, me:w):Normalize()

        swing:Set(twist):Conjugate()
        me:Multiply(swing)
//        swing:Set(twist):Conjugate():MultiplyLeft(me)
    end

    action GetSwingTwist(Vector3 axis, Quaternion swing, Quaternion twist)
        GetSwingTwist(axis:GetX(), axis:GetY(), axis:GetZ(), swing, twist)
    end

    action GetAngleAroundRadians(number axisX, number axisY, number axisZ) returns number
        Vector3 temp
        number d = temp:DotProduct(me:x, me:y, me:z, axisX, axisY, axisZ)
        number l2 = LengthSquared(axisX * d, axisY * d, axisZ * d, me:w)
        if IsZero(l2)
            return 0.0
        else 
            return 2.0 * math:InverseCosine(Clamp(me:w / math:SquareRoot(l2), -1.0, 1.0))
        end
    end

    action GetAngleAroundRadians(Vector3 axis) returns number
        return GetAngleAroundRadians(axis:GetX(), axis:GetY(), axis:GetZ())
    end
    
    action GetAngleAround(number axisX, number axisY, number axisZ) returns number
        return GetAngleAroundRadians(axisX, axisY, axisZ) * 180 * math:pi
    end

    action GetAngleAround(Vector3 axis) returns number
        return GetAngleAround(axis:GetX(), axis:GetY(), axis:GetZ())
    end
    
    action Clamp(number value, number min, number max) returns number
        if value < min
            return min
        elseif value > max
            return max
        else
            return value
        end
    end

    action IsEqual(number value1, number value2) returns boolean
        return math:AbsoluteValue(value1 - value2) <= DECIMAL_ROUNDING_ERROR
    end

    action IsEqual(number value1, number value2, number tolerance) returns boolean
        return math:AbsoluteValue(value1 - value2) <= tolerance
    end

    action IsZero(number value) returns boolean
        return math:AbsoluteValue(value) <= DECIMAL_ROUNDING_ERROR
    end

    action IsZero(number value, number tolerance) returns boolean
        return math:AbsoluteValue(value) <= tolerance
    end

end