package Libraries.Game

use Libraries.Game.WebConfiguration

class WebDisplay is GameDisplay
    
    WebConfiguration configuration = undefined

    /* 
    This action sets the ApplicationConfiguration being used by the game,
    which includes data for the screen. The ApplicationConfiguration must be of
    the correct type or otherwise an error will be thrown, i.e., if the
    GameDisplay is a WebDisplay, it must receive a WebConfiguration.
    */
    action SetConfiguration(ApplicationConfiguration config)
        if not (config is WebConfiguration)
            alert("Attempted to configure a WebDisplay with an application configuration that is not used for the web!")
        end
        configuration = cast(WebConfiguration, config)
    end

    /*
    This action returns the ApplicationConfiguration being used by the
    GameDisplay.
    */
    action GetConfiguration returns ApplicationConfiguration
        return configuration
    end

    /*
    This action sets the width and height of the GameDisplay, and optionally
    makes the game full screen. Returns a boolean value indicating whether the
    action was successful - for example, this should typically work on desktops,
    but on mobile devices it will fail and return false.
    */
    system action SetDisplayMode(integer width, integer height, 
                                 boolean fullscreen) returns boolean

    /*
    This action returns the width of the GameDisplay.
    */
    system action GetWidth returns integer

    /*
    This action returns the height of the GameDisplay.
    */
    system action GetHeight returns integer

    /*
    This action sets vSync on or off for the GameDisplay.
    */
    system action SetVSync(boolean vsync)

    /*
    This action returns whether the GameDisplay is resizable or not.
    */
    system action GetResize returns boolean

    /*
    This action returns whether or not the GameDisplay has been resized.
    */
    system action WasResized returns boolean

    /*
    This action tells the GameDisplay to render to the screen.
    */
    system action RequestRendering

    /*
    This action closes the window.
    */
    system action Destroy

    /*
    This action updates the game's timekeeping information.
    */
    system action UpdateTime

    /*
    This action records the time when the action is called, and stores it.
    */
    system action SetLastTime

    /*
    This action updates the game screen without polling the input.
    */
    system action UpdateFalse

    /*
    This action tests how many seconds have passed since the last time that the
    time was updated.
    */
    system action GetSecondsBetweenFrames returns number

    /*
    This action returns the ratio between screen coordinates and pixels.
    */
    system action GetPixelScaleFactor returns number

end