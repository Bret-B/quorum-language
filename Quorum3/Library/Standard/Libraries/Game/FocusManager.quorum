package Libraries.Game

use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Game.InputMonitor
use Libraries.Interface.Item
use Libraries.Interface.Item2D
use Libraries.Interface.Item3D
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Events.FocusListener
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.KeyboardListener
use Libraries.Interface.Events.SelectionEvent

class FocusManager is KeyboardListener

    Array<Item> items
    Array<FocusListener> listeners
    integer index = 0
    GameStateManager manager
    InputMonitor monitor

    /*
    Accepted keyboard controls for navigating the focus or selection.
    Each valid combination of keys is stored in an array of integers, e.g.,
    a default key combination for focusing on the previous item is stored as
    an array containing KeyboardEvent:SHIFT_LEFT and KeyboardEvent:TAB.
    */
//    Array<Array<integer>> focusNextKeys
//    Array<Array<integer>> focusPreviousKeys
//
//    on create
//        SetDefaultFocusKeys()
//    end

    action SetItems(Array<Item> array)
        items = array
    end

    action GetItems returns Array<Item>
        return items
    end

    action Add(Item item)
        if item:IsFocusable()
            items:Add(item)
        end

        if item is Item2D
            Item2D original = cast(Item2D, item)
            Iterator<Item2D> children = original:GetItems()
            repeat while children:HasNext()
                Add(children:Next())
            end
        elseif item is Item3D
            Item3D original = cast(Item3D, item)
            Iterator<Item3D> children = original:GetItems()
            repeat while children:HasNext()
                Add(children:Next())
            end
        end
    end

    action Remove(Item item)
        if items:Has(item)
            items:Remove(item)
        end

        if item is Item2D
            Item2D original = cast(Item2D, item)
            Iterator<Item2D> children = original:GetItems()
            repeat while children:HasNext()
                Remove(children:Next())
            end
        elseif item is Item3D
            Item3D original = cast(Item3D, item)
            Iterator<Item3D> children = original:GetItems()
            repeat while children:HasNext()
                Remove(children:Next())
            end
        end
    end

    action Add(FocusListener listener)
        listeners:Add(listener)
    end

    action Remove(FocusListener listener)
        listeners:Remove(listener)
    end

    action SetFocus(Item item)
        integer i = items:GetFirstLocation(item)
        if i >= 0
            SetFocus(i)
        else
            if item is Item2D
                Item2D item2D = cast(Item2D, item)
                if item2D:GetParent() not= undefined
                    SetFocus(item2D:GetParent())
                end
            elseif item is Item3D
                Item3D item3D = cast(Item3D, item)
                if item3D:GetParent() not= undefined
                    SetFocus(item3D:GetParent())
                end
            end
        end
    end

    private action SetFocus(integer i)
        if items:GetSize() = 0
            return now
        end

        if i < 0
            i = i + items:GetSize()
        elseif i >= items:GetSize()
            i = i mod items:GetSize()
        end
        Item oldFocus = manager:GetFocus()
        Item item = items:Get(i)

        if oldFocus = item
            return now
        end

        FocusEvent event
        event:Initialize(oldFocus, item)
        
        index = i
        manager:SetFocus(item)
        
        if oldFocus not= undefined
            Iterator<FocusListener> iterator = oldFocus:GetFocusListeners()
            repeat while iterator:HasNext()
                FocusListener listener = iterator:Next()
                listener:LostFocus(event)
            end
        end

        if item not= undefined
            Iterator<FocusListener> iterator = item:GetFocusListeners()
            repeat while iterator:HasNext()
                FocusListener listener = iterator:Next()
                listener:GainedFocus(event)
            end
        end

        Iterator<FocusListener> iterator = listeners:GetIterator()
        repeat while iterator:HasNext()
            FocusListener listener = iterator:Next()
            listener:GainedFocus(event)
            listener:LostFocus(event)
        end
    end

    action FocusNextItem
        if GetFocus() = undefined
            SetFocus(0)
        else
            SetFocus(index + 1)
        end
    end

    action FocusPreviousItem
        if GetFocus() = undefined
            SetFocus(items:GetSize() - 1)
        else
            SetFocus(index - 1)
        end
    end

    action GetFocus returns Item
        return manager:GetFocus()
    end

    action SelectionChanged(SelectionEvent event)
        // Dispatch the event as necessary, especially to the accessibility back-end.
    end
end