package Libraries.Game

use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Game.InputMonitor
use Libraries.Interface.Item
use Libraries.Interface.Item2D
use Libraries.Interface.Item3D
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Events.FocusListener
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.KeyboardListener

class FocusManager is KeyboardListener

    Array<Item> items
    integer index = 0
    GameStateManager manager
    InputMonitor monitor

    /*
    Accepted keyboard controls for navigating the focus or selection.
    Each valid combination of keys is stored in an array of integers, e.g.,
    a default key combination for focusing on the previous item is stored as
    an array containing KeyboardEvent:SHIFT_LEFT and KeyboardEvent:TAB.
    */
    Array<Array<integer>> focusNextKeys
    Array<Array<integer>> focusPreviousKeys

    on create
        SetDefaultFocusKeys()
    end

    action SetItems(Array<Item> array)
        items = array
    end

    action GetItems returns Array<Item>
        return items
    end

    action Add(Item item)
        if item:IsFocusable()
            items:Add(item)
        end

        if item is Item2D
            Item2D original = cast(Item2D, item)
            Iterator<Item2D> children = original:GetItems()
            repeat while children:HasNext()
                Add(children:Next())
            end
        elseif item is Item3D
            Item3D original = cast(Item3D, item)
            Iterator<Item3D> children = original:GetItems()
            repeat while children:HasNext()
                Add(children:Next())
            end
        end
    end

    action Remove(Item item)
        if items:Has(item)
            items:Remove(item)
        end

        if item is Item2D
            Item2D original = cast(Item2D, item)
            Iterator<Item2D> children = original:GetItems()
            repeat while children:HasNext()
                Remove(children:Next())
            end
        elseif item is Item3D
            Item3D original = cast(Item3D, item)
            Iterator<Item3D> children = original:GetItems()
            repeat while children:HasNext()
                Remove(children:Next())
            end
        end
    end

    action SetFocus(Item item)
        integer i = items:GetFirstLocation(item)
        if i >= 0
            SetFocus(i)
        else
            if item is Item2D
                Item2D item2D = cast(Item2D, item)
                if item2D:GetParent() not= undefined
                    SetFocus(item2D:GetParent())
                end
            elseif item is Item3D
                Item3D item3D = cast(Item3D, item)
                if item3D:GetParent() not= undefined
                    SetFocus(item3D:GetParent())
                end
            end
        end
    end

    private action SetFocus(integer i)
        if items:GetSize() = 0
            return now
        end

        if i < 0
            i = i + items:GetSize()
        elseif i >= items:GetSize()
            i = i mod items:GetSize()
        end
        Item oldFocus = manager:GetFocus()
        Item item = items:Get(i)

        if oldFocus = item
            return now
        end

        FocusEvent event
        event:Initialize(oldFocus, item)
        
        index = i
        manager:SetFocus(item)
        
        if oldFocus not= undefined
            Iterator<FocusListener> iterator = oldFocus:GetFocusListeners()
            repeat while iterator:HasNext()
                FocusListener listener = iterator:Next()
                listener:LostFocus(event)
            end
        end

        if item not= undefined
            Iterator<FocusListener> iterator = item:GetFocusListeners()
            repeat while iterator:HasNext()
                FocusListener listener = iterator:Next()
                listener:GainedFocus(event)
            end
        end
    end

    action FocusNextItem
        if GetFocus() = undefined
            SetFocus(0)
        else
            SetFocus(index + 1)
        end
    end

    action FocusPreviousItem
        if GetFocus() = undefined
            SetFocus(items:GetSize() - 1)
        else
            SetFocus(index - 1)
        end
    end

    action GetFocus returns Item
        return manager:GetFocus()
    end

    action SetDefaultFocusKeys
        focusNextKeys:Empty()
        focusPreviousKeys:Empty()
        KeyboardEvent keys

        Array<integer> focusNext
        focusNext:Add(keys:TAB)
        focusNextKeys:Add(focusNext)

        Array<integer> focusPreviousLeft
        focusPreviousLeft:Add(keys:TAB)
        focusPreviousLeft:Add(keys:SHIFT_LEFT)
        focusPreviousKeys:Add(focusPreviousLeft)
        
        Array<integer> focusPreviousRight
        focusPreviousRight:Add(keys:TAB)
        focusPreviousRight:Add(keys:SHIFT_RIGHT)
        focusPreviousKeys:Add(focusPreviousRight)
    end

    action PressedKey(KeyboardEvent event)
        if KeysPressed(event, focusNextKeys)
            FocusNextItem()
        elseif KeysPressed(event, focusPreviousKeys)
            FocusPreviousItem()
        end
    end

    /*
    Tests if one of the combinations provided is satisfied, and if the provided
    KeyboardEvent is one of the keys necessary to satisfy that combination.
    */
    private action KeysPressed(KeyboardEvent event, Array<Array<integer>> combinations) returns boolean
        integer i = 0
        integer pressedKeys = monitor:NumberOfKeysPressed()
        repeat while i < combinations:GetSize()
            Array<integer> keys = combinations:Get(i)
            integer j = 0
            boolean hasKey = false

            if pressedKeys not= keys:GetSize()
                j = keys:GetSize()
            end

            /*
            A combination is satisfied only if:
            1. The key given as part of the event is part of the combination.
            2. All other keys in the combination are also held down.
            3. No extra keys are pressed (only keys in the combination are held).
            */
            repeat while j < keys:GetSize()
                integer current = keys:Get(j)
                if event:keyCode = current
                    hasKey = true
                    j = j + 1
                elseif monitor:IsKeyPressed(current)
                    j = j + 1
                else
                    hasKey = false
                    j = keys:GetSize()
                end
            end

            if hasKey
                return true
            end

            i = i + 1
        end

        return false
    end
end