package Libraries.Game

use Libraries.Game.GameInput
use Libraries.Interface.Events.KeyboardListener
use Libraries.Interface.Events.MouseListener
use Libraries.Interface.Events.MouseMovementListener
use Libraries.Interface.Events.MouseWheelListener
use Libraries.Interface.Events.TouchListener
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.TextInputListener
use Libraries.Containers.Array

class WebInput is GameInput
    
    Array<MouseListener> mouseListeners
    Array<MouseMovementListener> mouseMovementListeners
    Array<MouseWheelListener> mouseWheelListeners
    Array<KeyboardListener> keyboardListeners

    /* 
    Arrays storing the events that have occurred. These are filled by the
    CheckForEvents action, and emptied at the end of each call to
    ProcessInputEvents.
    */
    Array<MouseEvent> mouseEvents
    Array<KeyboardEvent> keyboardEvents

    /*
    This action will identify all input events that have occurred and notify
    all relevant event listeners. For certain kinds of input, e.g. mouse or
    touch input, only listeners that were added to the active panel will be
    notified. This action is called automatically by the Game class, so most
    users will never need to use this action directly.
    */
    action ProcessInputEvents
        CheckForEvents(mouseEvents, keyboardEvents)
        Array<Layer> layers = parent:GameInput:layers

        MouseEvent mouseEvent = undefined

        repeat mouseEvents:GetSize() times
            mouseEvent = mouseEvents:RemoveFromFront()

            integer counter = layers:GetSize()
            repeat while counter > 0 and not mouseEvent:WasEventHandled()
                counter = counter - 1
                layers:Get(counter):ProcessMouseEvent(mouseEvent)
            end

            if not mouseEvent:WasEventHandled()
                NotifyMouseListeners(mouseEvent)
            end
        end

        integer counter = 0
        repeat keyboardEvents:GetSize() times
            KeyboardEvent currentEvent = keyboardEvents:Get(counter)
            integer listenerCounter = 0

            repeat keyboardListeners:GetSize() times
                KeyboardListener currentListener = keyboardListeners:Get(listenerCounter)
                if currentEvent:eventType = currentEvent:PRESSED_KEY
                    currentListener:PressedKey(currentEvent)
                elseif currentEvent:eventType = currentEvent:RELEASED_KEY
                    currentListener:ReleasedKey(currentEvent)
                end
            end

            counter = counter + 1
        end

        mouseEvents:Empty()
        keyboardEvents:Empty()
    end

    /*
    Checks for any mouse or keyboard events that have occurred, and adds them to
    the end of the provided arrays.
    */
    private system action CheckForEvents(Array<MouseEvent> mouseEvents, Array<KeyboardEvent> keyboardEvents)

    /*
    This action forwards a mouse event to the listeners that are stored directly
    in the WebInput.
    */
    private action NotifyMouseListeners(MouseEvent event)

        integer counter = 0

        if event:eventType = event:MOVED_MOUSE
            repeat mouseMovementListeners:GetSize() times
                mouseMovementListeners:Get(counter):MovedMouse(event)
                counter = counter + 1
            end

        elseif event:eventType = event:DRAGGED_MOUSE
            repeat mouseMovementListeners:GetSize() times
                mouseMovementListeners:Get(counter):DraggedMouse(event)
                counter = counter + 1
            end

        elseif event:eventType = event:CLICKED_MOUSE
            repeat mouseListeners:GetSize() times
                mouseListeners:Get(counter):ClickedMouse(event)
                counter = counter + 1
            end

        elseif event:eventType = event:RELEASED_MOUSE
            repeat mouseListeners:GetSize() times
                mouseListeners:Get(counter):ReleasedMouse(event)
                counter = counter + 1
            end

        else
            repeat mouseWheelListeners:GetSize() times
                mouseWheelListeners:Get(counter):ScrolledMouse(event)
                counter = counter + 1
            end
            
        end
    end

    /*
    This action will add a KeyboardListener to the GameInput. The GameInput will
    notify the KeyboardListener if keys are pressed on the keyboard. This action
    is automatically called by the Game class when needed.
    */
    action AddKeyboardListener(KeyboardListener listener)
        keyboardListeners:Add(listener)
    end

    /*
    This action will remove a KeyboardListener from the GameInput. The GameInput
    will no longer notify the given KeyboardListener of KeyboardEvents. This 
    action is automatically called by the Game class when needed.
    */
    action RemoveKeyboardListener(KeyboardListener listener)
        keyboardListeners:Remove(listener)
    end

    /*
    This action adds a MouseListener directly to the GameInput. When the
    GameInput receives a mouse event, it will first check if any of the items
    added to the layers of the Game can handle the event - if none do, then all
    MouseListeners which are added directly to the GameInput will receive the
    event.
    */
    action AddMouseListener(MouseListener listener)
        mouseListeners:Add(listener)
    end

    /*
    This action adds a MouseMovementListener directly to the GameInput. When the
    GameInput receives a mouse event, it will first check if any of the items
    added to the layers of the Game can handle the event - if none do, then all
    MouseMovementListeners which are added directly to the GameInput will 
    receive the event.
    */
    action AddMouseMovementListener(MouseMovementListener listener)
        mouseMovementListeners:Add(listener)
    end

    /*
    This action adds a MouseWheelListener directly to the GameInput. When the
    GameInput receives a mouse event, it will first check if any of the items
    added to the layers of the Game can handle the event - if none do, then all
    MouseWheelListeners which are added directly to the GameInput will 
    receive the event.
    */
    action AddMouseWheelListener(MouseWheelListener listener)
        mouseWheelListeners:Add(listener)
    end

    /*
    This action adds a TouchListener directly to the GameInput. When the
    GameInput receives a touch event, it will first check if any of the items
    added to the layers of the Game can handle the event - if none do, then all
    TouchListeners which are added directly to the GameInput will 
    receive the event.
    */
    action AddTouchListener(TouchListener listener)
        // Do nothing - the web uses mouse input, not touch input.
    end

    /*
    This action removes a MouseListener from the GameInput. It will no longer
    receive mouse events directly from the GameInput.
    */
    action RemoveMouseListener(MouseListener listener)
        mouseListeners:Remove(listener)
    end

    /*
    This action removes a MouseMovementListener from the GameInput. The listener
    will no longer receive events from the GameInput.
    */
    action RemoveMouseMovementListener(MouseMovementListener listener)
        mouseMovementListeners:Remove(listener)
    end

    /*
    This action removes a MouseWheelListener from the GameInput. The listener
    will no longer receive events from the GameInput.
    */
    action RemoveMouseWheelListener(MouseWheelListener listener)
        mouseWheelListeners:Remove(listener)
    end

    /*
    This action removes a TouchListener from the GameInput. The listener will
    no longer receive events from the GameInput.
    */
    action RemoveTouchListener(TouchListener listener)
        // Do nothing - the web uses mouse input, not touch input.
    end

    /*
    This action will add a TextInputListener to the GameInput. The 
    GameInput will notify the TextInputListener when the user provides text
    input to the game via the keyboard.
    */
    action AddTextInputListener(TextInputListener listener)
        // TO-DO
    end

    /*
    This action will remove a TextInputListener from the GameInput. The
    GameInput will no longer notify the given TextInputListener of 
    TextInputEvents. 
    */
    action RemoveTextInputListener(TextInputListener listener)
        // TO-DO
    end
end