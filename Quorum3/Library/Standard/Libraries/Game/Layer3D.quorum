package Libraries.Game

use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.PerspectiveCamera
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.TouchEvent
use Libraries.Containers.Array
use Libraries.Interface.Item3D
use Libraries.Game.Graphics.Painter3D

class Layer3D is Layer

    Array<Item3D> items
    Camera camera = undefined
    Painter3D painter

    on create
        PerspectiveCamera cam
        camera = cam
    end

    /*
    This action will update all of the items contained within this Layer. The
    given number of seconds will be passed to each updated item.
    */
    action Update(number seconds)
        integer counter = 0
        repeat items:GetSize() times
            items:Get(counter):UpdateAll(seconds)
            counter = counter + 1
        end
    end

    /*
    This action will draw all items in this Layer on the screen (if they can be
    drawn and they aren't hidden). If the Layer is currently hidden, then this
    action will do nothing.
    */
    action Draw
        if not IsShowing()
            return now
        end
        
        camera:Update()
        painter:SetCamera(camera)

        painter:Begin()

        integer counter = 0
        repeat items:GetSize() times
            items:Get(counter):Draw(painter)
            counter = counter + 1
        end

        painter:End()
    end

    /*
    This action will set the camera being used by this Layer. The camera is used
    to determine what will be drawn on the screen. Objects will be drawn on the
    screen as they are seen by the Layer's set camera.
    */
    action SetCamera(Camera cam)
        camera = cam
    end

    /*
    This action will return the camera being used by this Layer. The camera is used
    to determine what will be drawn on the screen. Objects will be drawn on the
    screen as they are seen by the Layer's set camera.
    */
    action GetCamera returns Camera
        return camera
    end

    /*
    This action will notify mouse listeners that are a part of this layer of the
    given mouse event.
    */
    action ProcessMouseEvent(MouseEvent event)
        /*
        To be implemented - requires BoundingBox, Ray, and Intersector (or the
        functionality of Intersector). Ray is used to get the PickRay from the
        Camera.
        */
    end

    /*
    This action will notify touch listeners that are a part of this layer of the
    given touch event.
    */
    action ProcessTouchEvent(TouchEvent event)
        /*
        To be implemented - requires BoundingBox, Ray, and Intersector (or the
        functionality of Intersector). Ray is used to get the PickRay from the
        Camera.
        */
    end

end