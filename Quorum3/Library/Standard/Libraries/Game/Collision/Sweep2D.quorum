use Libraries.Compute.Vector2
use Libraries.Compute.Math

package Libraries.Game.Collision

/*
This class describes the motion of a physical item in order to calculate the
Time of Impact (TOI) for continuous collision detection.
*/
class Sweep2D
    public Vector2 localCenter
    public Vector2 center
    public Vector2 center0
    public number angle = 0
    public number angle0 = 0
    public number alpha0 = 0

    Math math

    action Normalize
        // take the floor of angle0 / (2 * pi)
        number temporary = angle0 / (2 * math:pi)
        integer tempInt = cast(integer, temporary)
        if temporary < tempInt
            tempInt = tempInt - 1
        end
        // end floor - result is in tempInt

        number d = 2.0 * math:pi * tempInt
        angle0 = angle0 - d
        angle = angle - d
    end

    action Set(Sweep2D sweep)
        localCenter:Set(sweep:localCenter)
        center0:Set(sweep:center0)
        center:Set(sweep:center)
        angle0 = sweep:angle0
        angle = sweep:angle
        alpha0 = sweep:alpha0
    end

    action GetTransform(Transform2D transform, number beta)
        transform:GetPosition():SetX((1.0 - beta) * center0:GetX() + beta * center:GetX())
        transform:GetPosition():SetY((1.0 - beta) * center0:GetY() + beta * center:GetY())
        number angle = (1.0 - beta) * angle0 + beta * me:angle
        transform:Set(transform:GetPosition(), angle)

        number sine = transform:GetSine()
        number cosine = transform:GetCosine()
        transform:GetPosition():SetX(transform:GetPosition():GetX() - cosine * localCenter:GetX() - sine * localCenter:GetY())
        transform:GetPosition():SetY(transform:GetPosition():GetY() - sine * localCenter:GetX() + cosine * localCenter:GetY())
    end

    action Advance(number alpha)
        number beta = (alpha - alpha0) / (1.0 - alpha0)
        center0:SetX(center0:GetX() + beta * (center:GetX() - center0:GetX()))
        center0:SetY(center0:GetY() + beta * (center:GetY() - center0:GetY()))
        angle0 = angle0 + beta * (angle - angle0)
        alpha0 = alpha
    end
end