use Libraries.Interface.Item2D
use Libraries.Compute.Vector3
use Libraries.Compute.Math
use Libraries.Game.Collision.Item2DNode

package Libraries.Game.Collision

class DynamicBoundingVolumeTreeNode2D

    BoundingBox2D boundingBox
    DynamicBoundingVolumeTreeNode2D treeParent = undefined

    Item2DNode itemNode = undefined

    DynamicBoundingVolumeTreeNode2D leftChild = undefined
    DynamicBoundingVolumeTreeNode2D rightChild = undefined

    integer height = -1
    integer id = -1
    
    /*
    This action sets the id of the Dynamic Bounding Volume Tree Node (2D).
    This action is used internally. 

    Attribute: Parameter id The integer that will be the node id. 

    Attribute: Example

        use Libraries.Game.Collision.DynamicBoundingVolumeTreeNode2D

            DynamicBoundingVolumeTreeNode2D node
            node:Set(0)
    */
    action SetID(integer id)
        me:id = id
    end
    
    /*
    This action gets the id of this node.
    This action is used internally.

    Attribute: Returns The id of this node.

    Attribute: Example

        use Libraries.Game.Collision.DynamicBoundingVolumeTreeNode2D
        use Libraries.Game.Collision.DynamicBoundingVolumeTree2D

            DynamicBoundingVolumeTree2D tree
            DynamicBoundingVolumeTreeNode2D newNode
            newNode:SetID(0)
            integer id = newNode:GetID()
    */
    action GetID returns integer
        return id
    end

    action SetItemNode(Item2DNode itemNode)
        me:itemNode = itemNode
    end

    action GetItemNode returns Item2DNode
        return itemNode
    end

    action GetHeight returns integer
        return height
    end

    action SetHeight(integer height)
        me:height = height
    end

    action GetBoundingBox returns BoundingBox2D
        return boundingBox
    end

    action SetBoundingBox(BoundingBox2D boundingBox)
        me:boundingBox = boundingBox
    end

    action GetParent returns DynamicBoundingVolumeTreeNode2D
        return treeParent
    end

    action SetParent(DynamicBoundingVolumeTreeNode2D treeParent)
        me:treeParent = treeParent
    end

    action GetLeftChild returns DynamicBoundingVolumeTreeNode2D
        return leftChild
    end

    action SetLeftChild(DynamicBoundingVolumeTreeNode2D leftChild)
        me:leftChild = leftChild
    end

    action GetRightChild returns DynamicBoundingVolumeTreeNode2D
        return rightChild
    end

    action SetRightChild(DynamicBoundingVolumeTreeNode2D rightChild)
        me:rightChild = rightChild
    end

    action IsLeaf returns boolean
        return leftChild = undefined
    end
end