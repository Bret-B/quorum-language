use Libraries.Compute.Vector2
use Libraries.Compute.Math
use Libraries.Game.Collision.Shapes.CollisionShape2D
use Libraries.Game.Collision.Transform2D
use Libraries.Game.Collision.BoundingBox2D

package Libraries.Game.Collision.Shapes

class Circle is CollisionShape2D
    Vector2 point

    Math math

    on create
        parent:CollisionShape2D:SetType(parent:CollisionShape2D:CIRCLE)
        SetRadius(0)        
    end

    action Copy returns CollisionShape2D
        Circle shape
        shape:point:SetX(me:point:GetX())
        shape:point:SetY(me:point:GetY())
        shape:SetRadius(parent:CollisionShape2D:GetRadius())
        return shape
    end

    action GetChildCount returns integer
        return 1
    end

    action GetSupportVertex returns Vector2
        return point
    end

    action GetVertexCount returns integer
        return 1
    end

    action GetVertex(integer index) returns Vector2
        return point
    end

    action TestPoint(Transform2D transform, Vector2 point) returns boolean
        number cosine = transform:GetCosine()
        number sine = transform:GetSine()
        number x = transform:GetPosition():GetX()
        number y = transform:GetPosition():GetY()

        number centerX = -1 * (cosine * me:point:GetX() - sine * me:point:GetY() + x - point:GetX())
        number centerY = -1 * (sine * me:point:GetX() + cosine * me:point:GetY() + y - point:GetY())

        return centerX * centerX + centerY * centerY <= parent:CollisionShape2D:GetRadius() * parent:CollisionShape2D:GetRadius()
    end

    action ComputeDistance(Transform2D transform, Vector2 point, integer childIndex, Vector2 normalOut) returns number
        number centerX = transform:GetCosine() * me:point:GetX() - transform:GetSine() * me:point:GetY() + transform:GetPosition():GetX()
        number centerY = transform:GetSine() * me:point:GetX() + transform:GetCosine() * me:point:GetY() + transform:GetPosition():GetY()
        number dx = point:GetX() - centerX
        number dy = point:GetY() - centerY
        number d1 = math:SquareRoot(dx * dx + dy * dy)
        normalOut:SetX(dx * 1 / d1)
        normalOut:SetY(dy * 1 / d1)
        return d1 - parent:CollisionShape2D:GetRadius()
    end

    action ComputeBoundingBox(BoundingBox2D boundingBox, Transform2D transform, integer childIndex)
        number px = transform:GetCosine() * me:point:GetX() - transform:GetSine() * me:point:GetY() + transform:GetPosition():GetX()
        number py = transform:GetSine() * me:point:GetX() + transform:GetCosine() * me:point:GetY() + transform:GetPosition():GetY()
        boundingBox:GetMinimum():SetX(px - parent:CollisionShape2D:GetRadius())
        boundingBox:GetMinimum():SetY(py - parent:CollisionShape2D:GetRadius())
        boundingBox:GetMaximum():SetX(px + parent:CollisionShape2D:GetRadius())
        boundingBox:GetMaximum():SetY(py + parent:CollisionShape2D:GetRadius())
    end

    action ComputeMass(number density) returns number
        return 0
    end
end