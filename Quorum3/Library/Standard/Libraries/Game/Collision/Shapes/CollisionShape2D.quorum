use Libraries.Compute.Vector2
use Libraries.Game.Collision.BoundingBox2D
use Libraries.Game.Collision.PhysicsPosition2D
use Libraries.Game.Physics.Mass2D

package Libraries.Game.Collision.Shapes

class CollisionShape2D
    public constant integer CIRCLE = 0
    public constant integer EDGE = 1
    public constant integer POLYGON = 2
    public constant integer CHAIN = 3

    integer type = POLYGON

    number radius = 0
    
    action SetType(integer type)
        me:type = type
    end

    action GetType returns integer
        return type
    end

    action SetRadius(number radius)
        me:radius = radius
    end

    action GetRadius returns number
        return radius
    end

    blueprint action GetChildCount returns integer

    blueprint action TestPoint(PhysicsPosition2D transform, Vector2 point) returns boolean

    blueprint action ComputeBoundingBox(BoundingBox2D boundingBox, PhysicsPosition2D transform, integer childIndex)
    
    blueprint action ComputeMass(Mass2D mass, number density)

    blueprint action ComputeDistance(PhysicsPosition2D transform, Vector2 point, integer childIndex, Vector2 normalOut) returns number

    blueprint action Copy returns CollisionShape2D

    blueprint action Scale(number scaleX, number scaleY)

    blueprint action ComputeArea returns number
end