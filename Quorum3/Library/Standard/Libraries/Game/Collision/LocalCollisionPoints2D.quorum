use Libraries.Containers.Array
use Libraries.Compute.Vector2
use Libraries.Game.Collision.CollisionPoint2D

package Libraries.Game.Collision


/*
This class records the all of the local collision points during one collision
from the perspective of one of the 2D object that is involved in the collision.
Collision points will be evaluated when a CollisionEvent2D occurs, where the 
CollisionEvent2D uses the narrow phase evaluation to calculate where the
collision points are.
This class is also known as manifolds.
*/
class LocalCollisionPoints2D
    public constant integer MAX_COLLISION_POINTS = 2

    public constant integer CIRCLES = 0 //when two circles collide, both 2D objects are going to be circles
    public constant integer FACE_A = 1  //when circle collide with polygon -OR- polygon collide with polygon, 
    public constant integer FACE_B = 2

    /*
    This records all of the local collision points from the point of view of the 
    first object that is involved in the collision and from the point of view
    of the second object that is involved in the collision.
    */
    Array<CollisionPoint2D> points
    Vector2 localNormal
    Vector2 localPoint
    integer pointCount = 0

    integer type = 1

    on create
        points:SetMaxSize(MAX_COLLISION_POINTS)
        repeat MAX_COLLISION_POINTS times
            CollisionPoint2D point
            points:Add(point)
        end
    end

    action Set(LocalCollisionPoints2D other)
        localNormal:Set(other:localNormal)
        localPoint:Set(other:localPoint)
        pointCount = other:pointCount
        type = other:type

        integer i = 0
        repeat other:pointCount times
            CollisionPoint2D new
            CollisionPoint2D old = other:points:Get(i)
            new:Set(old)
            me:points:Set(i, new)
            i = i + 1
        end
    end

    action GetPoints returns Array<CollisionPoint2D>
            return points
    end

    action GetLocalNormal returns Vector2
        return localNormal
    end

    action SetLocalNormal(Vector2 normal)
        localNormal = normal
    end

    action GetLocalPoint returns Vector2
        return localPoint
    end

    action SetLocalPoint(Vector2 point)
        localPoint = point
    end

    action GetPointCount returns integer
        return pointCount
    end

    action SetPointCount(integer count)
        pointCount = count
    end

    action GetType returns integer
        return type
    end

    action SetType(integer type)
        me:type = type
    end
end