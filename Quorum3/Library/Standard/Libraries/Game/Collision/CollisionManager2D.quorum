use Libraries.Game.Layer2D
use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Game.Collision.BroadphaseCollision2D
use Libraries.Interface.Events.CollisionEvent2D
use Libraries.Interface.Events.CollisionListener2D
use Libraries.Language.Object
use Libraries.Game.Collision.Item2DNode
use Libraries.Game.Collision.ContactEdge2D

package Libraries.Game.Collision

class CollisionManager2D
    BroadphaseCollision2D broadphase
    CollisionEvent2D collisionList = undefined
    integer collisionCount = 0
    Array<CollisionListener2D> listeners

    Layer2D myLayer = undefined
    
    action SetLayer(Layer2D layer)
        myLayer = layer
    end

    action AddPair(Object objectA, Object objectB)
        Item2DNode nodeA = cast(Item2DNode, objectA)
        Item2DNode nodeB = cast(Item2DNode, objectB)

        Item2D itemA = nodeA:item
        Item2D itemB = nodeB:item

        integer indexA = nodeA:childIndex
        integer indexB = nodeB:childIndex

        if itemA = itemB
            return now
        end

        ContactEdge2D edge = itemB:contactList
        repeat while edge not= undefined
            if edge:other = itemA
                Item2D iA = edge:collision:GetItemA()
                Item2D iB = edge:collision:GetItemB()
                integer a = edge:collision:GetChildIndexA()
                integer b = edge:collision:GetChildIndexB()
                
                if iA = itemA and a = indexA and iB = itemB and b = indexB
                    return now
                end

                if iA = itemB and a = indexB and iB = itemA and b = indexA
                    return now
                end
            end

            edge = edge:next
        end

        // create collision event and add to collision event list
        CollisionEvent2D collision
        collision:Initialize(itemA, indexA, itemB, indexB)
        
        collision:SetPrevious(undefined)
        collision:SetNext(collisionList)
        if collisionList not= undefined
            collisionList:SetPrevious(collision)
        end
        collisionList = collision

        // connect collision to itemA
        ContactEdge2D contactNodeA = collision:nodeA
        contactNodeA:collision = collision
        contactNodeA:other = itemB
        contactNodeA:previous = undefined
        contactNodeA:next = itemA:contactList
        ContactEdge2D itemAContactList = itemA:contactList
        if itemAContactList not= undefined
            itemAContactList:previous = collision:nodeA
        end
        itemA:contactList = collision:nodeA

        // connect collision to itemB
        ContactEdge2D contactNodeB = collision:nodeB
        contactNodeB:collision = collision
        contactNodeB:other = itemA
        contactNodeB:previous = undefined
        contactNodeB:next = itemB:contactList
        ContactEdge2D itemBContactList = itemB:contactList
        if itemBContactList not= undefined
            itemBContactList:previous = collision:nodeB
        end
        itemB:contactList = collision:nodeB

        collisionCount = collisionCount + 1
    end

    action FindNewCollisions
        broadphase:UpdatePairs(me)
    end

    action Destroy(CollisionEvent2D collision)
        Item2D itemA = collision:GetItemA()
        Item2D itemB = collision:GetItemB()

        if collision:IsTouching()
            integer i = 0
            repeat while i < listeners:GetSize()
                CollisionListener2D listener = listeners:Get(i)
                listener:FinishCollision(collision)
                i = i + 1
            end
        end

        if collision:GetPrevious() not= undefined
            CollisionEvent2D collisionPrevious = collision:GetPrevious()
            collisionPrevious:SetNext(collision:GetNext())
        end

        if collision:GetNext() not= undefined
            CollisionEvent2D collisionNext = collision:GetNext()
            collisionNext:SetPrevious(collision:GetPrevious())
        end

        if collision = collisionList
            collisionList = collision:GetNext()
        end

        // remove collision from itemA
        ContactEdge2D collisionNodeA = collision:nodeA
        if collisionNodeA:previous not= undefined
            ContactEdge2D collisionNodeAPrevious = collisionNodeA:previous
            collisionNodeAPrevious:next = collision:nodeA:next
        end

        if collisionNodeA:next not= undefined
            ContactEdge2D collisionNodeANext = collisionNodeA:next
            collisionNodeANext:previous = collision:nodeA:previous
        end

        if collisionNodeA = itemA:contactList
            itemA:contactList = collision:nodeA:next
        end

        // remove collision from itemB
        ContactEdge2D collisionNodeB = collision:nodeB
        if collisionNodeB:previous not= undefined
            ContactEdge2D collisionNodeBPrevious = collisionNodeB:previous
            collisionNodeBPrevious:next = collision:nodeB:next
        end

        if collisionNodeB:next not= undefined
            ContactEdge2D collisionNodeBNext = collisionNodeB:next
            collisionNodeBNext:previous = collision:nodeB:previous
        end

        if collisionNodeB = itemB:contactList
            itemB:contactList = collisionNodeB:next
        end

        collisionCount = collisionCount - 1
    end

    action Collide
        CollisionEvent2D collision = collisionList
        repeat while collision not= undefined
            Item2D itemA = collision:GetItemA()
            Item2D itemB = collision:GetItemB()
            integer indexA = collision:GetChildIndexA()
            integer indexB = collision:GetChildIndexB()

            // collision filtering
            // this involves, for example, ignoring collisions where both items
            // are declared as static bodies
            // should we allow user-defined collision filtering?

            integer nodeIDA = itemA:GetNodes():Get(indexA):nodeID
            integer nodeIDB = itemB:GetNodes():Get(indexB):nodeID

            boolean overlap = broadphase:TestOverlap(nodeIDA, nodeIDB)

            if not overlap
                CollisionEvent2D cNuke = collision
                collision = cNuke:GetNext()
                Destroy(cNuke)
            else
                collision:DispatchCollision(listeners)
                collision = collision:GetNext()
            end
        end
    end

    action GetBroadphase returns BroadphaseCollision2D
        return broadphase
    end

    action GetCollisionList returns CollisionEvent2D
        return collisionList
    end

    action GetCollisionCount returns integer
        return collisionCount
    end

    action AddCollisionListener(CollisionListener2D listener)
        listeners:Add(listener)
    end

    action RemoveCollisionListener(CollisionListener2D listener)
        listeners:Remove(listener)
    end
end