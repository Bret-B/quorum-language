package Libraries.Game.Collision.Narrowphase

use Libraries.Containers.Array
use Libraries.Game.Collision.PhysicsPosition2D
use Libraries.Compute.Vector2

/*
This class records a point (count = 1), a line (count = 2), or a triangle
(count = 3).
This class is used internally by the class Distance2D.
*/
class Simplex2D 
    SimplexVertex2D vertex1
    SimplexVertex2D vertex2
    SimplexVertex2D vertex3
    Array<SimplexVertex2D> vertices
    integer count = 0

    on create
        vertices:Add(vertex1)
        vertices:Add(vertex2)
        vertices:Add(vertex3)
    end

    /*
    This action sets where the vertex points for either a point, a line, or a triangles
    are by using a SimplexCache2D object that allows the calculation in the
    Distance2D class to be quicker.
    */
    action ReadCache(SimplexCache2D cache, DistanceProxy2D distanceA, PhysicsPosition2D transformA, DistanceProxy2D distanceB, PhysicsPosition2D transformB)
        count = cache:GetCount()

        integer i = 0
        repeat while i < count
            SimplexVertex2D v = vertices:Get(i)
            v:SetIndexA(cache:GetIndexA():Get(i))
            v:SetIndexB(cache:GetIndexB():Get(i))
            Vector2 wALocal = distanceA:GetVertex(v:GetIndexA())
            Vector2 wBLocal = distanceB:GetVertex(v:GetIndexB())
            v:GetSupportA():SetX((transformA:GetCosine() * wALocal:GetX() - transformA:GetSine() * wALocal:GetY()) + transformA:GetPosition():GetX())
            v:GetSupportA():SetY((transformA:GetSine() * wALocal:GetX() + transformA:GetCosine() * wALocal:GetY()) + transformA:GetPosition():GetY())
            v:GetSupportB():SetX((transformB:GetCosine() * wBLocal:GetX() - transformB:GetSine() * wBLocal:GetY()) + transformB:GetPosition():GetX())
            v:GetSupportB():SetY((transformB:GetSine() * wBLocal:GetX() + transformB:GetCosine() * wBLocal:GetY()) + transformB:GetPosition():GetY())
            v:GetSupport():Set(v:GetSupportB()):Subtract(v:GetSupportA())
            v:SetBarycentricCoordinate(0)
            i = i + 1
        end

        if count > 1
            number metric1 = cache:GetMetric()
            number metric2 = GetMetric()
            if metric2 < 0.5 * metric1 or 2 * metric1 < metric2 or metric2 < 0.00000011920928955078125
                count = 0
            end
        end

        if count = 0
            SimplexVertex2D v = vertices:Get(0)
            v:SetIndexA(0)
            v:SetIndexB(0)
            Vector2 wALocal = distanceA:GetVertex(0)
            Vector2 wBLocal = distanceB:GetVertex(0)
            v:GetSupportA():SetX((transformA:GetCosine() * wALocal:GetX() - transformA:GetSine() * wALocal:GetY()) + transformA:GetPosition():GetX())
            v:GetSupportA():SetY((transformA:GetSine() * wALocal:GetX() + transformA:GetCosine() * wALocal:GetY()) + transformA:GetPosition():GetY())
            v:GetSupportB():SetX((transformB:GetCosine() * wBLocal:GetX() - transformB:GetSine() * wBLocal:GetY()) + transformB:GetPosition():GetX())
            v:GetSupportB():SetY((transformB:GetSine() * wBLocal:GetX() + transformB:GetCosine() * wBLocal:GetY()) + transformB:GetPosition():GetY())
            v:GetSupport():Set(v:GetSupportB()):Subtract(v:GetSupportA())
            count = 1
        end
    end

    /*
    This class updates a SimplexCache2D object with the calculations updated and
    stored in this Simplex2D object from the last iteration of distance
    calculation.
    */
    action WriteCache(SimplexCache2D cache)
        cache:SetMetric(GetMetric())
        cache:SetCount(count)

        integer i = 0
        repeat while i < count
            cache:GetIndexA():Set(i, vertices:Get(i):GetIndexA())
            cache:GetIndexB():Set(i, vertices:Get(i):GetIndexB())
            i = i + 1
        end
    end

    Vector2 e12

    action GetSearchDirection(Vector2 direction)
        if count = 1
            direction:Set(vertex1:GetSupport()):Scale(-1)
        elseif count = 2
            e12:Set(vertex2:GetSupport()):Subtract(vertex1:GetSupport())
            direction:Set(vertex1:GetSupport()):Scale(-1)
            number sign = e12:CrossProduct(direction)

            if sign > 0
                direction:SetX(-1 * e12:GetY())
                direction:SetY(1 * e12:GetX())
            else
                direction:SetX(1 * e12:GetY())
                direction:SetY(-1 * e12:GetX())
            end
        else
            direction:SetZero()
        end
    end

    Vector2 case2
    Vector2 case22

    action GetClosestPoint(Vector2 point)
        if count = 0
            point:SetZero()
        elseif count = 1
            point:Set(vertex1:GetSupport())
        elseif count = 2
            case22:Set(vertex2:GetSupport()):Scale(vertex2:GetBarycentricCoordinate())
            case2:Set(vertex1:GetSupport()):Scale(vertex1:GetBarycentricCoordinate()):Add(case22)
            point:Set(case2)
        elseif count = 3
            point:SetZero()
        else
            point:SetZero()
        end
    end

    Vector2 case3
    Vector2 case33

    action GetWitnessPoints(Vector2 pointA, Vector2 pointB)
        if count = 0
            //nothing
        elseif count = 1
            pointA:Set(vertex1:GetSupportA())
            pointB:Set(vertex1:GetSupportB())
        elseif count = 2
            case2:Set(vertex1:GetSupportA()):Scale(vertex1:GetBarycentricCoordinate())
            pointA:Set(vertex2:GetSupportA()):Scale(vertex2:GetBarycentricCoordinate()):Add(case2)

            case2:Set(vertex1:GetSupportB()):Scale(vertex1:GetBarycentricCoordinate())
            pointB:Set(vertex2:GetSupportB()):Scale(vertex2:GetBarycentricCoordinate()):Add(case2)
        elseif count = 3
            pointA:Set(vertex1:GetSupportA()):Scale(vertex1:GetBarycentricCoordinate())
            case3:Set(vertex2:GetSupportA()):Scale(vertex2:GetBarycentricCoordinate())
            case33:Set(vertex3:GetSupportA()):Scale(vertex3:GetBarycentricCoordinate())
            pointA:Add(case3):Add(case33)
            pointB:Set(pointA)
        else
            //nothing
        end
    end

    action GetMetric returns number
        if count = 0
            return 0
        elseif count = 1
            return 0
        elseif count = 2
            return vertex1:GetSupport():Distance(vertex2:GetSupport())
        elseif count = 3
            case3:Set(vertex2:GetSupport()):Subtract(vertex1:GetSupport())
            case33:Set(vertex3:GetSupport()):Subtract(vertex1:GetSupport())
            return case3:CrossProduct(case33)
        else
            return 0
        end
    end

    action Solve2
        // Solve a line segment using barycentric coordinates.
        //
        // p = a1 * w1 + a2 * w2
        // a1 + a2 = 1
        //
        // The vector from the origin to the closest point on the line is
        // perpendicular to the line.
        // e12 = w2 - w1
        // dot(p, e) = 0
        // a1 * dot(w1, e) + a2 * dot(w2, e) = 0
        //
        // 2-by-2 linear system
        // [1 1 ][a1] = [1]
        // [w1.e12 w2.e12][a2] = [0]
        //
        // Define
        // d12_1 = dot(w2, e12)
        // d12_2 = -dot(w1, e12)
        // d12 = d12_1 + d12_2
        //
        // Solution
        // a1 = d12_1 / d12
        // a2 = d12_2 / d12
        Vector2 w1 = vertex1:GetSupport()
        Vector2 w2 = vertex2:GetSupport()
        e12:Set(w2):Subtract(w1)

        // w1 region
        number d12_2 = -w1:DotProduct(e12)
        if d12_2 <= 0
            // a2 <= 0, so we clamp it to 0
            vertex1:SetBarycentricCoordinate(1)
            count = 1
            return now
        end

        // w2 region
        number d12_1 = w2:DotProduct(e12)
        if d12_1 <= 0
            // a1 <= 0, so we clamp it to 0
            vertex2:SetBarycentricCoordinate(1)
            count = 1
            vertex1:Set(vertex2)
            return now
        end

        // must be in the e12 region
        number inv_d12 = 1 / (d12_1 + d12_2)
        vertex1:SetBarycentricCoordinate(d12_1 * inv_d12)
        vertex2:SetBarycentricCoordinate(d12_2 * inv_d12)
        count = 2
    end

    Vector2 e13
    Vector2 e23
    Vector2 w1
    Vector2 w2
    Vector2 w3

    action Solve3
        w1:Set(vertex1:GetSupport())
        w2:Set(vertex2:GetSupport())
        w3:Set(vertex3:GetSupport())

        // Edge12
        // [1 1 ][a1] = [1]
        // [w1.e12 w2.e12][a2] = [0]
        // a3 = 0
        e12:Set(w2):Subtract(w1)
        number w1e12 = w1:DotProduct(e12)
        number w2e12 = w2:DotProduct(e12)
        number d12_1 = w2e12
        number d12_2 = -w1e12

        // Edge13
        // [1 1 ][a1] = [1]
         // [w1.e13 w3.e13][a3] = [0]
        // a2 = 0
        e13:Set(w3):Subtract(w1)
        number w1e13 = w1:DotProduct(e13)
        number w3e13 = w3:DotProduct(e13)
        number d13_1 = w3e13
        number d13_2 = -w1e13

        // Edge23
        // [1 1 ][a2] = [1]
        // [w2.e23 w3.e23][a3] = [0]
        // a1 = 0
        e23:Set(w3):Subtract(w2)
        number w2e23 = w2:DotProduct(e23)
        number w3e23 = w3:DotProduct(e23)
        number d23_1 = w3e23
        number d23_2 = -w2e23

        number n123 = e12:CrossProduct(e13)

        number d123_1 = n123 * w2:CrossProduct(w3)
        number d123_2 = n123 * w3:CrossProduct(w1)
        number d123_3 = n123 * w1:CrossProduct(w2)

        // w1 region
        if d12_2 <= 0 and d13_2 <= 0
            vertex1:SetBarycentricCoordinate(1)
            count = 1
            return now
        end

        // e12
        if d12_1 > 0 and d12_2 > 0 and d123_3 <= 0
            number inv_d12 = 1 / (d12_1 + d12_2)
            vertex1:SetBarycentricCoordinate(d12_1 * inv_d12)
            vertex2:SetBarycentricCoordinate(d12_2 * inv_d12)
            count = 2
            return now
        end

        // e13
        if d13_1 > 0 and d13_2 > 0 and d123_2 <= 0
            number inv_d13 = 1 / (d13_1 + d13_2)
            vertex1:SetBarycentricCoordinate(d13_1 * inv_d13)
            vertex3:SetBarycentricCoordinate(d13_2 * inv_d13)
            count = 2
            vertex2:Set(vertex3)
            return now
        end

        // w2 region
        if d12_1 <= 0 and d23_2 <= 0
            vertex2:SetBarycentricCoordinate(1)
            count = 1
            vertex1:Set(vertex2)
            return now
        end

        // w3 region
        if d13_1 <= 0 and d23_1 <= 0
            vertex3:SetBarycentricCoordinate(1)
            count = 1
            vertex1:Set(vertex3)
            return now
        end

        // e23
        if d23_1 > 0 and d23_2 > 0 and d123_1 <= 0
            number inv_d23 = 1 / (d23_1 + d23_2)
            vertex2:SetBarycentricCoordinate(d23_1 * inv_d23)
            vertex3:SetBarycentricCoordinate(d23_2 * inv_d23)
            count = 2
            vertex1:Set(vertex3)
            return now
        end

        // must be in triangle 123
        number inv_d123 = 1 / (d123_1 + d123_2 + d123_3)
        vertex1:SetBarycentricCoordinate(d123_1 * inv_d123)
        vertex2:SetBarycentricCoordinate(d123_2 * inv_d123)
        vertex3:SetBarycentricCoordinate(d123_3 * inv_d123)
        count = 3
    end

    action GetVertices returns Array<SimplexVertex2D>
        return vertices
    end

    action GetCount returns integer
        return count
    end

    action SetCount(integer count)
        me:count = count
    end
end