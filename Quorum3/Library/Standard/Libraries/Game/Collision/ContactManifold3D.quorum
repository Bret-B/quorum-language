package Libraries.Game.Collision

use Libraries.Containers.Array
use Libraries.Game.Collision.ManifoldPoint3D
use Libraries.Interface.Item3D
use Libraries.Compute.Vector3
use Libraries.Compute.Math
use Libraries.Compute.Matrix3
use Libraries.Game.Collision.Transform3D

class ContactManifold3D
    public constant integer MAX_MANIFOLD_POINTS = 4

    Array<ManifoldPoint3D> points

    Item3D body0
    Item3D body1
    integer pointCount = 0
    
    public integer index1A = 0

    on create
        repeat MAX_MANIFOLD_POINTS times
            ManifoldPoint3D point
            points:Add(point)
        end
    end

    action Set(Item3D body0, Item3D body1)
        me:body0 = body0
        me:body1 = body1
        pointCount = 0
        index1A = 0
    end

    private action SortCachedPoints(ManifoldPoint3D point) returns integer
        integer maxPenetrationIndex = -1
        number maxPenetration = point:GetDistance()
        integer i = 0
        repeat while i < MAX_MANIFOLD_POINTS
            if points:Get(i):GetDistance() < maxPenetration
                maxPenetrationIndex = i
                maxPenetration = points:Get(i):GetDistance()
            end
    
            i = i + 1
        end

        number res0 = 0
        number res1 = 0
        number res2 = 0
        number res3 = 0
        if maxPenetrationIndex not= 0
            Vector3 a0
            a0:Set(point:localPointA)
            a0:Subtract(points:Get(1):localPointA)

            Vector3 b0
            b0:Set(points:Get(3):localPointA)
            b0:Subtract(points:Get(2):localPointA)

            Vector3 cross
            cross:Set(a0)
            cross:CrossProduct(b0)

            res0 = cross:LengthSquared()
        end

        if maxPenetrationIndex not= 1
            Vector3 a1
            a1:Set(point:localPointA)
            a1:Subtract(points:Get(0):localPointA)

            Vector3 b1
            b1:Set(points:Get(3):localPointA)
            b1:Subtract(points:Get(2):localPointA)

            Vector3 cross
            cross:Set(a1)
            cross:CrossProduct(b1)
            
            res1 = cross:LengthSquared()
        end

        if maxPenetrationIndex not= 2
            Vector3 a2
            a2:Set(point:localPointA)
            a2:Subtract(points:Get(0):localPointA)

            Vector3 b2
            b2:Set(points:Get(3):localPointA)
            b2:Subtract(points:Get(1):localPointA)
            
            Vector3 cross
            cross:Set(a2)
            cross:CrossProduct(b2)

            res2 = cross:LengthSquared()
        end

        if maxPenetrationIndex not= 3
            Vector3 a3
            a3:Set(point:localPointA)
            a3:Subtract(points:Get(0):localPointA)
            
            Vector3 b3
            b3:Set(points:Get(2):localPointA)
            b3:Subtract(points:Get(1):localPointA)
            
            Vector3 cross
            cross:Set(a3)
            cross:CrossProduct(b3)

            res3 = cross:LengthSquared()
        end

        Math math
        res0 = math:AbsoluteValue(res0)
        res1 = math:AbsoluteValue(res1)
        res2 = math:AbsoluteValue(res2)
        res3 = math:AbsoluteValue(res3)

        integer maxIndex = -1
        number maxValue = 0
        maxValue = maxValue:GetMinimumValue()

        if res0 > maxValue
            maxIndex = 0
            maxValue = res0
        end

        if res1 > maxValue
            maxIndex = 1
            maxValue = res1
        end

        if res2 > maxValue
            maxIndex = 2
            maxValue = res2
        end

        if res3 > maxValue
            maxIndex = 3
            maxValue = res3
        end

        return maxIndex
    end

    action GetBody0 returns Item3D
        return body0
    end

    action GetBody1 returns Item3D
        return body1
    end

    action SetBodies(Item3D body0, Item3D body1)
        me:body0 = body0
        me:body1 = body1
    end

    action GetPointCount returns integer
        return pointCount
    end

    action GetContactPoint(integer index) returns ManifoldPoint3D
        return points:Get(index)
    end

    action GetCacheEntry(ManifoldPoint3D newPoint) returns integer
        number shortestDistance = GetContactBreakingThreshold() * GetContactBreakingThreshold()
        integer size = GetPointCount()
        integer nearestPoint = -1
        Vector3 diffA

        integer i = 0
        repeat while i < size
            ManifoldPoint3D mp = points:Get(i)

            diffA:Set(mp:localPointA)
            diffA:Subtract(newPoint:localPointA)

            number distanceToManifoldPoint = diffA:DotProduct(diffA)
            if distanceToManifoldPoint < shortestDistance
                shortestDistance = distanceToManifoldPoint
                nearestPoint = i
            end

            i = i + 1
        end

        return nearestPoint
    end

    action AddManifoldPoint(ManifoldPoint3D newPoint) returns integer
        integer insertIndex = GetPointCount()
        if insertIndex = MAX_MANIFOLD_POINTS
            if MAX_MANIFOLD_POINTS >= 4
                insertIndex = SortCachedPoints(newPoint)
            else
                insertIndex = 0
            end
        else
            pointCount = pointCount + 1
        end
        points:Get(insertIndex):Set(newPoint)
        return insertIndex
    end

    action RemoveContactPoint(integer index)
        integer lastUsedIndex = GetPointCount() - 1
        if index not= lastUsedIndex
            points:Get(index):Set(points:Get(lastUsedIndex))
            points:Get(lastUsedIndex):SetAppliedImpulse(0)
            points:Get(lastUsedIndex):SetLateralFrictionInitialized(false)
            points:Get(lastUsedIndex):SetAppliedImpulseLateral1(0)
            points:Get(lastUsedIndex):SetAppliedImpulseLateral2(0)
            points:Get(lastUsedIndex):SetLifeTime(0)
        end

        pointCount = pointCount - 1
    end

    action ReplaceContactPoint(ManifoldPoint3D newPoint, integer insertIndex)
        integer lifeTime = points:Get(insertIndex):GetLifeTime()
        number appliedImpulse = points:Get(insertIndex):appliedImpulse
        number appliedLateralImpulse1 = points:Get(insertIndex):appliedImpulseLateral1
        number appliedLateralImpulse2 = points:Get(insertIndex):appliedImpulseLateral2

        points:Get(insertIndex):Set(newPoint)
        
        points:Get(insertIndex):SetAppliedImpulse(appliedImpulse)
        points:Get(insertIndex):SetAppliedImpulseLateral1(appliedLateralImpulse1)
        points:Get(insertIndex):SetAppliedImpulseLateral2(appliedLateralImpulse2)
        points:Get(insertIndex):SetLifeTime(lifeTime)
    end

    private action ValidContactDistance(ManifoldPoint3D point) returns boolean
        return point:distance1 <= GetContactBreakingThreshold()
    end

    action RefreshContactPoints(Transform3D transformA, Transform3D transformB)
        Vector3 tmp
        integer i = GetPointCount() - 1

        repeat while i >= 0
            ManifoldPoint3D manifoldPoint = points:Get(i)
            
            manifoldPoint:positionWorldOnA:Set(manifoldPoint:localPointA)
            transformA:Transform(manifoldPoint:positionWorldOnA)

            manifoldPoint:positionWorldOnB:Set(manifoldPoint:localPointB)
            transformB:Transform(manifoldPoint:positionWorldOnB)

            tmp:Set(manifoldPoint:positionWorldOnA)
            tmp:Subtract(manifoldPoint:positionWorldOnB)
            manifoldPoint:distance1 = tmp:DotProduct(manifoldPoint:normalWorldOnB)

            manifoldPoint:lifeTime = manifoldPoint:lifeTime + 1

            i = i - 1
        end

        number distance2 = 0
        Vector3 projectedDifference
        Vector3 projectedPoint

        i = GetPointCount() - 1
        repeat while i >= 0
            ManifoldPoint3D manifoldPoint = points:Get(i)

            if not ValidContactDistance(manifoldPoint)
                RemoveContactPoint(i)
            else
                tmp:Set(manifoldPoint:normalWorldOnB)
                tmp:Scale(manifoldPoint:distance1)
                projectedPoint:Set(manifoldPoint:positionWorldOnA)
                projectedPoint:Subtract(tmp)
                projectedDifference:Set(manifoldPoint:positionWorldOnB)
                projectedDifference:Subtract(projectedPoint)
                distance2 = projectedDifference:DotProduct(projectedDifference)
                if distance2 > GetContactBreakingThreshold() * GetContactBreakingThreshold()
                    RemoveContactPoint(i)
                end
            end

            i = i - 1
        end
    end

    action ClearManifold
        pointCount = 0
    end

    action GetContactBreakingThreshold returns number
        return 0.02
    end
end