use Libraries.Compute.Vector2
use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Compute.Matrix4

package Libraries.Game.Collision

class BoundingBox2D 
    Vector2 calcVector
    Math math

    Vector2 minimum
    Vector2 maximum

    Vector2 center
    Vector2 dimensions
    
    /*
    GetCenter will return a Vector2 object containing the point at the center
    of the BoundingBox2D.
    */ 
    action GetCenter returns Vector2
        Vector2 new
        new:Set(center)
        return new
    end

    /*
    GetCenterX will return the X coordinate of the center of the BoundingBox2D.
    */    
    action GetCenterX returns number
        return center:GetX()
    end

    /*
    GetCenterY will return the Y coordinate of the center of the BoundingBox2D.
    */    
    action GetCenterY returns number
        return center:GetY()
    end

    /*
    GetDimensions will return the width and height BoundingBox2D stored within a 
    Vector2 object.
    */
    action GetDimensions returns Vector2
        Vector2 new
        new:Set(dimensions)
        return new
    end

    /*
    GetWidth will return the width of the BoundingBox2D.
    */
    action GetWidth returns number
        return dimensions:GetX()
    end

    /*
    GetHeight will return the height of the BoundingBox2D.
    */
    action GetHeight returns number
        return dimensions:GetY()
    end

    /*
    GetMinimum will return the "minimum" point of the BoundingBox2D. This is
    specifically the point of the BoundingBox2D with the lowest X and Y
    values. The point will be returned as a Vector2.
    */
    action GetMinimum returns Vector2
        return minimum
    end

    /*
    GetMaximum will return the "maximum" point of the BoundingBox2D. This is
    specifically the point of the BoundingBox2D with the highest X and Y
    values. The point will be returned as a Vector2.
    */
    action GetMaximum returns Vector2
        return maximum
    end

    /*
    The Copy action will return a new BoundingBox2D with the same bounds as this
    BoundingBox2D.
    */
    action Copy returns BoundingBox2D
        BoundingBox2D temp
        temp:Set(me)
        return temp
    end

    /*
    When provided with a BoundingBox2D as a parameter, the Set action will set the
    BoundingBox2D to match the bounds of the parameter.
    */
    action Set(BoundingBox2D bounds)
        Set(bounds:GetMinimum(), bounds:GetMaximum())
    end

    /*
    The Set action can be provided with a pair of vectors to set the bounds of
    this BoundingBox2D. The first vector should represent the "minimum" point of
    the bounds, or the point with the lowest X and Y values. The second
    vector should represent the "maximum" point of the bounsd, or the point with
    the highest X and Y values.
    */
    action Set(Vector2 min, Vector2 max)
        number minX = min:GetX()
        number minY = min:GetY()

        number maxX = max:GetX()
        number maxY = max:GetY()

        if maxX < minX
            minX = maxX
            maxX = min:GetX()
        end

        if maxY < minY
            minY = maxY
            maxY = min:GetY()
        end

        minimum:Set(minX, minY)
        maximum:Set(maxX, maxY)

        center:Set(minimum)
        center:Add(maximum)
        center:Scale(0.5)

        dimensions:Set(maximum)
        dimensions:Subtract(minimum)
    end

    /*
    Providing the Set action with an array of points will set the BoundingBox2D to
    the minimum possible size that contains all of the given points.
    */
    action Set(Array<Vector2> points)
       Invalidate()
        
        integer counter = 0
        repeat points:GetSize() times
            Extend(points:Get(counter))
            counter = counter + 1
        end
    end

    /*
    This action will invalidate the BoundingBox2D, making its minimum values to
    positive infinity and setting its maximum values to negative infinity.
    */
    action Invalidate
        number temp = 0
        temp = temp:GetPositiveInfinityValue()
        minimum:Set(temp, temp)
        temp = temp:GetNegativeInfinityValue()
        maximum:Set(temp, temp)

        center:Set(0, 0)
        dimensions:Set(0, 0)
    end

    /*
    This action will extend the BoundingBox2D to include the given point.
    */
    action Extend(Vector2 point)

        number tempX = minimum:GetX()
        number tempY = minimum:GetY()

        if point:GetX() < tempX
            tempX = point:GetX()
        end

        if point:GetY() < tempY
            tempY = point:GetY()
        end

        minimum:Set(tempX, tempY)

        tempX = maximum:GetX()
        tempY = maximum:GetY()

        if point:GetX() > tempX
            tempX = point:GetX()
        end

        if point:GetY() > tempY
            tempY = point:GetY()
        end

        maximum:Set(tempX, tempY)

        Set(minimum, maximum)
    end

    /*
    This action will extend the BoundingBox2D to contain the provided bounds.
    */
    action Extend(BoundingBox2D bounds)
        Extend(bounds:GetMinimum())
        Extend(bounds:GetMaximum())
    end

    /*
    This action will extend the BoundingBox2D to contain a circle denoted by a
    center point and a radius.
    */
    action Extend(Vector2 center, number radius)

        number tempX = minimum:GetX()
        number tempY = minimum:GetY()

        if (center:GetX() - radius) < tempX
            tempX = center:GetX() - radius
        end

        if (center:GetY() - radius) < tempY
            tempY = center:GetY() - radius
        end

        minimum:Set(tempX, tempY)

        tempX = maximum:GetX()
        tempY = maximum:GetY()

        if (center:GetX() + radius) > tempX
            tempX = center:GetX() + radius
        end
        
        if (center:GetY() + radius) > tempY
            tempY = center:GetY() + radius
        end

        maximum:Set(tempX, tempY)

        Set(minimum, maximum)
    end

    /*
    This action will extend the BoundingBox2D to contain the point at the given
    X and Y coordinates.
    */
    action Extend(number x, number y)
        number tempX = minimum:GetX()
        number tempY = minimum:GetY()

        if x < tempX
            tempX = x
        end

        if y < tempY
            tempY = y
        end

        minimum:Set(tempX, tempY)

        tempX = maximum:GetX()
        tempY = maximum:GetY()
        
        if x > tempX
            tempX = x
        end

        if y > tempY
            tempY = y
        end

        maximum:Set(tempX, tempY)

        Set(minimum, maximum)
    end

    /*
    This action will clear out the values of the BoundingBox2D, resetting all of
    its values to zero.
    */
    action Clear
        minimum:Set(0, 0)
        maximum:Set(0, 0)
        Set(minimum, maximum)
    end

    /*
    This action will return whether or not the BoundingBox2D defines a real,
    2-dimensional area. This requires all of the values of the "minimum" point
    to be less than the values of the "maximum" point.
    */
    action IsValid returns boolean
        return minimum:GetX() < maximum:GetX() and minimum:GetY() < maximum:GetY()
    end

    /*
    This action will test to see if this BoundingBox2D totally contains a given
    BoundingBox. If any part of the given BoundingBox2D is outside this one, it
    will return false.
    */
    action Contains(BoundingBox2D bounds) returns boolean
        if not IsValid()
            return false
        end

        Vector2 min = bounds:GetMinimum()
        Vector2 max = bounds:GetMaximum()

        return minimum:GetX() <= min:GetX() and minimum:GetY() <= min:GetY()
            and maximum:GetX() >= max:GetX() and maximum:GetX() >= max:GetY()
    end

    /*
    This action will test to see if the point indicated by the given Vector2 is
    contained inside this BoundingBox2D.
    */
    action Contains(Vector2 point) returns boolean
        if not IsValid()
            return false
        end

        return minimum:GetX() <= point:GetX() and minimum:GetY() <= point:GetY()
            and maximum:GetX() >= point:GetX() and maximum:GetY() >= point:GetY()
    end

    /*
    This action will test to see if this BoundingBox2D intersects with the given
    BoundingBox2D.
    */
    action Intersects(BoundingBox2D bounds) returns boolean
        if not IsValid()
            return false
        end

        // This is tested using the Separating Axis Theorem.

        number lx = math:AbsoluteValue(center:GetX() - bounds:GetCenter():GetX())
        number sumx = (dimensions:GetX() / 2) + (bounds:GetDimensions():GetX() / 2)

        number ly = math:AbsoluteValue(center:GetY() - bounds:GetCenter():GetY())
        number sumy = (dimensions:GetY() / 2) + (bounds:GetDimensions():GetY() / 2)
        
        return lx <= sumx and ly <= sumy
    end

    /*
    This action returns the perimeter of the BoundingBox2D.
    */
    action GetPerimeter returns number
        return 2.0 * (maximum:GetX() - minimum:GetX() + maximum:GetY() - minimum:GetY())
    end
end