use Libraries.Compute.Vector2
use Libraries.Compute.Math

package Libraries.Game.Collision

class PhysicsPosition2D
    public Vector2 position
    public number sine = 0
    public number cosine = 1

    Math math
    
    action Set(PhysicsPosition2D other)
        position:Set(other:position)
        sine = other:sine
        cosine = other:cosine
    end

    action Set(Vector2 position, number angle)
        me:position:Set(position)
        sine = math:Sine(angle)
        cosine = math:Cosine(angle)
    end

    action GetPosition returns Vector2
        return position
    end

    action GetAngle returns number
        return math:InverseTangent(sine, cosine)
    end

    action GetSine returns number
        return sine
    end

    action GetCosine returns number
        return cosine
    end

    action SetToIdentity
        position:SetZero()
        sine = 0
        cosine = 1
    end

    action Multiply(PhysicsPosition2D transform, Vector2 vector) returns Vector2
        Vector2 result
        result:SetX((transform:cosine * vector:GetX() - transform:sine * vector:GetY()) + transform:position:GetX())
        result:SetY((transform:sine * vector:GetX() + transform:cosine * vector:GetY()) + transform:position:GetY())
        return result
    end

    action MultiplyToOut(PhysicsPosition2D transform, Vector2 vector, Vector2 out)
        number tempY = (transform:sine * vector:GetX() + transform:cosine * vector:GetY()) + transform:position:GetY()
        out:SetX((transform:cosine * vector:GetX() - transform:sine * vector:GetY()) + transform:position:GetX())
        out:SetY(tempY)
    end

    action MultiplyAndTranslate(PhysicsPosition2D transform, Vector2 vector) returns Vector2
        number px = vector:GetX() - transform:position:GetX()
        number py = vector:GetY() - transform:position:GetY()
        Vector2 result
        result:SetX((transform:cosine * px + transform:sine * py))
        result:SetY((-1 * transform:sine * px + transform:cosine * py))
        return result
    end

    action Multiply(PhysicsPosition2D transformA, PhysicsPosition2D transformB) returns PhysicsPosition2D
        PhysicsPosition2D result
        result:sine = transformA:cosine * transformB:sine - transformA:sine * transformB:cosine
        result:cosine = transformA:cosine * transformB:cosine - transformA:sine * transformB:sine
        result:position:SetX(transformA:cosine * transformB:position:GetX() - transformA:sine * transformB:position:GetY())
        result:position:SetY(transformA:sine * transformB:position:GetX() + transformA:cosine * transformB:position:GetY())
        result:position:Add(transformA:position)
        
        return result
    end

    action MultiplyAndTranslate(PhysicsPosition2D transformA, PhysicsPosition2D transformB) returns PhysicsPosition2D
        PhysicsPosition2D result
        result:sine = transformA:cosine * transformB:sine - transformA:sine * transformB:cosine
        result:cosine = transformA:cosine * transformB:cosine + transformA:sine * transformB:sine
        Vector2 pool
        pool:Set(transformB:position):Subtract(transformA:position)
        result:position:SetX(transformA:cosine * pool:GetX() + transformA:sine * pool:GetY())
        result:position:SetY(-1 * transformA:sine * pool:GetX() + transformA:cosine * pool:GetY())

        return result
    end
end