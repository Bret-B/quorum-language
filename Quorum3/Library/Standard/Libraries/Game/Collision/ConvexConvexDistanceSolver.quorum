package Libraries.Game.Collision

use Libraries.Containers.Array
use Libraries.Game.Collision.ConvexConvexCollisionSolverNode
use Libraries.Compute.Matrix3
use Libraries.Compute.Vector3
use Libraries.Game.Collision.Shapes.CollisionShape3D
use Libraries.Game.Collison.ConvexConvexVertex
use Libraries.Compute.Quaternion
use Libraries.Compute.BitwiseOperations
use Libraries.Compute.Math

class ConvexConvexDistanceSolver
    BitwiseOperations bo
    Math math

    public Array<ConvexConvexCollisionSolverNode> table
    public Array<Matrix3> wrotations
    public Array<Vector3> positions
    public Array<CollisionShape3D> shapes
    public Array<ConvexConvexVertex> simplex
    public Vector3 ray
    public integer order = -1
    public integer iterations = 0
    public number margin = 0
    public boolean failed = false

    constant integer GJK_hashsize = bo:ShiftLeft(1, 6)
    constant integer GJK_hashmask = GJK_hashsize - 1
    constant number inSimplexEps = 0.0001
    constant number sqInSimplexEps = inSimplexEps * inSimplexEps
    constant integer GjkMaxIterations = 128
    constant number cstPi = cst2Pi * 0.5
    constant number cst2Pi = 6.283185307179586232

    on create
        table:SetSize(GJK_hashsize)
        repeat 5 times
            ConvexConvexVertex mkv
            simplex:Add(mkv)
        end

        repeat 2 times
            Matrix3 m
            Vector3 v
            wrotations:Add(m)
            positions:Add(v)
        end

        shapes:SetSize(2)
    end

    action Initialize(Matrix3 wrot0, Vector3 pos0, CollisionShape3D shape0, Matrix3 wrot1, Vector3 pos1, CollisionShape3D shape1, number pmargin)
        wrotations:Get(0):Set(wrot0)
        positions:Get(0):Set(pos0)
        shapes:Set(0, shape0)
        wrotations:Get(1):Set(wrot1)
        positions:Get(1):Set(pos1)
        shapes:Set(1, shape1)
        margin = pmargin
        failed = false
    end

    action Hash(Vector3 vector) returns integer
        integer h = bo:ExclusiveOr(bo:ExclusiveOr(cast(integer, vector:GetX() * 15461), cast(integer, vector:GetY() * 83003)), cast(integer, vector:GetZ() * 15473))
        return bo:And(h * 169639, GJK_hashmask)
    end

    action LocalSupport(Vector3 d, integer i) returns Vector3
        Vector3 tmp
        TransposeTransform(tmp, d, wrotations:Get(i))
        
        Vector3 out = shapes:Get(i):LocalGetSupportingVertex(tmp)
        Transform(wrotations:Get(i), out)
        out:Add(positions:Get(i))

        return out
    end

    action Support(Vector3 d, ConvexConvexVertex v)
        v:r:Set(d)

        Vector3 tmp1 = LocalSupport(d, 0)

        Vector3 tmp
        tmp:Set(d)
        tmp:Scale(-1)
        Vector3 tmp2 = LocalSupport(tmp, 1)

        v:w:Set(tmp1):Subtract(tmp2)
        Vector3 vec
        vec:Set(v:w)
        v:w:Set(d):Scale(margin):Add(vec)
    end

    action FetchSupport returns boolean
        integer h = Hash(ray)
        ConvexConvexCollisionSolverNode e = table:Get(h)

        repeat while e not= undefined
            if e:vector:Equals(ray)
                order = order - 1
                return false
            else
                e = e:node
            end
        end

        ConvexConvexCollisionSolverNode f
        f:vector:Set(ray)
        f:node = table:Get(h)
        table:Set(h, f)
        order = order + 1
        Support(ray, simplex:Get(order))
        return ray:DotProduct(simplex:Get(order):w) > 0
    end

    action SolveSimplex2(Vector3 ao, Vector3 ab) returns boolean
        if ab:DotProduct(ao) >= 0
            Vector3 cabo
            cabo:Set(ab):CrossProduct(ao)
            if cabo:LengthSquared() > sqInSimplexEps
                ray:Set(cabo):CrossProduct(ab)
            else
                return true
            end
        else
            order = 0
            simplex:Get(0):Set(simplex:Get(1))
            ray:Set(ao)
        end

        return false
    end

    action SolveSimplex3(Vector3 ao, Vector3 ab, Vector3 ac) returns boolean
        Vector3 tmp
        tmp:Set(ab):CrossProduct(ac)
        return SolveSimplex3a(ao, ab, ac, tmp)
    end

    action SolveSimplex3a(Vector3 ao, Vector3 ab, Vector3 ac, Vector3 cabc) returns boolean
        Vector3 tmp
        tmp:Set(cabc):CrossProduct(ab)

        Vector3 tmp2
        tmp2:Set(cabc):CrossProduct(ac)

        if tmp:DotProduct(ao) < -inSimplexEps
            order = 1
            simplex:Get(0):Set(simplex:Get(1))
            simplex:Get(1):Set(simplex:Get(2))
            return SolveSimplex2(ao, ab)
        elseif tmp2:DotProduct(ao) > inSimplexEps
            order = 1
            simplex:Get(1):Set(simplex:Get(2))
            return SolveSimplex2(ao, ac)
        else
            number d = cabc:DotProduct(ao)
            if math:AbsoluteValue(d) > inSimplexEps
                if d > 0
                    ray:Set(cabc)
                else
                    ray:Set(cabc):Scale(-1)
                    
                    ConvexConvexVertex swapTmp
                    swapTmp:Set(simplex:Get(0))
                    simplex:Get(0):Set(simplex:Get(1))
                    simplex:Get(1):Set(swapTmp)
                end
                return false
            else
                return true
            end
        end
    end

    action SolveSimplex4(Vector3 ao, Vector3 ab, Vector3 ac, Vector3 ad) returns boolean
        Vector3 crs
        
        Vector3 tmp        
        tmp:Set(ab):CrossProduct(ac)

        Vector3 tmp2
        tmp2:Set(ac):CrossProduct(ad)

        Vector3 tmp3
        tmp3:Set(ad):CrossProduct(ab)

        if tmp:DotProduct(ao) > inSimplexEps
            crs:Set(tmp)
            order = 2
            simplex:Get(0):Set(simplex:Get(1))
            simplex:Get(1):Set(simplex:Get(2))
            simplex:Get(2):Set(simplex:Get(3))
            return SolveSimplex3a(ao, ab, ac, crs)
        elseif tmp2:DotProduct(ao) > inSimplexEps
            crs:Set(tmp2)
            order = 2
            simplex:Get(2):Set(simplex:Get(3))
            return SolveSimplex3a(ao, ac, ad, crs)
        elseif tmp3:DotProduct(ao) > inSimplexEps
            crs:Set(tmp3)
            order = 2
            simplex:Get(1):Set(simplex:Get(0))
            simplex:Get(0):Set(simplex:Get(2))
            simplex:Get(2):Set(simplex:Get(3))
            return SolveSimplex3a(ao, ad, ab, crs)
        else
            return true
        end
    end

    action SearchOrigin returns boolean
        Vector3 tmp
        tmp:Set(1, 0, 0)
        return SearchOrigin(tmp)
    end

    action SearchOrigin(Vector3 initray) returns boolean
        Vector3 tmp1
        Vector3 tmp2
        Vector3 tmp3
        Vector3 tmp4

        iterations = 0
        order = -1
        failed = false
        ray:Set(initray)
        ray:Normalize()

        integer i = 0
        repeat GJK_hashsize times
            table:Set(i, undefined)
            i = i + 1
        end

        FetchSupport()
        ray:Set(simplex:Get(0):w):Scale(-1)

        repeat while iterations < GjkMaxIterations
            number r1 = ray:Length()
            number scale = 1
            if r1 > 0
                scale = r1
            end
            ray:Scale(1 / scale)
            if FetchSupport()
                boolean found = false
                if order = 1
                    tmp1:Set(simplex:Get(1):w):Scale(-1)
                    tmp2:Set(simplex:Get(0):w):Subtract(simplex:Get(1):w)
                    found = SolveSimplex2(tmp1, tmp2)
                elseif order = 2
                    tmp1:Set(simplex:Get(2):w):Scale(-1)
                    tmp2:Set(simplex:Get(1):w):Subtract(simplex:Get(2):w)
                    tmp3:Set(simplex:Get(0):w):Subtract(simplex:Get(2):w)
                    found = SolveSimplex3(tmp1, tmp2, tmp3)
                elseif order = 3
                    tmp1:Set(simplex:Get(3):w):Scale(-1)
                    tmp2:Set(simplex:Get(2):w):Subtract(simplex:Get(3):w)
                    tmp3:Set(simplex:Get(1):w):Subtract(simplex:Get(3):w)
                    tmp4:Set(simplex:Get(0):w):Subtract(simplex:Get(3):w)
                    found = SolveSimplex4(tmp1, tmp2, tmp3, tmp4)
                end

                if found
                    return true
                end
            else
                return false
            end
            iterations = iterations + 1
        end

        failed = true
        return false
    end

    action EncloseOrigin returns boolean
        Vector3 tmp
        Vector3 tmp1
        Vector3 tmp2

        if order = 1
            // line
            Vector3 ab
            ab:Set(simplex:Get(1):w):Subtract(simplex:Get(0):w)
            
            Array<Vector3> b
            repeat 3 times
                Vector3 v
                b:Add(v)
            end
            b:Get(0):Set(1, 0, 0)
            b:Get(1):Set(0, 1, 0)
            b:Get(2):Set(0, 0, 1)

            Vector3 v
            v:Set(b:Get(0))
            b:Get(0):Set(ab):CrossProduct(v)
            v:Set(b:Get(1))
            b:Get(1):Set(ab):CrossProduct(v)
            v:Set(b:Get(2))
            b:Get(2):Set(ab):CrossProduct(v)

            Array<number> m
            m:Add(b:Get(0):LengthSquared())
            m:Add(b:Get(1):LengthSquared())
            m:Add(b:Get(2):LengthSquared())

            Quaternion tmpQuat
            tmp:Set(ab):Normalize()
            SetRotation(tmpQuat, tmp, cst2Pi / 3)

            Matrix3 r
            SetRotation(r, tmpQuat)
            
            Vector3 w
            if m:Get(0) > m:Get(1)
                if m:Get(0) > m:Get(2)
                    w:Set(b:Get(0))
                else
                    w:Set(b:Get(2))
                end
            else
                if m:Get(1) > m:Get(2)
                    w:Set(b:Get(1))
                else
                    w:Set(b:Get(2))
                end
            end

            tmp:Set(w):Normalize()
            Support(tmp, simplex:Get(4))
            Transform(r, w)
            tmp:Set(w):Normalize()
            Support(tmp, simplex:Get(2))
            Transform(r, w)
            tmp:Set(w):Normalize()
            Support(tmp, simplex:Get(3))
            Transform(r, w)
            order = 4
            return true
        elseif order = 2
            tmp1:Set(simplex:Get(1):w):Subtract(simplex:Get(0):w)
            tmp2:Set(simplex:Get(2):w):Subtract(simplex:Get(0):w)
            Vector3 n
            n:Set(tmp1):CrossProduct(tmp2)
            n:Normalize()

            Support(n, simplex:Get(3))

            tmp:Set(n):Scale(-1)
            Support(tmp, simplex:Get(4))
            order = 4
            return true
        elseif order = 3
            return true
        elseif order = 4
            return true
        end

        return false
    end

    private action Transform(Matrix3 mat, Vector3 vec)
        number x = mat:row0column0 * vec:GetX() + mat:row0column1 * vec:GetY() + mat:row0column2 * vec:GetZ()
        number y = mat:row1column0 * vec:GetX() + mat:row1column1 * vec:GetY() + mat:row1column2 * vec:GetZ()
        number z = mat:row2column0 * vec:GetX() + mat:row2column1 * vec:GetY() + mat:row2column2 * vec:GetZ()
        vec:Set(x, y, z)
    end

    private action TransposeTransform(Vector3 dest, Vector3 vec, Matrix3 mat)
        number x = tdotx(mat, vec)
        number y = tdoty(mat, vec)
        number z = tdotz(mat, vec)
        dest:SetX(x)
        dest:SetY(y)
        dest:SetZ(z)
    end

    private action tdotx(Matrix3 mat, Vector3 vec) returns number
        return mat:row0column0 * vec:GetX() + mat:row1column0 * vec:GetY() + mat:row2column0 * vec:GetZ()
    end

    private action tdoty(Matrix3 mat, Vector3 vec) returns number
        return mat:row0column1 * vec:GetX() + mat:row1column1 * vec:GetY() + mat:row2column1 * vec:GetZ()
    end

    private action tdotz(Matrix3 mat, Vector3 vec) returns number
        return mat:row0column2 * vec:GetX() + mat:row1column2 * vec:GetY() + mat:row2column2 * vec:GetZ()
    end

    private action SetRotation(Quaternion q, Vector3 axis, number angle)
        number d = axis:Length()
        number s = math:Sine(angle * 0.5) / d
        q:Set(axis:GetX() * s, axis:GetY() * s, axis:GetZ() * s, math:Cosine(angle * 0.5))
    end

    private action SetRotation(Matrix3 dest, Quaternion q)
        number d = q:GetX() * q:GetX() + q:GetY() * q:GetY() + q:GetZ() * q:GetZ() + q:GetW() * q:GetW()
        number s = 2 / d
        number xs = q:GetX() * s
        number ys = q:GetY() * s
        number zs = q:GetZ() * s
        number wx = q:GetW() * xs
        number wy = q:GetW() * ys
        number wz = q:GetW() * zs
        number xx = q:GetX() * xs
        number xy = q:GetX() * ys
        number xz = q:GetX() * zs
        number yy = q:GetY() * ys
        number yz = q:GetY() * zs
        number zz = q:GetZ() * zs
        dest:row0column0 = 1 - (yy + zz)
        dest:row0column1 = xy - wz
        dest:row0column2 = xz + wy
        dest:row1column0 = xy + wz
        dest:row1column1 = 1 - (xx + zz)
        dest:row1column2 = yz - wx
        dest:row2column0 = xz - wy
        dest:row2column1 = yz + wx
        dest:row2column2 = 1 - (xx + yy)
    end
end