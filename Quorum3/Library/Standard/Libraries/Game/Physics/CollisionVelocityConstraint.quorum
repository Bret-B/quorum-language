use Libraries.Containers.Array
use Libraries.Compute.Vector2
use Libraries.Containers.Table
use Libraries.Game.Collision.LocalCollisionPoints2D
use Libraries.Game.Physics.VelocityConstraintPoint

package Libraries.Game.Physics

class CollisionVelocityConstraint 
    Array<VelocityConstraintPoint> points
    Vector2 normal
    Table<number> normalMass
    Table<number> inverseNormalMass
    integer indexA = 0
    integer indexB = 0
    number inverseMassA = 0
    number inverseMassB = 0
    number inverseInertiaA = 0
    number inverseInertiaB = 0
    number friction = 0
    number restitution = 0
    number tangentSpeed = 0
    integer pointCount = 0
    integer collisionIndex = 0

    on create
        LocalCollisionPoints2D collisionPoints
        repeat collisionPoints:MAX_COLLISION_POINTS times
            VelocityConstraintPoint point
            points:Add(point)
        end

        normalMass:SetSize(2, 2)
        inverseNormalMass:SetSize(2, 2)

        integer i = 0
        repeat 2 times
            integer j = 0
            repeat 2 times
                normalMass:Set(i, j, 0)
                inverseNormalMass:Set(i, j, 0)
                j = j + 1
            end
            i = i + 1
        end
    end

    action GetPoints returns Array<VelocityConstraintPoint>
        return points
    end

    action GetNormal returns Vector2
        return normal
    end

    action SetNormal(Vector2 normal)
        me:normal = normal
    end

    action GetNormalMass returns Table<number>
        return normalMass
    end

    action GetInverseNormalMass returns Table<number>
        return inverseNormalMass
    end

    action GetIndexA returns integer
        return indexA
    end

    action SetIndexA(integer index)
        indexA = index
    end

    action GetIndexB returns integer
        return indexB
    end

    action SetIndexB(integer index)
        indexB = index
    end

    action GetInverseMassA returns number
        return inverseMassA
    end

    action SetInverseMassA(number inverseMass)
        inverseMassA = inverseMass
    end

    action GetInverseMassB returns number
        return inverseMassB
    end

    action SetInverseMassB(number inverseMass)
        inverseMassB = inverseMass
    end

    action GetInverseInertiaA returns number
        return inverseInertiaA
    end

    action SetInverseInertiaA(number inverseInertia)
        inverseInertiaA = inverseInertia
    end

    action GetInverseInertiaB returns number
        return inverseInertiaB
    end

    action SetInverseInertiaB(number inverseInertia)
        inverseInertiaB = inverseInertia
    end

    action GetFriction returns number
        return friction
    end

    action SetFriction(number friction)
        me:friction = friction
    end

    action GetRestitution returns number
        return restitution
    end

    action SetRestitution(number restitution)
        me:restitution = restitution
    end

    action GetTangentSpeed returns number
        return tangentSpeed
    end

    action SetTangentSpeed(number tangentSpeed)
        me:tangentSpeed = tangentSpeed
    end

    action GetPointCount returns integer
        return pointCount
    end

    action SetPointCount(integer pointCount)
        me:pointCount = pointCount
    end

    action GetCollisionIndex returns integer
        return collisionIndex
    end

    action SetCollisionIndex(integer index)
        collisionIndex = index
    end
end