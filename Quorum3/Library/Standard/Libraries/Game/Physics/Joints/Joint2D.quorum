package Libraries.Game.Physics.Joints

use Libraries.Interface.Item2D
use Libraries.Compute.Vector2

class Joint2D 
    public constant integer UNKNOWN = 0
    public constant integer REVOLUTEJOINT = 1
    public constant integer PRISMATICJOINT = 2
    public constant integer DISTANCEJOINT = 3
    public constant integer PULLEYJOINT = 4
    public constant integer MOUSEJOINT = 5
    public constant integer GEARJOINT = 6
    public constant integer WHEELJOINT = 7
    public constant integer WELDJOINT = 8
    public constant integer FRICTIONJOINT = 9
    public constant integer ROPEJOINT = 10
    public constant integer MOTORJOINT = 11

    //LimitState enum
    public constant integer INACTIVE = 0
    public constant integer AT_LOWER = 1
    public constant integer AT_UPPER = 2
    public constant integer EQUAL = 3

    integer jointType = 0
    Joint2D previous = undefined
    Joint2D next = undefined
    JointEdge2D edgeA
    JointEdge2D edgeB
    Item2D itemA
    Item2D itemB
    boolean collideConnected = false
    boolean collisionGroupFlag = false
    integer state = 0

    action GetType returns integer
        return jointType
    end
    
    action SetType(integer type)
        jointType = type
    end

    action GetItemA returns Item2D
        return itemA
    end
    
    action SetItemA(Item2D item)
        itemA = item
    end

    action GetItemB returns Item2D
        return itemB
    end

    action SetItemB(Item2D item)
        itemB = item
    end

    action GetState returns integer
        return state
    end
    
    action SetState(integer newState)
        state = newState
    end

    blueprint action GetAnchorA returns Vector2

    blueprint action GetAnchorB returns Vector2

    blueprint action GetReactionForce(number inverseTimeStep) returns Vector2

    blueprint action GetReactionTorque(number inverseTimeStep) returns number

    action GetCollideConnected returns boolean
        return collideConnected
    end
    
    action SetCollideConnected(boolean collide)
        collideConnected = collide
    end

    blueprint action InitializeVelocityConstraints(JointSolverData2D data)
    
    blueprint action SolveVelocityConstraints(JointSolverData2D data)

    blueprint action SolvePositionConstraints(JointSolverData2D data) returns boolean

    action InCollisionGroup returns boolean
        return collisionGroupFlag
    end

    action SetInCollisionGroup(boolean flag)
        collisionGroupFlag = flag
    end

    action GetPrevious returns Joint2D
        return previous
    end

    action SetPrevious(Joint2D previous)
        me:previous = previous
    end

    action GetNext returns Joint2D
        return next
    end

    action SetNext(Joint2D next)
        me:next = next
    end

    action GetEdgeA returns JointEdge2D
        return edgeA
    end

    action SetEdgeA(JointEdge2D edgeA)
        me:edgeA = edgeA
    end

    action GetEdgeB returns JointEdge2D
        return edgeB
    end

    action SetEdgeB(JointEdge2D edgeB)
        me:edgeB = edgeB
    end
end