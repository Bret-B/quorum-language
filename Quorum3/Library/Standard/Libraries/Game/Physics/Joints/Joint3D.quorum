package Libraries.Game.Physics.Joints

use Libraries.Game.Physics.CollisionSolverInformation3D
use Libraries.Game.Physics.all
use Libraries.Interface.Item3D

class Joint3D
    public constant integer PointToPoint = 0
    public constant integer Hinge = 1
    public constant integer SixDegreesOfFreedom = 2
    public constant integer Slider = 3
    integer type = 0
    Item3D itemA
    Item3D itemB
    number appliedImpulse = 0

    Joint3D previous = undefined
    Joint3D next = undefined
    JointEdge3D edgeA
    JointEdge3D edgeB

    boolean inCollisionGroup = false

    action InCollisionGroup returns boolean
        return inCollisionGroup
    end

    action SetInCollisionGroup(boolean flag)
        me:inCollisionGroup = flag
    end

    action SetItemA(Item3D item)
        me:itemA = item
    end

    action GetItemA returns Item3D
        return itemA
    end

    action SetItemB(Item3D item)
        me:itemB = item
    end

    action GetItemB returns Item3D
        return itemB
    end

    action SetAppliedImpulse(number impulse)
        me:appliedImpulse = impulse
    end

    action SetType(integer type)
        me:type = type
    end

    action GetType returns integer
        return type
    end

    action GetAppliedImpulse returns number
        return appliedImpulse
    end

    blueprint action BuildJacobian

    action GetInformation(CollisionSolverInformation3D information)
    end

    blueprint action SolveJoint(number timeStep)

    action GetPrevious returns Joint3D
        return previous
    end

    action SetPrevious(Joint3D previous)
        me:previous = previous
    end

    action GetNext returns Joint3D
        return next
    end

    action SetNext(Joint3D next)
        me:next = next
    end

    action GetEdgeA returns JointEdge3D
        return edgeA
    end

    action SetEdgeA(JointEdge3D edgeA)
        me:edgeA = edgeA
    end

    action GetEdgeB returns JointEdge3D
        return edgeB
    end

    action SetEdgeB(JointEdge3D edgeB)
        me:edgeB = edgeB
    end
end