package Libraries.Game

use Libraries.Game.all
use Libraries.Game.Behaviors.all
use Libraries.Interface.all
use Libraries.Interface.Events.all
use Libraries.Containers.Array
use Libraries.Containers.List
use Libraries.Containers.Iterator
use Libraries.Interface.Item
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.KeyboardListener
use Libraries.Interface.Events.KeyboardProcessor
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.MouseProcessor
use Libraries.Interface.Events.MouseListener
use Libraries.Interface.Events.MouseMovementListener
use Libraries.Interface.Events.MouseWheelListener
use Libraries.Interface.Events.TouchListener
use Libraries.Interface.Events.TextInputEvent
use Libraries.Interface.Events.TextInputListener
use Libraries.Interface.Events.TextInputProcessor
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Events.ResizeEvent
use Libraries.Interface.Events.ResizeListener
use Libraries.Interface.Events.ResizeProcessor

/*
This class automatically handles input and notifies event listeners for Games
running on Desktop platforms (e.g. Windows, Mac). Most users shouldn't need 
access to this class. For users who want to test input themselves at specific 
times, use an InputMonitor instead.
*/
class DesktopInput is GameInput

    private KeyboardProcessor keyboardProcessor
    private MouseProcessor mouseProcessor
    private TextInputProcessor textInputProcessor
    private ResizeProcessor resizeProcessor

    Array<KeyboardListener> keyboardListeners
    InputSet keyboardModifiers

    Array<MouseListener> mouseListeners
    Array<MouseMovementListener> mouseMovementListeners
    Array<MouseWheelListener> mouseWheelListeners
    Array<TextInputListener> textInputListeners
    Array<ResizeListener> resizeListeners

    GameStateManager manager

    /*
    This action will identify all input events that have occurred and notify
    all relevant event listeners. For certain kinds of input, e.g. mouse or
    touch input, only listeners that were added to the active panel will be
    notified. This action is called automatically by the Game class, so most
    users will never need to use this action directly.
    */
    action ProcessInputEvents
        Array<Layer> layers = parent:GameInput:layers
        List<MouseEvent> mouseEvents = mouseProcessor:GetCurrentEvents()
        MouseEvent mouseEvent = undefined

        repeat mouseEvents:GetSize() times
            mouseEvent = mouseEvents:RemoveFromFront()
            Item target = undefined

            integer counter = layers:GetSize()
            repeat while counter > 0 and not mouseEvent:WasEventHandled()
                counter = counter - 1
                Item temp = layers:Get(counter):ProcessMouseEvent(mouseEvent)
                if target = undefined and temp not= undefined
                    target = temp
                end
            end

            if not mouseEvent:WasEventHandled()
                NotifyMouseListeners(mouseEvent)
            end

            if target not= undefined

                InputSet set = keyboardModifiers:Copy()
                set:SetMouseInput(mouseEvent:mouseButton)

                InputSet anySet = keyboardModifiers:Copy()
                anySet:SetMouseInput(mouseEvent:ANY)

                if mouseEvent:eventType = mouseEvent:MOVED_MOUSE or mouseEvent:eventType = mouseEvent:DRAGGED_MOUSE
                    set:SetInputType(set:MOUSE_MOVEMENT_INPUT)
                    anySet:SetInputType(set:MOUSE_MOVEMENT_INPUT)
                elseif mouseEvent:eventType = mouseEvent:CLICKED_MOUSE
                    // No further changes to the set need to be made in this case.
                elseif mouseEvent:eventType = mouseEvent:RELEASED_MOUSE
                    set:SetInputTrigger(set:RELEASE)
                    anySet:SetInputTrigger(set:RELEASE)
                elseif mouseEvent:eventType = mouseEvent:SCROLLED_MOUSE
                    set:SetInputType(set:MOUSE_WHEEL_INPUT)
                    anySet:SetInputType(set:MOUSE_WHEEL_INPUT)
                end

                BehaviorEvent behaviorEvent
                behaviorEvent:SetItem(target)
                behaviorEvent:SetMouseEvent(mouseEvent)

                InputTable table = GetInputTable(target:GetInputGroup())

                /*
                If the table exists, attempt to trigger behaviors that use that
                specific input or that trigger on any input of that type. Once both
                are tested, if neither were successful, try to trigger behaviors
                from the default input table instead.
                */
                boolean processed = (table not= undefined)
                if processed
                    processed = table:ProcessInput(set, behaviorEvent)
                    processed = table:ProcessInput(anySet, behaviorEvent) or processed
                end

                if not processed
                    GetDefaultInputTable():ProcessInput(set, behaviorEvent)
                    GetDefaultInputTable():ProcessInput(anySet, behaviorEvent)
                end
            end
        end

        // Begin processing other event types.
        keyboardProcessor:Update()
        
        if keyboardProcessor:HasEvents()
            ProcessKeyboardEvent(keyboardProcessor:GetEvents())
        end

        textInputProcessor:Update()
        
        if textInputProcessor:HasEvents()
            ProcessTextInputEvent(textInputProcessor:GetEvents())
        end

        resizeProcessor:Update()
        
        if resizeProcessor:HasEvents()
            List<ResizeEvent> resizeEvents = resizeProcessor:GetEvents()

            repeat while (not resizeEvents:IsEmpty())
                ResizeEvent event = resizeEvents:RemoveFromFront()
                integer counter = 0
                repeat while counter < resizeListeners:GetSize()
                    resizeListeners:Get(counter):SizeChanged(event)
                    counter = counter + 1
                end

                counter = 0
                repeat while counter < layers:GetSize()
                    layers:Get(counter):Resize(event)
                    counter = counter + 1
                end
            end
        end

    end

    private action ProcessKeyboardEvent(List<KeyboardEvent> events)
        KeyboardEvent currentEvent = undefined
        KeyboardListener currentListener = undefined
        Iterator<KeyboardListener> listenIterator = keyboardListeners:GetIterator()

        text inputGroup = ""
        Item focusedItem = manager:GetFocus()
        if focusedItem not= undefined
            inputGroup = focusedItem:GetInputGroup()
        end

        repeat while not events:IsEmpty()
            currentEvent = events:RemoveFromFront()

            if currentEvent:eventType = currentEvent:PRESSED_KEY
                if currentEvent:keyCode = currentEvent:SHIFT_LEFT or currentEvent:keyCode = currentEvent:SHIFT_RIGHT
                    keyboardModifiers:AddModifier(keyboardModifiers:SHIFT)
                elseif currentEvent:keyCode = currentEvent:ALT_LEFT or currentEvent:keyCode = currentEvent:ALT_RIGHT
                    keyboardModifiers:AddModifier(keyboardModifiers:ALT)
                elseif currentEvent:keyCode = currentEvent:CONTROL_LEFT or currentEvent:keyCode = currentEvent:CONTROL_RIGHT
                    keyboardModifiers:AddModifier(keyboardModifiers:CONTROL)
                elseif currentEvent:keyCode = currentEvent:META_LEFT or currentEvent:keyCode = currentEvent:META_RIGHT
                    keyboardModifiers:AddModifier(keyboardModifiers:META)
                end
            else
                if currentEvent:keyCode = currentEvent:SHIFT_LEFT or currentEvent:keyCode = currentEvent:SHIFT_RIGHT
                    keyboardModifiers:RemoveModifier(keyboardModifiers:SHIFT)
                elseif currentEvent:keyCode = currentEvent:ALT_LEFT or currentEvent:keyCode = currentEvent:ALT_RIGHT
                    keyboardModifiers:RemoveModifier(keyboardModifiers:ALT)
                elseif currentEvent:keyCode = currentEvent:CONTROL_LEFT or currentEvent:keyCode = currentEvent:CONTROL_RIGHT
                    keyboardModifiers:RemoveModifier(keyboardModifiers:CONTROL)
                elseif currentEvent:keyCode = currentEvent:META_LEFT or currentEvent:keyCode = currentEvent:META_RIGHT
                    keyboardModifiers:RemoveModifier(keyboardModifiers:META)
                end
            end

            InputSet set = keyboardModifiers:Copy()
            set:SetKeyboardInput(currentEvent:keyCode)

            InputSet anySet = keyboardModifiers:Copy()
            anySet:SetKeyboardInput(currentEvent:ANY_KEY)

            if currentEvent:eventType = currentEvent:RELEASED_KEY
                set:SetInputTrigger(set:RELEASE)
                anySet:SetInputTrigger(anySet:RELEASE)
            end
            
            BehaviorEvent behaviorEvent
            behaviorEvent:SetItem(focusedItem)
            behaviorEvent:SetKeyboardEvent(currentEvent)

            InputTable table = GetInputTable(inputGroup)

            /*
            If the table exists, attempt to trigger behaviors that use that
            specific input or that trigger on any input of that type. Once both
            are tested, if neither were successful, try to trigger behaviors
            from the default input table instead.
            */
            boolean processed = (table not= undefined)
            if processed
                processed = table:ProcessInput(set, behaviorEvent)
                processed = table:ProcessInput(anySet, behaviorEvent) or processed
            end

            if not processed
                GetDefaultInputTable():ProcessInput(set, behaviorEvent)
                GetDefaultInputTable():ProcessInput(anySet, behaviorEvent)
            end

            repeat while listenIterator:HasNext()
                currentListener = listenIterator:Next()
                if currentEvent:eventType = currentEvent:PRESSED_KEY
                    currentListener:PressedKey(currentEvent)
                elseif currentEvent:eventType = currentEvent:RELEASED_KEY
                    currentListener:ReleasedKey(currentEvent)
                end
            end

            listenIterator:Rewind()
        end
    end

    private action ProcessTextInputEvent(List<TextInputEvent> events)
        TextInputEvent currentEvent = undefined
        TextInputListener currentListener = undefined
        Iterator<TextInputListener> listenIterator = textInputListeners:GetIterator()

        text inputGroup = ""
        Item focusedItem = manager:GetFocus()
        if focusedItem not= undefined
            inputGroup = focusedItem:GetInputGroup()
        end

        repeat while not events:IsEmpty()
            currentEvent = events:RemoveFromFront()

            InputSet set
            set:SetInputType(set:TEXT_INPUT)

            BehaviorEvent behaviorEvent
            behaviorEvent:SetItem(focusedItem)
            behaviorEvent:SetTextInputEvent(currentEvent)

            InputTable table = GetInputTable(inputGroup)

            /*
            Using boolean short-circuit evaluation. If the table is defined,
            the input is processed - if the input set wasn't found in the table,
            it returns false. Thus the default table is referenced if there was
            no table with an identifier matching the input group, or if such a
            table existed but didn't handle this InputSet.
            */
            if table = undefined or table:ProcessInput(set, behaviorEvent) = false
                GetDefaultInputTable():ProcessInput(set, behaviorEvent)
            end

            repeat while listenIterator:HasNext()
                currentListener = listenIterator:Next()
                currentListener:TextInput(currentEvent)
            end

            listenIterator:Rewind()
        end
    end

    /*
    This action forwards a mouse event to the listeners that are stored directly
    in the DesktopInput.
    */
    private action NotifyMouseListeners(MouseEvent event)

        integer counter = 0

        if event:eventType = event:MOVED_MOUSE
            repeat mouseMovementListeners:GetSize() times
                mouseMovementListeners:Get(counter):MovedMouse(event)
                counter = counter + 1
            end

        elseif event:eventType = event:DRAGGED_MOUSE
            repeat mouseMovementListeners:GetSize() times
                mouseMovementListeners:Get(counter):DraggedMouse(event)
                counter = counter + 1
            end

        elseif event:eventType = event:CLICKED_MOUSE
            repeat mouseListeners:GetSize() times
                mouseListeners:Get(counter):ClickedMouse(event)
                counter = counter + 1
            end

        elseif event:eventType = event:RELEASED_MOUSE
            repeat mouseListeners:GetSize() times
                mouseListeners:Get(counter):ReleasedMouse(event)
                counter = counter + 1
            end

        else
            repeat mouseWheelListeners:GetSize() times
                mouseWheelListeners:Get(counter):ScrolledMouse(event)
                counter = counter + 1
            end
            
        end
    end

    /*
    This action will add a KeyboardListener to the DesktopInput. The 
    DesktopInput will notify the KeyboardListener if keys are pressed on the 
    keyboard. This action is automatically called by the Game class when needed.
    */
    action AddKeyboardListener(KeyboardListener listener)
        keyboardListeners:Add(listener)
    end

    /*
    This action will remove a KeyboardListener from the DesktopInput. The
    DesktopInput will no longer notify the given KeyboardListener of 
    KeyboardEvents. This action is automatically called by the Game class when 
    needed.
    */
    action RemoveKeyboardListener(KeyboardListener listener)
        keyboardListeners:Remove(listener)
    end

    /*
    This action adds a MouseListener directly to the GameInput. When the
    GameInput receives a mouse event, it will first check if any of the items
    added to the layers of the Game can handle the event - if none do, then all
    MouseListeners which are added directly to the GameInput will receive the
    event.
    */
    action AddMouseListener(MouseListener listener)
        mouseListeners:Add(listener)
    end

    /*
    This action adds a MouseMovementListener directly to the GameInput. When the
    GameInput receives a mouse event, it will first check if any of the items
    added to the layers of the Game can handle the event - if none do, then all
    MouseMovementListeners which are added directly to the GameInput will 
    receive the event.
    */
    action AddMouseMovementListener(MouseMovementListener listener)
        mouseMovementListeners:Add(listener)
    end

    /*
    This action adds a MouseWheelListener directly to the GameInput. When the
    GameInput receives a mouse event, it will first check if any of the items
    added to the layers of the Game can handle the event - if none do, then all
    MouseWheelListeners which are added directly to the GameInput will 
    receive the event.
    */
    action AddMouseWheelListener(MouseWheelListener listener)
        mouseWheelListeners:Add(listener)
    end

    /*
    This action adds a TouchListener directly to the GameInput. Note that touch
    isn't supported on desktop platforms - if the Game is running on a desktop
    platform, this action will be ignored.
    */
    action AddTouchListener(TouchListener listener)
        // Do nothing - touch isn't supported on Desktop.
    end

    /*
    This action will add a TextInputListener to the DesktopInput. The 
    DesktopInput will notify the TextInputListener when the user provides text
    input to the game via the keyboard.
    */
    action AddTextInputListener(TextInputListener listener)
        textInputListeners:Add(listener)
    end

    /*
    This action will remove a TextInputListener from the DesktopInput. The
    DesktopInput will no longer notify the given TextInputListener of 
    TextInputEvents. 
    */
    action RemoveTextInputListener(TextInputListener listener)
        textInputListeners:Remove(listener)
    end

    /*
    This action removes a MouseListener from the GameInput. It will no longer
    receive mouse events directly from the GameInput.
    */
    action RemoveMouseListener(MouseListener listener)
        mouseListeners:Remove(listener)
    end

    /*
    This action removes a MouseMovementListener from the GameInput. The listener
    will no longer receive events from the GameInput.
    */
    action RemoveMouseMovementListener(MouseMovementListener listener)
        mouseMovementListeners:Remove(listener)
    end

    /*
    This action removes a MouseWheelListener from the GameInput. The listener
    will no longer receive events from the GameInput.
    */
    action RemoveMouseWheelListener(MouseWheelListener listener)
        mouseWheelListeners:Remove(listener)
    end

    /*
    This action removes a TouchListener from the GameInput. Note that touch
    isn't supported on desktop platforms - if the Game is running on a desktop
    platform, this action will be ignored.
    */
    action RemoveTouchListener(TouchListener listener)
        // Do nothing - touch isn't supported on Desktop.
    end

    /*
    This action will add a ResizeListener to the GameInput. The 
    GameInput will notify the ResizeListener when the size of the game space
    changes, e.g. the window changes size or goes fullscreen.
    */
    action AddResizeListener(ResizeListener listener)
        resizeListeners:Add(listener)
    end

    /*
    This action will remove a ResizeListener from the GameInput. The
    GameInput will no longer notify the given ResizeListener of 
    ResizeEvents. 
    */
    action RemoveResizeListener(ResizeListener listener)
        resizeListeners:Remove(listener)
    end
end