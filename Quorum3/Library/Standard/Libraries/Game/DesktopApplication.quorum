package Libraries.Game

use Libraries.Containers.Array
use Libraries.System.DateTime
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Game.Graphics.Painter2D

/*
This is an internal class used by the Game class to manage several resources
that must be unique. It is responsible for initial set up, execution of the
main loop, and exiting a game. Most users will never use this class directly.

This particular implementation of Application is meant for use on Desktops.
*/
class DesktopApplication is Application

    /*
    The Setup action is used for initial set up of the Game's resources, and
    will begin the game's main loop. This is automatically used by the Game
    class via the Game:StartGame() action.
    */
    action Setup(Game game)
        
        parent:Application:Setup(game)

        game:InitializeLayers()

        MainLoop()
        
    end 
     
    private action MainLoop

        DesktopDisplay display = cast(DesktopDisplay, parent:Application:display)

        parent:Application:game:CreateGame()
        
        display:SetResize(true)

        integer lastWidth = display:GetWidth()
        integer lastHeight = display:GetHeight()
        
        display:SetLastTime()

        
        boolean wasActive = true

        //The actual workhorse loop.
        repeat until parent:Application:running = false

            //display:ProcessMessages()

            boolean isActive = display:IsActive()

            if wasActive and not isActive
                wasActive = false
                // listener:Pause()
            end

            // We may need LifeCycleListeners here.

            if not wasActive and isActive
                wasActive = true
                // listener:Resume()
            end

            // We may need LifeCycleListeners here.

            boolean shouldRender = false

            DesktopConfiguration configuration
            configuration = cast(DesktopConfiguration, display:GetConfiguration())

            configuration:x = display:GetDisplayX()
            configuration:y = display:GetDisplayY()

            // Note: Using GetDisplayX and GetDisplayY to differentiate between
            // retrieving the current config's x and y and getting the x and y
            // from calling the static Display.
            boolean shouldrender = false
            if display:GetResize() or display:WasResized() or (display:GetWidth() not= configuration:width) or (display:GetHeight() not= configuration:height)

                display:SetResize(false)

                if configuration:autoResizeTextures
                    parent:Application:glmanager:SetDrawingRegion(0, 0, display:GetWidth(), display:GetHeight())
                end

                display:RequestRendering()

                configuration:width = display:GetWidth()
                configuration:height = display:GetHeight()

                // libgdx has another listener check here, as shown below.
                // if (listener != null) listener.resize(Display.getWidth(), Display.getHeight());

                // Not sure if RequestRendering will need the display's config
                // already updated. If so, just remove comment from below line:

                display:SetConfiguration(configuration)

            end

            //The remainder of the libgdx code to be included here is commented:
            //this if(true) should be executeRunnables(). How to do this?
            if(true) shouldrender = true end

            if(display:shouldrender)
                shouldrender = display:shouldrender
            end


            if(shouldrender)
               display:UpdateTime()

               // Temporary fix to full screen games not using the full viewport area.
//               if configuration:fullScreen
//                   parent:Application:glmanager:SetDrawingRegion(0, 0, display:GetWidth(), display:GetHeight())
//               end

               parent:Application:game:ContinueGame()
               display:Update()
            end

            display:SetConfiguration(configuration)

            if display:IsCloseRequested() or parent:Application:game:exitRequested
                Exit()
            end

        end 
        
        display:Destroy()
        
    end

    /*
    This action tells the game to close at the end of the next iteration of
    the MainLoop. It is called automatically by the Game class's Exit action.
    */
    action Exit()
        parent:Application:running = false
    end

end