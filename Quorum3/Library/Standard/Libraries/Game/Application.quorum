package Libraries.Game

use Libraries.Containers.Array
use Libraries.System.DateTime
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Game.Graphics.Painter

//This is an implementation of 
//https://github.com/libgdx/libgdx/blob/d1f18bd3fe6e399aea61026cb1f58f1e0b89bc56/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
class Application 

    Game game = undefined
    GameDisplay display = undefined
    integer loglevel = 1 //LOG_INFO
    GameStateManager manager
    GraphicsManager glmanager = undefined
    boolean running = true
 
    on create
        manager:SetApplication(me)
    end

    action Setup(Game game, ApplicationConfiguration config, GameDisplay disp)
        //load natives?
        if config:title = ""
            config:title = "Game"
        end

        display = disp
        manager:SetGameDisplay(disp)
        me:game = game
        
        //Initialize the game graphics for the rest of the library.
        GraphicsManager temp
        manager:SetGameGraphics(temp)

        glmanager = manager:GetGameGraphics()
        /*
                Gdx.audio = audio;
		Gdx.files = files;
		Gdx.input = input;
		Gdx.net = net;
        */

        // This has moved into GameDisplay:SetupDisplay().
        //display:SetVSync(config:vSyncEnabled)

        Painter tempBatch
        game:batch = tempBatch
        

        MainLoop()
        
    end 
    
    /* 
      THE REAL SETUP
      Notes: App listener is what stores their code, app config is obv, LwjglGraphics is GameDisplay

      	public LwjglApplication (ApplicationListener listener, LwjglApplicationConfiguration config, LwjglGraphics graphics) {
		LwjglNativesLoader.load();		

		if (config.title == null) config.title = listener.getClass().getSimpleName();

		this.graphics = graphics;
		if (!LwjglApplicationConfiguration.disableAudio)
			audio = new OpenALAudio(config.audioDeviceSimultaneousSources, config.audioDeviceBufferCount,
				config.audioDeviceBufferSize);
		files = new LwjglFiles();
		input = new LwjglInput();
		net = new LwjglNet();
		this.listener = listener;
		this.preferencesdir = config.preferencesDirectory;

		Gdx.app = this;
		Gdx.graphics = graphics;
		Gdx.audio = audio;
		Gdx.files = files;
		Gdx.input = input;
		Gdx.net = net;
		initialize();
	}
        
     */

     
    //Kicks off the game in it's own thread from inside Java.
    //Equivilent to the Initialize method.
    system action NativeSetup

    private action MainLoop

        game:Create()
        
        display:SetResize(true)

        integer lastWidth = display:GetWidth()
        integer lastHeight = display:GetHeight()
        
        display:SetLastTime()   //Forced to get nanoseconds from java

        
        boolean wasActive = true
        

        //The actual workhorse loop.
        repeat until running = false

            display:ProcessMessages()

            if display:IsCloseRequested() or game:exitRequested
                Exit()
            end

            boolean isActive = display:IsActive()

            if wasActive and not isActive
                wasActive = false
                // listener:Pause()
            end

            // We may need LifeCycleListeners here.

            if not wasActive and isActive
                wasActive = true
                // listener:Resume()
            end

            // We may need LifeCycleListeners here.

            boolean shouldRender = false

            // In libgdx, there is an "if" statement here looking for if
            // graphics.canvas is != null. We skip straight to the else
            // statement for now.

            ApplicationConfiguration configuration
            configuration = display:GetConfig()

            configuration:x = display:GetDisplayX()
            configuration:y = display:GetDisplayY()

            // Note: Using GetDisplayX and GetDisplayY to differentiate between
            // retrieving the current config's x and y and getting the x and y
            // from calling the static Display.
            boolean shouldrender = false
            if display:GetResize() or display:WasResized() or (display:GetWidth() not= configuration:width) or (display:GetHeight() not= configuration:height)

                display:SetResize(false)

                // Checking glmanager for NullPointerException
                // If null, check to see if GraphicsManager's
                // GetGameGraphics() action is working properly.
                    /*if glmanager = undefined
                        output("WARNING: Undefined glmanager!")
                    end*/


                if configuration:autoResizeTextures
                    glmanager:SetDrawingRegion(0,0,display:GetWidth(), display:GetHeight())
                end

                display:RequestRendering()

                configuration:width = display:GetWidth()
                configuration:height = display:GetHeight()

                // We may want to rename "display:GetWidth" and "display:GetHeight"
                // to "display:GetDisplayWidth" and "display:GetDisplayHeight"

                // libgdx has another listener check here, as shown below.
                // if (listener != null) listener.resize(Display.getWidth(), Display.getHeight());

                // Not sure if RequestRendering will need the display's config
                // already updated. If so, just remove comment from below line:

                display:SetConfig(configuration)

            end

        //The remainder of the libgdx code to be included here is commented:
        //this if(true) should be executeRunnables(). How to do this?
        if(true) shouldrender = true end
        
        //input.update()
        //|=
        if(display:shouldrender)
            shouldrender = display:shouldrender
        end


        if(shouldrender)
           display:UpdateTime()
           //increment frame

           game:ContinueGame()
           display:UpdateFalse()
        end


        /*
            if (executeRunnables()) shouldRender = true;
        // If one of the runnables set running to false, for example after an exit().
        if (!running) break;
        input.update();
        shouldRender |= graphics.shouldRender();
        input.processEvents();
        if (audio != null) audio.update();
        if (!isActive && graphics.config.backgroundFPS == -1) shouldRender = false;
        int frameRate = isActive ? graphics.config.foregroundFPS : graphics.config.backgroundFPS;
        if (shouldRender) {
            graphics.updateTime();
            graphics.frameId++;
            listener.render();
            Display.update(false);
        } else {
            // Sleeps to avoid wasting CPU in an empty loop.
            if (frameRate == -1) frameRate = 10;
            if (frameRate == 0) frameRate = graphics.config.backgroundFPS;
            if (frameRate == 0) frameRate = 30;
        }
        if (frameRate > 0) Display.sync(frameRate);     

        */

        display:SetConfig(configuration)

        end 
        
        display:Destroy()
        
    end

    action Exit()
        running = false
    end

    // FOR DEBUGGING PURPOSES ONLY
    system action CheckForErrors

end