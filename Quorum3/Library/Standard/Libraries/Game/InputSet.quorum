package Libraries.Game

use Libraries.Compute.BitwiseOperations
use Libraries.Containers.Array

class InputSet 

    /*
    Bit positional constants. These can be modified to adjust the positioning of
    all the bits used to store information.
    */
    constant integer VALUE_SIZE = 8
    constant integer TYPE_SIZE = 1
    constant integer TRIGGER_SIZE = 1
    public constant integer SHIFT = VALUE_SIZE + TYPE_SIZE + TRIGGER_SIZE
    public constant integer CONTROL = SHIFT + 1
    public constant integer ALT = CONTROL + 1
    public constant integer META = ALT + 1

    public constant integer KEYBOARD_INPUT = 0
    public constant integer MOUSE_INPUT = 1
    public constant integer PRESS = 0
    public constant integer RELEASE = 1
    constant text SHIFT_TEXT = "Shift"
    constant text CONTROL_TEXT = "Control"
    constant text ALT_TEXT = "Alt"
    constant text META_TEXT = "Meta"

    constant BitwiseOperations bits

    /*
    Where the actual information is stored for the InputSet. Storing in this
    format allows for matching InputSets to be used as keys into a HashTable,
    even if the objects themselves have different hashcodes.

    The individual bits represent the following information:
        1st to 8th bits: Integer value of the key or mouse input.
        9th bit: 0 if the input is keyboard input, 1 if the input is mouse input.
        10th bit: 0 if the input triggers on press, 1 if the input triggers on release.
        11th bit: Shift key modifier - 1 if required, 0 otherwise.
        12th bit: Control key modifier - 1 if required, 0 otherwise.
        13th bit: Alt key modifier - 1 if required, 0 otherwise.
        14th bit: Meta key modifier - 1 if required, 0 otherwise.
    */
    integer bitmask = 0

    action AddModifier(integer modifier)
        bitmask = bits:Or(bitmask, bits:ShiftLeft(1, modifier))
    end

    action RemoveModifier(integer modifier)
        bitmask = bits:And(bitmask, bits:Negate(bits:ShiftLeft(1, modifier)))
    end

    action HasModifier(integer modifier) returns boolean
        return bits:And(1, bits:ShiftRight(bitmask, modifier)) = 1
    end

    action EmptyModifiers
        bitmask = bits:And(bitmask, bits:Negate(bits:ShiftLeft(-1, SHIFT + 1)))
    end

    action Empty
        bitmask = 0
    end

    action SetKeyboardInput(integer key)
        // Shifting one extra space will insert a 0 in the type bit, marking it as keyboard input.
        bitmask = bits:And(bitmask, bits:ShiftLeft(-1, VALUE_SIZE + TYPE_SIZE + 1))
        bitmask = bits:Or(bitmask, key)
    end

    action SetMouseInput(integer mouseButton)
        bitmask = bits:And(bitmask, bits:ShiftLeft(-1, VALUE_SIZE + TYPE_SIZE))
        // Manually set the type bit to 1 to indicate mouse input.
        bitmask = bits:Or(bitmask, bits:ShiftLeft(1, VALUE_SIZE))
        bitmask = bits:Or(bitmask, mouseButton)
    end

    action SetInputTrigger(integer type)
        if type = 0
            bitmask = bits:And(bitmask, bits:ShiftLeft(-1, VALUE_SIZE + TYPE_SIZE + TRIGGER_SIZE + 1))
        elseif type = 1
            bitmask = bits:Or(bitmask, bits:ShiftLeft(1, VALUE_SIZE + TYPE_SIZE))
        end
    end

    action GetInputTrigger returns integer
        return bits:And(1, bits:ShiftRight(bitmask, VALUE_SIZE + TYPE_SIZE))
    end

    action GetInputType returns integer
        return bits:And(1, bits:ShiftRight(bitmask, VALUE_SIZE))
    end

    action GetInputValue returns integer
        return bits:And(bitmask, bits:Negate(bits:ShiftLeft(-1, VALUE_SIZE)))
    end

    action GetModifiers returns Array<integer>
        Array<integer> modifiers
        if HasModifier(SHIFT)
            modifiers:Add(SHIFT)
        end
        if HasModifier(CONTROL)
            modifiers:Add(CONTROL)
        end
        if HasModifier(ALT)
            modifiers:Add(ALT)
        end
        if HasModifier(META)
            modifiers:Add(META)
        end
        return modifiers
    end

    action Set(InputSet set)
        bitmask = set:GetHashCode()
    end

    action Copy returns InputSet
        InputSet set
        set:Set(me)
        return set
    end

    action GetHashCode returns integer
        return bitmask
    end

    action Equals(Object o) returns boolean
        if o is InputSet
            return Equals(cast(InputSet, o))
        end
        return false
    end

    action Equals(InputSet set) returns boolean
        return bitmask = set:GetHashCode()
    end
end