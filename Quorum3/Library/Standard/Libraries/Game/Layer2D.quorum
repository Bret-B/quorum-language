package Libraries.Game

use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.OrthographicCamera
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.TouchEvent
use Libraries.Interface.Events.MouseListener
use Libraries.Interface.Events.MouseMovementListener
use Libraries.Interface.Events.MouseWheelListener
use Libraries.Interface.Events.TouchListener
use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Game.Graphics.Painter2D
use Libraries.Game.Graphics.Color
use Libraries.Compute.Vector3
use Libraries.Containers.Iterator
use Libraries.Game.Collision.CollisionManager2D
use Libraries.Interface.Events.CollisionListener2D
use Libraries.Game.Collision.CollisionEdge2D
use Libraries.Interface.Events.CollisionEvent2D

/*
The Layer2D class is used to manage a number of 2D objects, as well as manage
input. The Layer2D effectively consists of a 2D "world", where all objects added
to it exist in the same space and can interact with each other.

Attribute: Author William Allee

Attribute: Example

use Libraries.Game.Game
use Libraries.Game.Layer2D
use Libraries.Game.Graphics.Drawable

class Main is Game

    action Main
        StartGame()
    end

    action CreateGame
        Drawable box
        box:LoadFilledRectangle(50, 50)
        box:SetPosition(100, 100)

        Drawable circle
        circle:LoadFilledCircle(25)
        circle:SetPosition(300, 100)

        Layer2D layer
        layer:Add(box)
        layer:Add(circle)
        AddLayer(layer)
    end

    action Update(number seconds)
    end
end
*/
class Layer2D is Layer

    Array<Item2D> items
    Array<MouseListener> mouseListeners
    Array<MouseMovementListener> mouseMovementListeners
    Array<MouseWheelListener> mouseWheelListeners
    Array<TouchListener> touchListeners
    Camera camera = undefined
    Painter2D painter

    CollisionManager2D collisionManager

    boolean newItemAdded = false

    on create
        OrthographicCamera cam
        camera = cam
        collisionManager:SetLayer(me)
    end

    /*
    This action will add an Item2D to this Layer. It will be updated along with
    the rest of the layer, and will be drawn on the screen (if it is visible and
    possible to draw the given Item2D). The Item2D will be added to the back of
    the layer's internal array of items.

    Attribute: Parameter item The Item2D to be added to the layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Item2D
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            // Item2D objects aren't visible, but can still be used for game logic.
            Item2D area
            area:SetSize(50, 50)
            area:SetPosition(100, 100)

            // Drawables inherit from Item2D, so they can be added too.
            Drawable circle
            circle:LoadFilledCircle(25)
            circle:SetPosition(300, 100)

            Layer2D layer
            layer:Add(area)
            layer:Add(circle)
            AddLayer(layer)
        end

        action Update(number seconds)
        end
    end

    */
    action Add(Item2D item)
        item:SetLayer(me)
        items:Add(item)
        newItemAdded = true
    end

    /*
    This action will add an Item2D to this Layer's array of items at the index
    location. It will be updated along with the rest of the layer, and will be 
    drawn on the screen (if it is visible and possible to draw the given Item2D).

    Attribute: Parameter index The index to store the item at in the layer's array of items.
    Attribute: Parameter item The Item2D to be added to this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Item2D
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            // Item2D objects aren't visible, but can still be used for game logic.
            Item2D area
            area:SetSize(50, 50)
            area:SetPosition(100, 100)

            // Drawables inherit from Item2D, so they can be added too.
            Drawable circle
            circle:LoadFilledCircle(25)
            circle:SetPosition(300, 100)

            Layer2D layer
            layer:Add(0, area)
            layer:Add(1, circle)
            AddLayer(layer)
        end

        action Update(number seconds)
        end
    end

    */
    action Add(integer index, Item2D item)
        item:SetLayer(me)
        items:Add(index, item)
        newItemAdded = true
    end

    /*
    This action will add an Item2D to this layer's array of items at index 0. 
    It will be updated along with the rest of the layer, and will be drawn on 
    the screen (if it is visible and possible to draw the given Item2D). Adding
    an item to the front will cause it to be drawn and updated before other
    items in the layer, and other drawn items will appear to be on top of it.

    Attribute: Parameter item The item to add to the front of the layer's item array.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Item2D
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            // Item2D objects aren't visible, but can still be used for game logic.
            Item2D area
            area:SetSize(50, 50)
            area:SetPosition(100, 100)

            // Drawables inherit from Item2D, so they can be added too.
            Drawable circle
            circle:LoadFilledCircle(25)
            circle:SetPosition(300, 100)

            Layer2D layer
            layer:AddToFront(area)
            layer:AddToFront(circle)
            AddLayer(layer)
        end

        action Update(number seconds)
        end
    end

    */
    action AddToFront(Item2D item)
        item:SetLayer(me)
        items:AddToFront(item)
        newItemAdded = true
    end

    /*
    This action will clear all the items in this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Drawable circle
            circle:LoadFilledCircle(25)
            circle:SetPosition(300, 100)

            Layer2D layer
            layer:Add(circle)
            AddLayer(layer)

            layer:Empty()
        end

        action Update(number seconds)
        end
    end

    */
    action Empty
        Iterator<Item2D> it = items:GetIterator()
        repeat while it:HasNext()
            Item2D body = it:Next()
            CollisionEdge2D edge = body:collisionList
            repeat while edge not= undefined
                CollisionEdge2D edge0 = edge
                edge = edge:GetNext()
                collisionManager:Destroy(edge0:GetCollision())
            end
            body:collisionList = undefined

            body:DestroyNodes(collisionManager:GetBroadphase())
            body:SetCollidable(false)
            body:SetLayer(undefined)
        end
        items:Empty()
    end

    /*
    This action will remove an Item2D from this layer. If the item was not a
    part of this layer, this action will have no effect.

    Attribute: Parameter item The item to remove from this layer.

    Attribute: Returns Whether or not the item was found and removed from the layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Drawable circle
            circle:LoadFilledCircle(25)
            circle:SetPosition(300, 100)

            Layer2D layer
            layer:Add(circle)
            AddLayer(layer)

            layer:Remove(circle)
        end

        action Update(number seconds)
        end
    end
    
    */
    action Remove(Item2D item) returns boolean
        CollisionEdge2D edge = item:collisionList
        repeat while edge not= undefined
            CollisionEdge2D edge0 = edge
            edge = edge:GetNext()
            collisionManager:Destroy(edge0:GetCollision())
        end
        item:collisionList = undefined

        item:DestroyNodes(collisionManager:GetBroadphase())
        item:SetCollidable(false)

        item:SetLayer(undefined)
        return items:Remove(item)
    end

    /*
    This action will remove an Item2D at the index location from this layer's 
    array of items, and return the item that was removed.

    Attribute: Parameter index The index to remove an item from in this layer's array of items.

    Attribute: Returns The item that was removed from the item array in the layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Item2D
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Drawable circle
            circle:LoadFilledCircle(25)
            circle:SetPosition(300, 100)

            Layer2D layer
            layer:Add(circle)
            AddLayer(layer)

            Item2D item = layer:RemoveAt(0)
        end

        action Update(number seconds)
        end
    end

    */
    action RemoveAt(integer index) returns Item2D
        Item2D item = items:RemoveAt(index)

        CollisionEdge2D edge = item:collisionList
        repeat while edge not= undefined
            CollisionEdge2D edge0 = edge
            edge = edge:GetNext()
            collisionManager:Destroy(edge0:GetCollision())
        end
        item:collisionList = undefined

        item:DestroyNodes(collisionManager:GetBroadphase())
        item:SetCollidable(false)

        item:SetLayer(undefined)
        return item
    end 

    /*
    This action will remove an Item2D from the front of the array of items in
    this layer, and return the item that was removed. This is functionally the
    same as calling "RemoveAt(0)".

    Attribute: Returns The item that was removed from the front of the layer's item array.
    
    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Item2D
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Drawable circle
            circle:LoadFilledCircle(25)
            circle:SetPosition(300, 100)

            Layer2D layer
            layer:Add(circle)
            AddLayer(layer)

            Item2D item = layer:RemoveFromFront()
        end

        action Update(number seconds)
        end
    end

    */
    action RemoveFromFront returns Item2D
        Item2D item = items:RemoveFromFront()
        CollisionEdge2D edge = item:collisionList
        repeat while edge not= undefined
            CollisionEdge2D edge0 = edge
            edge = edge:GetNext()
            collisionManager:Destroy(edge0:GetCollision())
        end
        item:collisionList = undefined

        item:DestroyNodes(collisionManager:GetBroadphase())
        item:SetCollidable(false)

        item:SetLayer(undefined)
        return item
    end

    /*
    This action will remove an Item2D from the end of the array of items in 
    the layer, and return the item that was removed.

    Attribute: Returns The item that was removed from this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Item2D
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Drawable circle
            circle:LoadFilledCircle(25)
            circle:SetPosition(300, 100)

            Layer2D layer
            layer:Add(circle)
            AddLayer(layer)

            Item2D item = layer:RemoveFromEnd()
        end

        action Update(number seconds)
        end
    end

    */
    action RemoveFromEnd returns Item2D
        Item2D item = items:RemoveFromEnd()

        CollisionEdge2D edge = item:collisionList
        repeat while edge not= undefined
            CollisionEdge2D edge0 = edge
            edge = edge:GetNext()
            collisionManager:Destroy(edge0:GetCollision())
        end
        item:collisionList = undefined

        item:DestroyNodes(collisionManager:GetBroadphase())
        item:SetCollidable(false)

        item:SetLayer(undefined)
        return item
    end

    /*
    This action will get an Item2D stored in the layer at the given index in the
    layer's internal array of items.

    Attribute: Parameter index The index to retrieve an item from in the layer's array of items.

    Attribute: Returns The Item2D stored at the index in the array.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Item2D
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Drawable circle
            circle:LoadFilledCircle(25)
            circle:SetPosition(300, 100)

            Layer2D layer
            layer:Add(circle)
            AddLayer(layer)

            Item2D item = layer:Get(0)
        end

        action Update(number seconds)
        end
    end

    */
    action Get(integer index) returns Item2D
        return items:Get(index)
    end

    /*
    This action will return the Item2D at the front of the layer's array of
    items. This is functionally the same as calling "Get(0)".

    Attribute: Returns The first item in the layer's array of items.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Item2D
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Drawable circle
            circle:LoadFilledCircle(25)
            circle:SetPosition(300, 100)

            Layer2D layer
            layer:Add(circle)
            AddLayer(layer)

            Item2D item = layer:GetFromFront()
        end

        action Update(number seconds)
        end
    end

    */
    action GetFromFront returns Item2D
        return items:GetFromFront()
    end

    /*
    This action will return the item stored at the end of the layer's array of
    items.

    Attribute: Returns The last item in the layer's array of items.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Item2D
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Drawable circle
            circle:LoadFilledCircle(25)
            circle:SetPosition(300, 100)

            Layer2D layer
            layer:Add(circle)
            AddLayer(layer)

            Item2D item = layer:GetFromEnd()
        end

        action Update(number seconds)
        end
    end

    */
    action GetFromEnd returns Item2D
        return items:GetFromEnd()
    end

    /*
    This action will return an iterator of all the Item2D's stored inside this
    layer's array of items.

    Attribute: Returns An iterator containing all Item2D's stored in this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Item2D
    use Libraries.Containers.Iterator

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Item2D item1
            Item2D item2
            Item2D item3

            Layer2D layer
            layer:Add(item1)
            layer:Add(item2)
            layer:Add(item3)
            AddLayer(layer)

            Iterator<Item2D> itemIterator = layer:GetIterator()
        end

        action Update(number seconds)
        end
    end

    */
    action GetIterator returns Iterator<Item2D>
        return items:GetIterator()
    end

    /*
    This action will return the number of items that have been added to this
    layer.

    Attribute: Returns The number of items stored in this layer's array of items.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Item2D

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Item2D item1
            Item2D item2
            Item2D item3

            Layer2D layer
            layer:Add(item1)
            layer:Add(item2)
            layer:Add(item3)
            AddLayer(layer)

            integer size = layer:GetSize()
            output "There are " + size + " items stored in the layer."
        end

        action Update(number seconds)
        end
    end

    */
    action GetSize returns integer
        return items:GetSize()
    end

    /*
    This action will return false if there are items stored in this layer's array
    of items, or true if there are none.

    Attribute: Returns Whether or not any items are stored in this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Item2D

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Item2D item1
            Item2D item2
            Item2D item3

            Layer2D layer
            boolean empty = layer:IsEmpty()
            output "IsEmpty() returned " + empty

            layer:Add(item1)
            layer:Add(item2)
            layer:Add(item3)

            empty = layer:IsEmpty()
            output "After adding items, IsEmpty() returns " + empty

            AddLayer(layer)            
        end

        action Update(number seconds)
        end
    end

    */
    action IsEmpty returns boolean
        return items:IsEmpty()
    end

    /*
    This action will set the value of the given index in the layer's array of 
    items to be the given Item2D. The previous value will be overwritten. If the
    index does not exist in the array (e.g., the given index is larger than the 
    number of items stored in this layer), an error will be thrown.

    Attribute: Parameter index What index to set inside the layer's array of items.
    Attribute: Parameter item The item to store at the given index in the array.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Item2D

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Item2D item1
            Item2D item2
            Item2D item3

            Layer2D layer
            layer:Add(item1)
            layer:Add(item2)
            layer:Set(1, item3)
            AddLayer(layer)
        end

        action Update(number seconds)
        end
    end

    */
    action Set(integer index, Item2D item)
        items:Set(index, item)
        newItemAdded = true
    end

    /*
    This action will update all of the items contained within this Layer. The
    given number of seconds will be passed to each updated item. This is
    automatically called by the Game class as needed. Most users will never need
    to use this action directly.
    */
    action Update(number seconds)
        integer counter = 0
        repeat items:GetSize() times
            items:Get(counter):UpdateAll(seconds)
            counter = counter + 1
        end
    end
    
    /*
    This action will draw all items in this Layer on the screen (if they can be
    drawn and they aren't hidden). If the Layer is currently hidden, then this
    action will do nothing. This is automatically called by the Game class as 
    needed. Most users will never need to use this action directly.
    */
    action Draw
        if not IsShowing()
            return now
        end

        camera:Update()
        painter:ApplyCamera(camera)
        
        painter:Begin()

        integer counter = 0
        repeat items:GetSize() times
            items:Get(counter):Draw(painter)
            counter = counter + 1
        end

        painter:End()
    end

    /*
    This action will set the camera being used by this Layer. The camera is used
    to determine what will be drawn on the screen. Objects will be drawn on the
    screen as they are seen by the Layer's set camera.

    Attribute: Parameter cam The camera that this layer should use.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Game.Graphics.OrthographicCamera

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            OrthographicCamera camera
            Layer2D layer
            layer:SetCamera(camera)
            AddLayer(layer)
        end

        action Update(number seconds)
        end
    end

    */
    action SetCamera(Camera cam)
        camera = cam
    end

    /*
    This action will return the camera being used by this Layer. The camera is used
    to determine what will be drawn on the screen. Objects will be drawn on the
    screen as they are seen by the Layer's set camera.

    Attribute: Returns The camera currently being used by this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Game.Graphics.Camera

    class Main is Game

        Camera layerCamera = undefined

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            layerCamera = layer:GetCamera()
            AddLayer(layer)
        end

        action Update(number seconds)
        end
    end

    */
    action GetCamera returns Camera
        return camera
    end

    /*
    This action will notify mouse listeners that are a part of this layer of the
    given mouse event. This is called automatically by the Game engine as 
    needed. Most users will never need to use this action directly.

    Attribute: Parameter event The MouseEvent to send to the MouseListeners.
    */
    action ProcessMouseEvent(MouseEvent event)
    
        boolean processing = true
        integer counter = items:GetSize()
        Item2D temp = undefined

        Vector3 pointVector = camera:ScreenToWorldCoordinates(event:GetX(), event:GetY())

        repeat while counter > 0 and processing
            counter = counter - 1
            temp = items:Get(counter):GetItemAt(pointVector:GetX(), pointVector:GetY())

            if temp not= undefined
                event:SetSource(temp)
                temp:ProcessMouseEvent(event)
                processing = not event:WasEventHandled()
            end
        end

        if processing

            if event:eventType = event:MOVED_MOUSE
                if mouseMovementListeners:GetSize() > 0
                    counter = 0
                    event:SetEventHandled(true)
                    repeat mouseMovementListeners:GetSize() times
                        mouseMovementListeners:Get(counter):MovedMouse(event)
                        counter = counter + 1
                    end
                end

            elseif event:eventType = event:DRAGGED_MOUSE
                if mouseMovementListeners:GetSize() > 0
                    counter = 0
                    event:SetEventHandled(true)
                    repeat mouseMovementListeners:GetSize() times
                        mouseMovementListeners:Get(counter):DraggedMouse(event)
                        counter = counter + 1
                    end
                end

            elseif event:eventType = event:CLICKED_MOUSE
                if mouseListeners:GetSize() > 0
                    counter = 0
                    event:SetEventHandled(true)
                    repeat mouseListeners:GetSize() times
                        mouseListeners:Get(counter):ClickedMouse(event)
                        counter = counter + 1
                    end
                end

            elseif event:eventType = event:RELEASED_MOUSE
                if mouseListeners:GetSize() > 0
                    counter = 0
                    event:SetEventHandled(true)
                    repeat mouseListeners:GetSize() times
                        mouseListeners:Get(counter):ReleasedMouse(event)
                        counter = counter + 1
                    end
                end

            elseif event:eventType = event:SCROLLED_MOUSE
                if mouseWheelListeners:GetSize() > 0
                    counter = 0
                    event:SetEventHandled(true)
                    repeat mouseWheelListeners:GetSize() times
                        mouseWheelListeners:Get(counter):ScrolledMouse(event)
                        counter = counter + 1
                    end
                end
            end

        end
    end

    /*
    This action will notify touch listeners that are a part of this layer of the
    given touch event. This is called automatically by the Game engine as 
    needed. Most users will never need to use this action directly.

    Attribute: Parameter event The TouchEvent to send to the TouchListeners.
    */
    action ProcessTouchEvent(TouchEvent event)
        
        boolean processing = true
        integer counter = items:GetSize()
        Item2D temp = undefined

        Vector3 pointVector = camera:ScreenToWorldCoordinates(event:GetX(), event:GetY())

        repeat while counter > 0 and processing
            counter = counter - 1
            temp = items:Get(counter):GetItemAt(pointVector:GetX(), pointVector:GetY())

            if temp not= undefined
                temp:ProcessTouchEvent(event)
                processing = not event:WasEventHandled()
            end
        end

        if processing

            if event:eventType = event:MOVED or event:eventType = event:STATIONARY
                if touchListeners:GetSize() > 0
                    counter = 0
                    event:SetEventHandled(true)
                    repeat touchListeners:GetSize() times
                        touchListeners:Get(counter):ContinuedTouch(event)
                        counter = counter + 1
                    end
                end

            elseif event:eventType = event:BEGAN
                if touchListeners:GetSize() > 0
                    counter = 0
                    event:SetEventHandled(true)
                    repeat touchListeners:GetSize() times
                        touchListeners:Get(counter):BeganTouch(event)
                        counter = counter + 1
                    end
                end

            elseif event:eventType = event:ENDED or event:eventType = event:CANCELLED
                if touchListeners:GetSize() > 0
                    counter = 0
                    event:SetEventHandled(true)
                    repeat touchListeners:GetSize() times
                        touchListeners:Get(counter):EndedTouch(event)
                        counter = counter + 1
                    end
                end

            end

        end
    end

    /*
    This action will add a MouseListener to the layer. When the layer receives a
    mouse event, it will first try to find the topmost item which can handle the
    event. If the event is not handled, then all MouseListeners in the layer 
    will receive the event.

    Attribute: Parameter listener The MouseListener to add to this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Events.MouseListener

    class Main is Game

        // For most programs, this should be replaced with 
        // a custom class inheriting from MouseListener.
        MouseListener myListener

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            layer:AddMouseListener(myListener)
            AddLayer(layer)
        end

        action Update(number seconds)
        end

    end

    */
    action AddMouseListener(MouseListener listener)
        mouseListeners:Add(listener)
    end

    /*
    This action will add a MouseMovementListener to the layer. When the layer
    receives a mouse event, it will first try to find the topmost item which can
    handle the event. If the event is not handled, then all 
    MouseMovementListeners in the layer will receive the event.

    Attribute: Parameter listener The MouseMovementListener to add to this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Events.MouseMovementListener

    class Main is Game

        // For most programs, this should be replaced with 
        // a custom class inheriting from MouseMovementListener.
        MouseMovementListener myListener

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            layer:AddMouseMovementListener(myListener)
            AddLayer(layer)
        end

        action Update(number seconds)
        end

    end

    */
    action AddMouseMovementListener(MouseMovementListener listener)
        mouseMovementListeners:Add(listener)
    end

    /*
    This action will add a MouseWheelListener to the layer. When the layer
    receives a mouse event, it will first try to find the topmost item which can
    handle the event. If the event is not handled, then all 
    MouseWheelListeners in the layer will receive the event.

    Attribute: Parameter listener The MouseWheelListener to add to this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Events.MouseWheelListener

    class Main is Game

        // For most programs, this should be replaced with 
        // a custom class inheriting from MouseWheelListener.
        MouseWheelListener myListener

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            layer:AddMouseWheelListener(myListener)
            AddLayer(layer)
        end

        action Update(number seconds)
        end

    end

    */
    action AddMouseWheelListener(MouseWheelListener listener)
        mouseWheelListeners:Add(listener)
    end

    /*
    This action will add a TouchListener to the layer. When the layer
    receives a touch event, it will first try to find the topmost item which can
    handle the event. If the event is not handled, then all 
    TouchListeners in the layer will receive the event.

    Attribute: Parameter listener The TouchListener to add to this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Events.TouchListener

    class Main is Game

        // For most programs, this should be replaced with 
        // a custom class inheriting from TouchListener.
        TouchListener myListener

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            layer:AddTouchListener(myListener)
            AddLayer(layer)
        end

        action Update(number seconds)
        end

    end

    */
    action AddTouchListener(TouchListener listener)
        touchListeners:Add(listener)
    end
    
    /*
    This action will remove a MouseListener from the layer. The listener will no
    longer receive events from the layer. If the given MouseListener is not on
    the layer before calling this action, then this action will have no effect.

    Attribute: Parameter listener The MouseListener to remove from this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Events.MouseListener

    class Main is Game

        // For most programs, this should be replaced with 
        // a custom class inheriting from MouseListener.
        MouseListener myListener

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            layer:AddMouseListener(myListener)
            AddLayer(layer)

            layer:RemoveMouseListener(listener)
        end

        action Update(number seconds)
        end

    end

    */
    action RemoveMouseListener(MouseListener listener)
        mouseListeners:Remove(listener)
    end

    /*
    This action will remove a MouseMovementListener from the layer. The listener
    will no longer receive events from the layer. If the given 
    MouseMovementListener is not on the layer before calling this action, then 
    this action will have no effect.

    Attribute: Parameter listener The MouseMovementListener to remove from this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Events.MouseMovementListener

    class Main is Game

        // For most programs, this should be replaced with 
        // a custom class inheriting from MouseMovementListener.
        MouseMovementListener myListener

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            layer:AddMouseMovementListener(myListener)
            AddLayer(layer)

            layer:RemoveMouseMovementListener(listener)
        end

        action Update(number seconds)
        end

    end

    */
    action RemoveMouseMovementListener(MouseMovementListener listener)
        mouseMovementListeners:Remove(listener)
    end

    /*
    This action will remove a MouseWheelListener from the layer. The listener 
    will no longer receive events from the layer. If the given 
    MouseWheelListener is not on the layer before calling this action, then this
    action will have no effect.

    Attribute: Parameter listener The MouseWheelListener to remove from this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Events.MouseWheelListener

    class Main is Game

        // For most programs, this should be replaced with 
        // a custom class inheriting from MouseWheelListener.
        MouseWheelListener myListener

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            layer:AddMouseWheelListener(myListener)
            AddLayer(layer)

            layer:RemoveMouseWheelListener(listener)
        end

        action Update(number seconds)
        end

    end

    */
    action RemoveMouseWheelListener(MouseWheelListener listener)
        mouseWheelListeners:Remove(listener)
    end

    /*
    This action will remove a TouchListener from the layer. The listener will no
    longer receive events from the layer. If the given TouchListener is not on
    the layer before calling this action, then this action will have no effect.

    Attribute: Parameter listener The TouchListener to remove from this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Events.TouchListener

    class Main is Game

        // For most programs, this should be replaced with 
        // a custom class inheriting from TouchListener.
        TouchListener myListener

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            layer:AddTouchListener(myListener)
            AddLayer(layer)

            layer:RemoveTouchListener(listener)
        end

        action Update(number seconds)
        end

    end

    */
    action RemoveTouchListener(TouchListener listener)
        touchListeners:Remove(listener)
    end

    /*
    Using SetColorFilter will tint all drawn objects on the layer that do not
    have their own custom color tint. For example, using a red color filter will
    make all objects drawn on the layer to appear to be more red.
    */
    action SetColorFilter(Color color)
        painter:SetColor(color)
    end

    /*
    SetColorFilter can be called using four number parameters instead of a
    color object. The four parameters are the red, green, blue, and opacity
    of the filter, respectively. All four of the parameters should be between 0
    and 1, representing between 0% and 100% of that color component. For example,
    a value of 0 for red means that the tinting color will have no red, while a
    value of 1 will have all red components. An opacity of 0 is totally
    transparent, while an opacity of 1 will be totally visible. 
    */
    action SetColorFilter(number red, number green, number blue, number alpha)
        painter:SetColor(red, green, blue, alpha)
    end

    /*
    AddCollisionListener will add a collision listener to this layer. The
    collision listener will be notified of collisions occuring on this layer, 
    and is responsible for managing the collision events.
    */
    action AddCollisionListener(CollisionListener2D listener)
        collisionManager:AddCollisionListener(listener)
    end

    /*
    RemoveCollisionListener removes a collision listener to this layer. The
    collision listener will no longer be notified of collision events occurring
    on this layer. If the given listener is not a part of this layer, then this
    action will have no effect.
    */
    action RemoveCollisionListener(CollisionListener2D listener)
        collisionManager:RemoveCollisionListener(listener)
    end
    /*
    This action gets the list of items on this layer that are colliding and
    returns it as an array.
    */
    action GetCollisionList returns CollisionEvent2D
        return collisionManager:GetCollisionList()
    end

    /*
    This action gets the collision manager for this object which is responsible
    for managing the collisions between all colliding items on this layer.
    */
    action GetCollisionManager returns CollisionManager2D
        return collisionManager
    end

    /*
    This action triggers collision detection for this layer during a frame in
    the Game engine. This action will automatically be called by the Game class
    as necessary. Most users should never need to use this action directly.
    */
    action TestForCollisions
        if newItemAdded
            collisionManager:FindNewCollisions()
            newItemAdded = false
        end

        collisionManager:Collide()

        integer i = 0
        repeat while i < items:GetSize()
            Item2D item = items:Get(i)
            item:SynchronizeNodes()

            i = i + 1
        end

        collisionManager:FindNewCollisions()
    end

    /*
    This action indicates that the layer has received a new item that it must
    manage during collision detection. This is automatically called by the Game
    engine as necessary, and most users should never need to use this action
    directly.
    */
    action SetNewItemAdded(boolean flag)
        newItemAdded = flag
    end
end
