package Libraries.Game.Graphics

use Libraries.System.File

class Skybox

    // OpenGL constants for the sides of the cube map.
    // Note that positive Z in OpenGL is negative Z in Quorum, and vice versa.
    constant integer GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069
    constant integer GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070
    constant integer GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071
    constant integer GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072
    constant integer GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073
    constant integer GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074

    Texture cubeMap = undefined

    /*
    Flags to indicate which sides are loaded. A Skybox can only be rendered if
    all of the sides of the Skybox are loaded. These are set to true inside the
    LoadSide action, and set to false by the Dispose action.
    */
    boolean rightLoaded = false
    boolean leftLoaded = false
    boolean upLoaded = false
    boolean downLoaded = false
    boolean frontLoaded = false
    boolean backLoaded = false

    action Load(text right, text left, text up, text down, text forward, text back)
        File positiveX
        File negativeX
        File positiveY
        File negativeY
        File positiveZ
        File negativeZ
        positiveX:SetPath(right)
        negativeX:SetPath(left)
        positiveY:SetPath(up)
        negativeY:SetPath(down)
        positiveZ:SetPath(forward)
        negativeZ:SetPath(back)
        Load(positiveX, negativeX, positiveY, negativeY, positiveZ, negativeZ)
    end

    action Load(File right, File left, File up, File down, File forward, File back)
        if cubeMap = undefined
            Texture texture
            cubeMap = texture
            InitializeCubeMap(texture)
        end

        LoadSide(right, cubeMap, GL_TEXTURE_CUBE_MAP_POSITIVE_X)
        LoadSide(left, cubeMap, GL_TEXTURE_CUBE_MAP_NEGATIVE_X)
        LoadSide(up, cubeMap, GL_TEXTURE_CUBE_MAP_POSITIVE_Y)
        LoadSide(down, cubeMap, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y)
        // Note that positive Z in OpenGL is negative Z in Quorum, and vice versa.
        LoadSide(forward, cubeMap, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z)
        LoadSide(back, cubeMap, GL_TEXTURE_CUBE_MAP_POSITIVE_Z)
    end

    action LoadRight(text fileName)
        File image
        image:SetPath(fileName)
        LoadRight(image)
    end

    action LoadRight(File image)
        if cubeMap = undefined
            Texture texture
            cubeMap = texture
            InitializeCubeMap(texture)
        end

        LoadSide(image, cubeMap, GL_TEXTURE_CUBE_MAP_POSITIVE_X)
    end

    action LoadLeft(text fileName)
        File image
        image:SetPath(fileName)
        LoadLeft(image)
    end

    action LoadLeft(File image)
        if cubeMap = undefined
            Texture texture
            cubeMap = texture
            InitializeCubeMap(texture)
        end

        LoadSide(image, cubeMap, GL_TEXTURE_CUBE_MAP_NEGATIVE_X)
    end

    action LoadTop(text fileName)
        File image
        image:SetPath(fileName)
        LoadTop(image)
    end

    action LoadTop(File image)
        if cubeMap = undefined
            Texture texture
            cubeMap = texture
            InitializeCubeMap(texture)
        end

        LoadSide(image, cubeMap, GL_TEXTURE_CUBE_MAP_POSITIVE_Y)
    end

    action LoadBottom(text fileName)
        File image
        image:SetPath(fileName)
        LoadBottom(image)
    end

    action LoadBottom(File image)
        if cubeMap = undefined
            Texture texture
            cubeMap = texture
            InitializeCubeMap(texture)
        end

        LoadSide(image, cubeMap, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y)
    end

    action LoadFront(text fileName)
        File image
        image:SetPath(fileName)
        LoadFront(image)
    end

    action LoadFront(File image)
        if cubeMap = undefined
            Texture texture
            cubeMap = texture
            InitializeCubeMap(texture)
        end

        // Note that positive Z in OpenGL is negative Z in Quorum, and vice versa.
        LoadSide(image, cubeMap, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z)
    end

    action LoadBack(text fileName)
        File image
        image:SetPath(fileName)
        LoadBack(image)
    end

    action LoadBack(File image)
        if cubeMap = undefined
            Texture texture
            cubeMap = texture
            InitializeCubeMap(texture)
        end

        // Note that positive Z in OpenGL is negative Z in Quorum, and vice versa.
        LoadSide(image, cubeMap, GL_TEXTURE_CUBE_MAP_POSITIVE_Z)
    end

    /*
    Initializes the given texture to be used as a cube map, instead of a single
    2D texture.
    */
    private system action InitializeCubeMap(Texture texture)

    /*
    Load pixels from a file into a pixel map, then apply it to the
    given side of the given cube map texture. The side should be one of the 
    GL_TEXTURE_CUBE_MAP constants at the top of this class.

    This is done as a system action due to asynchronous file loading on the web.
    */
    private system action LoadSide(File file, Texture texture, integer side)

    /*
    Whether this Skybox has been loaded or not yet. On most platforms, this is
    true immediately after calling the Load action. On the web, this is true at
    some point in time after Load is called, due to the nature of how image
    loading is handled during online execution.
    */
    action IsLoaded returns boolean
        return rightLoaded = true and leftLoaded = true and upLoaded = true and
            downLoaded = true and frontLoaded = true and backLoaded = true
    end

    /*
    This action releases all the memory used to store the Skybox's texture. Once
    this has been called, it won't be initialized anymore, so it will need to be
    loaded again to be used.
    */
    action Dispose
        cubeMap:Dispose()
        cubeMap = undefined
        rightLoaded = false
        leftLoaded = false
        upLoaded = false
        downLoaded = false
        frontLoaded = false
        backLoaded = false
    end

end