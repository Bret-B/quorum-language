package Libraries.Game.Graphics

use Libraries.System.File
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Game.Graphics.Glyph
use Libraries.Game.Graphics.Color
use Libraries.System.Properties
use Libraries.Containers.Blueprints.Iterator

class Font 
    
    private integer size = 14
    private number angle = 0
    private integer height = 0
    private Color color
    private boolean initialized = false
    private HashTable<text, Glyph> glyphTable

    on create
        color = color:Black()
    end
    
    action LoadFont(File fontFile)
        if initialized
            Dispose()
            EmptyGlyphTable()
        end

        LoadFontNative(fontFile:GetAbsolutePath())
        height = GetHeight()
        initialized = true
    end

    action LoadFont(text fontName)

        File fontFile
        text os = GetOS()

        if os:Contains("Windows")
            fontFile:SetWorkingDirectory("C:\Windows\Fonts")
        elseif os:Contains("Mac OS X")
            fontFile:SetWorkingDirectory("/Library/Fonts")
        else
            // Find fonts for a linux system.
        end

        text fontPath = FindFontExtension(fontName)
        if fontPath = ""
            alert("No font file named " + fontName + " could be found on the system!")
        else
            fontFile:SetPath(fontPath)
            LoadFont(fontFile)
        end
    end

    private system action LoadFontNative(text fontFile)

    action FindFontExtension(text fontName) returns text
        File fontFile
        text os = GetOS()

        if os:Contains("Windows")
            fontFile:SetWorkingDirectory("C:\Windows\Fonts")
        elseif os:Contains("Mac OS X")
            fontFile:SetWorkingDirectory("/Library/Fonts")
        else
            // Find fonts for a linux system.
        end

        boolean success = false
        fontFile:SetPath(fontName + ".ttf")
        
        if fontFile:Exists()
           return fontName + ".ttf"
        else
            fontFile:SetPath(fontName + ".ttc")
            if fontFile:Exists()
                return fontName + ".ttc"
            else
                fontFile:SetPath(fontName + ".otf")
                if fontFile:Exists()
                    return fontName + ".otf"
                else
                    fontFile:SetPath(fontName + ".dfont")
                    if fontFile:Exists()
                        return fontName + ".dfont"
                    else
                        return ""
                    end
                end
            end
        end
    end

    action FontIsAvailable(text fontName) returns boolean
        if FindFontExtension(fontName) = ""
            return false
        else
            return true
        end
    end

    action SetSize (integer newSize)
        size = newSize
        textChanged = true
        if initialized
            SetSizeNative(newSize)
            height = GetHeight()
            EmptyGlyphTable()
        end
    end

    private system action SetSizeNative(integer newSize)

    action GetSize returns integer
        return size
    end

    action Rotate(number rotation)
        SetAngle(angle + rotation)
    end

    action SetAngle(number newAngle)
        textChanged = true

        if newAngle <= -360
            newAngle = newAngle - 360 * cast(integer, newAngle/360)
        end
        if newAngle < 0
            newAngle = 360 + newAngle
        end
        if newAngle >= 360
            newAngle = newAngle - 360 * cast(integer, newAngle/360)
        end

        angle = newAngle

        if initialized
            SetAngleNative(angle)
            EmptyGlyphTable()
        end
    end

    private system action SetAngleNative(number angle)

    // Inclusion of color to come in the future.
    /*action SetColor(Color newColor)
        color = newColor
    end*/

    // Inclusion of color to come in the future.
    /*action GetColor returns Color
        return color
    end*/

    action GetAngle returns number
        return angle
    end

    // Used to clean up a loaded font in the FreeType library.
    action Dispose
        DisposeNative()
        initialized = false
    end

    private system action DisposeNative

    action GetGlyph(text character) returns Glyph
        text char = character:GetCharacter(0)
        if glyphTable:HasKey(char)
            return glyphTable:GetValue(char):CopyGlyph()
        else
            Glyph temp = GetGlyphNative(char)
            glyphTable:Add(char, temp)
            return temp
        end
    end

    private system action GetGlyphNative(text character) returns Glyph

    /*action LoadDrawables

        if initialized
            // The size and angle are set before drawing to ensure that FreeType is
            // using the proper parameters for each.
            SetSize(size)
            SetAngle(angle)

            // Dispose of the old sprites.
            Iterator<Drawable> iterator = drawables:GetIterator()
            Drawable deleter = undefined

            repeat while iterator:HasNext()
                deleter = iterator:Next()
                deleter:Dispose()
            end

            List<Drawable> tempList

            integer index = 0
            number x = cursorX
            number y = cursorY

            Drawable drawable = undefined
            Glyph glyph = undefined

            repeat targetText:GetSize() times
                glyph = GetGlyph(targetText:GetCharacter(index))
                drawable = glyph:drawable
                drawable:SetPosition(x + glyph:lengthToGlyph, y + glyph:heightFromBaseLine - drawable:GetHeight())
                
                tempList:AddToEnd(drawable)

                index = index + 1
                x = x + glyph:horizontalAdvance
                y = y + glyph:verticalAdvance
            end

            drawables = tempList
            textChanged = false
        end

    end

    action GetDrawable(integer index) returns Drawable
        return drawables:Get(index)
    end

    action GetDrawableListSize returns integer
        return drawables:GetSize()
    end*/

    action IsLoaded returns boolean
        return initialized
    end

    private system action GetHeight returns integer

    action GetLineHeight returns integer
        return height
    end

    action GetAvailableFonts returns Array<File>

        text os = GetOS()

        Array<File> fontFiles = undefined
        File fontDirectory

        output "OS = " + os

        if os:Contains("Windows")
            fontDirectory:SetWorkingDirectory("C:\Windows\Fonts")
            fontDirectory:SetPath("")
            fontFiles = fontDirectory:GetDirectoryListing()
        elseif os:Contains("Mac OS X")
            fontDirectory:SetWorkingDirectory("/Library/Fonts")
            fontDirectory:SetPath("")
            fontFiles = fontDirectory:GetDirectoryListing()
        else
            // Find fonts for a linux system.
        end

        return fontFiles
    end
    
    // Used to determine where to look for available fonts.
    private action GetOS returns text
        Properties properties
        text os = properties:GetOperatingSystemName()
        return os
    end

    private action EmptyGlyphTable
        Iterator<Glyph> glyphs = glyphTable:GetValueIterator()
        Glyph temp = undefined
        Drawable tempDrawable = undefined
        repeat while glyphs:HasNext()
            temp = glyphs:Next()
            tempDrawable = temp:drawable
            tempDrawable:Dispose()
        end
        glyphTable:Empty()
    end

end