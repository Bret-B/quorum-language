package Libraries.Game.Graphics.Fonts

use Libraries.Containers.HashTable
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Glyph
use Libraries.System.File
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Array
use Libraries.System.Properties
use Libraries.Containers.Iterator
use Libraries.Compute.Math

class QuorumStrategy is FontStrategy
    private integer size = 14
    private number angle = 0
    private boolean initialized = false
    private HashTable<text, Glyph> glyphTable
    // ^ use character map instead of makeshift glyph table?
    private KerningTable kerningTable

    private FontFileReader fileReader
    private TrueTypeFileInformation fileInformation
    private FontRasterizer fontRasterizer
    private Color color

    private integer fontHeight = 0
    private integer fontWidth = 0
    private integer fontEmSize = 0
    private integer fontMaximumX = 0
    private integer fontMaximumY = 0
    private integer fontMinimumX = 0
    private integer fontMinimumY = 0

    on create
        Color color
        color = color:Black()
        SetColor(color)
    end

    action LoadFont(File fontFile)
        if initialized
            Dispose()
            EmptyGlyphTable()
            //EmptyKerningTable()
        end

        // LoadFontNative(fontFile:GetAbsolutePath())
        fileReader:Load(fontFile)
        fileInformation = fileReader:GetFileInformation()
        kerningTable = fileReader:GetKerningTable()

        SetFontDimensions()
        initialized = true
    end

    /*
    This action will load a font by name from the system. On Windows, this will
    search for fonts in "C:\Windows\Fonts". On Mac, this will search for fonts
    in "/Library/Fonts".

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
            end

        end
    */
    action LoadFont(text fontName)

        File fontFile
        text os = GetOS()

        if os:Contains("Windows")
            fontFile:SetWorkingDirectory("C:\Windows\Fonts")
        elseif os:Contains("Mac OS X") or os:Contains("iOS Simulator")
            fontFile:SetWorkingDirectory("/Library/Fonts")
        elseif os:Contains("iOS Device")
            fontFile:SetWorkingDirectory("/System/Library/Fonts/Core")
        else
            fontFile:SetWorkingDirectory("/system/fonts")
        end

        text fontPath = FindFontExtension(fontName)
        if fontPath = ""
            alert("No font file named " + fontName + " could be found on the system!")
        else
            fontFile:SetPath(fontPath)
            LoadFont(fontFile)
        end
    end

    private action FindFontExtension(text fontName) returns text
        File fontFile
        text os = GetOS()

        if os:Contains("Windows")
            fontFile:SetWorkingDirectory("C:\Windows\Fonts")
        elseif os:Contains("Mac OS X") or os:Contains("iOS Simulator")
            fontFile:SetWorkingDirectory("/Library/Fonts")
        elseif os:Contains("iOS Device")
            fontFile:SetWorkingDirectory("/System/Library/Fonts/Core")
        else
            fontFile:SetWorkingDirectory("/system/fonts/")
        end

        boolean success = false
        fontFile:SetPath(fontName + ".ttf")
        
        if fontFile:Exists()
           return fontName + ".ttf"
        else
            fontFile:SetPath(fontName + ".ttc")
            if fontFile:Exists()
                return fontName + ".ttc"
            else
                fontFile:SetPath(fontName + ".otf")
                if fontFile:Exists()
                    return fontName + ".otf"
                else
                    fontFile:SetPath(fontName + ".dfont")
                    if fontFile:Exists()
                        return fontName + ".dfont"
                    else
                        return ""
                    end
                end
            end
        end
    end

    /*
    This action will look in the default system font folder and look for a font
    of the given name. If a font is found with the same name, the action will
    return true. Otherwise, it returns false.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Font font
                boolean hasFont = font:FontIsAvailable("Times New Roman")
            end

        end
    */
    action FontIsAvailable(text fontName) returns boolean
        if FindFontExtension(fontName) = ""
            return false
        else
            return true
        end
    end

    /*
        This action sets the general dimensions of the font when the font file
        is loaded. All glyphs have these dimensions in common and include 
        em size, maximum and minimum x and y values, height, and width. 
        The action also updates the em size, MaxXSize, and MaxYSize in the class's
        font rasterizer variable.
    */
    private action SetFontDimensions
            fontEmSize = fileInformation:GetUnitsPerEm()
            fontRasterizer:SetEmSize(fontEmSize)
            
            fontMinimumX = Round(CalculateCoordinate(fileInformation:GetXMinimum():GetFontUnit(), size, fontEmSize, 0))
            fontMinimumY = Round(CalculateCoordinate(fileInformation:GetYMinimum():GetFontUnit(), size, fontEmSize, 0))
            fontMaximumX = Round(CalculateCoordinate(fileInformation:GetXMaximum():GetFontUnit(), size, fontEmSize, 0))
            fontMaximumY = Round(CalculateCoordinate(fileInformation:GetYMaximum():GetFontUnit(), size, fontEmSize, 0))

            fontHeight = fontMaximumY - fontMinimumY
            fontWidth = fontMaximumX - fontMinimumX
            
            fontRasterizer:SetMaxXSize(fontWidth)
            fontRasterizer:SetMaxYSize(fontHeight)
    end

    /*
    This action will set the size of the font. The default font size is 14.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:SetSize(16)
            end

        end
    */
    action SetSize (integer newSize)
        size = newSize
        textChanged = true
        if initialized
            fontRasterizer:SetSize(newSize)
            height = GetHeight()//WTF
            EmptyGlyphTable()
        end
    end


    /*
    This action will return the current size of the font. The default font size
    is 14.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Font font
                output "The default font size is " + font:GetSize()
            end

        end
    */
    action GetSize returns integer
        return size
    end

    /*
    This action will rotate the characters produced by this font by the given
    number of degrees.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:Rotate(45)
            end

        end
    */
    action Rotate(number rotation)
        SetAngle(angle + rotation)
    end

    /*
    This action will set the angle in degrees of the characters produced by this
    font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:SetAngle(90)
            end

        end
    */
    action SetAngle(number newAngle)
          // alert("SetAngle Not implemented")
//        textChanged = true
//
//        if newAngle <= -360
//            newAngle = newAngle - 360 * cast(integer, newAngle/360)
//        end
//        if newAngle < 0
//            newAngle = 360 + newAngle
//        end
//        if newAngle >= 360
//            newAngle = newAngle - 360 * cast(integer, newAngle/360)
//        end
//
//        angle = newAngle
//
//        if initialized
//            SetAngleNative(angle * -1)
//            EmptyGlyphTable()
//        end
    end


    /*
    This action will set the color of the characters produced by this font.

    Attribute: Parameter newColor The color to use for this font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Font font
                Color color
                font:SetColor(color:Orange())
            end

        end
    */
    action SetColor(Color newColor)

        me:color = newColor
        if initialized
            EmptyGlyphTable()
        end
    end



    /*
    This action will return the color of the characters produced by this font.

    Attribute: Returns The color being used by this font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Font font
                Color color = font:GetColor()
            end

        end
    */  
    action GetColor() returns Color
        return me:color
    end

    /*
    This action will return the current angle of the font. The default angle is
    0 degrees.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Font font
                output "The font has an angle of " + font:GetAngle() + " degrees."
            end

        end
    */
    action GetAngle returns number
        return angle
    end

    /*
    This action will release the resources used by a loaded font. The Font 
    object will no longer be usable until another font is loaded.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                font:Dispose()
            end

        end
    */
    private action Dispose
//        DisposeNative()
        initialized = false
    end


    /*
    This action will return a Glyph object for this font's representation of the
    given character. 

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Graphics.Glyph
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                Glyph a = font:GetGlyph("a")
            end

        end
    */
    action GetGlyph(text targetCharacter) returns Glyph
        text character = targetCharacter:GetCharacter(0)
        if glyphTable:HasKey(character)
            //output "glyphTable has key " + character 
            return glyphTable:GetValue(character):CopyGlyph()
        else
            BezierCurveGlyphPoints glyphOutline = fileReader:GetCharacterGlyphPoints(character)
            // ^ change to read from fileInformation instead of fileReader 

            integer glyphMinimumX = Round(CalculateCoordinate(glyphOutline:GetBoundingBox():GetXMinimum(), size, fontEmSize, 0))
            integer glyphMaximumX = Round(CalculateCoordinate(glyphOutline:GetBoundingBox():GetXMaximum(), size, fontEmSize, 0))
            integer glyphMinimumY = Round(CalculateCoordinate(glyphOutline:GetBoundingBox():GetYMinimum(), size, fontEmSize, 0))
            integer glyphMaximumY = Round(CalculateCoordinate(glyphOutline:GetBoundingBox():GetYMaximum(), size, fontEmSize, 0))

            Math math
            integer horizontalOffset = 0                                        // TODO - based on kerning?
            
            /*
            To-do: This is a bandaid fix at best, but it currently works for all
            font sizes tested between 8 and 200. There is a problem with this
            approach and that is that it does not consistently position the
            glyphs on the label. For example, at 8 point font they will be
            close to the top of the pixel grid, but at 80 point font they will
            be close to the bottom of the pixel grid. This should only really be
            an issue when mixing font sizes on the same line or on lines that
            are close together. Ideally we would like to position every character
            so that they have the same baseline.
            */
            integer verticalOffset = math:AbsoluteValue(fontMinimumY) + size/4  
            
            integer glyphWidth = glyphMaximumX //- glyphMinimumX
            integer verticalAdvance = 0
            integer extraHorizontalAdvance = size/20                             // TODO - based on kerning?
            //extraHorizontalAdvance = fileReader:GetKerningValue(
            // ^ change to read from fileInformation instead of fileReader

            FontDrawable glyphDrawable = fontRasterizer:DrawGlyph(glyphOutline, horizontalOffset, verticalOffset, color)
            integer glyphActualWidth = glyphDrawable:GetXMaximum() - glyphDrawable:GetXMinimum()      
            integer horizontalAdvance = cast(integer, horizontalOffset+glyphWidth+extraHorizontalAdvance)

            if character =  " "
                integer extraSpaceHorizontalAdvance = size/4                    // TODO - space character based on kerning?
                horizontalAdvance = horizontalAdvance + extraSpaceHorizontalAdvance
            end

            // scale bounding box to pixel size
            // compute height and advance from scaled bounding box (use sensible default)
            integer heightFromBaseLine = verticalAdvance - verticalOffset     // this moves the pixelmap up/down based on the offset. Need to make this consistent.
            //integer halfSize = cast(integer, size * 0.25)
            //integer heightFromBaseLine = size + halfSize // need to move it up a bit from just size

            Glyph glyph
            glyph:drawable = glyphDrawable:GetDrawable()
            glyph:horizontalAdvance = horizontalAdvance
            glyph:verticalAdvance = verticalAdvance
            glyph:heightFromBaseLine = heightFromBaseLine
            glyph:lengthToGlyph = horizontalOffset

            glyphTable:Add(character, glyph)
            return glyph
        end
        return undefined
    end

    /*
        called by:
        LoadDrawables in MockLabel
    */
    action GetKerning(text currentCharacter, text nextCharacter) returns integer
        integer readKerning = fileReader:GetKerningValue(currentCharacter, nextCharacter)

        // 2048 units/em https://en.wikipedia.org/wiki/Kerning#Kerning_values
        integer kerning = size * readKerning / fontEmSize
        return kerning
    end 

    /*
        This action approximates a decimal number by dropping all decimal values
        without rounding.
    */
    private action IntegerPart(number x) returns integer
        return cast(integer, x)
    end

    /*
        This action returns a decimal number rounded to the nearest integer.
    */
    private action Round(number x) returns integer
        return IntegerPart(x + 0.5)
    end

    private action CalculateCoordinate(integer gridCoordinate, integer pixelSize, integer emSize, integer screensize) returns number
        if screensize = 0
           return cast(number, gridCoordinate) * pixelSize / emSize
        end
        return screensize - cast(number, gridCoordinate) * pixelSize / emSize
    end

    /*action LoadDrawables

        if initialized
            // The size and angle are set before drawing to ensure that FreeType is
            // using the proper parameters for each.
            SetSize(size)
            SetAngle(angle)

            // Dispose of the old sprites.
            Iterator<Drawable> iterator = drawables:GetIterator()
            Drawable deleter = undefined

            repeat while iterator:HasNext()
                deleter = iterator:Next()
                deleter:Dispose()
            end

            List<Drawable> tempList

            integer index = 0
            number x = cursorX
            number y = cursorY

            Drawable drawable = undefined
            Glyph glyph = undefined

            repeat targetText:GetSize() times
                glyph = GetGlyph(targetText:GetCharacter(index))
                drawable = glyph:drawable
                drawable:SetPosition(x + glyph:lengthToGlyph, y + glyph:heightFromBaseLine - drawable:GetHeight())
                
                tempList:AddToEnd(drawable)

                index = index + 1
                x = x + glyph:horizontalAdvance
                y = y + glyph:verticalAdvance
            end

            drawables = tempList
            textChanged = false
        end

    end

    action GetDrawable(integer index) returns Drawable
        return drawables:Get(index)
    end

    action GetDrawableListSize returns integer
        return drawables:GetSize()
    end*/

    /*
    This action will check if the font has been loaded yet. If the font has
    been loaded, this will return true. Otherwise, it will return false.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                boolean loaded = font:IsLoaded()
            end

        end
    */
    action IsLoaded returns boolean
        return initialized
    end

    /*
    This action will return the integer height of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Font font
                integer font:GetHeight()
            end

        end
    */
    private action GetHeight returns integer
        return fontHeight
    end

    /*
    This action will return the height of each line of text produced by this font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                integer height = font:GetLineHeight()
            end

        end
    */
    action GetLineHeight returns integer
        return fontHeight
    end

    /*
    This action will return an array of all files found in the system's default
    font folder.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.System.File
        use Libraries.Containers.Array
        use Libraries.Game.Game

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                Font font
                Array<File> fontFiles = font:GetAvailableFonts()
                integer index = 0
                output "The following fonts are available on the system: "
                repeat fontFiles:GetSize() times
                    File temp = fontFiles:Get(index)
                    output temp:GetPath()
                    index = index + 1
                end
            end

        end
    */
    action GetAvailableFonts returns Array<File>

        text os = GetOS()

        Array<File> fontFiles = undefined
        File fontDirectory

        if os:Contains("Windows")
            fontDirectory:SetWorkingDirectory("C:\Windows\Fonts")
            fontDirectory:SetPath("")
            fontFiles = fontDirectory:GetDirectoryListing()
        elseif os:Contains("Mac OS X") or os:Contains("iOS Simulator")
            fontDirectory:SetWorkingDirectory("/Library/Fonts")
            fontDirectory:SetPath("")
            fontFiles = fontDirectory:GetDirectoryListing()
        elseif os:Contains("iOS Device")
            fontDirectory:SetWorkingDirectory("/System/Library/Fonts/Core")
            fontDirectory:SetPath("")
            fontFiles = fontDirectory:GetDirectoryListing()
        else    // Linux and Android
            fontDirectory:SetWorkingDirectory("/system/fonts/")
            fontDirectory:SetPath("")
            fontFiles = fontDirectory:GetDirectoryListing()
        end

        return fontFiles
    end
    
    // Used to determine where to look for available fonts.
    private action GetOS returns text
        Properties properties
        text os = properties:GetOperatingSystemName()
        return os
    end

    private action EmptyGlyphTable
        Iterator<Glyph> glyphs = glyphTable:GetValueIterator()
        Glyph temp = undefined
        Drawable tempDrawable = undefined
        repeat while glyphs:HasNext()
            temp = glyphs:Next()
            tempDrawable = temp:drawable

            if tempDrawable not= undefined
                tempDrawable:Dispose()
            end
        end
        glyphTable:Empty()
    end


end