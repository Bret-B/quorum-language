package Libraries.Game.Graphics.Fonts

use Libraries.Game.Graphics.Fonts.all

/*
The FontBoundingBox class is used to maintain information about the size of the
bounding box for a given font file. The bounding box is the maximum width and
height of a font.

Attribute: Example

    use Libraries.Game.Graphics.Fonts.all
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            FontBoundingBox box
            box:SetBoundingBox(0, 0, 100, 100)
            output box:ToText()
        end
    end
*/
class FontBoundingBox 
    /*Leftmost x-coordinate position of the box.*/
    integer xMinimum = 0
    /*Rightmost x-coordinate position of the box.*/
    integer xMaximum = 0
    /*Lowest y-coordinate position of the box.*/
    integer yMinimum = 0
    /*Highest y-coordinate position of the box.*/
    integer yMaximum = 0

    /*
    This action sets the dimensions of the bounding box.

    Attribute: Parameter xMinimum The leftmost x-coordinate position of the box.

    Attribute: Parameter yMinimum The lowest y-coordinate position of the box.

    Attribute: Parameter xMaximum The rightmost x-coordinate position ofthe box.

    Attribute: Parameter yMaximum The highest y-coordinate position of the box.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                FontBoundingBox box
                box:SetBoundingBox(0, 0, 100, 100)
                output box:ToText()
            end
        end
    */
    action SetBoundingBox(integer xMinimum, integer yMinimum, integer xMaximum, integer yMaximum)
        SetXMinimum(xMinimum)
        SetYMinimum(yMinimum)
        SetXMaximum(xMaximum)
        SetYMaximum(yMaximum)
    end

    action SetXMinimum (integer xMinimum)
        me:xMinimum = xMinimum
    end

    action SetXMaximum (integer xMaximum)
        me:xMaximum = xMaximum
    end

    action SetYMinimum (integer yMinimum)
        me:yMinimum = yMinimum
    end
    
    action SetYMaximum (integer yMaximum)
        me:yMaximum = yMaximum
    end

    action GetXMinimum returns integer
        return me:xMinimum
    end

    action GetXMaximum returns integer
        return me:xMaximum
    end

    action GetYMinimum returns integer
        return me:yMinimum
    end 

    action GetYMaximum returns integer
        return me:yMaximum
    end

    action ToText() returns text
        text t = "(xMin: " + xMinimum + ", yMin: " + yMinimum + ") (xMax: " + xMaximum + ", yMax: " + yMaximum + ")"
        return t
    end

    action CalculateCoordinate(integer gridCoordinate, integer pixelSize, integer emSize, integer screensize) returns number
        if screensize = 0
           return cast(number, gridCoordinate) * pixelSize / emSize
        end
        return screensize - cast(number, gridCoordinate) * pixelSize / emSize
    end

    action ToText(integer pixelSize, integer emSize) returns text
        number xMinimum = CalculateCoordinate(me:xMinimum, pixelSize, emSize, 0)
        number yMinimum = CalculateCoordinate(me:yMinimum, pixelSize, emSize, 0)
        number xMaximum = CalculateCoordinate(me:xMaximum, pixelSize, emSize, 0)
        number yMaximum = CalculateCoordinate(me:yMinimum, pixelSize, emSize, 0)
        return "(xMin: " + xMinimum + ", yMin: " + yMinimum + ") (xMax: " + xMaximum + ", yMax: " + yMaximum + ")"
    end
end