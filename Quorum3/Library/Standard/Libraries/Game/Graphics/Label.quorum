package Libraries.Game.Graphics

use Libraries.Containers.Array
use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator
use Libraries.System.File
use Libraries.Interface.Item
use Libraries.Game.Graphics.Painter

class Label is Item

    on create
        Font font
        if font:FontIsAvailable("Arial")
            font:LoadFont("Arial")
            SetFont(font)
        elseif font:FontIsAvailable("Arial Unicode")
            font:LoadFont("Arial Unicode")
            SetFont(font)
        elseif font:FontIsAvailable("Georgia")
            font:LoadFont("Georgia")
            SetFont(font)
        elseif font:FontIsAvailable("Times New Roman")
            font:LoadFont("Times New Roman")
            SetFont(font)
        else
            Array<File> availableFontFiles = font:GetAvailableFonts()
            if availableFontFiles:GetSize() > 0
                font:LoadFont(availableFontFiles:Get(0))
                SetFont(font)
            end
        end
    end

    public constant integer LEFT_ALIGN = 0
    public constant integer RIGHT_ALIGN = 1
    public constant integer CENTER_ALIGN = 2

    public constant integer TOP_ALIGN = 0
    public constant integer BOTTOM_ALIGN = 1

    integer horizontalAlignment = CENTER_ALIGN
    integer verticalAlignment = CENTER_ALIGN

    integer horizontalMargins = 0
    integer verticalMargins = 0

    Font font
    private text targetText = "TEXT"
    private boolean textChanged = true

    private number textWidth = 0
    private number textHeight = 0

    action SetHorizontalMargins(integer margins)
        horizontalMargins = margins
    end

    action GetHorizontalMargins returns integer
        return horizontalMargins
    end

    action SetVerticalMargins(integer margins)
        verticalMargins = margins
    end

    action GetVerticalMargins returns integer
        return verticalMargins
    end

    action SetFont(Font newFont)
        font = newFont
    end

    action SetText(text newText)
        targetText = newText
        textChanged = true
    end

    action GetText returns text
        return targetText
    end

    action GetFont returns Font
        return font
    end

    action SetHorizontalAlignment(integer align)
        horizontalAlignment = align
    end

    action SetVerticalAlignment(integer align)
        verticalAlignment = align
    end

    action SetSize(integer size)
        textChanged = true
        font:SetSize(size)
    end

    action GetSize returns integer
        return font:GetSize()
    end

    action Rotate(number angle)
        textChanged = true
        font:Rotate(angle)
        parent:Item:Rotate(angle)
    end

    action SetAngle(number angle)
        textChanged = true
        font:SetAngle(angle)
    end

    action GetAngle returns number
        return font:GetAngle()
    end

    action LoadDrawables

        if font:IsLoaded()
            // The size and angle are set before drawing to ensure that FreeType is
            // using the proper parameters for each.
            font:SetSize(font:GetSize())
            font:SetAngle(font:GetAngle())

            // Dispose of the old sprites.
            DisposeChildren()
            /*Iterator<Drawable> iterator = parent:DrawableGroup:drawables:GetIterator()
            Drawable deleter = undefined

            repeat while iterator:HasNext()
                deleter = iterator:Next()
                deleter:Dispose()
                Remove(deleter)
            end*/

            //List<Drawable> tempList = parent:DrawableGroup:drawables

            integer index = 0
            number x = 0//GetX()
            number y = 0//GetY()

            Drawable drawable = undefined
            Glyph glyph = undefined

            // BEGINNING OF NEW CODE

            number availableWidth = GetWidth() - horizontalMargins
            number availableHeight = GetHeight() - verticalMargins

            Array<text> lines = targetText:Split(targetText:GetLineFeed())
            Array<text> words = undefined
            Array<Glyph> glyphs

            glyphs:SetSize(targetText:GetSize())

            number originX = x + horizontalMargins
            number originY = y - verticalMargins

            x = originX
            y = originY

            integer lineIndex = 0
            integer wordsIndex = 0
            integer glyphIndex = 0
            text currentWord = ""
            integer currentWordLength = 0
            integer currentLineLength = 0

            number maxLineWidth = 0
            number startingOriginY = originY

            repeat lines:GetSize() times
                words = lines:Get(lineIndex):Split(" ")
                wordsIndex = 0
                currentLineLength = 0

                repeat words:GetSize() times
                    currentWord = words:Get(wordsIndex)
                    currentWordLength = 0
                    glyphIndex = 0

                    if wordsIndex + 1 not= words:GetSize()
                        currentWord = currentWord + " "
                    end

                    repeat currentWord:GetSize() times
                        glyph = font:GetGlyph(currentWord:GetCharacter(glyphIndex))
                        glyphs:Set(glyphIndex, glyph)
                        currentWordLength = currentWordLength + glyph:horizontalAdvance
                        glyphIndex = glyphIndex + 1
                    end

                    if availableWidth > 0 and currentLineLength + currentWordLength > availableWidth
                        if currentLineLength > maxLineWidth
                            maxLineWidth = currentLineLength
                        end
                        currentLineLength = 0
                        x = originX
                        y = originY - font:GetLineHeight()
                        originY = y
                    end

                    glyphIndex = 0
                    repeat currentWord:GetSize() times
                        glyph = glyphs:Get(glyphIndex)
                        drawable = glyph:drawable
                        drawable:SetPosition(x + glyph:lengthToGlyph, y + glyph:heightFromBaseLine - drawable:GetHeight())

                        Add(drawable)

                        glyphIndex = glyphIndex + 1
                        x = x + glyph:horizontalAdvance
                        y = y + glyph:verticalAdvance
                        if availableWidth > 0 and x - originX > availableWidth
                            currentLineLength = 0
                            currentWordLength = 0
                            x = originX
                            y = originY - font:GetLineHeight()
                            originY = y
                        end
                    end

                    wordsIndex = wordsIndex + 1
                    currentLineLength = currentLineLength + currentWordLength

                end

                if currentLineLength > maxLineWidth
                    maxLineWidth = currentLineLength
                end

                // After iterating through all words on this line, we go to the
                // next line.
                lineIndex = lineIndex + 1
                x = originX
                y = originY - font:GetLineHeight()
                originY = y
            end

            textWidth = maxLineWidth
            textHeight = startingOriginY - originY
            

            /* OLD DRAWING CODE
            repeat targetText:GetSize() times
                glyph = font:GetGlyph(targetText:GetCharacter(index))
                drawable = glyph:drawable
                drawable:SetPosition(x + glyph:lengthToGlyph, y + glyph:heightFromBaseLine - drawable:GetHeight())
                
                tempList:AddToEnd(drawable)

                index = index + 1
                x = x + glyph:horizontalAdvance
                y = y + glyph:verticalAdvance
            end*/

            //parent:DrawableGroup:drawables = tempList
            textChanged = false
        end

    end

    action Draw(Painter painter)
        if textChanged
            LoadDrawables()
        end
        parent:Item:Draw()
    end

    /*
    action GetDrawables returns List<Drawable>
        if textChanged
            LoadDrawables()
        end
        return parent:DrawableGroup:GetDrawables()
    end*/

    action GetTextWidth returns number
        if textChanged
            LoadDrawables()
        end
        return textWidth
    end

    action GetTextHeight returns number
        if textChanged
            LoadDrawables()
        end
        return textHeight
    end

    action GetLineHeight returns integer
        return font:GetLineHeight()
    end
end