package Libraries.Game.Graphics

use Libraries.Compute.Frustum
use Libraries.Compute.Matrix4
use Libraries.Compute.Quaternion
use Libraries.Compute.Vector3
use Libraries.Compute.Ray
use Libraries.Compute.Math

class Camera 
    
    /*
    The position of the camera.
    */
    Vector3 position

    /*
    The unit length direction vector of the camera.
    */
    Vector3 direction

    /*
    The unit length up vector of the camera.
    */
    Vector3 up


    /*
    The projection matrix of the camera.
    */
    Matrix4 projection

    /*
    The view matrix of the camera.
    */
    Matrix4 view

    /*
    The combined projection and view matrix of the camera.
    */
    Matrix4 combined

    /*
    The inverse of the combined projection and view matrix.
    */
    Matrix4 inverseProjectionView


    /*
    The distance to the near clipping plane. Must be positive.
    */
    number near = 1

    /*
    The distance to the far clipping plane. Must be positive.
    */
    number far = 100


    /*
    The width of the camera viewport.
    */
    number viewportWidth = 0

    /*
    The height of the camera viewport.
    */
    number viewportHeight = 0


    /*
    The frustum containing the area which can be viewed by the camera.
    */
    Frustum frustum


    private Vector3 calcVector
    private Ray ray

    on create
        direction:Set(0, 0, -1)
        up:Set(0, 1, 0)
    end

    blueprint action Update

    /*
    This action will angle the camera to look at the given point in 3D space.
    */
    action LookAt(number x, number y, number z)
        calcVector:Set(x, y, z):Subtract(position):Normalize()
        if not calcVector:IsZero()
            Math math

            // up and direction must ALWAYS be orthonormal vectors
            number dot = calcVector:DotProduct(up)
            if math:AbsoluteValue(dot - 1) < 0.000000001
                // Collinear
                up:Set(direction):Scale(-1)
            elseif math:AbsoluteValue(dot + 1) < 0.000000001
                // Collinear opposite
                up:Set(direction)
            end
            direction:Set(calcVector)
            NormalizeUp()
        end
    end

    // Is this ever needed as a public action?
    private action NormalizeUp
        calcVector:Set(direction):CrossProduct(up):Normalize()
        up:Set(calcVector):CrossProduct(direction):Normalize()
    end

    /*
    This action will angle the camera to look at the given point in 3D space.
    */
    action LookAt(Vector3 target)
        LookAt(target:GetX(), target:GetY(), target:GetZ())
    end

    /*
    This action rotates the camera the given number of degrees around the axis
    given as a 3D vector.
    */
    action Rotate(number degrees, number axisX, number axisY, number axisZ)
        direction:Rotate(degrees, axisX, axisY, axisZ)
        up:Rotate(degrees, axisX, axisY, axisZ)
    end

    /*
    This action rotates the camera the given number of degrees around the axis
    given as a 3D vector.
    */
    action Rotate(Vector3 axis, number degrees)
        direction:Rotate(axis, degrees)
        up:Rotate(axis, degrees)
    end

    /*
    This action rotates the camera the given number of degrees around the axis
    given as a 3D vector.
    */
    action Rotate(Matrix4 transform)
        direction:Rotate(transform)
        up:Rotate(transform)
    end

    /*
    This action rotates the camera the given number of degrees around the axis
    given as a 3D vector.
    */
    action Rotate(Quaternion quaternion)
        quaternion:Transform(direction)
        quaternion:Transform(up)
    end

    /*
    This action will rotate the camera around the given point, with the camera's
    rotation being about the given axis. The camera is rotated by the given
    number of degrees.
    */  
    action RotateAround(Vector3 point, Vector3 axis, number degrees)
        calcVector:Set(point)
        calcVector:Subtract(position)
        Translate(calcVector)
        Rotate(axis, degrees)
        calcVector:Rotate(axis, degrees)
        Translate(-calcVector:GetX(), -calcVector:GetY(), -calcVector:GetZ())
    end

    /*
    This action will transform the position, direction, and up vector of this
    camera by the given matrix.
    */
    action Transform(Matrix4 transform)
        position:Multiply(transform)
        Rotate(transform)
    end

    /*
    This action moves the camera by the given amount on each axis.
    */
    action Translate(number x, number y, number z)
        position:Add(x, y, z)
    end
    
    /*
    This action moves the camera by the given vector.
    */
    action Translate(Vector3 vector)
        position:Add(vector)
    end

    /*
    This action will set the position of the Camera. It takes a Vector3 object
    containing the new x, y, and z coordinates to use for the camera's position.
    */
    action SetPosition(Vector3 newPosition)
        position:Set(newPosition:GetX(), newPosition:GetY(), newPosition:GetZ())
    end

    /*
    This action will set the position of the Camera. It takes three numbers
    representing the new x, y, and z coordinates to use for the camera's position.
    */
    action SetPosition(number x, number y, number z)
        position:Set(x, y, z)
    end

    /*
    This action will return the current position of the Camera. The position is
    returned as a Vector3 object containing the current x, y, and z coordinates.
    */
    action GetPosition returns Vector3
        return position
    end

    /*
    This action will set the direction of the Camera. It takes a Vector3 object
    which contains the new directional vector to use for the camera.
    */
    action SetDirection(Vector3 newDirection)
        direction:Set(newDirection:GetX(), newDirection:GetY(), newDirection:GetZ())
    end

    /*
    This action will set the direction of the Camera. It takes three number
    values which represent the new directional vector to use for the camera.
    */
    action SetDirection(number x, number y, number z)
        direction:Set(x, y, z)
    end

    /*
    This action will return the current direction of the Camera. The direction
    is returned as a Vector3 object.
    */
    action GetDirection returns Vector3
        return direction
    end

    /*
    This action will set the direction that the camera considers to be up. The
    top of the camera will face the direction of the given Vector3 object.
    */
    action SetUp(Vector3 newUp)
        up:Set(newUp:GetX(), newUp:GetY(), newUp:GetZ())
    end

    /*
    This action will set the direction that the camera considers to be up. The
    top of the camera will face the direction indicated by the three given
    number values.
    */
    action SetUp(number x, number y, number z)
        up:Set(x, y, z)
    end
    
    /*
    This action will return the direction that the camera considers to be up.
    The returned Vector3 indicates the direction that the top of the camera
    faces out towards.
    */
    action GetUp returns Vector3
        return up
    end

    /*
    This action will set the distance to the near clipping plane of the camera. 
    Objects that are closer than the distance to the near clipping plane will 
    not be seen by the camera.
    */
    action SetNear(number value)
        near = value
    end

    /*
    This action will return the distance to the near clipping plane of the
    camera. Objects that are closer than the distance to the near clipping plane
    will not be seen by the camera.
    */
    action GetNear returns number
        return near
    end

    /*
    This action will set the distance to the far clipping plane of the camera. 
    Objects that are farther than the distance to the far clipping plane will 
    not be seen by the camera.
    */
    action SetFar(number value)
        far = value
    end

    /*
    This action will return the distance to the far clipping plane of the
    camera. Objects that are farther than the distance to the far clipping plane
    will not be seen by the camera.
    */
    action GetFar returns number
        return far
    end

    /*
    This action will set the effective width of the camera lens.
    */
    action SetWidth(number width)
        viewportWidth = width
    end

    /*
    This action will return the effective width of the camera lens.
    */
    action GetWidth returns number
        return viewportWidth
    end

    /*
    This action will set the effective height of the camera lens.
    */
    action SetHeight(number height)
        viewportHeight = height
    end

    /*
    This action will return the effective height of the camera lens.
    */
    action GetHeight returns number
        return viewportHeight
    end

    /*
    This action returns the calculated projection matrix of the camera.
    */
    action GetProjectionMatrix returns Matrix4
        return projection
    end

    /*
    This action returns the calculated view matrix of the camera.
    */
    action GetViewMatrix returns Matrix4
        return view
    end

    /*
    This action returns a matrix containing the combined values of the camera's
    projection and view matrices.
    */
    action GetCombinedMatrix returns Matrix4
        return combined
    end

    /*
    This action returns a matrix containing the inversed combined projection and
    view matrices.
    */
    action GetInverseCombinedMatrix returns Matrix4
        return inverseProjectionView
    end

    /*
    This action returns a frustum containing the area visible to the camera.
    */
    action GetFrustum returns Frustum
        return frustum
    end

    /*

	/** Function to translate a point given in screen coordinates to world space. It's the same as GLU gluUnProject, but does not
	 * rely on OpenGL. The x- and y-coordinate of vec are assumed to be in screen coordinates (origin is the top left corner, y
	 * pointing down, x pointing to the right) as reported by the touch methods in {@link Input}. A z-coordinate of 0 will return a
	 * point on the near plane, a z-coordinate of 1 will return a point on the far plane. This method allows you to specify the
	 * viewport position and dimensions in the coordinate system expected by {@link GL20#glViewport(int, int, int, int)}, with the
	 * origin in the bottom left corner of the screen.
	 * @param screenCoords the point in screen coordinates (origin top left)
	 * @param viewportX the coordinate of the bottom left corner of the viewport in glViewport coordinates.
	 * @param viewportY the coordinate of the bottom left corner of the viewport in glViewport coordinates.
	 * @param viewportWidth the width of the viewport in pixels
	 * @param viewportHeight the height of the viewport in pixels *-
	public Vector3 unproject (Vector3 screenCoords, float viewportX, float viewportY, float viewportWidth, float viewportHeight) {
		float x = screenCoords.x, y = screenCoords.y;
		x = x - viewportX;
		y = Gdx.graphics.getHeight() - y - 1;
		y = y - viewportY;
		screenCoords.x = (2 * x) / viewportWidth - 1;
		screenCoords.y = (2 * y) / viewportHeight - 1;
		screenCoords.z = 2 * screenCoords.z - 1;
		screenCoords.prj(invProjectionView);
		return screenCoords;
	}

	/** Function to translate a point given in screen coordinates to world space. It's the same as GLU gluUnProject but does not
	 * rely on OpenGL. The viewport is assumed to span the whole screen and is fetched from {@link Graphics#getWidth()} and
	 * {@link Graphics#getHeight()}. The x- and y-coordinate of vec are assumed to be in screen coordinates (origin is the top left
	 * corner, y pointing down, x pointing to the right) as reported by the touch methods in {@link Input}. A z-coordinate of 0
	 * will return a point on the near plane, a z-coordinate of 1 will return a point on the far plane.
	 * @param screenCoords the point in screen coordinates *-
	public Vector3 unproject (Vector3 screenCoords) {
		unproject(screenCoords, 0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
		return screenCoords;
	}

	/** Projects the {@link Vector3} given in world space to screen coordinates. It's the same as GLU gluProject with one small
	 * deviation: The viewport is assumed to span the whole screen. The screen coordinate system has its origin in the
	 * <b>bottom</b> left, with the y-axis pointing <b>upwards</b> and the x-axis pointing to the right. This makes it easily
	 * useable in conjunction with {@link Batch} and similar classes. *-
	public Vector3 project (Vector3 worldCoords) {
		project(worldCoords, 0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
		return worldCoords;
	}

	/** Projects the {@link Vector3} given in world space to screen coordinates. It's the same as GLU gluProject with one small
	 * deviation: The viewport is assumed to span the whole screen. The screen coordinate system has its origin in the
	 * <b>bottom</b> left, with the y-axis pointing <b>upwards</b> and the x-axis pointing to the right. This makes it easily
	 * useable in conjunction with {@link Batch} and similar classes. This method allows you to specify the viewport position and
	 * dimensions in the coordinate system expected by {@link GL20#glViewport(int, int, int, int)}, with the origin in the bottom
	 * left corner of the screen.
	 * @param viewportX the coordinate of the bottom left corner of the viewport in glViewport coordinates.
	 * @param viewportY the coordinate of the bottom left corner of the viewport in glViewport coordinates.
	 * @param viewportWidth the width of the viewport in pixels
	 * @param viewportHeight the height of the viewport in pixels *-
	public Vector3 project (Vector3 worldCoords, float viewportX, float viewportY, float viewportWidth, float viewportHeight) {
		worldCoords.prj(combined);
		worldCoords.x = viewportWidth * (worldCoords.x + 1) / 2 + viewportX;
		worldCoords.y = viewportHeight * (worldCoords.y + 1) / 2 + viewportY;
		worldCoords.z = (worldCoords.z + 1) / 2;
		return worldCoords;
	}

	/** Creates a picking {@link Ray} from the coordinates given in screen coordinates. It is assumed that the viewport spans the
	 * whole screen. The screen coordinates origin is assumed to be in the top left corner, its y-axis pointing down, the x-axis
	 * pointing to the right. The returned instance is not a new instance but an internal member only accessible via this function.
	 * @param viewportX the coordinate of the bottom left corner of the viewport in glViewport coordinates.
	 * @param viewportY the coordinate of the bottom left corner of the viewport in glViewport coordinates.
	 * @param viewportWidth the width of the viewport in pixels
	 * @param viewportHeight the height of the viewport in pixels
	 * @return the picking Ray. *-
	public Ray getPickRay (float screenX, float screenY, float viewportX, float viewportY, float viewportWidth,
		float viewportHeight) {
		unproject(ray.origin.set(screenX, screenY, 0), viewportX, viewportY, viewportWidth, viewportHeight);
		unproject(ray.direction.set(screenX, screenY, 1), viewportX, viewportY, viewportWidth, viewportHeight);
		ray.direction.sub(ray.origin).nor();
		return ray;
	}

	/** Creates a picking {@link Ray} from the coordinates given in screen coordinates. It is assumed that the viewport spans the
	 * whole screen. The screen coordinates origin is assumed to be in the top left corner, its y-axis pointing down, the x-axis
	 * pointing to the right. The returned instance is not a new instance but an internal member only accessible via this function.
	 * @return the picking Ray. *-
	public Ray getPickRay (float screenX, float screenY) {
		return getPickRay(screenX, screenY, 0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
	}
        */
end