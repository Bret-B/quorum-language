package Libraries.Game.Graphics.ModelData

/* Java imports:
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Mesh;
import com.badlogic.gdx.graphics.g3d.Model;
*/

use Libraries.Game.Graphics.Mesh

class MeshPart 
    public text id = ""

    // primitiveType defaults to GL_TRIANGLE_STRIP
    public integer primitiveType = 5

    public integer indexOffset = 0

    public integer verticesCount = 0

    public Mesh mesh

    /** Construct a new MeshPart, with null values. The MeshPart is unusable until you set all members. **-
	public MeshPart () {
	}

	/** Construct a new MeshPart and set all its values.
	 * @param id The id of the new part, may be null.
	 * @param mesh The mesh which holds all vertices and (optional) indices of this part.
	 * @param offset The offset within the mesh to this part.
	 * @param size The size (in total number of vertices) of the part.
	 * @param type The primitive type of the part (e.g. GL_TRIANGLES, GL_LINE_STRIP, etc.). *-
	public MeshPart (final String id, final Mesh mesh, final int offset, final int size, final int type) {
		this.id = id;
		this.mesh = mesh;
		this.indexOffset = offset;
		this.numVertices = size;
		this.primitiveType = type;
	}

	/** Construct a new MeshPart which is an exact copy of the provided MeshPart.
	 * @param copyFrom The MeshPart to copy. *-
	public MeshPart (final MeshPart copyFrom) {
		this(copyFrom.id, copyFrom.mesh, copyFrom.indexOffset, copyFrom.numVertices, copyFrom.primitiveType);
	}

	/** Compares this MeshPart to the specified MeshPart and returns true if they both reference the same {@link Mesh} and the
	 * {@link #indexOffset}, {@link #numVertices} and {@link #primitiveType} members are equal. The {@link #id} member is ignored.
	 * @param other The other MeshPart to compare this MeshPart to.
	 * @return True when this MeshPart equals the other MeshPart (ignoring the {@link #id} member), false otherwise. *-
	public boolean equals (final MeshPart other) {
		return other == this
			|| (other != null && other.mesh == mesh && other.primitiveType == primitiveType && other.indexOffset == indexOffset && other.numVertices == numVertices);
	}

	@Override
	public boolean equals (final Object arg0) {
		if (arg0 == null) return false;
		if (arg0 == this) return true;
		if (!(arg0 instanceof MeshPart)) return false;
		return equals((MeshPart)arg0);
	}*/
end