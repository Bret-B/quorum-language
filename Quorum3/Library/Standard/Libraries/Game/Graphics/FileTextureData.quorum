package Libraries.Game.Graphics

use Libraries.Game.Graphics.PixelMap
use Libraries.Language.Errors.Error
use Libraries.Compute.BitwiseOperations

use Libraries.System.File

/*  The FileTextureData class holds texture information for PixelMaps retrieved
    from most supported image file types.
*/

class FileTextureData is TextureData
    
    // Could implement as part of plugin if necessary.
    // static public boolean copyToPOT;

    File file
    integer width = 0
    integer height = 0
    Format format
    PixelMap pixelMap
    private boolean disposePixelMap = true
    boolean useMipMaps = false
    boolean isPrepared = false


    // Used in place of a constructor, this will have to be called before use.
    // This could be enforced with an "initialized" boolean if needed.
    action InitializeFileTextureData (File newFile, PixelMap preloadedPixelMap, Format newFormat, boolean newMipMaps)
        file = newFile
        pixelMap = preloadedPixelMap
        format = newFormat
        useMipMaps = newMipMaps

        if pixelMap not= undefined
            pixelMap = EnsurePowerOfTwo(pixelMap)
            width = pixelMap:GetWidth()
            height = pixelMap:GetHeight()

            if newFormat = undefined
                format = pixelMap:GetFormat()
            end

        end

    end

    private action EnsurePowerOfTwo(PixelMap candidate) returns PixelMap
    // To test the if statement, need a system call to check on two static items
    // which is through GameStateManager's GetGameGraphics() function and this
    // class's boolean copyToPOT. For now, the if statement is set to false.
        if TestForCopyToPowerOfTwo()

            integer pixelMapWidth = candidate:GetWidth()
            integer pixelMapHeight = candidate:GetHeight()
            integer powerOfTwoWidth = NextPowerOfTwo(pixelMapWidth)
            integer powerOfTwoHeight = NextPowerOfTwo(pixelMapHeight)
            if pixelMapWidth not= powerOfTwoWidth or pixelMapHeight not= powerOfTwoHeight
                PixelMap newPixelMap
                newPixelMap:CreatePixelMap(powerOfTwoWidth, powerOfTwoHeight, candidate:GetFormat())
                newPixelMap:DrawPixelMap(candidate, 0, 0, 0, 0, pixelMapWidth, pixelMapHeight)
                candidate:Dispose()
                return newPixelMap
            end
        end

        return candidate
    end

    system action CopyImagesToPowerOfTwo(boolean bool)

    // This action only exists for a test needed in EnsurePowerOfTwo.
    system action TestForCopyToPowerOfTwo returns boolean

    action IsPrepared returns boolean
        return isPrepared
    end

    action Prepare

        if isPrepared = true
            Error error
            error:SetErrorMessage("The file texture data is already prepared!")
            alert(error)
        end

        if pixelMap = undefined
            // FOR .CIM SUPPORT - libGDX implementation:
            /* if (file.extension().equals("cim"))
                    pixmap = PixmapIO.readCIM(file);
               else */
            PixelMap temp
            // temp is initialized from a single file
            pixelMap = EnsurePowerOfTwo(temp)
            width = pixelMap:GetWidth()
            height = pixelMap:GetHeight()
            if format = undefined
                format = pixelMap:GetFormat()
            end
        end

        isPrepared = true
    end

    action ConsumePixelMap returns PixelMap
    
        if isPrepared = false
            Error error
            error:SetErrorMessage("YOU ARE NOT PREPARED! Call Prepare() before consuming the PixelMap.")
            alert(error)
        end

        isPrepared = false
        PixelMap result = pixelMap
        pixelMap = undefined

        return result
    end

    action DisposePixelMap returns boolean
        return disposePixelMap
    end

    action GetWidth returns integer
        return width
    end

    action GetHeight returns integer
        return height
    end

    action GetFormat returns Format
        return format
    end

    action UseMipMaps returns boolean
        return useMipMaps
    end

    action IsManaged returns boolean
        return true
    end

    action getFile returns File
        return file
    end

    // This replaces "GetDataType" from libGDX. See TextureData for details.
    action IsCustomData returns boolean
        return false
    end

/* Note that consuming custom data has not been implemented in TextureData, so
   it is not necessary to have an override here currently.
	@Override
	public void consumeCustomData (int target) {
		throw new GdxRuntimeException("This TextureData implementation does not upload data itself");
	}
*/

    action SetDisposalState(boolean state)
        disposePixelMap = state
    end

    // This action will take an integer value and find the next power of two. To
    // do this, it effectively fills all bits before the most significant bit
    // with 1's, and then adds 1 to it. Due to addition overflow this will make
    // the next digit after the most significant bit become 1, and all else will
    // be 0. Subtraction by one at the beginning ensures that if the number was
    // already a power of two, it will return the same number.
    action NextPowerOfTwo (integer value) returns integer
        if value = 0
            return 1
	end
        
        BitwiseOperations ops

        value = value - 1
	value = ops:Or(value, ops:ShiftRight(value, 1))
        value = ops:Or(value, ops:ShiftRight(value, 2))
        value = ops:Or(value, ops:ShiftRight(value, 4))
        value = ops:Or(value, ops:ShiftRight(value, 8))
        value = ops:Or(value, ops:ShiftRight(value, 16))
        return value + 1
	
    end

end