package Libraries.Game.Graphics

use Libraries.Containers.Array
use Libraries.Compute.Matrix4
use Libraries.Compute.Vector3
use Libraries.Language.Object
use Libraries.Language.Support.CompareResult
use Libraries.Game.Graphics.Camera

class Renderable 
    
    public Matrix4 worldTransform
    
    public Mesh mesh = undefined // plugin?

    public integer meshPartOffset = 0
    
    public integer meshPartSize = 0

    /*
    The OpenGL primitive type, e.g. GL_TRIANGLES, GL_LINES, etc.
    */
    public integer primitiveType = 0

    public Material material = undefined

    // public Environment environment = undefined

    public Array<Matrix4> bones = undefined

    // public Shader shader = undefined

    /*
        User definable value, may be undefined.
    */
    // public Object userData

    /*
    Used solely to sort Renderables based on distance to the currently used camera.
    */
    private Camera cam = undefined

    action Set(Renderable renderable) returns Renderable
        worldTransform:Set(renderable:worldTransform)
        material = renderable:material
        mesh = renderable:mesh
        meshPartOffset = renderable:meshPartOffset
        meshPartSize = renderable:meshPartSize
        primitiveType = renderable:primitiveType
        bones = renderable:bones
        //environment = renderable:environment
        //shader = renderable:shader
        //userData = renderable:userData

        return me
    end

    /*
    action Compare(Object object) returns CompareResult
        CompareResult result
        integer myHash = me:GetHashCode()
        integer oHash = object:GetHashCode()

        if myHash < oHash
            result:result = result:SMALLER
        elseif myHash = oHash
            result:result = result:EQUAL
        else
            result:result = result:LARGER
        end
        return result
    end
    */
    action Compare(Object object) returns CompareResult
        if not (object is Renderable) or (cam = undefined)
            return parent:Object:Compare(object)
        end

        CompareResult result
        Renderable other = cast(Renderable, object)

        if material = undefined or other:material = undefined
            return parent:Object:Compare(object)
        end

        // Temporary BLendingATtribute.
        BlendingAttribute blat
        integer blendingValue = blat:GetBlendedValue()

        
        boolean blend1 = material:HasAttribute(blendingValue)
        if blend1
            blat = cast(BlendingAttribute, material:GetAttribute(blendingValue))
            blend1 = blend1 and blat:blended
        end
    
        boolean blend2 = other:material:HasAttribute(blendingValue)
        if blend2
            blat = cast(BlendingAttribute, other:material:GetAttribute(blendingValue))
            blend2 = blend2 and blat:blended
        end

        if not blend1 = blend2
            if blend1
                result:result = result:LARGER
                return result
            else
                result:result = result:SMALLER
                return result
            end
        end

        Vector3 tempV1
        Vector3 tempV2
        worldTransform:GetTranslation(tempV1)
        other:worldTransform:GetTranslation(tempV2)
        /* JAVA:
        final float dst = (int)(1000f * camera.position.dst2(tmpV1)) - (int)(1000f * camera.position.dst2(tmpV2));
		final int result = dst < 0 ? -1 : (dst > 0 ? 1 : 0);
		return b1 ? -result : result;
        */
        //TEMPORARY RETURN
        return undefined
    end
end