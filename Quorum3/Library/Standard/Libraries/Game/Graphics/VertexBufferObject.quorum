package Libraries.Game.Graphics

use Libraries.Containers.Array
use Libraries.Game.Graphics.VertexData
use Libraries.Game.Graphics.VertexAttribute
use Libraries.Game.Disposable

class VertexBufferObject is VertexData
    // This class will almost certainly need to be implemented as a plugin, due
    // to presence of Java buffer objects.
    
    // Definitely within plugin:
    //private FloatBuffer buffer;
    //private ByteBuffer byteBuffer;

    // Plugin or not?
    private boolean ownsBuffer = true

    // OpenGL handle to the buffer, probably plugin.
    private integer bufferHandle = 0

    // Constant representing OpenGL usage.
    private integer usage = 0

    // Whether the buffer object has changed and needs to be updated.
    boolean isDirty = false

    // Whether the buffer object is bound in OpenGL. Probably plugin.
    boolean isBound = false

    system action Dispose

    action Load(boolean isStatic, integer verticesCount, Array<VertexAttribute> attributes)
        VertexAttributes vertexAttributes
        vertexAttributes:SetAttributes(attributes)
        Load(isStatic, verticesCount, vertexAttributes)
    end

    system action Load(boolean isStatic, integer verticesCount, VertexAttributes attributes)

    system action GetSize returns integer

    system action GetMaxSize returns integer

    // action GetAttributes returns VertexAttributes

    system action SetVertices(Array<number> vertices, integer offset, integer count)

    system action UpdateVertices(integer targetOffset, Array<number> vertices, integer sourceOffset, integer count)

    // action GetBuffer returns FloatBuffer

    // system action Bind(ShaderProgram shader)

    // system action Bind(ShaderProgram shader, Array<integer> locations

    // system action Unbind(ShaderProgram shader)

    // system action Unbind(ShaderProgram shader, Array<integer> locations)

    system action Invalidate
end