package Libraries.Game.Graphics

use Libraries.Containers.Array
use Libraries.Game.Graphics.VertexData
use Libraries.Game.Graphics.VertexAttribute
use Libraries.Game.Disposable

class VertexBufferObject is VertexData

    system action Dispose

    action Load(boolean isStatic, integer verticesCount, Array<VertexAttribute> attributes)
        VertexAttributes vertexAttributes
        vertexAttributes:SetAttributes(attributes)
        Load(isStatic, verticesCount, vertexAttributes)
    end

    system action Load(boolean isStatic, integer verticesCount, VertexAttributes attributes)

    system action GetSize returns integer

    system action GetMaxSize returns integer

    system action GetAttributes returns VertexAttributes

    system action SetVertices(Array<number> vertices, integer offset, integer count)

    system action UpdateVertices(integer targetOffset, Array<number> vertices, integer sourceOffset, integer count)

    // action GetBuffer returns FloatBuffer

    // system action Bind(ShaderProgram shader)

    // system action Bind(ShaderProgram shader, Array<integer> locations

    // system action Unbind(ShaderProgram shader)

    // system action Unbind(ShaderProgram shader, Array<integer> locations)

    system action Invalidate

    action FillVertexBuffer(Array<number> vertices)
        isDirty = true
        PrepareBridgeArray(vertices:GetSize())
        integer index = 0
        repeat vertices:GetSize() times
            SendToBridgeArray(index, vertices:Get(index))
            index = index + 1
        end
        PopulateVertexBuffer()
    end

    /* Used to inform the plugin that we are about to send a new array of
    doubles with the given length. */
    private system action PrepareBridgeArray(integer length)

    /* Sends a value to be stored in the bridge array at the given index. */
    private system action SendToBridgeArray(integer index, number value)

    /* Uses the filled values of the bridge array to populate the byte buffer. */
    private system action PopulateVertexBuffer
    
end