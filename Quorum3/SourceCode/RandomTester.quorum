package Libraries.Language.Compile.Test

use Libraries.Language.Compile.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Translate.JarGenerator
use Libraries.System.StackTraceItem

class RandomTester 
    CompilerTestSuite suite = undefined
    text path = "Library/Tests/Random/"
    text passPath = path + "Pass/"
    text failPath = path + "Fail/"

    action Test
        path = passPath
        RandomBoolean()
        RandomInteger()
        RandomIntegerBetween()
        RandomIntegerWithMaximum()
        RandomListOfIntegers()
        RandomListOfNumbers()
        SetSeed()
        TestDistribution()
        
//FAIL TESTS
        path = failPath
        //These tests don't actually cause compiler errors. They cause errors
        //to be thrown (exceptions). We need a different strategy for this.
//        RandomIntegerBetweenWithInvalidRange()
//        RandomIntegerBetweenWithNegativeNumbers()
//        RandomIntegerBetweenWithSameValues()
//        RandomIntegerFail()
//        RandomListOfIntegersWithInvalidLength()
//        RandomListOfNumbersWithInvalidLength()

    end

    action GetName returns text
        return "Random Tests"
    end
    
    action GetCompilerTestSuite returns CompilerTestSuite
        return suite
    end

    action SetCompilerTestSuite(CompilerTestSuite suite)
        me:suite = suite
    end

    action RandomBoolean 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RandomBoolean.quorum")
        files:Add(main)
        results:Add(0, "false")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RandomInteger 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RandomInteger.quorum")
        files:Add(main)
        results:Add(0, "1749605806")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RandomIntegerBetween 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RandomIntegerBetween.quorum")
        files:Add(main)
        results:Add(0, "19")
        results:Add(1, "15")
        results:Add(2, "20")
        results:Add(3, "20")
        results:Add(4, "15")
        results:Add(5, "20")
        results:Add(6, "20")
        results:Add(7, "16")
        results:Add(8, "18")
        results:Add(9, "16")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RandomIntegerWithMaximum 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RandomIntegerWithMaximum.quorum")
        files:Add(main)
        results:Add(0, "13")
        results:Add(1, "2")
        results:Add(2, "14")
        results:Add(3, "13")
        results:Add(4, "2")
        results:Add(5, "15")
        results:Add(6, "14")
        results:Add(7, "3")
        results:Add(8, "10")
        results:Add(9, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RandomListOfIntegers 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RandomListOfIntegers.quorum")
        files:Add(main)
        results:Add(0, "1749605806")
        results:Add(1, "290934651")
        results:Add(2, "1945173367")
        results:Add(3, "1793167292")
        results:Add(4, "272702102")
        results:Add(5, "true")
        results:Add(6, "5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RandomListOfNumbers 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RandomListOfNumbers.quorum")
        files:Add(main)
        results:Add(0, "0.81472369228244")
        results:Add(1, "0.13547700417017425")
        results:Add(2, "0.9057919345357418")
        results:Add(3, "0.835008589939684")
        results:Add(4, "0.12698681192797925")
        results:Add(5, "true")
        results:Add(6, "5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action SetSeed 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "SetSeed.quorum")
        files:Add(main)
        results:Add(0, "8")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action TestDistribution 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "TestDistribution.quorum")
        files:Add(main)
        results:Add(0, "Normal Distribution")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

//FAIL TESTS
    action RandomIntegerBetweenWithInvalidRange 
        Array<File> files
        File main
        main:SetPath(path + "RandomIntegerBetweenWithInvalidRange.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action RandomIntegerBetweenWithNegativeNumbers 
        Array<File> files
        File main
        main:SetPath(path + "RandomIntegerBetweenWithNegativeNumbers.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action RandomIntegerBetweenWithSameValues 
        Array<File> files
        File main
        main:SetPath(path + "RandomIntegerBetweenWithSameValues.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action RandomIntegerFail 
        Array<File> files
        File main
        main:SetPath(path + "RandomIntegerFail.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action RandomListOfIntegersWithInvalidLength 
        Array<File> files
        File main
        main:SetPath(path + "RandomListOfIntegersWithInvalidLength.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action RandomListOfNumbersWithInvalidLength 
        Array<File> files
        File main
        main:SetPath(path + "RandomListOfNumbersWithInvalidLength.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

end

