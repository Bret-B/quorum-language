package Libraries.Language.Compile.Test

use Libraries.Language.Compile.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Translate.JarGenerator
use Libraries.System.StackTraceItem

class MathTester
    CompilerTestSuite suite = undefined
    text path = "Library/Tests/Math/"
    text passPath = path + "Pass/"
    text failPath = path + "Fail/"

    action Test
        path = passPath
        AbsoluteValue()
        Cosine()
        HyperbolicCosine()
        HyperbolicSine()
        HyperbolicTangent()
        InverseCosine()
        InverseHyperbolicCosine()
        InverseHyperbolicSine()
        InverseHyperbolicTangent()
        Logarithm()
        NaturalLogarithm()
        RaiseToPower()
        RoundDown()
        RoundDownToDecimal()
        RoundUp()
        RoundUpToDecimal()
        Sine()
        SquareRoot()
        Tangent()
        Vector2Length()
        Vector2Subtract()
        Vector2Normalize()
        Vector2Add()
        Vector2DotProduct()
        Vector2Scale()
        Vector2MultiplyAndAdd()
        Vector2Distance()
        Vector2Limit()
        Vector2SetLength()
        Vector2CrossProduct()
        Vector2Angle()
        Vector2Rotate()
        Vector2LinearInterpolation()
        Vector2EqualsAtPrecision()
        Vector2IsUnit()
        Vector2IsZero()
        Vector2IsOnLine()
        Vector2IsCollinear()
        Vector2IsCollinearOpposite()
        Vector2IsPerpendicular()
        Vector2Direction()
        Vector3Add()
        Vector3Subtract()
        Vector3Scale()
        Vector3MultiplyAndAdd()
        Vector3Length()
        Vector3Distance()
        Vector3Normalize()
        Vector3DotProduct()
        Vector3CrossProduct()
        Vector3MultiplyBy3x4Matrix()
        Vector3Matrix4Multiply()
        Vector3Matrix3Multiply()
        Vector3Transforms()
        Vector3Rotate()
        Vector3IsUnit()
        Vector3IsZero()
        Vector3IsOnLine()
        Vector3IsCollinear()
        Vector3IsPerpendicular()
        Vector3HasDirection()
        Vector3Interpolation()
        Vector3Limit()
        Vector3Clamp()
        Vector3EqualsAtPrecision()
        Matrix3Multiply()
        Matrix3SetToRotation()
        Matrix3Determinant()
        Matrix3Inverse()

//FAIL TESTS
        path = failPath
    end

    action GetName returns text
        return "Math Tests"
    end

    action GetCompilerTestSuite returns CompilerTestSuite
        return suite
    end

    action SetCompilerTestSuite(CompilerTestSuite suite)
        me:suite = suite
    end

    action AbsoluteValue
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AbsoluteValue.quorum")
        files:Add(main)
        results:Add(0, "1.0")
        results:Add(1, "1.0")
        results:Add(2, "1")
        results:Add(3, "1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Cosine
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Cosine.quorum")
        files:Add(main)
        results:Add(0, "0.87758")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action HyperbolicCosine
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "HyperbolicCosine.quorum")
        files:Add(main)
        results:Add(0, "1.12763")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action HyperbolicSine
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "HyperbolicSine.quorum")
        files:Add(main)
        results:Add(0, "0.5211")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action HyperbolicTangent
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "HyperbolicTangent.quorum")
        files:Add(main)
        results:Add(0, "0.46212")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action InverseCosine
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "InverseCosine.quorum")
        files:Add(main)
        results:Add(0, "1.0472")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action InverseHyperbolicCosine
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "InverseHyperbolicCosine.quorum")
        files:Add(main)
        results:Add(0, "1.31696")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action InverseHyperbolicSine
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "InverseHyperbolicSine.quorum")
        files:Add(main)
        results:Add(0, "0.88137")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action InverseHyperbolicTangent
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "InverseHyperbolicTangent.quorum")
        files:Add(main)
        results:Add(0, "0.54931")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action InverseSine
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "InverseSine.quorum")
        files:Add(main)
        results:Add(0, "0.5236")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action InverseTangent
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "InverseTangent.quorum")
        files:Add(main)
        results:Add(0, "0.46365")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Logarithm
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Logarithm.quorum")
        files:Add(main)
        results:Add(0, "0.69897")
        results:Add(1, "2.0")
        results:Add(2, "0.90309")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action NaturalLogarithm
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "NaturalLogarithm.quorum")
        files:Add(main)
        results:Add(0, "1.60944")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RaiseToPower
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RaiseToPower.quorum")
        files:Add(main)
        results:Add(0, "9.0")
        results:Add(1, "27.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RoundDown
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RoundDown.quorum")
        files:Add(main)
        results:Add(0, "3.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RoundDownToDecimal
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RoundDownToDecimal.quorum")
        files:Add(main)
        results:Add(0, "3.5")
        results:Add(1, "3.6")
        results:Add(2, "3.1")
        results:Add(3, "3.14")
        results:Add(4, "3.142")
        results:Add(5, "3.1416")
        results:Add(6, "3.14159")
        results:Add(7, "3.141593")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RoundUp
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RoundUp.quorum")
        files:Add(main)
        results:Add(0, "3.0")
        results:Add(1, "3.1")
        results:Add(2, "3.14")
        results:Add(3, "3.142")
        results:Add(4, "3.1416")
        results:Add(5, "3.14159")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RoundUpToDecimal
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RoundUpToDecimal.quorum")
        files:Add(main)
        results:Add(0, "3.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Sine
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Sine.quorum")
        files:Add(main)
        results:Add(0, "0.47943")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action SquareRoot
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "SquareRoot.quorum")
        files:Add(main)
        results:Add(0, "3.0")
        results:Add(1, "1.4142135623730951")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Tangent
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Tangent.quorum")
        files:Add(main)
        results:Add(0, "0.5463")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Length
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Length.quorum")
        files:Add(main)
        results:Add("5.0")
        results:Add("5.0")
        results:Add("25.0")
        results:Add("25.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Subtract
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Subtract.quorum")
        files:Add(main)
        results:Add("[1.0:1.0]")
        results:Add("[3.0:2.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Normalize
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Normalize.quorum")
        files:Add(main)
        results:Add("[0.0:0.0]")
        results:Add("[0.6:0.8]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Add
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Add.quorum")
        files:Add(main)
        results:Add("[8.0:7.0]")
        results:Add("[8.0:7.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2DotProduct
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2DotProduct.quorum")
        files:Add(main)
        results:Add("53.0")
        results:Add("53.0")
        results:Add("53.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Scale
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Scale.quorum")
        files:Add(main)
        results:Add("[6.0:12.0]")
        results:Add("[12.0:12.0]")
        results:Add("[12.0:12.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2MultiplyAndAdd
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2MultiplyAndAdd.quorum")
        files:Add(main)
        results:Add("[8.0:11.0]")
        results:Add("[8.0:11.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Distance
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Distance.quorum")
        files:Add(main)
        results:Add("5.0")
        results:Add("5.0")
        results:Add("5.0")
        results:Add("25.0")
        results:Add("25.0")
        results:Add("25.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Limit
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Limit.quorum")
        files:Add(main)
        results:Add("[2.4000000000000004:3.2]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2SetLength
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2SetLength.quorum")
        files:Add(main)
        results:Add("[0.6000000000000001:0.8]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2CrossProduct
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2CrossProduct.quorum")
        files:Add(main)
        results:Add("1.0")
        results:Add("1.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Angle
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Angle.quorum")
        files:Add(main)
        results:Add("30.000000000000004")
        results:Add("0.5235987755982989")
        results:Add("11.309932474020227")
        results:Add("0.197395559849881")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Rotate
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Rotate.quorum")
        files:Add(main)
        results:Add("[5.062177826491071:5.232050807568877]")
        results:Add("[5.062177826491071:5.232050807568877]")
        results:Add("[-2.0:7.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2LinearInterpolation
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2LinearInterpolation.quorum")
        files:Add(main)
        results:Add("[0.75:0.25]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2EqualsAtPrecision
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2EqualsAtPrecision.quorum")
        files:Add(main)
        results:Add("true")
        results:Add("true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2IsUnit
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2IsUnit.quorum")
        files:Add(main)
        results:Add("The vector is a unit vector.")
        results:Add("The vector is a unit vector.")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2IsZero
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2IsZero.quorum")
        files:Add(main)
        results:Add("The vector is the zero vector.")
        results:Add("The vector is the zero vector.")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2IsOnLine
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2IsOnLine.quorum")
        files:Add(main)
        results:Add("The two vectors are on the same line.")
        results:Add("The two vectors are on the same line.")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2IsCollinear
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2IsCollinear.quorum")
        files:Add(main)
        results:Add("The two vectors are collinear in the same direction")
        results:Add("The two vectors are collinear in the same direction")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2IsCollinearOpposite
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2IsCollinearOpposite.quorum")
        files:Add(main)
        results:Add("The two vectors are collinear in the opposite direction")
        results:Add("The two vectors are collinear in the opposite direction")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2IsPerpendicular
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2IsPerpendicular.quorum")
        files:Add(main)
        results:Add("The two vectors are perpendicular.")
        results:Add("The two vectors are perpendicular.")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Direction
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Direction.quorum")
        files:Add(main)
        results:Add("The two vectors have opposite directions.")
        results:Add("The two vectors have the same direction.")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3Add
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3Add.quorum")
        files:Add(main)
        results:Add("The new vector is: [11.5, 9.7, 1.7000000000000002]")
        results:Add("The new vector is: [7.6, 17.299999999999997, 2.3]")
        results:Add("The new vector is: [7.5, 9.0, 7.1]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3Subtract
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3Subtract.quorum")
        files:Add(main)
        results:Add("The new vector is: [3.0, 3.0, 3.0]")
        results:Add("The new vector is: [3.0, 3.0, 3.0]")
        results:Add("The new vector is: [1.5, 3.0, 1.1]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3Scale
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3Scale.quorum")
        files:Add(main)
        results:Add("The new vector is: [4.0, 6.0, 8.0]")
        results:Add("The new vector is: [6.0, 12.0, 8.0]")
        results:Add("The new vector is: [6.0, 12.0, 8.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3MultiplyAndAdd
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3MultiplyAndAdd.quorum")
        files:Add(main)
        results:Add("The new vector is: [9.0, 10.0, 9.0]")
        results:Add("The new vector is: [10.0, 10.0, 7.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3Length
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3Length.quorum")
        files:Add(main)
        results:Add("The length of the vector is 3.0")
        results:Add("The length of the vector is 3.0")
        results:Add("The square of the length of the vector is 9.0")
        results:Add("The square of the length of the vector is 9.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3Distance
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3Distance.quorum")
        files:Add(main)
        results:Add("The distance is 3.605551275463989")
        results:Add("The distance is 3.605551275463989")
        results:Add("The distance is 3.605551275463989")
        results:Add("The square of the distance is 13.0")
        results:Add("The square of the distance is 13.0")
        results:Add("The square of the distance is 13.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3Normalize
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3Normalize.quorum")
        files:Add(main)
        results:Add("The normalized vector is: [0.3490920153160758, 0.6444775667373708, 0.680281876000558]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3DotProduct
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3DotProduct.quorum")
        files:Add(main)
        results:Add("The dot product is 74.0")
        results:Add("The dot product is 74.0")
        results:Add("The dot product is 74.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3CrossProduct
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3CrossProduct.quorum")
        files:Add(main)
        results:Add("The cross product is: [0.0, 0.0, 1.0]")
        results:Add("The cross product is: [0.0, 0.0, 1.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3MultiplyBy3x4Matrix
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3MultiplyBy3x4Matrix.quorum")
        files:Add(main)
        results:Add("The new vector is: [7.0, 9.0, 5.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3Matrix4Multiply
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3Matrix4Multiply.quorum")
        files:Add(main)
        results:Add("The new vector is: [44.0, 54.0, 64.0]")
        results:Add("The new vector is: [11.0, 51.0, 91.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3Matrix3Multiply
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3Matrix3Multiply.quorum")
        files:Add(main)
        results:Add("The new vector is: [39.0, 49.0, 59.0]")
        results:Add("The new vector is: [13.0, 43.0, 73.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3Transforms
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3Transforms.quorum")
        files:Add(main)
        results:Add("The new vector is: [0.7071067811865479, 3.5355339059327378, 5.0]")
        results:Add("The new vector is: [3.0000000000000004, 2.0, 5.0]")
        results:Add("The new vector is: [-1.0, -1.0, 5.0]")
        results:Add("The new vector is: [3.0000000000000004, 2.0, 5.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3Rotate
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3Rotate.quorum")
        files:Add(main)
        results:Add("The new vector is: [3.0, -2.121320343559643, 4.949747468305833]")
        results:Add("The new vector is: [3.0, -2.121320343559643, 4.949747468305833]")
        results:Add("The new vector is: [3.0, -2.121320343559643, 4.949747468305833]")
        results:Add("The new vector is: [3.0, -2.121320343559643, 4.949747468305833]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3IsUnit
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3IsUnit.quorum")
        files:Add(main)
        results:Add("The vector is a unit vector.")
        results:Add("The vector is a unit vector.")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3IsZero
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3IsZero.quorum")
        files:Add(main)
        results:Add("The vector is the zero vector.")
        results:Add("The vector is the zero vector.")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3IsOnLine
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3IsOnLine.quorum")
        files:Add(main)
        results:Add("The two vectors are on the same line.")
        results:Add("The two vectors are on the same line.")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3IsCollinear
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3IsCollinear.quorum")
        files:Add(main)
        results:Add("The two vectors are collinear in the opposite direction")
        results:Add("The two vectors are collinear in the opposite direction")
        results:Add("The two vectors are collinear in the same direction")
        results:Add("The two vectors are collinear in the same direction")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3IsPerpendicular
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3IsPerpendicular.quorum")
        files:Add(main)
        results:Add("The two vectors are perpendicular.")
        results:Add("The two vectors are perpendicular.")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3HasDirection
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3HasDirection.quorum")
        files:Add(main)
        results:Add("The two vectors have the same direction.")
        results:Add("The two vectors have opposite directions.")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3Interpolation
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3Interpolation.quorum")
        files:Add(main)
        results:Add("The new vector is: [1.5, 2.5, 1.0]")
        results:Add("The new vector is: [1.5, 2.5, 1.0]")
        results:Add("The new vector is: [0.3897723826954489, 0.5603080103534148, 0.7308436380113807]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3Limit
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3Limit.quorum")
        files:Add(main)
        results:Add("The new vector is: [1.0, 0.5, 1.0]")
        results:Add("The new vector is: [1.0, 0.5, 1.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3Clamp
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3Clamp.quorum")
        files:Add(main)
        results:Add("The new vector is: [1.0, 0.5, 1.0]")
        results:Add("The new vector is: [1.0, 0.5, 1.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector3EqualsAtPrecision
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector3EqualsAtPrecision.quorum")
        files:Add(main)
        results:Add("The two vectors are equal.")
        results:Add("The two vectors are equal.")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Matrix3Multiply
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Matrix3Multiply.quorum")
        files:Add(main)
        results:Add("The new matrix is:")
        results:Add("|66.0, 78.0, 90.0|")
        results:Add("|192.0, 240.0, 288.0|")
        results:Add("|318.0, 402.0, 486.0|")
        results:Add("The new matrix is:")
        results:Add("|66.0, 78.0, 90.0|")
        results:Add("|192.0, 240.0, 288.0|")
        results:Add("|318.0, 402.0, 486.0|")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Matrix3SetToRotation
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Matrix3SetToRotation.quorum")
        files:Add(main)
        results:Add("The new matrix is:")
        results:Add("|0.7071067811865476, -0.7071067811865476, 0.0|")
        results:Add("|0.7071067811865476, 0.7071067811865476, 0.0|")
        results:Add("|0.0, 0.0, 1.0|")
        results:Add("The new matrix is:")
        results:Add("|0.7071067811865476, -0.7071067811865476, 0.0|")
        results:Add("|0.7071067811865476, 0.7071067811865476, 0.0|")
        results:Add("|0.0, 0.0, 1.0|")
        results:Add("The new matrix is:")
        results:Add("|0.7071067811865476, -0.7071067811865476, 0.0|")
        results:Add("|0.7071067811865476, 0.7071067811865476, 0.0|")
        results:Add("|0.0, 0.0, 1.0|")
        results:Add("The new matrix is:")
        results:Add("|0.7071067811865476, -0.7071067811865476, 0.0|")
        results:Add("|0.7071067811865476, 0.7071067811865476, 0.0|")
        results:Add("|0.0, 0.0, 1.0|")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Matrix3Determinant
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Matrix3Determinant.quorum")
        files:Add(main)
        results:Add("The determinant of the matrix is 1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Matrix3Inverse
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Matrix3Inverse.quorum")
        files:Add(main)
        results:Add("The new matrix is:")
        results:Add("|3.0, -5.0, 0.0|")
        results:Add("|-1.0, 2.0, 0.0|")
        results:Add("|0.0, 0.0, 1.0|")
        results:Add("Matrix is not invertable if the determinant computes to 0.")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end
end

