package Libraries.Language.Compile.Test

use Libraries.Language.Compile.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Translate.JarGenerator
use Libraries.System.StackTraceItem

class MathTester
    CompilerTestSuite suite = undefined
    text path = "Library/Tests/Math/"
    text passPath = path + "Pass/"
    text failPath = path + "Fail/"

    action Test
        path = passPath
        AbsoluteValue()
        Cosine()
        HyperbolicCosine()
        HyperbolicSine()
        HyperbolicTangent()
        InverseCosine()
        InverseHyperbolicCosine()
        InverseHyperbolicSine()
        InverseHyperbolicTangent()
        Logarithm()
        NaturalLogarithm()
        RaiseToPower()
        RoundDown()
        RoundDownToDecimal()
        RoundUp()
        RoundUpToDecimal()
        Sine()
        SquareRoot()
        Tangent()
        Vector2Length()
        Vector2Subtract()
        Vector2Normalize()
        Vector2Add()
        Vector2DotProduct()
        Vector2Scale()
        Vector2MultiplyAndAdd()
        Vector2Distance()
        Vector2Limit()
        Vector2SetLength()
        Vector2CrossProduct()
        Vector2Angle()
        Vector2Rotate()
        Vector2LinearInterpolation()
        Vector2EqualsAtPrecision()

//FAIL TESTS
        path = failPath
    end

    action GetName returns text
        return "Math Tests"
    end

    action GetCompilerTestSuite returns CompilerTestSuite
        return suite
    end

    action SetCompilerTestSuite(CompilerTestSuite suite)
        me:suite = suite
    end

    action AbsoluteValue
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AbsoluteValue.quorum")
        files:Add(main)
        results:Add(0, "1.0")
        results:Add(1, "1.0")
        results:Add(2, "1")
        results:Add(3, "1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Cosine
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Cosine.quorum")
        files:Add(main)
        results:Add(0, "0.87758")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action HyperbolicCosine
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "HyperbolicCosine.quorum")
        files:Add(main)
        results:Add(0, "1.12763")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action HyperbolicSine
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "HyperbolicSine.quorum")
        files:Add(main)
        results:Add(0, "0.5211")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action HyperbolicTangent
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "HyperbolicTangent.quorum")
        files:Add(main)
        results:Add(0, "0.46212")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action InverseCosine
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "InverseCosine.quorum")
        files:Add(main)
        results:Add(0, "1.0472")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action InverseHyperbolicCosine
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "InverseHyperbolicCosine.quorum")
        files:Add(main)
        results:Add(0, "1.31696")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action InverseHyperbolicSine
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "InverseHyperbolicSine.quorum")
        files:Add(main)
        results:Add(0, "0.88137")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action InverseHyperbolicTangent
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "InverseHyperbolicTangent.quorum")
        files:Add(main)
        results:Add(0, "0.54931")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action InverseSine
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "InverseSine.quorum")
        files:Add(main)
        results:Add(0, "0.5236")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action InverseTangent
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "InverseTangent.quorum")
        files:Add(main)
        results:Add(0, "0.46365")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Logarithm
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Logarithm.quorum")
        files:Add(main)
        results:Add(0, "0.69897")
        results:Add(1, "2.0")
        results:Add(2, "0.90309")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action NaturalLogarithm
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "NaturalLogarithm.quorum")
        files:Add(main)
        results:Add(0, "1.60944")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RaiseToPower
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RaiseToPower.quorum")
        files:Add(main)
        results:Add(0, "9.0")
        results:Add(1, "27.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RoundDown
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RoundDown.quorum")
        files:Add(main)
        results:Add(0, "3.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RoundDownToDecimal
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RoundDownToDecimal.quorum")
        files:Add(main)
        results:Add(0, "3.5")
        results:Add(1, "3.6")
        results:Add(2, "3.1")
        results:Add(3, "3.14")
        results:Add(4, "3.142")
        results:Add(5, "3.1416")
        results:Add(6, "3.14159")
        results:Add(7, "3.141593")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RoundUp
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RoundUp.quorum")
        files:Add(main)
        results:Add(0, "3.0")
        results:Add(1, "3.1")
        results:Add(2, "3.14")
        results:Add(3, "3.142")
        results:Add(4, "3.1416")
        results:Add(5, "3.14159")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RoundUpToDecimal
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RoundUpToDecimal.quorum")
        files:Add(main)
        results:Add(0, "3.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Sine
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Sine.quorum")
        files:Add(main)
        results:Add(0, "0.47943")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action SquareRoot
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "SquareRoot.quorum")
        files:Add(main)
        results:Add(0, "3.0")
        results:Add(1, "1.4142135623730951")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Tangent
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Tangent.quorum")
        files:Add(main)
        results:Add(0, "0.5463")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Length
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Length.quorum")
        files:Add(main)
        results:Add("5.0")
        results:Add("5.0")
        results:Add("25.0")
        results:Add("25.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Subtract
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Subtract.quorum")
        files:Add(main)
        results:Add("[1.0:1.0]")
        results:Add("[3.0:2.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Normalize
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Normalize.quorum")
        files:Add(main)
        results:Add("[0.0:0.0]")
        results:Add("[0.6:0.8]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Add
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Add.quorum")
        files:Add(main)
        results:Add("[8.0:7.0]")
        results:Add("[8.0:7.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2DotProduct
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2DotProduct.quorum")
        files:Add(main)
        results:Add("53.0")
        results:Add("53.0")
        results:Add("53.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Scale
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Scale.quorum")
        files:Add(main)
        results:Add("[6.0:12.0]")
        results:Add("[12.0:12.0]")
        results:Add("[12.0:12.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2MultiplyAndAdd
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2MultiplyAndAdd.quorum")
        files:Add(main)
        results:Add("[8.0:11.0]")
        results:Add("[8.0:11.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Distance
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Distance.quorum")
        files:Add(main)
        results:Add("5.0")
        results:Add("5.0")
        results:Add("5.0")
        results:Add("25.0")
        results:Add("25.0")
        results:Add("25.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Limit
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Limit.quorum")
        files:Add(main)
        results:Add("[2.4000000000000004:3.2]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2SetLength
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2SetLength.quorum")
        files:Add(main)
        results:Add("[0.6000000000000001:0.8]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2CrossProduct
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2CrossProduct.quorum")
        files:Add(main)
        results:Add("1.0")
        results:Add("1.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Angle
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Angle.quorum")
        files:Add(main)
        results:Add("30.000000000000004")
        results:Add("0.5235987755982989")
        results:Add("11.309932474020227")
        results:Add("0.197395559849881")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2Rotate
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2Rotate.quorum")
        files:Add(main)
        results:Add("[5.062177826491071:5.232050807568877]")
        results:Add("[5.062177826491071:5.232050807568877]")
        results:Add("[-2.0:7.0]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2LinearInterpolation
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2LinearInterpolation.quorum")
        files:Add(main)
        results:Add("[0.75:0.25]")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Vector2EqualsAtPrecision
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Vector2EqualsAtPrecision.quorum")
        files:Add(main)
        results:Add("true")
        results:Add("true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end
end

