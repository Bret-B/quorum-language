package Libraries.Language.Compile.Symbol

use Libraries.Language.Compile.Location
use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.CodeCompletionItem

class Variable is Symbol
    boolean isParameter = false
    Type type = undefined
    boolean isPrivate = true
    boolean isPublic = false
    boolean isConstant = false
    boolean hasModifier = false
    boolean isDefined = false
    boolean isField = false
    integer bytecodeLocation = -1
    integer parameterLocation = -1
    List<Location> locations
    boolean isVisibileToDebugger = true
    Class parentClass = undefined
    boolean definedInAlwaysBlock = false
    List<Location> useLocations
    Location typeLocation = undefined

    action AddUseLocation(Location location)
        if GetName() = "apple"
            a = 5
        end
        useLocations:Add(location)
    end

    action GetUseLocations returns Iterator<Location>
        return useLocations:GetIterator()
    end

    action GetTypeLocation returns Location
        return typeLocation
    end

    action SetTypeLocation(Location location)
        typeLocation = location
    end

    action IsUsed returns boolean
        //only if greater than 2 because the first usage is the definition
        if useLocations:GetSize() > 0
            return true
        end

        return false
    end

    action IsDefinedInAlwaysBlock returns boolean
        return definedInAlwaysBlock
    end

    action SetDefinedInAlwaysBlock(boolean defined)
        definedInAlwaysBlock = defined
    end

    /*
        This action returns the class this variable is contained in. It does
        not return the type of the variable.
    */
    action GetParentClass returns Class
        return parentClass
    end

    /*
        This action sets the class this variable is contained in. It does
        not set the type of the variable.
    */
    action SetParentClass(Class c)
        parentClass = c
    end

    action IsVisibleToDebugger returns boolean
        return isVisibileToDebugger
    end

    action SetVisibleToDebugger(boolean visible)
        isVisibileToDebugger = visible
    end

    action AddUsage(Location location)
        locations:Add(location)
    end

    action GetUsageLocations returns Iterator<Location>
        return locations:GetIterator()
    end

    action GetCodeCompletionItem(Class calledFrom) returns CodeCompletionItem
        CodeCompletionItem item
        
        if not IsField() 
            if IsParameter()
                item:SetType(item:LOCAL_VARIABLE)
            else
                item:SetType(item:PARAMETER)
            end
        else 
            if IsPublic()
                item:SetType(item:PUBLIC_FIELD_VARIABLE)
            else
                item:SetType(item:PRIVATE_FIELD_VARIABLE)
            end
        end

        text name = GetName()

        //if this is a variable in a parent class relative to the caller,
        //adjust the syntax to allow access if it is public
        if calledFrom:GetStaticKey() not= parentClass:GetStaticKey()
            //check if the class has a "use" for this parent
            name = "parent:" + parentClass:GetStaticKey() + ":" + name
        end

        Type type = GetType()
        text docs = ""
        //no resolution is required here because variables are resolved
        //actions require an additional step because they are tied to a
        //particular variable
        text signature = type:GetNameWithGenerics()

        Documentation doc = GetDocumentation()
        if doc not= undefined
            docs = "<h1>" + signature + "</h1>"

            docs = docs + "<p>" + doc:GetDescription() + "</p>"

            text example = doc:GetExample()
            if not example:IsEmpty()
                docs = docs + "<p><strong>Example</strong></p>"
                docs = docs + example
            end
        end
        
        item:displayText = name
        item:rightDisplayText = signature
        item:completionText = name
        item:documentationText = docs

        return item
    end

    action IsDefined returns boolean
        return isDefined
    end

    action SetIsDefined(boolean defined) 
        isDefined = defined
    end

    action IsField returns boolean
        return isField
    end

    action SetIsField(boolean field)
        isField = field

        //fields require a right hand side, therefore this is always true
        if field
            isDefined = true
        end
    end

    action IsParameter returns boolean
        return isParameter
    end

    action SetIsParameter(boolean isParameter)
        me:isParameter = isParameter
        //because parameters are required to have a value, they are always defined
        //by definition
        if isParameter
            isDefined = true
        end
    end

    action GetType returns Type
        return type
    end

    action SetType(Type type)
        me:type = type
    end

    action GetStaticKey returns text
        return me:GetName()
    end

    action GetDisplayName returns text
        return GetStaticKey()
    end

    action GetDisplayNameWithGenerics returns text
        text result = ""
        result = result + type:GetStaticKeyWithMappedGenerics() + " " + GetName()
        return result
    end

    action GetDisplayNameWithGenericsAsWeb returns text
        text result = ""
        result = result + type:GetStaticKeyWithMappedGenerics() + " " + GetName()
        result = result:Replace(">", "&gt;")
        result = result:Replace("<", "&lt;")
        return result
    end

    action IsPublic returns boolean
        return isPublic
    end

    action SetPublic
        isPublic = true
        isPrivate = false
    end

    action IsPrivate returns boolean
        return isPrivate
    end

    action SetPrivate
        isPublic = false
        isPrivate = true
    end

    action IsConstant returns boolean
        return isConstant
    end

    action SetConstant(boolean bool)
        isConstant = bool
    end

    action HasExplicitModifier returns boolean
        return hasModifier
    end

    action SetHasExplicitModifier(boolean hasModifier)
        me:hasModifier = hasModifier
    end

    action GetBytecodeLocation returns integer
        return bytecodeLocation
    end

    action SetBytecodeLocation(integer int)
        bytecodeLocation = int
    end

    action GetParameterLocation returns integer
        return parameterLocation
    end

    action SetParameterLocation(integer int)
        parameterLocation = int
    end
end