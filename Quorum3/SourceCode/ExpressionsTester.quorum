package Libraries.Language.Compile.Test

use Libraries.Language.Compile.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.Containers.Iterator
use Libraries.Language.Compile.Translate.JarGenerator
use Libraries.System.StackTraceItem

class ExpressionsTester 
    CompilerTestSuite suite = undefined
    text path = "Library/Tests/Expressions/"
    text passPath = path + "Pass/"
    text failPath = path + "Fail/"

    action Test
        path = passPath
        AddBooleanText()
        AddDoubleDouble()
        AddDoubleInt()
        AddDoubleText()
        AddIntDouble()
        AddIntInt()
        AddIntText()
        AddTextBoolean()
        AddTextDouble()
        AddTextInt()
        AddTextText()
        AndBooleanBoolean()
        AssignUndefinedToText()
        CastTest()
        CompareTextTextField()
        ComplexExpression()
        DivDoubleDouble()
        DivDoubleInt()
        DivIntDouble()
        DivIntInt()
        EqualBooleanBoolean()
        EqualCustomCustom()
        EqualDoubleDouble()
        EqualDoubleInt()
        EqualIntDouble()
        EqualIntInt()
        EqualTextText()
        Expression()
        GetMaxNumberValue()
        GTDoubleDouble()
        GTDoubleInt()
        GTEDoubleDouble()
        GTEDoubleInt()
        GTEIntDouble()
        GTEIntInt()
        GTETextText()
        GTIntDouble()
        GTIntInt()
        GTTextText()
        GetCharacterParameterText()  
        GetMaxParameterInteger()
        GetTextParameterBoolean()     
        HelloWorld()
        HelloWorldNoClassNoActions()
        HelloWorldNoClass()
        IsA()
        IsInfiniteNumberParameter()   
        LTDoubleDouble()
        LTDoubleInt()
        LTEDoubleDouble()
        LTEDoubleInt()
        LTEIntDouble()
        LTEIntInt()
        LTIntInt2()
        LTETextText()
        LTIntInt()
        LTTextText()
        LocalVarDecl()
        LTIntDouble()     
        MinusInteger()
        MinusNumber()
        ModDoubleDouble()
        ModDoubleInt()
        ModIntDouble()
        ModIntInt()
        MultDoubleDouble()
        MultDoubleInt()
        MultIntDouble()
        MultIntInt()
        NotBoolean()                 
        NotEqualBooleanBoolean()
        NotEqualCustomCustom()
        NotEqualDoubleDouble()
        NotEqualDoubleInt()
        NotEqualIntDouble()
        NotEqualIntInt()
        NotEqualTextText()
        OrAndBooleanBoolean()
        OrBooleanBoolean()
        OutputBoolean()
        OutputDouble()
        OutputInt()
        OutputText()
        PrimitiveGetMaximumValueInteger()
        PrimitiveGetMinimumValueInteger()
        PrimitiveGetMaximumValueDouble()
        PrimitiveGetMinimumValueDouble()
        SubDoubleDouble()
        SubDoubleInt()
        SubIntDouble()
        SubIntInt()
// FAIL TESTS
        path = failPath
        BadActionName()
        BadClassName()
        BadVariableName()
        BadErrorMessage()
        BadText()
        BlueprintMain()
        ChangeConstant()
        ChangeConstantField()
        DuplicateVariableDefinition()
        FatInteger()
        FakeAction()
        DuplicateClassTest()
        InvalidExpression()
        InvalidFieldName()
        InvalidFieldName2()
        InvalidVariableName()
        MainNotCapitalized()
        MissingActionParen()
        MissingVariable()
        NotIsObject()
        NoVariable()
        NoVariable2()
        SetInitialize()
        VariableNamedAsKeyword()
        WeirdText()
    end

    action GetName returns text
        return "Expressions Tests"
    end

    action GetCompilerTestSuite returns CompilerTestSuite
        return suite
    end

    action SetCompilerTestSuite(CompilerTestSuite suite)
        me:suite = suite
    end

    action AddBooleanText
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AddBooleanText.quorum")
        files:Add(main)
        results:Add(0, "true text")
        results:Add(1, "false text")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action AddDoubleDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AddDoubleDouble.quorum")
        files:Add(main)
        results:Add(0, "7.1")
        results:Add(1, "7.1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action AddDoubleInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AddDoubleInt.quorum")
        files:Add(main)
        results:Add(0, "7.2")
        results:Add(1, "7.2")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action AddDoubleText
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AddDoubleText.quorum")
        files:Add(main)
        results:Add(0, "3.2 is a number.")
        results:Add(1, "3.6 is a number.")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action AddIntDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AddIntDouble.quorum")
        files:Add(main)
        results:Add(0, "13.5")
        results:Add(1, "13.6")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action AddIntInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AddIntInt.quorum")
        files:Add(main)
        results:Add(0, "6")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action AddIntText
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AddIntText.quorum")
        files:Add(main)
        results:Add(0, "1 is an integer")
        results:Add(1, "2 is an integer")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action AddTextBoolean
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AddTextBoolean.quorum")
        files:Add(main)
        results:Add(0, "boolean is true")
        results:Add(1, "boolean is false")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action AddTextDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AddTextDouble.quorum")
        files:Add(main)
        results:Add(0, "number is 1.0")
        results:Add(1, "number is 2.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action AddTextInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AddTextInt.quorum")
        files:Add(main)
        results:Add(0, "int is 1")
        results:Add(1, "int is 2")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action AddTextText
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AddTextText.quorum")
        files:Add(main)
        results:Add(0, "hello world")
        results:Add(1, "world hello")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action AndBooleanBoolean
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AndBooleanBoolean.quorum")
        files:Add(main)
        results:Add(0, "true")
        results:Add(1, "false")
        results:Add(2, "false")
        results:Add(3, "false")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action AssignUndefinedToText
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AssignUndefinedToText.quorum")
        files:Add(main)
        results:Add(0, "We did it!")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CastTest
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CastTest.quorum")
        files:Add(main)
        results:Add(0, "1.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CompareTextTextField
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CompareTextTextField.quorum")
        files:Add(main)
        results:Add(0, "1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ComplexExpression
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ComplexExpression.quorum")
        files:Add(main)
        results:Add(0, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action DivDoubleDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "DivDoubleDouble.quorum")
        files:Add(main)
        results:Add(0, "2.0")
        results:Add(1, "2.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action DivDoubleInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "DivDoubleInt.quorum")
        files:Add(main)
        results:Add(0, "2.0")
        results:Add(1, "2.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action DivIntDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "DivIntDouble.quorum")
        files:Add(main)
        results:Add(0, "2.0")
        results:Add(1, "2.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action DivIntInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "DivIntInt.quorum")
        files:Add(main)
        results:Add(0, "2")
        results:Add(1, "2")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action EqualBooleanBoolean
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "EqualBooleanBoolean.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action EqualCustomCustom
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "EqualCustomCustom.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action EqualDoubleDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "EqualDoubleDouble.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action EqualDoubleInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "EqualDoubleInt.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action EqualIntDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "EqualIntDouble.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action EqualIntInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "EqualIntInt.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action EqualTextText
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "EqualTextText.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Expression
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Expression.quorum")
        files:Add(main)
        results:Add(0, "15")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetMaxNumberValue 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetMaxNumberValue.quorum")
        files:Add(main)
        results:Add(0, "1.7976931348623157E308")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GTDoubleDouble 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GTDoubleDouble.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GTDoubleInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GTDoubleInt.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GTEDoubleDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GTEDoubleDouble.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GTEDoubleInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GTEDoubleInt.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GTEIntDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GTEIntDouble.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GTEIntInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GTEIntInt.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GTETextText
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GTETextText.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GTIntDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GTIntDouble.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end
    
    action GTIntInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GTIntInt.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end
    
    action GTTextText
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GTTextText.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "false")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end
    
    action GetCharacterParameterText
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetCharacterParameterText.quorum")
        files:Add(main)
        results:Add(0, "false")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetMaxParameterInteger
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetMaxParameterInteger.quorum")
        files:Add(main)
        results:Add(0, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end
    
    action GetTextParameterBoolean
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetTextParameterBoolean.quorum")
        files:Add(main)
        results:Add(0, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action HelloWorld
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "HelloWorld.quorum")
        files:Add(main)
        results:Add(0, "Hello, World!")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action HelloWorldNoClassNoActions
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "HelloWorldNoClassNoActions.quorum")
        files:Add(main)
        results:Add(0, "Hello World!")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action HelloWorldNoClass
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "HelloWorldNoClass.quorum")
        files:Add(main)
        results:Add(0, "Hello World!")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IsA
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IsA.quorum")
        files:Add(main)
        results:Add(0, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end
    
    action IsInfiniteNumberParameter
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IsInfiniteNumberParameter.quorum")
        files:Add(main)
        results:Add(0, "false")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action LTDoubleDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "LTDoubleDouble.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action LTDoubleInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "LTDoubleInt.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action LTEDoubleDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "LTEDoubleDouble.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action LTEDoubleInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "LTEDoubleInt.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action LTEIntDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "LTEIntDouble.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action LTEIntInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "LTEIntInt.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action LTETextText
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "LTETextText.quorum")
        files:Add(main)
        results:Add(0, "true")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action LTIntDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "LTIntDouble.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action LTIntInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "LTIntInt.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action LTIntInt2
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "LTIntInt2.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action LTTextText
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "LTTextText.quorum")
        files:Add(main)
        results:Add(0, "true")
        results:Add(1, "false")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action LocalVarDecl
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "LocalVarDecl.quorum")
        files:Add(main)
        results:Add(0, "1000")
        results:Add(1, "3.0")
        results:Add(2, "c")
        results:Add(3, "false")
        results:Add(4, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action MinusInteger
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "MinusInteger.quorum")
        files:Add(main)
        results:Add(0, "-1")
        results:Add(1, "-15")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action MinusNumber
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "MinusNumber.quorum")
        files:Add(main)
        results:Add(0, "-1.0")
        results:Add(1, "-15.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ModDoubleDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ModDoubleDouble.quorum")
        files:Add(main)
        results:Add(0, "1.0")
        results:Add(1, "1.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ModDoubleInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ModDoubleInt.quorum")
        files:Add(main)
        results:Add(0, "1.0")
        results:Add(1, "1.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ModIntDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ModIntDouble.quorum")
        files:Add(main)
        results:Add(0, "1.0")
        results:Add(1, "1.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ModIntInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ModIntInt.quorum")
        files:Add(main)
        results:Add(0, "1")
        results:Add(1, "1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action MultDoubleDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "MultDoubleDouble.quorum")
        files:Add(main)
        results:Add(0, "4.0")
        results:Add(1, "4.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action MultDoubleInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "MultDoubleInt.quorum")
        files:Add(main)
        results:Add(0, "4.0")
        results:Add(1, "4.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action MultIntDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "MultIntDouble.quorum")
        files:Add(main)
        results:Add(0, "4.0")
        results:Add(1, "4.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action MultIntInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "MultIntInt.quorum")
        files:Add(main)
        results:Add(0, "4")
        results:Add(1, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action NotBoolean
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "NotBoolean.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end
    
    action NotEqualBooleanBoolean
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "NotEqualBooleanBoolean.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action NotEqualCustomCustom
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "NotEqualCustomCustom.quorum")
        files:Add(main)
        results:Add(0, "true")
        results:Add(1, "false")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action NotEqualDoubleDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "NotEqualDoubleDouble.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action NotEqualDoubleInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "NotEqualDoubleInt.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action NotEqualIntDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "NotEqualIntDouble.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action NotEqualIntInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "NotEqualIntInt.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action NotEqualTextText
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "NotEqualTextText.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action OrAndBooleanBoolean
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "OrAndBooleanBoolean.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        results:Add(2, "true")
        results:Add(3, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action OrBooleanBoolean
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "OrBooleanBoolean.quorum")
        files:Add(main)
        results:Add(0, "true")
        results:Add(1, "true")
        results:Add(2, "true")
        results:Add(3, "false")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action OutputBoolean
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "OutputBoolean.quorum")
        files:Add(main)
        results:Add(0, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end
   
    action OutputDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "OutputDouble.quorum")
        files:Add(main)
        results:Add(0, "7.5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action OutputInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "OutputInt.quorum")
        files:Add(main)
        results:Add(0, "5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end
   
    action OutputText
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "OutputText.quorum")
        files:Add(main)
        results:Add(0, "Hello, World!")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action PrimitiveGetMaximumValueInteger
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "PrimitiveGetMaximumValueInteger.quorum")
        files:Add(main)
        i = 0
        repeat 10 times
            results:Add(i, "-1")
            i = i + 1
        end
        suite:Test(files, results)
        i = 0
        repeat 10 times
            results:Set(i, "-1")
            i = i + 1
        end
        suite:TestJavaScript(files, results)
    end

    action PrimitiveGetMinimumValueInteger
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "PrimitiveGetMinimumValueInteger.quorum")
        files:Add(main)
        i = 0
        repeat 10 times
            results:Add(i, "-1")
            i = i + 1
        end
        suite:Test(files, results)
        i = 0
        repeat 10 times
            results:Set(i, "-1")
            i = i + 1
        end
        suite:TestJavaScript(files, results)
    end

    action PrimitiveGetMaximumValueDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "PrimitiveGetMaximumValueDouble.quorum")
        files:Add(main)
        i = 0
        repeat 10 times
            results:Add(i, "-1.0")
            i = i + 1
        end
        suite:Test(files, results)
        i = 0
        repeat 10 times
            results:Set(i, "-1.0")
            i = i + 1
        end
        suite:TestJavaScript(files, results)
    end

    action PrimitiveGetMinimumValueDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "PrimitiveGetMinimumValueDouble.quorum")
        files:Add(main)
        i = 0
        repeat 10 times
            results:Add(i, "-1.0")
            i = i + 1
        end
        suite:Test(files, results)
        i = 0
        repeat 10 times
            results:Set(i, "-1.0")
            i = i + 1
        end
        suite:TestJavaScript(files, results)
    end

    action SubDoubleDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "SubDoubleDouble.quorum")
        files:Add(main)
        results:Add(0, "0.0")
        results:Add(1, "0.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action SubDoubleInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "SubDoubleInt.quorum")
        files:Add(main)
        results:Add(0, "0.0")
        results:Add(1, "0.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action SubIntDouble
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "SubIntDouble.quorum")
        files:Add(main)
        results:Add(0, "0.0")
        results:Add(1, "0.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action SubIntInt
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "SubIntInt.quorum")
        files:Add(main)
        results:Add(0, "0")
        results:Add(1, "0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

//FAIL TESTS
    action BadText
        Array<File> files
        File main
        main:SetPath(path + "BadText.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end
    
    action BadActionName
        Array<File> files
        File main
        main:SetPath(path + "BadActionName.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action BadClassName
        Array<File> files
        File main
        main:SetPath(path + "BadClassName.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action BadVariableName
        Array<File> files
        File main
        main:SetPath(path + "BadVariableName.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action BadErrorMessage
        Array<File> files
        File main
        main:SetPath(path + "BadErrorMessage.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action BlueprintMain
        Array<File> files
        File main
        main:SetPath(path + "BlueprintMain.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action ChangeConstant
        Array<File> files
        File main
        main:SetPath(path + "ChangeConstant.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action DuplicateVariableDefinition
        Array<File> files
        File main
        main:SetPath(path + "DuplicateVariableDefinition.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action ChangeConstantField
        Array<File> files
        File main
        main:SetPath(path + "ChangeConstantField.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action DuplicateClassTest
        Array<File> files
        File main
        main:SetPath(path + "ClassMain1.quorum")
        File main2
        main2:SetPath(path + "ClassMain2.quorum")
        files:Add(main)
        files:Add(main2)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action FatInteger
        Array<File> files
        File main
        main:SetPath(path + "FatInteger.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action FakeAction 
        Array<File> files
        File main
        main:SetPath(path + "FatInteger.quorum")
        File file2
        file2:SetPath(path + "APublicValue.quorum")

        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action InvalidExpression
        Array<File> files
        File main
        main:SetPath(path + "InvalidExpression.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action InvalidFieldName
        Array<File> files
        File main
        main:SetPath(path + "InvalidFieldName.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action InvalidFieldName2
        Array<File> files
        File main
        main:SetPath(path + "InvalidFieldName2.quorum")

        File class2
        class2:SetPath(path + "A.quorum")

        files:Add(main)
        files:Add(class2)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action InvalidVariableName
        Array<File> files
        File main
        main:SetPath(path + "InvalidVariableName.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action MainNotCapitalized
        Array<File> files
        File main
        main:SetPath(path + "MainNotCapitalized.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action MissingActionParen
        Array<File> files
        File main
        main:SetPath(path + "MissingActionParen.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action MissingVariable
        Array<File> files
        File main
        main:SetPath(path + "MissingVariable.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action NotIsObject
        Array<File> files
        File main
        main:SetPath(path + "NotIsObject.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action NoVariable
        Array<File> files
        File main
        main:SetPath(path + "NoVariable.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action NoVariable2
        Array<File> files
        File main
        main:SetPath(path + "NoVariable2.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action SetInitialize
        Array<File> files
        File main
        main:SetPath(path + "SetInitialize.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action VariableNamedAsKeyword
        Array<File> files
        File main
        main:SetPath(path + "VariableNamedAsKeyword.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action WeirdText
        Array<File> files
        File main
        main:SetPath(path + "WeirdText.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end
end