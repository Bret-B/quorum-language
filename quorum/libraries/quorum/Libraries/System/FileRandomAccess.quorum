package Libraries.System
use Libraries.System.Blueprints.FileRandomAccessBlueprint
use Libraries.System.File
use Libraries.Containers.Blueprints.Indexed
use Libraries.Language.Errors.EndOfFileError
use Libraries.Containers.Array

/*
Ths class represents a "random access" file reader/writer. It is the standard
file random access reader/writer used in Quorum. By "random access," we mean
that it is possible to read (or write) a byte of data at the beginning of the file,
and then move to a different arbitrary location, such as the end of the file, and
do the same. This is most commonly used for reading/writing binary files. Unlike
the reader and writer classes in Quorum, (see FileReader and FileWriter, respectively)
FileRandomAccess permits both reading and writing to a file simultaneously.
*/
class FileRandomAccess is a FileRandomAccessBlueprint
    /*
     * The file we have open. Upon creation, this is "undefined" and won't
     * be set until the user calls one of the "open" methods.
     */
    private File file = undefined

    /*
     * Open the file on the native side.
     */
    private system action OpenForRandomAccessNative(text path)

    // TODO: Document
    action OpenForRandomAccess(File file)
        OpenForRandomAccessNative(file:GetPath())
    end

    // TODO: Document
    system action Close()

    // TODO: Document
    system action GetPosition() returns number

    // TODO: Document
    private system action SetPositionNative(number position)

    // TODO: Document
    action SetPosition(number position)
        SetPositionNative(position)
    end

    // TOO: Document
    system action IsAtEndOfFile() returns boolean

    // TODO: Document
    action GoToBeginning()
        SetPosition(0)
    end

    // TODO: Document
    private system action ReadNative() returns text

    // TODO: Document
    private system action ReadNative(integer numberOfBytes) returns text

    // TODO: Document
    private system action ReadLineNative() returns text

    // TODO: Document
    action Read() returns text
        return ReadNative()
    end

    // TODO: Document
    action Read(integer numberOfBytes) returns text
        return ReadNative(numberOfBytes) // TODO, error check
    end

    // TODO: Document
    action ReadLine() returns text
        return ReadLineNative()
    end

    // TODO: Document
    action ReadLines() returns Indexed<text>
        if me:IsAtEndOfFile()
            EndOfFileError e
            alert(e)
        end

        boolean eof = false
        Array<text> lines
        
        repeat until eof
            check
                text line = me:ReadLine()
                lines:Add(line)
            detect e of type EndOfFileError
                // End of file has been reached. Break loop.
                eof = true
            end
        end

        return lines
    end

    // TODO: Document
    private system action WriteNative(text textToWrite)

    // TODO: Document
    private system action WriteLineNative(text textToWrite)

    // TODO: Document
    action Write(text textToWrite)
        WriteNative(textToWrite)
    end

    // TODO: Document
    action WriteLine(text textToWrite)
        WriteLineNative(textToWrite)
    end
end