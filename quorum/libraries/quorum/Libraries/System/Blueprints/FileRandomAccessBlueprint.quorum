package Libraries.System.Blueprints
use Libraries.System.File
use Libraries.Containers.Blueprints.Indexed

/*
Inheriting from FileRandomAccessBlueprint provides a standard interface for
reading and writing files in a "random access" order. In this context,
"random access" implies that the reading and writing does not have to occur
in a sequential order. It is possible to, for example, write a character to
the beginning of a file, and then jump to the end and read the last character,
skipping all of the characters in-between. Random access is commonly used for
manipulating binary data.

See the FileRandomAccess class for the standard Quorum implementation of this blueprint.
*/
class FileRandomAccessBlueprint
    // TODO: Document
    blueprint action OpenAsNew(File file)

    // TODO: Document
    blueprint action OpenForAppend(File file)

    // TODO: Document
    blueprint action Close()

    // TODO: Document
    blueprint action GetPosition() returns number

    // TODO: Document
    blueprint action SetPosition(number position)

    // TODO: Document
    blueprint action GoToBeginning()

    // TODO: Document
    blueprint action Read() returns text

    // TODO: Document
    blueprint action Read(number numberOfBytes) returns text

    // TODO: Document
    blueprint action ReadLine() returns text

    // TODO: Document
    blueprint action ReadLines() returns Indexed<text>

    // TODO: Document
    blueprint action Write(text textToWrite)

    // TODO: Document
    blueprint action WriteLine(text textToWrite)

    // TODO: Document
    blueprint action PushToDisk()
end