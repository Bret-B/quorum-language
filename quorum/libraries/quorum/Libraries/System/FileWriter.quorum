package Libraries.System
use Libraries.System.Blueprints.FileWriterBlueprint
use Libraries.System.File
use Libraries.Containers.Blueprints.Indexed

/*
This class represents a sequential file writer. It is the standard file writer
used in Quorum. By "sequential," we mean that it is possible to only move
forward in the file. Once data has been written to a position, it is impossible
to go backwards in the file and modify it. This is most commonly used for
writing plain text files.

TODO: Example?
*/
class FileWriter is a FileWriterBlueprint
    /*
     * The file we have open. Upon creation, this is "undefined" and won't
     * be set until the user calls one of the "open" methods.
     */
    private File file = undefined

    /*
     * The native side for opening a file. Takes a path only, not a File
     * object.
     */
    private system action OpenForWriteNative(text path)

    /*
     * The native side for opening a file (in append mode). Takes a path only, not a File
     * object.
     */

    private system action OpenForWriteAppendNative(text path)

    /*
     * Write data to the file on the native side.
     */
    private system action WriteNative(text textToWrite)

    /*
     * Write a line to the file on the native side.
     */
    private system action WriteLineNative(text textToWrite)

    // TODO: Document
    action OpenForWrite(File file)
        OpenForWriteNative(file:GetPath())
    end

    // TODO: Document
    action OpenForWriteAppend(File file)
        OpenForWriteAppendNative(file:GetPath())
    end

    // TODO: Document
    system action Close()

    // TODO: Document
    action Write(text textToWrite)
        WriteNative(textToWrite)
    end

    // TODO: Document
    action WriteLine(text textToWrite)
        WriteLineNative(textToWrite)
    end

    // TODO: Document
    system action PushToDisk()
end