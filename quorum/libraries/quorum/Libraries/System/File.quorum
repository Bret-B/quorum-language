/**
 * Under maintenance - watch for "TODO" phrases everywhere.
 */

package Libraries.System
use Libraries.Containers.Array
use Libraries.Containers.Blueprints.Iterator
use Libraries.System.Blueprints.FileReaderBlueprint
use Libraries.System.Blueprints.FileWriterBlueprint
use Libraries.System.Blueprints.FileRandomAccessBlueprint
use Libraries.System.FileReader
use Libraries.System.FileWriter
use Libraries.System.FileRandomAccess
use Libraries.System.DateTime

/*
The File class is used to access and gather information about files on disk.
This class can represent either a file or a directory, and provides methods for
both manipulation and gathering of file data (such as file name, last time
modified, etc). This class is not used for modifying the contents of files,
but actions are provided that allow this functionality through other classes,
such as OpenForRead().

Upon creation of a File instance, the File object refers to the program's working
directory. The "working directory" of a program is the directory in which a program
looks for files. The path that the File instance refers to can be changed using
the SetPath(path) action.

Attribute: Author Jeff Wilson
Attribute: Example
use Libraries.System.File

class Main
    action main
        == TODO ==
        put an example here.
    end
*/
class File
    /*
     * The file (or directory) path this object represents. By default, this is
     * the application's working directory.
     */
    private text path

    /*
     * Set our path to the application's working directory.
     */
    on create
        path = GetWorkingDirectoryNative
    end

    /*
     * This action gets the "last modified" date/time from the system in UNIX
     * timestamp format.
     */
    private system action GetLastModifiedNative returns number

    /*
     * This action gets the directory listing from the system delimited by
     * a pipe symbol. 
     */
    private system action GetDirectoryListingNative returns text

    /*
     * Get the full-path name of the parent directory as a string.
     */
    private system action GetParentDirectoryNative returns text

    /*
     * This action gets the system's newline character. This varies from
     * platform to platform and is difficult to detect manually. On some
     * systems, it may simply be "\n" (UNIX), and on others, it may be
     * "\r\n" (Windows).
     */
    private system action GetSystemNewline returns text

    /*
     * Set the path on the native side.
     */
    private system action SetPathNative(text path)

    /*
     * Get the user's current working directory.
     */
    private system action GetWorkingDirectoryNative returns text

    // TODO: documentation
    action GetPath returns text
        return me:path
    end

    // TODO: documentation
    action SetPath(text path)
        me:path = path
        SetPathNative(me:path)
    end

    // TODO: documentation
    system action Exists returns boolean

    // TODO: documentation
    system action IsFile returns boolean

    // TODO: documentation
    action IsDirectory returns boolean

    // TODO: documentation
    system action IsHidden returns boolean

    // TODO: documentation
    system action GetFileName returns text

    // TODO: documentation
    system action GetFileExtension returns text

    // TODO: documentation
    action GetParentDirectory returns File
        text parentPath = GetParentDirectoryNative
        File parentFile
        parentFile:SetPath(parentPath)
        return parentPath
    end

    // TODO: documentation
    system action GetFreeDiskSpace returns number

    // TODO: documentation
    system action GetTotalDiskSpace returns number

    // TODO: documentation
    system action GetFileSize returns number

    // TODO: documentation
    action GetDirectoryListing returns Indexed<text>
        Text listingString
        listingString:SetValue(GetDirectoryListingNative(path))
        return listingString:Split(GetSystemNewline)
    end

    // TODO: documentation
    action GetLastModifiedDate returns DateTime
        DateTime date
        number unixTimeStamp = GetLastModifiedNative
        date:SetEpochTime(unixTimeStamp)
        return date
    end

    // TODO: documentation
    system action Delete returns boolean

    // TODO: documentation
    system action CreateDirectory returns boolean

    // TODO: documentation
    system action Move(text newPath) returns boolean

    // TODO: documentation
    action OpenForRead returns FileReaderBlueprint
        FileReader reader
        reader:OpenForRead(me)
        return reader
    end

    // TODO: documentation
    action OpenForWrite returns FileWriterBlueprint
        FileWriter writer
        writer:OpenForWrite(me)
        return writer
    end

    // TODO: documentation
    action OpenForWriteAppend returns FileWriterBlueprint
        FileWriter writer
        writer:OpenForWriteAppend(me)
        return writer
    end

    // TODO: documentation
    action OpenForRandomAccess returns FileRandomAccessBlueprint
        FileRandomAccess randomAccess
        randomAccess:OpenForRandomAccess(me)
        return randomAccess
    end

    // TODO: documentation
    action OpenForRandomAccessAppend returns FileRandomAccessBlueprint
        FileRandomAccess randomAccess
        randomAccess:OpenForRandomAccessAppend(me)
    end
end