/**
 * Under maintenance - watch for "TODO" phrases everywhere.
 */

package Libraries.System
use Libraries.Language.Errors.InputOutputError
use Libraries.Language.Errors.EndOfFileError
use Libraries.Containers.Array
use Libraries.Containers.Blueprints.Iterator
use Libraries.System.DateTime

/*
The File class is used to access and gather information about files on disk.
This class can represent either a file or a directory, and provides methods for
both manipulation and gathering of file data (such as file name, last time
modified, etc). This class is not used for modifying the contents of files,
but actions are provided that allow this functionality through other classes,
such as OpenForRead().

Upon creation of a File instance, the File object refers to the program's working
directory. The "working directory" of a program is the directory in which a program
looks for files. The path that the File instance refers to can be changed using
the SetPath(path) action.

Attribute: Author Jeff Wilson
Attribute: Example
use Libraries.System.File

class Main
    action main
        == TODO ==
        put an example here.
    end
*/
class File
    /*
     * The file (or directory) path this object represents. By default, this is
     * the application's working directory.
     */
    private text path

    /*
     * Set our path to the application's working directory.
     */
    on create
        // TODO:
        // Set 'path' to the current working directory.
        path = "/the/current/working/directory"
    end

    /*
     * This action gets the "last modified" date/time from the system in UNIX
     * timestamp format.
     */
    private system action GetLastModifiedNative(text path) returns number

    /*
     * This action gets the directory listing from the system delimited by
     * a pipe symbol. 
     */
    private system action GetDirectoryListingNative(text path) returns text

    /*
     * This action gets the system's newline character. This varies from
     * platform to platform and is difficult to detect manually. On some
     * systems, it may simply be "\n" (UNIX), and on others, it may be
     * "\r\n" (Windows).
     */

    private system action GetSystemNewline() returns text
    // TODO: documentation
    action GetPath() returns text
        return me:path
    end

    // TODO: documentation, verify path ??
    action SetPath(text path)
        me:path = path
    end

    // TODO: documentation, implement
    system action Exists() returns boolean

    // TODO: documentation, implement
    system action IsFile() returns boolean

    // TODO: documentation, implement
    action IsDirectory() returns boolean

    // TODO: documentation, implement
    system action IsHidden() returns boolean

    // TODO: documentation, implement
    system action GetFileName() returns text

    // TODO: documentation, implement
    system action GetFileExtension() returns text

    // TODO: documentation, implement
    system action GetParentDirectory() returns File

    // TODO: documentation, implement
    system action GetFreeDiskSpace() returns number

    // TODO: documentation, implement
    system action GetTotalDiskSpace() returns number

    // TODO: documentation, implement
    system action GetFileSize() returns number

    // TODO: documentation, implement
    system action GetDirectoryListing() returns Indexed<text>

    // TODO: documentation, implement
    system action GetLastModifiedDate() returns DateTime

    // TODO: documentation, implement
    system action Delete()

    // TODO: documentation, implement
    system action CreateDirectory()

    // TODO: documentation, implement
    system action Move(text newPath)

    // TODO: documentation, implement
    action OpenForRead() returns FileReaderBlueprint
        return undefined
    end

    // TODO: documentation, implement
    action OpenForWrite() returns FileWriterBlueprint
        return undefined
    end

    // TODO: documentation, implement
    action OpenForWriteAppend() returns FileWriterBlueprint
        return undefined
    end

    // TODO: documentation, implement
    action OpenForRandomAccess() returns FileRandomAccessBlueprint
        return undefined
    end

    // TODO: documentation, implement
    action OpenForRandomAccessAppend() returns FileRandomAccessBlueprint
        return undefined
    end
end