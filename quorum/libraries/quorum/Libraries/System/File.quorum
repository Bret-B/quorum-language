/**
 * Under maintenance - watch for "TODO" phrases everywhere.
 */

package Libraries.System
use Libraries.Containers.Array
use Libraries.Containers.Blueprints.Indexed
use Libraries.System.Blueprints.FileReaderBlueprint
use Libraries.System.Blueprints.FileWriterBlueprint
use Libraries.System.Blueprints.FileRandomAccessBlueprint
use Libraries.System.Path
use Libraries.System.FileReader
use Libraries.System.FileWriter
use Libraries.System.FileRandomAccess
use Libraries.System.DateTime

/*
The File class is used to access and gather information about files on disk.
This class can represent either a file or a directory, and provides methods for
both manipulation and gathering of file data (such as file name, last time
modified, etc). This class is not used for modifying the contents of files,
but actions are provided that allow this functionality through other classes,
such as OpenForRead(). For more information on modifying the contents of files,
see the FileReader, FileWriter and FileRandomAccess classes.

Upon creation of a File instance, the File object refers to the program's working
directory. The "working directory" of a program is the directory in which a program
looks for files. The path that the File instance refers to can be changed using
the SetAbsolutePath(), SetRelativePath() and SetPath() actions.

The SetRelativePath() action should be used when we wish to refer to a file
in, or close to, the same directory as our application. For example, if the
file I wish to open is in the current directory and named test.txt,
I might call SetRelativePath("test.txt").

The SetAbsolutePath() action should be used when we wish to refer to a file
that is in an exact location. For example, if I were on Windows, and I wanted
to refer to the "Program Files" folder, I might call SetAbsolutePath("C:\Program Files").
On Linux systems, if I wanted to refer to the home directory of all users, I might
call SetAbsolutePath("/home").

Attribute: Author Jeff Wilson
Attribute: Example
use Libraries.System.File

class Main
    action main
        // Read the contents of a file and print them to the screen.
        File inputFile
        inputFile:SetRelativePath("hello.txt")
        print inputFile:Read() // read and print all contents to screen.
        

        // Write text to a file, erasing all old contents.
        File outputFile
        outputFile:SetRelativePath("new_file.txt")
        outputFile:Write("hello there. this is a new file.")
        
        // Print the working directory of our program. This is, by default,
        // the folder in which our program is stored, i.e.
        // C:\Users\jeff\My Documents\NetBeansProjects\TestProject
        File newFile
        print newFile:GetPath() // the default path is the working directory.
        print newFile:GetWorkingDirectory() // this action always returns the working directory.

        // Find out if this file is a directory or not.
        File mysteryFile
        mysteryFile:SetRelativePath("images") // assuming a file or directory exists in our working directory called 'images'.
        print "The mystery file object is a file: " + mysteryFile:IsFile()
        print "The mystery file object is a directory: " + mysteryFile:IsDirectory()
    end
*/
class File
    /*
     * Keep track of each reader/writer/random accessor so that we know which
     * to handle in Close().
     */
    private FileReader reader = undefined
    private FileWriter writer = undefined
    private FileRandomAccess randomAccess = undefined

    /*
     * This action gets the "last modified" date/time from the system in UNIX
     * timestamp format.
     */
    private system action GetLastModifiedNative returns number

    /*
     * This action gets the directory listing from the system delimited by
     * a pipe symbol. 
     */
    private system action GetDirectoryListingNative returns text

    /*
     * Get the full-path name of the parent directory as a string.
     */
    private system action GetParentDirectoryNative returns text

    /*
     *This action gets the system's newline character. This varies from
     * platform to platform and is difficult to detect manually. On some
     * systems, it may simply be "\n" (UNIX), and on others, it may be
     * "\r\n" (Windows).
     */
    private system action GetSystemNewline returns text

    /*
     * Get the path on the native side.
     */
    private system action GetPathNative returns text

    /*
     * Set the path on the native side.
     */
    private system action SetPathNative(text path)

    /*
     * Get the user's current working directory.
     */
    private system action GetWorkingDirectoryNative returns text

    /*
        This action returns the "working directory" of our program. The
        "working directory" is the directory our program looks in by default
        when looking for files that aren't specified by an absolute path. For
        example, if we wish to open the path "dictionary.txt," this would
        refer to a file named "dictionary.txt" in our working directory. By
        default, the working directory is the directory where the program is
        stored.
     
        Attribute: Returns The working directory of our program.
     
        Attribute: Example
        use Libraries.System.File

        class Main
            action Main
                File myFileObject
                text dir = myFileObject:GetWorkingDirectory()
                print "The working directory of this program is " + dir
            end
        end
     */
    action GetWorkingDirectory() returns text
        return GetWorkingDirectoryNative()
    end

    /*
        Get the path associated with this File object. If a File class
        is instantiated and none of the actions SetPath, SetAbsolutePath
        or SetRelativePath are called, then this will return the working
        directory of the application (see GetWorkingDirectory() for a discussion
        on working directories). Otherwise, it will return the relative or
        absolute path this file represents.

        Attribute: Returns the path this file represents, or the working directory.

        Attribute: Example
        use Libraries.System.File

        class Main
            action Main
                // Set an absolute path, and get it back.
                File absoluteFile
                absoluteFile:SetAbsolutePath("/Users/jeff/Music")
                print absoluteFile:GetPath() // prints "/Users/jeff/Music"

                // Set a relative path, and get it back.
                File relativeFile
                relativeFile:SetRelativePath("./hello.txt")
                print relativeFile:GetPath() // prints "./hello.txt"
        end
     */
    action GetPath returns text
        return GetPathNative()
    end

    /*
        Set the path this File represents from a given Path object. For more
        information on the Path object, see the Path documentation. In most
        cases, it is preferable to use the SetAbsolutePath() or SetRelativePath()
        actions.

        Attribute: Parameter path The path object to get the relative or absolute path from.

        Attribute: Example
        use Libraries.System.File
        use Libraries.System.Path

            class Main
                action Main
                    // Construct a Path object and associate a File object with it.
                    Path p
                    p:SetAbsolutePath("C:\Program Files")
                    File programFilesDir
                    programFilesDir:SetPath(p)
                    print "Is it a directory? " + programFilesDir:IsDirectory() // on Windows systems, prints "Is it a directory? true"
                end
            end
     */
    action SetPath(Path path)
        SetPathNative(path:GetPath())
    end

    /*
        Set the absolute path this file represents. A path is a string that represents
        where a file exists on the hard drive. An absolute path tells the system
        exactly where a file lives, relative to no other path. For example, the
        path
        
        C:\Windows\System32

        is an absolute path, as is,

        /Users/jeff

        because the system will begin looking at the top of the hard disk in
        both cases. If you wish to open a file in the current directory, or
        in a path relative to the current directory, see SetRelativePath().

        Attribute: Parameter path The absolute path to use. Must be absolute; if it is not,
        an InvalidPathError will be raised.

        Attribute: Example
        use Libraries.System.File

        class Main
            action Main
                // Construct a File object to refer to the Windows directory.
                File winDir
                winDir:SetAbsolutePath("C:\Windows")
                print "Is C:\Windows a directory? " + winDir:IsDirectory() // On Windows, prints "Is C:\Windows a directory? true"

                // Construct a File object to refer to the root of the hard disk on Unix or Mac OS X.
                File rootDir
                rootDir:SetAbsolutePath("/")
                print "Is '/' a directory? " + rootDir:IsDirectory() // on Unix and Mac OS X, prints "Is '/' a directory? true"
            end
        end
     */
    action SetAbsolutePath(text path)
        // Use the Path class to fix up the path and let us know if it's wrong.
        Path p
        p:SetAbsolutePath(path)

        SetPathNative(p:GetPath())
    end
    
    /*
        Set the relative path this file represents. A path is a string that represents
        where a file exists on teh hard drive. A relative path tells the system where
        a file lives in relation to another location. Most commonly, this is in relation
        to the working directory, which in most cases, is the directory where our program
        lives. For example, the path

        hello.txt

        is a relative path, as is

        images/separator.png

        When using these relative paths, the operating system will look in the working
        directory for these files. For example, if our working directory is
        "C:\Users\jeff\My Documents", then Quorum will look for hello.txt in
        'My documents'. Similarly, it will look for a file called 'separator.png' under an 'images' directory in
        'My Documents'.

        Attribute: Parameter path The relative path to use. Must be relative; if it is not,
        an InvalidPathError will be raised.

        Attribute: Example
        use Libraries.System.File

        class Main
            action Main
                // Construct a File object to refer to a file in our working directory
                // called 'dictionary.txt'.
                File dictFile
                dictFile:SetRelativePath("dictionary.txt")
                print "Does dictionary.txt exist in our directory? " + dictFile:Exists()

                // Construct a File object to refer to a file in an 'images' folder under our
                working directory called 'foo.png'.
                File fooFile
                fooFile:SetRelativePath("images/foo.png")
                print "Does images/foo.png exist in our directory? " + fooFile:Exists()
            end
        end
     */
    action SetRelativePath(text path)
        // Use the Path class to fix up the path and let us know if it's wrong.
        Path p
        p:SetRelativePath(path)

        SetPathNative(p:GetPath())
    end

    /*
        Test whether or not the path this File object refers to exists, that is,
        whether or not the path refers to a valid file or directory.

        Attribute: Returns True if the file or directory exists; false otherwise.

        Attribute: Example
        use Libraries.System.File

        class Main
            action Main
                // Does a folder called "Windows" exist under C:\? On Windows systems, it will;
                // on other systems, it will not.
                File winDir
                winDir:SetAbsolutePath("C:\Windows")
                print "Does 'C:\Windows' exist/ " + winDir:Exists() // on Windows systems, will print "Does 'C:\Windows' exist? true"
            end
        end
     */
    system action Exists returns boolean

    // TODO: documentation
    system action IsFile returns boolean

    // TODO: documentation
    system action IsDirectory returns boolean

    // TODO: documentation
    system action IsHidden returns boolean

    // TODO: documentation
    system action GetFileName returns text

    // TODO: documentation
    system action GetFileExtension returns text

    // TODO: documentation
    action GetParentDirectory returns File
        text parentPath = GetParentDirectoryNative() // will be an absolute path.
        
        // We can't create a parent object if there is no parent... (e.g., path is "C:\" on windows or "/" on *nix)
        if parentPath = ""
            return undefined
        end

        File parentFile
        parentFile:SetAbsolutePath(parentPath)
        return parentFile
    end

    // TODO: documentation
    system action GetFreeDiskSpace returns number

    // TODO: documentation
    system action GetTotalDiskSpace returns number

    // TODO: documentation
    system action GetFileSize returns number

    // TODO: documentation
    action GetDirectoryListing returns Indexed<text>
        Text listingString
        listingString:SetValue(GetDirectoryListingNative())
        return listingString:Split(GetSystemNewline())
    end

    // TODO: documentation
    action GetLastModifiedDate returns DateTime
        DateTime date
        number unixTimeStamp = GetLastModifiedNative()
        date:SetEpochTime(unixTimeStamp)
        return date
    end

    // TODO: documentation
    system action Delete returns boolean

    // TODO: documentation
    system action CreateDirectory returns boolean

    // TODO: documentation
    system action Move(text newPath) returns boolean

    // TODO: documentation
    action OpenForRead returns FileReaderBlueprint
        FileReader r
        reader = r
        reader:OpenForRead(me)
        return reader
    end

    // TODO: documentation
    action OpenForWrite returns FileWriterBlueprint
        FileWriter w
        writer = w
        writer:OpenForWrite(me)
        return writer
    end

    // TODO: documentation
    action OpenForWriteAppend returns FileWriterBlueprint
        FileWriter w
        writer = w
        writer:OpenForWriteAppend(me)
        return writer
    end

    // TODO: documentation
    action OpenForRandomAccess returns FileRandomAccessBlueprint
        FileRandomAccess ra
        randomAccess = ra
        randomAccess:OpenForRandomAccess(me)
        return randomAccess
    end

    // TODO: documentation
    action Close
        // Close any open readers/writers/accessors. If the user mistakenly
        // opened up several, we can close them.
        if reader not= undefined
            reader:Close()
        end

        if writer not= undefined
            writer:Close()
        end

        if randomAccess not= undefined
            randomAccess:Close()
        end
    end

    // TODO: Document
    action Read returns text
        FileReader r
        r:OpenForRead(me)
        text result = r:Read()
        r:Close()
        return result
    end

    // TODO: Document
    action Write(text textToWrite)
        FileWriter w
        w:OpenForWrite(me)
        w:Write(textToWrite)
        w:Close()
    end
end