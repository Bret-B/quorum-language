package Libraries.System
use Libraries.Containers.Array
use Libraries.Containers.Blueprints.Indexed
use Libraries.Containers.Blueprints.Iterator
use Libraries.System.Blueprints.FileReaderBlueprint
use Libraries.System.Blueprints.FileWriterBlueprint
use Libraries.System.Blueprints.FileRandomAccessBlueprint
use Libraries.System.Path
use Libraries.System.FileReader
use Libraries.System.FileWriter
use Libraries.System.FileRandomAccess
use Libraries.System.DateTime

/*
The File class is used to access and gather information about files on disk.
This class can represent either a file or a directory, and provides methods for
both manipulation and gathering of file data (such as file name, last time
modified, etc). This class is not used for modifying the contents of files,
but actions are provided that allow this functionality through other classes,
such as OpenForRead(). For more information on modifying the contents of files,
see the FileReader, FileWriter and FileRandomAccess classes.

Upon creation of a File instance, the File object refers to the program's working
directory. The "working directory" of a program is the directory in which a program
looks for files. The path that the File instance refers to can be changed using
the SetAbsolutePath(), SetRelativePath() and SetPath() actions.

The SetRelativePath() action should be used when we wish to refer to a file
in, or close to, the same directory as our application. For example, if the
file I wish to open is in the current directory and named test.txt,
I might call SetRelativePath("test.txt").

The SetAbsolutePath() action should be used when we wish to refer to a file
that is in an exact location. For example, if I were on Windows, and I wanted
to refer to the "Program Files" folder, I might call SetAbsolutePath("C:\Program Files").
On Linux systems, if I wanted to refer to the home directory of all users, I might
call SetAbsolutePath("/home").

Attribute: Author Jeff Wilson
Attribute: Example
use Libraries.System.File

class Main
    action main
        // Read the contents of a file and print them to the screen.
        File inputFile
        inputFile:SetRelativePath("hello.txt")
        print inputFile:Read() // read and print all contents to screen.
        

        // Write text to a file, erasing all old contents.
        File outputFile
        outputFile:SetRelativePath("new_file.txt")
        outputFile:Write("hello there. this is a new file.")
        
        // Print the working directory of our program. This is, by default,
        // the folder in which our program is stored, i.e.
        // C:\Users\jeff\My Documents\NetBeansProjects\TestProject
        File newFile
        print newFile:GetPath() // the default path is the working directory.
        print newFile:GetWorkingDirectory() // this action always returns the working directory.

        // Find out if this file is a directory or not.
        File mysteryFile
        mysteryFile:SetRelativePath("images") // assuming a file or directory exists in our working directory called 'images'.
        print "The mystery file object is a file: " + mysteryFile:IsFile()
        print "The mystery file object is a directory: " + mysteryFile:IsDirectory()
    end
*/
class File
    /*
     * Keep track of each reader/writer/random accessor so that we know which
     * to handle in Close().
     */
    private FileReader reader = undefined
    private FileWriter writer = undefined
    private FileRandomAccess randomAccess = undefined

    /*
     * This action gets the "last modified" date/time from the system in UNIX
     * timestamp format.
     */
    private system action GetLastModifiedNative returns number

    /*
     * This action gets the directory listing from the system delimited by
     * a pipe symbol. 
     */
    private system action GetDirectoryListingNative returns text

    /*
     * Get the full-path name of the parent directory as a string.
     */
    private system action GetParentDirectoryNative returns text

    /*
     *This action gets the system's newline character. This varies from
     * platform to platform and is difficult to detect manually. On some
     * systems, it may simply be "\n" (UNIX), and on others, it may be
     * "\r\n" (Windows).
     */
    private system action GetSystemNewline returns text

    /*
     * Get the path on the native side.
     */
    private system action GetPathNative returns text

    /*
     * Set the path on the native side.
     */
    private system action SetPathNative(text path)

    /*
     * Get the user's current working directory.
     */
    private system action GetWorkingDirectoryNative returns text

    /*
        This action returns the "working directory" of our program. The
        "working directory" is the directory our program looks in by default
        when looking for files that aren't specified by an absolute path. For
        example, if we wish to open the path "dictionary.txt," this would
        refer to a file named "dictionary.txt" in our working directory. By
        default, the working directory is the directory where the program is
        stored.
     
        Attribute: Returns The directory our application is working in.
     
        Attribute: Example
        use Libraries.System.File

        File myFileObject
        File dir = myFileObject:GetWorkingDirectory()
        print "The working directory of this program is " + dir:GetPath()
     */
    action GetWorkingDirectory() returns File
        text path = GetWorkingDirectoryNative()
        File f
        f:SetAbsolutePath(path)

        return f
    end

    /*
        Get the path associated with this File object. If a File class
        is instantiated and none of the actions SetPath, SetAbsolutePath
        or SetRelativePath are called, then this will return the working
        directory of the application (see GetWorkingDirectory() for a discussion
        on working directories). Otherwise, it will return the relative or
        absolute path this file represents.

        Attribute: Returns the path this file represents, or the working directory.

        Attribute: Example
        use Libraries.System.File

        // Set an absolute path, and get it back.
        File absoluteFile
        absoluteFile:SetAbsolutePath("/Users/jeff/Music")
        print absoluteFile:GetPath() // prints "/Users/jeff/Music"

        // Set a relative path, and get it back.
        File relativeFile
        relativeFile:SetRelativePath("./hello.txt")
        print relativeFile:GetPath() // prints "./hello.txt"
     */
    action GetPath returns text
        return GetPathNative()
    end

    /*
        Set the path this File represents from a given Path object. For more
        information on the Path object, see the Path documentation. In most
        cases, it is preferable to use the SetAbsolutePath() or SetRelativePath()
        actions.

        Attribute: Parameter path The path object to get the relative or absolute path from.

        Attribute: Example
        use Libraries.System.File
        use Libraries.System.Path

        // Construct a Path object and associate a File object with it.
        Path p
        p:SetAbsolutePath("C:\Program Files")
        File programFilesDir
        programFilesDir:SetPath(p)
        print "Is it a directory? " + programFilesDir:IsDirectory() // on Windows systems, prints "Is it a directory? true"
     */
    action SetPath(Path path)
        SetPathNative(path:GetPath())
    end

    /*
        Set the absolute path this file represents. A path is a string that represents
        where a file exists on the hard drive. An absolute path tells the system
        exactly where a file lives, relative to no other path. For example, the
        path
        
        C:\Windows\System32

        is an absolute path, as is,

        /Users/jeff

        because the system will begin looking at the top of the hard disk in
        both cases. If you wish to open a file in the current directory, or
        in a path relative to the current directory, see SetRelativePath().

        Attribute: Parameter path The absolute path to use. Must be absolute; if it is not,
        an InvalidPathError will be raised.

        Attribute: Example
        use Libraries.System.File

        // Construct a File object to refer to the Windows directory.
        File winDir
        winDir:SetAbsolutePath("C:\Windows")
        print "Is C:\Windows a directory? " + winDir:IsDirectory() // On Windows, prints "Is C:\Windows a directory? true"

        // Construct a File object to refer to the root of the hard disk on Unix or Mac OS X.
        File rootDir
        rootDir:SetAbsolutePath("/")
        print "Is '/' a directory? " + rootDir:IsDirectory() // on Unix and Mac OS X, prints "Is '/' a directory? true"
     */
    action SetAbsolutePath(text path)
        // Use the Path class to fix up the path and let us know if it's wrong.
        Path p
        p:SetAbsolutePath(path)

        SetPathNative(p:GetPath())
    end
    
    /*
        Set the relative path this file represents. A path is a string that represents
        where a file exists on teh hard drive. A relative path tells the system where
        a file lives in relation to another location. Most commonly, this is in relation
        to the working directory, which in most cases, is the directory where our program
        lives. For example, the path

        hello.txt

        is a relative path, as is

        images/separator.png

        However, paths such as the following, are not relative:

        C:\Windows

        or

        /images/separator.png

        In the case of the latter path, notice the prefixed '/' symbol.

        When using these relative paths, the operating system will look in the working
        directory for these files. For example, if our working directory is
        "C:\Users\jeff\My Documents", then Quorum will look for hello.txt in
        'My documents'. Similarly, it will look for a file called 'separator.png' under an 'images' directory in
        'My Documents'.

        Attribute: Parameter path The relative path to use. Must be relative; if it is not,
        an InvalidPathError will be raised.

        Attribute: Example
        use Libraries.System.File

        // Construct a File object to refer to a file in our working directory
        // called 'dictionary.txt'.
        File dictFile
        dictFile:SetRelativePath("dictionary.txt")
        print "Does dictionary.txt exist in our directory? " + dictFile:Exists()

        // Construct a File object to refer to a file in an 'images' folder under our
        working directory called 'foo.png'.
        File fooFile
        fooFile:SetRelativePath("images/foo.png")
        print "Does images/foo.png exist in our directory? " + fooFile:Exists()
     */
    action SetRelativePath(text path)
        // Use the Path class to fix up the path and let us know if it's wrong.
        Path p
        p:SetRelativePath(path)

        SetPathNative(p:GetPath())
    end

    /*
        Test whether or not the path this File object refers to exists, that is,
        whether or not the path refers to a valid file or directory.

        Attribute: Returns True if the file or directory exists; false otherwise.

        Attribute: Example
        use Libraries.System.File

        // Does a folder called "Windows" exist under C:\? On Windows systems, it will;
        // on other systems, it will not.
        File winDir
        winDir:SetAbsolutePath("C:\Windows")
        print "Does 'C:\Windows' exist/ " + winDir:Exists() // on Windows systems, will print "Does 'C:\Windows' exist? true"
     */
    system action Exists returns boolean

    /*
        Determine whether or not the path this File object refers to is a "file,"
        that is, an entity on the file system that is not a directory.

        Attribute: Returns True if the path of this File object is a file; False if it is a directory or the path is invalid. (see Exists()).

        Attribute: Example
        use Libraries.System.File

        // Is C:\Windows a file?
        File winDir
        winDir:SetAbsolutePath("C:\Windows")
        print "Is C:\Windows a file? " + winDir:IsFile() // Will print 'Is C:\Windows a file? false'

        // Is C:\Windows\System32\kernel32.dll a file?
        File kernel32
        kernel32:SetAbsolutePath("C:\Windows\System32\kernel32.dll")
        print "Is C:\Windows\System32\kernel32.dll a file? " + kernel32:IsFile() // On Windows systems, will print "Is C:\Windows\System32\kernel32.dll a file? true"
     */
    system action IsFile returns boolean

    /*
        Test whether or not the path this File object refers to is a "directory."
        A directory is a folder on the file system that contains other files or
        directories.

        Attribute: Returns True if the path of this File object is a directory; False if it is a directory or the path is invalid. (see Exists())

        Attribute: Example
        use Libraries.System.File

        // On most systems, the path './' refers to the current directory.
        // Is the current directory a directory?
        File currentDir
        currentDir:SetRelativePath("./")
        print "Are we in a directory? " + currentDir:IsDirectory() // On most systems, will print "Are we in a directory? true"

        // On Windows systems, is "C:\" a directory?
        File cDrive
        cDrive:SetAbsolutePath("C:\")
        print "Is C:\ a directory? " + cDrive:IsDirectory() // On Windows systems, will print "Is C:\ a directory? true"
     */
    system action IsDirectory returns boolean

    /*
        Test whether or not the path this File object refers to is a file with
        the "hidden" attribute set. "Hidden" files set an attribute, called
        "hidden," which hides them from the user by default. This attribute
        is not supported by all operating systems, so it is possible that
        this action will always return false on some systems.

        Attribute: Returns True if the path of this File object is a file with the hidden attribute; false otherwise.

        Attribute: Example
        use Libraries.System.File

        // On Windows systems, the "user32.dll" file is hidden.
        File user32
        user32:SetAbsolutePath("C:\Windows\user32.dll")
        print "Is user32.dll hidden? " + user32:IsHidden() // On Windows systems, will print "Is user32.dll hidden? true"
     */
    system action IsHidden returns boolean

    /*
        Obtain the last part of the path name for this File object. This will
        be the last file or directory in the path. For example, if we had a File
        object that represented the path

        C:\Users\jeff\My Documents

        this action would return "My Documents." Similarly, if we had a File object
        that represented the path

        C:\Users\jeff\My Documents\homework.doc

        this action would return "homework.doc". This action always returns the
        last thing in the path, so if our path is simply "C:\", this action will
        return "C:\". If our path is "/", this action will return an empty
        string ("").

        Attribute: Returns The last portion of the path name. This may be a file name, directory name, or drive letter.

        Attribute: Example
        use Libraries.System.File

        // Get the file name from this path.
        text path = "C:\Program Files\Sodbeans\bin\sodbeans.exe"
        File file
        file:SetAbsolutePath(path)
        print file:GetFileName() // will print "sodbeans.exe". (on any system)
     */
    system action GetFileName returns text

    /*
        Obtain the file extension of the path this File object represents.
        A file extension is any text after the last '.' character in a path;
        files and directories can have extensions. For example, the path

        C:\Users\jeff\hello.txt

        has the extension "txt". Similarly, the path below, although it
        represents a directory on Macintosh systems, has the extension "app".

        /Applications/Sodbeans.app

        If no '.' character exists in the path, there is no extension in the
        path, and an empty string is returned.

        Attribute: Returns The file extension or "" if no extension is present. The '.' character will not be present in the return value.

        Attribute: Example
        use Libraries.System.File

        // Get the extension of a music file.
        File musicFile
        musicFile:SetAbsolutePath("C:\Users\jeff\Music\Untitled.mp3")
        print musicFile:GetFileExtension() // prints "mp3" on all systems.

        // Get the extension of a directory.
        File appDir
        appDir:SetAbsolutePath("/Applications/TextEdit.app")
        print appDir:GetFileExtension() // prints "app" on all systems.
     */
    system action GetFileExtension returns text

    /*
        Get the parent directory of this particular File object. The parent
        directory is the directory immediately above the file or directory this File object
        points in to. For example, if our File object represents the path

        C:\Program Files\Sodbeans

        the parent directory is "C:\Program Files"

        If our File object represents a file, such as

        /Users/jeff/hello.txt

        the parent directory is /Users/jeff. In general, it is the path up to
        the last forward or backward slash. If there is no parent directory, as
        in the case of paths such as "C:\" or "/", undefined is returned.

        Attribute: Returns The parent directory of this File object as a new File object, or undefined if no parent exists.
        
        Attribute: Example
        use Libraries.System.File

        // Get the parent directory of our working directory (remember, File points to our working directory if we don't set a path).
        File workingDir
        File parentDir = workingDir:GetParentDirectory()

        // Is there a parent directory?
        if parentDir not= undefined
            print parentDir:GetPath()
        else
            print "There is no parent to our working directory."
        end
     */
    action GetParentDirectory returns File
        text parentPath = GetParentDirectoryNative() // will be an absolute path.
        
        // We can't create a parent object if there is no parent... (e.g., path is "C:\" on windows or "/" on *nix)
        if parentPath = ""
            return undefined
        end

        File parentFile
        parentFile:SetAbsolutePath(parentPath)
        return parentFile
    end

    /*
        Obtain the amount of unallocated hard drive space on the drive this
        path represents. For example, if our path starts with "C:\" on
        Windows systems, this will return the amount of free disk space on
        the "C" drive. On Unix and Mac OS X systems, the drive being referenced depends
        greatly on the system configuration.

        Attribute: Returns the amount of unallocated hard drive space in bytes. This value will always be a whole number.

        Attribute: Example
        use Libraries.System.File

        // How much disk space is available on C in gigabytes?
        File cDir
        cDir:SetAbsolutePath("C:\")
        number amount = cDir:GetFreeDiskSpace() / 1024 / 1024 / 1024 // conversion from bytes to kilobytes, kilobytes to megabytes, megabytes to gigabytes
        print "Drive C has " + amount + " GB free."

        // How much disk space is available on the root drive? (Mac and Unix/Linux only).
        File root
        root:SetAbsolutePath("/")
        amount = root:GetFreeDiskSpace() / 1024 / 1024 / 1024 // conversion from bytes to kilobytes, kilobytes to megabytes, megabytes to gigabytes
        print "The root drive has " + amount + " GB free."
     */
    system action GetFreeDiskSpace returns number

    /*
        Obtain the total amount of hard drive space on the drive this path
        represents. This is the total capacity of the disk.
        For example, if our path starts with "C:\" on
        Windows systems, this will return the capacity of the "C" drive.
        On Unix and Mac OS X systems, the drive being referenced depends
        greatly on the system configuration.

        Attribute: Returns the capacity of the hard disk in bytes. This value will always be a whole number.

        Attribute: Example
        use Libraries.System.File

        // How much disk space is available on C in gigabytes?
        File cDir
        cDir:SetAbsolutePath("C:\")
        number amount = cDir:GetTotalDiskSpace() / 1024 / 1024 / 1024 // conversion from bytes to kilobytes, kilobytes to megabytes, megabytes to gigabytes
        print "Drive C has a total capacity of " + amount + " GB."

        // How much disk space is available on the root drive? (Mac and Unix/Linux only).
        File root
        root:SetAbsolutePath("/")
        amount = root:GetTotalDiskSpace() / 1024 / 1024 / 1024 // conversion from bytes to kilobytes, kilobytes to megabytes, megabytes to gigabytes
        print "The root drive has a total capacity of  " + amount + " GB."
     */
    system action GetTotalDiskSpace returns number

    /*
        Get the total size of the file represented by this File object. This is the total
        number of bytes this file contains, but doesn't necessarily say how much disk space
        this file takes on disk. This action only returns a meaningful value for files; for directories, the value is
        always 0.

        Attribute: Returns the file size in bytes. This may be 0 if the file does not exist, the path is a directory, or the path is invalid.

        Attribute: Example
        use Libraries.System.File

        // How big is the "notepad" program on Windows?
        File notepad
        notepad:SetAbsolutePath("C:\Windows\notepad.exe")
        print "Notepad is " + notepad:GetFileSize() + " bytes."
     */
    system action GetFileSize returns number

    /*
        Obtain a list of files and directories in the directory specified by this File object. If this File object does not represent
        a directory, undefined is returned.

        Attribute: Returns an indexable collection of File objects representing files and folders in the path of this File object. Returns undefined if this File object does not point to a directory.

        Attribute: Example
        use Libraries.System.File
        use Libraries.Containers.Blueprints.Indexed

        // Get the first item (alphabetical order) listed in C:\.
        File cDrive
        cDrive:SetAbsolutePath("C:\")
        Indexed<File> items = cDrive:GetDirectoryListing()
        print items:Get(0) 
     */
    action GetDirectoryListing returns Indexed<File>
        if me:IsDirectory()
            Text listingString
            listingString:SetValue(GetDirectoryListingNative())

            // Each object in the directory listing is delimited by a newline
            // character. An example listing might be, for the path, "/Users/jeff",
            //
            // "/Users/jeff/Documents"
            // "/Users/jeff/Music"
            // ... etc ... 
            Array<text> paths = listingString:Split(GetSystemNewline())
            Iterator<text> i = paths:GetIterator()
            Array<File> files
            repeat while i:HasNext()
                text p = i:Next()
                File fileToAdd
                fileToAdd:SetAbsolutePath(p)
                files:Add(fileToAdd)
            end

            return files
        else
            return undefined
        end
    end

    /*
        Obtain the date and time this file or directory was last modified. Typically,
        this is the date and time either the contents of the file (or directory) changed,
        or it was renamed.

        Attribute: Returns the modified date and time as a DateTime object, or undefined if the path represented by this File object does not exist.

        Attribute: Example
        use Libraries.System.File
        use Libraries.System.DateTime

        // When was "Program Files" last modified?
        File programFiles
        programFiles:SetAbsolutePath("C:\Program Files")
        DateTime date
        if date not= undefined
            print "Program files was last modified on" + date:GetMonth() + "/" + date:GetDayOfMonth() + "/" + date:GetYear()
        else
            print "Program files does not have any data. This is likely not a Windows system."
        end
     */
    action GetLastModifiedDate returns DateTime
        if me:Exists()
            DateTime date
            number unixTimeStamp = GetLastModifiedNative()
            date:SetEpochTime(unixTimeStamp)
            return date
        else
            return undefined
        end
    end

    /*
        Delete the path specified by this File object. This operation does not send items to the appropriate recycle bin or trash can
        folder on the system, and it cannot be easily undone (if at all). This operation can only be used to delete single files
        or empty directories.

        Attribute: Returns True if the operation succeeds; false otherwise.

        Attribute: Example
        use Libraries.System.File

        // Create a directory and delete it.
        File myDir
        myDir:SetAbsolutePath("C:\Users\jeff\My Documents\A_New_Folder")
        myDir:CreateDirectory()
        boolean ok = myDir:Delete() // delete it

        if ok
            print "deletion succeeded."
        else
            print "deletion failed."
        end
     */
    system action Delete returns boolean

    /*
        Create the directory specified in the path by this File object. This can only be used to create a single directory; it is not possible
        to create an entire path using this action. As an example, if the path "C:\blah\bb" does not already exist under "C:\", we cannot
        create all three directories in this path:

        C:\blah\bb\foo

        Rather, we would create each individually (see example below).

        Attribute: Returns True if directory creation succeeds; false otherwise.

        Attribute: Example
        use Libraries.System.File

        // Create a directory in /Users/jeff called "oldMusic".
        File oldMusicDir
        oldMusicDir:SetAbsolutePath("/Users/jeff/oldMusic")
        oldMusicDir:CreateDirectory()

        // Construct the path "C:\blah\bb\foo" from the text above.
        File blah
        File bb
        File foo
        blah:SetAbsolutePath("C:\blah")
        bb:SetAbsolutePath("C:\blah\bb")
        foo:SetAbsolutePath("C:\blah\bb\foo")

        boolean blahCreated = blah:CreateDirectory()
        boolean bbCreated = bb:CreateDirectory()
        boolean fooCreated = foo:CreateDirectory()

        if blahCreated and bbCreated and fooCreated
            print "Successfully built path C:\blah\bb\foo"
        end
     */ 
    system action CreateDirectory returns boolean

    /*
        Move the file (or directory) specified to the new path specified.
        The behavior of this action is highly dependent on the platform
        and file system; always check the return value to ensure success.

        Attribute: Parameter newPath the new path to move the file to. May be an absolute path or a relative path.

        Attribute: Returns True if the move succeeds; false otherwise.

        Attribute: Example
        use Libraries.System.File

        // Move a file from one directory to another.
        File f
        f:SetAbsolutePath("/Users/jeff/Music/Untitled.mp3")
        boolean moveSucceeded = f:Move("/Users/jeff/oldMusic/Untitled.mp3")
        if moveSucceeded
            print "Move succeeded."
        else
            print "Move failed."
        end

        // Move can also be used to rename a file.
        File renameMe
        renameMe:SetAbsolutePath("/Users/jeff/Music/Untitled.mp3")
        moveSucceeded = renameMe:Move("/Users/jeff/Music/Toccata and Fugue.mp3")
        if moveSucceeded
            print "Move succeeded."
        else
            print "Move failed."
        end
     */
    system action Move(text newPath) returns boolean

    /*
        Open this file for sequential reading. See the documentation of
        FileReaderBlueprint for more information on sequential reading.

        Attribute: Returns A FileReaderBlueprint that may be used to read this
        file sequentially.

        Attribute: Example
        use Libraries.System.File
        use Libraries.System.Blueprints.FileReaderBlueprint

        // Open a file for sequential reading and print all of its contents.
        File f
        f:SetAbsolutePath("/Users/jeff/dictionary.txt")
        FileReaderBlueprint reader = f:OpenForRead()
        print reader:Read()
        f:Close() // we're done with the file, see Close() documentation.
     */
    action OpenForRead returns FileReaderBlueprint
        if me:IsFile()
            FileReader r
            reader = r
            reader:OpenForRead(me)
            return reader
        end

        return undefined
    end

    /*
        Open this file for sequential writing. See the documentation of
        FileWriterBlueprint for more information on sequential writing.

        Attribute: Returns A FileWriterBlueprint that may be used to write this
        file sequentially.

        Attribute: Example
        use Libraries.System.File
        use Libraries.System.Blueprints.FileWriterBlueprint

        // Open a file for sequential writing and write a few lines.
        File f
        f:SetAbsolutePath("/Users/jeff/dictionary.txt")
        FileWriterBlueprint writer = f:OpenForWrite()

        // Create a small dictionary.
        writer:WriteLine("abstraction")
        writer:WriteLine("kafkaesque")
        writer:WriteLine("quarry")

        f:Close() // we're done with the file, see Close() documentation.
     */
    action OpenForWrite returns FileWriterBlueprint
        if me:IsFile()
            FileWriter w
            writer = w
            writer:OpenForWrite(me)
            return writer
        end

        return undefined
    end

    /*
        Open this file for sequential writing. This differs from the OpenForWrite()
        method, as the previous contents of the file (if any) are preserved. See
        the documentation of FileWriterBlueprint for more information on sequential
        writing.

        Attribute: Returns A fileWriterBlueprint that supports sequential file writing.

        Attribute: Example
        use Libraries.System.File
        use Libraries.System.Blueprints.FileWriterBlueprint

        // Open a file for sequential writing and write a few lines, preserving the old contents.
        File f
        f:SetAbsolutePath("/Users/jeff/dictionary.txt")
        FileWriterBlueprint writer = f:OpenForWriteAppend()

        // Add a few new words to our dictionary.
        writer:WriteLine("concrete")
        writer:WriteLine("freudian")
        writer:WriteLine("steep")

        f:Close() // we're done with the file, see Close() documentation.
     */
    action OpenForWriteAppend returns FileWriterBlueprint
        if me:IsFile()
            FileWriter w
            writer = w
            writer:OpenForWriteAppend(me)
            return writer
        end

        return undefined
    end

    /*
        Open this file for random access. "Random access" implies that reading
        and/or writing to the file can occur in a non-sequential fashion. See
        FileRandomAccessBlueprint's documentaiton for more information.

        Attribute: Returns A FileRandomAccessBlueprint, sufficient for random access to the file's contents.

        Attribute: Example
        use Libraries.System.File
        use Libraries.System.Blueprints.FileWriterBlueprint

        // Open a file for sequential writing and write a few lines.
        File f
        f:SetAbsolutePath("/Users/jeff/dictionary.txt")
        FileWriterBlueprint writer = f:OpenForWrite()

        // Create a small dictionary.
        writer:WriteLine("abstraction")
        writer:WriteLine("kafkaesque")
        writer:WriteLine("quarry")

        f:Close() // we're done with the file, see Close() documentation.
     */
    action OpenForRandomAccess returns FileRandomAccessBlueprint
        if me:IsFile()
            FileRandomAccess ra
            randomAccess = ra
            randomAccess:OpenForRandomAccess(me)
            return randomAccess
        end

        return undefined
    end

    /*
        If this file has been opened for reading, writing, or random access
        (see the actions OpenForRead(), OpenForWrite(), OpenForWriteAppend()
        and OpenForRandomAccess()), this action should be called to "close"
        the file. "Closing" a file means releasing it back to the operating
        system so that other programs may use it.

        Attribute: Example
        use Libraries.System.File
        use Libraries.System.Blueprints.FileWriterBlueprint

        // Open a file for sequential writing and write a few lines. Then, close it.
        File f
        f:SetAbsolutePath("/Users/jeff/dictionary.txt")
        FileWriterBlueprint writer = f:OpenForWrite()

        // Create a small dictionary.
        writer:WriteLine("abstraction")
        writer:WriteLine("kafkaesque")
        writer:WriteLine("quarry")

        f:Close() // we're done with the file
     */ 
    action Close
        // Close any open readers/writers/accessors. If the user mistakenly
        // opened up several, we can close them.
        if reader not= undefined
            reader:Close()
        end

        if writer not= undefined
            writer:Close()
        end

        if randomAccess not= undefined
            randomAccess:Close()
        end
    end

    /*
        Read all of the contents of a file immediately into a string. When using
        this method, it is not required to call Close(). If the file does not
        exist, a FileNotFoundError will be raised. If the file cannot be opened
        for other reasons, an InputOutputError will be raised.

        Attribute: Returns everything in the file.

        Attribute: Example
        use Libraries.System.File

        // Open our dictionary and read all the contents at once. Print them.
        File dict
        dict:SetAbsolutePath("/Users/jeff/dictionary.txt")
        print dict:Read() // print all the contents to screen.
     */
    action Read returns text
        FileReader r
        r:OpenForRead(me)
        text result = r:Read()
        r:Close()
        return result
    end

    /*
        Write all text contained in 'textToWrite' to the specified file. This will
        erase all previous contents of the file. If the file cannot be created,
        an InputOutputError will be raised.

        Attribute: Example
        use Libraries.System.File
        use Libraries.System.Blueprints.FileWriterBlueprint

        // Write a single line to the file.
        File f
        f:SetAbsolutePath("/Users/jeff/ASimpleMessage.txt")
        text message = "Anything I put in here will magically appear in the file."
        f:Write(message)

        // It is also possible to write multiple lines, like so:
        f:SetAbsolutePath("/Users/jeff/AComplexMessage.txt")
        text message ="This is the first line
and here's another."
        f:Write(message)
     */
    action Write(text textToWrite)
        FileWriter w
        w:OpenForWrite(me)
        w:Write(textToWrite)
        w:Close()
    end
end