package Libraries.Robots

/*
The Robot class represents a physical robot. When a Robot object is instantiated,
it is automatically connected to the controller. After which we can make the 
robot perform different actions like moving the robot front, back and in a circle. 
The robot has two bumpers, left bumper and right bumper namely. The robot has 
three wheels, left wheel, right wheel and center wheel. It also has four cliff 
sensors namely, left cliff sensor, left front cliff sensor, right cliff sensor, 
and right front cliff sensor. The speed with which the robot moves has to be 
mentioned. Speed range for all commands is 20-500mm/s.

Attribute: Example

use Libraries.Robots.Robot

// Declaraing the Robot
Robot robot
// Move the robot straight, at 200 millimeters per second
robot:MoveStraight(200)
// The Robot wheels are stopped
robot:StopWheels()
// Connection between the robot and the controller is broke
robot:Disconnect()
*/

class Robot 
    on create
        Connect()
    end
    /*
        The robot can be only controlled using the the controller. Inorder to do 
        so we need to first set a connection between the robot and the controller. 
        This action sets a connection between the robot and the controller. Once
        the connection is made, robot can now be controlled by the controller.
        
        Attribute: Example
        
        Robot robot
        // Set connection between the robot and the controller
        robot:Connect()
    */
    system action Connect()
    
    /*
        This action breaks the connection between the robot and the controller. 
        Once the connection between the robot and the controller is broken, we 
        can no longer control the robot. Inorder to control the robot again we 
        have to make a connection between the robot and the controller again.
        
        Attribute: Example
        
        Robot robot
        robot:MoveStraight(200)
        //break the connection between the robot and the controller
        robot:Disconnect()
    */

    system action Disconnect()

    /*
        This action halts/stops the wheels of the Robot without making any 
        further movement.
        
        Attribute: Example
        
        Robot robot
        robot:MoveStraight(500)
        //Robot wheels are halted. 
        robot:StopWheels()
    */
    system action StopWheels()

    /*
        This action moves the Robot front in a straight line at the specified speed.
        
        Attribute: Parameter speed is in millimeters per second, speed with 
        which the robot will move

        Attribute: Example
        
        Robot robot
        // drives the robot straight, at 100 mm/s
        robot:MoveStraight(100)
        robot:StopWheels()
    */
    system action MoveStraight(integer speed)

    /*
        This action moves the Robot in a straight line at the specified speed,
        for a specified distance.
        
        Attribute: Parameter speed is in millimeters per second, distance in 
        millimeters

        Attribute: Example
        
        Robot robot
        // drives the robot straight, at 100 mm/s for 0.5 meters
        robot:MoveStraight(100, 500)
        robot:StopWheels()
    */
    system action MoveStraight(integer speed, number distance)

    /*
        This action moves the Robot with different speeds for each wheel. The 
        left wheel and right wheel speeds of the robot are specified. Giving 
        different values for left and right wheel makes the robot move in a zig 
        zag manner. Giving same values for left and right wheel makes the robot 
        move in a striaght line. Giving negative values for the left wheel and
        positive values for the right wheel makes the robot turn left. Giving 
        negative values for the right wheel and positive values for the left 
        wheel makes the robot turn right.
        
        Attribute: Parameter rightWheelspeed is the speed of the right wheel in 
        millimeters per second, leftWheelspeed is the speed of the left wheel in 
        millimeters per second.

        Attribute: Example
        
        Robot robot
        // drives the robot front with left wheel at speed 100mm/s and 
        // right wheel at speed 300 mm/s
        robot:MoveWithRightLeftSpeed(100, 300)
        robot:StopWheels()
    */
    system action MoveWheels(integer rightWheelspeed, integer leftWheelspeed)

    /*
        This action moves the Robot in a circle whose radius is specified.
        
        Attribute: Parameter speed is in millimeters per second, radius is in 
        millimeters per second. Radius is the radius of the circle, along which 
        the robot moves.

        Attribute: Example
        
        Robot robot
        Button button
        repeat while button:IsBlackButtonPressed = false
            // drives the robot in an arc at 100 mm/s, circle radius is 150 mm  
            // until black button is pressed.
            robot:MoveAsCurve(100, 150)
        end
        robot:StopWheels()
    */
    system action MoveInCirle(integer speed, integer radius)
    /*
        This action turns the Robot left with the specified angle and speed.
        
        Attribute: Parameter angle is in degrees, speed is in mm/s.

        Attribute: Example
        
        Robot robot
        // turns the robot left by 90 degrees at speed 150mm/s
        robot:TurnLeft(90, 150)
        robot:StopWheels()
    */
    system action TurnLeft(integer angle, integer speed) 
    /*
        This action turns the Robot right with the specified angle and speed.
        
        Attribute: Parameter angle is in degrees, speed is in mm/s.

        Attribute: Example
        
        Robot robot
        // turns the robot right by 90 degrees at speed 150mm/s
        robot:TurnRight(90, 150)
        robot:StopWheels()
    */
    system action TurnRight(integer angle, integer speed) 

    /*
        This action tells if the left bumper of the Robot is currently being 
        pressed or not.
        
        Attribute: Parameter lag is in seconds, is the time lag with in which
        the bumper is checked to see if it is pressed or not.

        Attribute : Returns true if left bumper is pressed, otherwise returns
        false

        Attribute: Example
        
        Robot rob
        rob:SetConnection()
        // turns the robot right by 90 degrees at speed 200mm/s if 
        // left bumper is pressed.
        if rob:IsLeftBumperpressed(0.1)
            rob:TurnRight(90, 200)
        end
        rob:StopWheels()
    */
    system action IsLeftBumperTriggered(number lag) returns boolean
    /*
        This action tells if the right bumper of the Robot is currently being 
        pressed or not.
        
        Attribute: Parameter lag is in seconds, is the time lag with in which
        the bumper is checked to see if it is pressed or not.

        Attribute : Returns true if right bumper is pressed, otherwise returns
        false

        Attribute: Example
        
        Robot rob
        rob:SetConnection()
        // turns the robot left by 90 degrees at speed 200mm/s if 
        // right bumper is pressed.
        if rob:IsRightBumperpressed(0.1)
            rob:TurnLeft(90, 200)
        end
        rob:StopWheels()
    */

    system action IsRightBumperTriggered(number lag) returns boolean

    /*
        This action checks if the center wheel of the robot is dropped or is 
        standing safe on land.
        
        Attribute: Parameter lag is in seconds, is the time lag with in which
        the center wheel is checked to see if it is dropped or not.

        Attribute : Returns true if center wheel is drooped, otherwise returns
        false

        Attribute: Example
        
        Robot rob
        rob:SetConnection()
        // if center wheel of the robot is dropped, the robot is stopped
        if rob:IsCenterWheelDropped(0.1)
            rob:StopWheels()
            print "Center wheel is dropped."
        end
        rob:Disconnect()
    */
    system action IsCenterWheelTriggered(number lag) returns boolean

    /*
        This action checks if the left wheel of the robot is dropped or is 
        standing safe on land.
        
        Attribute: Parameter lag is in seconds, is the time lag with in which
        the left wheel is checked to see if it is dropped or not.

        Attribute : Returns true if left wheel is drooped, otherwise returns
        false

        Attribute: Example
        
        Robot rob
        rob:SetConnection()
        if rob:IsLeftWheelDropped(0.1)
            rob:StopWheels()
            print "Left wheel is dropped."
        end
        rob:Disconnect()
    */

    system action IsLeftWheelTriggered(number lag) returns boolean
    
    /*
        This action checks if the right wheel of the robot is dropped or is 
        standing safe on land.
        
        Attribute: Parameter lag is in seconds, is the time lag with in which
        the right wheel is checked to see if it is dropped or not.

        Attribute : Returns true if right wheel is drooped, otherwise returns
        false

        Attribute: Example
        
        Robot rob
        rob:SetConnection()
        if rob:IsRightWheelDropped(0.1)
            rob:StopWheels()
            print "Right wheel is dropped."
        end
        rob:Disconnect()
    */
    system action IsRightWheelTriggered(number lag) returns boolean
    
    /*
        This action makes the robot to spin/rotate in the Clockwise direction at
        the specified speed continuously.
        Angle is irrelevant here.
        
        Attribute: Parameter speed in mm/s.

        Attribute: Example
        
        Robot rob
        Button b
        rob:SetConnection()
        // robot turns in clockwise direction continuously until button A is pressed.
        repeat while() b:IsAButtonPressed()
            rob:TurnClockwise(120)
        end
        rob:StopWheels()
        rob:Disconnect()
    */
    system action TurnClockwise(integer speed)
    
    /*
        This action makes the robot to spin/rotate in the counter Clockwise direction at
        the specified speed continuously.
        Angle is irrelevant here.
        
        Attribute: Parameter speed in mm/s.

        Attribute: Example
        
        Robot robot
        Button button
        robot:SetConnection()
        // robot turns in counter clockwise direction continuously until 
        // button B is pressed
        repeat while button:IsBButtonPressed()
            robot:TurnCounterClockwise(100)
        end
        robot:StopWheels()
        robot:Disconnect()
    */
    system action TurnCounterClockwise(integer speed)

    /*
        This action ckecks if the left cliff sensor is over a cliff or over a 
        black line.
        
        Attribute: Parameter lag is in seconds, is the time with in which data is
        gathered.

        Attribute: Returns true if left cliff sensor is over a cliff or a black 
        line, otherwise returns false.

        Attribute: Example
        
        Robot robot
        Button button
        // robot turns in counter clockwise direction continuously until 
        // left cliff sensor detects a cliff
        repeat while rob:IsLeftSensorTriggered(0.1) = false
            robot:TurnCounterClockwise(100)
        end
        robot:StopWheels()
        robot:Disconnect()
    */
    system action IsLeftSensorTriggered() returns boolean
    /*
        This action is similar to the previous function except, it 
        ckecks if the right cliff sensor is over a cliff or over a 
        black line.
       
        Attribute: Returns true if right cliff sensor is over a cliff or a black 
        line, otherwise returns false.
    */
    system action IsRightSensorTriggered() returns boolean

    /*
        This action is similar to the previous function except, it 
        ckecks if the left front cliff sensor is over a cliff or over a 
        black line.
        

        Attribute: Returns true if left front cliff sensor is over a cliff or a 
        black line, otherwise returns false.
    */
    system action IsLeftFrontSensorTriggered() returns boolean
    
    /*
        This action is similar to the previous function except, it 
        ckecks if the right front cliff sensor is over a cliff or over a 
        black line.

        Attribute: Returns true if right front cliff sensor is over a cliff or a 
        black line, otherwise returns false.
    */
    system action IsRightFrontSensorTriggered() returns boolean
end