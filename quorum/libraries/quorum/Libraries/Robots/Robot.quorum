package Libraries.Robots

/*
The Robot class represents a physical iRobot Create. iRobot Create is a primitive
robot or we can say it is a complete robot development kit that allows you to 
program some fundamental robot behaviors.
When a Robot object is instantiated, it is automatically connected to the controller
in the safe mode. The robot has four operating modes: Off, Passive, Safe and Full.
After which we can make the robot perform different actions like moving the robot 
front, back and in a circle. The robot has two bumpers, left bumper and right 
bumper namely. The robot has three wheels, left wheel, right wheel and center wheel. 
It also has four cliff sensors namely, left cliff sensor, left front cliff sensor, 
right cliff sensor, and right front cliff sensor. The cliff sensors are nothing 
but the IR sensors. The speed with which the robot moves has to be mentioned. 
Speed range for all commands is 20-500millimeters/second.

You can attach and control other hardware and electronic devices to iRobot Create;
Such as a robotic arm, light display, or a ranging sensor. It can also become a 
musical instrument! By using some of the song commands. We can write and save up 
to 16 songs in iRobot Create.


Attribute: Example

use Libraries.Robots.Robot

// Declaraing the Robot
Robot robot
// Move the robot straight, at 200 millimeters per second
robot:MoveStraight(200)
// The Robot wheels are stopped
robot:StopWheels()
// Connection between the robot and the controller is broke
robot:Disconnect()
*/

class Robot 
    on create
        Connect()
    end
    /*
        The robot can be only controlled using the the controller. Inorder to do 
        so we need to first set a connection between the robot and the controller. 
        This action sets a connection between the robot and the controller. Once
        the connection is made, robot can now be controlled by the controller.
        
        Attribute: Example
        
        Robot robot
        // Set connection between the robot and the controller
        robot:Connect()
    */
    system action Connect()
    
    /*
        This action breaks the connection between the robot and the controller. 
        Once the connection between the robot and the controller is broken, we 
        can no longer control the robot. Inorder to control the robot again we 
        have to make a connection between the robot and the controller again.
        
        Attribute: Example
        
        Robot robot
        robot:MoveStraight(200)
        //break the connection between the robot and the controller
        robot:Disconnect()
    */

    system action Disconnect()

    /*
        This action halts/stops the wheels of the Robot without making any 
        further movement.
        
        Attribute: Example
        
        Robot robot
        robot:MoveStraight(500)
        //Robot wheels are halted. 
        robot:StopWheels()
    */
    system action StopWheels()

    /*
        This action moves the Robot front in a straight line at the specified speed.
        
        Attribute: Parameter speed is in millimeters per second, speed with 
        which the robot will move

        Attribute: Example
        
        Robot robot
        // drives the robot straight, at 100 millimeters/second
        robot:MoveStraight(100)
        robot:StopWheels()
    */
    system action MoveStraight(integer speed)

    /*
        This action moves the Robot in a straight line at the specified speed,
        for a specified distance.
        
        Attribute: Parameter speed is in millimeters per second, distance in 
        millimeters

        Attribute: Example
        
        Robot robot
        // drives the robot straight, at 100 millimeters/second for 0.5 meters
        robot:MoveStraight(100, 500)
        robot:StopWheels()
    */
    system action MoveStraight(integer speed, number distance)

    /*
        This action moves the Robot with different speeds for each wheel. The 
        left wheel and right wheel speeds of the robot are specified. Giving 
        different values for left and right wheel makes the robot move in a zig 
        zag manner. Giving same values for left and right wheel makes the robot 
        move in a striaght line. Giving negative values for the left wheel and
        positive values for the right wheel makes the robot turn left. Giving 
        negative values for the right wheel and positive values for the left 
        wheel makes the robot turn right.
        
        Attribute: Parameter rightWheelspeed is the speed of the right wheel in 
        millimeters per second, leftWheelspeed is the speed of the left wheel in 
        millimeters per second.

        Attribute: Example
        
        Robot robot
        // drives the robot front with left wheel at speed 100 millimeters/second and 
        // right wheel at speed 300 millimeters/second
        robot:MoveWithRightLeftSpeed(100, 300)
        robot:StopWheels()
    */
    system action MoveWheels(integer rightWheelspeed, integer leftWheelspeed)

    /*
        This action moves the Robot in a circle whose radius is specified.
        
        Attribute: Parameter speed is in millimeters per second, radius is in 
        millimeters per second. Radius is the radius of the circle, along which 
        the robot moves.

        Attribute: Example
        
        Robot robot
        Button button
        repeat while button:IsBlackButtonPressed = false
            // drives the robot in an arc at 100 millimeters/second, 
            // circle radius is 150 millimeters
            // until black button is pressed.
            robot:MoveAsCurve(100, 150)
        end
        robot:StopWheels()
    */
    system action MoveInCirle(integer speed, integer radius)
    /*
        This action turns the Robot left with the specified amount of turn and speed.
        One turn is considered as 360 degrees. So if we need to turn the robot 
        left by 90 degrees(quater turn), we need to say robot:TurnLeft(0.25 ,150) 
        or robot:TurnLeft(90.0/360.0 ,150). However robot:TurnLeft(90/360 ,150)
        does not work.
        The degrees turned left might not be very precise here, it is 
        approximately +/-5 degrees.
        
        Attribute: Parameter turn is number of turns, where one turn is 360 degrees, 
                   speed is in millimeters/s.

        Attribute: Example
        
        Robot robot
        // robot makes 2 complete left turns at speed 150 millimeters/second
        robot:TurnLeft(720.0/360.0,150)
        robot:StopWheels()

        Attribute: Example
        
        Robot robot
        // robot does not make any turn, as 90/360 = 0
        // use 90.0/360.0 to make the robot turn left by 90 degrees
        robot:TurnLeft(90/360,150)
        robot:StopWheels()
    */
    system action TurnLeft(number turn, integer speed) 
    /*
        This action turns the Robot right with the specified amount of turn and speed.
        One turn is considered as 360 degrees. So if we need to turn the robot 
        right by 90 degrees(quater turn), we need to say robot:TurnRight(0.25 ,150) 
        or robot:TurnRight(90.0/360.0 ,150). However robot:TurnRight(90/360 ,150)
        does not work.
        The degrees turned right might not be very precise here, it is 
        approximately +/-5 degrees.
        
        Attribute: Parameter turn is number of turns, where one turn is 360 degrees, 
                   speed is in millimeters/s.

        Attribute: Example
        
        Robot robot
        // robot makes 2 complete right turns at speed 150 millimeters/second
        robot:TurnRight(720.0/360.0,150)
        robot:StopWheels()

        Attribute: Example
        
        Robot robot
        // robot does not make any turn, as 90/360 = 0
        // use 90.0/360.0 to make the robot turn right by 90 degrees
        robot:TurnRight(90/360,150)
        robot:StopWheels()
    */
    system action TurnRight(number turn, integer speed) 

    /*
        This action tells if the left bumper of the Robot is currently being 
        pressed or not.
        
        Attribute: Parameter lag is in seconds, is the time lag with in which
        the bumper is checked to see if it is pressed or not.

        Attribute : Returns true if left bumper is pressed, otherwise returns
        false

        Attribute: Example
        
        Robot robot
        // turns the robot right by 90 degrees at speed 200 millimeters/second if 
        // left bumper is pressed.
        if robot:IsLeftBumperpressed(0.1)
            robot:TurnRight(90.0/360.0, 200)
        end
        robot:StopWheels()
    */
    system action IsLeftBumperTriggered(number lag) returns boolean
    /*
        This action tells if the right bumper of the Robot is currently being 
        pressed or not.
        
        Attribute: Parameter lag is in seconds, is the time lag with in which
        the bumper is checked to see if it is pressed or not.

        Attribute : Returns true if right bumper is pressed, otherwise returns
        false

        Attribute: Example
        
        Robot robot
        // turns the robot left by 90 degrees at speed 200 millimeters/second if 
        // right bumper is pressed.
        if robot:IsRightBumperpressed(0.1)
            robot:TurnLeft(0.25, 200)
        end
        robot:StopWheels()
    */

    system action IsRightBumperTriggered(number lag) returns boolean

    /*
        This action checks if the center wheel of the robot is dropped or is 
        standing safe on land.
        
        Attribute: Parameter lag is in seconds, is the time lag with in which
        the center wheel is checked to see if it is dropped or not.

        Attribute : Returns true if center wheel is drooped, otherwise returns
        false

        Attribute: Example
        
        Robot robot
        // if center wheel of the robot is dropped, the robot is stopped
        if robot:IsCenterWheelDropped(0.1)
            robot:StopWheels()
            print "Center wheel is dropped."
        end
        robot:StopWheels()
        robot:Disconnect()
    */
    system action IsCenterWheelTriggered(number lag) returns boolean

    /*
        This action checks if the left wheel of the robot is dropped or is 
        standing safe on land.
        
        Attribute: Parameter lag is in seconds, is the time lag with in which
        the left wheel is checked to see if it is dropped or not.

        Attribute : Returns true if left wheel is drooped, otherwise returns
        false

        Attribute: Example
        
        Robot robot
        if robot:IsLeftWheelDropped(0.1)
            robot:StopWheels()
            print "Left wheel is dropped."
        end
        robot:StopWheels()
        robot:Disconnect()
    */

    system action IsLeftWheelTriggered(number lag) returns boolean
    
    /*
        This action checks if the right wheel of the robot is dropped or is 
        standing safe on land.
        
        Attribute: Parameter lag is in seconds, is the time lag with in which
        the right wheel is checked to see if it is dropped or not.

        Attribute : Returns true if right wheel is drooped, otherwise returns
        false

        Attribute: Example
        
        Robot robot
        if robot:IsRightWheelDropped(0.1)
            robot:StopWheels()
            print "Right wheel is dropped."
        end
        robot:StopWheels()
        robot:Disconnect()
    */
    system action IsRightWheelTriggered(number lag) returns boolean
    
    /*
        This action makes the robot to spin/rotate in the Clockwise direction at
        the specified speed continuously.
        Angle is irrelevant here.
        
        Attribute: Parameter speed in millimeters/second.

        Attribute: Example
        
        Robot robot
        Button button
        // robot turns in clockwise direction continuously until button A is pressed.
        repeat while() b:IsAButtonPressed()
            robot:TurnClockwise(120)
        end
        robot:StopWheels()
        robot:Disconnect()
    */
    system action TurnClockwise(integer speed)
    
    /*
        This action makes the robot to spin/rotate in the counter Clockwise direction at
        the specified speed continuously.
        Angle is irrelevant here.
        
        Attribute: Parameter speed in millimeter/second.

        Attribute: Example
        
        Robot robot
        Button button
        robot:SetConnection()
        // robot turns in counter clockwise direction continuously until 
        // button B is pressed
        repeat while button:IsBButtonPressed()
            robot:TurnCounterClockwise(100)
        end
        robot:StopWheels()
        robot:Disconnect()
    */
    system action TurnCounterClockwise(integer speed)

    /*
        This action checks if the left cliff sensor is over a cliff or over a 
        black line. The cliff sensor is an IR sensor. For example if the robot
        is falling from a table this sensor is triggered.

        Attribute: Returns true if left cliff sensor is over a cliff or a black 
        line, otherwise returns false.

        Attribute: Example
        
        Robot robot
        Button button
        // robot turns in counter clockwise direction continuously until 
        // left cliff sensor detects a cliff
        repeat while rob:IsLeftSensorTriggered(0.1) = false
            robot:TurnCounterClockwise(100)
        end
        robot:StopWheels()
        robot:Disconnect()
    */
    system action IsLeftSensorTriggered() returns boolean
    /*
        This action is similar to the previous function except, it 
        ckecks if the right cliff sensor is over a cliff or over a 
        black line.
       
        Attribute: Returns true if right cliff sensor is over a cliff or a black 
        line, otherwise returns false.
    */
    system action IsRightSensorTriggered() returns boolean

    /*
        This action is similar to the previous function except, it 
        ckecks if the left front cliff sensor is over a cliff or over a 
        black line.
        

        Attribute: Returns true if left front cliff sensor is over a cliff or a 
        black line, otherwise returns false.
    */
    system action IsLeftFrontSensorTriggered() returns boolean
    
    /*
        This action is similar to the previous function except, it 
        ckecks if the right front cliff sensor is over a cliff or over a 
        black line.

        Attribute: Returns true if right front cliff sensor is over a cliff or a 
        black line, otherwise returns false.
    */
    system action IsRightFrontSensorTriggered() returns boolean
    
    /*
        This action returns the total accumulated angle the robot has turned 
        since it was turned on or the robot angle was set. 
        Turning left(or Counter Clockwise) direction increases this value, 
        while turning right(or Clockwise) direction decreases this value.
        
        Attribute: Returns the total accumulated angle in degrees.

        Attribute: Example
        Robot robot
        robot:TurnRight(90.0/360.0, 100)
        robot:TurnLeft(180.0/360.0, 100)
        // the value of angle is -90+180 = +90 degrees
        // -90 degrees for turning right, +180 degrees for turning left
        integer angle = robot:GetTotalAngle()
        robot:StopWheels()
    */
    system action GetTotalAngle() returns integer
    
    /*
        This action sets the total accumulated angle of the robot to the specified  
        degrees.
        
        Attribute: Parameter angle is in degrees.

        Attribute: Example
        Robot robot
        robot:TurnRight(90.0/360.0, 100)
        robot:TurnLeft(180.0/360.0, 100)
        // the total accumulated angle is +90 degrees.
        // the below command sets the total accumulated angle to 0 degrees.
        integer angle = robot:SetTotalAngle(0)
        robot:StopWheels()
    */
    system action SetTotalAngle(integer angle)
    
    /*
        This action returns the total accumulated distance the robot has moved 
        since it was turned on or the robot distance was set. 
        Moving forward increases this value, while moving backwards decreases 
        this value.
        
        Attribute: Returns the total accumulated distance in millimeters.

        Attribute: Example
        Robot robot
        // robot moves forward for 500 millimeters at the speed of 
        // 100 millimters/second
        repeate while robot:GetTotalDistance() < 500
            robot:MoveStraight(100)
        robot:StopWheels()
    */
    system action GetTotalDistance() returns integer
    
    /*
        This action sets the total accumulated distance of the robot to the specified  
        millimeters.
        
        Attribute: Parameter distance is in millimeters.

        Attribute: Example
        Robot robot
        repeate while robot:GetTotalDistance() < 500
            robot:MoveStraight(100)
        // the total accumulated distance of the robot is set to 0 millimeters.
        robot:SetTotalDistance(0)
        robot:StopWheels()
    */
    system action SetTotalDistance(integer distance)
   
    /*
        This action sets color and brightness of the power led button. Color 0 
        means red and color 255 means green. By giving a value in between 0 and 
        255 gives different variations of red color(like Amber);
        brightness 0 means no brightness, brightness 255 means maximum brightness, 
        giving a value in between 0 and 255 gives different variations of brightness.
        
        Attribute: Parameter color is an integer, color 0 is red and 255 green.
        Parameter brightness is an integer, brightness 0 is off and 255 is full 
        brightness.

        Attribute: Example
        Robot robot
        // Sets the power led to red with full brightness.
        robot:SetPowerLed(0,255)
    */
    system action SetPowerLed(integer color, integer brightness)
    
    /*
        This action is used to switch on and off the Advance led. Passing true 
        turns on the Advance led on, false turns off the Advance led.
        
        Attribute: Parameter on is boolean, true turns the Advance led on, false 
        turns off the Advance led.

        Attribute: Example
        Robot robot
        // Sets off the Advance led.
        robot:SetAdvanceLed(false)
    */
    system action SetAdvanceLed(boolean on)
    
    /*
        This action is used to switch on and off the Play led. Passing true 
        turns on the Play led on, false turns off the Play led.
        
        Attribute: Parameter on is boolean, true turns the Play led on, false 
        turns off the Play led.

        Attribute: Example
        Robot robot
        // Sets on the Play led.
        robot:SetPlayLed(true)
    */
    system action SetPlayLed(boolean on)
    
    /*
        This action sets the mode of the robot. The robot has four operating 
        modes: Off, Passive, Safe and Full. 0 means off mode, 1 means passive
        mode, 3 means safe mode and 4 means full mode. By default the robot is 
        connected in the safe mode. When the robot is in the off mode, as the 
        name says the robot is off. In passive mode we can request and receive 
        data from the robot actuators(motors, sensors, lights), but we cannot 
        control any of these actuators(parameters sent to these actuators).
        In order to do so we need to switch to either safe mode or full mode.
        In safe mode we can control robot using all commands, however in this mode,
        if the robot detects a cliff, or if any of the wheel is dropped, or if 
        the robot charger is plugged in, the robot stops all motors and reverts 
        to the passive mode. In full mode we have complete control over the robot.
        We can make the robot move in any way we wish to, even if its a bad move.
        For example, the robot will not stop and disconnect, even if it is 
        picked up(wheel dropped) or if the cliff sensors are triggered.

        Attribute: Parameter mode is an integer. 0 means off mode, 1 means passive
        mode, 3 means safe mode and 4 means full mode.

        Attribute: Example
        Robot robot
        // robot is set in the full mode
        robot:SetMode(4)
    */
    system action SetMode(integer mode)
   
     /*
        This action gets the mode of the robot. The robot has four operating 
        modes: Off, Passive, Safe and Full. 0 means off mode, 1 means passive
        mode, 3 means safe mode and 4 means full mode. By default the robot is 
        connected in the safe mode. When the robot is in the off mode, as the 
        name says the robot is off. In passive mode we can request and receive 
        data from the robot actuators(motors, sensors, lights), but we cannot 
        control any of these actuators(parameters sent to these actuators).
        In order to do so we need to switch to either safe mode or full mode.
        In safe mode we can control robot using all commands, however in this mode,
        if the robot detects a cliff, or if any of the wheel is dropped, or if 
        the robot charger is plugged in, the robot stops all motors and reverts 
        to the passive mode. In full mode we have complete control over the robot.
        We can make the robot move in any way we wish to, even if its a bad move.
        For example, the robot will not stop and disconnect, even if it is 
        picked up(wheel dropped) or if the cliff sensors are triggered.

        Attribute: Returns mode which is an integer. 0 means off mode, 1 means 
        passive mode, 3 means safe mode and 4 means full mode.

        Attribute: Example
        Robot robot
        // 3 is returned, as the default mode for the robot is safe mode.
        integer mode = robot:GetMode()
    */
    system action GetMode() returns integer 
    
    /*
        This action starts running a built-in demo. There are 9 built-in demos.
        Please refer the documentation for more details about the demo.

        Attribute: Parameter demo is an integer; demo can have a value: -1, 0 to 9.

        Attribute: Example
        Robot robot
        // demo 4 is a Drive Figure Eight, robot continuously moves in a figure 
        // 8 pattern
        robot:RunDemo(4)
    */
    system action RunDemo(integer demo)

    system action PlaySong(integer num)
    
    system action LoadSong(integer num)
    
end