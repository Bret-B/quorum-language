package Libraries.Sound

/*
    This class generates music from the Music Instrument Digital Interface
    (MIDI) standard. 

    Attribute: Author Andy Stefik and Jeff Wilson
    Attribute: Example

use Libraries.Sound.Music

Music music
//play me a chromatic scale
integer note = 60
repeat 12 times
    music:Play(note, 0.25)
    note = note + 1
end
*/

use Libraries.Sound.Note
use Libraries.Sound.Chord
use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator

class Music
    private integer ticksPerWholeNote = 384 // 96 * 4
    private integer beatsPerMinute = 120 // A pretty standard tempo
    private List<Instrument> instruments
    private List<Track> tracks
    private Instrument currentInstrument

    public integer breve = ticksPerWholeNote * 2
    public integer wholeNote = ticksPerWholeNote
    public integer halfNote = ticksPerWholeNote / 2
    public integer quarterNote = ticksPerWholeNote / 4
    public integer eighthNote = ticksPerWholeNote / 8
    public integer sixteenthNote = ticksPerWholeNote / 16
    public integer thirtySecondthNote = ticksPerWholeNote / 32
    public integer sixtyFourthNote = ticksPerWholeNote / 64

    private system action AddNoteForChord(integer note)
    private system action PlayChord(number length, number volume, number lengthInSeconds)
    private system action StartSong()
    private system action StartTrack(integer instrument)
    private system action AddNoteToTrack(integer note, number volume, number onPos, number offPos)
    private system action PlaySongNative()
    private system action GetTempoNative() returns integer
    private system action SetTempoNative(integer beatsPerMinute)
    private system action GetCurrentInstrumentName() returns text
    private system action GetCurrentInstrumentNumber() returns integer
    private system action SetCurrentInstrument(integer index)
    private system action GetInstrumentName(integer index) returns text

    private action ComputeNoteSeconds(number length) returns number
        number beatsPerSecond = beatsPerMinute / 60.0
        number ticksPerSecond = beatsPerSecond * quarterNote
        number noteLen = length / ticksPerSecond
        
        return noteLen
    end

    public system action Play(integer note, number duration, number volume)
    
    on create
        // Populate the instruments list
        integer index = 0
        text name = "not an instrument"

        repeat until name = ""
            Instrument i
            name = GetInstrumentName(index)
            i:SetName(name)
            i:SetValue(index)
            index = index + 1
            instruments:Add(i)
        end
    end

    /*
        Plays a single note. 

        Attribute: Parameter note the midi value of a note. Middle C is 60,
            for example.

        Attribute: Parameter duration the number of seconds the note should play.

        Attribute: Example
        Music music
        music:Play(60, 1.0)
    */
    public action Play(integer note, number duration)
        Play(note, duration, 1.0)
    end

    public action Play(Note note)
        number noteLen = ComputeNoteSeconds(note:GetLength())

        Play(note:GetPitch(), noteLen, note:GetVolume())
    end

    public action Play(Chord chord)
        Iterator<integer> notes = chord:GetPitches()

        repeat while notes:HasNext()
            integer note = notes:Next()
            
            AddNoteForChord(note)
        end
        
        // Now actually play the chord
        number noteLen = ComputeNoteSeconds(chord:GetLength())
        PlayChord(chord:GetLength(), chord:GetVolume(), noteLen)
    end
    
    public action PlayMidi(text path)
    end
    
    public action PlayWave(text path)
    end
    
    public action SaveMidi(text path)
    end

    /*public action SaveWave(text path)
    end*/

    public action PlaySong()
        // The StartSong() native method will clean up the native side for
        // new song generation.
        StartSong()

        // Since all times are put into the system relatively, we have to
        // convert them to absolute timings. We do that by adding to this
        // variable the start time of each event. Time '0' is our start time.
        number currentTime = 0

        // Loop through all tracks and get *all* events.
        Iterator<Track> trackIterator = tracks:GetIterator()
        
        // Get each event and handle them as necessary. For now, there are only
        // Playable events, but as others are added, they will need to be
        // dumped here to be managed and sent to the native side.
        repeat while trackIterator:HasNext()
            Track track = trackIterator:Next()
            Instrument ti = track:GetInstrument()
            integer instrumentIndex = ti:GetValue()
            StartTrack(instrumentIndex) // start a new track on the native side with the appropriate instrument.

            Iterator<MusicEvent> events = track:GetEvents()
            repeat while events:HasNext()
                MusicEvent event = events:Next()

                // Handle playable events first.
                if event is a Playable then
                    Playable p = cast(Playable, event)
                    
                    // We must keep track of the current time to convert
                    // all relative times to absolute time, since this is what
                    // the Java MIDI library requires.
                    currentTime = currentTime + p:GetStartTime()
                    
                    if event is a Note then
                        // Single notes can just be dumped directly into the track.
                        Note n = cast(Note, event)
                        AddNoteToTrack(n:GetPitch(), n:GetVolume(), currentTime, currentTime + n:GetLength())
                    end
                    else if event is a Chord then
                        // Chords must be dumped one note at a time. All notes
                        // start at the same time, so advancing the time is
                        // not required.
                        Chord c = cast(Chord, event)
                        Iterator<integer> notes = c:GetPitches()

                        repeat while notes:HasNext()
                            integer note = notes:Next()
                            
                            AddNoteToTrack(note, c:GetVolume(), currentTime, currentTime + c:GetLength())
                        end
                    end
                end
            end
        end

        PlaySongNative()
    end

    public action GetTempo() returns integer
        return beatsPerMinute
    end

    public action GetTrack(integer index) returns Track
        return tracks:Get(index)
    end

    public action GetTracks() returns Iterator<Track>
        return tracks:GetIterator()
    end

    public action GetInstrument(integer index) returns Instrument
        return instruments:Get(index)
    end

    public action GetInstruments() returns Iterator<Instrument>
        return instruments:GetIterator()
    end
    
    public action GetTicksPerWholeNote() returns integer
        return ticksPerWholeNote
    end

    public action AddTrack() returns Track
        Track t
        t:SetInstrument(currentInstrument)
        tracks:Add(t)
        return t
    end

    public action SetTempo(integer beatsPerMinute)
        me:beatsPerMinute = beatsPerMinute
        me:SetTempoNative(beatsPerMinute)
    end

    public action SetInstrument(Instrument instrument)
        me:currentInstrument = instrument
        SetCurrentInstrument(currentInstrument:GetValue())
    end
end