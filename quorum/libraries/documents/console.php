<?php include("include/header.php"); ?>
<script type="text/javascript">
    document.title = 'A description of the command line arguments available in Quorum';
</script>
<h1>Command Line Arguments available in Quorum</h1>
<p>
    When we invoke Quorum through a command prompt (such as cmd.exe on windows, 
    or Terminal on Mac), we can optionally specify various parameters to make 
    Quorum compile programs. The general syntax for this is as follows:
</p>
<p><pre class="code"><code>
quorum [flags] [files]
</code></pre></p>
<p>
    Note that if we choose to specify command line flags, they must be specified 
    <i>before</i> the name of the file(s) we wish to send to Quorum.
</p>
<h2>A First Example</h2>
<p>
    Say we wanted to run a program named hello.quorum, containing the following 
    code:
</p>
<p><pre class="code"><code>
class Hello
    action Main
        say &quot;Hello world&quot;
    end
end
</code></pre></p>
<p>
    To do this, we would invoke Quorum in the following way:
</p>
<p><pre class="code"><code>
quorum -interpret hello.quorum
</code></pre></p>
<h2>Command Line Flags</h2>
<h3>-interpret</h3>
<p>
    This flag will cause the Quorum Virtual Machine to execute your code. If we 
    created a basic &quot;Hello World&quot; application and wanted to instantly 
    see the results, we might type:
</p>
<p><pre class="code"><code>
quorum -interpret HelloWorld.quorum
</code></pre></p>
<h3>-compile</h3>
<p>
    This flag will make Quorum compile our code into Java bytecode that can 
    then be executed. This flag is the default setting; when set, your program 
    will not automatically run. If we wanted to compile a simple 
    &quot;hello world&quot; program and then run it, one might type:
</p>
<p><pre class="code"><code>
quorum -compile HelloWorld.quorum
</code></pre></p>
<p>
    followed by
</p>
<p><pre class="code"><code>
java -jar ./Run/Default.jar
</code></pre></p>
<p>
    which will invoke the newly compiled program. One alternative to this 
    approach would to navigate in the command prompt to the distribute folder 
    first, then execute the program from there. We can do this with the following 
    commands:
</p>
<p><pre class="code"><code>
cd distribute
java -jar ./Default.jar
</code></pre></p>
<h3>-document</h3>
<p>
    This flag will cause Quorum to generate documentation for our code, in a 
    combination of hostable PHP code for the web and HTML. The code generated will
    include full documentation for all libraries passed to the compiler plus
    a set of wrapper web-pages for learning about Quorum. This command places the 
    documentation into a folder labeled &quot;Documentation.&quot; For those
    that wish just the HTML pages generated by the compiler, the index file is 
    named library-index.html and all corresponding generated libraries (and dependencies)
    can be found under Documentation/Libraries.
</p>
<p><pre class="code"><code>
quorum -document HelloWorld.quorum
</code></pre></p>
<h3>-name {name}</h3>
<p>
    This flag tells Quorum what name to give to a newly compiled program. If, 
    for example, we wanted to compile a simple &quot;hello world&quot; program 
    and name the resulting program &quot;Hello,&quot; we would type
</p>
<p><pre class="code"><code>
quorum -name Hello HelloWorld.quorum
</code></pre></p>
<p>
    followed by
</p>
<p><pre class="code"><code>
java -jar ./Run/Hello.jar
</code></pre></p>
<h3>-help</h3>
<p>
    This flag will display help information on screen, similar to the 
    documentation listed in this wiki page.
</p>

<h3>-web</h3>
<p>
    Instead of compiling, this command causes Quorum to start a basic web 
 server, for testing web page generation libraries. To start the server,
 you must pass a valid executable file (e.g., a .jar generated by Quorum). 

</p>
<p><pre class="code"><code>
quorum -web default.jar
</code></pre></p>
<?php include("include/footer.php"); ?>