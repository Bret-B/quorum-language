/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.accessibility.windows;

import java.util.HashMap;
import java.util.Iterator;
import javax.swing.DefaultListModel;
import org.accessibility.options.AccessibilityOptions;
import org.sodbeans.phonemic.SpeechVoice;
import org.sodbeans.phonemic.TextToSpeechFactory;
import org.sodbeans.phonemic.tts.TextToSpeech;
import org.sodbeans.phonemic.tts.TextToSpeechEngine;

public final class GeneralPanel extends javax.swing.JPanel {
    private TextToSpeech speech = TextToSpeechFactory.getDefaultTextToSpeech();
    private final GeneralOptionsPanelController controller;
    HashMap<String, TextToSpeechEngine> engineHash = new HashMap<String, TextToSpeechEngine>();
    HashMap<String, SpeechVoice> voiceHash = new HashMap<String, SpeechVoice>();
    private int engineIndex = 0;
    private int voiceIndex = 0;
    
    GeneralPanel(GeneralOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        engineList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        voiceList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        selfVoicingCheckBox = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        speechRequestCheckBox = new javax.swing.JCheckBox();
        talkingDebuggerCheckBox = new javax.swing.JCheckBox();
        beepOnErrorCheckBox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        magnificationCheckBox = new javax.swing.JCheckBox();
        speedSlider = new javax.swing.JSlider();
        speedLabel = new javax.swing.JLabel();
        volumeLabel = new javax.swing.JLabel();
        volumeSlider = new javax.swing.JSlider();
        pitchLabel = new javax.swing.JLabel();
        pitchSlider = new javax.swing.JSlider();
        jLabel8 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();

        engineList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        engineList.setToolTipText(org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.engineList.toolTipText")); // NOI18N
        jScrollPane1.setViewportView(engineList);

        voiceList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        voiceList.setToolTipText(org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.voiceList.toolTipText")); // NOI18N
        jScrollPane2.setViewportView(voiceList);

        jLabel1.setLabelFor(engineList);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.jLabel1.text")); // NOI18N

        jLabel2.setLabelFor(voiceList);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(selfVoicingCheckBox, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.selfVoicingCheckBox.text")); // NOI18N
        selfVoicingCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.selfVoicingCheckBox.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(speechRequestCheckBox, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.speechRequestCheckBox.text")); // NOI18N
        speechRequestCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.speechRequestCheckBox.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(talkingDebuggerCheckBox, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.talkingDebuggerCheckBox.text")); // NOI18N
        talkingDebuggerCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.talkingDebuggerCheckBox.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(beepOnErrorCheckBox, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.beepOnErrorCheckBox.text")); // NOI18N
        beepOnErrorCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.beepOnErrorCheckBox.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(magnificationCheckBox, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.magnificationCheckBox.text")); // NOI18N
        magnificationCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.magnificationCheckBox.toolTipText")); // NOI18N

        speedLabel.setLabelFor(speedSlider);
        org.openide.awt.Mnemonics.setLocalizedText(speedLabel, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.speedLabel.text")); // NOI18N
        speedLabel.setToolTipText(org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.speedLabel.toolTipText")); // NOI18N

        volumeLabel.setLabelFor(volumeSlider);
        org.openide.awt.Mnemonics.setLocalizedText(volumeLabel, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.volumeLabel.text")); // NOI18N
        volumeLabel.setToolTipText(org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.volumeLabel.toolTipText")); // NOI18N

        pitchLabel.setLabelFor(pitchSlider);
        org.openide.awt.Mnemonics.setLocalizedText(pitchLabel, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.pitchLabel.text")); // NOI18N
        pitchLabel.setToolTipText(org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.pitchLabel.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.jLabel8.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(speedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(pitchLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(volumeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pitchSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(volumeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(speedSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jSeparator2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(talkingDebuggerCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(selfVoicingCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(beepOnErrorCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(speechRequestCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(magnificationCheckBox)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(5, 5, 5)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selfVoicingCheckBox)
                    .addComponent(speechRequestCheckBox)
                    .addComponent(magnificationCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(talkingDebuggerCheckBox)
                    .addComponent(beepOnErrorCheckBox))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(speedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(speedLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(volumeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(volumeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pitchSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pitchLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        loadEngineVoices();
        selfVoicingCheckBox.setSelected(AccessibilityOptions.isSelfVoicing());
        speechRequestCheckBox.setSelected(AccessibilityOptions.isSpeechOnRequest());
        talkingDebuggerCheckBox.setSelected(AccessibilityOptions.isTalkingDebugging());
        beepOnErrorCheckBox.setSelected(AccessibilityOptions.isSoundOnError());
        magnificationCheckBox.setSelected(AccessibilityOptions.isMagnificationOn());
        speedSlider.setValue(AccessibilityOptions.getSpeechSpeed());
        volumeSlider.setValue(AccessibilityOptions.getSpeechVolume());
        pitchSlider.setValue(AccessibilityOptions.getSpeechPitch());
    }

    private void loadEngineVoices() {
        if(speech != null) {
            String speechEngine = AccessibilityOptions.getSpeechEngine();
            Iterator<TextToSpeechEngine> engines = speech.getAvailableEngines();
            DefaultListModel engineModel = new DefaultListModel();
            int i = 0;
            while(engines.hasNext()) {
                TextToSpeechEngine next = engines.next();
                engineHash.put(next.getEngineName(), next);
                engineModel.addElement(next.getEngineName());
                if(next.getEngineName().compareTo(speechEngine) == 0) {
                    engineIndex = i;
                }
                i = i + 1;
            }
            engineList.setModel(engineModel);
            if(i > 0) {
                engineList.setSelectedIndex(engineIndex);
            }
            
            String selectedVoice = AccessibilityOptions.getSelectedVoice();
            Iterator<SpeechVoice> voices = speech.getAvailableVoices();
            DefaultListModel voiceModel = new DefaultListModel();
            i = 0;
            while(voices.hasNext()) {
                SpeechVoice next = voices.next();
                voiceHash.put(next.getName(), next);
                voiceModel.addElement(next.getName());
                if(next.getName().compareTo(selectedVoice) == 0) {
                    voiceIndex = i;
                }
                i = i + 1;
            }
            
            voiceList.setModel(voiceModel);
            if(i > 0) {
                voiceList.setSelectedIndex(voiceIndex);
            }
        }
    }
    
    void store() {
        String engine = (String) engineList.getSelectedValue();
        AccessibilityOptions.setSpeechEngine(engine);
        String voice = (String) voiceList.getSelectedValue();
        AccessibilityOptions.setSelectedVoice(voice);
        
        AccessibilityOptions.setSelfVoicing(selfVoicingCheckBox.isSelected());
        AccessibilityOptions.setSpeechOnRequest(speechRequestCheckBox.isSelected());
        AccessibilityOptions.setTalkingDebugging(talkingDebuggerCheckBox.isSelected());
        AccessibilityOptions.setSoundOnError(beepOnErrorCheckBox.isSelected());
        AccessibilityOptions.setMagnificationOn(magnificationCheckBox.isSelected());
        AccessibilityOptions.setSpeechSpeed(speedSlider.getValue());
        AccessibilityOptions.setSpeechVolume(volumeSlider.getValue());
        AccessibilityOptions.setSpeechPitch(pitchSlider.getValue());
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox beepOnErrorCheckBox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JList engineList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JCheckBox magnificationCheckBox;
    private javax.swing.JLabel pitchLabel;
    private javax.swing.JSlider pitchSlider;
    private javax.swing.JCheckBox selfVoicingCheckBox;
    private javax.swing.JCheckBox speechRequestCheckBox;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JSlider speedSlider;
    private javax.swing.JCheckBox talkingDebuggerCheckBox;
    private javax.swing.JList voiceList;
    private javax.swing.JLabel volumeLabel;
    private javax.swing.JSlider volumeSlider;
    // End of variables declaration//GEN-END:variables
}
